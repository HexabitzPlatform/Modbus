
test_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c60  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009030  08009030  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009030  08009030  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009030  08009030  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  20000010  08009048  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  08009048  00021738  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0bd  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb9  00000000  00000000  0003b0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  0003fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00041490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a19  00000000  00000000  00042a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021aaa  00000000  00000000  00063449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4dbd  00000000  00000000  00084ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139cb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  00139d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008d08 	.word	0x08008d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08008d08 	.word	0x08008d08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2201      	movs	r2, #1
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 febe 	bl	8000fcc <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 f994 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	2000002c 	.word	0x2000002c
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_DMA_Init+0x38>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_DMA_Init+0x38>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_DMA_Init+0x38>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2103      	movs	r1, #3
 80002c6:	2009      	movs	r0, #9
 80002c8:	f000 fe5a 	bl	8000f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002cc:	2009      	movs	r0, #9
 80002ce:	f000 fe6c 	bl	8000faa <HAL_NVIC_EnableIRQ>

}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	40021000 	.word	0x40021000

080002e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e0:	b5b0      	push	{r4, r5, r7, lr}
 80002e2:	b08c      	sub	sp, #48	; 0x30
 80002e4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80002e6:	2300      	movs	r3, #0
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80002ea:	232c      	movs	r3, #44	; 0x2c
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	2101      	movs	r1, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 fe24 	bl	8003f3e <osSemaphoreCreate>
 80002f6:	0002      	movs	r2, r0
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_FREERTOS_Init+0x60>)
 80002fa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002fc:	2118      	movs	r1, #24
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	4a10      	ldr	r2, [pc, #64]	; (8000344 <MX_FREERTOS_Init+0x64>)
 8000302:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000304:	c331      	stmia	r3!, {r0, r4, r5}
 8000306:	ca11      	ldmia	r2!, {r0, r4}
 8000308:	c311      	stmia	r3!, {r0, r4}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f003 fdd9 	bl	8003ec6 <osThreadCreate>
 8000314:	0002      	movs	r2, r0
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_FREERTOS_Init+0x68>)
 8000318:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4a0b      	ldr	r2, [pc, #44]	; (800034c <MX_FREERTOS_Init+0x6c>)
 800031e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000320:	c313      	stmia	r3!, {r0, r1, r4}
 8000322:	ca03      	ldmia	r2!, {r0, r1}
 8000324:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f003 fdcb 	bl	8003ec6 <osThreadCreate>
 8000330:	0002      	movs	r2, r0
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_FREERTOS_Init+0x70>)
 8000334:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b00c      	add	sp, #48	; 0x30
 800033c:	bdb0      	pop	{r4, r5, r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	20000058 	.word	0x20000058
 8000344:	08008d38 	.word	0x08008d38
 8000348:	20000050 	.word	0x20000050
 800034c:	08008d4c 	.word	0x08008d4c
 8000350:	20000054 	.word	0x20000054

08000354 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800035c:	2001      	movs	r0, #1
 800035e:	f003 fdda 	bl	8003f16 <osDelay>
 8000362:	e7fb      	b.n	800035c <StartTask02+0x8>

08000364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	240c      	movs	r4, #12
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2314      	movs	r3, #20
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f008 fcbe 	bl	8008cf6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_GPIO_Init+0x8c>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_GPIO_Init+0x8c>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	02c9      	lsls	r1, r1, #11
 80003a0:	430a      	orrs	r2, r1
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x8c>)
 80003a6:	695a      	ldr	r2, [r3, #20]
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	02db      	lsls	r3, r3, #11
 80003ac:	4013      	ands	r3, r2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	01db      	lsls	r3, r3, #7
 80003b6:	480f      	ldr	r0, [pc, #60]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	0019      	movs	r1, r3
 80003bc:	f001 faa0 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	01d2      	lsls	r2, r2, #7
 80003c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	2201      	movs	r2, #1
 80003cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003de:	0019      	movs	r1, r3
 80003e0:	0010      	movs	r0, r2
 80003e2:	f001 f83d 	bl	8001460 <HAL_GPIO_Init>

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b009      	add	sp, #36	; 0x24
 80003ec:	bd90      	pop	{r4, r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000400 	.word	0x48000400

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 fd08 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f818 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f7ff ffae 	bl	8000364 <MX_GPIO_Init>
  MX_DMA_Init();
 8000408:	f7ff ff4c 	bl	80002a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800040c:	f000 f96c 	bl	80006e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000410:	f000 f99c 	bl	800074c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000414:	f000 f9ca 	bl	80007ac <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000418:	f000 f9f8 	bl	800080c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800041c:	f000 fa26 	bl	800086c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 8000420:	f000 fa58 	bl	80008d4 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8000424:	f7ff fefc 	bl	8000220 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000428:	f7ff ff5a 	bl	80002e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800042c:	f003 fd43 	bl	8003eb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x38>
	...

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b099      	sub	sp, #100	; 0x64
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	242c      	movs	r4, #44	; 0x2c
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2334      	movs	r3, #52	; 0x34
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f008 fc56 	bl	8008cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	231c      	movs	r3, #28
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2310      	movs	r3, #16
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f008 fc4e 	bl	8008cf6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045a:	003b      	movs	r3, r7
 800045c:	0018      	movs	r0, r3
 800045e:	231c      	movs	r3, #28
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f008 fc47 	bl	8008cf6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000468:	0021      	movs	r1, r4
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2220      	movs	r2, #32
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2201      	movs	r2, #1
 8000474:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2202      	movs	r2, #2
 800047a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	22c0      	movs	r2, #192	; 0xc0
 8000480:	0252      	lsls	r2, r2, #9
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	22e0      	movs	r2, #224	; 0xe0
 8000488:	0392      	lsls	r2, r2, #14
 800048a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	220f      	movs	r2, #15
 8000490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	187b      	adds	r3, r7, r1
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fa51 	bl	800193c <HAL_RCC_OscConfig>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800049e:	f000 f86f 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	211c      	movs	r1, #28
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2207      	movs	r2, #7
 80004a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2202      	movs	r2, #2
 80004ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2101      	movs	r1, #1
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fdc1 	bl	8002048 <HAL_RCC_ClockConfig>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ca:	f000 f859 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 80004ce:	003b      	movs	r3, r7
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <SystemClock_Config+0xcc>)
 80004d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004da:	003b      	movs	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 ff43 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004f2:	f000 f845 	bl	8000580 <Error_Handler>
  }
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b019      	add	sp, #100	; 0x64
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	00040003 	.word	0x00040003

08000504 <StartDefaultTask>:

/* USER CODE BEGIN 4 */
void StartDefaultTask(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
HAL_UART_Transmit(&huart2, &n, 1, 0xffff);
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <StartDefaultTask+0x44>)
 800050e:	490f      	ldr	r1, [pc, #60]	; (800054c <StartDefaultTask+0x48>)
 8000510:	480f      	ldr	r0, [pc, #60]	; (8000550 <StartDefaultTask+0x4c>)
 8000512:	2201      	movs	r2, #1
 8000514:	f002 fb30 	bl	8002b78 <HAL_UART_Transmit>
eStatus=SetupModbusRTU(19200, MB_PAR_EVEN);
 8000518:	2396      	movs	r3, #150	; 0x96
 800051a:	01db      	lsls	r3, r3, #7
 800051c:	2101      	movs	r1, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f003 fc60 	bl	8003de4 <SetupModbusRTU>
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <StartDefaultTask+0x50>)
 800052a:	701a      	strb	r2, [r3, #0]

WriteModbusRegister(0x00, 0x00, n);
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <StartDefaultTask+0x48>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f003 fc7d 	bl	8003e34 <WriteModbusRegister>
//	  eStatus=SetupModbusRTU(19200, MB_PAR_EVEN);
//SetTimeOut(200);

	  c++;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <StartDefaultTask+0x54>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <StartDefaultTask+0x54>)
 8000542:	601a      	str	r2, [r3, #0]
HAL_UART_Transmit(&huart2, &n, 1, 0xffff);
 8000544:	e7e2      	b.n	800050c <StartDefaultTask+0x8>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	0000ffff 	.word	0x0000ffff
 800054c:	20000000 	.word	0x20000000
 8000550:	20000134 	.word	0x20000134
 8000554:	20000060 	.word	0x20000060
 8000558:	2000005c 	.word	0x2000005c

0800055c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d101      	bne.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056e:	f000 fc63 	bl	8000e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b002      	add	sp, #8
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40014400 	.word	0x40014400

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x50>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_MspInit+0x50>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x50>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x50>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_MspInit+0x50>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0549      	lsls	r1, r1, #21
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_MspInit+0x50>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	055b      	lsls	r3, r3, #21
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80005c6:	2302      	movs	r3, #2
 80005c8:	425b      	negs	r3, r3
 80005ca:	2200      	movs	r2, #0
 80005cc:	2103      	movs	r1, #3
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fcd6 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b002      	add	sp, #8
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	0019      	movs	r1, r3
 80005f6:	2015      	movs	r0, #21
 80005f8:	f000 fcc2 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005fc:	2015      	movs	r0, #21
 80005fe:	f000 fcd4 	bl	8000faa <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <HAL_InitTick+0xa8>)
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_InitTick+0xa8>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0289      	lsls	r1, r1, #10
 800060c:	430a      	orrs	r2, r1
 800060e:	619a      	str	r2, [r3, #24]
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <HAL_InitTick+0xa8>)
 8000612:	699a      	ldr	r2, [r3, #24]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	029b      	lsls	r3, r3, #10
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800061e:	230c      	movs	r3, #12
 8000620:	18fa      	adds	r2, r7, r3
 8000622:	2310      	movs	r3, #16
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fe79 	bl	8002320 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800062e:	f001 fe61 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8000632:	0003      	movs	r3, r0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	4914      	ldr	r1, [pc, #80]	; (800068c <HAL_InitTick+0xac>)
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fd64 	bl	8000108 <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	3b01      	subs	r3, #1
 8000644:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0xb0>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <HAL_InitTick+0xb4>)
 800064a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_InitTick+0xb0>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <HAL_InitTick+0xb8>)
 8000650:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_InitTick+0xb0>)
 8000654:	6a3a      	ldr	r2, [r7, #32]
 8000656:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_InitTick+0xb0>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_InitTick+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_InitTick+0xb0>)
 8000666:	0018      	movs	r0, r3
 8000668:	f001 ff84 	bl	8002574 <HAL_TIM_Base_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d105      	bne.n	800067c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_InitTick+0xb0>)
 8000672:	0018      	movs	r0, r3
 8000674:	f001 ffd6 	bl	8002624 <HAL_TIM_Base_Start_IT>
 8000678:	0003      	movs	r3, r0
 800067a:	e000      	b.n	800067e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b00a      	add	sp, #40	; 0x28
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000
 800068c:	000f4240 	.word	0x000f4240
 8000690:	20000064 	.word	0x20000064
 8000694:	40014400 	.word	0x40014400
 8000698:	000003e7 	.word	0x000003e7

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <DMA1_Ch1_IRQHandler+0x14>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fdf7 	bl	80012a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200003dc 	.word	0x200003dc

080006c4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <TIM16_IRQHandler+0x14>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fffc 	bl	80026c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000064 	.word	0x20000064

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 80006ee:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_USART1_UART_Init+0x60>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 80006f4:	22e1      	movs	r2, #225	; 0xe1
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 800072c:	2300      	movs	r3, #0
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	f003 fae7 	bl	8003d04 <HAL_RS485Ex_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800073a:	f7ff ff21 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000ac 	.word	0x200000ac
 8000748:	40013800 	.word	0x40013800

0800074c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	22e1      	movs	r2, #225	; 0xe1
 800075a:	0252      	lsls	r2, r2, #9
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	0018      	movs	r0, r3
 8000792:	f002 f95f 	bl	8002a54 <HAL_UART_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f7ff fef1 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000134 	.word	0x20000134
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART3_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b8:	22e1      	movs	r2, #225	; 0xe1
 80007ba:	0312      	lsls	r2, r2, #12
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f92f 	bl	8002a54 <HAL_UART_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f7ff fec1 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001bc 	.word	0x200001bc
 8000808:	40004800 	.word	0x40004800

0800080c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART4_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000818:	22e1      	movs	r2, #225	; 0xe1
 800081a:	0252      	lsls	r2, r2, #9
 800081c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART4_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART4_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART4_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <MX_USART4_UART_Init+0x58>)
 8000850:	0018      	movs	r0, r3
 8000852:	f002 f8ff 	bl	8002a54 <HAL_UART_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f7ff fe91 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000244 	.word	0x20000244
 8000868:	40004c00 	.word	0x40004c00

0800086c <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_USART5_UART_Init+0x64>)
 8000874:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000878:	22e1      	movs	r2, #225	; 0xe1
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART5_UART_Init+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_USART5_UART_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART5_UART_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_USART5_UART_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART5_UART_Init+0x60>)
 80008aa:	2210      	movs	r2, #16
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_USART5_UART_Init+0x60>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_USART5_UART_Init+0x60>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 f8cb 	bl	8002a54 <HAL_UART_Init>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART5_UART_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f7ff fe5d 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200002cc 	.word	0x200002cc
 80008d0:	40005000 	.word	0x40005000

080008d4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART6_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008e0:	22e1      	movs	r2, #225	; 0xe1
 80008e2:	0252      	lsls	r2, r2, #9
 80008e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART6_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART6_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART6_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART6_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART6_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_USART6_UART_Init+0x58>)
 8000918:	0018      	movs	r0, r3
 800091a:	f002 f89b 	bl	8002a54 <HAL_UART_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f7ff fe2d 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000354 	.word	0x20000354
 8000930:	40011400 	.word	0x40011400

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b095      	sub	sp, #84	; 0x54
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	243c      	movs	r4, #60	; 0x3c
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	2314      	movs	r3, #20
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f008 f9d5 	bl	8008cf6 <memset>
  if(uartHandle->Instance==USART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4ac5      	ldr	r2, [pc, #788]	; (8000c68 <HAL_UART_MspInit+0x334>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d16a      	bne.n	8000a2c <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000956:	4bc5      	ldr	r3, [pc, #788]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000958:	699a      	ldr	r2, [r3, #24]
 800095a:	4bc4      	ldr	r3, [pc, #784]	; (8000c6c <HAL_UART_MspInit+0x338>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	01c9      	lsls	r1, r1, #7
 8000960:	430a      	orrs	r2, r1
 8000962:	619a      	str	r2, [r3, #24]
 8000964:	4bc1      	ldr	r3, [pc, #772]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000966:	699a      	ldr	r2, [r3, #24]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	4013      	ands	r3, r2
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000970:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4bbe      	ldr	r3, [pc, #760]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	4bbd      	ldr	r3, [pc, #756]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0289      	lsls	r1, r1, #10
 800097c:	430a      	orrs	r2, r1
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	4bba      	ldr	r3, [pc, #744]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	029b      	lsls	r3, r3, #10
 8000988:	4013      	ands	r3, r2
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
 800098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	22b0      	movs	r2, #176	; 0xb0
 8000992:	0152      	lsls	r2, r2, #5
 8000994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2202      	movs	r2, #2
 800099c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2203      	movs	r2, #3
 80009a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2201      	movs	r2, #1
 80009ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	187a      	adds	r2, r7, r1
 80009b2:	2390      	movs	r3, #144	; 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fd51 	bl	8001460 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009be:	4bac      	ldr	r3, [pc, #688]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009c0:	4aac      	ldr	r2, [pc, #688]	; (8000c74 <HAL_UART_MspInit+0x340>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c4:	4baa      	ldr	r3, [pc, #680]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ca:	4ba9      	ldr	r3, [pc, #676]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d0:	4ba7      	ldr	r3, [pc, #668]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d6:	4ba6      	ldr	r3, [pc, #664]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009dc:	4ba4      	ldr	r3, [pc, #656]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009e2:	4ba3      	ldr	r3, [pc, #652]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009e4:	2220      	movs	r2, #32
 80009e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e8:	4ba1      	ldr	r3, [pc, #644]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009ee:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fbc7 	bl	8001184 <HAL_DMA_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80009fa:	f7ff fdc1 	bl	8000580 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 80009fe:	4a9e      	ldr	r2, [pc, #632]	; (8000c78 <HAL_UART_MspInit+0x344>)
 8000a00:	23a8      	movs	r3, #168	; 0xa8
 8000a02:	58d3      	ldr	r3, [r2, r3]
 8000a04:	499c      	ldr	r1, [pc, #624]	; (8000c78 <HAL_UART_MspInit+0x344>)
 8000a06:	220f      	movs	r2, #15
 8000a08:	4393      	bics	r3, r2
 8000a0a:	22a8      	movs	r2, #168	; 0xa8
 8000a0c:	508b      	str	r3, [r1, r2]
 8000a0e:	4a9a      	ldr	r2, [pc, #616]	; (8000c78 <HAL_UART_MspInit+0x344>)
 8000a10:	23a8      	movs	r3, #168	; 0xa8
 8000a12:	58d3      	ldr	r3, [r2, r3]
 8000a14:	4998      	ldr	r1, [pc, #608]	; (8000c78 <HAL_UART_MspInit+0x344>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	22a8      	movs	r2, #168	; 0xa8
 8000a1c:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a93      	ldr	r2, [pc, #588]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 8000a22:	675a      	str	r2, [r3, #116]	; 0x74
 8000a24:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <HAL_UART_MspInit+0x33c>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000a2a:	e118      	b.n	8000c5e <HAL_UART_MspInit+0x32a>
  else if(uartHandle->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_UART_MspInit+0x348>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d133      	bne.n	8000a9e <HAL_UART_MspInit+0x16a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	4b8d      	ldr	r3, [pc, #564]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	4b8c      	ldr	r3, [pc, #560]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8000a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b86      	ldr	r3, [pc, #536]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b85      	ldr	r3, [pc, #532]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0289      	lsls	r1, r1, #10
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b82      	ldr	r3, [pc, #520]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6e:	213c      	movs	r1, #60	; 0x3c
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2202      	movs	r2, #2
 8000a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	2390      	movs	r3, #144	; 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fce2 	bl	8001460 <HAL_GPIO_Init>
}
 8000a9c:	e0df      	b.n	8000c5e <HAL_UART_MspInit+0x32a>
  else if(uartHandle->Instance==USART3)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a77      	ldr	r2, [pc, #476]	; (8000c80 <HAL_UART_MspInit+0x34c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d133      	bne.n	8000b10 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa8:	4b70      	ldr	r3, [pc, #448]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	4b6f      	ldr	r3, [pc, #444]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	02c9      	lsls	r1, r1, #11
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	61da      	str	r2, [r3, #28]
 8000ab6:	4b6d      	ldr	r3, [pc, #436]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000ab8:	69da      	ldr	r2, [r3, #28]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	02db      	lsls	r3, r3, #11
 8000abe:	4013      	ands	r3, r2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b69      	ldr	r3, [pc, #420]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	4b68      	ldr	r3, [pc, #416]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	02c9      	lsls	r1, r1, #11
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	4b66      	ldr	r3, [pc, #408]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	02db      	lsls	r3, r3, #11
 8000ada:	4013      	ands	r3, r2
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ae0:	213c      	movs	r1, #60	; 0x3c
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	22c0      	movs	r2, #192	; 0xc0
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2203      	movs	r2, #3
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2204      	movs	r2, #4
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	4a5f      	ldr	r2, [pc, #380]	; (8000c84 <HAL_UART_MspInit+0x350>)
 8000b06:	0019      	movs	r1, r3
 8000b08:	0010      	movs	r0, r2
 8000b0a:	f000 fca9 	bl	8001460 <HAL_GPIO_Init>
}
 8000b0e:	e0a6      	b.n	8000c5e <HAL_UART_MspInit+0x32a>
  else if(uartHandle->Instance==USART4)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a5c      	ldr	r2, [pc, #368]	; (8000c88 <HAL_UART_MspInit+0x354>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d133      	bne.n	8000b82 <HAL_UART_MspInit+0x24e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b1c:	69da      	ldr	r2, [r3, #28]
 8000b1e:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0309      	lsls	r1, r1, #12
 8000b24:	430a      	orrs	r2, r1
 8000b26:	61da      	str	r2, [r3, #28]
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b2a:	69da      	ldr	r2, [r3, #28]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	031b      	lsls	r3, r3, #12
 8000b30:	4013      	ands	r3, r2
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	4b4c      	ldr	r3, [pc, #304]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0289      	lsls	r1, r1, #10
 8000b40:	430a      	orrs	r2, r1
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	4b49      	ldr	r3, [pc, #292]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	029b      	lsls	r3, r3, #10
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b52:	213c      	movs	r1, #60	; 0x3c
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2203      	movs	r2, #3
 8000b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2204      	movs	r2, #4
 8000b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	187a      	adds	r2, r7, r1
 8000b74:	2390      	movs	r3, #144	; 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fc70 	bl	8001460 <HAL_GPIO_Init>
}
 8000b80:	e06d      	b.n	8000c5e <HAL_UART_MspInit+0x32a>
  else if(uartHandle->Instance==USART5)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <HAL_UART_MspInit+0x358>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d132      	bne.n	8000bf2 <HAL_UART_MspInit+0x2be>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0349      	lsls	r1, r1, #13
 8000b96:	430a      	orrs	r2, r1
 8000b98:	61da      	str	r2, [r3, #28]
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	035b      	lsls	r3, r3, #13
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	02c9      	lsls	r1, r1, #11
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	02db      	lsls	r3, r3, #11
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000bc4:	213c      	movs	r1, #60	; 0x3c
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2218      	movs	r2, #24
 8000bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2202      	movs	r2, #2
 8000bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2204      	movs	r2, #4
 8000be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <HAL_UART_MspInit+0x350>)
 8000be8:	0019      	movs	r1, r3
 8000bea:	0010      	movs	r0, r2
 8000bec:	f000 fc38 	bl	8001460 <HAL_GPIO_Init>
}
 8000bf0:	e035      	b.n	8000c5e <HAL_UART_MspInit+0x32a>
  else if(uartHandle->Instance==USART6)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_UART_MspInit+0x35c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d130      	bne.n	8000c5e <HAL_UART_MspInit+0x32a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000bfe:	699a      	ldr	r2, [r3, #24]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000c02:	2120      	movs	r1, #32
 8000c04:	430a      	orrs	r2, r1
 8000c06:	619a      	str	r2, [r3, #24]
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	0289      	lsls	r1, r1, #10
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	615a      	str	r2, [r3, #20]
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_UART_MspInit+0x338>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	029b      	lsls	r3, r3, #10
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c30:	213c      	movs	r1, #60	; 0x3c
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2230      	movs	r2, #48	; 0x30
 8000c36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2203      	movs	r2, #3
 8000c48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	187a      	adds	r2, r7, r1
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fc01 	bl	8001460 <HAL_GPIO_Init>
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b015      	add	sp, #84	; 0x54
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	200003dc 	.word	0x200003dc
 8000c74:	40020008 	.word	0x40020008
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40004800 	.word	0x40004800
 8000c84:	48000400 	.word	0x48000400
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	40005000 	.word	0x40005000
 8000c90:	40011400 	.word	0x40011400

08000c94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <HAL_UART_MspDeInit+0xf4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d113      	bne.n	8000cce <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000ca8:	699a      	ldr	r2, [r3, #24]
 8000caa:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000cac:	4938      	ldr	r1, [pc, #224]	; (8000d90 <HAL_UART_MspDeInit+0xfc>)
 8000cae:	400a      	ands	r2, r1
 8000cb0:	619a      	str	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12);
 8000cb2:	23b0      	movs	r3, #176	; 0xb0
 8000cb4:	015a      	lsls	r2, r3, #5
 8000cb6:	2390      	movs	r3, #144	; 0x90
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fd47 	bl	8001750 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 faa4 	bl	8001214 <HAL_DMA_DeInit>

  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8000ccc:	e058      	b.n	8000d80 <HAL_UART_MspDeInit+0xec>
  else if(uartHandle->Instance==USART2)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_UART_MspDeInit+0x100>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d10c      	bne.n	8000cf2 <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000cda:	69da      	ldr	r2, [r3, #28]
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000cde:	492e      	ldr	r1, [pc, #184]	; (8000d98 <HAL_UART_MspDeInit+0x104>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000ce4:	2390      	movs	r3, #144	; 0x90
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	210c      	movs	r1, #12
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fd30 	bl	8001750 <HAL_GPIO_DeInit>
}
 8000cf0:	e046      	b.n	8000d80 <HAL_UART_MspDeInit+0xec>
  else if(uartHandle->Instance==USART3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_UART_MspDeInit+0x108>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d10d      	bne.n	8000d18 <HAL_UART_MspDeInit+0x84>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000cfe:	69da      	ldr	r2, [r3, #28]
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d02:	4927      	ldr	r1, [pc, #156]	; (8000da0 <HAL_UART_MspDeInit+0x10c>)
 8000d04:	400a      	ands	r2, r1
 8000d06:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8000d08:	23c0      	movs	r3, #192	; 0xc0
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <HAL_UART_MspDeInit+0x110>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f000 fd1d 	bl	8001750 <HAL_GPIO_DeInit>
}
 8000d16:	e033      	b.n	8000d80 <HAL_UART_MspDeInit+0xec>
  else if(uartHandle->Instance==USART4)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_UART_MspDeInit+0x114>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10c      	bne.n	8000d3c <HAL_UART_MspDeInit+0xa8>
    __HAL_RCC_USART4_CLK_DISABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d24:	69da      	ldr	r2, [r3, #28]
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d28:	4920      	ldr	r1, [pc, #128]	; (8000dac <HAL_UART_MspDeInit+0x118>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8000d2e:	2390      	movs	r3, #144	; 0x90
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	2103      	movs	r1, #3
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fd0b 	bl	8001750 <HAL_GPIO_DeInit>
}
 8000d3a:	e021      	b.n	8000d80 <HAL_UART_MspDeInit+0xec>
  else if(uartHandle->Instance==USART5)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_UART_MspDeInit+0x11c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_UART_MspDeInit+0xca>
    __HAL_RCC_USART5_CLK_DISABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d4c:	4919      	ldr	r1, [pc, #100]	; (8000db4 <HAL_UART_MspDeInit+0x120>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_UART_MspDeInit+0x110>)
 8000d54:	2118      	movs	r1, #24
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fcfa 	bl	8001750 <HAL_GPIO_DeInit>
}
 8000d5c:	e010      	b.n	8000d80 <HAL_UART_MspDeInit+0xec>
  else if(uartHandle->Instance==USART6)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_UART_MspDeInit+0x124>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d10b      	bne.n	8000d80 <HAL_UART_MspDeInit+0xec>
    __HAL_RCC_USART6_CLK_DISABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_UART_MspDeInit+0xf8>)
 8000d6e:	2120      	movs	r1, #32
 8000d70:	438a      	bics	r2, r1
 8000d72:	619a      	str	r2, [r3, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8000d74:	2390      	movs	r3, #144	; 0x90
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	2130      	movs	r1, #48	; 0x30
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 fce8 	bl	8001750 <HAL_GPIO_DeInit>
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	ffffbfff 	.word	0xffffbfff
 8000d94:	40004400 	.word	0x40004400
 8000d98:	fffdffff 	.word	0xfffdffff
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	fffbffff 	.word	0xfffbffff
 8000da4:	48000400 	.word	0x48000400
 8000da8:	40004c00 	.word	0x40004c00
 8000dac:	fff7ffff 	.word	0xfff7ffff
 8000db0:	40005000 	.word	0x40005000
 8000db4:	ffefffff 	.word	0xffefffff
 8000db8:	40011400 	.word	0x40011400

08000dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fc8c 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dea:	f007 ff57 	bl	8008c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fb03 	bl	80003f8 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e00:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8000e04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e08:	20001738 	.word	0x20001738

08000e0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_COMP_IRQHandler>
	...

08000e10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_Init+0x24>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_Init+0x24>)
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f7ff fbdd 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fbb1 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40022000 	.word	0x40022000

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000420 	.word	0x20000420

08000e5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000420 	.word	0x20000420

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	0002      	movs	r2, r0
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b7f      	cmp	r3, #127	; 0x7f
 8000e82:	d809      	bhi.n	8000e98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	001a      	movs	r2, r3
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_EnableIRQ+0x30>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	4091      	lsls	r1, r2
 8000e94:	000a      	movs	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
  }
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb8:	d828      	bhi.n	8000f0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <__NVIC_SetPriority+0xd4>)
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	33c0      	adds	r3, #192	; 0xc0
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	589b      	ldr	r3, [r3, r2]
 8000eca:	1dfa      	adds	r2, r7, #7
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	0011      	movs	r1, r2
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	21ff      	movs	r1, #255	; 0xff
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	43d2      	mvns	r2, r2
 8000ede:	401a      	ands	r2, r3
 8000ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	22ff      	movs	r2, #255	; 0xff
 8000ee8:	401a      	ands	r2, r3
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	4003      	ands	r3, r0
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef8:	481f      	ldr	r0, [pc, #124]	; (8000f78 <__NVIC_SetPriority+0xd4>)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	430a      	orrs	r2, r1
 8000f04:	33c0      	adds	r3, #192	; 0xc0
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f0a:	e031      	b.n	8000f70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <__NVIC_SetPriority+0xd8>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0019      	movs	r1, r3
 8000f14:	230f      	movs	r3, #15
 8000f16:	400b      	ands	r3, r1
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3306      	adds	r3, #6
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	3304      	adds	r3, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	400a      	ands	r2, r1
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	019b      	lsls	r3, r3, #6
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	401a      	ands	r2, r3
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	4003      	ands	r3, r0
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	001c      	movs	r4, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	4023      	ands	r3, r4
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	430a      	orrs	r2, r1
 8000f66:	3306      	adds	r3, #6
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	18c3      	adds	r3, r0, r3
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ff81 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff57 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e056      	b.n	800108c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7f5b      	ldrb	r3, [r3, #29]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f939 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_CRC_Init+0xc8>)
 800100a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2118      	movs	r1, #24
 8001018:	438a      	bics	r2, r1
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e00b      	b.n	8001036 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0018      	movs	r0, r3
 800102a:	f000 f835 	bl	8001098 <HAL_CRCEx_Polynomial_Set>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e02a      	b.n	800108c <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	795b      	ldrb	r3, [r3, #5]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	4252      	negs	r2, r2
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e004      	b.n	8001054 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6912      	ldr	r2, [r2, #16]
 8001052:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2260      	movs	r2, #96	; 0x60
 800105c:	4393      	bics	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	4393      	bics	r3, r2
 8001076:	0019      	movs	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	04c11db7 	.word	0x04c11db7

08001098 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2117      	movs	r1, #23
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80010ac:	231f      	movs	r3, #31
 80010ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2201      	movs	r2, #1
 80010b4:	4013      	ands	r3, r2
 80010b6:	d103      	bne.n	80010c0 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e045      	b.n	800114c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	613a      	str	r2, [r7, #16]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_CRCEx_Polynomial_Set+0x46>
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	221f      	movs	r2, #31
 80010d0:	4013      	ands	r3, r2
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	40da      	lsrs	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	d0f1      	beq.n	80010c2 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b18      	cmp	r3, #24
 80010e2:	d00f      	beq.n	8001104 <HAL_CRCEx_Polynomial_Set+0x6c>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b18      	cmp	r3, #24
 80010e8:	d824      	bhi.n	8001134 <HAL_CRCEx_Polynomial_Set+0x9c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d011      	beq.n	8001114 <HAL_CRCEx_Polynomial_Set+0x7c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d81e      	bhi.n	8001134 <HAL_CRCEx_Polynomial_Set+0x9c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_CRCEx_Polynomial_Set+0xa6>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d010      	beq.n	8001124 <HAL_CRCEx_Polynomial_Set+0x8c>
 8001102:	e017      	b.n	8001134 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d91b      	bls.n	8001142 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 800110a:	2317      	movs	r3, #23
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001112:	e016      	b.n	8001142 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b07      	cmp	r3, #7
 8001118:	d915      	bls.n	8001146 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 800111a:	2317      	movs	r3, #23
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001122:	e010      	b.n	8001146 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d90f      	bls.n	800114a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 800112a:	2317      	movs	r3, #23
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001132:	e00a      	b.n	800114a <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001134:	2317      	movs	r3, #23
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
        break;
 800113c:	e006      	b.n	800114c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	e004      	b.n	800114c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	e002      	b.n	800114c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	e000      	b.n	800114c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800114a:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800114c:	2317      	movs	r3, #23
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10e      	bne.n	8001174 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2218      	movs	r2, #24
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	430a      	orrs	r2, r1
 8001172:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001174:	2317      	movs	r3, #23
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	781b      	ldrb	r3, [r3, #0]
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b006      	add	sp, #24
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e036      	b.n	8001208 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2221      	movs	r2, #33	; 0x21
 800119e:	2102      	movs	r1, #2
 80011a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <HAL_DMA_Init+0x8c>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f8fe 	bl	80013ec <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2221      	movs	r2, #33	; 0x21
 80011fa:	2101      	movs	r1, #1
 80011fc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}
 8001210:	ffffc00f 	.word	0xffffc00f

08001214 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e03b      	b.n	800129e <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0018      	movs	r0, r3
 800125a:	f000 f8c7 	bl	80013ec <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	2101      	movs	r1, #1
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2221      	movs	r2, #33	; 0x21
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2204      	movs	r2, #4
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	d024      	beq.n	8001318 <HAL_DMA_IRQHandler+0x72>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d020      	beq.n	8001318 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2220      	movs	r2, #32
 80012de:	4013      	ands	r3, r2
 80012e0:	d107      	bne.n	80012f2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2104      	movs	r1, #4
 80012ee:	438a      	bics	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	2104      	movs	r1, #4
 80012fc:	4091      	lsls	r1, r2
 80012fe:	000a      	movs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d100      	bne.n	800130c <HAL_DMA_IRQHandler+0x66>
 800130a:	e06a      	b.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	0010      	movs	r0, r2
 8001314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001316:	e064      	b.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2202      	movs	r2, #2
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	d02b      	beq.n	8001380 <HAL_DMA_IRQHandler+0xda>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d027      	beq.n	8001380 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2220      	movs	r2, #32
 8001338:	4013      	ands	r3, r2
 800133a:	d10b      	bne.n	8001354 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	210a      	movs	r1, #10
 8001348:	438a      	bics	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2221      	movs	r2, #33	; 0x21
 8001350:	2101      	movs	r1, #1
 8001352:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	2102      	movs	r1, #2
 800135e:	4091      	lsls	r1, r2
 8001360:	000a      	movs	r2, r1
 8001362:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2220      	movs	r2, #32
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d036      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	0010      	movs	r0, r2
 800137c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800137e:	e030      	b.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2208      	movs	r2, #8
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	d028      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2208      	movs	r2, #8
 8001394:	4013      	ands	r3, r2
 8001396:	d024      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	210e      	movs	r1, #14
 80013a4:	438a      	bics	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	2101      	movs	r1, #1
 80013b2:	4091      	lsls	r1, r2
 80013b4:	000a      	movs	r2, r1
 80013b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2221      	movs	r2, #33	; 0x21
 80013c2:	2101      	movs	r1, #1
 80013c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	0010      	movs	r0, r2
 80013de:	4798      	blx	r3
    }
  }
}
 80013e0:	e7ff      	b.n	80013e2 <HAL_DMA_IRQHandler+0x13c>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <DMA_CalcBaseAndBitshift+0x60>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d810      	bhi.n	8001422 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <DMA_CalcBaseAndBitshift+0x64>)
 8001406:	4694      	mov	ip, r2
 8001408:	4463      	add	r3, ip
 800140a:	2114      	movs	r1, #20
 800140c:	0018      	movs	r0, r3
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	0003      	movs	r3, r0
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <DMA_CalcBaseAndBitshift+0x68>)
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001420:	e00f      	b.n	8001442 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <DMA_CalcBaseAndBitshift+0x6c>)
 8001428:	4694      	mov	ip, r2
 800142a:	4463      	add	r3, ip
 800142c:	2114      	movs	r1, #20
 800142e:	0018      	movs	r0, r3
 8001430:	f7fe fe6a 	bl	8000108 <__udivsi3>
 8001434:	0003      	movs	r3, r0
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <DMA_CalcBaseAndBitshift+0x70>)
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40020407 	.word	0x40020407
 8001450:	bffdfff8 	.word	0xbffdfff8
 8001454:	40020000 	.word	0x40020000
 8001458:	bffdfbf8 	.word	0xbffdfbf8
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e155      	b.n	800171c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <HAL_GPIO_Init+0x28>
 8001486:	e146      	b.n	8001716 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	409a      	lsls	r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	2201      	movs	r2, #1
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	2b03      	cmp	r3, #3
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	4013      	ands	r3, r2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	58d3      	ldr	r3, [r2, r3]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2207      	movs	r2, #7
 800155c:	4013      	ands	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2107      	movs	r1, #7
 8001576:	400b      	ands	r3, r1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2203      	movs	r2, #3
 80015b0:	401a      	ands	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_GPIO_Init+0x174>
 80015d2:	e0a0      	b.n	8001716 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_GPIO_Init+0x2d4>)
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x2d4>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	4b54      	ldr	r3, [pc, #336]	; (8001734 <HAL_GPIO_Init+0x2d4>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ec:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	589b      	ldr	r3, [r3, r2]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	409a      	lsls	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	43da      	mvns	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	2390      	movs	r3, #144	; 0x90
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	429a      	cmp	r2, r3
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x1ee>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_GPIO_Init+0x2dc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x1ea>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <HAL_GPIO_Init+0x2e0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x1e6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_GPIO_Init+0x2e4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x1e2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a44      	ldr	r2, [pc, #272]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x1de>
 800163a:	2304      	movs	r3, #4
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x1f0>
 800163e:	2305      	movs	r3, #5
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x1f0>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x1f0>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x1f0>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x1f0>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2103      	movs	r1, #3
 8001654:	400a      	ands	r2, r1
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x2d8>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <HAL_GPIO_Init+0x2ec>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_GPIO_Init+0x2ec>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_GPIO_Init+0x2ec>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_GPIO_Init+0x2ec>)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x2ec>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	4013      	ands	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	40da      	lsrs	r2, r3
 8001724:	1e13      	subs	r3, r2, #0
 8001726:	d000      	beq.n	800172a <HAL_GPIO_Init+0x2ca>
 8001728:	e6a2      	b.n	8001470 <HAL_GPIO_Init+0x10>
  } 
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800175e:	e0b7      	b.n	80018d0 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001760:	2201      	movs	r2, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	409a      	lsls	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_DeInit+0x24>
 8001772:	e0aa      	b.n	80018ca <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001774:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <HAL_GPIO_DeInit+0x198>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	589b      	ldr	r3, [r3, r2]
 8001780:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2203      	movs	r2, #3
 8001786:	4013      	ands	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	409a      	lsls	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	2390      	movs	r3, #144	; 0x90
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	429a      	cmp	r2, r3
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_DeInit+0x82>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_DeInit+0x19c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_DeInit+0x7e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_DeInit+0x1a0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_DeInit+0x7a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_GPIO_DeInit+0x1a4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_DeInit+0x76>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_DeInit+0x1a8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_DeInit+0x72>
 80017be:	2304      	movs	r3, #4
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017d2:	2300      	movs	r3, #0
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	2103      	movs	r1, #3
 80017d8:	400a      	ands	r2, r1
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d132      	bne.n	800184a <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43d9      	mvns	r1, r3
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43d9      	mvns	r1, r3
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 800180a:	400a      	ands	r2, r1
 800180c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43d9      	mvns	r1, r3
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 8001818:	400a      	ands	r2, r1
 800181a:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800182c:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <HAL_GPIO_DeInit+0x198>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	589a      	ldr	r2, [r3, r2]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43d9      	mvns	r1, r3
 800183c:	482a      	ldr	r0, [pc, #168]	; (80018e8 <HAL_GPIO_DeInit+0x198>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	400a      	ands	r2, r1
 8001844:	3302      	adds	r3, #2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	2103      	movs	r1, #3
 8001854:	4091      	lsls	r1, r2
 8001856:	000a      	movs	r2, r1
 8001858:	43d2      	mvns	r2, r2
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	58d3      	ldr	r3, [r2, r3]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	2107      	movs	r1, #7
 8001870:	400a      	ands	r2, r1
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	210f      	movs	r1, #15
 8001876:	4091      	lsls	r1, r2
 8001878:	000a      	movs	r2, r1
 800187a:	43d1      	mvns	r1, r2
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	08d2      	lsrs	r2, r2, #3
 8001880:	4019      	ands	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	0052      	lsls	r2, r2, #1
 8001892:	2103      	movs	r1, #3
 8001894:	4091      	lsls	r1, r2
 8001896:	000a      	movs	r2, r1
 8001898:	43d2      	mvns	r2, r2
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4091      	lsls	r1, r2
 80018aa:	000a      	movs	r2, r1
 80018ac:	43d2      	mvns	r2, r2
 80018ae:	401a      	ands	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	0052      	lsls	r2, r2, #1
 80018bc:	2103      	movs	r1, #3
 80018be:	4091      	lsls	r1, r2
 80018c0:	000a      	movs	r2, r1
 80018c2:	43d2      	mvns	r2, r2
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]

    }

    position++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	40da      	lsrs	r2, r3
 80018d6:	1e13      	subs	r3, r2, #0
 80018d8:	d000      	beq.n	80018dc <HAL_GPIO_DeInit+0x18c>
 80018da:	e741      	b.n	8001760 <HAL_GPIO_DeInit+0x10>
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b006      	add	sp, #24
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40010000 	.word	0x40010000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48000800 	.word	0x48000800
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	48001000 	.word	0x48001000
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	0008      	movs	r0, r1
 800190a:	0011      	movs	r1, r2
 800190c:	1cbb      	adds	r3, r7, #2
 800190e:	1c02      	adds	r2, r0, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	1c7b      	adds	r3, r7, #1
 8001914:	1c0a      	adds	r2, r1, #0
 8001916:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	1c7b      	adds	r3, r7, #1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 fb76 	bl	800203c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x20>
 800195a:	e08e      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195c:	4bc5      	ldr	r3, [pc, #788]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	220c      	movs	r2, #12
 8001962:	4013      	ands	r3, r2
 8001964:	2b04      	cmp	r3, #4
 8001966:	d00e      	beq.n	8001986 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001968:	4bc2      	ldr	r3, [pc, #776]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	2b08      	cmp	r3, #8
 8001972:	d117      	bne.n	80019a4 <HAL_RCC_OscConfig+0x68>
 8001974:	4bbf      	ldr	r3, [pc, #764]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	401a      	ands	r2, r3
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	025b      	lsls	r3, r3, #9
 8001982:	429a      	cmp	r2, r3
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4bbb      	ldr	r3, [pc, #748]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_RCC_OscConfig+0x58>
 8001992:	e071      	b.n	8001a78 <HAL_RCC_OscConfig+0x13c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <HAL_RCC_OscConfig+0x62>
 800199c:	e06c      	b.n	8001a78 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	f000 fb4c 	bl	800203c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x80>
 80019ac:	4bb1      	ldr	r3, [pc, #708]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4bb0      	ldr	r3, [pc, #704]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0249      	lsls	r1, r1, #9
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e02f      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0xa2>
 80019c4:	4bab      	ldr	r3, [pc, #684]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4baa      	ldr	r3, [pc, #680]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ca:	49ab      	ldr	r1, [pc, #684]	; (8001c78 <HAL_RCC_OscConfig+0x33c>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4ba8      	ldr	r3, [pc, #672]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4ba7      	ldr	r3, [pc, #668]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019d6:	49a9      	ldr	r1, [pc, #676]	; (8001c7c <HAL_RCC_OscConfig+0x340>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e01e      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d10e      	bne.n	8001a04 <HAL_RCC_OscConfig+0xc8>
 80019e6:	4ba3      	ldr	r3, [pc, #652]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4ba2      	ldr	r3, [pc, #648]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	02c9      	lsls	r1, r1, #11
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4b9f      	ldr	r3, [pc, #636]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b9e      	ldr	r3, [pc, #632]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0249      	lsls	r1, r1, #9
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xe0>
 8001a04:	4b9b      	ldr	r3, [pc, #620]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b9a      	ldr	r3, [pc, #616]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	499b      	ldr	r1, [pc, #620]	; (8001c78 <HAL_RCC_OscConfig+0x33c>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b98      	ldr	r3, [pc, #608]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a16:	4999      	ldr	r1, [pc, #612]	; (8001c7c <HAL_RCC_OscConfig+0x340>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d014      	beq.n	8001a4e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fa1a 	bl	8000e5c <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa15 	bl	8000e5c <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e2fd      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0xf2>
 8001a4c:	e015      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fa05 	bl	8000e5c <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fa00 	bl	8000e5c <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e2e8      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x11c>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x14a>
 8001a84:	e06c      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a86:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a90:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d11f      	bne.n	8001adc <HAL_RCC_OscConfig+0x1a0>
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23c0      	movs	r3, #192	; 0xc0
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x188>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2bb      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22f8      	movs	r2, #248	; 0xf8
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e041      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d024      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f9b4 	bl	8000e5c <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f9af 	bl	8000e5c <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e297      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d0f1      	beq.n	8001afa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	22f8      	movs	r2, #248	; 0xf8
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00da      	lsls	r2, r3, #3
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	438a      	bics	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f98f 	bl	8000e5c <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff f98a 	bl	8000e5c <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e272      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f1      	bne.n	8001b44 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	4013      	ands	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f96d 	bl	8000e5c <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f968 	bl	8000e5c <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e250      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f1      	beq.n	8001b88 <HAL_RCC_OscConfig+0x24c>
 8001ba4:	e018      	b.n	8001bd8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	438a      	bics	r2, r1
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff f953 	bl	8000e5c <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f94e 	bl	8000e5c <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e236      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d1f1      	bne.n	8001bbc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4013      	ands	r3, r2
 8001be0:	d100      	bne.n	8001be4 <HAL_RCC_OscConfig+0x2a8>
 8001be2:	e0b5      	b.n	8001d50 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	201f      	movs	r0, #31
 8001be6:	183b      	adds	r3, r7, r0
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d110      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	0549      	lsls	r1, r1, #21
 8001c02:	430a      	orrs	r2, r1
 8001c04:	61da      	str	r2, [r3, #28]
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	055b      	lsls	r3, r3, #21
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d11a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0049      	lsls	r1, r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f912 	bl	8000e5c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f90d 	bl	8000e5c <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1f5      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x344>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10f      	bne.n	8001c84 <HAL_RCC_OscConfig+0x348>
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <HAL_RCC_OscConfig+0x338>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	e036      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40021000 	.word	0x40021000
 8001c78:	fffeffff 	.word	0xfffeffff
 8001c7c:	fffbffff 	.word	0xfffbffff
 8001c80:	40007000 	.word	0x40007000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x36a>
 8001c8c:	4bca      	ldr	r3, [pc, #808]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	4bc9      	ldr	r3, [pc, #804]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	438a      	bics	r2, r1
 8001c96:	621a      	str	r2, [r3, #32]
 8001c98:	4bc7      	ldr	r3, [pc, #796]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	4bc6      	ldr	r3, [pc, #792]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x38c>
 8001cae:	4bc2      	ldr	r3, [pc, #776]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	4bc1      	ldr	r3, [pc, #772]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	621a      	str	r2, [r3, #32]
 8001cba:	4bbf      	ldr	r3, [pc, #764]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4bbe      	ldr	r3, [pc, #760]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3a4>
 8001cc8:	4bbb      	ldr	r3, [pc, #748]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4bba      	ldr	r3, [pc, #744]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	4bb8      	ldr	r3, [pc, #736]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4bb7      	ldr	r3, [pc, #732]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	2104      	movs	r1, #4
 8001cdc:	438a      	bics	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f8b8 	bl	8000e5c <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff f8b3 	bl	8000e5c <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4aaf      	ldr	r2, [pc, #700]	; (8001fbc <HAL_RCC_OscConfig+0x680>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e19a      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4bac      	ldr	r3, [pc, #688]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3b6>
 8001d10:	e013      	b.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f8a3 	bl	8000e5c <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f89e 	bl	8000e5c <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4aa5      	ldr	r2, [pc, #660]	; (8001fbc <HAL_RCC_OscConfig+0x680>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e185      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	4ba1      	ldr	r3, [pc, #644]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b9c      	ldr	r3, [pc, #624]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	4b9b      	ldr	r3, [pc, #620]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	499d      	ldr	r1, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x684>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	4013      	ands	r3, r2
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d12a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d62:	4b95      	ldr	r3, [pc, #596]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d68:	2104      	movs	r1, #4
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d6e:	4b92      	ldr	r3, [pc, #584]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f86f 	bl	8000e5c <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d84:	f7ff f86a 	bl	8000e5c <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e152      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0f1      	beq.n	8001d84 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001da0:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	22f8      	movs	r2, #248	; 0xf8
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
 8001db6:	e034      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	3305      	adds	r3, #5
 8001dbe:	d111      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dc0:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	438a      	bics	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dcc:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd0:	22f8      	movs	r2, #248	; 0xf8
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	00da      	lsls	r2, r3, #3
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
 8001de2:	e01e      	b.n	8001e22 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001de4:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de8:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	438a      	bics	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f82e 	bl	8000e5c <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e06:	f7ff f829 	bl	8000e5c <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e111      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f1      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2220      	movs	r2, #32
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d05c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	220c      	movs	r2, #12
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d00e      	beq.n	8001e56 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e38:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d114      	bne.n	8001e6e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e44:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	23c0      	movs	r3, #192	; 0xc0
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d040      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5a8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d03c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e6      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01b      	beq.n	8001eae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e76:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0249      	lsls	r1, r1, #9
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffea 	bl	8000e5c <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8e:	f7fe ffe5 	bl	8000e5c <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0cd      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x552>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001eb4:	4943      	ldr	r1, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x688>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe ffcf 	bl	8000e5c <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec4:	f7fe ffca 	bl	8000e5c <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0b2      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x588>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ee4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5b4>
 8001eee:	e0a4      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_OscConfig+0x5c2>
 8001efc:	e078      	b.n	8001ff0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d14c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f0c:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <HAL_RCC_OscConfig+0x68c>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe ffa3 	bl	8000e5c <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff9e 	bl	8000e5c <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e086      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	4013      	ands	r3, r2
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	220f      	movs	r2, #15
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_RCC_OscConfig+0x690>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	431a      	orrs	r2, r3
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0449      	lsls	r1, r1, #17
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe ff71 	bl	8000e5c <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe ff6c 	bl	8000e5c <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e054      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x644>
 8001f9e:	e04c      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <HAL_RCC_OscConfig+0x68c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff56 	bl	8000e5c <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6a6>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	00001388 	.word	0x00001388
 8001fc0:	efffffff 	.word	0xefffffff
 8001fc4:	fffeffff 	.word	0xfffeffff
 8001fc8:	feffffff 	.word	0xfeffffff
 8001fcc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe ff44 	bl	8000e5c <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e02c      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	049b      	lsls	r3, r3, #18
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x694>
 8001fee:	e024      	b.n	800203a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01f      	b.n	800203c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x708>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	429a      	cmp	r2, r3
 8002016:	d10e      	bne.n	8002036 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	220f      	movs	r2, #15
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	23f0      	movs	r3, #240	; 0xf0
 800202a:	039b      	lsls	r3, r3, #14
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b008      	add	sp, #32
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0bf      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d911      	bls.n	800208e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0a6      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	4013      	ands	r3, r2
 8002096:	d015      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d006      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020a2:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020a8:	21e0      	movs	r1, #224	; 0xe0
 80020aa:	00c9      	lsls	r1, r1, #3
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	22f0      	movs	r2, #240	; 0xf0
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d04c      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	d120      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07a      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d114      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06e      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d108      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e062      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e05b      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe90 	bl	8000e5c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	e009      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002142:	f7fe fe8b 	bl	8000e5c <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_RCC_ClockConfig+0x1a4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e042      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	220c      	movs	r2, #12
 800215c:	401a      	ands	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ec      	bne.n	8002142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d211      	bcs.n	800219a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x19c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	4013      	ands	r3, r2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e020      	b.n	80021dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_RCC_ClockConfig+0x1a8>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b8:	f000 f820 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021bc:	0001      	movs	r1, r0
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1a0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	220f      	movs	r2, #15
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1ac>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	000a      	movs	r2, r1
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 80021d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7fe fa03 	bl	80005e0 <HAL_InitTick>
  
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00001388 	.word	0x00001388
 80021f0:	fffff8ff 	.word	0xfffff8ff
 80021f4:	08008d84 	.word	0x08008d84
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	220c      	movs	r2, #12
 8002220:	4013      	ands	r3, r2
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d046      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002226:	d848      	bhi.n	80022ba <HAL_RCC_GetSysClockFreq+0xbe>
 8002228:	2b04      	cmp	r3, #4
 800222a:	d002      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x36>
 800222c:	2b08      	cmp	r3, #8
 800222e:	d003      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x3c>
 8002230:	e043      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002234:	613b      	str	r3, [r7, #16]
      break;
 8002236:	e043      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	220f      	movs	r2, #15
 800224c:	4013      	ands	r3, r2
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	401a      	ands	r2, r3
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	429a      	cmp	r2, r3
 8002262:	d109      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	481a      	ldr	r0, [pc, #104]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002268:	f7fd ff4e 	bl	8000108 <__udivsi3>
 800226c:	0003      	movs	r3, r0
 800226e:	001a      	movs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4353      	muls	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e01a      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	23c0      	movs	r3, #192	; 0xc0
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	401a      	ands	r2, r3
 8002280:	23c0      	movs	r3, #192	; 0xc0
 8002282:	025b      	lsls	r3, r3, #9
 8002284:	429a      	cmp	r2, r3
 8002286:	d109      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <HAL_RCC_GetSysClockFreq+0xe0>)
 800228c:	f7fd ff3c 	bl	8000108 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	001a      	movs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4353      	muls	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e008      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022a0:	f7fd ff32 	bl	8000108 <__udivsi3>
 80022a4:	0003      	movs	r3, r0
 80022a6:	001a      	movs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4353      	muls	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_GetSysClockFreq+0xe0>)
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	e002      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022bc:	613b      	str	r3, [r7, #16]
      break;
 80022be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022c0:	693b      	ldr	r3, [r7, #16]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b006      	add	sp, #24
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40021000 	.word	0x40021000
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	08008d9c 	.word	0x08008d9c
 80022d8:	08008dac 	.word	0x08008dac
 80022dc:	02dc6c00 	.word	0x02dc6c00

080022e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022f8:	f7ff fff2 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 80022fc:	0001      	movs	r1, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	2207      	movs	r2, #7
 8002306:	4013      	ands	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCC_GetPCLK1Freq+0x28>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	40d9      	lsrs	r1, r3
 800230e:	000b      	movs	r3, r1
}    
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	08008d94 	.word	0x08008d94

08002320 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_RCC_GetClockConfig+0x4c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetClockConfig+0x4c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	22f0      	movs	r2, #240	; 0xf0
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_GetClockConfig+0x4c>)
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	23e0      	movs	r3, #224	; 0xe0
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	401a      	ands	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetClockConfig+0x50>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	401a      	ands	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	40021000 	.word	0x40021000
 8002370:	40022000 	.word	0x40022000

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	025b      	lsls	r3, r3, #9
 800238c:	4013      	ands	r3, r2
 800238e:	d100      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002390:	e08e      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2017      	movs	r0, #23
 8002394:	183b      	adds	r3, r7, r0
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	055b      	lsls	r3, r3, #21
 80023a2:	4013      	ands	r3, r2
 80023a4:	d110      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0549      	lsls	r1, r1, #21
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]
 80023b4:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	055b      	lsls	r3, r3, #21
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	d11a      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0049      	lsls	r1, r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fd3b 	bl	8000e5c <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	e008      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7fe fd36 	bl	8000e5c <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0a6      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4013      	ands	r3, r2
 8002408:	d0f0      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800240a:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4013      	ands	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d034      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4013      	ands	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d02c      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002432:	4013      	ands	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0249      	lsls	r1, r1, #9
 8002440:	430a      	orrs	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800244a:	4945      	ldr	r1, [pc, #276]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800244c:	400a      	ands	r2, r1
 800244e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe fcfd 	bl	8000e5c <HAL_GetTick>
 8002462:	0003      	movs	r3, r0
 8002464:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	e009      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fcf8 	bl	8000e5c <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e067      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d0f0      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800248c:	4013      	ands	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002496:	430a      	orrs	r2, r1
 8002498:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800249a:	2317      	movs	r3, #23
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024aa:	492f      	ldr	r1, [pc, #188]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	2203      	movs	r2, #3
 80024c0:	4393      	bics	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	02db      	lsls	r3, r3, #11
 80024f4:	4013      	ands	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2220      	movs	r2, #32
 8002512:	4013      	ands	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2210      	movs	r2, #16
 800251c:	4393      	bics	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002526:	430a      	orrs	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4013      	ands	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002546:	430a      	orrs	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	fffffcff 	.word	0xfffffcff
 8002560:	fffeffff 	.word	0xfffeffff
 8002564:	00001388 	.word	0x00001388
 8002568:	efffffff 	.word	0xefffffff
 800256c:	fffcffff 	.word	0xfffcffff
 8002570:	fff3ffff 	.word	0xfff3ffff

08002574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e042      	b.n	800260c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223d      	movs	r2, #61	; 0x3d
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223c      	movs	r2, #60	; 0x3c
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f839 	bl	8002614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	; 0x3d
 80025a6:	2102      	movs	r1, #2
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f000 f9bd 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2246      	movs	r2, #70	; 0x46
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223e      	movs	r2, #62	; 0x3e
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223f      	movs	r2, #63	; 0x3f
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2241      	movs	r2, #65	; 0x41
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2242      	movs	r2, #66	; 0x42
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2243      	movs	r2, #67	; 0x43
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2244      	movs	r2, #68	; 0x44
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2245      	movs	r2, #69	; 0x45
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223d      	movs	r2, #61	; 0x3d
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223d      	movs	r2, #61	; 0x3d
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e03b      	b.n	80026b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	223d      	movs	r2, #61	; 0x3d
 8002640:	2102      	movs	r1, #2
 8002642:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_TIM_Base_Start_IT+0x98>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00f      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	429a      	cmp	r2, r3
 8002668:	d009      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x5a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d111      	bne.n	80026a2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2207      	movs	r2, #7
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d010      	beq.n	80026b2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a0:	e007      	b.n	80026b2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b004      	add	sp, #16
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40014000 	.word	0x40014000

080026c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d124      	bne.n	8002728 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d11d      	bne.n	8002728 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2203      	movs	r2, #3
 80026f2:	4252      	negs	r2, r2
 80026f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2203      	movs	r2, #3
 8002704:	4013      	ands	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f8fa 	bl	8002904 <HAL_TIM_IC_CaptureCallback>
 8002710:	e007      	b.n	8002722 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f8ed 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f8f9 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	2b04      	cmp	r3, #4
 8002734:	d125      	bne.n	8002782 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2204      	movs	r2, #4
 800273e:	4013      	ands	r3, r2
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11e      	bne.n	8002782 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2205      	movs	r2, #5
 800274a:	4252      	negs	r2, r2
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	23c0      	movs	r3, #192	; 0xc0
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f8cd 	bl	8002904 <HAL_TIM_IC_CaptureCallback>
 800276a:	e007      	b.n	800277c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f8c0 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f8cc 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2208      	movs	r2, #8
 800278a:	4013      	ands	r3, r2
 800278c:	2b08      	cmp	r3, #8
 800278e:	d124      	bne.n	80027da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2208      	movs	r2, #8
 8002798:	4013      	ands	r3, r2
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11d      	bne.n	80027da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2209      	movs	r2, #9
 80027a4:	4252      	negs	r2, r2
 80027a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2204      	movs	r2, #4
 80027ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f8a1 	bl	8002904 <HAL_TIM_IC_CaptureCallback>
 80027c2:	e007      	b.n	80027d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f894 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f8a0 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2210      	movs	r2, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d125      	bne.n	8002834 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2210      	movs	r2, #16
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d11e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2211      	movs	r2, #17
 80027fc:	4252      	negs	r2, r2
 80027fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2208      	movs	r2, #8
 8002804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	23c0      	movs	r3, #192	; 0xc0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 f874 	bl	8002904 <HAL_TIM_IC_CaptureCallback>
 800281c:	e007      	b.n	800282e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f867 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f873 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2201      	movs	r2, #1
 800283c:	4013      	ands	r3, r2
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10f      	bne.n	8002862 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	2b01      	cmp	r3, #1
 800284e:	d108      	bne.n	8002862 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2202      	movs	r2, #2
 8002856:	4252      	negs	r2, r2
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f7fd fe7d 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	4013      	ands	r3, r2
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d10f      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	4013      	ands	r3, r2
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d108      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2281      	movs	r2, #129	; 0x81
 8002884:	4252      	negs	r2, r2
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f8da 	bl	8002a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	4013      	ands	r3, r2
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d10f      	bne.n	80028be <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d108      	bne.n	80028be <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2241      	movs	r2, #65	; 0x41
 80028b2:	4252      	negs	r2, r2
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 f833 	bl	8002924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d10f      	bne.n	80028ec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d108      	bne.n	80028ec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2221      	movs	r2, #33	; 0x21
 80028e0:	4252      	negs	r2, r2
 80028e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f8a4 	bl	8002a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <TIM_Base_SetConfig+0xe4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d008      	beq.n	800295e <TIM_Base_SetConfig+0x2a>
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	429a      	cmp	r2, r3
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x2a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <TIM_Base_SetConfig+0xe8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2270      	movs	r2, #112	; 0x70
 8002962:	4393      	bics	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <TIM_Base_SetConfig+0xe4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	429a      	cmp	r2, r3
 8002980:	d013      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <TIM_Base_SetConfig+0xe8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00f      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <TIM_Base_SetConfig+0xec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <TIM_Base_SetConfig+0xf0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <TIM_Base_SetConfig+0xf4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <TIM_Base_SetConfig+0xf8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <TIM_Base_SetConfig+0xfc>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4393      	bics	r3, r2
 80029c2:	001a      	movs	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <TIM_Base_SetConfig+0xe4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <TIM_Base_SetConfig+0xce>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <TIM_Base_SetConfig+0xf0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <TIM_Base_SetConfig+0xce>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <TIM_Base_SetConfig+0xf4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_Base_SetConfig+0xce>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <TIM_Base_SetConfig+0xf8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d103      	bne.n	8002a0a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	615a      	str	r2, [r3, #20]
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40002000 	.word	0x40002000
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	fffffcff 	.word	0xfffffcff

08002a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e044      	b.n	8002af0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2278      	movs	r2, #120	; 0x78
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd ff5b 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	438a      	bics	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f9e8 	bl	8002e6c <UART_SetConfig>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e024      	b.n	8002af0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 fbc3 	bl	800323c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	490d      	ldr	r1, [pc, #52]	; (8002af8 <HAL_UART_Init+0xa4>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	212a      	movs	r1, #42	; 0x2a
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fc5b 	bl	80033a4 <UART_CheckIdleState>
 8002aee:	0003      	movs	r3, r0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	ffffb7ff 	.word	0xffffb7ff

08002afc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e030      	b.n	8002b70 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	438a      	bics	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7fe f8a8 	bl	8000c94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2284      	movs	r2, #132	; 0x84
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	2100      	movs	r1, #0
 8002b58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2278      	movs	r2, #120	; 0x78
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d000      	beq.n	8002b92 <HAL_UART_Transmit+0x1a>
 8002b90:	e08d      	b.n	8002cae <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_UART_Transmit+0x28>
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e085      	b.n	8002cb0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d109      	bne.n	8002bc4 <HAL_UART_Transmit+0x4c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e075      	b.n	8002cb0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2284      	movs	r2, #132	; 0x84
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bd2:	f7fe f943 	bl	8000e5c <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1dba      	adds	r2, r7, #6
 8002bde:	2150      	movs	r1, #80	; 0x50
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1dba      	adds	r2, r7, #6
 8002be8:	2152      	movs	r1, #82	; 0x52
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	015b      	lsls	r3, r3, #5
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d108      	bne.n	8002c0c <HAL_UART_Transmit+0x94>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c14:	e030      	b.n	8002c78 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	0013      	movs	r3, r2
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	f000 fc66 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e03c      	b.n	8002cb0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	05d2      	lsls	r2, r2, #23
 8002c46:	0dd2      	lsrs	r2, r2, #23
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3302      	adds	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e008      	b.n	8002c66 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2252      	movs	r2, #82	; 0x52
 8002c6a:	5a9b      	ldrh	r3, [r3, r2]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b299      	uxth	r1, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2252      	movs	r2, #82	; 0x52
 8002c76:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2252      	movs	r2, #82	; 0x52
 8002c7c:	5a9b      	ldrh	r3, [r3, r2]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1c8      	bne.n	8002c16 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2140      	movs	r1, #64	; 0x40
 8002c92:	f000 fc2f 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d004      	beq.n	8002ca4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e005      	b.n	8002cb0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b008      	add	sp, #32
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	1dbb      	adds	r3, r7, #6
 8002cc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d15b      	bne.n	8002d86 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_UART_Transmit_IT+0x24>
 8002cd4:	1dbb      	adds	r3, r7, #6
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e053      	b.n	8002d88 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	015b      	lsls	r3, r3, #5
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d109      	bne.n	8002d00 <HAL_UART_Transmit_IT+0x48>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d001      	beq.n	8002d00 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e043      	b.n	8002d88 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1dba      	adds	r2, r7, #6
 8002d0a:	2150      	movs	r1, #80	; 0x50
 8002d0c:	8812      	ldrh	r2, [r2, #0]
 8002d0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1dba      	adds	r2, r7, #6
 8002d14:	2152      	movs	r1, #82	; 0x52
 8002d16:	8812      	ldrh	r2, [r2, #0]
 8002d18:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2284      	movs	r2, #132	; 0x84
 8002d24:	2100      	movs	r1, #0
 8002d26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2221      	movs	r2, #33	; 0x21
 8002d2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	015b      	lsls	r3, r3, #5
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d107      	bne.n	8002d4a <HAL_UART_Transmit_IT+0x92>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <HAL_UART_Transmit_IT+0xd8>)
 8002d46:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d48:	e002      	b.n	8002d50 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_UART_Transmit_IT+0xdc>)
 8002d4e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d50:	f3ef 8310 	mrs	r3, PRIMASK
 8002d54:	613b      	str	r3, [r7, #16]
  return(result);
 8002d56:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
  }
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b008      	add	sp, #32
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	080038d9 	.word	0x080038d9
 8002d94:	08003825 	.word	0x08003825

08002d98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	589b      	ldr	r3, [r3, r2]
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d145      	bne.n	8002e3c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_UART_Receive_IT+0x26>
 8002db6:	1dbb      	adds	r3, r7, #6
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03d      	b.n	8002e3e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	015b      	lsls	r3, r3, #5
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d109      	bne.n	8002de2 <HAL_UART_Receive_IT+0x4a>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d001      	beq.n	8002de2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02d      	b.n	8002e3e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d019      	beq.n	8002e2a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfa:	613b      	str	r3, [r7, #16]
  return(result);
 8002dfc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	04c9      	lsls	r1, r1, #19
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e2a:	1dbb      	adds	r3, r7, #6
 8002e2c:	881a      	ldrh	r2, [r3, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 fbc8 	bl	80035c8 <UART_Start_Receive_IT>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b008      	add	sp, #32
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	000a      	movs	r2, r1
 8002e60:	1cbb      	adds	r3, r7, #2
 8002e62:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e74:	231e      	movs	r3, #30
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4abe      	ldr	r2, [pc, #760]	; (8003194 <UART_SetConfig+0x328>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4ab9      	ldr	r2, [pc, #740]	; (8003198 <UART_SetConfig+0x32c>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4ab0      	ldr	r2, [pc, #704]	; (800319c <UART_SetConfig+0x330>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4aac      	ldr	r2, [pc, #688]	; (80031a0 <UART_SetConfig+0x334>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d127      	bne.n	8002f42 <UART_SetConfig+0xd6>
 8002ef2:	4bac      	ldr	r3, [pc, #688]	; (80031a4 <UART_SetConfig+0x338>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d00d      	beq.n	8002f1a <UART_SetConfig+0xae>
 8002efe:	d81b      	bhi.n	8002f38 <UART_SetConfig+0xcc>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d014      	beq.n	8002f2e <UART_SetConfig+0xc2>
 8002f04:	d818      	bhi.n	8002f38 <UART_SetConfig+0xcc>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <UART_SetConfig+0xa4>
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d00a      	beq.n	8002f24 <UART_SetConfig+0xb8>
 8002f0e:	e013      	b.n	8002f38 <UART_SetConfig+0xcc>
 8002f10:	231f      	movs	r3, #31
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e0bd      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f1a:	231f      	movs	r3, #31
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e0b8      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f24:	231f      	movs	r3, #31
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2204      	movs	r2, #4
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e0b3      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f2e:	231f      	movs	r3, #31
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2208      	movs	r2, #8
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e0ae      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f38:	231f      	movs	r3, #31
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e0a9      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a98      	ldr	r2, [pc, #608]	; (80031a8 <UART_SetConfig+0x33c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d134      	bne.n	8002fb6 <UART_SetConfig+0x14a>
 8002f4c:	4b95      	ldr	r3, [pc, #596]	; (80031a4 <UART_SetConfig+0x338>)
 8002f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f50:	23c0      	movs	r3, #192	; 0xc0
 8002f52:	029b      	lsls	r3, r3, #10
 8002f54:	4013      	ands	r3, r2
 8002f56:	22c0      	movs	r2, #192	; 0xc0
 8002f58:	0292      	lsls	r2, r2, #10
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d017      	beq.n	8002f8e <UART_SetConfig+0x122>
 8002f5e:	22c0      	movs	r2, #192	; 0xc0
 8002f60:	0292      	lsls	r2, r2, #10
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d822      	bhi.n	8002fac <UART_SetConfig+0x140>
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0292      	lsls	r2, r2, #10
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <UART_SetConfig+0x136>
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	0292      	lsls	r2, r2, #10
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d81a      	bhi.n	8002fac <UART_SetConfig+0x140>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <UART_SetConfig+0x118>
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0252      	lsls	r2, r2, #9
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00a      	beq.n	8002f98 <UART_SetConfig+0x12c>
 8002f82:	e013      	b.n	8002fac <UART_SetConfig+0x140>
 8002f84:	231f      	movs	r3, #31
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e083      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f8e:	231f      	movs	r3, #31
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2202      	movs	r2, #2
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e07e      	b.n	8003096 <UART_SetConfig+0x22a>
 8002f98:	231f      	movs	r3, #31
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e079      	b.n	8003096 <UART_SetConfig+0x22a>
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e074      	b.n	8003096 <UART_SetConfig+0x22a>
 8002fac:	231f      	movs	r3, #31
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e06f      	b.n	8003096 <UART_SetConfig+0x22a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <UART_SetConfig+0x340>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d134      	bne.n	800302a <UART_SetConfig+0x1be>
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <UART_SetConfig+0x338>)
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	23c0      	movs	r3, #192	; 0xc0
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	4013      	ands	r3, r2
 8002fca:	22c0      	movs	r2, #192	; 0xc0
 8002fcc:	0312      	lsls	r2, r2, #12
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d017      	beq.n	8003002 <UART_SetConfig+0x196>
 8002fd2:	22c0      	movs	r2, #192	; 0xc0
 8002fd4:	0312      	lsls	r2, r2, #12
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d822      	bhi.n	8003020 <UART_SetConfig+0x1b4>
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	0312      	lsls	r2, r2, #12
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d019      	beq.n	8003016 <UART_SetConfig+0x1aa>
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	0312      	lsls	r2, r2, #12
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d81a      	bhi.n	8003020 <UART_SetConfig+0x1b4>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <UART_SetConfig+0x18c>
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	02d2      	lsls	r2, r2, #11
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00a      	beq.n	800300c <UART_SetConfig+0x1a0>
 8002ff6:	e013      	b.n	8003020 <UART_SetConfig+0x1b4>
 8002ff8:	231f      	movs	r3, #31
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e049      	b.n	8003096 <UART_SetConfig+0x22a>
 8003002:	231f      	movs	r3, #31
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e044      	b.n	8003096 <UART_SetConfig+0x22a>
 800300c:	231f      	movs	r3, #31
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2204      	movs	r2, #4
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e03f      	b.n	8003096 <UART_SetConfig+0x22a>
 8003016:	231f      	movs	r3, #31
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2208      	movs	r2, #8
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e03a      	b.n	8003096 <UART_SetConfig+0x22a>
 8003020:	231f      	movs	r3, #31
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2210      	movs	r2, #16
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e035      	b.n	8003096 <UART_SetConfig+0x22a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <UART_SetConfig+0x344>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d104      	bne.n	800303e <UART_SetConfig+0x1d2>
 8003034:	231f      	movs	r3, #31
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e02b      	b.n	8003096 <UART_SetConfig+0x22a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5c      	ldr	r2, [pc, #368]	; (80031b4 <UART_SetConfig+0x348>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d104      	bne.n	8003052 <UART_SetConfig+0x1e6>
 8003048:	231f      	movs	r3, #31
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e021      	b.n	8003096 <UART_SetConfig+0x22a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <UART_SetConfig+0x34c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d104      	bne.n	8003066 <UART_SetConfig+0x1fa>
 800305c:	231f      	movs	r3, #31
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e017      	b.n	8003096 <UART_SetConfig+0x22a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a54      	ldr	r2, [pc, #336]	; (80031bc <UART_SetConfig+0x350>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d104      	bne.n	800307a <UART_SetConfig+0x20e>
 8003070:	231f      	movs	r3, #31
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e00d      	b.n	8003096 <UART_SetConfig+0x22a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <UART_SetConfig+0x354>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d104      	bne.n	800308e <UART_SetConfig+0x222>
 8003084:	231f      	movs	r3, #31
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e003      	b.n	8003096 <UART_SetConfig+0x22a>
 800308e:	231f      	movs	r3, #31
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2210      	movs	r2, #16
 8003094:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	429a      	cmp	r2, r3
 80030a0:	d15c      	bne.n	800315c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80030a2:	231f      	movs	r3, #31
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d015      	beq.n	80030d8 <UART_SetConfig+0x26c>
 80030ac:	dc18      	bgt.n	80030e0 <UART_SetConfig+0x274>
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00d      	beq.n	80030ce <UART_SetConfig+0x262>
 80030b2:	dc15      	bgt.n	80030e0 <UART_SetConfig+0x274>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <UART_SetConfig+0x252>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0x25c>
 80030bc:	e010      	b.n	80030e0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030be:	f7ff f919 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]
        break;
 80030c6:	e012      	b.n	80030ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <UART_SetConfig+0x358>)
 80030ca:	61bb      	str	r3, [r7, #24]
        break;
 80030cc:	e00f      	b.n	80030ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7ff f895 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80030d2:	0003      	movs	r3, r0
 80030d4:	61bb      	str	r3, [r7, #24]
        break;
 80030d6:	e00a      	b.n	80030ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	61bb      	str	r3, [r7, #24]
        break;
 80030de:	e006      	b.n	80030ee <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e4:	231e      	movs	r3, #30
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
        break;
 80030ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d100      	bne.n	80030f6 <UART_SetConfig+0x28a>
 80030f4:	e095      	b.n	8003222 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	005a      	lsls	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	18d2      	adds	r2, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f7fc fffd 	bl	8000108 <__udivsi3>
 800310e:	0003      	movs	r3, r0
 8003110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d91c      	bls.n	8003152 <UART_SetConfig+0x2e6>
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	025b      	lsls	r3, r3, #9
 800311e:	429a      	cmp	r2, r3
 8003120:	d217      	bcs.n	8003152 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	b29a      	uxth	r2, r3
 8003126:	200e      	movs	r0, #14
 8003128:	183b      	adds	r3, r7, r0
 800312a:	210f      	movs	r1, #15
 800312c:	438a      	bics	r2, r1
 800312e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	2207      	movs	r2, #7
 8003138:	4013      	ands	r3, r2
 800313a:	b299      	uxth	r1, r3
 800313c:	183b      	adds	r3, r7, r0
 800313e:	183a      	adds	r2, r7, r0
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	183a      	adds	r2, r7, r0
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e067      	b.n	8003222 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003152:	231e      	movs	r3, #30
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e062      	b.n	8003222 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b08      	cmp	r3, #8
 8003164:	d030      	beq.n	80031c8 <UART_SetConfig+0x35c>
 8003166:	dc33      	bgt.n	80031d0 <UART_SetConfig+0x364>
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00d      	beq.n	8003188 <UART_SetConfig+0x31c>
 800316c:	dc30      	bgt.n	80031d0 <UART_SetConfig+0x364>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x30c>
 8003172:	2b02      	cmp	r3, #2
 8003174:	d005      	beq.n	8003182 <UART_SetConfig+0x316>
 8003176:	e02b      	b.n	80031d0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7ff f8bc 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 800317c:	0003      	movs	r3, r0
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e02d      	b.n	80031de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <UART_SetConfig+0x358>)
 8003184:	61bb      	str	r3, [r7, #24]
        break;
 8003186:	e02a      	b.n	80031de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003188:	f7ff f838 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 800318c:	0003      	movs	r3, r0
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e025      	b.n	80031de <UART_SetConfig+0x372>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	efff69f3 	.word	0xefff69f3
 8003198:	ffffcfff 	.word	0xffffcfff
 800319c:	fffff4ff 	.word	0xfffff4ff
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40011800 	.word	0x40011800
 80031c0:	40011c00 	.word	0x40011c00
 80031c4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	61bb      	str	r3, [r7, #24]
        break;
 80031ce:	e006      	b.n	80031de <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031d4:	231e      	movs	r3, #30
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
        break;
 80031dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01e      	beq.n	8003222 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	085a      	lsrs	r2, r3, #1
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	18d2      	adds	r2, r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f7fc ff87 	bl	8000108 <__udivsi3>
 80031fa:	0003      	movs	r3, r0
 80031fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b0f      	cmp	r3, #15
 8003202:	d90a      	bls.n	800321a <UART_SetConfig+0x3ae>
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	429a      	cmp	r2, r3
 800320c:	d205      	bcs.n	800321a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	e003      	b.n	8003222 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800321a:	231e      	movs	r3, #30
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800322e:	231e      	movs	r3, #30
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b008      	add	sp, #32
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d00b      	beq.n	8003266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a4a      	ldr	r2, [pc, #296]	; (8003380 <UART_AdvFeatureConfig+0x144>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2202      	movs	r2, #2
 800326c:	4013      	ands	r3, r2
 800326e:	d00b      	beq.n	8003288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a43      	ldr	r2, [pc, #268]	; (8003384 <UART_AdvFeatureConfig+0x148>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2204      	movs	r2, #4
 800328e:	4013      	ands	r3, r2
 8003290:	d00b      	beq.n	80032aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <UART_AdvFeatureConfig+0x14c>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2208      	movs	r2, #8
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a34      	ldr	r2, [pc, #208]	; (800338c <UART_AdvFeatureConfig+0x150>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2210      	movs	r2, #16
 80032d2:	4013      	ands	r3, r2
 80032d4:	d00b      	beq.n	80032ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <UART_AdvFeatureConfig+0x154>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2220      	movs	r2, #32
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00b      	beq.n	8003310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4a25      	ldr	r2, [pc, #148]	; (8003394 <UART_AdvFeatureConfig+0x158>)
 8003300:	4013      	ands	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	4013      	ands	r3, r2
 8003318:	d01d      	beq.n	8003356 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <UART_AdvFeatureConfig+0x15c>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	035b      	lsls	r3, r3, #13
 800333a:	429a      	cmp	r2, r3
 800333c:	d10b      	bne.n	8003356 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a15      	ldr	r2, [pc, #84]	; (800339c <UART_AdvFeatureConfig+0x160>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	4013      	ands	r3, r2
 800335e:	d00b      	beq.n	8003378 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <UART_AdvFeatureConfig+0x164>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}
 8003380:	fffdffff 	.word	0xfffdffff
 8003384:	fffeffff 	.word	0xfffeffff
 8003388:	fffbffff 	.word	0xfffbffff
 800338c:	ffff7fff 	.word	0xffff7fff
 8003390:	ffffefff 	.word	0xffffefff
 8003394:	ffffdfff 	.word	0xffffdfff
 8003398:	ffefffff 	.word	0xffefffff
 800339c:	ff9fffff 	.word	0xff9fffff
 80033a0:	fff7ffff 	.word	0xfff7ffff

080033a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b092      	sub	sp, #72	; 0x48
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2284      	movs	r2, #132	; 0x84
 80033b0:	2100      	movs	r1, #0
 80033b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b4:	f7fd fd52 	bl	8000e5c <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2208      	movs	r2, #8
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d12c      	bne.n	8003424 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	0391      	lsls	r1, r2, #14
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4a46      	ldr	r2, [pc, #280]	; (80034ec <UART_CheckIdleState+0x148>)
 80033d4:	9200      	str	r2, [sp, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f000 f88c 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d021      	beq.n	8003424 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e0:	f3ef 8310 	mrs	r3, PRIMASK
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ea:	2301      	movs	r3, #1
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2278      	movs	r2, #120	; 0x78
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e05f      	b.n	80034e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	2b04      	cmp	r3, #4
 8003430:	d146      	bne.n	80034c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	03d1      	lsls	r1, r2, #15
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4a2c      	ldr	r2, [pc, #176]	; (80034ec <UART_CheckIdleState+0x148>)
 800343c:	9200      	str	r2, [sp, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	f000 f858 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d03b      	beq.n	80034c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	60fb      	str	r3, [r7, #12]
  return(result);
 800344e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
 8003452:	2301      	movs	r3, #1
 8003454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4921      	ldr	r1, [pc, #132]	; (80034f0 <UART_CheckIdleState+0x14c>)
 800346a:	400a      	ands	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003480:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
 8003484:	2301      	movs	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2101      	movs	r1, #1
 800349c:	438a      	bics	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	2120      	movs	r1, #32
 80034b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2278      	movs	r2, #120	; 0x78
 80034b8:	2100      	movs	r1, #0
 80034ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e011      	b.n	80034e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	2120      	movs	r1, #32
 80034cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2278      	movs	r2, #120	; 0x78
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b010      	add	sp, #64	; 0x40
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	01ffffff 	.word	0x01ffffff
 80034f0:	fffffedf 	.word	0xfffffedf

080034f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003504:	e04b      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	3301      	adds	r3, #1
 800350a:	d048      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fd fca6 	bl	8000e5c <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <UART_WaitOnFlagUntilTimeout+0x2e>
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04b      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2204      	movs	r2, #4
 800352e:	4013      	ands	r3, r2
 8003530:	d035      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2208      	movs	r2, #8
 800353a:	4013      	ands	r3, r2
 800353c:	2b08      	cmp	r3, #8
 800353e:	d111      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2208      	movs	r2, #8
 8003546:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 f906 	bl	800375c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2284      	movs	r2, #132	; 0x84
 8003554:	2108      	movs	r1, #8
 8003556:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2278      	movs	r2, #120	; 0x78
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e02c      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	401a      	ands	r2, r3
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	429a      	cmp	r2, r3
 8003576:	d112      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 f8e9 	bl	800375c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2284      	movs	r2, #132	; 0x84
 800358e:	2120      	movs	r1, #32
 8003590:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2278      	movs	r2, #120	; 0x78
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	425a      	negs	r2, r3
 80035ae:	4153      	adcs	r3, r2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	001a      	movs	r2, r3
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0a4      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	0018      	movs	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b004      	add	sp, #16
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b090      	sub	sp, #64	; 0x40
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	1dbb      	adds	r3, r7, #6
 80035d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1dba      	adds	r2, r7, #6
 80035e0:	2158      	movs	r1, #88	; 0x58
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1dba      	adds	r2, r7, #6
 80035ea:	215a      	movs	r1, #90	; 0x5a
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	015b      	lsls	r3, r3, #5
 80035fe:	429a      	cmp	r2, r3
 8003600:	d10d      	bne.n	800361e <UART_Start_Receive_IT+0x56>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <UART_Start_Receive_IT+0x4c>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	225c      	movs	r2, #92	; 0x5c
 800360e:	4950      	ldr	r1, [pc, #320]	; (8003750 <UART_Start_Receive_IT+0x188>)
 8003610:	5299      	strh	r1, [r3, r2]
 8003612:	e02e      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	225c      	movs	r2, #92	; 0x5c
 8003618:	21ff      	movs	r1, #255	; 0xff
 800361a:	5299      	strh	r1, [r3, r2]
 800361c:	e029      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <UART_Start_Receive_IT+0x7a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <UART_Start_Receive_IT+0x70>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	225c      	movs	r2, #92	; 0x5c
 8003632:	21ff      	movs	r1, #255	; 0xff
 8003634:	5299      	strh	r1, [r3, r2]
 8003636:	e01c      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	225c      	movs	r2, #92	; 0x5c
 800363c:	217f      	movs	r1, #127	; 0x7f
 800363e:	5299      	strh	r1, [r3, r2]
 8003640:	e017      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	055b      	lsls	r3, r3, #21
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <UART_Start_Receive_IT+0xa2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <UART_Start_Receive_IT+0x98>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	225c      	movs	r2, #92	; 0x5c
 800365a:	217f      	movs	r1, #127	; 0x7f
 800365c:	5299      	strh	r1, [r3, r2]
 800365e:	e008      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	225c      	movs	r2, #92	; 0x5c
 8003664:	213f      	movs	r1, #63	; 0x3f
 8003666:	5299      	strh	r1, [r3, r2]
 8003668:	e003      	b.n	8003672 <UART_Start_Receive_IT+0xaa>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	225c      	movs	r2, #92	; 0x5c
 800366e:	2100      	movs	r1, #0
 8003670:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2284      	movs	r2, #132	; 0x84
 8003676:	2100      	movs	r1, #0
 8003678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	2122      	movs	r1, #34	; 0x22
 8003680:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003682:	f3ef 8310 	mrs	r3, PRIMASK
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	2301      	movs	r3, #1
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	429a      	cmp	r2, r3
 80036be:	d107      	bne.n	80036d0 <UART_Start_Receive_IT+0x108>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <UART_Start_Receive_IT+0x18c>)
 80036cc:	669a      	str	r2, [r3, #104]	; 0x68
 80036ce:	e002      	b.n	80036d6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a21      	ldr	r2, [pc, #132]	; (8003758 <UART_Start_Receive_IT+0x190>)
 80036d4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036de:	f3ef 8310 	mrs	r3, PRIMASK
 80036e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80036e4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
 80036e8:	2301      	movs	r3, #1
 80036ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2190      	movs	r1, #144	; 0x90
 8003700:	0049      	lsls	r1, r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	e018      	b.n	8003744 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003712:	f3ef 8310 	mrs	r3, PRIMASK
 8003716:	613b      	str	r3, [r7, #16]
  return(result);
 8003718:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
 800371c:	2301      	movs	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2120      	movs	r1, #32
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b010      	add	sp, #64	; 0x40
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	000001ff 	.word	0x000001ff
 8003754:	08003b4d 	.word	0x08003b4d
 8003758:	08003995 	.word	0x08003995

0800375c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	; 0x38
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	617b      	str	r3, [r7, #20]
  return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4926      	ldr	r1, [pc, #152]	; (8003820 <UART_EndRxTransfer+0xc4>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f383 8810 	msr	PRIMASK, r3
}
 8003794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	623b      	str	r3, [r7, #32]
  return(result);
 800379c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
 80037a0:	2301      	movs	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	438a      	bics	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d118      	bne.n	8003802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	2301      	movs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f383 8810 	msr	PRIMASK, r3
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2110      	movs	r1, #16
 80037f2:	438a      	bics	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	2120      	movs	r1, #32
 8003808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b00e      	add	sp, #56	; 0x38
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	fffffedf 	.word	0xfffffedf

08003824 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003830:	2b21      	cmp	r3, #33	; 0x21
 8003832:	d14d      	bne.n	80038d0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2252      	movs	r2, #82	; 0x52
 8003838:	5a9b      	ldrh	r3, [r3, r2]
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d132      	bne.n	80038a6 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003840:	f3ef 8310 	mrs	r3, PRIMASK
 8003844:	60bb      	str	r3, [r7, #8]
  return(result);
 8003846:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	2301      	movs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	438a      	bics	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003872:	f3ef 8310 	mrs	r3, PRIMASK
 8003876:	617b      	str	r3, [r7, #20]
  return(result);
 8003878:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2301      	movs	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2140      	movs	r1, #64	; 0x40
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f383 8810 	msr	PRIMASK, r3
}
 80038a2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038a4:	e014      	b.n	80038d0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b292      	uxth	r2, r2
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2252      	movs	r2, #82	; 0x52
 80038c2:	5a9b      	ldrh	r3, [r3, r2]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b299      	uxth	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2252      	movs	r2, #82	; 0x52
 80038ce:	5299      	strh	r1, [r3, r2]
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b00a      	add	sp, #40	; 0x28
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	; 0x30
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	d151      	bne.n	800398c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2252      	movs	r2, #82	; 0x52
 80038ec:	5a9b      	ldrh	r3, [r3, r2]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d132      	bne.n	800395a <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038fa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	2301      	movs	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	438a      	bics	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f383 8810 	msr	PRIMASK, r3
}
 8003924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	61bb      	str	r3, [r7, #24]
  return(result);
 800392c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	2301      	movs	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003958:	e018      	b.n	800398c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	881a      	ldrh	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	05d2      	lsls	r2, r2, #23
 800396a:	0dd2      	lsrs	r2, r2, #23
 800396c:	b292      	uxth	r2, r2
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2252      	movs	r2, #82	; 0x52
 800397e:	5a9b      	ldrh	r3, [r3, r2]
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b299      	uxth	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2252      	movs	r2, #82	; 0x52
 800398a:	5299      	strh	r1, [r3, r2]
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b00c      	add	sp, #48	; 0x30
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b094      	sub	sp, #80	; 0x50
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800399c:	204e      	movs	r0, #78	; 0x4e
 800399e:	183b      	adds	r3, r7, r0
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	215c      	movs	r1, #92	; 0x5c
 80039a4:	5a52      	ldrh	r2, [r2, r1]
 80039a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	589b      	ldr	r3, [r3, r2]
 80039ae:	2b22      	cmp	r3, #34	; 0x22
 80039b0:	d000      	beq.n	80039b4 <UART_RxISR_8BIT+0x20>
 80039b2:	e0ba      	b.n	8003b2a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	214c      	movs	r1, #76	; 0x4c
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80039be:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	183b      	adds	r3, r7, r0
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b2d9      	uxtb	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	400a      	ands	r2, r1
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	225a      	movs	r2, #90	; 0x5a
 80039e4:	5a9b      	ldrh	r3, [r3, r2]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b299      	uxth	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	225a      	movs	r2, #90	; 0x5a
 80039f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	225a      	movs	r2, #90	; 0x5a
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d000      	beq.n	8003a00 <UART_RxISR_8BIT+0x6c>
 80039fe:	e09c      	b.n	8003b3a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4948      	ldr	r1, [pc, #288]	; (8003b44 <UART_RxISR_8BIT+0x1b0>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a32:	f3ef 8310 	mrs	r3, PRIMASK
 8003a36:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	2120      	movs	r1, #32
 8003a6a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	4013      	ands	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a90:	2301      	movs	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4928      	ldr	r1, [pc, #160]	; (8003b48 <UART_RxISR_8BIT+0x1b4>)
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d12f      	bne.n	8003b20 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	438a      	bics	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2210      	movs	r2, #16
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d103      	bne.n	8003b0e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2258      	movs	r2, #88	; 0x58
 8003b12:	5a9a      	ldrh	r2, [r3, r2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff f99c 	bl	8002e56 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b1e:	e00c      	b.n	8003b3a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7ff f98f 	bl	8002e46 <HAL_UART_RxCpltCallback>
}
 8003b28:	e007      	b.n	8003b3a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2108      	movs	r1, #8
 8003b36:	430a      	orrs	r2, r1
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b014      	add	sp, #80	; 0x50
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	fffffedf 	.word	0xfffffedf
 8003b48:	fbffffff 	.word	0xfbffffff

08003b4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b094      	sub	sp, #80	; 0x50
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b54:	204e      	movs	r0, #78	; 0x4e
 8003b56:	183b      	adds	r3, r7, r0
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	215c      	movs	r1, #92	; 0x5c
 8003b5c:	5a52      	ldrh	r2, [r2, r1]
 8003b5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2b22      	cmp	r3, #34	; 0x22
 8003b68:	d000      	beq.n	8003b6c <UART_RxISR_16BIT+0x20>
 8003b6a:	e0ba      	b.n	8003ce2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	214c      	movs	r1, #76	; 0x4c
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b76:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	183a      	adds	r2, r7, r0
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	8812      	ldrh	r2, [r2, #0]
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	225a      	movs	r2, #90	; 0x5a
 8003b9c:	5a9b      	ldrh	r3, [r3, r2]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	225a      	movs	r2, #90	; 0x5a
 8003ba8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	225a      	movs	r2, #90	; 0x5a
 8003bae:	5a9b      	ldrh	r3, [r3, r2]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d000      	beq.n	8003bb8 <UART_RxISR_16BIT+0x6c>
 8003bb6:	e09c      	b.n	8003cf2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	623b      	str	r3, [r7, #32]
  return(result);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4948      	ldr	r1, [pc, #288]	; (8003cfc <UART_RxISR_16BIT+0x1b0>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bea:	f3ef 8310 	mrs	r3, PRIMASK
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	2120      	movs	r1, #32
 8003c22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	617b      	str	r3, [r7, #20]
  return(result);
 8003c44:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c48:	2301      	movs	r3, #1
 8003c4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4928      	ldr	r1, [pc, #160]	; (8003d00 <UART_RxISR_16BIT+0x1b4>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d12f      	bne.n	8003cd8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c88:	2301      	movs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2110      	movs	r1, #16
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d103      	bne.n	8003cc6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2258      	movs	r2, #88	; 0x58
 8003cca:	5a9a      	ldrh	r2, [r3, r2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff f8c0 	bl	8002e56 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cd6:	e00c      	b.n	8003cf2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff f8b3 	bl	8002e46 <HAL_UART_RxCpltCallback>
}
 8003ce0:	e007      	b.n	8003cf2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2108      	movs	r1, #8
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b014      	add	sp, #80	; 0x50
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	fffffedf 	.word	0xfffffedf
 8003d00:	fbffffff 	.word	0xfbffffff

08003d04 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e05b      	b.n	8003dd4 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2278      	movs	r2, #120	; 0x78
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc fe00 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2101      	movs	r1, #1
 8003d46:	438a      	bics	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff f88d 	bl	8002e6c <UART_SetConfig>
 8003d52:	0003      	movs	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e03b      	b.n	8003dd4 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fa68 	bl	800323c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	01c9      	lsls	r1, r1, #7
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_RS485Ex_Init+0xd8>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	055b      	lsls	r3, r3, #21
 8003d98:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_RS485Ex_Init+0xdc>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff fae9 	bl	80033a4 <UART_CheckIdleState>
 8003dd2:	0003      	movs	r3, r0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b006      	add	sp, #24
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	ffff7fff 	.word	0xffff7fff
 8003de0:	fc00ffff 	.word	0xfc00ffff

08003de4 <SetupModbusRTU>:
   ----------------------------------------------------------------------- */

/* --- setup the Modbus mode as RTU
*/
Module_Status SetupModbusRTU(uint32_t BaudRate, uint32_t ParityBit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	Module_Status Status;
	ULONG Pbit = (ULONG) ParityBit;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	613b      	str	r3, [r7, #16]
	ULONG ulBaudRate = (ULONG) BaudRate;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
	
	/* Initialize Modbus port as RTU */
	if ( MB_ENOERR != eMBMSerialInit( &xMBMaster,  MB_RTU, 1, ulBaudRate, Pbit ) ) {
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	480c      	ldr	r0, [pc, #48]	; (8003e30 <SetupModbusRTU+0x4c>)
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	0013      	movs	r3, r2
 8003e02:	2201      	movs	r2, #1
 8003e04:	2100      	movs	r1, #0
 8003e06:	f002 faeb 	bl	80063e0 <eMBMSerialInit>
 8003e0a:	1e03      	subs	r3, r0, #0
 8003e0c:	d004      	beq.n	8003e18 <SetupModbusRTU+0x34>
		Status = EMS_ERROR;}
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	22ff      	movs	r2, #255	; 0xff
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e003      	b.n	8003e20 <SetupModbusRTU+0x3c>
	else 	
		Status = EMS_OK;
 8003e18:	2317      	movs	r3, #23
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]

 return Status;	
 8003e20:	2317      	movs	r3, #23
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	781b      	ldrb	r3, [r3, #0]
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b006      	add	sp, #24
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	20000424 	.word	0x20000424

08003e34 <WriteModbusRegister>:
/*-----------------------------------------------------------*/

/* --- write data to a slave on Modbus port FC: 0x06
*/
Module_Status WriteModbusRegister(uint8_t SlaveAdd, uint32_t RegAdd, uint32_t Data)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	210f      	movs	r1, #15
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	1c02      	adds	r2, r0, #0
 8003e44:	701a      	strb	r2, [r3, #0]
	Module_Status Status;

	if (MB_ENOERR != eMBMWriteSingleRegister(xMBMaster, SlaveAdd, RegAdd, Data)) {	
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <WriteModbusRegister+0x4c>)
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	b29c      	uxth	r4, r3
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	7819      	ldrb	r1, [r3, #0]
 8003e56:	0023      	movs	r3, r4
 8003e58:	f003 fb87 	bl	800756a <eMBMWriteSingleRegister>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d004      	beq.n	8003e6a <WriteModbusRegister+0x36>
		Status = EMS_ERROR;}
 8003e60:	2317      	movs	r3, #23
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e003      	b.n	8003e72 <WriteModbusRegister+0x3e>
	else {
		Status = EMS_OK;
 8003e6a:	2317      	movs	r3, #23
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
	}
	return Status;
 8003e72:	2317      	movs	r3, #23
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	781b      	ldrb	r3, [r3, #0]
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b007      	add	sp, #28
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	20000424 	.word	0x20000424

08003e84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	1dbb      	adds	r3, r7, #6
 8003e8e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	2200      	movs	r2, #0
 8003e98:	5e9b      	ldrsh	r3, [r3, r2]
 8003e9a:	2b84      	cmp	r3, #132	; 0x84
 8003e9c:	d006      	beq.n	8003eac <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	18d3      	adds	r3, r2, r3
 8003ea8:	3303      	adds	r3, #3
 8003eaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b004      	add	sp, #16
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003eba:	f000 fe2f 	bl	8004b1c <vTaskStartScheduler>
  
  return osOK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685c      	ldr	r4, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003edc:	b29e      	uxth	r6, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	5e9b      	ldrsh	r3, [r3, r2]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff ffcd 	bl	8003e84 <makeFreeRtosPriority>
 8003eea:	0001      	movs	r1, r0
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	230c      	movs	r3, #12
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	9100      	str	r1, [sp, #0]
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	0032      	movs	r2, r6
 8003efa:	0029      	movs	r1, r5
 8003efc:	0020      	movs	r0, r4
 8003efe:	f000 fcc1 	bl	8004884 <xTaskCreate>
 8003f02:	0003      	movs	r3, r0
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b005      	add	sp, #20
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <osDelay+0x16>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	e000      	b.n	8003f2e <osDelay+0x18>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 fdce 	bl	8004ad0 <vTaskDelay>
  
  return osOK;
 8003f34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d111      	bne.n	8003f72 <osSemaphoreCreate+0x34>
    vSemaphoreCreateBinary(sema);
 8003f4e:	2203      	movs	r2, #3
 8003f50:	2100      	movs	r1, #0
 8003f52:	2001      	movs	r0, #1
 8003f54:	f000 f90f 	bl	8004176 <xQueueGenericCreate>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <osSemaphoreCreate+0x30>
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	2300      	movs	r3, #0
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f000 f95c 	bl	8004226 <xQueueGenericSend>
    return sema;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	e000      	b.n	8003f74 <osSemaphoreCreate+0x36>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8003f72:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3308      	adds	r3, #8
 8003f88:	001a      	movs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4252      	negs	r2, r2
 8003f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b002      	add	sp, #8
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b004      	add	sp, #16
 8004010:	bd80      	pop	{r7, pc}

08004012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	3301      	adds	r3, #1
 8004026:	d103      	bne.n	8004030 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e00c      	b.n	800404a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3308      	adds	r3, #8
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e002      	b.n	800403e <vListInsert+0x2c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d2f6      	bcs.n	8004038 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bd80      	pop	{r7, pc}

0800407e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6892      	ldr	r2, [r2, #8]
 8004094:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d103      	bne.n	80040b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bd80      	pop	{r7, pc}

080040ce <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xQueueGenericReset+0x18>
 80040e2:	b672      	cpsid	i
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80040e6:	f001 fcf3 	bl	8005ad0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	434b      	muls	r3, r1
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	1e59      	subs	r1, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	434b      	muls	r3, r1
 800411c:	18d2      	adds	r2, r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2244      	movs	r2, #68	; 0x44
 8004126:	21ff      	movs	r1, #255	; 0xff
 8004128:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2245      	movs	r2, #69	; 0x45
 800412e:	21ff      	movs	r1, #255	; 0xff
 8004130:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3310      	adds	r3, #16
 8004144:	0018      	movs	r0, r3
 8004146:	f000 feef 	bl	8004f28 <xTaskRemoveFromEventList>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d00c      	beq.n	8004168 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800414e:	f001 fcaf 	bl	8005ab0 <vPortYield>
 8004152:	e009      	b.n	8004168 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3310      	adds	r3, #16
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff ff0f 	bl	8003f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff ff0a 	bl	8003f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004168:	f001 fcc4 	bl	8005af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800416c:	2301      	movs	r3, #1
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}

08004176 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004176:	b590      	push	{r4, r7, lr}
 8004178:	b08b      	sub	sp, #44	; 0x2c
 800417a:	af02      	add	r7, sp, #8
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <xQueueGenericCreate+0x18>
 800418a:	b672      	cpsid	i
 800418c:	e7fe      	b.n	800418c <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e003      	b.n	80041a2 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4353      	muls	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3348      	adds	r3, #72	; 0x48
 80041a6:	0018      	movs	r0, r3
 80041a8:	f001 fd2a 	bl	8005c00 <pvPortMalloc>
 80041ac:	0003      	movs	r3, r0
 80041ae:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3348      	adds	r3, #72	; 0x48
 80041ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2246      	movs	r2, #70	; 0x46
 80041c0:	2100      	movs	r1, #0
 80041c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c4:	1dfb      	adds	r3, r7, #7
 80041c6:	781c      	ldrb	r4, [r3, #0]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	0023      	movs	r3, r4
 80041d4:	f000 f805 	bl	80041e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80041d8:	69bb      	ldr	r3, [r7, #24]
	}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b009      	add	sp, #36	; 0x24
 80041e0:	bd90      	pop	{r4, r7, pc}

080041e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	001a      	movs	r2, r3
 80041f0:	1cfb      	adds	r3, r7, #3
 80041f2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e002      	b.n	8004208 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2101      	movs	r1, #1
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff ff58 	bl	80040ce <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}

08004226 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b08a      	sub	sp, #40	; 0x28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <xQueueGenericSend+0x20>
 8004242:	b672      	cpsid	i
 8004244:	e7fe      	b.n	8004244 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <xQueueGenericSend+0x2e>
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueGenericSend+0x32>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueGenericSend+0x34>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0x3c>
 800425e:	b672      	cpsid	i
 8004260:	e7fe      	b.n	8004260 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d103      	bne.n	8004270 <xQueueGenericSend+0x4a>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <xQueueGenericSend+0x4e>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <xQueueGenericSend+0x50>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <xQueueGenericSend+0x58>
 800427a:	b672      	cpsid	i
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f000 ffd5 	bl	800522c <xTaskGetSchedulerState>
 8004282:	1e03      	subs	r3, r0, #0
 8004284:	d102      	bne.n	800428c <xQueueGenericSend+0x66>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <xQueueGenericSend+0x6a>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <xQueueGenericSend+0x6c>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <xQueueGenericSend+0x74>
 8004296:	b672      	cpsid	i
 8004298:	e7fe      	b.n	8004298 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800429a:	f001 fc19 	bl	8005ad0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <xQueueGenericSend+0x8a>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d11e      	bne.n	80042ee <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 f99f 	bl	80045fa <prvCopyDataToQueue>
 80042bc:	0003      	movs	r3, r0
 80042be:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	3324      	adds	r3, #36	; 0x24
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 fe2b 	bl	8004f28 <xTaskRemoveFromEventList>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d007      	beq.n	80042e6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042d6:	f001 fbeb 	bl	8005ab0 <vPortYield>
 80042da:	e004      	b.n	80042e6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042e2:	f001 fbe5 	bl	8005ab0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042e6:	f001 fc05 	bl	8005af4 <vPortExitCritical>
				return pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e05b      	b.n	80043a6 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042f4:	f001 fbfe 	bl	8005af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e054      	b.n	80043a6 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004302:	2314      	movs	r3, #20
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fe6a 	bl	8004fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004310:	f001 fbf0 	bl	8005af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004314:	f000 fc3e 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004318:	f001 fbda 	bl	8005ad0 <vPortEnterCritical>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2244      	movs	r2, #68	; 0x44
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	d103      	bne.n	8004330 <xQueueGenericSend+0x10a>
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2244      	movs	r2, #68	; 0x44
 800432c:	2100      	movs	r1, #0
 800432e:	5499      	strb	r1, [r3, r2]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2245      	movs	r2, #69	; 0x45
 8004334:	5c9b      	ldrb	r3, [r3, r2]
 8004336:	b25b      	sxtb	r3, r3
 8004338:	3301      	adds	r3, #1
 800433a:	d103      	bne.n	8004344 <xQueueGenericSend+0x11e>
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2245      	movs	r2, #69	; 0x45
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]
 8004344:	f001 fbd6 	bl	8005af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004348:	1d3a      	adds	r2, r7, #4
 800434a:	2314      	movs	r3, #20
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	0011      	movs	r1, r2
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fe59 	bl	8005008 <xTaskCheckForTimeOut>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d11e      	bne.n	8004398 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fa51 	bl	8004804 <prvIsQueueFull>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d011      	beq.n	800438a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	0011      	movs	r1, r2
 800436e:	0018      	movs	r0, r3
 8004370:	f000 fdbc 	bl	8004eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	0018      	movs	r0, r3
 8004378:	f000 f9d0 	bl	800471c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800437c:	f000 fc16 	bl	8004bac <xTaskResumeAll>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d18a      	bne.n	800429a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004384:	f001 fb94 	bl	8005ab0 <vPortYield>
 8004388:	e787      	b.n	800429a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 f9c5 	bl	800471c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004392:	f000 fc0b 	bl	8004bac <xTaskResumeAll>
 8004396:	e780      	b.n	800429a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f9be 	bl	800471c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a0:	f000 fc04 	bl	8004bac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043a4:	2300      	movs	r3, #0
		}
	}
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b00a      	add	sp, #40	; 0x28
 80043ac:	bd80      	pop	{r7, pc}

080043ae <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043ae:	b590      	push	{r4, r7, lr}
 80043b0:	b089      	sub	sp, #36	; 0x24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSendFromISR+0x1c>
 80043c6:	b672      	cpsid	i
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <xQueueGenericSendFromISR+0x2a>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <xQueueGenericSendFromISR+0x2e>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <xQueueGenericSendFromISR+0x30>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSendFromISR+0x38>
 80043e2:	b672      	cpsid	i
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d103      	bne.n	80043f4 <xQueueGenericSendFromISR+0x46>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <xQueueGenericSendFromISR+0x4a>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <xQueueGenericSendFromISR+0x4c>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <xQueueGenericSendFromISR+0x54>
 80043fe:	b672      	cpsid	i
 8004400:	e7fe      	b.n	8004400 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004402:	f001 fb8f 	bl	8005b24 <ulSetInterruptMaskFromISR>
 8004406:	0003      	movs	r3, r0
 8004408:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <xQueueGenericSendFromISR+0x6e>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d12e      	bne.n	800447a <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800441c:	2413      	movs	r4, #19
 800441e:	193b      	adds	r3, r7, r4
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	2145      	movs	r1, #69	; 0x45
 8004424:	5c52      	ldrb	r2, [r2, r1]
 8004426:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	0018      	movs	r0, r3
 8004430:	f000 f8e3 	bl	80045fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004434:	193b      	adds	r3, r7, r4
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b25b      	sxtb	r3, r3
 800443a:	3301      	adds	r3, #1
 800443c:	d111      	bne.n	8004462 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3324      	adds	r3, #36	; 0x24
 800444a:	0018      	movs	r0, r3
 800444c:	f000 fd6c 	bl	8004f28 <xTaskRemoveFromEventList>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d00f      	beq.n	8004474 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e008      	b.n	8004474 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004462:	2313      	movs	r3, #19
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	b259      	sxtb	r1, r3
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2245      	movs	r2, #69	; 0x45
 8004472:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
		{
 8004478:	e001      	b.n	800447e <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	0018      	movs	r0, r3
 8004482:	f001 fb55 	bl	8005b30 <vClearInterruptMaskFromISR>

	return xReturn;
 8004486:	69fb      	ldr	r3, [r7, #28]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b009      	add	sp, #36	; 0x24
 800448e:	bd90      	pop	{r4, r7, pc}

08004490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueReceive+0x1e>
 80044aa:	b672      	cpsid	i
 80044ac:	e7fe      	b.n	80044ac <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <xQueueReceive+0x2c>
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <xQueueReceive+0x30>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <xQueueReceive+0x32>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <xQueueReceive+0x3a>
 80044c6:	b672      	cpsid	i
 80044c8:	e7fe      	b.n	80044c8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ca:	f000 feaf 	bl	800522c <xTaskGetSchedulerState>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d102      	bne.n	80044d8 <xQueueReceive+0x48>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <xQueueReceive+0x4c>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <xQueueReceive+0x4e>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <xQueueReceive+0x56>
 80044e2:	b672      	cpsid	i
 80044e4:	e7fe      	b.n	80044e4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e6:	f001 faf3 	bl	8005ad0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01a      	beq.n	800452c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f8e7 	bl	80046d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	3310      	adds	r3, #16
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fd06 	bl	8004f28 <xTaskRemoveFromEventList>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d001      	beq.n	8004524 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004520:	f001 fac6 	bl	8005ab0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004524:	f001 fae6 	bl	8005af4 <vPortExitCritical>
				return pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	e062      	b.n	80045f2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004532:	f001 fadf 	bl	8005af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004536:	2300      	movs	r3, #0
 8004538:	e05b      	b.n	80045f2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004540:	2314      	movs	r3, #20
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	0018      	movs	r0, r3
 8004546:	f000 fd4b 	bl	8004fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800454e:	f001 fad1 	bl	8005af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004552:	f000 fb1f 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004556:	f001 fabb 	bl	8005ad0 <vPortEnterCritical>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2244      	movs	r2, #68	; 0x44
 800455e:	5c9b      	ldrb	r3, [r3, r2]
 8004560:	b25b      	sxtb	r3, r3
 8004562:	3301      	adds	r3, #1
 8004564:	d103      	bne.n	800456e <xQueueReceive+0xde>
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	2244      	movs	r2, #68	; 0x44
 800456a:	2100      	movs	r1, #0
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2245      	movs	r2, #69	; 0x45
 8004572:	5c9b      	ldrb	r3, [r3, r2]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	3301      	adds	r3, #1
 8004578:	d103      	bne.n	8004582 <xQueueReceive+0xf2>
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	2245      	movs	r2, #69	; 0x45
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]
 8004582:	f001 fab7 	bl	8005af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004586:	1d3a      	adds	r2, r7, #4
 8004588:	2314      	movs	r3, #20
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f000 fd3a 	bl	8005008 <xTaskCheckForTimeOut>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d11e      	bne.n	80045d6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f91c 	bl	80047d8 <prvIsQueueEmpty>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d011      	beq.n	80045c8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	0011      	movs	r1, r2
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fc9d 	bl	8004eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 f8b1 	bl	800471c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ba:	f000 faf7 	bl	8004bac <xTaskResumeAll>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d191      	bne.n	80044e6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80045c2:	f001 fa75 	bl	8005ab0 <vPortYield>
 80045c6:	e78e      	b.n	80044e6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 f8a6 	bl	800471c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d0:	f000 faec 	bl	8004bac <xTaskResumeAll>
 80045d4:	e787      	b.n	80044e6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 f89f 	bl	800471c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045de:	f000 fae5 	bl	8004bac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 f8f7 	bl	80047d8 <prvIsQueueEmpty>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d100      	bne.n	80045f0 <xQueueReceive+0x160>
 80045ee:	e77a      	b.n	80044e6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b00a      	add	sp, #40	; 0x28
 80045f8:	bd80      	pop	{r7, pc}

080045fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10e      	bne.n	8004636 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d14e      	bne.n	80046be <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 fe1d 	bl	8005264 <xTaskPriorityDisinherit>
 800462a:	0003      	movs	r3, r0
 800462c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e043      	b.n	80046be <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d119      	bne.n	8004670 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6898      	ldr	r0, [r3, #8]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0019      	movs	r1, r3
 8004648:	f004 fb4c 	bl	8008ce4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	18d2      	adds	r2, r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d32b      	bcc.n	80046be <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	e026      	b.n	80046be <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68d8      	ldr	r0, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	0019      	movs	r1, r3
 800467c:	f004 fb32 	bl	8008ce4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	425b      	negs	r3, r3
 800468a:	18d2      	adds	r2, r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d207      	bcs.n	80046ac <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	425b      	negs	r3, r3
 80046a6:	18d2      	adds	r2, r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d105      	bne.n	80046be <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046c6:	697b      	ldr	r3, [r7, #20]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	18d2      	adds	r2, r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d303      	bcc.n	8004704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68d9      	ldr	r1, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	0018      	movs	r0, r3
 8004710:	f004 fae8 	bl	8008ce4 <memcpy>
	}
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004724:	f001 f9d4 	bl	8005ad0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	2145      	movs	r1, #69	; 0x45
 8004730:	5c52      	ldrb	r2, [r2, r1]
 8004732:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004734:	e013      	b.n	800475e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fbf0 	bl	8004f28 <xTaskRemoveFromEventList>
 8004748:	1e03      	subs	r3, r0, #0
 800474a:	d001      	beq.n	8004750 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800474c:	f000 fcac 	bl	80050a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004750:	210f      	movs	r1, #15
 8004752:	187b      	adds	r3, r7, r1
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	3b01      	subs	r3, #1
 8004758:	b2da      	uxtb	r2, r3
 800475a:	187b      	adds	r3, r7, r1
 800475c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800475e:	230f      	movs	r3, #15
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b25b      	sxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	dce5      	bgt.n	8004736 <prvUnlockQueue+0x1a>
 800476a:	e000      	b.n	800476e <prvUnlockQueue+0x52>
					break;
 800476c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2245      	movs	r2, #69	; 0x45
 8004772:	21ff      	movs	r1, #255	; 0xff
 8004774:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004776:	f001 f9bd 	bl	8005af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800477a:	f001 f9a9 	bl	8005ad0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800477e:	230e      	movs	r3, #14
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2144      	movs	r1, #68	; 0x44
 8004786:	5c52      	ldrb	r2, [r2, r1]
 8004788:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800478a:	e013      	b.n	80047b4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d016      	beq.n	80047c2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3310      	adds	r3, #16
 8004798:	0018      	movs	r0, r3
 800479a:	f000 fbc5 	bl	8004f28 <xTaskRemoveFromEventList>
 800479e:	1e03      	subs	r3, r0, #0
 80047a0:	d001      	beq.n	80047a6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80047a2:	f000 fc81 	bl	80050a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047a6:	210e      	movs	r1, #14
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b4:	230e      	movs	r3, #14
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	dce5      	bgt.n	800478c <prvUnlockQueue+0x70>
 80047c0:	e000      	b.n	80047c4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80047c2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2244      	movs	r2, #68	; 0x44
 80047c8:	21ff      	movs	r1, #255	; 0xff
 80047ca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80047cc:	f001 f992 	bl	8005af4 <vPortExitCritical>
}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b004      	add	sp, #16
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e0:	f001 f976 	bl	8005ad0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e001      	b.n	80047f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047f6:	f001 f97d 	bl	8005af4 <vPortExitCritical>

	return xReturn;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b004      	add	sp, #16
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800480c:	f001 f960 	bl	8005ad0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	429a      	cmp	r2, r3
 800481a:	d102      	bne.n	8004822 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e001      	b.n	8004826 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004826:	f001 f965 	bl	8005af4 <vPortExitCritical>

	return xReturn;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}

08004834 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e015      	b.n	8004870 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <vQueueAddToRegistry+0x4c>)
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	00d2      	lsls	r2, r2, #3
 800484a:	58d3      	ldr	r3, [r2, r3]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10c      	bne.n	800486a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <vQueueAddToRegistry+0x4c>)
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	00d2      	lsls	r2, r2, #3
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vQueueAddToRegistry+0x4c>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	18d3      	adds	r3, r2, r3
 8004862:	3304      	adds	r3, #4
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004868:	e006      	b.n	8004878 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b07      	cmp	r3, #7
 8004874:	d9e6      	bls.n	8004844 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b004      	add	sp, #16
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000428 	.word	0x20000428

08004884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b08d      	sub	sp, #52	; 0x34
 8004888:	af04      	add	r7, sp, #16
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	1dbb      	adds	r3, r7, #6
 8004892:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004894:	1dbb      	adds	r3, r7, #6
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	0018      	movs	r0, r3
 800489c:	f001 f9b0 	bl	8005c00 <pvPortMalloc>
 80048a0:	0003      	movs	r3, r0
 80048a2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048aa:	2054      	movs	r0, #84	; 0x54
 80048ac:	f001 f9a8 	bl	8005c00 <pvPortMalloc>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
 80048c0:	e006      	b.n	80048d0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f001 fa41 	bl	8005d4c <vPortFree>
 80048ca:	e001      	b.n	80048d0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	683c      	ldr	r4, [r7, #0]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	2300      	movs	r3, #0
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	9302      	str	r3, [sp, #8]
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	0023      	movs	r3, r4
 80048f2:	f000 f80f 	bl	8004914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f885 	bl	8004a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048fe:	2301      	movs	r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e002      	b.n	800490a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004904:	2301      	movs	r3, #1
 8004906:	425b      	negs	r3, r3
 8004908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800490a:	69bb      	ldr	r3, [r7, #24]
	}
 800490c:	0018      	movs	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	b009      	add	sp, #36	; 0x24
 8004912:	bd90      	pop	{r4, r7, pc}

08004914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4936      	ldr	r1, [pc, #216]	; (8004a04 <prvInitialiseNewTask+0xf0>)
 800492a:	468c      	mov	ip, r1
 800492c:	4463      	add	r3, ip
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	18d3      	adds	r3, r2, r3
 8004932:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2207      	movs	r2, #7
 8004938:	4393      	bics	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2207      	movs	r2, #7
 8004940:	4013      	ands	r3, r2
 8004942:	d001      	beq.n	8004948 <prvInitialiseNewTask+0x34>
 8004944:	b672      	cpsid	i
 8004946:	e7fe      	b.n	8004946 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e013      	b.n	8004976 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	18d3      	adds	r3, r2, r3
 8004954:	7818      	ldrb	r0, [r3, #0]
 8004956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004958:	2134      	movs	r1, #52	; 0x34
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	185b      	adds	r3, r3, r1
 8004960:	1c02      	adds	r2, r0, #0
 8004962:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	18d3      	adds	r3, r2, r3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d9e8      	bls.n	800494e <prvInitialiseNewTask+0x3a>
 800497c:	e000      	b.n	8004980 <prvInitialiseNewTask+0x6c>
		{
			break;
 800497e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2243      	movs	r2, #67	; 0x43
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2b06      	cmp	r3, #6
 800498c:	d901      	bls.n	8004992 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800498e:	2306      	movs	r3, #6
 8004990:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	2200      	movs	r2, #0
 80049a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	3304      	adds	r3, #4
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fb05 	bl	8003fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	3318      	adds	r3, #24
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7ff fb00 	bl	8003fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2207      	movs	r2, #7
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	2200      	movs	r2, #0
 80049d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2250      	movs	r2, #80	; 0x50
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 ffdc 	bl	80059a0 <pxPortInitialiseStack>
 80049e8:	0002      	movs	r2, r0
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	3fffffff 	.word	0x3fffffff

08004a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a10:	f001 f85e 	bl	8005ad0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a14:	4b28      	ldr	r3, [pc, #160]	; (8004ab8 <prvAddNewTaskToReadyList+0xb0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <prvAddNewTaskToReadyList+0xb0>)
 8004a1c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004a1e:	4b27      	ldr	r3, [pc, #156]	; (8004abc <prvAddNewTaskToReadyList+0xb4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <prvAddNewTaskToReadyList+0xb4>)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <prvAddNewTaskToReadyList+0xb0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d110      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a34:	f000 fb52 	bl	80050dc <prvInitialiseTaskLists>
 8004a38:	e00d      	b.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <prvAddNewTaskToReadyList+0xb8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <prvAddNewTaskToReadyList+0xb4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d802      	bhi.n	8004a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <prvAddNewTaskToReadyList+0xb4>)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <prvAddNewTaskToReadyList+0xbc>)
 8004a5e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <prvAddNewTaskToReadyList+0xc0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d903      	bls.n	8004a74 <prvAddNewTaskToReadyList+0x6c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <prvAddNewTaskToReadyList+0xc0>)
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	0013      	movs	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <prvAddNewTaskToReadyList+0xc4>)
 8004a82:	189a      	adds	r2, r3, r2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	0019      	movs	r1, r3
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	f7ff fa9f 	bl	8003fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a90:	f001 f830 	bl	8005af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <prvAddNewTaskToReadyList+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <prvAddNewTaskToReadyList+0xb4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d201      	bcs.n	8004aae <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aaa:	f001 f801 	bl	8005ab0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	20000568 	.word	0x20000568
 8004abc:	20000468 	.word	0x20000468
 8004ac0:	20000574 	.word	0x20000574
 8004ac4:	20000584 	.word	0x20000584
 8004ac8:	20000570 	.word	0x20000570
 8004acc:	2000046c 	.word	0x2000046c

08004ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <vTaskDelay+0x48>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <vTaskDelay+0x1e>
 8004aea:	b672      	cpsid	i
 8004aec:	e7fe      	b.n	8004aec <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004aee:	f000 f851 	bl	8004b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2100      	movs	r1, #0
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 fc10 	bl	800531c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004afc:	f000 f856 	bl	8004bac <xTaskResumeAll>
 8004b00:	0003      	movs	r3, r0
 8004b02:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004b0a:	f000 ffd1 	bl	8005ab0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	20000590 	.word	0x20000590

08004b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004b22:	4916      	ldr	r1, [pc, #88]	; (8004b7c <vTaskStartScheduler+0x60>)
 8004b24:	4816      	ldr	r0, [pc, #88]	; (8004b80 <vTaskStartScheduler+0x64>)
 8004b26:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <vTaskStartScheduler+0x68>)
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	f7ff fea7 	bl	8004884 <xTaskCreate>
 8004b36:	0003      	movs	r3, r0
 8004b38:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d103      	bne.n	8004b48 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8004b40:	f000 fc40 	bl	80053c4 <xTimerCreateTimerTask>
 8004b44:	0003      	movs	r3, r0
 8004b46:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d10d      	bne.n	8004b6a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004b4e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <vTaskStartScheduler+0x6c>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	4252      	negs	r2, r2
 8004b56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <vTaskStartScheduler+0x70>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <vTaskStartScheduler+0x74>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b64:	f000 ff80 	bl	8005a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b68:	e004      	b.n	8004b74 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <vTaskStartScheduler+0x58>
 8004b70:	b672      	cpsid	i
 8004b72:	e7fe      	b.n	8004b72 <vTaskStartScheduler+0x56>
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08008d60 	.word	0x08008d60
 8004b80:	080050bd 	.word	0x080050bd
 8004b84:	2000058c 	.word	0x2000058c
 8004b88:	20000588 	.word	0x20000588
 8004b8c:	20000574 	.word	0x20000574
 8004b90:	2000056c 	.word	0x2000056c

08004b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <vTaskSuspendAll+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	4b02      	ldr	r3, [pc, #8]	; (8004ba8 <vTaskSuspendAll+0x14>)
 8004ba0:	601a      	str	r2, [r3, #0]
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000590 	.word	0x20000590

08004bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bba:	4b3a      	ldr	r3, [pc, #232]	; (8004ca4 <xTaskResumeAll+0xf8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <xTaskResumeAll+0x1a>
 8004bc2:	b672      	cpsid	i
 8004bc4:	e7fe      	b.n	8004bc4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bc6:	f000 ff83 	bl	8005ad0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <xTaskResumeAll+0xf8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <xTaskResumeAll+0xf8>)
 8004bd2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd4:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <xTaskResumeAll+0xf8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d15b      	bne.n	8004c94 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <xTaskResumeAll+0xfc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d057      	beq.n	8004c94 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004be4:	e02f      	b.n	8004c46 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <xTaskResumeAll+0x100>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f7ff fa43 	bl	800407e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7ff fa3e 	bl	800407e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <xTaskResumeAll+0x104>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d903      	bls.n	8004c16 <xTaskResumeAll+0x6a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <xTaskResumeAll+0x104>)
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	0013      	movs	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <xTaskResumeAll+0x108>)
 8004c24:	189a      	adds	r2, r3, r2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	0010      	movs	r0, r2
 8004c2e:	f7ff f9ce 	bl	8003fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <xTaskResumeAll+0x10c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d302      	bcc.n	8004c46 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <xTaskResumeAll+0x110>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <xTaskResumeAll+0x100>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1cb      	bne.n	8004be6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c54:	f000 fac6 	bl	80051e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <xTaskResumeAll+0x114>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c64:	f000 f83c 	bl	8004ce0 <xTaskIncrementTick>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d002      	beq.n	8004c72 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <xTaskResumeAll+0x110>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f2      	bne.n	8004c64 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <xTaskResumeAll+0x114>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <xTaskResumeAll+0x110>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c90:	f000 ff0e 	bl	8005ab0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c94:	f000 ff2e 	bl	8005af4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c98:	68bb      	ldr	r3, [r7, #8]
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	20000590 	.word	0x20000590
 8004ca8:	20000568 	.word	0x20000568
 8004cac:	20000528 	.word	0x20000528
 8004cb0:	20000570 	.word	0x20000570
 8004cb4:	2000046c 	.word	0x2000046c
 8004cb8:	20000468 	.word	0x20000468
 8004cbc:	2000057c 	.word	0x2000057c
 8004cc0:	20000578 	.word	0x20000578

08004cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <xTaskGetTickCount+0x18>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cd0:	687b      	ldr	r3, [r7, #4]
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	2000056c 	.word	0x2000056c

08004ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cea:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <xTaskIncrementTick+0x13c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d000      	beq.n	8004cf4 <xTaskIncrementTick+0x14>
 8004cf2:	e083      	b.n	8004dfc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cf4:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <xTaskIncrementTick+0x140>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cfc:	4b48      	ldr	r3, [pc, #288]	; (8004e20 <xTaskIncrementTick+0x140>)
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d117      	bne.n	8004d38 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d08:	4b46      	ldr	r3, [pc, #280]	; (8004e24 <xTaskIncrementTick+0x144>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <xTaskIncrementTick+0x36>
 8004d12:	b672      	cpsid	i
 8004d14:	e7fe      	b.n	8004d14 <xTaskIncrementTick+0x34>
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <xTaskIncrementTick+0x144>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <xTaskIncrementTick+0x148>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b40      	ldr	r3, [pc, #256]	; (8004e24 <xTaskIncrementTick+0x144>)
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <xTaskIncrementTick+0x148>)
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <xTaskIncrementTick+0x14c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <xTaskIncrementTick+0x14c>)
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f000 fa56 	bl	80051e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <xTaskIncrementTick+0x150>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d34e      	bcc.n	8004de0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d42:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <xTaskIncrementTick+0x144>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <xTaskIncrementTick+0x70>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <xTaskIncrementTick+0x72>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d56:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <xTaskIncrementTick+0x150>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	4252      	negs	r2, r2
 8004d5c:	601a      	str	r2, [r3, #0]
					break;
 8004d5e:	e03f      	b.n	8004de0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d60:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <xTaskIncrementTick+0x144>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d203      	bcs.n	8004d80 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <xTaskIncrementTick+0x150>)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
						break;
 8004d7e:	e02f      	b.n	8004de0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3304      	adds	r3, #4
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff f97a 	bl	800407e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3318      	adds	r3, #24
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff f971 	bl	800407e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <xTaskIncrementTick+0x154>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d903      	bls.n	8004db0 <xTaskIncrementTick+0xd0>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <xTaskIncrementTick+0x154>)
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	0013      	movs	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	189b      	adds	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <xTaskIncrementTick+0x158>)
 8004dbe:	189a      	adds	r2, r3, r2
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	0010      	movs	r0, r2
 8004dc8:	f7ff f901 	bl	8003fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <xTaskIncrementTick+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3b3      	bcc.n	8004d42 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dde:	e7b0      	b.n	8004d42 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <xTaskIncrementTick+0x15c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4914      	ldr	r1, [pc, #80]	; (8004e38 <xTaskIncrementTick+0x158>)
 8004de8:	0013      	movs	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	585b      	ldr	r3, [r3, r1]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d907      	bls.n	8004e06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e004      	b.n	8004e06 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <xTaskIncrementTick+0x160>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <xTaskIncrementTick+0x160>)
 8004e04:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <xTaskIncrementTick+0x164>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b006      	add	sp, #24
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000590 	.word	0x20000590
 8004e20:	2000056c 	.word	0x2000056c
 8004e24:	20000520 	.word	0x20000520
 8004e28:	20000524 	.word	0x20000524
 8004e2c:	20000580 	.word	0x20000580
 8004e30:	20000588 	.word	0x20000588
 8004e34:	20000570 	.word	0x20000570
 8004e38:	2000046c 	.word	0x2000046c
 8004e3c:	20000468 	.word	0x20000468
 8004e40:	20000578 	.word	0x20000578
 8004e44:	2000057c 	.word	0x2000057c

08004e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <vTaskSwitchContext+0x90>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <vTaskSwitchContext+0x94>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e5c:	e037      	b.n	8004ece <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004e5e:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <vTaskSwitchContext+0x94>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e64:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <vTaskSwitchContext+0x98>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	e007      	b.n	8004e7c <vTaskSwitchContext+0x34>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <vTaskSwitchContext+0x2e>
 8004e72:	b672      	cpsid	i
 8004e74:	e7fe      	b.n	8004e74 <vTaskSwitchContext+0x2c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	4919      	ldr	r1, [pc, #100]	; (8004ee4 <vTaskSwitchContext+0x9c>)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	0013      	movs	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	585b      	ldr	r3, [r3, r1]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ee      	beq.n	8004e6c <vTaskSwitchContext+0x24>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	0013      	movs	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <vTaskSwitchContext+0x9c>)
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d104      	bne.n	8004ebe <vTaskSwitchContext+0x76>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <vTaskSwitchContext+0xa0>)
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <vTaskSwitchContext+0x98>)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	20000590 	.word	0x20000590
 8004edc:	2000057c 	.word	0x2000057c
 8004ee0:	20000570 	.word	0x20000570
 8004ee4:	2000046c 	.word	0x2000046c
 8004ee8:	20000468 	.word	0x20000468

08004eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <vTaskPlaceOnEventList+0x14>
 8004efc:	b672      	cpsid	i
 8004efe:	e7fe      	b.n	8004efe <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <vTaskPlaceOnEventList+0x38>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3318      	adds	r3, #24
 8004f06:	001a      	movs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7ff f880 	bl	8004012 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fa00 	bl	800531c <prvAddCurrentTaskToDelayedList>
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b002      	add	sp, #8
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000468 	.word	0x20000468

08004f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <xTaskRemoveFromEventList+0x1a>
 8004f3e:	b672      	cpsid	i
 8004f40:	e7fe      	b.n	8004f40 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3318      	adds	r3, #24
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff f899 	bl	800407e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <xTaskRemoveFromEventList+0xa0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11d      	bne.n	8004f90 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	3304      	adds	r3, #4
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff f890 	bl	800407e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <xTaskRemoveFromEventList+0xa4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d903      	bls.n	8004f72 <xTaskRemoveFromEventList+0x4a>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <xTaskRemoveFromEventList+0xa4>)
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	0013      	movs	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <xTaskRemoveFromEventList+0xa8>)
 8004f80:	189a      	adds	r2, r3, r2
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3304      	adds	r3, #4
 8004f86:	0019      	movs	r1, r3
 8004f88:	0010      	movs	r0, r2
 8004f8a:	f7ff f820 	bl	8003fce <vListInsertEnd>
 8004f8e:	e007      	b.n	8004fa0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3318      	adds	r3, #24
 8004f94:	001a      	movs	r2, r3
 8004f96:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <xTaskRemoveFromEventList+0xac>)
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7ff f817 	bl	8003fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <xTaskRemoveFromEventList+0xb0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d905      	bls.n	8004fba <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <xTaskRemoveFromEventList+0xb4>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e001      	b.n	8004fbe <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b004      	add	sp, #16
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000590 	.word	0x20000590
 8004fcc:	20000570 	.word	0x20000570
 8004fd0:	2000046c 	.word	0x2000046c
 8004fd4:	20000528 	.word	0x20000528
 8004fd8:	20000468 	.word	0x20000468
 8004fdc:	2000057c 	.word	0x2000057c

08004fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <vTaskInternalSetTimeOutState+0x20>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <vTaskInternalSetTimeOutState+0x24>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	605a      	str	r2, [r3, #4]
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000580 	.word	0x20000580
 8005004:	2000056c 	.word	0x2000056c

08005008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <xTaskCheckForTimeOut+0x14>
 8005018:	b672      	cpsid	i
 800501a:	e7fe      	b.n	800501a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <xTaskCheckForTimeOut+0x1e>
 8005022:	b672      	cpsid	i
 8005024:	e7fe      	b.n	8005024 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005026:	f000 fd53 	bl	8005ad0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <xTaskCheckForTimeOut+0x98>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	d102      	bne.n	8005048 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e024      	b.n	8005092 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <xTaskCheckForTimeOut+0x9c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d007      	beq.n	8005064 <xTaskCheckForTimeOut+0x5c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800505e:	2301      	movs	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e016      	b.n	8005092 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	429a      	cmp	r2, r3
 800506c:	d20c      	bcs.n	8005088 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad2      	subs	r2, r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff ffaf 	bl	8004fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e004      	b.n	8005092 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800508e:	2301      	movs	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005092:	f000 fd2f 	bl	8005af4 <vPortExitCritical>

	return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b006      	add	sp, #24
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	2000056c 	.word	0x2000056c
 80050a4:	20000580 	.word	0x20000580

080050a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050ac:	4b02      	ldr	r3, [pc, #8]	; (80050b8 <vTaskMissedYield+0x10>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000057c 	.word	0x2000057c

080050bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050c4:	f000 f84e 	bl	8005164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <prvIdleTask+0x1c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d9f9      	bls.n	80050c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050d0:	f000 fcee 	bl	8005ab0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80050d4:	e7f6      	b.n	80050c4 <prvIdleTask+0x8>
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	2000046c 	.word	0x2000046c

080050dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e00c      	b.n	8005102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	0013      	movs	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a14      	ldr	r2, [pc, #80]	; (8005144 <prvInitialiseTaskLists+0x68>)
 80050f4:	189b      	adds	r3, r3, r2
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7fe ff40 	bl	8003f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3301      	adds	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d9ef      	bls.n	80050e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <prvInitialiseTaskLists+0x6c>)
 800510a:	0018      	movs	r0, r3
 800510c:	f7fe ff36 	bl	8003f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005110:	4b0e      	ldr	r3, [pc, #56]	; (800514c <prvInitialiseTaskLists+0x70>)
 8005112:	0018      	movs	r0, r3
 8005114:	f7fe ff32 	bl	8003f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <prvInitialiseTaskLists+0x74>)
 800511a:	0018      	movs	r0, r3
 800511c:	f7fe ff2e 	bl	8003f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <prvInitialiseTaskLists+0x78>)
 8005122:	0018      	movs	r0, r3
 8005124:	f7fe ff2a 	bl	8003f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <prvInitialiseTaskLists+0x7c>)
 800512a:	0018      	movs	r0, r3
 800512c:	f7fe ff26 	bl	8003f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvInitialiseTaskLists+0x80>)
 8005132:	4a05      	ldr	r2, [pc, #20]	; (8005148 <prvInitialiseTaskLists+0x6c>)
 8005134:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <prvInitialiseTaskLists+0x84>)
 8005138:	4a04      	ldr	r2, [pc, #16]	; (800514c <prvInitialiseTaskLists+0x70>)
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	b002      	add	sp, #8
 8005142:	bd80      	pop	{r7, pc}
 8005144:	2000046c 	.word	0x2000046c
 8005148:	200004f8 	.word	0x200004f8
 800514c:	2000050c 	.word	0x2000050c
 8005150:	20000528 	.word	0x20000528
 8005154:	2000053c 	.word	0x2000053c
 8005158:	20000554 	.word	0x20000554
 800515c:	20000520 	.word	0x20000520
 8005160:	20000524 	.word	0x20000524

08005164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516a:	e01a      	b.n	80051a2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800516c:	f000 fcb0 	bl	8005ad0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <prvCheckTasksWaitingTermination+0x50>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	0018      	movs	r0, r3
 800517e:	f7fe ff7e 	bl	800407e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <prvCheckTasksWaitingTermination+0x54>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <prvCheckTasksWaitingTermination+0x54>)
 800518a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 8005194:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005196:	f000 fcad 	bl	8005af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 f80f 	bl	80051c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvCheckTasksWaitingTermination+0x58>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e0      	bne.n	800516c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	2000053c 	.word	0x2000053c
 80051b8:	20000568 	.word	0x20000568
 80051bc:	20000550 	.word	0x20000550

080051c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	0018      	movs	r0, r3
 80051ce:	f000 fdbd 	bl	8005d4c <vPortFree>
			vPortFree( pxTCB );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 fdb9 	bl	8005d4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <prvResetNextTaskUnblockTime+0x40>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <prvResetNextTaskUnblockTime+0x14>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <prvResetNextTaskUnblockTime+0x16>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <prvResetNextTaskUnblockTime+0x44>)
 8005200:	2201      	movs	r2, #1
 8005202:	4252      	negs	r2, r2
 8005204:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005206:	e008      	b.n	800521a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <prvResetNextTaskUnblockTime+0x40>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <prvResetNextTaskUnblockTime+0x44>)
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b002      	add	sp, #8
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	20000520 	.word	0x20000520
 8005228:	20000588 	.word	0x20000588

0800522c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <xTaskGetSchedulerState+0x30>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800523a:	2301      	movs	r3, #1
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e008      	b.n	8005252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <xTaskGetSchedulerState+0x34>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005248:	2302      	movs	r3, #2
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e001      	b.n	8005252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005252:	687b      	ldr	r3, [r7, #4]
	}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000574 	.word	0x20000574
 8005260:	20000590 	.word	0x20000590

08005264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d044      	beq.n	8005304 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800527a:	4b25      	ldr	r3, [pc, #148]	; (8005310 <xTaskPriorityDisinherit+0xac>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <xTaskPriorityDisinherit+0x24>
 8005284:	b672      	cpsid	i
 8005286:	e7fe      	b.n	8005286 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <xTaskPriorityDisinherit+0x30>
 8005290:	b672      	cpsid	i
 8005292:	e7fe      	b.n	8005292 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d02c      	beq.n	8005304 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d128      	bne.n	8005304 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3304      	adds	r3, #4
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7fe fee1 	bl	800407e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	2207      	movs	r2, #7
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <xTaskPriorityDisinherit+0xb0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <xTaskPriorityDisinherit+0x80>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <xTaskPriorityDisinherit+0xb0>)
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	0013      	movs	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a09      	ldr	r2, [pc, #36]	; (8005318 <xTaskPriorityDisinherit+0xb4>)
 80052f2:	189a      	adds	r2, r3, r2
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3304      	adds	r3, #4
 80052f8:	0019      	movs	r1, r3
 80052fa:	0010      	movs	r0, r2
 80052fc:	f7fe fe67 	bl	8003fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005304:	68fb      	ldr	r3, [r7, #12]
	}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	20000468 	.word	0x20000468
 8005314:	20000570 	.word	0x20000570
 8005318:	2000046c 	.word	0x2000046c

0800531c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <prvAddCurrentTaskToDelayedList+0x90>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800532c:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3304      	adds	r3, #4
 8005332:	0018      	movs	r0, r3
 8005334:	f7fe fea3 	bl	800407e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	d10b      	bne.n	8005356 <prvAddCurrentTaskToDelayedList+0x3a>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f7fe fe3d 	bl	8003fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005354:	e026      	b.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	429a      	cmp	r2, r3
 800536c:	d209      	bcs.n	8005382 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3304      	adds	r3, #4
 8005378:	0019      	movs	r1, r3
 800537a:	0010      	movs	r0, r2
 800537c:	f7fe fe49 	bl	8004012 <vListInsert>
}
 8005380:	e010      	b.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	0019      	movs	r1, r3
 800538e:	0010      	movs	r0, r2
 8005390:	f7fe fe3f 	bl	8004012 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005394:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d202      	bcs.n	80053a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b004      	add	sp, #16
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	2000056c 	.word	0x2000056c
 80053b0:	20000468 	.word	0x20000468
 80053b4:	20000554 	.word	0x20000554
 80053b8:	20000524 	.word	0x20000524
 80053bc:	20000520 	.word	0x20000520
 80053c0:	20000588 	.word	0x20000588

080053c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ce:	f000 fa95 	bl	80058fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <xTimerCreateTimerTask+0x44>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80053da:	490c      	ldr	r1, [pc, #48]	; (800540c <xTimerCreateTimerTask+0x48>)
 80053dc:	480c      	ldr	r0, [pc, #48]	; (8005410 <xTimerCreateTimerTask+0x4c>)
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <xTimerCreateTimerTask+0x50>)
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	2303      	movs	r3, #3
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	f7ff fa4b 	bl	8004884 <xTaskCreate>
 80053ee:	0003      	movs	r3, r0
 80053f0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xTimerCreateTimerTask+0x38>
 80053f8:	b672      	cpsid	i
 80053fa:	e7fe      	b.n	80053fa <xTimerCreateTimerTask+0x36>
	return xReturn;
 80053fc:	687b      	ldr	r3, [r7, #4]
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b002      	add	sp, #8
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200005c4 	.word	0x200005c4
 800540c:	08008d68 	.word	0x08008d68
 8005410:	080055ad 	.word	0x080055ad
 8005414:	200005c8 	.word	0x200005c8

08005418 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005418:	b590      	push	{r4, r7, lr}
 800541a:	b089      	sub	sp, #36	; 0x24
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005426:	2028      	movs	r0, #40	; 0x28
 8005428:	f000 fbea 	bl	8005c00 <pvPortMalloc>
 800542c:	0003      	movs	r3, r0
 800542e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005436:	683c      	ldr	r4, [r7, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	0023      	movs	r3, r4
 8005448:	f000 f805 	bl	8005456 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b007      	add	sp, #28
 8005454:	bd90      	pop	{r4, r7, pc}

08005456 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <prvInitialiseNewTimer+0x18>
 800546a:	b672      	cpsid	i
 800546c:	e7fe      	b.n	800546c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005474:	f000 fa42 	bl	80058fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3304      	adds	r3, #4
 800549a:	0018      	movs	r0, r3
 800549c:	f7fe fd8c 	bl	8003fb8 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b089      	sub	sp, #36	; 0x24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <xTimerGenericCommand+0x1c>
 80054c0:	b672      	cpsid	i
 80054c2:	e7fe      	b.n	80054c2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054c4:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <xTimerGenericCommand+0x90>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d030      	beq.n	800552e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054cc:	2410      	movs	r4, #16
 80054ce:	193b      	adds	r3, r7, r4
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054d4:	193b      	adds	r3, r7, r4
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	dc19      	bgt.n	800551a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054e6:	f7ff fea1 	bl	800522c <xTaskGetSchedulerState>
 80054ea:	0003      	movs	r3, r0
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d109      	bne.n	8005504 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <xTimerGenericCommand+0x90>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	1939      	adds	r1, r7, r4
 80054f8:	2300      	movs	r3, #0
 80054fa:	f7fe fe94 	bl	8004226 <xQueueGenericSend>
 80054fe:	0003      	movs	r3, r0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e014      	b.n	800552e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xTimerGenericCommand+0x90>)
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	2310      	movs	r3, #16
 800550a:	18f9      	adds	r1, r7, r3
 800550c:	2300      	movs	r3, #0
 800550e:	2200      	movs	r2, #0
 8005510:	f7fe fe89 	bl	8004226 <xQueueGenericSend>
 8005514:	0003      	movs	r3, r0
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e009      	b.n	800552e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <xTimerGenericCommand+0x90>)
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	2310      	movs	r3, #16
 8005522:	18f9      	adds	r1, r7, r3
 8005524:	2300      	movs	r3, #0
 8005526:	f7fe ff42 	bl	80043ae <xQueueGenericSendFromISR>
 800552a:	0003      	movs	r3, r0
 800552c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b009      	add	sp, #36	; 0x24
 8005536:	bd90      	pop	{r4, r7, pc}
 8005538:	200005c4 	.word	0x200005c4

0800553c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005546:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <prvProcessExpiredTimer+0x6c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3304      	adds	r3, #4
 8005554:	0018      	movs	r0, r3
 8005556:	f7fe fd92 	bl	800407e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d119      	bne.n	8005596 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	18d1      	adds	r1, r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f8aa 	bl	80056c8 <prvInsertTimerInActiveList>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d00e      	beq.n	8005596 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	2100      	movs	r1, #0
 8005584:	f7ff ff90 	bl	80054a8 <xTimerGenericCommand>
 8005588:	0003      	movs	r3, r0
 800558a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <prvProcessExpiredTimer+0x5a>
 8005592:	b672      	cpsid	i
 8005594:	e7fe      	b.n	8005594 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	0010      	movs	r0, r2
 800559e:	4798      	blx	r3
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b004      	add	sp, #16
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200005bc 	.word	0x200005bc

080055ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055b4:	2308      	movs	r3, #8
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	0018      	movs	r0, r3
 80055ba:	f000 f845 	bl	8005648 <prvGetNextExpireTime>
 80055be:	0003      	movs	r3, r0
 80055c0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 f803 	bl	80055d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055ce:	f000 f8bd 	bl	800574c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055d2:	e7ef      	b.n	80055b4 <prvTimerTask+0x8>

080055d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055de:	f7ff fad9 	bl	8004b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055e2:	2308      	movs	r3, #8
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 f84e 	bl	8005688 <prvSampleTimeNow>
 80055ec:	0003      	movs	r3, r0
 80055ee:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d120      	bne.n	8005638 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10c      	bne.n	8005616 <prvProcessTimerOrBlockTask+0x42>
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	429a      	cmp	r2, r3
 8005602:	d808      	bhi.n	8005616 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005604:	f7ff fad2 	bl	8004bac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0011      	movs	r1, r2
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff ff94 	bl	800553c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005614:	e012      	b.n	800563c <prvProcessTimerOrBlockTask+0x68>
				if( xListWasEmpty != pdFALSE )
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d006      	beq.n	800562a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <prvProcessTimerOrBlockTask+0x70>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	425a      	negs	r2, r3
 8005624:	4153      	adcs	r3, r2
 8005626:	b2db      	uxtb	r3, r3
 8005628:	603b      	str	r3, [r7, #0]
				if( xTaskResumeAll() == pdFALSE )
 800562a:	f7ff fabf 	bl	8004bac <xTaskResumeAll>
 800562e:	1e03      	subs	r3, r0, #0
 8005630:	d104      	bne.n	800563c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8005632:	f000 fa3d 	bl	8005ab0 <vPortYield>
}
 8005636:	e001      	b.n	800563c <prvProcessTimerOrBlockTask+0x68>
			( void ) xTaskResumeAll();
 8005638:	f7ff fab8 	bl	8004bac <xTaskResumeAll>
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b004      	add	sp, #16
 8005642:	bd80      	pop	{r7, pc}
 8005644:	200005c0 	.word	0x200005c0

08005648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <prvGetNextExpireTime+0x3c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	425a      	negs	r2, r3
 8005658:	4153      	adcs	r3, r2
 800565a:	b2db      	uxtb	r3, r3
 800565c:	001a      	movs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d105      	bne.n	8005676 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <prvGetNextExpireTime+0x3c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e001      	b.n	800567a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b004      	add	sp, #16
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200005bc 	.word	0x200005bc

08005688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005690:	f7ff fb18 	bl	8004cc4 <xTaskGetTickCount>
 8005694:	0003      	movs	r3, r0
 8005696:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <prvSampleTimeNow+0x3c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d205      	bcs.n	80056ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80056a2:	f000 f8d1 	bl	8005848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e002      	b.n	80056b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <prvSampleTimeNow+0x3c>)
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b004      	add	sp, #16
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	200005cc 	.word	0x200005cc

080056c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d812      	bhi.n	8005714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	1ad2      	subs	r2, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e01b      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <prvInsertTimerInActiveList+0x7c>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	0019      	movs	r1, r3
 800570c:	0010      	movs	r0, r2
 800570e:	f7fe fc80 	bl	8004012 <vListInsert>
 8005712:	e012      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d206      	bcs.n	800572a <prvInsertTimerInActiveList+0x62>
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e007      	b.n	800573a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <prvInsertTimerInActiveList+0x80>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3304      	adds	r3, #4
 8005732:	0019      	movs	r1, r3
 8005734:	0010      	movs	r0, r2
 8005736:	f7fe fc6c 	bl	8004012 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b006      	add	sp, #24
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200005c0 	.word	0x200005c0
 8005748:	200005bc 	.word	0x200005bc

0800574c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b08b      	sub	sp, #44	; 0x2c
 8005750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005752:	e065      	b.n	8005820 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005754:	2208      	movs	r2, #8
 8005756:	18bb      	adds	r3, r7, r2
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	db5f      	blt.n	800581e <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800575e:	18bb      	adds	r3, r7, r2
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3304      	adds	r3, #4
 8005770:	0018      	movs	r0, r3
 8005772:	f7fe fc84 	bl	800407e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff ff85 	bl	8005688 <prvSampleTimeNow>
 800577e:	0003      	movs	r3, r0
 8005780:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8005782:	2308      	movs	r3, #8
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b09      	cmp	r3, #9
 800578a:	d849      	bhi.n	8005820 <prvProcessReceivedCommands+0xd4>
 800578c:	009a      	lsls	r2, r3, #2
 800578e:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <prvProcessReceivedCommands+0xf4>)
 8005790:	18d3      	adds	r3, r2, r3
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005796:	2408      	movs	r4, #8
 8005798:	193b      	adds	r3, r7, r4
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	18d1      	adds	r1, r2, r3
 80057a2:	193b      	adds	r3, r7, r4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	69f8      	ldr	r0, [r7, #28]
 80057aa:	f7ff ff8d 	bl	80056c8 <prvInsertTimerInActiveList>
 80057ae:	1e03      	subs	r3, r0, #0
 80057b0:	d036      	beq.n	8005820 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	0010      	movs	r0, r2
 80057ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d12d      	bne.n	8005820 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	18d2      	adds	r2, r2, r3
 80057ce:	69f8      	ldr	r0, [r7, #28]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2300      	movs	r3, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	f7ff fe66 	bl	80054a8 <xTimerGenericCommand>
 80057dc:	0003      	movs	r3, r0
 80057de:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11c      	bne.n	8005820 <prvProcessReceivedCommands+0xd4>
 80057e6:	b672      	cpsid	i
 80057e8:	e7fe      	b.n	80057e8 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057ea:	2308      	movs	r3, #8
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <prvProcessReceivedCommands+0xb4>
 80057fc:	b672      	cpsid	i
 80057fe:	e7fe      	b.n	80057fe <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	18d1      	adds	r1, r2, r3
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	69f8      	ldr	r0, [r7, #28]
 800580e:	f7ff ff5b 	bl	80056c8 <prvInsertTimerInActiveList>
					break;
 8005812:	e005      	b.n	8005820 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 fa98 	bl	8005d4c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800581c:	e000      	b.n	8005820 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800581e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <prvProcessReceivedCommands+0xf8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	18b9      	adds	r1, r7, r2
 8005828:	2200      	movs	r2, #0
 800582a:	0018      	movs	r0, r3
 800582c:	f7fe fe30 	bl	8004490 <xQueueReceive>
 8005830:	1e03      	subs	r3, r0, #0
 8005832:	d18f      	bne.n	8005754 <prvProcessReceivedCommands+0x8>
	}
}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	46bd      	mov	sp, r7
 800583a:	b009      	add	sp, #36	; 0x24
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	08008dbc 	.word	0x08008dbc
 8005844:	200005c4 	.word	0x200005c4

08005848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800584e:	e03e      	b.n	80058ce <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <prvSwitchTimerLists+0xac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <prvSwitchTimerLists+0xac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3304      	adds	r3, #4
 8005868:	0018      	movs	r0, r3
 800586a:	f7fe fc08 	bl	800407e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	0010      	movs	r0, r2
 8005876:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d126      	bne.n	80058ce <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	18d3      	adds	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90e      	bls.n	80058b0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800589e:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <prvSwitchTimerLists+0xac>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3304      	adds	r3, #4
 80058a6:	0019      	movs	r1, r3
 80058a8:	0010      	movs	r0, r2
 80058aa:	f7fe fbb2 	bl	8004012 <vListInsert>
 80058ae:	e00e      	b.n	80058ce <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	2300      	movs	r3, #0
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	2100      	movs	r1, #0
 80058bc:	f7ff fdf4 	bl	80054a8 <xTimerGenericCommand>
 80058c0:	0003      	movs	r3, r0
 80058c2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <prvSwitchTimerLists+0x86>
 80058ca:	b672      	cpsid	i
 80058cc:	e7fe      	b.n	80058cc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <prvSwitchTimerLists+0xac>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1bb      	bne.n	8005850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <prvSwitchTimerLists+0xac>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <prvSwitchTimerLists+0xb0>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <prvSwitchTimerLists+0xac>)
 80058e4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <prvSwitchTimerLists+0xb0>)
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b006      	add	sp, #24
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200005bc 	.word	0x200005bc
 80058f8:	200005c0 	.word	0x200005c0

080058fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005900:	f000 f8e6 	bl	8005ad0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005904:	4b14      	ldr	r3, [pc, #80]	; (8005958 <prvCheckForValidListAndQueue+0x5c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d120      	bne.n	800594e <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 800590e:	0018      	movs	r0, r3
 8005910:	f7fe fb34 	bl	8003f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <prvCheckForValidListAndQueue+0x64>)
 8005916:	0018      	movs	r0, r3
 8005918:	f7fe fb30 	bl	8003f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <prvCheckForValidListAndQueue+0x68>)
 800591e:	4a0f      	ldr	r2, [pc, #60]	; (800595c <prvCheckForValidListAndQueue+0x60>)
 8005920:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <prvCheckForValidListAndQueue+0x6c>)
 8005924:	4a0e      	ldr	r2, [pc, #56]	; (8005960 <prvCheckForValidListAndQueue+0x64>)
 8005926:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005928:	2200      	movs	r2, #0
 800592a:	210c      	movs	r1, #12
 800592c:	2004      	movs	r0, #4
 800592e:	f7fe fc22 	bl	8004176 <xQueueGenericCreate>
 8005932:	0002      	movs	r2, r0
 8005934:	4b08      	ldr	r3, [pc, #32]	; (8005958 <prvCheckForValidListAndQueue+0x5c>)
 8005936:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005938:	4b07      	ldr	r3, [pc, #28]	; (8005958 <prvCheckForValidListAndQueue+0x5c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <prvCheckForValidListAndQueue+0x5c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <prvCheckForValidListAndQueue+0x70>)
 8005946:	0011      	movs	r1, r2
 8005948:	0018      	movs	r0, r3
 800594a:	f7fe ff73 	bl	8004834 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f000 f8d1 	bl	8005af4 <vPortExitCritical>
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	200005c4 	.word	0x200005c4
 800595c:	20000594 	.word	0x20000594
 8005960:	200005a8 	.word	0x200005a8
 8005964:	200005bc 	.word	0x200005bc
 8005968:	200005c0 	.word	0x200005c0
 800596c:	08008d70 	.word	0x08008d70

08005970 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <pvTimerGetTimerID+0x16>
 8005982:	b672      	cpsid	i
 8005984:	e7fe      	b.n	8005984 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8005986:	f000 f8a3 	bl	8005ad0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8005990:	f000 f8b0 	bl	8005af4 <vPortExitCritical>

	return pvReturn;
 8005994:	68bb      	ldr	r3, [r7, #8]
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b004      	add	sp, #16
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b04      	subs	r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2280      	movs	r2, #128	; 0x80
 80059b6:	0452      	lsls	r2, r2, #17
 80059b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3b04      	subs	r3, #4
 80059be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059cc:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <pxPortInitialiseStack+0x50>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3b14      	subs	r3, #20
 80059d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3b20      	subs	r3, #32
 80059e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	0018      	movs	r0, r3
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b004      	add	sp, #16
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	080059f5 	.word	0x080059f5

080059f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <prvTaskExitError+0x2c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	d001      	beq.n	8005a0a <prvTaskExitError+0x16>
 8005a06:	b672      	cpsid	i
 8005a08:	e7fe      	b.n	8005a08 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005a0a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0fc      	beq.n	8005a0e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	2000000c 	.word	0x2000000c

08005a24 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <pxCurrentTCBConst2>)
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	3020      	adds	r0, #32
 8005a38:	f380 8809 	msr	PSP, r0
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	f380 8814 	msr	CONTROL, r0
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005a48:	46ae      	mov	lr, r5
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	bc04      	pop	{r2}
 8005a4e:	b662      	cpsie	i
 8005a50:	4718      	bx	r3
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	46c0      	nop			; (mov r8, r8)
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46c0      	nop			; (mov r8, r8)

08005a60 <pxCurrentTCBConst2>:
 8005a60:	20000468 	.word	0x20000468
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46c0      	nop			; (mov r8, r8)

08005a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <xPortStartScheduler+0x40>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <xPortStartScheduler+0x40>)
 8005a72:	21ff      	movs	r1, #255	; 0xff
 8005a74:	0409      	lsls	r1, r1, #16
 8005a76:	430a      	orrs	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <xPortStartScheduler+0x40>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <xPortStartScheduler+0x40>)
 8005a80:	21ff      	movs	r1, #255	; 0xff
 8005a82:	0609      	lsls	r1, r1, #24
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005a88:	f000 f898 	bl	8005bbc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <xPortStartScheduler+0x44>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005a92:	f7ff ffcd 	bl	8005a30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a96:	f7ff f9d7 	bl	8004e48 <vTaskSwitchContext>
	prvTaskExitError();
 8005a9a:	f7ff ffab 	bl	80059f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	e000ed20 	.word	0xe000ed20
 8005aac:	2000000c 	.word	0x2000000c

08005ab0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <vPortYield+0x1c>)
 8005ab6:	2280      	movs	r2, #128	; 0x80
 8005ab8:	0552      	lsls	r2, r2, #21
 8005aba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005abc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ac0:	f3bf 8f6f 	isb	sy
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005ad4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <vPortEnterCritical+0x20>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <vPortEnterCritical+0x20>)
 8005ade:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005ae0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ae4:	f3bf 8f6f 	isb	sy
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005af8:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <vPortExitCritical+0x2c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <vPortExitCritical+0x10>
 8005b00:	b672      	cpsid	i
 8005b02:	e7fe      	b.n	8005b02 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <vPortExitCritical+0x2c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1e5a      	subs	r2, r3, #1
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <vPortExitCritical+0x2c>)
 8005b0c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005b0e:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <vPortExitCritical+0x2c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d100      	bne.n	8005b18 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005b16:	b662      	cpsie	i
    }
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	2000000c 	.word	0x2000000c

08005b24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005b24:	f3ef 8010 	mrs	r0, PRIMASK
 8005b28:	b672      	cpsid	i
 8005b2a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	0018      	movs	r0, r3

08005b30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005b30:	f380 8810 	msr	PRIMASK, r0
 8005b34:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005b36:	46c0      	nop			; (mov r8, r8)
	...

08005b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b40:	f3ef 8009 	mrs	r0, PSP
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <pxCurrentTCBConst>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	3820      	subs	r0, #32
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005b4e:	4644      	mov	r4, r8
 8005b50:	464d      	mov	r5, r9
 8005b52:	4656      	mov	r6, sl
 8005b54:	465f      	mov	r7, fp
 8005b56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005b58:	b508      	push	{r3, lr}
 8005b5a:	b672      	cpsid	i
 8005b5c:	f7ff f974 	bl	8004e48 <vTaskSwitchContext>
 8005b60:	b662      	cpsie	i
 8005b62:	bc0c      	pop	{r2, r3}
 8005b64:	6811      	ldr	r1, [r2, #0]
 8005b66:	6808      	ldr	r0, [r1, #0]
 8005b68:	3010      	adds	r0, #16
 8005b6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005b6c:	46a0      	mov	r8, r4
 8005b6e:	46a9      	mov	r9, r5
 8005b70:	46b2      	mov	sl, r6
 8005b72:	46bb      	mov	fp, r7
 8005b74:	f380 8809 	msr	PSP, r0
 8005b78:	3820      	subs	r0, #32
 8005b7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005b7c:	4718      	bx	r3
 8005b7e:	46c0      	nop			; (mov r8, r8)

08005b80 <pxCurrentTCBConst>:
 8005b80:	20000468 	.word	0x20000468
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46c0      	nop			; (mov r8, r8)

08005b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8e:	f7ff ffc9 	bl	8005b24 <ulSetInterruptMaskFromISR>
 8005b92:	0003      	movs	r3, r0
 8005b94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b96:	f7ff f8a3 	bl	8004ce0 <xTaskIncrementTick>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d003      	beq.n	8005ba6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <SysTick_Handler+0x30>)
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	0552      	lsls	r2, r2, #21
 8005ba4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f7ff ffc1 	bl	8005b30 <vClearInterruptMaskFromISR>
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <prvSetupTimerInterrupt+0x34>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <prvSetupTimerInterrupt+0x38>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvSetupTimerInterrupt+0x3c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	22fa      	movs	r2, #250	; 0xfa
 8005bd2:	0091      	lsls	r1, r2, #2
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fa fa97 	bl	8000108 <__udivsi3>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	001a      	movs	r2, r3
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <prvSetupTimerInterrupt+0x40>)
 8005be0:	3a01      	subs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <prvSetupTimerInterrupt+0x34>)
 8005be6:	2207      	movs	r2, #7
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	e000e010 	.word	0xe000e010
 8005bf4:	e000e018 	.word	0xe000e018
 8005bf8:	20000004 	.word	0x20000004
 8005bfc:	e000e014 	.word	0xe000e014

08005c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005c0c:	f7fe ffc2 	bl	8004b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c10:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <pvPortMalloc+0x138>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c18:	f000 f8e0 	bl	8005ddc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c1c:	4b47      	ldr	r3, [pc, #284]	; (8005d3c <pvPortMalloc+0x13c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4013      	ands	r3, r2
 8005c24:	d000      	beq.n	8005c28 <pvPortMalloc+0x28>
 8005c26:	e079      	b.n	8005d1c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d012      	beq.n	8005c54 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005c2e:	2208      	movs	r2, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2207      	movs	r2, #7
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d00a      	beq.n	8005c54 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2207      	movs	r2, #7
 8005c42:	4393      	bics	r3, r2
 8005c44:	3308      	adds	r3, #8
 8005c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2207      	movs	r2, #7
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d001      	beq.n	8005c54 <pvPortMalloc+0x54>
 8005c50:	b672      	cpsid	i
 8005c52:	e7fe      	b.n	8005c52 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d060      	beq.n	8005d1c <pvPortMalloc+0x11c>
 8005c5a:	4b39      	ldr	r3, [pc, #228]	; (8005d40 <pvPortMalloc+0x140>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d85b      	bhi.n	8005d1c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c64:	4b37      	ldr	r3, [pc, #220]	; (8005d44 <pvPortMalloc+0x144>)
 8005c66:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005c68:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <pvPortMalloc+0x144>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c6e:	e004      	b.n	8005c7a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <pvPortMalloc+0x8c>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f1      	bne.n	8005c70 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c8c:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <pvPortMalloc+0x138>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d042      	beq.n	8005d1c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d916      	bls.n	8005ce6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2207      	movs	r2, #7
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d001      	beq.n	8005ccc <pvPortMalloc+0xcc>
 8005cc8:	b672      	cpsid	i
 8005cca:	e7fe      	b.n	8005cca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f8db 	bl	8005e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <pvPortMalloc+0x140>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <pvPortMalloc+0x140>)
 8005cf2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <pvPortMalloc+0x140>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <pvPortMalloc+0x148>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d203      	bcs.n	8005d08 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <pvPortMalloc+0x140>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <pvPortMalloc+0x148>)
 8005d06:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <pvPortMalloc+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d1c:	f7fe ff46 	bl	8004bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2207      	movs	r2, #7
 8005d24:	4013      	ands	r3, r2
 8005d26:	d001      	beq.n	8005d2c <pvPortMalloc+0x12c>
 8005d28:	b672      	cpsid	i
 8005d2a:	e7fe      	b.n	8005d2a <pvPortMalloc+0x12a>
	return pvReturn;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b006      	add	sp, #24
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	200011d8 	.word	0x200011d8
 8005d3c:	200011e4 	.word	0x200011e4
 8005d40:	200011dc 	.word	0x200011dc
 8005d44:	200011d0 	.word	0x200011d0
 8005d48:	200011e0 	.word	0x200011e0

08005d4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d035      	beq.n	8005dca <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	425b      	negs	r3, r3
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	18d3      	adds	r3, r2, r3
 8005d66:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <vPortFree+0x88>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4013      	ands	r3, r2
 8005d76:	d101      	bne.n	8005d7c <vPortFree+0x30>
 8005d78:	b672      	cpsid	i
 8005d7a:	e7fe      	b.n	8005d7a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <vPortFree+0x3c>
 8005d84:	b672      	cpsid	i
 8005d86:	e7fe      	b.n	8005d86 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <vPortFree+0x88>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	d01a      	beq.n	8005dca <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <vPortFree+0x88>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dac:	f7fe fef2 	bl	8004b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <vPortFree+0x8c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	18d2      	adds	r2, r2, r3
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <vPortFree+0x8c>)
 8005dbc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 f86b 	bl	8005e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005dc6:	f7fe fef1 	bl	8004bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	200011e4 	.word	0x200011e4
 8005dd8:	200011dc 	.word	0x200011dc

08005ddc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005de2:	23c0      	movs	r3, #192	; 0xc0
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005de8:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <prvHeapInit+0xa8>)
 8005dea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2207      	movs	r2, #7
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00c      	beq.n	8005e0e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3307      	adds	r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	4393      	bics	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <prvHeapInit+0xa8>)
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e12:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <prvHeapInit+0xac>)
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <prvHeapInit+0xac>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e26:	2208      	movs	r2, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2207      	movs	r2, #7
 8005e32:	4393      	bics	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <prvHeapInit+0xb0>)
 8005e3a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <prvHeapInit+0xb0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e44:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <prvHeapInit+0xb0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <prvHeapInit+0xb0>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <prvHeapInit+0xb4>)
 8005e68:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <prvHeapInit+0xb8>)
 8005e70:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <prvHeapInit+0xbc>)
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	0612      	lsls	r2, r2, #24
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b004      	add	sp, #16
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	200005d0 	.word	0x200005d0
 8005e88:	200011d0 	.word	0x200011d0
 8005e8c:	200011d8 	.word	0x200011d8
 8005e90:	200011e0 	.word	0x200011e0
 8005e94:	200011dc 	.word	0x200011dc
 8005e98:	200011e4 	.word	0x200011e4

08005e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <prvInsertBlockIntoFreeList+0xa8>)
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e002      	b.n	8005eb0 <prvInsertBlockIntoFreeList+0x14>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d8f7      	bhi.n	8005eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	18d3      	adds	r3, r2, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d108      	bne.n	8005ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	18d2      	adds	r2, r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	18d2      	adds	r2, r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d118      	bne.n	8005f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <prvInsertBlockIntoFreeList+0xac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d00d      	beq.n	8005f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	18d2      	adds	r2, r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e008      	b.n	8005f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <prvInsertBlockIntoFreeList+0xac>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e003      	b.n	8005f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d002      	beq.n	8005f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b004      	add	sp, #16
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	200011d0 	.word	0x200011d0
 8005f48:	200011d8 	.word	0x200011d8

08005f4c <pxMBMGetNewHdl>:

#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    xMBMInternalHandle * pxMBMGetNewHdl( void )
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENORES, eStatus2;
 8005f52:	230f      	movs	r3, #15
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	2204      	movs	r2, #4
 8005f58:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
    UBYTE           ubIdx;

    MBP_ENTER_CRITICAL_SECTION(  );
 8005f5e:	f002 f9ec 	bl	800833a <vMBPEnterCritical>
    if( !bIsInitalized )
 8005f62:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <pxMBMGetNewHdl+0x190>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d155      	bne.n	8006016 <pxMBMGetNewHdl+0xca>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e04a      	b.n	8006008 <pxMBMGetNewHdl+0xbc>
        {
            MBM_RESET_HDL( &xMBMInternalHdl[ubIdx] );
 8005f72:	1dfb      	adds	r3, r7, #7
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	4b5a      	ldr	r3, [pc, #360]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005f78:	0152      	lsls	r2, r2, #5
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	50d1      	str	r1, [r2, r3]
 8005f7e:	1dfb      	adds	r3, r7, #7
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005f84:	015b      	lsls	r3, r3, #5
 8005f86:	18d3      	adds	r3, r2, r3
 8005f88:	3304      	adds	r3, #4
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	1dfb      	adds	r3, r7, #7
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	4a53      	ldr	r2, [pc, #332]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005f94:	015b      	lsls	r3, r3, #5
 8005f96:	18d3      	adds	r3, r2, r3
 8005f98:	3308      	adds	r3, #8
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	1dfb      	adds	r3, r7, #7
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	4a4f      	ldr	r2, [pc, #316]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	18d3      	adds	r3, r2, r3
 8005fa8:	330c      	adds	r3, #12
 8005faa:	22ff      	movs	r2, #255	; 0xff
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	1dfb      	adds	r3, r7, #7
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4a4b      	ldr	r2, [pc, #300]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005fb4:	015b      	lsls	r3, r3, #5
 8005fb6:	18d3      	adds	r3, r2, r3
 8005fb8:	3310      	adds	r3, #16
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	1dfb      	adds	r3, r7, #7
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	4a47      	ldr	r2, [pc, #284]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005fc4:	015b      	lsls	r3, r3, #5
 8005fc6:	18d3      	adds	r3, r2, r3
 8005fc8:	330e      	adds	r3, #14
 8005fca:	2200      	movs	r2, #0
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	1dfb      	adds	r3, r7, #7
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	4a43      	ldr	r2, [pc, #268]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005fd4:	015b      	lsls	r3, r3, #5
 8005fd6:	18d3      	adds	r3, r2, r3
 8005fd8:	3314      	adds	r3, #20
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	1dfb      	adds	r3, r7, #7
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4a3f      	ldr	r2, [pc, #252]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005fe4:	015b      	lsls	r3, r3, #5
 8005fe6:	18d3      	adds	r3, r2, r3
 8005fe8:	3318      	adds	r3, #24
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	1dfb      	adds	r3, r7, #7
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8005ff4:	015b      	lsls	r3, r3, #5
 8005ff6:	18d3      	adds	r3, r2, r3
 8005ff8:	331c      	adds	r3, #28
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8005ffe:	1dfb      	adds	r3, r7, #7
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	3201      	adds	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d9b0      	bls.n	8005f72 <pxMBMGetNewHdl+0x26>
        }
        bIsInitalized = TRUE;
 8006010:	4b32      	ldr	r3, [pc, #200]	; (80060dc <pxMBMGetNewHdl+0x190>)
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
    }
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8006016:	1dfb      	adds	r3, r7, #7
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	e042      	b.n	80060a4 <pxMBMGetNewHdl+0x158>
    {
        if( IDX_INVALID == xMBMInternalHdl[ubIdx].ubIdx )
 800601e:	1dfb      	adds	r3, r7, #7
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	4a2f      	ldr	r2, [pc, #188]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8006024:	015b      	lsls	r3, r3, #5
 8006026:	18d3      	adds	r3, r2, r3
 8006028:	330c      	adds	r3, #12
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2bff      	cmp	r3, #255	; 0xff
 800602e:	d134      	bne.n	800609a <pxMBMGetNewHdl+0x14e>
        {
            pxIntHdl = &xMBMInternalHdl[ubIdx];
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <pxMBMGetNewHdl+0x194>)
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	60bb      	str	r3, [r7, #8]
            pxIntHdl->ubIdx = ubIdx;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	1dfa      	adds	r2, r7, #7
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	731a      	strb	r2, [r3, #12]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
            pxIntHdl->usSlaveTimeoutMS = MBM_DEFAULT_RESPONSE_TIMEOUT;
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_TIMEOUT_RESOLUTION_MS, bMBMResponseTimeoutCB, pxIntHdl ) ) )
#else
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_DEFAULT_RESPONSE_TIMEOUT, bMBMResponseTimeoutCB, pxIntHdl ) ) )
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	1dbc      	adds	r4, r7, #6
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <pxMBMGetNewHdl+0x198>)
 800604c:	21fa      	movs	r1, #250	; 0xfa
 800604e:	0049      	lsls	r1, r1, #1
 8006050:	f002 f982 	bl	8008358 <eMBPTimerInit>
 8006054:	0003      	movs	r3, r0
 8006056:	7023      	strb	r3, [r4, #0]
 8006058:	1dbb      	adds	r3, r7, #6
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <pxMBMGetNewHdl+0x120>
#endif
            {
                eStatus = eStatus2;
 8006060:	230f      	movs	r3, #15
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	1dba      	adds	r2, r7, #6
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_ENOERR;
            }
            break;
 800606a:	e01f      	b.n	80060ac <pxMBMGetNewHdl+0x160>
            else if( MB_ENOERR != ( eStatus2 = eMBPEventCreate( &( pxIntHdl->xFrameEventHdl ) ) ) )
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	3304      	adds	r3, #4
 8006070:	1dbc      	adds	r4, r7, #6
 8006072:	0018      	movs	r0, r3
 8006074:	f002 f858 	bl	8008128 <eMBPEventCreate>
 8006078:	0003      	movs	r3, r0
 800607a:	7023      	strb	r3, [r4, #0]
 800607c:	1dbb      	adds	r3, r7, #6
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <pxMBMGetNewHdl+0x144>
                eStatus = eStatus2;
 8006084:	230f      	movs	r3, #15
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	1dba      	adds	r2, r7, #6
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	701a      	strb	r2, [r3, #0]
            break;
 800608e:	e00d      	b.n	80060ac <pxMBMGetNewHdl+0x160>
                eStatus = MB_ENOERR;
 8006090:	230f      	movs	r3, #15
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
            break;
 8006098:	e008      	b.n	80060ac <pxMBMGetNewHdl+0x160>
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 800609a:	1dfb      	adds	r3, r7, #7
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	1dfb      	adds	r3, r7, #7
 80060a0:	3201      	adds	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	1dfb      	adds	r3, r7, #7
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d9b8      	bls.n	800601e <pxMBMGetNewHdl+0xd2>
        }
    }
    if( MB_ENOERR != eStatus )
 80060ac:	230f      	movs	r3, #15
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <pxMBMGetNewHdl+0x172>
    {
        ( void )eMBMReleaseHdl( pxIntHdl );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f000 f815 	bl	80060e8 <eMBMReleaseHdl>
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80060be:	f002 f943 	bl	8008348 <vMBPExitCritical>
    return MB_ENOERR == eStatus ? pxIntHdl : NULL;      /*lint !e826 ~ suspicious ptr-to-ptr conversion */
 80060c2:	230f      	movs	r3, #15
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <pxMBMGetNewHdl+0x184>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	e000      	b.n	80060d2 <pxMBMGetNewHdl+0x186>
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	0018      	movs	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b005      	add	sp, #20
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	200011e8 	.word	0x200011e8
 80060e0:	200011ec 	.word	0x200011ec
 80060e4:	08006215 	.word	0x08006215

080060e8 <eMBMReleaseHdl>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    eMBErrorCode
eMBMReleaseHdl( xMBMInternalHandle * pxIntHdl )
{
 80060e8:	b5b0      	push	{r4, r5, r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80060f0:	240f      	movs	r4, #15
 80060f2:	193b      	adds	r3, r7, r4
 80060f4:	2202      	movs	r2, #2
 80060f6:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 80060f8:	f002 f91f 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBMInternalHdl ) )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d100      	bne.n	8006104 <eMBMReleaseHdl+0x1c>
 8006102:	e07c      	b.n	80061fe <eMBMReleaseHdl+0x116>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	7b1b      	ldrb	r3, [r3, #12]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	4b41      	ldr	r3, [pc, #260]	; (8006210 <eMBMReleaseHdl+0x128>)
 800610c:	18d3      	adds	r3, r2, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d000      	beq.n	8006116 <eMBMReleaseHdl+0x2e>
 8006114:	e073      	b.n	80061fe <eMBMReleaseHdl+0x116>
    {

        /* we are now sure that this was really a handle returned by create. */
        if( NULL != pxIntHdl->pFrameCloseFN )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d03e      	beq.n	800619c <eMBMReleaseHdl+0xb4>
        {
            if( MB_ENOERR != ( eStatus = pxIntHdl->pFrameCloseFN( pxIntHdl ) ) )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	0025      	movs	r5, r4
 8006124:	193c      	adds	r4, r7, r4
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	0010      	movs	r0, r2
 800612a:	4798      	blx	r3
 800612c:	0003      	movs	r3, r0
 800612e:	7023      	strb	r3, [r4, #0]
 8006130:	197b      	adds	r3, r7, r5
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d162      	bne.n	80061fe <eMBMReleaseHdl+0x116>
            {
            }
            else
            {
                if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <eMBMReleaseHdl+0x62>
                {
                    vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	0018      	movs	r0, r3
 8006146:	f002 f8c3 	bl	80082d0 <vMBPEventDelete>
                }
                if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <eMBMReleaseHdl+0x74>
                {
                    vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	0018      	movs	r0, r3
 8006158:	f002 f9d6 	bl	8008508 <vMBPTimerClose>
                }
                MBM_RESET_HDL( pxIntHdl );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	22ff      	movs	r2, #255	; 0xff
 8006172:	731a      	strb	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	81da      	strh	r2, [r3, #14]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	615a      	str	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	619a      	str	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
                eStatus = MB_ENOERR;
 8006192:	230f      	movs	r3, #15
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e030      	b.n	80061fe <eMBMReleaseHdl+0x116>
            }
        }
        else
        {
            if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <eMBMReleaseHdl+0xc6>
            {
                vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f002 f891 	bl	80082d0 <vMBPEventDelete>
            }
            if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <eMBMReleaseHdl+0xd8>
            {
                vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f002 f9a4 	bl	8008508 <vMBPTimerClose>
            }
            MBM_RESET_HDL( pxIntHdl );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	731a      	strb	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	81da      	strh	r2, [r3, #14]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	615a      	str	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	619a      	str	r2, [r3, #24]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	61da      	str	r2, [r3, #28]
            eStatus = MB_ENOERR;
 80061f6:	230f      	movs	r3, #15
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80061fe:	f002 f8a3 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8006202:	230f      	movs	r3, #15
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	781b      	ldrb	r3, [r3, #0]
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b004      	add	sp, #16
 800620e:	bdb0      	pop	{r4, r5, r7, pc}
 8006210:	200011ec 	.word	0x200011ec

08006214 <bMBMResponseTimeoutCB>:

STATIC          BOOL
bMBMResponseTimeoutCB( xMBMHandle xHdl )
{
 8006214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = FALSE;
 800621c:	2517      	movs	r5, #23
 800621e:	197b      	adds	r3, r7, r5
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	613b      	str	r3, [r7, #16]
    BOOL            bTimeout = FALSE;
 8006228:	210f      	movs	r1, #15
 800622a:	187b      	adds	r3, r7, r1
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
    {
        eStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl );
        MBP_ASSERT( MB_ENOERR == eStatus );
    }
#else
    bTimeout = TRUE;
 8006230:	187b      	adds	r3, r7, r1
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
#endif
    if( bTimeout )
 8006236:	187b      	adds	r3, r7, r1
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <bMBMResponseTimeoutCB+0x5a>
    {
        if( MB_ENOERR == ( eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_TIMEDOUT ) ) )
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	260e      	movs	r6, #14
 8006244:	19bc      	adds	r4, r7, r6
 8006246:	2102      	movs	r1, #2
 8006248:	0018      	movs	r0, r3
 800624a:	f001 ffe3 	bl	8008214 <eMBPEventPost>
 800624e:	0003      	movs	r3, r0
 8006250:	7023      	strb	r3, [r4, #0]
 8006252:	19bb      	adds	r3, r7, r6
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <bMBMResponseTimeoutCB+0x4c>
        {
            bNeedCtxSwitch = TRUE;
 800625a:	197b      	adds	r3, r7, r5
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
        }
        MBP_ASSERT( MB_ENOERR == eStatus );
 8006260:	230e      	movs	r3, #14
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <bMBMResponseTimeoutCB+0x5a>
 800626a:	f002 f853 	bl	8008314 <vMBPAssert>
    }
    return bNeedCtxSwitch;
 800626e:	2317      	movs	r3, #23
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	781b      	ldrb	r3, [r3, #0]
}
 8006274:	0018      	movs	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	b007      	add	sp, #28
 800627a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800627c <vMBMMasterTransactionPolled>:
    return eStatus;
}

void
vMBMMasterTransactionPolled( xMBMInternalHandle * pxIntHdl, UCHAR ucSlaveAddress, eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	230b      	movs	r3, #11
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	1c0a      	adds	r2, r1, #0
 800628e:	701a      	strb	r2, [r3, #0]
    xMBPEventType   xFrameEvent;

    switch ( *peState )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d002      	beq.n	800629e <vMBMMasterTransactionPolled+0x22>
 8006298:	2b02      	cmp	r3, #2
 800629a:	d02b      	beq.n	80062f4 <vMBMMasterTransactionPolled+0x78>
 800629c:	e092      	b.n	80063c4 <vMBMMasterTransactionPolled+0x148>
         */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
        pxIntHdl->usSlaveTimeoutLeftMS = pxIntHdl->usSlaveTimeoutMS;
#endif
        if( ( MB_ENOERR != ( *peStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl ) ) ) )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0018      	movs	r0, r3
 80062a4:	f002 f958 	bl	8008558 <eMBPTimerStart>
 80062a8:	0003      	movs	r3, r0
 80062aa:	001a      	movs	r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <vMBMMasterTransactionPolled+0x44>
        {
            *peState = MBM_STATE_ERROR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2204      	movs	r2, #4
 80062bc:	701a      	strb	r2, [r3, #0]
            /* Frame transmission has started. We now switch to the state where we
             * wait for an event.
             */
            *peState = MBM_STATE_WAITING;
        }
        break;
 80062be:	e088      	b.n	80063d2 <vMBMMasterTransactionPolled+0x156>
        else if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameSendFN( pxIntHdl, ucSlaveAddress, pxIntHdl->usFrameMBPDULength ) ) )
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	89d4      	ldrh	r4, [r2, #14]
 80062c8:	220b      	movs	r2, #11
 80062ca:	18ba      	adds	r2, r7, r2
 80062cc:	7811      	ldrb	r1, [r2, #0]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	0022      	movs	r2, r4
 80062d2:	4798      	blx	r3
 80062d4:	0003      	movs	r3, r0
 80062d6:	001a      	movs	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <vMBMMasterTransactionPolled+0x70>
            *peState = MBM_STATE_ERROR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2204      	movs	r2, #4
 80062e8:	701a      	strb	r2, [r3, #0]
        break;
 80062ea:	e072      	b.n	80063d2 <vMBMMasterTransactionPolled+0x156>
            *peState = MBM_STATE_WAITING;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	701a      	strb	r2, [r3, #0]
        break;
 80062f2:	e06e      	b.n	80063d2 <vMBMMasterTransactionPolled+0x156>
        /* Wait for an event. Possible events are either a timeout when no slave has
         * responded (MBM_EV_TIMEDOUT), the reception of a frame(MBM_EV_RECEIVED)
         * or in case of a broadcast message the end of the transmission(MBM_EV_SENT).
         */
    case MBM_STATE_WAITING:
        if( bMBPEventGet( pxIntHdl->xFrameEventHdl, &xFrameEvent ) )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2417      	movs	r4, #23
 80062fa:	193a      	adds	r2, r7, r4
 80062fc:	0011      	movs	r1, r2
 80062fe:	0018      	movs	r0, r3
 8006300:	f001 ffb4 	bl	800826c <bMBPEventGet>
 8006304:	1e03      	subs	r3, r0, #0
 8006306:	d05b      	beq.n	80063c0 <vMBMMasterTransactionPolled+0x144>
        {
            /* In any case stop the timeout. */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
            ( void )eMBPTimerStop( pxIntHdl->xRespTimeoutHdl );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	0018      	movs	r0, r3
 800630e:	f002 f95b 	bl	80085c8 <eMBPTimerStop>
#endif
            switch ( ( eMBMEvent ) xFrameEvent )
 8006312:	193b      	adds	r3, r7, r4
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b06      	cmp	r3, #6
 8006318:	d84b      	bhi.n	80063b2 <vMBMMasterTransactionPolled+0x136>
 800631a:	009a      	lsls	r2, r3, #2
 800631c:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <vMBMMasterTransactionPolled+0x160>)
 800631e:	18d3      	adds	r3, r2, r3
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	469f      	mov	pc, r3
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Request timeout. Reseting state.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	220b      	movs	r2, #11
 800632a:	18ba      	adds	r2, r7, r2
 800632c:	7811      	ldrb	r1, [r2, #0]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	4798      	blx	r3
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
                pxIntHdl->xFrameStat.ulNTimeouts++;
#endif
                *peState = MBM_STATE_DONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2205      	movs	r2, #5
 8006338:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ETIMEDOUT;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	701a      	strb	r2, [r3, #0]
                break;
 8006340:	e03f      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Response frame received.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, &( pxIntHdl->usFrameMBPDULength ) ) ) )
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	320e      	adds	r2, #14
 800634a:	0014      	movs	r4, r2
 800634c:	220b      	movs	r2, #11
 800634e:	18ba      	adds	r2, r7, r2
 8006350:	7811      	ldrb	r1, [r2, #0]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	0022      	movs	r2, r4
 8006356:	4798      	blx	r3
 8006358:	0003      	movs	r3, r0
 800635a:	001a      	movs	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <vMBMMasterTransactionPolled+0xf4>
                {
                    /* Error receiving frame. Abort this transmission. */
                    *peState = MBM_STATE_ERROR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2204      	movs	r2, #4
 800636c:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    *peState = MBM_STATE_DISASSEMBLE;
                }
                break;
 800636e:	e028      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                    *peState = MBM_STATE_DISASSEMBLE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2203      	movs	r2, #3
 8006374:	701a      	strb	r2, [r3, #0]
                break;
 8006376:	e024      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Receiver error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	220b      	movs	r2, #11
 800637e:	18ba      	adds	r2, r7, r2
 8006380:	7811      	ldrb	r1, [r2, #0]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	4798      	blx	r3
                *peState = MBM_STATE_ERROR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2204      	movs	r2, #4
 800638c:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2205      	movs	r2, #5
 8006392:	701a      	strb	r2, [r3, #0]
                break;
 8006394:	e015      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Frame sent.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_DONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2205      	movs	r2, #5
 800639a:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ENOERR;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
                break;
 80063a2:	e00e      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Transmitter error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2204      	movs	r2, #4
 80063a8:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2205      	movs	r2, #5
 80063ae:	701a      	strb	r2, [r3, #0]
                break;
 80063b0:	e007      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal event received!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2204      	movs	r2, #4
 80063b6:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EILLSTATE;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2206      	movs	r2, #6
 80063bc:	701a      	strb	r2, [r3, #0]
                break;
 80063be:	e000      	b.n	80063c2 <vMBMMasterTransactionPolled+0x146>
            }
        }
 80063c0:	46c0      	nop			; (mov r8, r8)
        break;
 80063c2:	e006      	b.n	80063d2 <vMBMMasterTransactionPolled+0x156>
        if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
        {
            vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal state!\n", ( USHORT ) pxIntHdl->ubIdx );
        }
#endif
        *peState = MBM_STATE_ERROR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
        *peStatus = MB_EILLSTATE;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2206      	movs	r2, #6
 80063ce:	701a      	strb	r2, [r3, #0]
        break;
 80063d0:	46c0      	nop			; (mov r8, r8)
    }
}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b007      	add	sp, #28
 80063d8:	bd90      	pop	{r4, r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	08008de4 	.word	0x08008de4

080063e0 <eMBMSerialInit>:

#if MBM_ASCII_ENABLED == 1 || MBM_RTU_ENABLED == 1
eMBErrorCode
eMBMSerialInit( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity )
{
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	0008      	movs	r0, r1
 80063ea:	0011      	movs	r1, r2
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	230b      	movs	r3, #11
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	1c02      	adds	r2, r0, #0
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	230a      	movs	r3, #10
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	1c0a      	adds	r2, r1, #0
 80063fc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    UCHAR           ucStopBits;
    ucStopBits = MB_PAR_NONE == eParity ? ( UCHAR ) 2 : ( UCHAR ) 1;
 80063fe:	2328      	movs	r3, #40	; 0x28
 8006400:	2208      	movs	r2, #8
 8006402:	189b      	adds	r3, r3, r2
 8006404:	19db      	adds	r3, r3, r7
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d101      	bne.n	8006410 <eMBMSerialInit+0x30>
 800640c:	2202      	movs	r2, #2
 800640e:	e000      	b.n	8006412 <eMBMSerialInit+0x32>
 8006410:	2201      	movs	r2, #1
 8006412:	2617      	movs	r6, #23
 8006414:	19bb      	adds	r3, r7, r6
 8006416:	701a      	strb	r2, [r3, #0]
    eStatus = eMBMSerialInitExt( pxHdl, eMode, ucPort, ulBaudRate, eParity, ucStopBits );
 8006418:	2316      	movs	r3, #22
 800641a:	18fc      	adds	r4, r7, r3
 800641c:	687d      	ldr	r5, [r7, #4]
 800641e:	220a      	movs	r2, #10
 8006420:	18bb      	adds	r3, r7, r2
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	210b      	movs	r1, #11
 8006426:	187b      	adds	r3, r7, r1
 8006428:	7819      	ldrb	r1, [r3, #0]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	19bb      	adds	r3, r7, r6
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	2628      	movs	r6, #40	; 0x28
 8006434:	2308      	movs	r3, #8
 8006436:	18f3      	adds	r3, r6, r3
 8006438:	19db      	adds	r3, r3, r7
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	002b      	movs	r3, r5
 8006440:	f000 f809 	bl	8006456 <eMBMSerialInitExt>
 8006444:	0003      	movs	r3, r0
 8006446:	7023      	strb	r3, [r4, #0]
    return eStatus;
 8006448:	2316      	movs	r3, #22
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	781b      	ldrb	r3, [r3, #0]
}
 800644e:	0018      	movs	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	b007      	add	sp, #28
 8006454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006456 <eMBMSerialInitExt>:

eMBErrorCode
eMBMSerialInitExt( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8006456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006458:	b08b      	sub	sp, #44	; 0x2c
 800645a:	af02      	add	r7, sp, #8
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	0008      	movs	r0, r1
 8006460:	0011      	movs	r1, r2
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	230b      	movs	r3, #11
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	1c02      	adds	r2, r0, #0
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	230a      	movs	r3, #10
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	1c0a      	adds	r2, r1, #0
 8006472:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxMBMNewIntHdl;
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8006474:	241f      	movs	r4, #31
 8006476:	193b      	adds	r3, r7, r4
 8006478:	2202      	movs	r2, #2
 800647a:	701a      	strb	r2, [r3, #0]
    {
        vMBPLibraryLoad(  );
    }
#endif

    if( NULL != pxHdl )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d064      	beq.n	800654c <eMBMSerialInitExt+0xf6>
    {
        if( NULL == ( pxMBMNewIntHdl = pxMBMGetNewHdl(  ) ) )
 8006482:	f7ff fd63 	bl	8005f4c <pxMBMGetNewHdl>
 8006486:	0003      	movs	r3, r0
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <eMBMSerialInitExt+0x42>
        {
            eStatus = MB_ENORES;
 8006490:	193b      	adds	r3, r7, r4
 8006492:	2204      	movs	r2, #4
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e039      	b.n	800650c <eMBMSerialInitExt+0xb6>
        }
        else
        {
            switch ( eMode )
 8006498:	230b      	movs	r3, #11
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d018      	beq.n	80064d4 <eMBMSerialInitExt+0x7e>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d12d      	bne.n	8006502 <eMBMSerialInitExt+0xac>
            {
#if MBM_ASCII_ENABLED == 1
            case MB_ASCII:
                eStatus = eMBMSerialASCIIInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 80064a6:	231f      	movs	r3, #31
 80064a8:	18fc      	adds	r4, r7, r3
 80064aa:	2330      	movs	r3, #48	; 0x30
 80064ac:	2608      	movs	r6, #8
 80064ae:	199b      	adds	r3, r3, r6
 80064b0:	19db      	adds	r3, r3, r7
 80064b2:	781d      	ldrb	r5, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	230a      	movs	r3, #10
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	7819      	ldrb	r1, [r3, #0]
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	2334      	movs	r3, #52	; 0x34
 80064c0:	199b      	adds	r3, r3, r6
 80064c2:	19db      	adds	r3, r3, r7
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	002b      	movs	r3, r5
 80064ca:	f000 f847 	bl	800655c <eMBMSerialASCIIInit>
 80064ce:	0003      	movs	r3, r0
 80064d0:	7023      	strb	r3, [r4, #0]
                break;
 80064d2:	e01b      	b.n	800650c <eMBMSerialInitExt+0xb6>
#endif

#if MBM_RTU_ENABLED == 1
            case MB_RTU:
                eStatus = eMBMSerialRTUInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 80064d4:	231f      	movs	r3, #31
 80064d6:	18fc      	adds	r4, r7, r3
 80064d8:	2330      	movs	r3, #48	; 0x30
 80064da:	2608      	movs	r6, #8
 80064dc:	199b      	adds	r3, r3, r6
 80064de:	19db      	adds	r3, r3, r7
 80064e0:	781d      	ldrb	r5, [r3, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	230a      	movs	r3, #10
 80064e6:	18fb      	adds	r3, r7, r3
 80064e8:	7819      	ldrb	r1, [r3, #0]
 80064ea:	69b8      	ldr	r0, [r7, #24]
 80064ec:	2334      	movs	r3, #52	; 0x34
 80064ee:	199b      	adds	r3, r3, r6
 80064f0:	19db      	adds	r3, r3, r7
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	002b      	movs	r3, r5
 80064f8:	f001 f86a 	bl	80075d0 <eMBMSerialRTUInit>
 80064fc:	0003      	movs	r3, r0
 80064fe:	7023      	strb	r3, [r4, #0]
                break;
 8006500:	e004      	b.n	800650c <eMBMSerialInitExt+0xb6>
#endif

            default:
                eStatus = MB_EINVAL;
 8006502:	231f      	movs	r3, #31
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
                break;
 800650a:	46c0      	nop			; (mov r8, r8)
            }
        }

        if( eStatus != MB_ENOERR )
 800650c:	261f      	movs	r6, #31
 800650e:	19bb      	adds	r3, r7, r6
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <eMBMSerialInitExt+0xf0>
        {
            if( NULL != pxMBMNewIntHdl )
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <eMBMSerialInitExt+0xe8>
            {
                if( MB_ENOERR != ( eStatus2 = eMBMReleaseHdl( pxMBMNewIntHdl ) ) )
 800651c:	2517      	movs	r5, #23
 800651e:	197c      	adds	r4, r7, r5
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	0018      	movs	r0, r3
 8006524:	f7ff fde0 	bl	80060e8 <eMBMReleaseHdl>
 8006528:	0003      	movs	r3, r0
 800652a:	7023      	strb	r3, [r4, #0]
 800652c:	002a      	movs	r2, r5
 800652e:	18bb      	adds	r3, r7, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <eMBMSerialInitExt+0xe8>
                {
                    eStatus = eStatus2;
 8006536:	19bb      	adds	r3, r7, r6
 8006538:	18ba      	adds	r2, r7, r2
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	701a      	strb	r2, [r3, #0]
                }
            }
            *pxHdl = NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e002      	b.n	800654c <eMBMSerialInitExt+0xf6>
        }
        else
        {
            *pxHdl = pxMBMNewIntHdl;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	601a      	str	r2, [r3, #0]
        vMBPLibraryUnload(  );
    }
    MBP_EXIT_CRITICAL_INIT(  );
#endif

    return eStatus;
 800654c:	231f      	movs	r3, #31
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	781b      	ldrb	r3, [r3, #0]
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b009      	add	sp, #36	; 0x24
 8006558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800655c <eMBMSerialASCIIInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialASCIIInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 800655c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655e:	b08d      	sub	sp, #52	; 0x34
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	0008      	movs	r0, r1
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	0019      	movs	r1, r3
 800656a:	230b      	movs	r3, #11
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	1c02      	adds	r2, r0, #0
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	230a      	movs	r3, #10
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	1c0a      	adds	r2, r1, #0
 8006578:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 800657a:	231f      	movs	r3, #31
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
    xMBMASCIIFrameHandle *pxFrameHdl = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 8006586:	f001 fed8 	bl	800833a <vMBPEnterCritical>
        if( !bIsInitialized )
 800658a:	4bae      	ldr	r3, [pc, #696]	; (8006844 <eMBMSerialASCIIInit+0x2e8>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d000      	beq.n	8006594 <eMBMSerialASCIIInit+0x38>
 8006592:	e0b6      	b.n	8006702 <eMBMSerialASCIIInit+0x1a6>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006594:	2317      	movs	r3, #23
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	e0a8      	b.n	80066f0 <eMBMSerialASCIIInit+0x194>
            {
                HDL_RESET( &xMBMASCIIFrameHdl[ubIdx] );
 800659e:	2417      	movs	r4, #23
 80065a0:	193b      	adds	r3, r7, r4
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	49a8      	ldr	r1, [pc, #672]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80065a6:	0013      	movs	r3, r2
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	189b      	adds	r3, r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	22ff      	movs	r2, #255	; 0xff
 80065b4:	545a      	strb	r2, [r3, r1]
 80065b6:	193b      	adds	r3, r7, r4
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	48a3      	ldr	r0, [pc, #652]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80065bc:	2302      	movs	r3, #2
 80065be:	33ff      	adds	r3, #255	; 0xff
 80065c0:	0019      	movs	r1, r3
 80065c2:	0013      	movs	r3, r2
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	18c3      	adds	r3, r0, r3
 80065d0:	185b      	adds	r3, r3, r1
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	193b      	adds	r3, r7, r4
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	489b      	ldr	r0, [pc, #620]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80065dc:	2381      	movs	r3, #129	; 0x81
 80065de:	0059      	lsls	r1, r3, #1
 80065e0:	0013      	movs	r3, r2
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	189b      	adds	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	18c3      	adds	r3, r0, r3
 80065ee:	185b      	adds	r3, r3, r1
 80065f0:	2200      	movs	r2, #0
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	193b      	adds	r3, r7, r4
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	4893      	ldr	r0, [pc, #588]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	0059      	lsls	r1, r3, #1
 80065fe:	0013      	movs	r3, r2
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	189b      	adds	r3, r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	189b      	adds	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	18c3      	adds	r3, r0, r3
 800660c:	185b      	adds	r3, r3, r1
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	193b      	adds	r3, r7, r4
 8006614:	781a      	ldrb	r2, [r3, #0]
 8006616:	488c      	ldr	r0, [pc, #560]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006618:	2382      	movs	r3, #130	; 0x82
 800661a:	0059      	lsls	r1, r3, #1
 800661c:	0013      	movs	r3, r2
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	189b      	adds	r3, r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	189b      	adds	r3, r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	18c3      	adds	r3, r0, r3
 800662a:	185b      	adds	r3, r3, r1
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	193b      	adds	r3, r7, r4
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	4884      	ldr	r0, [pc, #528]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006636:	2383      	movs	r3, #131	; 0x83
 8006638:	0059      	lsls	r1, r3, #1
 800663a:	0013      	movs	r3, r2
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	189b      	adds	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	189b      	adds	r3, r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	18c3      	adds	r3, r0, r3
 8006648:	185b      	adds	r3, r3, r1
 800664a:	2200      	movs	r2, #0
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	193b      	adds	r3, r7, r4
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	487d      	ldr	r0, [pc, #500]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	0059      	lsls	r1, r3, #1
 8006658:	0013      	movs	r3, r2
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	189b      	adds	r3, r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	189b      	adds	r3, r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	18c3      	adds	r3, r0, r3
 8006666:	185b      	adds	r3, r3, r1
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	193b      	adds	r3, r7, r4
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	4875      	ldr	r0, [pc, #468]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006672:	2384      	movs	r3, #132	; 0x84
 8006674:	0059      	lsls	r1, r3, #1
 8006676:	0013      	movs	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	189b      	adds	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	189b      	adds	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	18c3      	adds	r3, r0, r3
 8006684:	185b      	adds	r3, r3, r1
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	193b      	adds	r3, r7, r4
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	486e      	ldr	r0, [pc, #440]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006690:	2386      	movs	r3, #134	; 0x86
 8006692:	0059      	lsls	r1, r3, #1
 8006694:	0013      	movs	r3, r2
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	189b      	adds	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	189b      	adds	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	18c3      	adds	r3, r0, r3
 80066a2:	185b      	adds	r3, r3, r1
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	193b      	adds	r3, r7, r4
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	4866      	ldr	r0, [pc, #408]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80066ae:	2388      	movs	r3, #136	; 0x88
 80066b0:	0059      	lsls	r1, r3, #1
 80066b2:	0013      	movs	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	189b      	adds	r3, r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	18c3      	adds	r3, r0, r3
 80066c0:	185b      	adds	r3, r3, r1
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	0013      	movs	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	189b      	adds	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4a5c      	ldr	r2, [pc, #368]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	3301      	adds	r3, #1
 80066dc:	22ff      	movs	r2, #255	; 0xff
 80066de:	2100      	movs	r1, #0
 80066e0:	0018      	movs	r0, r3
 80066e2:	f002 fb08 	bl	8008cf6 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 80066e6:	193b      	adds	r3, r7, r4
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	3201      	adds	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	2317      	movs	r3, #23
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d800      	bhi.n	80066fc <eMBMSerialASCIIInit+0x1a0>
 80066fa:	e750      	b.n	800659e <eMBMSerialASCIIInit+0x42>
            }
            bIsInitialized = TRUE;
 80066fc:	4b51      	ldr	r3, [pc, #324]	; (8006844 <eMBMSerialASCIIInit+0x2e8>)
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006702:	2317      	movs	r3, #23
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e023      	b.n	8006754 <eMBMSerialASCIIInit+0x1f8>
        {
            if( IDX_INVALID == xMBMASCIIFrameHdl[ubIdx].ubIdx )
 800670c:	2017      	movs	r0, #23
 800670e:	183b      	adds	r3, r7, r0
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	494d      	ldr	r1, [pc, #308]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 8006714:	0013      	movs	r3, r2
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	189b      	adds	r3, r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	189b      	adds	r3, r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	5c5b      	ldrb	r3, [r3, r1]
 8006722:	2bff      	cmp	r3, #255	; 0xff
 8006724:	d110      	bne.n	8006748 <eMBMSerialASCIIInit+0x1ec>
            {
                pxFrameHdl = &xMBMASCIIFrameHdl[ubIdx];
 8006726:	0001      	movs	r1, r0
 8006728:	187b      	adds	r3, r7, r1
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	0013      	movs	r3, r2
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	189b      	adds	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	189b      	adds	r3, r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4a43      	ldr	r2, [pc, #268]	; (8006848 <eMBMSerialASCIIInit+0x2ec>)
 800673a:	189b      	adds	r3, r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	187a      	adds	r2, r7, r1
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	701a      	strb	r2, [r3, #0]
                break;
 8006746:	e00a      	b.n	800675e <eMBMSerialASCIIInit+0x202>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006748:	2117      	movs	r1, #23
 800674a:	187b      	adds	r3, r7, r1
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	187b      	adds	r3, r7, r1
 8006750:	3201      	adds	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	2317      	movs	r3, #23
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d9d6      	bls.n	800670c <eMBMSerialASCIIInit+0x1b0>
            }
        }

        if( NULL != pxFrameHdl )
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d061      	beq.n	8006828 <eMBMSerialASCIIInit+0x2cc>
        {
            usTimeoutMS = ( USHORT ) ( MBM_ASCII_TIMEOUT_SEC * 1000U );
 8006764:	2314      	movs	r3, #20
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	22fa      	movs	r2, #250	; 0xfa
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	801a      	strh	r2, [r3, #0]

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 7, eParity, ucStopBits, pxIntHdl
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	3311      	adds	r3, #17
 8006772:	33ff      	adds	r3, #255	; 0xff
 8006774:	0018      	movs	r0, r3
 8006776:	2513      	movs	r5, #19
 8006778:	197c      	adds	r4, r7, r5
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	230b      	movs	r3, #11
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	2330      	movs	r3, #48	; 0x30
 8006788:	2608      	movs	r6, #8
 800678a:	199b      	adds	r3, r3, r6
 800678c:	19db      	adds	r3, r3, r7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	230a      	movs	r3, #10
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	2307      	movs	r3, #7
 800679c:	f001 fffe 	bl	800879c <eMBPSerialInit>
 80067a0:	0003      	movs	r3, r0
 80067a2:	7023      	strb	r3, [r4, #0]
 80067a4:	197b      	adds	r3, r7, r5
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <eMBMSerialASCIIInit+0x25c>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , NULL, MB_ASCII 
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 80067ac:	231f      	movs	r3, #31
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	197a      	adds	r2, r7, r5
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e02d      	b.n	8006814 <eMBMSerialASCIIInit+0x2b8>
            }
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialASCIITimerCB, pxIntHdl ) ) )
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	330d      	adds	r3, #13
 80067bc:	33ff      	adds	r3, #255	; 0xff
 80067be:	0018      	movs	r0, r3
 80067c0:	2613      	movs	r6, #19
 80067c2:	19bc      	adds	r4, r7, r6
 80067c4:	68fd      	ldr	r5, [r7, #12]
 80067c6:	4a21      	ldr	r2, [pc, #132]	; (800684c <eMBMSerialASCIIInit+0x2f0>)
 80067c8:	2314      	movs	r3, #20
 80067ca:	18fb      	adds	r3, r7, r3
 80067cc:	8819      	ldrh	r1, [r3, #0]
 80067ce:	002b      	movs	r3, r5
 80067d0:	f001 fdc2 	bl	8008358 <eMBPTimerInit>
 80067d4:	0003      	movs	r3, r0
 80067d6:	7023      	strb	r3, [r4, #0]
 80067d8:	19bb      	adds	r3, r7, r6
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <eMBMSerialASCIIInit+0x290>
            {
                eStatus = eStatus2;
 80067e0:	231f      	movs	r3, #31
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	19ba      	adds	r2, r7, r6
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	e013      	b.n	8006814 <eMBMSerialASCIIInit+0x2b8>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_PDU_OFF];
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	1c9a      	adds	r2, r3, #2
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialASCIIFrameSend;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a14      	ldr	r2, [pc, #80]	; (8006850 <eMBMSerialASCIIInit+0x2f4>)
 80067fe:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialASCIIFrameReceive;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a14      	ldr	r2, [pc, #80]	; (8006854 <eMBMSerialASCIIInit+0x2f8>)
 8006804:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialASCIIFrameClose;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a13      	ldr	r2, [pc, #76]	; (8006858 <eMBMSerialASCIIInit+0x2fc>)
 800680a:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialASCIIFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 800680c:	231f      	movs	r3, #31
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
                             ", baudrate=%lu, parity=" MBP_FORMAT_USHORT "): %s.\n", ( USHORT ) pxFrameHdl->ubIdx,
                             ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif

            if( MB_ENOERR != eStatus )
 8006814:	231f      	movs	r3, #31
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <eMBMSerialASCIIInit+0x2d4>
            {
                ( void )eMBMSerialASCIIFrameCloseInternal( pxFrameHdl );
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f9b0 	bl	8006b86 <eMBMSerialASCIIFrameCloseInternal>
 8006826:	e003      	b.n	8006830 <eMBMSerialASCIIInit+0x2d4>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 8006828:	231f      	movs	r3, #31
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2204      	movs	r2, #4
 800682e:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 8006830:	f001 fd8a 	bl	8008348 <vMBPExitCritical>
    else
    {
        eStatus = MB_EINVAL;
    }
#endif
    return eStatus;
 8006834:	231f      	movs	r3, #31
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	781b      	ldrb	r3, [r3, #0]
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b009      	add	sp, #36	; 0x24
 8006840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	2000126c 	.word	0x2000126c
 8006848:	20001270 	.word	0x20001270
 800684c:	080071ad 	.word	0x080071ad
 8006850:	0800685d 	.word	0x0800685d
 8006854:	080069e1 	.word	0x080069e1
 8006858:	08006b55 	.word	0x08006b55

0800685c <eMBMSerialASCIIFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialASCIIFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	0008      	movs	r0, r1
 8006866:	0011      	movs	r1, r2
 8006868:	1cfb      	adds	r3, r7, #3
 800686a:	1c02      	adds	r2, r0, #0
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	003b      	movs	r3, r7
 8006870:	1c0a      	adds	r2, r1, #0
 8006872:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8006874:	2317      	movs	r3, #23
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2202      	movs	r2, #2
 800687a:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_ASCII,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) ucSlaveAddress, ( USHORT ) usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) &&
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d100      	bne.n	800688e <eMBMSerialASCIIFrameSend+0x32>
 800688c:	e09c      	b.n	80069c8 <eMBMSerialASCIIFrameSend+0x16c>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	001a      	movs	r2, r3
 8006894:	0013      	movs	r3, r2
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	189b      	adds	r3, r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	189b      	adds	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a4d      	ldr	r2, [pc, #308]	; (80069d8 <eMBMSerialASCIIFrameSend+0x17c>)
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d000      	beq.n	80068ac <eMBMSerialASCIIFrameSend+0x50>
 80068aa:	e08d      	b.n	80069c8 <eMBMSerialASCIIFrameSend+0x16c>
 80068ac:	1cfb      	adds	r3, r7, #3
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <eMBMSerialASCIIFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 1 /* LRC */  ) ) ) )
 80068b4:	1cfb      	adds	r3, r7, #3
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d100      	bne.n	80068be <eMBMSerialASCIIFrameSend+0x62>
 80068bc:	e084      	b.n	80069c8 <eMBMSerialASCIIFrameSend+0x16c>
 80068be:	1cfb      	adds	r3, r7, #3
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2bf7      	cmp	r3, #247	; 0xf7
 80068c4:	d900      	bls.n	80068c8 <eMBMSerialASCIIFrameSend+0x6c>
 80068c6:	e07f      	b.n	80069c8 <eMBMSerialASCIIFrameSend+0x16c>
 80068c8:	003b      	movs	r3, r7
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	2bfd      	cmp	r3, #253	; 0xfd
 80068ce:	d900      	bls.n	80068d2 <eMBMSerialASCIIFrameSend+0x76>
 80068d0:	e07a      	b.n	80069c8 <eMBMSerialASCIIFrameSend+0x16c>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 80068d2:	f001 fd32 	bl	800833a <vMBPEnterCritical>
            MBP_ASSERT( STATE_TX_IDLE == pxASCIIHdl->eSndState );
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	2382      	movs	r3, #130	; 0x82
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	5cd3      	ldrb	r3, [r2, r3]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <eMBMSerialASCIIFrameSend+0x8c>
 80068e4:	f001 fd16 	bl	8008314 <vMBPAssert>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) pxASCIIHdl->eRcvState,
                             pxASCIIHdl->usRcvBufferPos, ( USHORT ) pxASCIIHdl->eSndState, pxASCIIHdl->usSndBufferCnt );
            }
#endif
            MBP_EXIT_CRITICAL_SECTION(  );
 80068e8:	f001 fd2e 	bl	8008348 <vMBPExitCritical>

            /* Added the MODBUS ASCII header (= slave address) */
            pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1cfa      	adds	r2, r7, #3
 80068f0:	7812      	ldrb	r2, [r2, #0]
 80068f2:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt = 1;
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	2383      	movs	r3, #131	; 0x83
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	2101      	movs	r1, #1
 80068fc:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxASCIIHdl->usSndBufferCnt += usMBPDULength;
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	2383      	movs	r3, #131	; 0x83
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	5ad3      	ldrh	r3, [r2, r3]
 8006906:	b29a      	uxth	r2, r3
 8006908:	003b      	movs	r3, r7
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	18d3      	adds	r3, r2, r3
 800690e:	b299      	uxth	r1, r3
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	2383      	movs	r3, #131	; 0x83
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	52d1      	strh	r1, [r2, r3]

            ubLRC = ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usSndBufferCnt );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	1c58      	adds	r0, r3, #1
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	2383      	movs	r3, #131	; 0x83
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	5ad3      	ldrh	r3, [r2, r3]
 8006924:	b29b      	uxth	r3, r3
 8006926:	250b      	movs	r5, #11
 8006928:	197c      	adds	r4, r7, r5
 800692a:	0019      	movs	r1, r3
 800692c:	f000 fcb3 	bl	8007296 <ubMBMSerialASCIILRC>
 8006930:	0003      	movs	r3, r0
 8006932:	7023      	strb	r3, [r4, #0]
            pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usSndBufferCnt] = ubLRC;
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	2383      	movs	r3, #131	; 0x83
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	5ad3      	ldrh	r3, [r2, r3]
 800693c:	b29b      	uxth	r3, r3
 800693e:	001a      	movs	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	189b      	adds	r3, r3, r2
 8006944:	197a      	adds	r2, r7, r5
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt++;
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	2383      	movs	r3, #131	; 0x83
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	5ad3      	ldrh	r3, [r2, r3]
 8006952:	b29b      	uxth	r3, r3
 8006954:	3301      	adds	r3, #1
 8006956:	b299      	uxth	r1, r3
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	2383      	movs	r3, #131	; 0x83
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 8006960:	f001 fceb 	bl	800833a <vMBPEnterCritical>
            pxASCIIHdl->eSndState = STATE_TX_START;
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	2382      	movs	r3, #130	; 0x82
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	2101      	movs	r1, #1
 800696c:	54d1      	strb	r1, [r2, r3]
            pxASCIIHdl->pubSndBufferCur = ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	2384      	movs	r3, #132	; 0x84
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	50d1      	str	r1, [r2, r3]
#if MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialASCIITransmitterEmptyAPIV1CB ) ) )
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	2388      	movs	r3, #136	; 0x88
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	58d3      	ldr	r3, [r2, r3]
 8006982:	2517      	movs	r5, #23
 8006984:	197c      	adds	r4, r7, r5
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <eMBMSerialASCIIFrameSend+0x180>)
 8006988:	0011      	movs	r1, r2
 800698a:	0018      	movs	r0, r3
 800698c:	f002 f86c 	bl	8008a68 <eMBPSerialTxEnable>
 8006990:	0003      	movs	r3, r0
 8006992:	7023      	strb	r3, [r4, #0]
 8006994:	197b      	adds	r3, r7, r5
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <eMBMSerialASCIIFrameSend+0x168>
            {
                HDL_RESET_TX( pxASCIIHdl );
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	2382      	movs	r3, #130	; 0x82
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	2100      	movs	r1, #0
 80069a4:	54d1      	strb	r1, [r2, r3]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	2383      	movs	r3, #131	; 0x83
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	2100      	movs	r1, #0
 80069ae:	52d1      	strh	r1, [r2, r3]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	2380      	movs	r3, #128	; 0x80
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	2100      	movs	r1, #0
 80069b8:	54d1      	strb	r1, [r2, r3]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	2384      	movs	r3, #132	; 0x84
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	2100      	movs	r1, #0
 80069c2:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 80069c4:	f001 fcc0 	bl	8008348 <vMBPExitCritical>
        }
    }
    return eStatus;
 80069c8:	2317      	movs	r3, #23
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	781b      	ldrb	r3, [r3, #0]
}
 80069ce:	0018      	movs	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b006      	add	sp, #24
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	20001270 	.word	0x20001270
 80069dc:	08006f6d 	.word	0x08006f6d

080069e0 <eMBMSerialASCIIFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 80069e0:	b5b0      	push	{r4, r5, r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	200b      	movs	r0, #11
 80069ec:	183b      	adds	r3, r7, r0
 80069ee:	1c0a      	adds	r2, r1, #0
 80069f0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 80069f2:	241f      	movs	r4, #31
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	2202      	movs	r2, #2
 80069f8:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d100      	bne.n	8006a0c <eMBMSerialASCIIFrameReceive+0x2c>
 8006a0a:	e099      	b.n	8006b40 <eMBMSerialASCIIFrameReceive+0x160>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	001a      	movs	r2, r3
 8006a12:	0013      	movs	r3, r2
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	; (8006b50 <eMBMSerialASCIIFrameReceive+0x170>)
 8006a20:	189b      	adds	r3, r3, r2
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d000      	beq.n	8006a2a <eMBMSerialASCIIFrameReceive+0x4a>
 8006a28:	e08a      	b.n	8006b40 <eMBMSerialASCIIFrameReceive+0x160>
 8006a2a:	183b      	adds	r3, r7, r0
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d100      	bne.n	8006a34 <eMBMSerialASCIIFrameReceive+0x54>
 8006a32:	e085      	b.n	8006b40 <eMBMSerialASCIIFrameReceive+0x160>
 8006a34:	183b      	adds	r3, r7, r0
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2bf7      	cmp	r3, #247	; 0xf7
 8006a3a:	d900      	bls.n	8006a3e <eMBMSerialASCIIFrameReceive+0x5e>
 8006a3c:	e080      	b.n	8006b40 <eMBMSerialASCIIFrameReceive+0x160>
        {

            if( NULL == pusMBPDULength )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02a      	beq.n	8006a9a <eMBMSerialASCIIFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	2381      	movs	r3, #129	; 0x81
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	5ad3      	ldrh	r3, [r2, r3]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d91f      	bls.n	8006a92 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	b2db      	uxtb	r3, r3
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8006a58:	183a      	adds	r2, r7, r0
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d118      	bne.n	8006a92 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usRcvBufferPos ) == 0 ) )
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1c58      	adds	r0, r3, #1
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	2381      	movs	r3, #129	; 0x81
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	5ad3      	ldrh	r3, [r2, r3]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	0019      	movs	r1, r3
 8006a70:	f000 fc11 	bl	8007296 <ubMBMSerialASCIILRC>
 8006a74:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8006a76:	d10c      	bne.n	8006a92 <eMBMSerialASCIIFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxASCIIHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_LRC ) );
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	2381      	movs	r3, #129	; 0x81
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	5ad3      	ldrh	r3, [r2, r3]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b02      	subs	r3, #2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	801a      	strh	r2, [r3, #0]
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_ASCII;
                xAnalyzerFrame.x.xASCIIHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xASCIIHeader.ubLRC = pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usRcvBufferPos - 1];
#endif
                eStatus = MB_ENOERR;
 8006a8a:	193b      	adds	r3, r7, r4
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e003      	b.n	8006a9a <eMBMSerialASCIIFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 8006a92:	231f      	movs	r3, #31
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2205      	movs	r2, #5
 8006a98:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 8006a9a:	f001 fc4e 	bl	800833a <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	2388      	movs	r3, #136	; 0x88
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	58d3      	ldr	r3, [r2, r3]
 8006aa6:	2513      	movs	r5, #19
 8006aa8:	197c      	adds	r4, r7, r5
 8006aaa:	2100      	movs	r1, #0
 8006aac:	0018      	movs	r0, r3
 8006aae:	f001 ffdb 	bl	8008a68 <eMBPSerialTxEnable>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	7023      	strb	r3, [r4, #0]
 8006ab6:	002a      	movs	r2, r5
 8006ab8:	18bb      	adds	r3, r7, r2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <eMBMSerialASCIIFrameReceive+0xea>
            {
                eStatus = eStatus2;
 8006ac0:	231f      	movs	r3, #31
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	18ba      	adds	r2, r7, r2
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	2388      	movs	r3, #136	; 0x88
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	58d3      	ldr	r3, [r2, r3]
 8006ad2:	2513      	movs	r5, #19
 8006ad4:	197c      	adds	r4, r7, r5
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f002 f88d 	bl	8008bf8 <eMBPSerialRxEnable>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	7023      	strb	r3, [r4, #0]
 8006ae2:	002a      	movs	r2, r5
 8006ae4:	18bb      	adds	r3, r7, r2
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <eMBMSerialASCIIFrameReceive+0x116>
            {
                eStatus = eStatus2;
 8006aec:	231f      	movs	r3, #31
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	18ba      	adds	r2, r7, r2
 8006af2:	7812      	ldrb	r2, [r2, #0]
 8006af4:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxASCIIHdl->xWaitTmrHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxASCIIHdl );
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	2382      	movs	r3, #130	; 0x82
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	2100      	movs	r1, #0
 8006afe:	54d1      	strb	r1, [r2, r3]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	2383      	movs	r3, #131	; 0x83
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	2100      	movs	r1, #0
 8006b08:	52d1      	strh	r1, [r2, r3]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	2100      	movs	r1, #0
 8006b12:	54d1      	strb	r1, [r2, r3]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	2384      	movs	r3, #132	; 0x84
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxASCIIHdl );
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	2302      	movs	r3, #2
 8006b22:	33ff      	adds	r3, #255	; 0xff
 8006b24:	2100      	movs	r1, #0
 8006b26:	54d1      	strb	r1, [r2, r3]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	2381      	movs	r3, #129	; 0x81
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	2100      	movs	r1, #0
 8006b30:	52d1      	strh	r1, [r2, r3]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	2100      	movs	r1, #0
 8006b3a:	54d1      	strb	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 8006b3c:	f001 fc04 	bl	8008348 <vMBPExitCritical>
        }
    }

    return eStatus;
 8006b40:	231f      	movs	r3, #31
 8006b42:	18fb      	adds	r3, r7, r3
 8006b44:	781b      	ldrb	r3, [r3, #0]
}
 8006b46:	0018      	movs	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b008      	add	sp, #32
 8006b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	20001270 	.word	0x20001270

08006b54 <eMBMSerialASCIIFrameClose>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameClose( xMBHandle xHdl )
{
 8006b54:	b5b0      	push	{r4, r5, r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8006b5c:	210f      	movs	r1, #15
 8006b5e:	187b      	adds	r3, r7, r1
 8006b60:	2202      	movs	r2, #2
 8006b62:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialASCIIFrameCloseInternal( ( xMBMASCIIFrameHandle * ) pxIntHdl->xFrameHdl );
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	000d      	movs	r5, r1
 8006b6e:	187c      	adds	r4, r7, r1
 8006b70:	0018      	movs	r0, r3
 8006b72:	f000 f808 	bl	8006b86 <eMBMSerialASCIIFrameCloseInternal>
 8006b76:	0003      	movs	r3, r0
 8006b78:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 8006b7a:	197b      	adds	r3, r7, r5
 8006b7c:	781b      	ldrb	r3, [r3, #0]
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b004      	add	sp, #16
 8006b84:	bdb0      	pop	{r4, r5, r7, pc}

08006b86 <eMBMSerialASCIIFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameCloseInternal( xMBMASCIIFrameHandle * pxASCIIHdl )
{
 8006b86:	b590      	push	{r4, r7, lr}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8006b8e:	240f      	movs	r4, #15
 8006b90:	193b      	adds	r3, r7, r4
 8006b92:	2202      	movs	r2, #2
 8006b94:	701a      	strb	r2, [r3, #0]
#if defined( MBM_ENABLE_DEBUG_FACILITY ) && ( MBM_ENABLE_DEBUG_FACILITY == 1 )
    UBYTE           ubIdx;
#endif

    MBP_ENTER_CRITICAL_SECTION(  );
 8006b96:	f001 fbd0 	bl	800833a <vMBPEnterCritical>
        if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_ASCII ) )
        {
            ubIdx = pxASCIIHdl->ubIdx;
        }
#endif
        if( MBP_SERIALHDL_INVALID != pxASCIIHdl->xSerHdl )
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	2388      	movs	r3, #136	; 0x88
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	58d3      	ldr	r3, [r2, r3]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d055      	beq.n	8006c52 <eMBMSerialASCIIFrameCloseInternal+0xcc>
        {
            if( MB_ENOERR != eMBPSerialClose( pxASCIIHdl->xSerHdl ) )
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	2388      	movs	r3, #136	; 0x88
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	58d3      	ldr	r3, [r2, r3]
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f001 ff04 	bl	80089bc <eMBPSerialClose>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d003      	beq.n	8006bc0 <eMBMSerialASCIIFrameCloseInternal+0x3a>
            {
                eStatus = MB_EPORTERR;
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	2203      	movs	r2, #3
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e08b      	b.n	8006cd8 <eMBMSerialASCIIFrameCloseInternal+0x152>
            }
            else
            {
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xTmrHdl )
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	2386      	movs	r3, #134	; 0x86
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	58d3      	ldr	r3, [r2, r3]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d006      	beq.n	8006bda <eMBMSerialASCIIFrameCloseInternal+0x54>
                {
                    vMBPTimerClose( pxASCIIHdl->xTmrHdl );
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	2386      	movs	r3, #134	; 0x86
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	58d3      	ldr	r3, [r2, r3]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f001 fc97 	bl	8008508 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xWaitTmrHdl )
                {
                    vMBPTimerClose( pxASCIIHdl->xWaitTmrHdl );
                }
#endif
                HDL_RESET( pxASCIIHdl );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	2302      	movs	r3, #2
 8006be4:	33ff      	adds	r3, #255	; 0xff
 8006be6:	2100      	movs	r1, #0
 8006be8:	54d1      	strb	r1, [r2, r3]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	2381      	movs	r3, #129	; 0x81
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	52d1      	strh	r1, [r2, r3]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	54d1      	strb	r1, [r2, r3]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	2382      	movs	r3, #130	; 0x82
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	2100      	movs	r1, #0
 8006c06:	54d1      	strb	r1, [r2, r3]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	2383      	movs	r3, #131	; 0x83
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	2100      	movs	r1, #0
 8006c10:	52d1      	strh	r1, [r2, r3]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	2100      	movs	r1, #0
 8006c1a:	54d1      	strb	r1, [r2, r3]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	2384      	movs	r3, #132	; 0x84
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	2100      	movs	r1, #0
 8006c24:	50d1      	str	r1, [r2, r3]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	2386      	movs	r3, #134	; 0x86
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	50d1      	str	r1, [r2, r3]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	2388      	movs	r3, #136	; 0x88
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	2100      	movs	r1, #0
 8006c38:	50d1      	str	r1, [r2, r3]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	22ff      	movs	r2, #255	; 0xff
 8006c40:	2100      	movs	r1, #0
 8006c42:	0018      	movs	r0, r3
 8006c44:	f002 f857 	bl	8008cf6 <memset>
                eStatus = MB_ENOERR;
 8006c48:	230f      	movs	r3, #15
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e042      	b.n	8006cd8 <eMBMSerialASCIIFrameCloseInternal+0x152>

            }
        }
        else
        {
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xTmrHdl );
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	2386      	movs	r3, #134	; 0x86
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	58d3      	ldr	r3, [r2, r3]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <eMBMSerialASCIIFrameCloseInternal+0xdc>
 8006c5e:	f001 fb59 	bl	8008314 <vMBPAssert>
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xBackOffTmrHdl );
#endif
#if MBM_ASCII_WAITAFTERSEND_ENABLED > 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xWaitTmrHdl );
#endif
            HDL_RESET( pxASCIIHdl );
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	33ff      	adds	r3, #255	; 0xff
 8006c6e:	2100      	movs	r1, #0
 8006c70:	54d1      	strb	r1, [r2, r3]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	2381      	movs	r3, #129	; 0x81
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	2100      	movs	r1, #0
 8006c7a:	52d1      	strh	r1, [r2, r3]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	2100      	movs	r1, #0
 8006c84:	54d1      	strb	r1, [r2, r3]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	2382      	movs	r3, #130	; 0x82
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	54d1      	strb	r1, [r2, r3]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	2383      	movs	r3, #131	; 0x83
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	2100      	movs	r1, #0
 8006c98:	52d1      	strh	r1, [r2, r3]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	54d1      	strb	r1, [r2, r3]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	2384      	movs	r3, #132	; 0x84
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	2100      	movs	r1, #0
 8006cac:	50d1      	str	r1, [r2, r3]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	2386      	movs	r3, #134	; 0x86
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	50d1      	str	r1, [r2, r3]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	2388      	movs	r3, #136	; 0x88
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	50d1      	str	r1, [r2, r3]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	22ff      	movs	r2, #255	; 0xff
 8006cc8:	2100      	movs	r1, #0
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f002 f813 	bl	8008cf6 <memset>
            eStatus = MB_ENOERR;
 8006cd0:	230f      	movs	r3, #15
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
                         ( USHORT ) ubIdx, eStatus == MB_ENOERR ? "okay" : "failed" );
        }
#endif

    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8006cd8:	f001 fb36 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8006cdc:	230f      	movs	r3, #15
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	781b      	ldrb	r3, [r3, #0]
}
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b005      	add	sp, #20
 8006ce8:	bd90      	pop	{r4, r7, pc}

08006cea <vMBMSerialASCIIReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
vMBMSerialASCIIReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 8006cea:	b5b0      	push	{r4, r5, r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	000a      	movs	r2, r1
 8006cf4:	1cfb      	adds	r3, r7, #3
 8006cf6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    BOOL            bEnableTimer = TRUE;
 8006cf8:	2317      	movs	r3, #23
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	701a      	strb	r2, [r3, #0]
    UBYTE           ubBinValue;
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	2382      	movs	r3, #130	; 0x82
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	5cd3      	ldrb	r3, [r2, r3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <vMBMSerialASCIIReceiverAPIV1CB+0x32>
 8006d18:	f001 fafc 	bl	8008314 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eRcvState )
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	2302      	movs	r3, #2
 8006d20:	33ff      	adds	r3, #255	; 0xff
 8006d22:	5cd3      	ldrb	r3, [r2, r3]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d100      	bne.n	8006d2c <vMBMSerialASCIIReceiverAPIV1CB+0x42>
 8006d2a:	e077      	b.n	8006e1c <vMBMSerialASCIIReceiverAPIV1CB+0x132>
 8006d2c:	dd00      	ble.n	8006d30 <vMBMSerialASCIIReceiverAPIV1CB+0x46>
 8006d2e:	e0da      	b.n	8006ee6 <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d100      	bne.n	8006d36 <vMBMSerialASCIIReceiverAPIV1CB+0x4c>
 8006d34:	e0cd      	b.n	8006ed2 <vMBMSerialASCIIReceiverAPIV1CB+0x1e8>
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d000      	beq.n	8006d3c <vMBMSerialASCIIReceiverAPIV1CB+0x52>
 8006d3a:	e0d4      	b.n	8006ee6 <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
        /* A new character is received. If the character is a ':' the
         * input buffers are cleared. A CR character signals the end of the 
         * data block. Other characters are real data bytes.
         */
    case STATE_RX_RCV:
        if( MBM_ASCII_START == ubValue )
 8006d3c:	1cfb      	adds	r3, r7, #3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b3a      	cmp	r3, #58	; 0x3a
 8006d42:	d10a      	bne.n	8006d5a <vMBMSerialASCIIReceiverAPIV1CB+0x70>
        {
            /* Empty receive buffer. */
            pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	2380      	movs	r3, #128	; 0x80
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->usRcvBufferPos = 0;
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	2381      	movs	r3, #129	; 0x81
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	2100      	movs	r1, #0
 8006d56:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->usRcvBufferPos++;
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
                break;
            }
        }
        break;
 8006d58:	e0ce      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        else if( MBM_ASCII_DEFAULT_CR == ubValue )
 8006d5a:	1cfb      	adds	r3, r7, #3
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b0d      	cmp	r3, #13
 8006d60:	d105      	bne.n	8006d6e <vMBMSerialASCIIReceiverAPIV1CB+0x84>
            pxASCIIFrameHdl->eRcvState = STATE_RX_WAIT_EOF;
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	2302      	movs	r3, #2
 8006d66:	33ff      	adds	r3, #255	; 0xff
 8006d68:	2102      	movs	r1, #2
 8006d6a:	54d1      	strb	r1, [r2, r3]
        break;
 8006d6c:	e0c4      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
            ubBinValue = ubMBMSerialASCIICHAR2BIN( ubValue );
 8006d6e:	230a      	movs	r3, #10
 8006d70:	18fc      	adds	r4, r7, r3
 8006d72:	1cfb      	adds	r3, r7, #3
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 fa45 	bl	8007206 <ubMBMSerialASCIICHAR2BIN>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	7023      	strb	r3, [r4, #0]
            switch ( pxASCIIFrameHdl->eBytePos )
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	5cd3      	ldrb	r3, [r2, r3]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <vMBMSerialASCIIReceiverAPIV1CB+0xa8>
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d021      	beq.n	8006dd4 <vMBMSerialASCIIReceiverAPIV1CB+0xea>
        break;
 8006d90:	e0b2      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
                if( pxASCIIFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	2381      	movs	r3, #129	; 0x81
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	5ad3      	ldrh	r3, [r2, r3]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2bfe      	cmp	r3, #254	; 0xfe
 8006d9e:	d813      	bhi.n	8006dc8 <vMBMSerialASCIIReceiverAPIV1CB+0xde>
                    pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] = ( UBYTE ) ( ubBinValue << 4 );
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	2381      	movs	r3, #129	; 0x81
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	5ad3      	ldrh	r3, [r2, r3]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	0019      	movs	r1, r3
 8006dac:	230a      	movs	r3, #10
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	185b      	adds	r3, r3, r1
 8006dba:	705a      	strb	r2, [r3, #1]
                    pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	54d1      	strb	r1, [r2, r3]
                break;
 8006dc6:	e028      	b.n	8006e1a <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                    pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	2302      	movs	r3, #2
 8006dcc:	33ff      	adds	r3, #255	; 0xff
 8006dce:	2103      	movs	r1, #3
 8006dd0:	54d1      	strb	r1, [r2, r3]
                break;
 8006dd2:	e022      	b.n	8006e1a <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] |= ubBinValue;
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	2381      	movs	r3, #129	; 0x81
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	5ad3      	ldrh	r3, [r2, r3]
 8006ddc:	b299      	uxth	r1, r3
 8006dde:	000a      	movs	r2, r1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	230a      	movs	r3, #10
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	185b      	adds	r3, r3, r1
 8006df6:	705a      	strb	r2, [r3, #1]
                pxASCIIFrameHdl->usRcvBufferPos++;
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	2381      	movs	r3, #129	; 0x81
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	5ad3      	ldrh	r3, [r2, r3]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3301      	adds	r3, #1
 8006e04:	b299      	uxth	r1, r3
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	2381      	movs	r3, #129	; 0x81
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	2100      	movs	r1, #0
 8006e16:	54d1      	strb	r1, [r2, r3]
                break;
 8006e18:	46c0      	nop			; (mov r8, r8)
        break;
 8006e1a:	e06d      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>

    case STATE_RX_WAIT_EOF:
        if( MBM_ASCII_DEFAULT_LF == ubValue )
 8006e1c:	1cfb      	adds	r3, r7, #3
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d137      	bne.n	8006e94 <vMBMSerialASCIIReceiverAPIV1CB+0x1aa>
        {
            bEnableTimer = FALSE;
 8006e24:	2317      	movs	r3, #23
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	2388      	movs	r3, #136	; 0x88
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	58d3      	ldr	r3, [r2, r3]
 8006e34:	250b      	movs	r5, #11
 8006e36:	197c      	adds	r4, r7, r5
 8006e38:	2100      	movs	r1, #0
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f001 fedc 	bl	8008bf8 <eMBPSerialRxEnable>
 8006e40:	0003      	movs	r3, r0
 8006e42:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8006e44:	197b      	adds	r3, r7, r5
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <vMBMSerialASCIIReceiverAPIV1CB+0x166>
 8006e4c:	f001 fa62 	bl	8008314 <vMBPAssert>
            eStatus = eMBPTimerStop( pxASCIIFrameHdl->xTmrHdl );
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	2386      	movs	r3, #134	; 0x86
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	58d3      	ldr	r3, [r2, r3]
 8006e58:	250b      	movs	r5, #11
 8006e5a:	197c      	adds	r4, r7, r5
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f001 fbb3 	bl	80085c8 <eMBPTimerStop>
 8006e62:	0003      	movs	r3, r0
 8006e64:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8006e66:	197b      	adds	r3, r7, r5
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <vMBMSerialASCIIReceiverAPIV1CB+0x188>
 8006e6e:	f001 fa51 	bl	8008314 <vMBPAssert>

#if MBM_ASCII_BACKOF_TIME_MS > 0
            eStatus = eMBPTimerStart( pxASCIIFrameHdl->xBackOffTmrHdl );
            MBP_ASSERT( MB_ENOERR == eStatus );
#else
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	250b      	movs	r5, #11
 8006e78:	197c      	adds	r4, r7, r5
 8006e7a:	2103      	movs	r1, #3
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f001 f9c9 	bl	8008214 <eMBPEventPost>
 8006e82:	0003      	movs	r3, r0
 8006e84:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8006e86:	197b      	adds	r3, r7, r5
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d031      	beq.n	8006ef2 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
 8006e8e:	f001 fa41 	bl	8008314 <vMBPAssert>
        }
        else
        {
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
        }
        break;
 8006e92:	e02e      	b.n	8006ef2 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
        else if( MBM_ASCII_START == ubValue )
 8006e94:	1cfb      	adds	r3, r7, #3
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	2b3a      	cmp	r3, #58	; 0x3a
 8006e9a:	d114      	bne.n	8006ec6 <vMBMSerialASCIIReceiverAPIV1CB+0x1dc>
            HDL_RESET_RX( pxASCIIFrameHdl );
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	33ff      	adds	r3, #255	; 0xff
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	54d1      	strb	r1, [r2, r3]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	2381      	movs	r3, #129	; 0x81
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	2100      	movs	r1, #0
 8006eae:	52d1      	strh	r1, [r2, r3]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	33ff      	adds	r3, #255	; 0xff
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	54d1      	strb	r1, [r2, r3]
        break;
 8006ec4:	e015      	b.n	8006ef2 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	33ff      	adds	r3, #255	; 0xff
 8006ecc:	2103      	movs	r1, #3
 8006ece:	54d1      	strb	r1, [r2, r3]
        break;
 8006ed0:	e00f      	b.n	8006ef2 <vMBMSerialASCIIReceiverAPIV1CB+0x208>

    case STATE_RX_IDLE:
        if( MBM_ASCII_START == ubValue )
 8006ed2:	1cfb      	adds	r3, r7, #3
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b3a      	cmp	r3, #58	; 0x3a
 8006ed8:	d10d      	bne.n	8006ef6 <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        {
            /* Others settings initialized on the transistion from TX to RX. */
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	2302      	movs	r3, #2
 8006ede:	33ff      	adds	r3, #255	; 0xff
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	54d1      	strb	r1, [r2, r3]
        }
        break;
 8006ee4:	e007      	b.n	8006ef6 <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        /* Receiver stays in error. The timeout from the MODBUS stack will 
         * abort this instruction.
         */
    case STATE_RX_ERROR:
    default:
        pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	2302      	movs	r3, #2
 8006eea:	33ff      	adds	r3, #255	; 0xff
 8006eec:	2103      	movs	r1, #3
 8006eee:	54d1      	strb	r1, [r2, r3]
        break;
 8006ef0:	e002      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	e000      	b.n	8006ef8 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 8006ef6:	46c0      	nop			; (mov r8, r8)
    }
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif
    if( bEnableTimer )
 8006ef8:	2317      	movs	r3, #23
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d02f      	beq.n	8006f62 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
    {
        if( MB_ENOERR != eMBPTimerStart( pxASCIIFrameHdl->xTmrHdl ) )
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	2386      	movs	r3, #134	; 0x86
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	58d3      	ldr	r3, [r2, r3]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f001 fb24 	bl	8008558 <eMBPTimerStart>
 8006f10:	1e03      	subs	r3, r0, #0
 8006f12:	d026      	beq.n	8006f62 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
        {
            /* We can only abort here because or timers failed. */
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	2388      	movs	r3, #136	; 0x88
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	58d3      	ldr	r3, [r2, r3]
 8006f1c:	250b      	movs	r5, #11
 8006f1e:	197c      	adds	r4, r7, r5
 8006f20:	2100      	movs	r1, #0
 8006f22:	0018      	movs	r0, r3
 8006f24:	f001 fe68 	bl	8008bf8 <eMBPSerialRxEnable>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8006f2c:	197b      	adds	r3, r7, r5
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <vMBMSerialASCIIReceiverAPIV1CB+0x24e>
 8006f34:	f001 f9ee 	bl	8008314 <vMBPAssert>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_RECV_ERROR );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	250b      	movs	r5, #11
 8006f3e:	197c      	adds	r4, r7, r5
 8006f40:	2104      	movs	r1, #4
 8006f42:	0018      	movs	r0, r3
 8006f44:	f001 f966 	bl	8008214 <eMBPEventPost>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8006f4c:	197b      	adds	r3, r7, r5
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <vMBMSerialASCIIReceiverAPIV1CB+0x26e>
 8006f54:	f001 f9de 	bl	8008314 <vMBPAssert>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	33ff      	adds	r3, #255	; 0xff
 8006f5e:	2103      	movs	r1, #3
 8006f60:	54d1      	strb	r1, [r2, r3]
        }
    }
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b006      	add	sp, #24
 8006f68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f6c <bMBMSerialASCIITransmitterEmptyAPIV1CB>:

STATIC          BOOL
bMBMSerialASCIITransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 8006f6c:	b5b0      	push	{r4, r5, r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 8006f76:	2317      	movs	r3, #23
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 8006f7e:	2316      	movs	r3, #22
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eRcvState == STATE_RX_IDLE );
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	2302      	movs	r3, #2
 8006f94:	33ff      	adds	r3, #255	; 0xff
 8006f96:	5cd3      	ldrb	r3, [r2, r3]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x36>
 8006f9e:	f001 f9b9 	bl	8008314 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eSndState )
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	2382      	movs	r3, #130	; 0x82
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	5cd3      	ldrb	r3, [r2, r3]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d100      	bne.n	8006fb2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x46>
 8006fb0:	e084      	b.n	80070bc <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x150>
 8006fb2:	dd00      	ble.n	8006fb6 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x4a>
 8006fb4:	e0a6      	b.n	8007104 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d100      	bne.n	8006fbc <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x50>
 8006fba:	e072      	b.n	80070a2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x136>
 8006fbc:	dd00      	ble.n	8006fc0 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x54>
 8006fbe:	e0a1      	b.n	8007104 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d002      	beq.n	8006fca <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x5e>
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d012      	beq.n	8006fee <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x82>
        break;

        /* In this case the transmitter is disabled. */
    case STATE_TX_IDLE:
    default:
        break;
 8006fc8:	e09c      	b.n	8007104 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
        *pubValue = MBM_ASCII_START;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	223a      	movs	r2, #58	; 0x3a
 8006fce:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_DATA;
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	2382      	movs	r3, #130	; 0x82
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	2102      	movs	r1, #2
 8006fd8:	54d1      	strb	r1, [r2, r3]
        pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	2380      	movs	r3, #128	; 0x80
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 8006fe4:	2317      	movs	r3, #23
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
        break;
 8006fec:	e08d      	b.n	800710a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        if( pxASCIIFrameHdl->usSndBufferCnt > 0 )
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	2383      	movs	r3, #131	; 0x83
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	5ad3      	ldrh	r3, [r2, r3]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d045      	beq.n	8007088 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x11c>
            switch ( pxASCIIFrameHdl->eBytePos )
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	2380      	movs	r3, #128	; 0x80
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	5cd3      	ldrb	r3, [r2, r3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xa2>
 8007008:	2b01      	cmp	r3, #1
 800700a:	d014      	beq.n	8007036 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xca>
 800700c:	e044      	b.n	8007098 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) >> 4 ) );
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	2384      	movs	r3, #132	; 0x84
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	58d3      	ldr	r3, [r2, r3]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	b2db      	uxtb	r3, r3
 800701c:	0018      	movs	r0, r3
 800701e:	f000 f917 	bl	8007250 <ubMBMSerialASCIIBIN2CHAR>
 8007022:	0003      	movs	r3, r0
 8007024:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	2101      	movs	r1, #1
 8007032:	54d1      	strb	r1, [r2, r3]
                break;
 8007034:	e030      	b.n	8007098 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) & 0x0F ) );
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	2384      	movs	r3, #132	; 0x84
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	220f      	movs	r2, #15
 8007042:	4013      	ands	r3, r2
 8007044:	b2db      	uxtb	r3, r3
 8007046:	0018      	movs	r0, r3
 8007048:	f000 f902 	bl	8007250 <ubMBMSerialASCIIBIN2CHAR>
 800704c:	0003      	movs	r3, r0
 800704e:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	2100      	movs	r1, #0
 800705c:	54d1      	strb	r1, [r2, r3]
                pxASCIIFrameHdl->pubSndBufferCur++;
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	2384      	movs	r3, #132	; 0x84
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	58d3      	ldr	r3, [r2, r3]
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	2384      	movs	r3, #132	; 0x84
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	50d1      	str	r1, [r2, r3]
                pxASCIIFrameHdl->usSndBufferCnt--;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	2383      	movs	r3, #131	; 0x83
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	5ad3      	ldrh	r3, [r2, r3]
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b299      	uxth	r1, r3
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	2383      	movs	r3, #131	; 0x83
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	52d1      	strh	r1, [r2, r3]
                break;
 8007086:	e007      	b.n	8007098 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
            *pubValue = MBM_ASCII_DEFAULT_CR;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	220d      	movs	r2, #13
 800708c:	701a      	strb	r2, [r3, #0]
            pxASCIIFrameHdl->eSndState = STATE_TX_END;
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	2382      	movs	r3, #130	; 0x82
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	2103      	movs	r1, #3
 8007096:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 8007098:	2317      	movs	r3, #23
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	2201      	movs	r2, #1
 800709e:	701a      	strb	r2, [r3, #0]
        break;
 80070a0:	e033      	b.n	800710a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        *pubValue = MBM_ASCII_DEFAULT_LF;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	220a      	movs	r2, #10
 80070a6:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_NOTIFY;
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	2382      	movs	r3, #130	; 0x82
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	2104      	movs	r1, #4
 80070b0:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 80070b2:	2317      	movs	r3, #23
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	2201      	movs	r2, #1
 80070b8:	701a      	strb	r2, [r3, #0]
        break;
 80070ba:	e026      	b.n	800710a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        pxASCIIFrameHdl->eSndState = STATE_TX_IDLE;
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	2382      	movs	r3, #130	; 0x82
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	2100      	movs	r1, #0
 80070c4:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = FALSE;
 80070c6:	2317      	movs	r3, #23
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
        if( MB_SER_BROADCAST_ADDR == pxASCIIFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d110      	bne.n	80070fa <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x18e>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SENT );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	250b      	movs	r5, #11
 80070de:	197c      	adds	r4, r7, r5
 80070e0:	2105      	movs	r1, #5
 80070e2:	0018      	movs	r0, r3
 80070e4:	f001 f896 	bl	8008214 <eMBPEventPost>
 80070e8:	0003      	movs	r3, r0
 80070ea:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80070ec:	197b      	adds	r3, r7, r5
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
 80070f4:	f001 f90e 	bl	8008314 <vMBPAssert>
        break;
 80070f8:	e006      	b.n	8007108 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
            bEnableRx = TRUE;
 80070fa:	2316      	movs	r3, #22
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]
        break;
 8007102:	e001      	b.n	8007108 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
        break;
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	e000      	b.n	800710a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        break;
 8007108:	46c0      	nop			; (mov r8, r8)
    }

    if( !bMoreTXData )
 800710a:	2317      	movs	r3, #23
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d113      	bne.n	800713c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x1d0>
    {
        HDL_RESET_TX( pxASCIIFrameHdl );
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	2382      	movs	r3, #130	; 0x82
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	2100      	movs	r1, #0
 800711c:	54d1      	strb	r1, [r2, r3]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	2383      	movs	r3, #131	; 0x83
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	2100      	movs	r1, #0
 8007126:	52d1      	strh	r1, [r2, r3]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	2100      	movs	r1, #0
 8007130:	54d1      	strb	r1, [r2, r3]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	2384      	movs	r3, #132	; 0x84
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	2100      	movs	r1, #0
 800713a:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 800713c:	2316      	movs	r3, #22
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d029      	beq.n	800719a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
    {
        HDL_RESET_RX( pxASCIIFrameHdl );
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	2302      	movs	r3, #2
 800714a:	33ff      	adds	r3, #255	; 0xff
 800714c:	2100      	movs	r1, #0
 800714e:	54d1      	strb	r1, [r2, r3]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	2381      	movs	r3, #129	; 0x81
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	2100      	movs	r1, #0
 8007158:	52d1      	strh	r1, [r2, r3]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	2100      	movs	r1, #0
 8007162:	54d1      	strb	r1, [r2, r3]
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else

        if( MB_ENOERR != eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBMSerialASCIIReceiverAPIV1CB ) )
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	2388      	movs	r3, #136	; 0x88
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	58d3      	ldr	r3, [r2, r3]
 800716c:	4a0e      	ldr	r2, [pc, #56]	; (80071a8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x23c>)
 800716e:	0011      	movs	r1, r2
 8007170:	0018      	movs	r0, r3
 8007172:	f001 fd41 	bl	8008bf8 <eMBPSerialRxEnable>
 8007176:	1e03      	subs	r3, r0, #0
 8007178:	d00f      	beq.n	800719a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	250b      	movs	r5, #11
 8007180:	197c      	adds	r4, r7, r5
 8007182:	2106      	movs	r1, #6
 8007184:	0018      	movs	r0, r3
 8007186:	f001 f845 	bl	8008214 <eMBPEventPost>
 800718a:	0003      	movs	r3, r0
 800718c:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800718e:	197b      	adds	r3, r7, r5
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
 8007196:	f001 f8bd 	bl	8008314 <vMBPAssert>
        }
#endif
    }
    return bMoreTXData;
 800719a:	2317      	movs	r3, #23
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	781b      	ldrb	r3, [r3, #0]
}
 80071a0:	0018      	movs	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	b006      	add	sp, #24
 80071a6:	bdb0      	pop	{r4, r5, r7, pc}
 80071a8:	08006ceb 	.word	0x08006ceb

080071ac <bMBMSerialASCIITimerCB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialASCIITimerCB( xMBHandle xHdl )
{
 80071ac:	b5b0      	push	{r4, r5, r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 80071b4:	2317      	movs	r3, #23
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	2382      	movs	r3, #130	; 0x82
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	5cd3      	ldrb	r3, [r2, r3]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <bMBMSerialASCIITimerCB+0x2c>
 80071d4:	f001 f89e 	bl	8008314 <vMBPAssert>

    eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	250b      	movs	r5, #11
 80071de:	197c      	adds	r4, r7, r5
 80071e0:	2104      	movs	r1, #4
 80071e2:	0018      	movs	r0, r3
 80071e4:	f001 f816 	bl	8008214 <eMBPEventPost>
 80071e8:	0003      	movs	r3, r0
 80071ea:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 80071ec:	197b      	adds	r3, r7, r5
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <bMBMSerialASCIITimerCB+0x4c>
 80071f4:	f001 f88e 	bl	8008314 <vMBPAssert>

    return bNeedCtxSwitch;
 80071f8:	2317      	movs	r3, #23
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	781b      	ldrb	r3, [r3, #0]
}
 80071fe:	0018      	movs	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	b006      	add	sp, #24
 8007204:	bdb0      	pop	{r4, r5, r7, pc}

08007206 <ubMBMSerialASCIICHAR2BIN>:

STATIC          UBYTE
ubMBMSerialASCIICHAR2BIN( UBYTE ubCharacter )
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	0002      	movs	r2, r0
 800720e:	1dfb      	adds	r3, r7, #7
 8007210:	701a      	strb	r2, [r3, #0]
    if( ( ubCharacter >= 0x30 /* ASCII '0' */  ) && ( ubCharacter <= 0x39 /* ASCII '9' */  ) )
 8007212:	1dfb      	adds	r3, r7, #7
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b2f      	cmp	r3, #47	; 0x2f
 8007218:	d908      	bls.n	800722c <ubMBMSerialASCIICHAR2BIN+0x26>
 800721a:	1dfb      	adds	r3, r7, #7
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b39      	cmp	r3, #57	; 0x39
 8007220:	d804      	bhi.n	800722c <ubMBMSerialASCIICHAR2BIN+0x26>
    {
        return ( UBYTE ) ( ubCharacter - 0x30 /* ASCII '0' */  );
 8007222:	1dfb      	adds	r3, r7, #7
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	3b30      	subs	r3, #48	; 0x30
 8007228:	b2db      	uxtb	r3, r3
 800722a:	e00d      	b.n	8007248 <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else if( ( ubCharacter >= 0x41 /* ASCII 'A' */  ) && ( ubCharacter <= 0x46 /* ASCII 'F' */  ) )
 800722c:	1dfb      	adds	r3, r7, #7
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d908      	bls.n	8007246 <ubMBMSerialASCIICHAR2BIN+0x40>
 8007234:	1dfb      	adds	r3, r7, #7
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b46      	cmp	r3, #70	; 0x46
 800723a:	d804      	bhi.n	8007246 <ubMBMSerialASCIICHAR2BIN+0x40>
    {
        return ( UBYTE ) ( ( ubCharacter - 0x41 ) /* ASCII 'A' */  + 0x0A );
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	3b37      	subs	r3, #55	; 0x37
 8007242:	b2db      	uxtb	r3, r3
 8007244:	e000      	b.n	8007248 <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else
    {
        return 0xFF;
 8007246:	23ff      	movs	r3, #255	; 0xff
    }
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b002      	add	sp, #8
 800724e:	bd80      	pop	{r7, pc}

08007250 <ubMBMSerialASCIIBIN2CHAR>:

STATIC          UBYTE
ubMBMSerialASCIIBIN2CHAR( UBYTE ubByte )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	0002      	movs	r2, r0
 8007258:	1dfb      	adds	r3, r7, #7
 800725a:	701a      	strb	r2, [r3, #0]
    if( ubByte <= 0x09 )
 800725c:	1dfb      	adds	r3, r7, #7
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b09      	cmp	r3, #9
 8007262:	d804      	bhi.n	800726e <ubMBMSerialASCIIBIN2CHAR+0x1e>
    {
        return ( UBYTE ) ( 0x30 + ubByte );
 8007264:	1dfb      	adds	r3, r7, #7
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	3330      	adds	r3, #48	; 0x30
 800726a:	b2db      	uxtb	r3, r3
 800726c:	e00f      	b.n	800728e <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    else if( ( ubByte >= 0x0A ) && ( ubByte <= 0x0F ) )
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b09      	cmp	r3, #9
 8007274:	d908      	bls.n	8007288 <ubMBMSerialASCIIBIN2CHAR+0x38>
 8007276:	1dfb      	adds	r3, r7, #7
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b0f      	cmp	r3, #15
 800727c:	d804      	bhi.n	8007288 <ubMBMSerialASCIIBIN2CHAR+0x38>
    {
        return ( UBYTE ) ( ( ubByte - 0x0A ) + 0x41 /* ASCII 'A' */  );
 800727e:	1dfb      	adds	r3, r7, #7
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	3337      	adds	r3, #55	; 0x37
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e002      	b.n	800728e <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    MBP_ASSERT( 0 );
 8007288:	f001 f844 	bl	8008314 <vMBPAssert>
    /*lint -e(527) */ return 0xFF;
 800728c:	23ff      	movs	r3, #255	; 0xff
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b002      	add	sp, #8
 8007294:	bd80      	pop	{r7, pc}

08007296 <ubMBMSerialASCIILRC>:


STATIC          UBYTE
ubMBMSerialASCIILRC( const UBYTE * pubFrame, USHORT usLen )
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	000a      	movs	r2, r1
 80072a0:	1cbb      	adds	r3, r7, #2
 80072a2:	801a      	strh	r2, [r3, #0]
    UBYTE           ubLRC = 0;  /* LRC char initialized */
 80072a4:	230f      	movs	r3, #15
 80072a6:	18fb      	adds	r3, r7, r3
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]

    while( usLen-- > 0 )
 80072ac:	e009      	b.n	80072c2 <ubMBMSerialASCIILRC+0x2c>
    {
        ubLRC += *pubFrame++;   /* Add buffer byte without carry */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	7819      	ldrb	r1, [r3, #0]
 80072b6:	220f      	movs	r2, #15
 80072b8:	18bb      	adds	r3, r7, r2
 80072ba:	18ba      	adds	r2, r7, r2
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	188a      	adds	r2, r1, r2
 80072c0:	701a      	strb	r2, [r3, #0]
    while( usLen-- > 0 )
 80072c2:	1cbb      	adds	r3, r7, #2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	1cba      	adds	r2, r7, #2
 80072c8:	1e59      	subs	r1, r3, #1
 80072ca:	8011      	strh	r1, [r2, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ee      	bne.n	80072ae <ubMBMSerialASCIILRC+0x18>
    }

    /* Return twos complement */
    ubLRC = ( UBYTE ) ( -( ( UBYTE ) ubLRC ) );
 80072d0:	210f      	movs	r1, #15
 80072d2:	187b      	adds	r3, r7, r1
 80072d4:	187a      	adds	r2, r7, r1
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	4252      	negs	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
    return ubLRC;
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	781b      	ldrb	r3, [r3, #0]
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b004      	add	sp, #16
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <usMBMCRC16>:
}
#endif

USHORT
usMBMCRC16( const UBYTE * pucFrame, USHORT usLen )
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	000a      	movs	r2, r1
 80072f2:	1cbb      	adds	r3, r7, #2
 80072f4:	801a      	strh	r2, [r3, #0]
    UBYTE           ubCRCHi = 0xFF;
 80072f6:	230f      	movs	r3, #15
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	22ff      	movs	r2, #255	; 0xff
 80072fc:	701a      	strb	r2, [r3, #0]
    UBYTE           ubCRCLo = 0xFF;
 80072fe:	230e      	movs	r3, #14
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	22ff      	movs	r2, #255	; 0xff
 8007304:	701a      	strb	r2, [r3, #0]

#if CRC16_USETABLE == 0
    USHORT          usCRCTableValue;
#endif

    while( usLen-- )
 8007306:	e01a      	b.n	800733e <usMBMCRC16+0x56>
    {

        ubIndex = ubCRCLo ^ *( pucFrame++ );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	7819      	ldrb	r1, [r3, #0]
 8007310:	200d      	movs	r0, #13
 8007312:	183b      	adds	r3, r7, r0
 8007314:	240e      	movs	r4, #14
 8007316:	193a      	adds	r2, r7, r4
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	404a      	eors	r2, r1
 800731c:	701a      	strb	r2, [r3, #0]
#if CRC16_USETABLE == 1
        ubCRCLo = ubCRCHi ^ ( UBYTE ) aucCRCHi[ubIndex];
 800731e:	183b      	adds	r3, r7, r0
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <usMBMCRC16+0x84>)
 8007324:	5cd1      	ldrb	r1, [r2, r3]
 8007326:	193b      	adds	r3, r7, r4
 8007328:	240f      	movs	r4, #15
 800732a:	193a      	adds	r2, r7, r4
 800732c:	7812      	ldrb	r2, [r2, #0]
 800732e:	404a      	eors	r2, r1
 8007330:	701a      	strb	r2, [r3, #0]
        ubCRCHi = ( UBYTE ) aucCRCLo[ubIndex];
 8007332:	183b      	adds	r3, r7, r0
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	193b      	adds	r3, r7, r4
 8007338:	490d      	ldr	r1, [pc, #52]	; (8007370 <usMBMCRC16+0x88>)
 800733a:	5c8a      	ldrb	r2, [r1, r2]
 800733c:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 800733e:	1cbb      	adds	r3, r7, #2
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	1cba      	adds	r2, r7, #2
 8007344:	1e59      	subs	r1, r3, #1
 8007346:	8011      	strh	r1, [r2, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1dd      	bne.n	8007308 <usMBMCRC16+0x20>
    }
    /* Additional casts a for PIC MCC18 compiler to fix a bug when -Oi is not used. 
     * This is required because it does not enforce ANSI c integer promotion
     * rules.
     */
    return ( USHORT )( ( USHORT )ubCRCHi << 8 | ( USHORT )ubCRCLo );
 800734c:	230f      	movs	r3, #15
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	b21a      	sxth	r2, r3
 8007356:	230e      	movs	r3, #14
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b21b      	sxth	r3, r3
 800735e:	4313      	orrs	r3, r2
 8007360:	b21b      	sxth	r3, r3
 8007362:	b29b      	uxth	r3, r3
}
 8007364:	0018      	movs	r0, r3
 8007366:	46bd      	mov	sp, r7
 8007368:	b005      	add	sp, #20
 800736a:	bd90      	pop	{r4, r7, pc}
 800736c:	08008e00 	.word	0x08008e00
 8007370:	08008f00 	.word	0x08008f00

08007374 <vMBMWriteSingleRegisterPolled>:

#if MBM_FUNC_WR_SINGLE_REG_ENABLED == 1
void
vMBMWriteSingleRegisterPolled( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegAddress, USHORT usValue,
                               eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	000c      	movs	r4, r1
 800737e:	0010      	movs	r0, r2
 8007380:	0019      	movs	r1, r3
 8007382:	230b      	movs	r3, #11
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	1c22      	adds	r2, r4, #0
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	2308      	movs	r3, #8
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	1c02      	adds	r2, r0, #0
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	1dbb      	adds	r3, r7, #6
 8007394:	1c0a      	adds	r2, r1, #0
 8007396:	801a      	strh	r2, [r3, #0]
    USHORT          usRegAddressWritten;
    USHORT          usValueWritten;

    xMBMInternalHandle *pxIntHdl = ( xMBMInternalHandle * ) xHdl;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	617b      	str	r3, [r7, #20]
    if( bMBMIsHdlValid( pxIntHdl ) && ( peState != NULL ) && ( peStatus != NULL ) )
#else
    if( TRUE )
#endif
    {
        switch ( *peState )
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d100      	bne.n	80073a6 <vMBMWriteSingleRegisterPolled+0x32>
 80073a4:	e0d2      	b.n	800754c <vMBMWriteSingleRegisterPolled+0x1d8>
 80073a6:	dd00      	ble.n	80073aa <vMBMWriteSingleRegisterPolled+0x36>
 80073a8:	e0d4      	b.n	8007554 <vMBMWriteSingleRegisterPolled+0x1e0>
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d100      	bne.n	80073b0 <vMBMWriteSingleRegisterPolled+0x3c>
 80073ae:	e06c      	b.n	800748a <vMBMWriteSingleRegisterPolled+0x116>
 80073b0:	dd00      	ble.n	80073b4 <vMBMWriteSingleRegisterPolled+0x40>
 80073b2:	e0cf      	b.n	8007554 <vMBMWriteSingleRegisterPolled+0x1e0>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <vMBMWriteSingleRegisterPolled+0x52>
 80073b8:	da00      	bge.n	80073bc <vMBMWriteSingleRegisterPolled+0x48>
 80073ba:	e0cb      	b.n	8007554 <vMBMWriteSingleRegisterPolled+0x1e0>
 80073bc:	3b01      	subs	r3, #1
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d900      	bls.n	80073c4 <vMBMWriteSingleRegisterPolled+0x50>
 80073c2:	e0c7      	b.n	8007554 <vMBMWriteSingleRegisterPolled+0x1e0>
 80073c4:	e057      	b.n	8007476 <vMBMWriteSingleRegisterPolled+0x102>
				vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE,
							 "[IDX=" MBP_FORMAT_USHORT "] Write single holding register request (start="
							 MBP_FORMAT_USHORT ").\n", ( USHORT ) pxIntHdl->ubIdx, usRegAddress );
			}
#endif
			pxIntHdl->usFrameMBPDULength = 0;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = MBM_FUNC_WR_REG;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	89d2      	ldrh	r2, [r2, #14]
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	2206      	movs	r2, #6
 80073d8:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	89db      	ldrh	r3, [r3, #14]
 80073de:	3301      	adds	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegAddress >> 8U );
 80073e6:	2008      	movs	r0, #8
 80073e8:	183b      	adds	r3, r7, r0
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	b299      	uxth	r1, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	89d2      	ldrh	r2, [r2, #14]
 80073f8:	189b      	adds	r3, r3, r2
 80073fa:	b2ca      	uxtb	r2, r1
 80073fc:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	89db      	ldrh	r3, [r3, #14]
 8007402:	3301      	adds	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegAddress & 0x00FFU );
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	89d2      	ldrh	r2, [r2, #14]
 8007412:	189b      	adds	r3, r3, r2
 8007414:	183a      	adds	r2, r7, r0
 8007416:	8812      	ldrh	r2, [r2, #0]
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	89db      	ldrh	r3, [r3, #14]
 8007420:	3301      	adds	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usValue >> 8U );
 8007428:	1dbb      	adds	r3, r7, #6
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	b299      	uxth	r1, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	89d2      	ldrh	r2, [r2, #14]
 8007438:	189b      	adds	r3, r3, r2
 800743a:	b2ca      	uxtb	r2, r1
 800743c:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	89db      	ldrh	r3, [r3, #14]
 8007442:	3301      	adds	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usValue & 0x00FFU );
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	89d2      	ldrh	r2, [r2, #14]
 8007452:	189b      	adds	r3, r3, r2
 8007454:	1dba      	adds	r2, r7, #6
 8007456:	8812      	ldrh	r2, [r2, #0]
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	89db      	ldrh	r3, [r3, #14]
 8007460:	3301      	adds	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	81da      	strh	r2, [r3, #14]
			/* Frame is assembled. Now send it. */
			*peStatus = MB_EAGAIN;
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2207      	movs	r2, #7
 800746c:	701a      	strb	r2, [r3, #0]
			*peState = MBM_STATE_SEND;
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	2201      	movs	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
            break;
 8007474:	e075      	b.n	8007562 <vMBMWriteSingleRegisterPolled+0x1ee>

            /* These states are handled by the common state machine. */
        case MBM_STATE_SEND:
        case MBM_STATE_WAITING:
            vMBMMasterTransactionPolled( pxIntHdl, ucSlaveAddress, peState, peStatus );
 8007476:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800747a:	230b      	movs	r3, #11
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	7819      	ldrb	r1, [r3, #0]
 8007480:	6978      	ldr	r0, [r7, #20]
 8007482:	0023      	movs	r3, r4
 8007484:	f7fe fefa 	bl	800627c <vMBMMasterTransactionPolled>
            break;
 8007488:	e06b      	b.n	8007562 <vMBMWriteSingleRegisterPolled+0x1ee>

            /* We need to disassemble the response here. */
        case MBM_STATE_DISASSEMBLE:
            *peState = MBM_STATE_DONE;
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	2205      	movs	r2, #5
 800748e:	701a      	strb	r2, [r3, #0]
            if( ( MBM_FUNC_WR_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	89db      	ldrh	r3, [r3, #14]
 8007494:	2b05      	cmp	r3, #5
 8007496:	d13f      	bne.n	8007518 <vMBMWriteSingleRegisterPolled+0x1a4>
                ( MBM_FUNC_WR_REG == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) )
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	781b      	ldrb	r3, [r3, #0]
            if( ( MBM_FUNC_WR_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d13a      	bne.n	8007518 <vMBMWriteSingleRegisterPolled+0x1a4>
            {
                usRegAddressWritten =
                    ( USHORT ) ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_ADDR_OFF] << 8U );
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	3301      	adds	r3, #1
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
                usRegAddressWritten =
 80074ac:	2012      	movs	r0, #18
 80074ae:	183b      	adds	r3, r7, r0
 80074b0:	0212      	lsls	r2, r2, #8
 80074b2:	801a      	strh	r2, [r3, #0]

                usRegAddressWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_ADDR_OFF + 1];
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	3302      	adds	r3, #2
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b299      	uxth	r1, r3
 80074be:	183b      	adds	r3, r7, r0
 80074c0:	183a      	adds	r2, r7, r0
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	801a      	strh	r2, [r3, #0]
                usValueWritten =
                    ( USHORT ) ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_VALUE_OFF] << 8U );
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	3303      	adds	r3, #3
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
                usValueWritten =
 80074d2:	2410      	movs	r4, #16
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	0212      	lsls	r2, r2, #8
 80074d8:	801a      	strh	r2, [r3, #0]
                usValueWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_VALUE_OFF + 1];
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	3304      	adds	r3, #4
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b299      	uxth	r1, r3
 80074e4:	193b      	adds	r3, r7, r4
 80074e6:	193a      	adds	r2, r7, r4
 80074e8:	8812      	ldrh	r2, [r2, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	801a      	strh	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 80074ee:	183a      	adds	r2, r7, r0
 80074f0:	2308      	movs	r3, #8
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	8812      	ldrh	r2, [r2, #0]
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d109      	bne.n	8007510 <vMBMWriteSingleRegisterPolled+0x19c>
 80074fc:	193a      	adds	r2, r7, r4
 80074fe:	1dbb      	adds	r3, r7, #6
 8007500:	8812      	ldrh	r2, [r2, #0]
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d103      	bne.n	8007510 <vMBMWriteSingleRegisterPolled+0x19c>
                {
                    *peStatus = MB_ENOERR;
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 800750e:	e01c      	b.n	800754a <vMBMWriteSingleRegisterPolled+0x1d6>
                }
                else
                {
                    *peStatus = MB_EIO;
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	2205      	movs	r2, #5
 8007514:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 8007516:	e018      	b.n	800754a <vMBMWriteSingleRegisterPolled+0x1d6>
                }
            }
            /* Check for exception frame. */
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	89db      	ldrh	r3, [r3, #14]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d110      	bne.n	8007542 <vMBMWriteSingleRegisterPolled+0x1ce>
                     MB_PDU_FUNC_ISEXCEPTION_FOR( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF], MBM_FUNC_WR_REG ) )
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	781b      	ldrb	r3, [r3, #0]
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 8007526:	2b86      	cmp	r3, #134	; 0x86
 8007528:	d10b      	bne.n	8007542 <vMBMWriteSingleRegisterPolled+0x1ce>
            {
                *peStatus = eMBExceptionToErrorcode( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_EX_CODE_OFF] );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	0018      	movs	r0, r3
 8007534:	f001 f8e8 	bl	8008708 <eMBExceptionToErrorcode>
 8007538:	0003      	movs	r3, r0
 800753a:	001a      	movs	r2, r3
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	e003      	b.n	800754a <vMBMWriteSingleRegisterPolled+0x1d6>
            }
            else
            {
                *peStatus = MB_EIO;
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	2205      	movs	r2, #5
 8007546:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007548:	e00b      	b.n	8007562 <vMBMWriteSingleRegisterPolled+0x1ee>
 800754a:	e00a      	b.n	8007562 <vMBMWriteSingleRegisterPolled+0x1ee>

        case MBM_STATE_ERROR:
            /* No cleanup required. */
            *peState = MBM_STATE_DONE;
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	2205      	movs	r2, #5
 8007550:	701a      	strb	r2, [r3, #0]
            break;
 8007552:	e006      	b.n	8007562 <vMBMWriteSingleRegisterPolled+0x1ee>

        default:
            *peState = MBM_STATE_DONE;
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	2205      	movs	r2, #5
 8007558:	701a      	strb	r2, [r3, #0]
            *peStatus = MB_EILLSTATE;
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2206      	movs	r2, #6
 800755e:	701a      	strb	r2, [r3, #0]
        {
            *peStatus = MB_EINVAL;
        }
    }
#endif
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	46bd      	mov	sp, r7
 8007566:	b007      	add	sp, #28
 8007568:	bd90      	pop	{r4, r7, pc}

0800756a <eMBMWriteSingleRegister>:

/* ----------------------- Start implementation (Blocking functions) --------*/
#if MBM_FUNC_WR_SINGLE_REG_ENABLED == 1
eMBErrorCode
eMBMWriteSingleRegister( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegAddress, USHORT usValue )
{
 800756a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756c:	b089      	sub	sp, #36	; 0x24
 800756e:	af02      	add	r7, sp, #8
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	000c      	movs	r4, r1
 8007574:	0010      	movs	r0, r2
 8007576:	0019      	movs	r1, r3
 8007578:	230b      	movs	r3, #11
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	1c22      	adds	r2, r4, #0
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	2308      	movs	r3, #8
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	1c02      	adds	r2, r0, #0
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	1dbb      	adds	r3, r7, #6
 800758a:	1c0a      	adds	r2, r1, #0
 800758c:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus;
    eMBMQueryState  eState = MBM_STATE_NONE;
 800758e:	2316      	movs	r3, #22
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]

    do
    {
        vMBMWriteSingleRegisterPolled( xHdl, ucSlaveAddress, usRegAddress, usValue, &eState, &eStatus );
 8007596:	1dbb      	adds	r3, r7, #6
 8007598:	881c      	ldrh	r4, [r3, #0]
 800759a:	2308      	movs	r3, #8
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	881a      	ldrh	r2, [r3, #0]
 80075a0:	230b      	movs	r3, #11
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	7819      	ldrb	r1, [r3, #0]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	2517      	movs	r5, #23
 80075aa:	197b      	adds	r3, r7, r5
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	2616      	movs	r6, #22
 80075b0:	19bb      	adds	r3, r7, r6
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	0023      	movs	r3, r4
 80075b6:	f7ff fedd 	bl	8007374 <vMBMWriteSingleRegisterPolled>
    }
    while( eState != MBM_STATE_DONE );
 80075ba:	19bb      	adds	r3, r7, r6
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d1e9      	bne.n	8007596 <eMBMWriteSingleRegister+0x2c>
    return eStatus;
 80075c2:	197b      	adds	r3, r7, r5
 80075c4:	781b      	ldrb	r3, [r3, #0]
}
 80075c6:	0018      	movs	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b007      	add	sp, #28
 80075cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080075d0 <eMBMSerialRTUInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialRTUInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 80075d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d2:	b08d      	sub	sp, #52	; 0x34
 80075d4:	af04      	add	r7, sp, #16
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	0008      	movs	r0, r1
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	0019      	movs	r1, r3
 80075de:	230b      	movs	r3, #11
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	1c02      	adds	r2, r0, #0
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	230a      	movs	r3, #10
 80075e8:	18fb      	adds	r3, r7, r3
 80075ea:	1c0a      	adds	r2, r1, #0
 80075ec:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 80075ee:	231f      	movs	r3, #31
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	2200      	movs	r2, #0
 80075f4:	701a      	strb	r2, [r3, #0]
    xMBMRTUFrameHandle *pxFrameHdl = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 80075fa:	f000 fe9e 	bl	800833a <vMBPEnterCritical>
        if( !bIsInitialized )
 80075fe:	4ba7      	ldr	r3, [pc, #668]	; (800789c <eMBMSerialRTUInit+0x2cc>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d000      	beq.n	8007608 <eMBMSerialRTUInit+0x38>
 8007606:	e099      	b.n	800773c <eMBMSerialRTUInit+0x16c>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007608:	2317      	movs	r3, #23
 800760a:	18fb      	adds	r3, r7, r3
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	e08b      	b.n	800772a <eMBMSerialRTUInit+0x15a>
            {
                HDL_RESET( &xMBMRTUFrameHdl[ubIdx] );
 8007612:	2417      	movs	r4, #23
 8007614:	193b      	adds	r3, r7, r4
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	49a1      	ldr	r1, [pc, #644]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 800761a:	0013      	movs	r3, r2
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	189b      	adds	r3, r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	189b      	adds	r3, r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	22ff      	movs	r2, #255	; 0xff
 8007628:	545a      	strb	r2, [r3, r1]
 800762a:	193b      	adds	r3, r7, r4
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	489c      	ldr	r0, [pc, #624]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 8007630:	2302      	movs	r3, #2
 8007632:	33ff      	adds	r3, #255	; 0xff
 8007634:	0019      	movs	r1, r3
 8007636:	0013      	movs	r3, r2
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	189b      	adds	r3, r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	189b      	adds	r3, r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	18c3      	adds	r3, r0, r3
 8007644:	185b      	adds	r3, r3, r1
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	193b      	adds	r3, r7, r4
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	4894      	ldr	r0, [pc, #592]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 8007650:	2381      	movs	r3, #129	; 0x81
 8007652:	0059      	lsls	r1, r3, #1
 8007654:	0013      	movs	r3, r2
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	189b      	adds	r3, r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	189b      	adds	r3, r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	18c3      	adds	r3, r0, r3
 8007662:	185b      	adds	r3, r3, r1
 8007664:	2200      	movs	r2, #0
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	193b      	adds	r3, r7, r4
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	488c      	ldr	r0, [pc, #560]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 800766e:	2382      	movs	r3, #130	; 0x82
 8007670:	0059      	lsls	r1, r3, #1
 8007672:	0013      	movs	r3, r2
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	189b      	adds	r3, r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	189b      	adds	r3, r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	18c3      	adds	r3, r0, r3
 8007680:	185b      	adds	r3, r3, r1
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	193b      	adds	r3, r7, r4
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	4885      	ldr	r0, [pc, #532]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 800768c:	2383      	movs	r3, #131	; 0x83
 800768e:	0059      	lsls	r1, r3, #1
 8007690:	0013      	movs	r3, r2
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	189b      	adds	r3, r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	189b      	adds	r3, r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	18c3      	adds	r3, r0, r3
 800769e:	185b      	adds	r3, r3, r1
 80076a0:	2200      	movs	r2, #0
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	193b      	adds	r3, r7, r4
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	487d      	ldr	r0, [pc, #500]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 80076aa:	2384      	movs	r3, #132	; 0x84
 80076ac:	0059      	lsls	r1, r3, #1
 80076ae:	0013      	movs	r3, r2
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	189b      	adds	r3, r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	18c3      	adds	r3, r0, r3
 80076bc:	185b      	adds	r3, r3, r1
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	193b      	adds	r3, r7, r4
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	4876      	ldr	r0, [pc, #472]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 80076c8:	2386      	movs	r3, #134	; 0x86
 80076ca:	0059      	lsls	r1, r3, #1
 80076cc:	0013      	movs	r3, r2
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	189b      	adds	r3, r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	189b      	adds	r3, r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	18c3      	adds	r3, r0, r3
 80076da:	185b      	adds	r3, r3, r1
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	193b      	adds	r3, r7, r4
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	486e      	ldr	r0, [pc, #440]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 80076e6:	2388      	movs	r3, #136	; 0x88
 80076e8:	0059      	lsls	r1, r3, #1
 80076ea:	0013      	movs	r3, r2
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	18c3      	adds	r3, r0, r3
 80076f8:	185b      	adds	r3, r3, r1
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	193b      	adds	r3, r7, r4
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	0013      	movs	r3, r2
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	189b      	adds	r3, r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	189b      	adds	r3, r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a64      	ldr	r2, [pc, #400]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 8007710:	189b      	adds	r3, r3, r2
 8007712:	3301      	adds	r3, #1
 8007714:	2280      	movs	r2, #128	; 0x80
 8007716:	0052      	lsls	r2, r2, #1
 8007718:	2100      	movs	r1, #0
 800771a:	0018      	movs	r0, r3
 800771c:	f001 faeb 	bl	8008cf6 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007720:	193b      	adds	r3, r7, r4
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	193b      	adds	r3, r7, r4
 8007726:	3201      	adds	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	2317      	movs	r3, #23
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d800      	bhi.n	8007736 <eMBMSerialRTUInit+0x166>
 8007734:	e76d      	b.n	8007612 <eMBMSerialRTUInit+0x42>
            }
            bIsInitialized = TRUE;
 8007736:	4b59      	ldr	r3, [pc, #356]	; (800789c <eMBMSerialRTUInit+0x2cc>)
 8007738:	2201      	movs	r2, #1
 800773a:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 800773c:	2317      	movs	r3, #23
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e023      	b.n	800778e <eMBMSerialRTUInit+0x1be>
        {
            if( IDX_INVALID == xMBMRTUFrameHdl[ubIdx].ubIdx )
 8007746:	2017      	movs	r0, #23
 8007748:	183b      	adds	r3, r7, r0
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	4954      	ldr	r1, [pc, #336]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 800774e:	0013      	movs	r3, r2
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	189b      	adds	r3, r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	189b      	adds	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	5c5b      	ldrb	r3, [r3, r1]
 800775c:	2bff      	cmp	r3, #255	; 0xff
 800775e:	d110      	bne.n	8007782 <eMBMSerialRTUInit+0x1b2>
            {
                pxFrameHdl = &xMBMRTUFrameHdl[ubIdx];
 8007760:	0001      	movs	r1, r0
 8007762:	187b      	adds	r3, r7, r1
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	0013      	movs	r3, r2
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	189b      	adds	r3, r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	189b      	adds	r3, r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4a4b      	ldr	r2, [pc, #300]	; (80078a0 <eMBMSerialRTUInit+0x2d0>)
 8007774:	189b      	adds	r3, r3, r2
 8007776:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	187a      	adds	r2, r7, r1
 800777c:	7812      	ldrb	r2, [r2, #0]
 800777e:	701a      	strb	r2, [r3, #0]
                break;
 8007780:	e00a      	b.n	8007798 <eMBMSerialRTUInit+0x1c8>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007782:	2117      	movs	r1, #23
 8007784:	187b      	adds	r3, r7, r1
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	187b      	adds	r3, r7, r1
 800778a:	3201      	adds	r2, #1
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	2317      	movs	r3, #23
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d9d6      	bls.n	8007746 <eMBMSerialRTUInit+0x176>
            }
        }

        if( NULL != pxFrameHdl )
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d071      	beq.n	8007882 <eMBMSerialRTUInit+0x2b2>
            usTimeoutMS = ( USHORT ) MBM_SERIAL_APIV2_RTU_DYNAMIC_TIMEOUT_MS( ulBaudRate );
#else
            /* If baudrate > 19200 then we should use the fixed timer value 1750us. 
             * We can't match this exactly so we use 2000us. Otherwise use 3.5 timers
             * the character timeout. */
            if( ulBaudRate > 19200 )
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	2396      	movs	r3, #150	; 0x96
 80077a2:	01db      	lsls	r3, r3, #7
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d904      	bls.n	80077b2 <eMBMSerialRTUInit+0x1e2>
            {
                usTimeoutMS = 2;
 80077a8:	2314      	movs	r3, #20
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	2202      	movs	r2, #2
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e00a      	b.n	80077c8 <eMBMSerialRTUInit+0x1f8>
            {
                /* The number of ticks required for a character is given by 
                 * xTicksCh = TIMER_TICKS_PER_SECOND * 11 / BAUDRATE
                 * The total timeout is given by xTicksCh * 3.5 = xTicksCh * 7/2.
                 */
                usTimeoutMS = ( USHORT ) ( ( 1000UL * 11UL * 7UL ) / ( 2 * ulBaudRate ) );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	0019      	movs	r1, r3
 80077b8:	483a      	ldr	r0, [pc, #232]	; (80078a4 <eMBMSerialRTUInit+0x2d4>)
 80077ba:	f7f8 fca5 	bl	8000108 <__udivsi3>
 80077be:	0003      	movs	r3, r0
 80077c0:	001a      	movs	r2, r3
 80077c2:	2314      	movs	r3, #20
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	801a      	strh	r2, [r3, #0]

#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            usTimeoutMSWaitAfterSend = MBM_SERIAL_RTU_DYNAMIC_WAITAFTERSEND_TIMEOUT_MS( ulBaudRate );
#endif

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 8, eParity, ucStopBits, pxIntHdl
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	3311      	adds	r3, #17
 80077cc:	33ff      	adds	r3, #255	; 0xff
 80077ce:	0018      	movs	r0, r3
 80077d0:	2513      	movs	r5, #19
 80077d2:	197c      	adds	r4, r7, r5
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	230b      	movs	r3, #11
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	7819      	ldrb	r1, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	2330      	movs	r3, #48	; 0x30
 80077e2:	2608      	movs	r6, #8
 80077e4:	199b      	adds	r3, r3, r6
 80077e6:	19db      	adds	r3, r3, r7
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	230a      	movs	r3, #10
 80077ee:	18fb      	adds	r3, r7, r3
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	2308      	movs	r3, #8
 80077f6:	f000 ffd1 	bl	800879c <eMBPSerialInit>
 80077fa:	0003      	movs	r3, r0
 80077fc:	7023      	strb	r3, [r4, #0]
 80077fe:	197b      	adds	r3, r7, r5
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <eMBMSerialRTUInit+0x242>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , bMBMSerialRTUT35CB, MB_RTU
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 8007806:	231f      	movs	r3, #31
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	197a      	adds	r2, r7, r5
 800780c:	7812      	ldrb	r2, [r2, #0]
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e02d      	b.n	800786e <eMBMSerialRTUInit+0x29e>
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialRTUT35CB, pxIntHdl ) ) )
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	330d      	adds	r3, #13
 8007816:	33ff      	adds	r3, #255	; 0xff
 8007818:	0018      	movs	r0, r3
 800781a:	2613      	movs	r6, #19
 800781c:	19bc      	adds	r4, r7, r6
 800781e:	68fd      	ldr	r5, [r7, #12]
 8007820:	4a21      	ldr	r2, [pc, #132]	; (80078a8 <eMBMSerialRTUInit+0x2d8>)
 8007822:	2314      	movs	r3, #20
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	8819      	ldrh	r1, [r3, #0]
 8007828:	002b      	movs	r3, r5
 800782a:	f000 fd95 	bl	8008358 <eMBPTimerInit>
 800782e:	0003      	movs	r3, r0
 8007830:	7023      	strb	r3, [r4, #0]
 8007832:	19bb      	adds	r3, r7, r6
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <eMBMSerialRTUInit+0x276>
            {
                eStatus = eStatus2;
 800783a:	231f      	movs	r3, #31
 800783c:	18fb      	adds	r3, r7, r3
 800783e:	19ba      	adds	r2, r7, r6
 8007840:	7812      	ldrb	r2, [r2, #0]
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e013      	b.n	800786e <eMBMSerialRTUInit+0x29e>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_PDU_OFF];
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	1c9a      	adds	r2, r3, #2
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialRTUFrameSend;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <eMBMSerialRTUInit+0x2dc>)
 8007858:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialRTUFrameReceive;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <eMBMSerialRTUInit+0x2e0>)
 800785e:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialRTUFrameClose;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <eMBMSerialRTUInit+0x2e4>)
 8007864:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialRTUFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 8007866:	231f      	movs	r3, #31
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
                             "[IDX=" MBP_FORMAT_USHORT "] Creation of new RTU instance (port=" MBP_FORMAT_USHORT
                             ", baudrate=" MBP_FORMAT_ULONG ", parity=" MBP_FORMAT_USHORT "): %s.\n",
                             ( USHORT ) pxFrameHdl->ubIdx, ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif
            if( MB_ENOERR != eStatus )
 800786e:	231f      	movs	r3, #31
 8007870:	18fb      	adds	r3, r7, r3
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <eMBMSerialRTUInit+0x2ba>
            {
                ( void )eMBMSerialRTUFrameCloseInternal( pxFrameHdl );
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f9d1 	bl	8007c22 <eMBMSerialRTUFrameCloseInternal>
 8007880:	e003      	b.n	800788a <eMBMSerialRTUInit+0x2ba>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 8007882:	231f      	movs	r3, #31
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	2204      	movs	r2, #4
 8007888:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800788a:	f000 fd5d 	bl	8008348 <vMBPExitCritical>
        eStatus = MB_EINVAL;
    }
#endif


    return eStatus;
 800788e:	231f      	movs	r3, #31
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
}
 8007894:	0018      	movs	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	b009      	add	sp, #36	; 0x24
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789c:	20001498 	.word	0x20001498
 80078a0:	2000149c 	.word	0x2000149c
 80078a4:	00012cc8 	.word	0x00012cc8
 80078a8:	08008041 	.word	0x08008041
 80078ac:	080078b9 	.word	0x080078b9
 80078b0:	08007a69 	.word	0x08007a69
 80078b4:	08007bf1 	.word	0x08007bf1

080078b8 <eMBMSerialRTUFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialRTUFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 80078b8:	b5b0      	push	{r4, r5, r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	0008      	movs	r0, r1
 80078c2:	0011      	movs	r1, r2
 80078c4:	1cfb      	adds	r3, r7, #3
 80078c6:	1c02      	adds	r2, r0, #0
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	003b      	movs	r3, r7
 80078cc:	1c0a      	adds	r2, r1, #0
 80078ce:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 80078d0:	2317      	movs	r3, #23
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	2202      	movs	r2, #2
 80078d6:	701a      	strb	r2, [r3, #0]
    USHORT          usCRC16;
    xMBMInternalHandle *pxIntHdl = xHdl;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_RTU,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) ucSlaveAddress, usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) &&
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d100      	bne.n	80078ea <eMBMSerialRTUFrameSend+0x32>
 80078e8:	e0b2      	b.n	8007a50 <eMBMSerialRTUFrameSend+0x198>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	001a      	movs	r2, r3
 80078f0:	0013      	movs	r3, r2
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	189b      	adds	r3, r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	189b      	adds	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4a58      	ldr	r2, [pc, #352]	; (8007a60 <eMBMSerialRTUFrameSend+0x1a8>)
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d000      	beq.n	8007908 <eMBMSerialRTUFrameSend+0x50>
 8007906:	e0a3      	b.n	8007a50 <eMBMSerialRTUFrameSend+0x198>
 8007908:	1cfb      	adds	r3, r7, #3
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d009      	beq.n	8007924 <eMBMSerialRTUFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 2 /* CRC16 */  ) ) ) )
 8007910:	1cfb      	adds	r3, r7, #3
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d100      	bne.n	800791a <eMBMSerialRTUFrameSend+0x62>
 8007918:	e09a      	b.n	8007a50 <eMBMSerialRTUFrameSend+0x198>
 800791a:	1cfb      	adds	r3, r7, #3
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2bf7      	cmp	r3, #247	; 0xf7
 8007920:	d900      	bls.n	8007924 <eMBMSerialRTUFrameSend+0x6c>
 8007922:	e095      	b.n	8007a50 <eMBMSerialRTUFrameSend+0x198>
 8007924:	003b      	movs	r3, r7
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	2bfd      	cmp	r3, #253	; 0xfd
 800792a:	d900      	bls.n	800792e <eMBMSerialRTUFrameSend+0x76>
 800792c:	e090      	b.n	8007a50 <eMBMSerialRTUFrameSend+0x198>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 800792e:	f000 fd04 	bl	800833a <vMBPEnterCritical>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) pxRTUHdl->eRcvState,
                             pxRTUHdl->usRcvBufferPos, ( USHORT ) pxRTUHdl->eSndState, pxRTUHdl->usSndBufferCnt );
            }
#endif
            MBP_ASSERT( MBM_STATE_TX_IDLE == pxRTUHdl->eSndState );
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	2382      	movs	r3, #130	; 0x82
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	5cd3      	ldrb	r3, [r2, r3]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <eMBMSerialRTUFrameSend+0x8c>
 8007940:	f000 fce8 	bl	8008314 <vMBPAssert>
            MBP_EXIT_CRITICAL_SECTION(  );
 8007944:	f000 fd00 	bl	8008348 <vMBPExitCritical>

            /* Added the MODBUS RTU header (= slave address) */
            pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	1cfa      	adds	r2, r7, #3
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt = 1;
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	2383      	movs	r3, #131	; 0x83
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2101      	movs	r1, #1
 8007958:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxRTUHdl->usSndBufferCnt += usMBPDULength;
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	2383      	movs	r3, #131	; 0x83
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	5ad3      	ldrh	r3, [r2, r3]
 8007962:	b29a      	uxth	r2, r3
 8007964:	003b      	movs	r3, r7
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	18d3      	adds	r3, r2, r3
 800796a:	b299      	uxth	r1, r3
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	2383      	movs	r3, #131	; 0x83
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	52d1      	strh	r1, [r2, r3]

            usCRC16 = usMBMCRC16( ( const UBYTE * )&pxRTUHdl->ubRTUFrameBuffer[0], pxRTUHdl->usSndBufferCnt );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	1c58      	adds	r0, r3, #1
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	2383      	movs	r3, #131	; 0x83
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	5ad3      	ldrh	r3, [r2, r3]
 8007980:	b29b      	uxth	r3, r3
 8007982:	250a      	movs	r5, #10
 8007984:	197c      	adds	r4, r7, r5
 8007986:	0019      	movs	r1, r3
 8007988:	f7ff fcae 	bl	80072e8 <usMBMCRC16>
 800798c:	0003      	movs	r3, r0
 800798e:	8023      	strh	r3, [r4, #0]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 & 0xFFU );
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	2383      	movs	r3, #131	; 0x83
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	5ad3      	ldrh	r3, [r2, r3]
 8007998:	b29b      	uxth	r3, r3
 800799a:	0019      	movs	r1, r3
 800799c:	0028      	movs	r0, r5
 800799e:	183b      	adds	r3, r7, r0
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	185b      	adds	r3, r3, r1
 80079a8:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	2383      	movs	r3, #131	; 0x83
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	5ad3      	ldrh	r3, [r2, r3]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3301      	adds	r3, #1
 80079b6:	b299      	uxth	r1, r3
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	2383      	movs	r3, #131	; 0x83
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	52d1      	strh	r1, [r2, r3]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 >> 8U );
 80079c0:	183b      	adds	r3, r7, r0
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	b298      	uxth	r0, r3
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	2383      	movs	r3, #131	; 0x83
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	5ad3      	ldrh	r3, [r2, r3]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	0019      	movs	r1, r3
 80079d4:	b2c2      	uxtb	r2, r0
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	185b      	adds	r3, r3, r1
 80079da:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	2383      	movs	r3, #131	; 0x83
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	5ad3      	ldrh	r3, [r2, r3]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3301      	adds	r3, #1
 80079e8:	b299      	uxth	r1, r3
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	2383      	movs	r3, #131	; 0x83
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 80079f2:	f000 fca2 	bl	800833a <vMBPEnterCritical>
            pxRTUHdl->eSndState = MBM_STATE_TX_XMIT;
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	2382      	movs	r3, #130	; 0x82
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	2101      	movs	r1, #1
 80079fe:	54d1      	strb	r1, [r2, r3]
            pxRTUHdl->pubSndBufferCur = ( UBYTE * ) & pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	2384      	movs	r3, #132	; 0x84
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	50d1      	str	r1, [r2, r3]
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV2CB ) ) )
            {
                HDL_RESET_TX( pxRTUHdl );
            }
#elif MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV1CB ) ) )
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	2388      	movs	r3, #136	; 0x88
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	58d3      	ldr	r3, [r2, r3]
 8007a14:	2517      	movs	r5, #23
 8007a16:	197c      	adds	r4, r7, r5
 8007a18:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <eMBMSerialRTUFrameSend+0x1ac>)
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f001 f823 	bl	8008a68 <eMBPSerialTxEnable>
 8007a22:	0003      	movs	r3, r0
 8007a24:	7023      	strb	r3, [r4, #0]
 8007a26:	197b      	adds	r3, r7, r5
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <eMBMSerialRTUFrameSend+0x194>
            {
                HDL_RESET_TX( pxRTUHdl );
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	2382      	movs	r3, #130	; 0x82
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	2100      	movs	r1, #0
 8007a36:	54d1      	strb	r1, [r2, r3]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	2383      	movs	r3, #131	; 0x83
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2100      	movs	r1, #0
 8007a40:	52d1      	strh	r1, [r2, r3]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	2384      	movs	r3, #132	; 0x84
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	2100      	movs	r1, #0
 8007a4a:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 8007a4c:	f000 fc7c 	bl	8008348 <vMBPExitCritical>
        }
    }
    return eStatus;
 8007a50:	2317      	movs	r3, #23
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	781b      	ldrb	r3, [r3, #0]
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b006      	add	sp, #24
 8007a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	2000149c 	.word	0x2000149c
 8007a64:	08007ead 	.word	0x08007ead

08007a68 <eMBMSerialRTUFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 8007a68:	b5b0      	push	{r4, r5, r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	200b      	movs	r0, #11
 8007a74:	183b      	adds	r3, r7, r0
 8007a76:	1c0a      	adds	r2, r1, #0
 8007a78:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8007a7a:	241f      	movs	r4, #31
 8007a7c:	193b      	adds	r3, r7, r4
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d100      	bne.n	8007a94 <eMBMSerialRTUFrameReceive+0x2c>
 8007a92:	e0a4      	b.n	8007bde <eMBMSerialRTUFrameReceive+0x176>
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	001a      	movs	r2, r3
 8007a9a:	0013      	movs	r3, r2
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	189b      	adds	r3, r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a51      	ldr	r2, [pc, #324]	; (8007bec <eMBMSerialRTUFrameReceive+0x184>)
 8007aa8:	189b      	adds	r3, r3, r2
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d000      	beq.n	8007ab2 <eMBMSerialRTUFrameReceive+0x4a>
 8007ab0:	e095      	b.n	8007bde <eMBMSerialRTUFrameReceive+0x176>
 8007ab2:	183b      	adds	r3, r7, r0
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d100      	bne.n	8007abc <eMBMSerialRTUFrameReceive+0x54>
 8007aba:	e090      	b.n	8007bde <eMBMSerialRTUFrameReceive+0x176>
 8007abc:	183b      	adds	r3, r7, r0
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2bf7      	cmp	r3, #247	; 0xf7
 8007ac2:	d900      	bls.n	8007ac6 <eMBMSerialRTUFrameReceive+0x5e>
 8007ac4:	e08b      	b.n	8007bde <eMBMSerialRTUFrameReceive+0x176>
        {

            if( NULL == pusMBPDULength )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02a      	beq.n	8007b22 <eMBMSerialRTUFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	2381      	movs	r3, #129	; 0x81
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	5ad3      	ldrh	r3, [r2, r3]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d91f      	bls.n	8007b1a <eMBMSerialRTUFrameReceive+0xb2>
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	b2db      	uxtb	r3, r3
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8007ae0:	183a      	adds	r2, r7, r0
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d118      	bne.n	8007b1a <eMBMSerialRTUFrameReceive+0xb2>
                     ( usMBMCRC16( ( UBYTE * ) & ( pxRTUHdl->ubRTUFrameBuffer[0] ), pxRTUHdl->usRcvBufferPos ) == 0 ) )
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	1c58      	adds	r0, r3, #1
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	2381      	movs	r3, #129	; 0x81
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	5ad3      	ldrh	r3, [r2, r3]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	0019      	movs	r1, r3
 8007af8:	f7ff fbf6 	bl	80072e8 <usMBMCRC16>
 8007afc:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8007afe:	d10c      	bne.n	8007b1a <eMBMSerialRTUFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxRTUHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_CRC ) );
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	2381      	movs	r3, #129	; 0x81
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	5ad3      	ldrh	r3, [r2, r3]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b03      	subs	r3, #3
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	801a      	strh	r2, [r3, #0]
                xAnalyzerFrame.eFrameType = MB_FRAME_RTU;
                xAnalyzerFrame.x.xRTUHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xRTUHeader.usCRC16 = pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 1];
                xAnalyzerFrame.x.xRTUHeader.usCRC16 |= ( USHORT ) ( pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 2] << 8U );
#endif
                eStatus = MB_ENOERR;
 8007b12:	193b      	adds	r3, r7, r4
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	e003      	b.n	8007b22 <eMBMSerialRTUFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 8007b1a:	231f      	movs	r3, #31
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	2205      	movs	r2, #5
 8007b20:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 8007b22:	f000 fc0a 	bl	800833a <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	2388      	movs	r3, #136	; 0x88
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	58d3      	ldr	r3, [r2, r3]
 8007b2e:	2513      	movs	r5, #19
 8007b30:	197c      	adds	r4, r7, r5
 8007b32:	2100      	movs	r1, #0
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 ff97 	bl	8008a68 <eMBPSerialTxEnable>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	7023      	strb	r3, [r4, #0]
 8007b3e:	002a      	movs	r2, r5
 8007b40:	18bb      	adds	r3, r7, r2
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <eMBMSerialRTUFrameReceive+0xea>
            {
                eStatus = eStatus2;
 8007b48:	231f      	movs	r3, #31
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	18ba      	adds	r2, r7, r2
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	2388      	movs	r3, #136	; 0x88
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	58d3      	ldr	r3, [r2, r3]
 8007b5a:	2513      	movs	r5, #19
 8007b5c:	197c      	adds	r4, r7, r5
 8007b5e:	2100      	movs	r1, #0
 8007b60:	0018      	movs	r0, r3
 8007b62:	f001 f849 	bl	8008bf8 <eMBPSerialRxEnable>
 8007b66:	0003      	movs	r3, r0
 8007b68:	7023      	strb	r3, [r4, #0]
 8007b6a:	002a      	movs	r2, r5
 8007b6c:	18bb      	adds	r3, r7, r2
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <eMBMSerialRTUFrameReceive+0x116>
            {
                eStatus = eStatus2;
 8007b74:	231f      	movs	r3, #31
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	18ba      	adds	r2, r7, r2
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	701a      	strb	r2, [r3, #0]
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrHdl ) ) )
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	2386      	movs	r3, #134	; 0x86
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	58d3      	ldr	r3, [r2, r3]
 8007b86:	2513      	movs	r5, #19
 8007b88:	197c      	adds	r4, r7, r5
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f000 fd1c 	bl	80085c8 <eMBPTimerStop>
 8007b90:	0003      	movs	r3, r0
 8007b92:	7023      	strb	r3, [r4, #0]
 8007b94:	002a      	movs	r2, r5
 8007b96:	18bb      	adds	r3, r7, r2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <eMBMSerialRTUFrameReceive+0x140>
            {
                eStatus = eStatus2;
 8007b9e:	231f      	movs	r3, #31
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	18ba      	adds	r2, r7, r2
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrWaitHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxRTUHdl );
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	2382      	movs	r3, #130	; 0x82
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	2100      	movs	r1, #0
 8007bb0:	54d1      	strb	r1, [r2, r3]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	2383      	movs	r3, #131	; 0x83
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	2100      	movs	r1, #0
 8007bba:	52d1      	strh	r1, [r2, r3]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	2384      	movs	r3, #132	; 0x84
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxRTUHdl );
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	2302      	movs	r3, #2
 8007bca:	33ff      	adds	r3, #255	; 0xff
 8007bcc:	2100      	movs	r1, #0
 8007bce:	54d1      	strb	r1, [r2, r3]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	2381      	movs	r3, #129	; 0x81
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	52d1      	strh	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 8007bda:	f000 fbb5 	bl	8008348 <vMBPExitCritical>
        }
    }

    return eStatus;
 8007bde:	231f      	movs	r3, #31
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	781b      	ldrb	r3, [r3, #0]
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b008      	add	sp, #32
 8007bea:	bdb0      	pop	{r4, r5, r7, pc}
 8007bec:	2000149c 	.word	0x2000149c

08007bf0 <eMBMSerialRTUFrameClose>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameClose( xMBHandle xHdl )
{
 8007bf0:	b5b0      	push	{r4, r5, r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8007bf8:	210f      	movs	r1, #15
 8007bfa:	187b      	adds	r3, r7, r1
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialRTUFrameCloseInternal( ( xMBMRTUFrameHandle * ) pxIntHdl->xFrameHdl );
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	000d      	movs	r5, r1
 8007c0a:	187c      	adds	r4, r7, r1
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f000 f808 	bl	8007c22 <eMBMSerialRTUFrameCloseInternal>
 8007c12:	0003      	movs	r3, r0
 8007c14:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 8007c16:	197b      	adds	r3, r7, r5
 8007c18:	781b      	ldrb	r3, [r3, #0]
}
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b004      	add	sp, #16
 8007c20:	bdb0      	pop	{r4, r5, r7, pc}

08007c22 <eMBMSerialRTUFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameCloseInternal( xMBMRTUFrameHandle * pxRTUHdl )
{
 8007c22:	b590      	push	{r4, r7, lr}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8007c2a:	240f      	movs	r4, #15
 8007c2c:	193b      	adds	r3, r7, r4
 8007c2e:	2202      	movs	r2, #2
 8007c30:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 8007c32:	f000 fb82 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = MB_ENOERR;
 8007c36:	193b      	adds	r3, r7, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
        if( MBP_SERIALHDL_INVALID != pxRTUHdl->xSerHdl )
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	2388      	movs	r3, #136	; 0x88
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	58d3      	ldr	r3, [r2, r3]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d04c      	beq.n	8007ce2 <eMBMSerialRTUFrameCloseInternal+0xc0>
        {
            if( MB_ENOERR != eMBPSerialClose( pxRTUHdl->xSerHdl ) )
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	2388      	movs	r3, #136	; 0x88
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	58d3      	ldr	r3, [r2, r3]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 feb3 	bl	80089bc <eMBPSerialClose>
 8007c56:	1e03      	subs	r3, r0, #0
 8007c58:	d003      	beq.n	8007c62 <eMBMSerialRTUFrameCloseInternal+0x40>
            {
                eStatus = MB_EPORTERR;
 8007c5a:	193b      	adds	r3, r7, r4
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	701a      	strb	r2, [r3, #0]
 8007c60:	e079      	b.n	8007d56 <eMBMSerialRTUFrameCloseInternal+0x134>
            }
            else
            {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrHdl )
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	2386      	movs	r3, #134	; 0x86
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	58d3      	ldr	r3, [r2, r3]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d006      	beq.n	8007c7c <eMBMSerialRTUFrameCloseInternal+0x5a>
                {
                    vMBPTimerClose( pxRTUHdl->xTmrHdl );
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	2386      	movs	r3, #134	; 0x86
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	58d3      	ldr	r3, [r2, r3]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f000 fc46 	bl	8008508 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrWaitHdl )
                {
                    vMBPTimerClose( pxRTUHdl->xTmrWaitHdl );
                }
#endif
                HDL_RESET( pxRTUHdl );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	22ff      	movs	r2, #255	; 0xff
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	2302      	movs	r3, #2
 8007c86:	33ff      	adds	r3, #255	; 0xff
 8007c88:	2100      	movs	r1, #0
 8007c8a:	54d1      	strb	r1, [r2, r3]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	2381      	movs	r3, #129	; 0x81
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	2100      	movs	r1, #0
 8007c94:	52d1      	strh	r1, [r2, r3]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	2382      	movs	r3, #130	; 0x82
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	54d1      	strb	r1, [r2, r3]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	2383      	movs	r3, #131	; 0x83
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	52d1      	strh	r1, [r2, r3]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	2384      	movs	r3, #132	; 0x84
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	50d1      	str	r1, [r2, r3]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	2386      	movs	r3, #134	; 0x86
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2100      	movs	r1, #0
 8007cbc:	50d1      	str	r1, [r2, r3]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	2388      	movs	r3, #136	; 0x88
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	50d1      	str	r1, [r2, r3]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	2280      	movs	r2, #128	; 0x80
 8007cce:	0052      	lsls	r2, r2, #1
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f001 f80f 	bl	8008cf6 <memset>
                eStatus = MB_ENOERR;
 8007cd8:	230f      	movs	r3, #15
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e039      	b.n	8007d56 <eMBMSerialRTUFrameCloseInternal+0x134>
            }
        }
        else
        {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrHdl );
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	2386      	movs	r3, #134	; 0x86
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	58d3      	ldr	r3, [r2, r3]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <eMBMSerialRTUFrameCloseInternal+0xd0>
 8007cee:	f000 fb11 	bl	8008314 <vMBPAssert>
#endif
#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrWaitHdl );
#endif
            HDL_RESET( pxRTUHdl );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	33ff      	adds	r3, #255	; 0xff
 8007cfe:	2100      	movs	r1, #0
 8007d00:	54d1      	strb	r1, [r2, r3]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	2381      	movs	r3, #129	; 0x81
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	2100      	movs	r1, #0
 8007d0a:	52d1      	strh	r1, [r2, r3]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	2382      	movs	r3, #130	; 0x82
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	2100      	movs	r1, #0
 8007d14:	54d1      	strb	r1, [r2, r3]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	2383      	movs	r3, #131	; 0x83
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	52d1      	strh	r1, [r2, r3]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	2384      	movs	r3, #132	; 0x84
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	2100      	movs	r1, #0
 8007d28:	50d1      	str	r1, [r2, r3]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	2386      	movs	r3, #134	; 0x86
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	2100      	movs	r1, #0
 8007d32:	50d1      	str	r1, [r2, r3]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	2388      	movs	r3, #136	; 0x88
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	50d1      	str	r1, [r2, r3]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3301      	adds	r3, #1
 8007d42:	2280      	movs	r2, #128	; 0x80
 8007d44:	0052      	lsls	r2, r2, #1
 8007d46:	2100      	movs	r1, #0
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f000 ffd4 	bl	8008cf6 <memset>
            eStatus = MB_ENOERR;
 8007d4e:	230f      	movs	r3, #15
 8007d50:	18fb      	adds	r3, r7, r3
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8007d56:	f000 faf7 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8007d5a:	230f      	movs	r3, #15
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	781b      	ldrb	r3, [r3, #0]
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b005      	add	sp, #20
 8007d66:	bd90      	pop	{r4, r7, pc}

08007d68 <bMBMSerialRTUReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
bMBMSerialRTUReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 8007d68:	b5b0      	push	{r4, r5, r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	000a      	movs	r2, r1
 8007d72:	1cfb      	adds	r3, r7, #3
 8007d74:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	617b      	str	r3, [r7, #20]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    ( void )eStatus;
    MBP_ENTER_CRITICAL_SECTION(  );
 8007d7a:	f000 fade 	bl	800833a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	613b      	str	r3, [r7, #16]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	2382      	movs	r3, #130	; 0x82
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	5cd3      	ldrb	r3, [r2, r3]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <bMBMSerialRTUReceiverAPIV1CB+0x2e>
 8007d92:	f000 fabf 	bl	8008314 <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	33ff      	adds	r3, #255	; 0xff
 8007d9c:	5cd3      	ldrb	r3, [r2, r3]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <bMBMSerialRTUReceiverAPIV1CB+0x42>
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d021      	beq.n	8007dec <bMBMSerialRTUReceiverAPIV1CB+0x84>
 8007da8:	e044      	b.n	8007e34 <bMBMSerialRTUReceiverAPIV1CB+0xcc>
    {
    case MBM_STATE_RX_IDLE:
#if defined(__18CXX)
        pxRTUFrameHdl->usRcvBufferPos &= 0;
#else
        pxRTUFrameHdl->usRcvBufferPos = 0;
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	2381      	movs	r3, #129	; 0x81
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	2100      	movs	r1, #0
 8007db2:	52d1      	strh	r1, [r2, r3]
#endif
        pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	2381      	movs	r3, #129	; 0x81
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	5ad3      	ldrh	r3, [r2, r3]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	001a      	movs	r2, r3
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	189b      	adds	r3, r3, r2
 8007dc4:	1cfa      	adds	r2, r7, #3
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	705a      	strb	r2, [r3, #1]
        pxRTUFrameHdl->usRcvBufferPos++;
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	2381      	movs	r3, #129	; 0x81
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	5ad3      	ldrh	r3, [r2, r3]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	b299      	uxth	r1, r3
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	2381      	movs	r3, #129	; 0x81
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	52d1      	strh	r1, [r2, r3]
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_RCV;
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	2302      	movs	r3, #2
 8007de4:	33ff      	adds	r3, #255	; 0xff
 8007de6:	2101      	movs	r1, #1
 8007de8:	54d1      	strb	r1, [r2, r3]

        break;
 8007dea:	e029      	b.n	8007e40 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    case MBM_STATE_RX_RCV:
        if( pxRTUFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	2381      	movs	r3, #129	; 0x81
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	5ad3      	ldrh	r3, [r2, r3]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2bff      	cmp	r3, #255	; 0xff
 8007df8:	d816      	bhi.n	8007e28 <bMBMSerialRTUReceiverAPIV1CB+0xc0>
        {
            pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	2381      	movs	r3, #129	; 0x81
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	5ad3      	ldrh	r3, [r2, r3]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	001a      	movs	r2, r3
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	189b      	adds	r3, r3, r2
 8007e0a:	1cfa      	adds	r2, r7, #3
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	705a      	strb	r2, [r3, #1]
            pxRTUFrameHdl->usRcvBufferPos++;
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	2381      	movs	r3, #129	; 0x81
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	5ad3      	ldrh	r3, [r2, r3]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b299      	uxth	r1, r3
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	2381      	movs	r3, #129	; 0x81
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	52d1      	strh	r1, [r2, r3]
        }
        else
        {
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
        }
        break;
 8007e26:	e00b      	b.n	8007e40 <bMBMSerialRTUReceiverAPIV1CB+0xd8>
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	33ff      	adds	r3, #255	; 0xff
 8007e2e:	2102      	movs	r1, #2
 8007e30:	54d1      	strb	r1, [r2, r3]
        break;
 8007e32:	e005      	b.n	8007e40 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    default:
    case MBM_STATE_RX_ERROR:
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	2302      	movs	r3, #2
 8007e38:	33ff      	adds	r3, #255	; 0xff
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	54d1      	strb	r1, [r2, r3]
        break;
 8007e3e:	46c0      	nop			; (mov r8, r8)
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif

#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
#if MBM_TEST_DISABLE_RTU_TIMEOUTS != 1
    if( MB_ENOERR != eMBPTimerStart( pxRTUFrameHdl->xTmrHdl ) )
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	2386      	movs	r3, #134	; 0x86
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	58d3      	ldr	r3, [r2, r3]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 fb85 	bl	8008558 <eMBPTimerStart>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d026      	beq.n	8007ea0 <bMBMSerialRTUReceiverAPIV1CB+0x138>
    {
        /* We can only abort here because or timers failed. */
        eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	2388      	movs	r3, #136	; 0x88
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	58d3      	ldr	r3, [r2, r3]
 8007e5a:	250f      	movs	r5, #15
 8007e5c:	197c      	adds	r4, r7, r5
 8007e5e:	2100      	movs	r1, #0
 8007e60:	0018      	movs	r0, r3
 8007e62:	f000 fec9 	bl	8008bf8 <eMBPSerialRxEnable>
 8007e66:	0003      	movs	r3, r0
 8007e68:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8007e6a:	197b      	adds	r3, r7, r5
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <bMBMSerialRTUReceiverAPIV1CB+0x10e>
 8007e72:	f000 fa4f 	bl	8008314 <vMBPAssert>
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	250f      	movs	r5, #15
 8007e7c:	197c      	adds	r4, r7, r5
 8007e7e:	2104      	movs	r1, #4
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f9c7 	bl	8008214 <eMBPEventPost>
 8007e86:	0003      	movs	r3, r0
 8007e88:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8007e8a:	197b      	adds	r3, r7, r5
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <bMBMSerialRTUReceiverAPIV1CB+0x12e>
 8007e92:	f000 fa3f 	bl	8008314 <vMBPAssert>
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	33ff      	adds	r3, #255	; 0xff
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	54d1      	strb	r1, [r2, r3]
    }
#endif
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 8007ea0:	f000 fa52 	bl	8008348 <vMBPExitCritical>
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b006      	add	sp, #24
 8007eaa:	bdb0      	pop	{r4, r5, r7, pc}

08007eac <bMBMSerialRTUTransmitterEmptyAPIV1CB>:


STATIC          BOOL
bMBMSerialRTUTransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 8007eac:	b5b0      	push	{r4, r5, r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 8007eb6:	2317      	movs	r3, #23
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 8007ebe:	2316      	movs	r3, #22
 8007ec0:	18fb      	adds	r3, r7, r3
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 8007eca:	f000 fa36 	bl	800833a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eRcvState == MBM_STATE_RX_IDLE );
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	33ff      	adds	r3, #255	; 0xff
 8007eda:	5cd3      	ldrb	r3, [r2, r3]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x3a>
 8007ee2:	f000 fa17 	bl	8008314 <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_XMIT );
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	2382      	movs	r3, #130	; 0x82
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	5cd3      	ldrb	r3, [r2, r3]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d001      	beq.n	8007ef8 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x4c>
 8007ef4:	f000 fa0e 	bl	8008314 <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->pubSndBufferCur != NULL );
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	2384      	movs	r3, #132	; 0x84
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	58d3      	ldr	r3, [r2, r3]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x5c>
 8007f04:	f000 fa06 	bl	8008314 <vMBPAssert>

    switch ( pxRTUFrameHdl->eSndState )
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	2382      	movs	r3, #130	; 0x82
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	5cd3      	ldrb	r3, [r2, r3]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d141      	bne.n	8007f9a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xee>
         * to a broadcast we are done. This is handled by delivering an
         * MBM_EV_SENT event to the main state machine. Otherwise we enable
         * the receiver or abort using an error.
         */
    case MBM_STATE_TX_XMIT:
        if( pxRTUFrameHdl->usSndBufferCnt > 0 )
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	2383      	movs	r3, #131	; 0x83
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	5ad3      	ldrh	r3, [r2, r3]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01f      	beq.n	8007f64 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xb8>
        {
            *pubValue = *( pxRTUFrameHdl->pubSndBufferCur );
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	2384      	movs	r3, #132	; 0x84
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	58d3      	ldr	r3, [r2, r3]
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
            pxRTUFrameHdl->pubSndBufferCur++;
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	2384      	movs	r3, #132	; 0x84
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	58d3      	ldr	r3, [r2, r3]
 8007f3a:	1c59      	adds	r1, r3, #1
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	2384      	movs	r3, #132	; 0x84
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	50d1      	str	r1, [r2, r3]
            pxRTUFrameHdl->usSndBufferCnt--;
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	2383      	movs	r3, #131	; 0x83
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	5ad3      	ldrh	r3, [r2, r3]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b299      	uxth	r1, r3
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	2383      	movs	r3, #131	; 0x83
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	52d1      	strh	r1, [r2, r3]
            bMoreTXData = TRUE;
 8007f5a:	2317      	movs	r3, #23
 8007f5c:	18fb      	adds	r3, r7, r3
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
            else
            {
                bEnableRx = TRUE;
            }
        }
        break;
 8007f62:	e02b      	b.n	8007fbc <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
            if( MB_SER_BROADCAST_ADDR == pxRTUFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xe4>
                eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SENT );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	250b      	movs	r5, #11
 8007f74:	197c      	adds	r4, r7, r5
 8007f76:	2105      	movs	r1, #5
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f000 f94b 	bl	8008214 <eMBPEventPost>
 8007f7e:	0003      	movs	r3, r0
 8007f80:	7023      	strb	r3, [r4, #0]
                MBP_ASSERT( MB_ENOERR == eStatus );
 8007f82:	197b      	adds	r3, r7, r5
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
 8007f8a:	f000 f9c3 	bl	8008314 <vMBPAssert>
        break;
 8007f8e:	e015      	b.n	8007fbc <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
                bEnableRx = TRUE;
 8007f90:	2316      	movs	r3, #22
 8007f92:	18fb      	adds	r3, r7, r3
 8007f94:	2201      	movs	r2, #1
 8007f96:	701a      	strb	r2, [r3, #0]
        break;
 8007f98:	e010      	b.n	8007fbc <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>

        /* Default case which aborts the transmitter. */
    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	250b      	movs	r5, #11
 8007fa0:	197c      	adds	r4, r7, r5
 8007fa2:	2106      	movs	r1, #6
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f000 f935 	bl	8008214 <eMBPEventPost>
 8007faa:	0003      	movs	r3, r0
 8007fac:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8007fae:	197b      	adds	r3, r7, r5
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
 8007fb6:	f000 f9ad 	bl	8008314 <vMBPAssert>
        break;
 8007fba:	e001      	b.n	8007fc0 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
        break;
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	e000      	b.n	8007fc2 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x116>
        break;
 8007fc0:	46c0      	nop			; (mov r8, r8)
    }
    if( !bMoreTXData )
 8007fc2:	2317      	movs	r3, #23
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10e      	bne.n	8007fea <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x13e>
    {
        HDL_RESET_TX( pxRTUFrameHdl );
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	2382      	movs	r3, #130	; 0x82
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	54d1      	strb	r1, [r2, r3]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	2383      	movs	r3, #131	; 0x83
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	2100      	movs	r1, #0
 8007fde:	52d1      	strh	r1, [r2, r3]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	2384      	movs	r3, #132	; 0x84
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 8007fea:	2316      	movs	r3, #22
 8007fec:	18fb      	adds	r3, r7, r3
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01a      	beq.n	800802a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else
        if( MB_ENOERR != eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) bMBMSerialRTUReceiverAPIV1CB ) )
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	2388      	movs	r3, #136	; 0x88
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	58d3      	ldr	r3, [r2, r3]
 8007ffc:	4a0f      	ldr	r2, [pc, #60]	; (800803c <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x190>)
 8007ffe:	0011      	movs	r1, r2
 8008000:	0018      	movs	r0, r3
 8008002:	f000 fdf9 	bl	8008bf8 <eMBPSerialRxEnable>
 8008006:	1e03      	subs	r3, r0, #0
 8008008:	d00f      	beq.n	800802a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	250b      	movs	r5, #11
 8008010:	197c      	adds	r4, r7, r5
 8008012:	2106      	movs	r1, #6
 8008014:	0018      	movs	r0, r3
 8008016:	f000 f8fd 	bl	8008214 <eMBPEventPost>
 800801a:	0003      	movs	r3, r0
 800801c:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800801e:	197b      	adds	r3, r7, r5
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
 8008026:	f000 f975 	bl	8008314 <vMBPAssert>
        }
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800802a:	f000 f98d 	bl	8008348 <vMBPExitCritical>
    return bMoreTXData;
 800802e:	2317      	movs	r3, #23
 8008030:	18fb      	adds	r3, r7, r3
 8008032:	781b      	ldrb	r3, [r3, #0]
}
 8008034:	0018      	movs	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	b006      	add	sp, #24
 800803a:	bdb0      	pop	{r4, r5, r7, pc}
 800803c:	08007d69 	.word	0x08007d69

08008040 <bMBMSerialRTUT35CB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialRTUT35CB( xMBHandle xHdl )
{
 8008040:	b5b0      	push	{r4, r5, r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 8008048:	2317      	movs	r3, #23
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 8008054:	f000 f971 	bl	800833a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	2382      	movs	r3, #130	; 0x82
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	5cd3      	ldrb	r3, [r2, r3]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <bMBMSerialRTUT35CB+0x30>
 800806c:	f000 f952 	bl	8008314 <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	2302      	movs	r3, #2
 8008074:	33ff      	adds	r3, #255	; 0xff
 8008076:	5cd3      	ldrb	r3, [r2, r3]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d110      	bne.n	80080a0 <bMBMSerialRTUT35CB+0x60>
    {
    case MBM_STATE_RX_RCV:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	250b      	movs	r5, #11
 8008084:	197c      	adds	r4, r7, r5
 8008086:	2103      	movs	r1, #3
 8008088:	0018      	movs	r0, r3
 800808a:	f000 f8c3 	bl	8008214 <eMBPEventPost>
 800808e:	0003      	movs	r3, r0
 8008090:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8008092:	197b      	adds	r3, r7, r5
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d013      	beq.n	80080c2 <bMBMSerialRTUT35CB+0x82>
 800809a:	f000 f93b 	bl	8008314 <vMBPAssert>
        break;
 800809e:	e010      	b.n	80080c2 <bMBMSerialRTUT35CB+0x82>

    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	250b      	movs	r5, #11
 80080a6:	197c      	adds	r4, r7, r5
 80080a8:	2104      	movs	r1, #4
 80080aa:	0018      	movs	r0, r3
 80080ac:	f000 f8b2 	bl	8008214 <eMBPEventPost>
 80080b0:	0003      	movs	r3, r0
 80080b2:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 80080b4:	197b      	adds	r3, r7, r5
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <bMBMSerialRTUT35CB+0x84>
 80080bc:	f000 f92a 	bl	8008314 <vMBPAssert>
 80080c0:	e000      	b.n	80080c4 <bMBMSerialRTUT35CB+0x84>
        break;
 80080c2:	46c0      	nop			; (mov r8, r8)
    }
    pxRTUFrameHdl->eRcvState = MBM_STATE_RX_IDLE;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	2302      	movs	r3, #2
 80080c8:	33ff      	adds	r3, #255	; 0xff
 80080ca:	2100      	movs	r1, #0
 80080cc:	54d1      	strb	r1, [r2, r3]
    /* Disable the receive and the timers after a timeout. */
    eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	2388      	movs	r3, #136	; 0x88
 80080d2:	005b      	lsls	r3, r3, #1
 80080d4:	58d3      	ldr	r3, [r2, r3]
 80080d6:	250b      	movs	r5, #11
 80080d8:	197c      	adds	r4, r7, r5
 80080da:	2100      	movs	r1, #0
 80080dc:	0018      	movs	r0, r3
 80080de:	f000 fd8b 	bl	8008bf8 <eMBPSerialRxEnable>
 80080e2:	0003      	movs	r3, r0
 80080e4:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 80080e6:	197b      	adds	r3, r7, r5
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <bMBMSerialRTUT35CB+0xb2>
 80080ee:	f000 f911 	bl	8008314 <vMBPAssert>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
    eStatus = eMBPTimerStop( pxRTUFrameHdl->xTmrHdl );
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	2386      	movs	r3, #134	; 0x86
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	58d3      	ldr	r3, [r2, r3]
 80080fa:	250b      	movs	r5, #11
 80080fc:	197c      	adds	r4, r7, r5
 80080fe:	0018      	movs	r0, r3
 8008100:	f000 fa62 	bl	80085c8 <eMBPTimerStop>
 8008104:	0003      	movs	r3, r0
 8008106:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 8008108:	197b      	adds	r3, r7, r5
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <bMBMSerialRTUT35CB+0xd4>
 8008110:	f000 f900 	bl	8008314 <vMBPAssert>
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 8008114:	f000 f918 	bl	8008348 <vMBPExitCritical>
    return bNeedCtxSwitch;
 8008118:	2317      	movs	r3, #23
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	781b      	ldrb	r3, [r3, #0]
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b006      	add	sp, #24
 8008124:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008128 <eMBPEventCreate>:
/* ----------------------- Start implementation -----------------------------*/


eMBErrorCode
eMBPEventCreate( xMBPEventHandle * pxEventHdl )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008130:	230f      	movs	r3, #15
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	2202      	movs	r2, #2
 8008136:	701a      	strb	r2, [r3, #0]
    UBYTE           i;

    if( NULL != pxEventHdl )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d05e      	beq.n	80081fc <eMBPEventCreate+0xd4>
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800813e:	f000 f8fc 	bl	800833a <vMBPEnterCritical>
        if( !bIsInitialized )
 8008142:	4b32      	ldr	r3, [pc, #200]	; (800820c <eMBPEventCreate+0xe4>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d121      	bne.n	800818e <eMBPEventCreate+0x66>
        {
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800814a:	230e      	movs	r3, #14
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e014      	b.n	800817e <eMBPEventCreate+0x56>
            {
                HDL_RESET( &arxEventHdls[i] );
 8008154:	200e      	movs	r0, #14
 8008156:	183b      	adds	r3, r7, r0
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	4b2d      	ldr	r3, [pc, #180]	; (8008210 <eMBPEventCreate+0xe8>)
 800815c:	0052      	lsls	r2, r2, #1
 800815e:	21ff      	movs	r1, #255	; 0xff
 8008160:	54d1      	strb	r1, [r2, r3]
 8008162:	0001      	movs	r1, r0
 8008164:	187b      	adds	r3, r7, r1
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4a29      	ldr	r2, [pc, #164]	; (8008210 <eMBPEventCreate+0xe8>)
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	18d3      	adds	r3, r2, r3
 800816e:	3301      	adds	r3, #1
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 8008174:	187b      	adds	r3, r7, r1
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	187b      	adds	r3, r7, r1
 800817a:	3201      	adds	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	230e      	movs	r3, #14
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d9e5      	bls.n	8008154 <eMBPEventCreate+0x2c>
            }
            bIsInitialized = TRUE;
 8008188:	4b20      	ldr	r3, [pc, #128]	; (800820c <eMBPEventCreate+0xe4>)
 800818a:	2201      	movs	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
        }
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800818e:	230e      	movs	r3, #14
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e02a      	b.n	80081ee <eMBPEventCreate+0xc6>
        {
            if( IDX_INVALID == arxEventHdls[i].ubIdx )
 8008198:	210e      	movs	r1, #14
 800819a:	187b      	adds	r3, r7, r1
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <eMBPEventCreate+0xe8>)
 80081a0:	0052      	lsls	r2, r2, #1
 80081a2:	5cd3      	ldrb	r3, [r2, r3]
 80081a4:	2bff      	cmp	r3, #255	; 0xff
 80081a6:	d11c      	bne.n	80081e2 <eMBPEventCreate+0xba>
            {
                arxEventHdls[i].ubIdx = i;
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	4b18      	ldr	r3, [pc, #96]	; (8008210 <eMBPEventCreate+0xe8>)
 80081ae:	0052      	lsls	r2, r2, #1
 80081b0:	0008      	movs	r0, r1
 80081b2:	1879      	adds	r1, r7, r1
 80081b4:	7809      	ldrb	r1, [r1, #0]
 80081b6:	54d1      	strb	r1, [r2, r3]
                arxEventHdls[i].xType = EV_NONE;
 80081b8:	0001      	movs	r1, r0
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <eMBPEventCreate+0xe8>)
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	18d3      	adds	r3, r2, r3
 80081c4:	3301      	adds	r3, #1
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
                *pxEventHdl = &arxEventHdls[i];
 80081ca:	187b      	adds	r3, r7, r1
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	005a      	lsls	r2, r3, #1
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <eMBPEventCreate+0xe8>)
 80081d2:	18d2      	adds	r2, r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]
                eStatus = MB_ENOERR;
 80081d8:	230f      	movs	r3, #15
 80081da:	18fb      	adds	r3, r7, r3
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
                break;
 80081e0:	e00a      	b.n	80081f8 <eMBPEventCreate+0xd0>
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 80081e2:	210e      	movs	r1, #14
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	187b      	adds	r3, r7, r1
 80081ea:	3201      	adds	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	230e      	movs	r3, #14
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d9cf      	bls.n	8008198 <eMBPEventCreate+0x70>
            }
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 80081f8:	f000 f8a6 	bl	8008348 <vMBPExitCritical>
    }
    return eStatus;
 80081fc:	230f      	movs	r3, #15
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	781b      	ldrb	r3, [r3, #0]
}
 8008202:	0018      	movs	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	b004      	add	sp, #16
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	200016c4 	.word	0x200016c4
 8008210:	200016c8 	.word	0x200016c8

08008214 <eMBPEventPost>:

eMBErrorCode
eMBPEventPost( const xMBPEventHandle xEventHdl, xMBPEventType xEvent )
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	000a      	movs	r2, r1
 800821e:	1cfb      	adds	r3, r7, #3
 8008220:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008222:	240f      	movs	r4, #15
 8008224:	193b      	adds	r3, r7, r4
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800822e:	f000 f884 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <eMBPEventPost+0x42>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	005a      	lsls	r2, r3, #1
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <eMBPEventPost+0x54>)
 8008240:	18d3      	adds	r3, r2, r3
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	429a      	cmp	r2, r3
 8008246:	d106      	bne.n	8008256 <eMBPEventPost+0x42>
    {
        pxEventHdl->xType = xEvent;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	1cfa      	adds	r2, r7, #3
 800824c:	7812      	ldrb	r2, [r2, #0]
 800824e:	705a      	strb	r2, [r3, #1]
        eStatus = MB_ENOERR;
 8008250:	193b      	adds	r3, r7, r4
 8008252:	2200      	movs	r2, #0
 8008254:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008256:	f000 f877 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 800825a:	230f      	movs	r3, #15
 800825c:	18fb      	adds	r3, r7, r3
 800825e:	781b      	ldrb	r3, [r3, #0]
}
 8008260:	0018      	movs	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	b005      	add	sp, #20
 8008266:	bd90      	pop	{r4, r7, pc}
 8008268:	200016c8 	.word	0x200016c8

0800826c <bMBPEventGet>:

BOOL
bMBPEventGet( const xMBPEventHandle xEventHdl, xMBPEventType * pxEvent )
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
    BOOL            bEventInQueue = FALSE;
 8008276:	240f      	movs	r4, #15
 8008278:	193b      	adds	r3, r7, r4
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008282:	f000 f85a 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <bMBPEventGet+0x4c>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	005a      	lsls	r2, r3, #1
 8008292:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <bMBPEventGet+0x60>)
 8008294:	18d3      	adds	r3, r2, r3
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d10d      	bne.n	80082b8 <bMBPEventGet+0x4c>
    {
        if( EV_NONE != pxEventHdl->xType )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <bMBPEventGet+0x4c>
        {
            bEventInQueue = TRUE;
 80082a4:	193b      	adds	r3, r7, r4
 80082a6:	2201      	movs	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
            *pxEvent = pxEventHdl->xType;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	785a      	ldrb	r2, [r3, #1]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	701a      	strb	r2, [r3, #0]
            pxEventHdl->xType = EV_NONE;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	705a      	strb	r2, [r3, #1]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80082b8:	f000 f846 	bl	8008348 <vMBPExitCritical>
    return bEventInQueue;
 80082bc:	230f      	movs	r3, #15
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	781b      	ldrb	r3, [r3, #0]
}
 80082c2:	0018      	movs	r0, r3
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b005      	add	sp, #20
 80082c8:	bd90      	pop	{r4, r7, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	200016c8 	.word	0x200016c8

080082d0 <vMBPEventDelete>:

void
vMBPEventDelete( xMBPEventHandle xEventHdl )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    xEventInternalHandle *pxEventIntHdl = xEventHdl;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60fb      	str	r3, [r7, #12]

    MBP_ENTER_CRITICAL_SECTION(  );
 80082dc:	f000 f82d 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventIntHdl, arxEventHdls ) )
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <vMBPEventDelete+0x32>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	005a      	lsls	r2, r3, #1
 80082ec:	4b08      	ldr	r3, [pc, #32]	; (8008310 <vMBPEventDelete+0x40>)
 80082ee:	18d3      	adds	r3, r2, r3
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d105      	bne.n	8008302 <vMBPEventDelete+0x32>
    {
        HDL_RESET( pxEventIntHdl );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	22ff      	movs	r2, #255	; 0xff
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	705a      	strb	r2, [r3, #1]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008302:	f000 f821 	bl	8008348 <vMBPExitCritical>
}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b004      	add	sp, #16
 800830c:	bd80      	pop	{r7, pc}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	200016c8 	.word	0x200016c8

08008314 <vMBPAssert>:
    vMBPAssert(  );
}

void
vMBPAssert( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
    volatile BOOL   bBreakOut = FALSE;
 800831a:	1dfb      	adds	r3, r7, #7
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]

    vMBPEnterCritical(  );
 8008320:	f000 f80b 	bl	800833a <vMBPEnterCritical>
    while( !bBreakOut );
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	1dfb      	adds	r3, r7, #7
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0fa      	beq.n	8008326 <vMBPAssert+0x12>
}
 8008330:	46c0      	nop			; (mov r8, r8)
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	46bd      	mov	sp, r7
 8008336:	b002      	add	sp, #8
 8008338:	bd80      	pop	{r7, pc}

0800833a <vMBPEnterCritical>:

void
vMBPEnterCritical( void )
{
 800833a:	b580      	push	{r7, lr}
 800833c:	af00      	add	r7, sp, #0
	portENTER_CRITICAL(  );
 800833e:	f7fd fbc7 	bl	8005ad0 <vPortEnterCritical>
	
}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <vMBPExitCritical>:

void
vMBPExitCritical( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
	portEXIT_CRITICAL(  );
 800834c:	f7fd fbd2 	bl	8005af4 <vPortExitCritical>
 
}
 8008350:	46c0      	nop			; (mov r8, r8)
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <eMBPTimerInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPTimerInit( xMBPTimerHandle * xTimerHdl, USHORT usTimeOut1ms,
               pbMBPTimerExpiredCB pbMBPTimerExpiredFN, xMBHandle xHdl )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	230a      	movs	r3, #10
 8008366:	18fb      	adds	r3, r7, r3
 8008368:	1c0a      	adds	r2, r1, #0
 800836a:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EPORTERR;
 800836c:	2317      	movs	r3, #23
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	2203      	movs	r2, #3
 8008372:	701a      	strb	r2, [r3, #0]
    UBYTE           ubIdx;


    MBP_ENTER_CRITICAL_SECTION(  );
 8008374:	f7ff ffe1 	bl	800833a <vMBPEnterCritical>
    if( ( NULL != xTimerHdl ) && ( NULL != pbMBPTimerExpiredFN ) && ( MB_HDL_INVALID != xHdl ) )
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d100      	bne.n	8008380 <eMBPTimerInit+0x28>
 800837e:	e0ac      	b.n	80084da <eMBPTimerInit+0x182>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d100      	bne.n	8008388 <eMBPTimerInit+0x30>
 8008386:	e0a8      	b.n	80084da <eMBPTimerInit+0x182>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d100      	bne.n	8008390 <eMBPTimerInit+0x38>
 800838e:	e0a4      	b.n	80084da <eMBPTimerInit+0x182>
    {
        if( !bIsInitalized )
 8008390:	4b58      	ldr	r3, [pc, #352]	; (80084f4 <eMBPTimerInit+0x19c>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d145      	bne.n	8008424 <eMBPTimerInit+0xcc>
        {
            /* Initialize a hardware timer for 1 millisecond. */
						//MX_TIM16_Init();
						xTimer = xTimerCreate( "MB1msTimer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_MB_TIMER, HandleTimer );
 8008398:	4857      	ldr	r0, [pc, #348]	; (80084f8 <eMBPTimerInit+0x1a0>)
 800839a:	4b58      	ldr	r3, [pc, #352]	; (80084fc <eMBPTimerInit+0x1a4>)
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	23ff      	movs	r3, #255	; 0xff
 80083a0:	2201      	movs	r2, #1
 80083a2:	2101      	movs	r1, #1
 80083a4:	f7fd f838 	bl	8005418 <xTimerCreate>
 80083a8:	0002      	movs	r2, r0
 80083aa:	4b55      	ldr	r3, [pc, #340]	; (8008500 <eMBPTimerInit+0x1a8>)
 80083ac:	601a      	str	r2, [r3, #0]

            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 80083ae:	2316      	movs	r3, #22
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	e02d      	b.n	8008414 <eMBPTimerInit+0xbc>
            {
                RESET_HDL( &arxTimerHdls[ubIdx] );
 80083b8:	2016      	movs	r0, #22
 80083ba:	183b      	adds	r3, r7, r0
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	4b51      	ldr	r3, [pc, #324]	; (8008504 <eMBPTimerInit+0x1ac>)
 80083c0:	0112      	lsls	r2, r2, #4
 80083c2:	21ff      	movs	r1, #255	; 0xff
 80083c4:	54d1      	strb	r1, [r2, r3]
 80083c6:	0001      	movs	r1, r0
 80083c8:	187b      	adds	r3, r7, r1
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4a4d      	ldr	r2, [pc, #308]	; (8008504 <eMBPTimerInit+0x1ac>)
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	18d3      	adds	r3, r2, r3
 80083d2:	3302      	adds	r3, #2
 80083d4:	2200      	movs	r2, #0
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	187b      	adds	r3, r7, r1
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	4a49      	ldr	r2, [pc, #292]	; (8008504 <eMBPTimerInit+0x1ac>)
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	18d3      	adds	r3, r2, r3
 80083e2:	3304      	adds	r3, #4
 80083e4:	2201      	movs	r2, #1
 80083e6:	4252      	negs	r2, r2
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	187b      	adds	r3, r7, r1
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	4a45      	ldr	r2, [pc, #276]	; (8008504 <eMBPTimerInit+0x1ac>)
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	18d3      	adds	r3, r2, r3
 80083f4:	3308      	adds	r3, #8
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	187b      	adds	r3, r7, r1
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	4a41      	ldr	r2, [pc, #260]	; (8008504 <eMBPTimerInit+0x1ac>)
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	18d3      	adds	r3, r2, r3
 8008404:	330c      	adds	r3, #12
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800840a:	187b      	adds	r3, r7, r1
 800840c:	781a      	ldrb	r2, [r3, #0]
 800840e:	187b      	adds	r3, r7, r1
 8008410:	3201      	adds	r2, #1
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	2316      	movs	r3, #22
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d9cc      	bls.n	80083b8 <eMBPTimerInit+0x60>
            }

            bIsInitalized = TRUE;
 800841e:	4b35      	ldr	r3, [pc, #212]	; (80084f4 <eMBPTimerInit+0x19c>)
 8008420:	2201      	movs	r2, #1
 8008422:	701a      	strb	r2, [r3, #0]

        }
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 8008424:	2316      	movs	r3, #22
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e00c      	b.n	8008448 <eMBPTimerInit+0xf0>
        {
            if( IDX_INVALID == arxTimerHdls[ubIdx].ubIdx )
 800842e:	2116      	movs	r1, #22
 8008430:	187b      	adds	r3, r7, r1
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <eMBPTimerInit+0x1ac>)
 8008436:	0112      	lsls	r2, r2, #4
 8008438:	5cd3      	ldrb	r3, [r2, r3]
 800843a:	2bff      	cmp	r3, #255	; 0xff
 800843c:	d00a      	beq.n	8008454 <eMBPTimerInit+0xfc>
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800843e:	187b      	adds	r3, r7, r1
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	187b      	adds	r3, r7, r1
 8008444:	3201      	adds	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	2316      	movs	r3, #22
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d9ed      	bls.n	800842e <eMBPTimerInit+0xd6>
 8008452:	e000      	b.n	8008456 <eMBPTimerInit+0xfe>
            {
                break;
 8008454:	46c0      	nop			; (mov r8, r8)
            }
        }
        if( MAX_TIMER_HDLS != ubIdx )
 8008456:	2116      	movs	r1, #22
 8008458:	187b      	adds	r3, r7, r1
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b05      	cmp	r3, #5
 800845e:	d037      	beq.n	80084d0 <eMBPTimerInit+0x178>
        {
            arxTimerHdls[ubIdx].ubIdx = ubIdx;
 8008460:	187b      	adds	r3, r7, r1
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	4b27      	ldr	r3, [pc, #156]	; (8008504 <eMBPTimerInit+0x1ac>)
 8008466:	0112      	lsls	r2, r2, #4
 8008468:	0008      	movs	r0, r1
 800846a:	1879      	adds	r1, r7, r1
 800846c:	7809      	ldrb	r1, [r1, #0]
 800846e:	54d1      	strb	r1, [r2, r3]
            arxTimerHdls[ubIdx].usNTimeOutMS = usTimeOut1ms;
 8008470:	0001      	movs	r1, r0
 8008472:	187b      	adds	r3, r7, r1
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	4a23      	ldr	r2, [pc, #140]	; (8008504 <eMBPTimerInit+0x1ac>)
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	18d3      	adds	r3, r2, r3
 800847c:	3302      	adds	r3, #2
 800847e:	220a      	movs	r2, #10
 8008480:	18ba      	adds	r2, r7, r2
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 8008486:	187b      	adds	r3, r7, r1
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <eMBPTimerInit+0x1ac>)
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	18d3      	adds	r3, r2, r3
 8008490:	3304      	adds	r3, #4
 8008492:	2201      	movs	r2, #1
 8008494:	4252      	negs	r2, r2
 8008496:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].xMBMHdl = xHdl;
 8008498:	187b      	adds	r3, r7, r1
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4a19      	ldr	r2, [pc, #100]	; (8008504 <eMBPTimerInit+0x1ac>)
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	18d3      	adds	r3, r2, r3
 80084a2:	3308      	adds	r3, #8
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	601a      	str	r2, [r3, #0]
            arxTimerHdls[ubIdx].pbMBPTimerExpiredFN = pbMBPTimerExpiredFN;
 80084a8:	187b      	adds	r3, r7, r1
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <eMBPTimerInit+0x1ac>)
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	18d3      	adds	r3, r2, r3
 80084b2:	330c      	adds	r3, #12
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]

            *xTimerHdl = &arxTimerHdls[ubIdx];
 80084b8:	187b      	adds	r3, r7, r1
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	011a      	lsls	r2, r3, #4
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <eMBPTimerInit+0x1ac>)
 80084c0:	18d2      	adds	r2, r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]

            eStatus = MB_ENOERR;
 80084c6:	2317      	movs	r3, #23
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 80084ce:	e008      	b.n	80084e2 <eMBPTimerInit+0x18a>
        }
        else
        {
            eStatus = MB_ENORES;
 80084d0:	2317      	movs	r3, #23
 80084d2:	18fb      	adds	r3, r7, r3
 80084d4:	2204      	movs	r2, #4
 80084d6:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 80084d8:	e003      	b.n	80084e2 <eMBPTimerInit+0x18a>
        }
    }
    else
    {
        eStatus = MB_EINVAL;
 80084da:	2317      	movs	r3, #23
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	2202      	movs	r2, #2
 80084e0:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80084e2:	f7ff ff31 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 80084e6:	2317      	movs	r3, #23
 80084e8:	18fb      	adds	r3, r7, r3
 80084ea:	781b      	ldrb	r3, [r3, #0]
}
 80084ec:	0018      	movs	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	b006      	add	sp, #24
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	2000171c 	.word	0x2000171c
 80084f8:	08008d78 	.word	0x08008d78
 80084fc:	08008635 	.word	0x08008635
 8008500:	20001720 	.word	0x20001720
 8008504:	200016cc 	.word	0x200016cc

08008508 <vMBPTimerClose>:

void
vMBPTimerClose( xMBPTimerHandle xTimerHdl )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	60fb      	str	r3, [r7, #12]

    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d017      	beq.n	800854a <vMBPTimerClose+0x42>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	011a      	lsls	r2, r3, #4
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <vMBPTimerClose+0x4c>)
 8008522:	18d3      	adds	r3, r2, r3
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	429a      	cmp	r2, r3
 8008528:	d10f      	bne.n	800854a <vMBPTimerClose+0x42>
    {
        RESET_HDL( pxTimerIntHdl );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	22ff      	movs	r2, #255	; 0xff
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	805a      	strh	r2, [r3, #2]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	4252      	negs	r2, r2
 800853c:	809a      	strh	r2, [r3, #4]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	60da      	str	r2, [r3, #12]
    }
}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	46bd      	mov	sp, r7
 800854e:	b004      	add	sp, #16
 8008550:	bd80      	pop	{r7, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	200016cc 	.word	0x200016cc

08008558 <eMBPTimerStart>:
    return eStatus;
}

eMBErrorCode
eMBPTimerStart( xMBPTimerHandle xTimerHdl )
{
 8008558:	b5b0      	push	{r4, r5, r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af02      	add	r7, sp, #8
 800855e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008560:	250f      	movs	r5, #15
 8008562:	197b      	adds	r3, r7, r5
 8008564:	2202      	movs	r2, #2
 8008566:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800856c:	f7ff fee5 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d01b      	beq.n	80085ae <eMBPTimerStart+0x56>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	011a      	lsls	r2, r3, #4
 800857c:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <eMBPTimerStart+0x68>)
 800857e:	18d3      	adds	r3, r2, r3
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	429a      	cmp	r2, r3
 8008584:	d113      	bne.n	80085ae <eMBPTimerStart+0x56>
    {
				xTimerStart( xTimer, portMAX_DELAY );
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <eMBPTimerStart+0x6c>)
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	f7fc fb9b 	bl	8004cc4 <xTaskGetTickCount>
 800858e:	0002      	movs	r2, r0
 8008590:	2301      	movs	r3, #1
 8008592:	425b      	negs	r3, r3
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	2101      	movs	r1, #1
 800859a:	0020      	movs	r0, r4
 800859c:	f7fc ff84 	bl	80054a8 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = pxTimerIntHdl->usNTimeOutMS;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	885a      	ldrh	r2, [r3, #2]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 80085a8:	197b      	adds	r3, r7, r5
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80085ae:	f7ff fecb 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 80085b2:	230f      	movs	r3, #15
 80085b4:	18fb      	adds	r3, r7, r3
 80085b6:	781b      	ldrb	r3, [r3, #0]
}
 80085b8:	0018      	movs	r0, r3
 80085ba:	46bd      	mov	sp, r7
 80085bc:	b004      	add	sp, #16
 80085be:	bdb0      	pop	{r4, r5, r7, pc}
 80085c0:	200016cc 	.word	0x200016cc
 80085c4:	20001720 	.word	0x20001720

080085c8 <eMBPTimerStop>:

eMBErrorCode
eMBPTimerStop( xMBPTimerHandle xTimerHdl )
{
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80085d0:	240f      	movs	r4, #15
 80085d2:	193b      	adds	r3, r7, r4
 80085d4:	2202      	movs	r2, #2
 80085d6:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 80085dc:	f7ff fead 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d018      	beq.n	8008618 <eMBPTimerStop+0x50>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	011a      	lsls	r2, r3, #4
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <eMBPTimerStop+0x64>)
 80085ee:	18d3      	adds	r3, r2, r3
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d110      	bne.n	8008618 <eMBPTimerStop+0x50>
    {
				xTimerStop( xTimer, portMAX_DELAY );
 80085f6:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <eMBPTimerStop+0x68>)
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	2301      	movs	r3, #1
 80085fc:	425b      	negs	r3, r3
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2300      	movs	r3, #0
 8008602:	2200      	movs	r2, #0
 8008604:	2103      	movs	r1, #3
 8008606:	f7fc ff4f 	bl	80054a8 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2201      	movs	r2, #1
 800860e:	4252      	negs	r2, r2
 8008610:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 8008612:	193b      	adds	r3, r7, r4
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008618:	f7ff fe96 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 800861c:	230f      	movs	r3, #15
 800861e:	18fb      	adds	r3, r7, r3
 8008620:	781b      	ldrb	r3, [r3, #0]
}
 8008622:	0018      	movs	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	b005      	add	sp, #20
 8008628:	bd90      	pop	{r4, r7, pc}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	200016cc 	.word	0x200016cc
 8008630:	20001720 	.word	0x20001720

08008634 <HandleTimer>:

/*timer callback function
*/
static void HandleTimer(TimerHandle_t xTimer)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
		UBYTE           ubIdx;
	uint32_t Timer_ID = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	60bb      	str	r3, [r7, #8]

#if MBP_DEBUG_TIMER_PERFORMANCE == 1
    STATIC BOOL     bLastState = FALSE;
#endif
  /* Get Timer ID */
  Timer_ID = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	0018      	movs	r0, r3
 8008644:	f7fd f994 	bl	8005970 <pvTimerGetTimerID>
 8008648:	0003      	movs	r3, r0
 800864a:	60bb      	str	r3, [r7, #8]
  if (TIMERID_MB_TIMER == Timer_ID)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2bff      	cmp	r3, #255	; 0xff
 8008650:	d152      	bne.n	80086f8 <HandleTimer+0xc4>
  {
#if MBP_DEBUG_TIMER_PERFORMANCE == 1
        vMBPSetDebugPin( MBP_DEBUGPIN_0, bLastState );
        bLastState = !bLastState;
#endif
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 8008652:	230f      	movs	r3, #15
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	e048      	b.n	80086ee <HandleTimer+0xba>
        {
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800865c:	200f      	movs	r0, #15
 800865e:	183b      	adds	r3, r7, r0
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	4b27      	ldr	r3, [pc, #156]	; (8008700 <HandleTimer+0xcc>)
 8008664:	0112      	lsls	r2, r2, #4
 8008666:	5cd3      	ldrb	r3, [r2, r3]
 8008668:	2bff      	cmp	r3, #255	; 0xff
 800866a:	d03a      	beq.n	80086e2 <HandleTimer+0xae>
                ( TIMER_TIMEOUT_INVALID != arxTimerHdls[ubIdx].usNTimeLeft ) )
 800866c:	183b      	adds	r3, r7, r0
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	4a23      	ldr	r2, [pc, #140]	; (8008700 <HandleTimer+0xcc>)
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	18d3      	adds	r3, r2, r3
 8008676:	3304      	adds	r3, #4
 8008678:	881b      	ldrh	r3, [r3, #0]
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800867a:	4a22      	ldr	r2, [pc, #136]	; (8008704 <HandleTimer+0xd0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d030      	beq.n	80086e2 <HandleTimer+0xae>
            {
                arxTimerHdls[ubIdx].usNTimeLeft--;
 8008680:	183b      	adds	r3, r7, r0
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	491e      	ldr	r1, [pc, #120]	; (8008700 <HandleTimer+0xcc>)
 8008686:	011a      	lsls	r2, r3, #4
 8008688:	188a      	adds	r2, r1, r2
 800868a:	3204      	adds	r2, #4
 800868c:	8812      	ldrh	r2, [r2, #0]
 800868e:	3a01      	subs	r2, #1
 8008690:	b291      	uxth	r1, r2
 8008692:	4a1b      	ldr	r2, [pc, #108]	; (8008700 <HandleTimer+0xcc>)
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	18d3      	adds	r3, r2, r3
 8008698:	3304      	adds	r3, #4
 800869a:	1c0a      	adds	r2, r1, #0
 800869c:	801a      	strh	r2, [r3, #0]
                if( 0 == arxTimerHdls[ubIdx].usNTimeLeft )
 800869e:	183b      	adds	r3, r7, r0
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4a17      	ldr	r2, [pc, #92]	; (8008700 <HandleTimer+0xcc>)
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	18d3      	adds	r3, r2, r3
 80086a8:	3304      	adds	r3, #4
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d118      	bne.n	80086e2 <HandleTimer+0xae>
                {
                    arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 80086b0:	183b      	adds	r3, r7, r0
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4a12      	ldr	r2, [pc, #72]	; (8008700 <HandleTimer+0xcc>)
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	18d3      	adds	r3, r2, r3
 80086ba:	3304      	adds	r3, #4
 80086bc:	2201      	movs	r2, #1
 80086be:	4252      	negs	r2, r2
 80086c0:	801a      	strh	r2, [r3, #0]
                    ( void )arxTimerHdls[ubIdx].pbMBPTimerExpiredFN( arxTimerHdls[ubIdx].xMBMHdl );
 80086c2:	183b      	adds	r3, r7, r0
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4a0e      	ldr	r2, [pc, #56]	; (8008700 <HandleTimer+0xcc>)
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	18d3      	adds	r3, r2, r3
 80086cc:	330c      	adds	r3, #12
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	183b      	adds	r3, r7, r0
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	490a      	ldr	r1, [pc, #40]	; (8008700 <HandleTimer+0xcc>)
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	18cb      	adds	r3, r1, r3
 80086da:	3308      	adds	r3, #8
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	0018      	movs	r0, r3
 80086e0:	4790      	blx	r2
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 80086e2:	210f      	movs	r1, #15
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	3201      	adds	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	230f      	movs	r3, #15
 80086f0:	18fb      	adds	r3, r7, r3
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d9b1      	bls.n	800865c <HandleTimer+0x28>
                }
            }
        }
  }
}
 80086f8:	46c0      	nop			; (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b004      	add	sp, #16
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200016cc 	.word	0x200016cc
 8008704:	0000ffff 	.word	0x0000ffff

08008708 <eMBExceptionToErrorcode>:
    return eException;
}

eMBErrorCode
eMBExceptionToErrorcode( UBYTE eMBPDUException )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	0002      	movs	r2, r0
 8008710:	1dfb      	adds	r3, r7, #7
 8008712:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EIO;
 8008714:	230f      	movs	r3, #15
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	2205      	movs	r2, #5
 800871a:	701a      	strb	r2, [r3, #0]

    switch ( eMBPDUException )
 800871c:	1dfb      	adds	r3, r7, #7
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d831      	bhi.n	8008788 <eMBExceptionToErrorcode+0x80>
 8008724:	009a      	lsls	r2, r3, #2
 8008726:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <eMBExceptionToErrorcode+0x90>)
 8008728:	18d3      	adds	r3, r2, r3
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	469f      	mov	pc, r3
    {
    case MB_PDU_EX_ILLEGAL_FUNCTION:
        eStatus = MB_EX_ILLEGAL_FUNCTION;
 800872e:	230f      	movs	r3, #15
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	220a      	movs	r2, #10
 8008734:	701a      	strb	r2, [r3, #0]
        break;
 8008736:	e028      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_ADDRESS:
        eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8008738:	230f      	movs	r3, #15
 800873a:	18fb      	adds	r3, r7, r3
 800873c:	220b      	movs	r2, #11
 800873e:	701a      	strb	r2, [r3, #0]
        break;
 8008740:	e023      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_VALUE:
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8008742:	230f      	movs	r3, #15
 8008744:	18fb      	adds	r3, r7, r3
 8008746:	220c      	movs	r2, #12
 8008748:	701a      	strb	r2, [r3, #0]
        break;
 800874a:	e01e      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_DEVICE_FAILURE:
        eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800874c:	230f      	movs	r3, #15
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	220d      	movs	r2, #13
 8008752:	701a      	strb	r2, [r3, #0]
        break;
 8008754:	e019      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ACKNOWLEDGE:
        eStatus = MB_EX_ACKNOWLEDGE;
 8008756:	230f      	movs	r3, #15
 8008758:	18fb      	adds	r3, r7, r3
 800875a:	220e      	movs	r2, #14
 800875c:	701a      	strb	r2, [r3, #0]
        break;
 800875e:	e014      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_BUSY:
        eStatus = MB_EX_SLAVE_BUSY;
 8008760:	230f      	movs	r3, #15
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	220f      	movs	r2, #15
 8008766:	701a      	strb	r2, [r3, #0]
        break;
 8008768:	e00f      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_MEMORY_PARITY_ERROR:
        eStatus = MB_EX_MEMORY_PARITY_ERROR;
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	2210      	movs	r2, #16
 8008770:	701a      	strb	r2, [r3, #0]
        break;
 8008772:	e00a      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_PATH_UNAVAILABLE:
        eStatus = MB_EX_GATEWAY_PATH_UNAVAILABLE;
 8008774:	230f      	movs	r3, #15
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	2211      	movs	r2, #17
 800877a:	701a      	strb	r2, [r3, #0]
        break;
 800877c:	e005      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_TARGET_FAILED:
        eStatus = MB_EX_GATEWAY_TARGET_FAILED;
 800877e:	230f      	movs	r3, #15
 8008780:	18fb      	adds	r3, r7, r3
 8008782:	2212      	movs	r2, #18
 8008784:	701a      	strb	r2, [r3, #0]
        break;
 8008786:	e000      	b.n	800878a <eMBExceptionToErrorcode+0x82>
    default:
        break;
 8008788:	46c0      	nop			; (mov r8, r8)
    }
    return eStatus;
 800878a:	230f      	movs	r3, #15
 800878c:	18fb      	adds	r3, r7, r3
 800878e:	781b      	ldrb	r3, [r3, #0]
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b004      	add	sp, #16
 8008796:	bd80      	pop	{r7, pc}
 8008798:	08009000 	.word	0x08009000

0800879c <eMBPSerialInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPSerialInit( xMBPSerialHandle * pxSerialHdl, UCHAR ucPort, ULONG ulBaudRate,
                UCHAR ucDataBits, eMBSerialParity eParity, UCHAR ucStopBits, xMBHandle xMBMHdl)
{
 800879c:	b590      	push	{r4, r7, lr}
 800879e:	b08b      	sub	sp, #44	; 0x2c
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	0008      	movs	r0, r1
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	0019      	movs	r1, r3
 80087aa:	230b      	movs	r3, #11
 80087ac:	18fb      	adds	r3, r7, r3
 80087ae:	1c02      	adds	r2, r0, #0
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	230a      	movs	r3, #10
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	1c0a      	adds	r2, r1, #0
 80087b8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80087ba:	2327      	movs	r3, #39	; 0x27
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]
		uint32_t StopBit;
	
		UBYTE           ubUDR;
		/* End of addition */

    MBP_ENTER_CRITICAL_SECTION(  );
 80087c2:	f7ff fdba 	bl	800833a <vMBPEnterCritical>
    if( !bIsInitalized )
 80087c6:	4b7a      	ldr	r3, [pc, #488]	; (80089b0 <eMBPSerialInit+0x214>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d139      	bne.n	8008842 <eMBPSerialInit+0xa6>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 80087ce:	2326      	movs	r3, #38	; 0x26
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e024      	b.n	8008822 <eMBPSerialInit+0x86>
        {
            HDL_RESET( &xSerialHdls[ubIdx] );
 80087d8:	2026      	movs	r0, #38	; 0x26
 80087da:	183b      	adds	r3, r7, r0
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	4b75      	ldr	r3, [pc, #468]	; (80089b4 <eMBPSerialInit+0x218>)
 80087e0:	0112      	lsls	r2, r2, #4
 80087e2:	21ff      	movs	r1, #255	; 0xff
 80087e4:	54d1      	strb	r1, [r2, r3]
 80087e6:	0001      	movs	r1, r0
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	4a71      	ldr	r2, [pc, #452]	; (80089b4 <eMBPSerialInit+0x218>)
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	18d3      	adds	r3, r2, r3
 80087f2:	3304      	adds	r3, #4
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4a6d      	ldr	r2, [pc, #436]	; (80089b4 <eMBPSerialInit+0x218>)
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	18d3      	adds	r3, r2, r3
 8008802:	3308      	adds	r3, #8
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	187b      	adds	r3, r7, r1
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	4a69      	ldr	r2, [pc, #420]	; (80089b4 <eMBPSerialInit+0x218>)
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	18d3      	adds	r3, r2, r3
 8008812:	330c      	adds	r3, #12
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 8008818:	187b      	adds	r3, r7, r1
 800881a:	781a      	ldrb	r2, [r3, #0]
 800881c:	187b      	adds	r3, r7, r1
 800881e:	3201      	adds	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	2326      	movs	r3, #38	; 0x26
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0d5      	beq.n	80087d8 <eMBPSerialInit+0x3c>
        }
#if UART_1_ENABLED == 1
        RS_485_UART_1_INIT(  );
        RS_485_UART_1_DISABLE_TX(  );
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	0159      	lsls	r1, r3, #5
 8008830:	2390      	movs	r3, #144	; 0x90
 8008832:	05db      	lsls	r3, r3, #23
 8008834:	2200      	movs	r2, #0
 8008836:	0018      	movs	r0, r3
 8008838:	f7f9 f862 	bl	8001900 <HAL_GPIO_WritePin>
#endif
        bIsInitalized = TRUE;
 800883c:	4b5c      	ldr	r3, [pc, #368]	; (80089b0 <eMBPSerialInit+0x214>)
 800883e:	2201      	movs	r2, #1
 8008840:	701a      	strb	r2, [r3, #0]
    }

    if( ( MB_HDL_INVALID == xMBMHdl ) || ( NULL == pxSerialHdl ) )
 8008842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <eMBPSerialInit+0xb2>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d104      	bne.n	8008858 <eMBPSerialInit+0xbc>
    {
        eStatus = MB_EINVAL;
 800884e:	2327      	movs	r3, #39	; 0x27
 8008850:	18fb      	adds	r3, r7, r3
 8008852:	2202      	movs	r2, #2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	e0a1      	b.n	800899c <eMBPSerialInit+0x200>
    }
    else
    {
        eStatus = MB_ENORES;
 8008858:	2327      	movs	r3, #39	; 0x27
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	2204      	movs	r2, #4
 800885e:	701a      	strb	r2, [r3, #0]

        /* Setup baudrate */
        if( ( ulBaudRate > UART_BAUDRATE_MIN ) && ( ulBaudRate < UART_BAUDRATE_MAX ) )
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	2396      	movs	r3, #150	; 0x96
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	429a      	cmp	r2, r3
 8008868:	d904      	bls.n	8008874 <eMBPSerialInit+0xd8>
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	23e1      	movs	r3, #225	; 0xe1
 800886e:	025b      	lsls	r3, r3, #9
 8008870:	429a      	cmp	r2, r3
 8008872:	d303      	bcc.n	800887c <eMBPSerialInit+0xe0>
        {
            //BaudRate = ulBaudRate;
        }
        else
        {
            eStatus = MB_EINVAL;
 8008874:	2327      	movs	r3, #39	; 0x27
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	2202      	movs	r2, #2
 800887a:	701a      	strb	r2, [r3, #0]
        }

        /* Setup stopbits */
        switch ( ucStopBits )
 800887c:	2334      	movs	r3, #52	; 0x34
 800887e:	2208      	movs	r2, #8
 8008880:	189b      	adds	r3, r3, r2
 8008882:	19db      	adds	r3, r3, r7
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d002      	beq.n	8008890 <eMBPSerialInit+0xf4>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d003      	beq.n	8008896 <eMBPSerialInit+0xfa>
 800888e:	e006      	b.n	800889e <eMBPSerialInit+0x102>
        {
        case 1:
            StopBit = UART_STOPBITS_1;
 8008890:	2300      	movs	r3, #0
 8008892:	623b      	str	r3, [r7, #32]
            break;
 8008894:	e008      	b.n	80088a8 <eMBPSerialInit+0x10c>
        case 2:
            StopBit = UART_STOPBITS_2;
 8008896:	2380      	movs	r3, #128	; 0x80
 8008898:	019b      	lsls	r3, r3, #6
 800889a:	623b      	str	r3, [r7, #32]
            break;
 800889c:	e004      	b.n	80088a8 <eMBPSerialInit+0x10c>
        default:
            eStatus = MB_EINVAL;
 800889e:	2327      	movs	r3, #39	; 0x27
 80088a0:	18fb      	adds	r3, r7, r3
 80088a2:	2202      	movs	r2, #2
 80088a4:	701a      	strb	r2, [r3, #0]
            break;
 80088a6:	46c0      	nop			; (mov r8, r8)
        }

        /* For STM32 parity is placed on bit 9 (MSB)
         * Select correct number of databits */
        if( ucDataBits == 8 )
 80088a8:	230a      	movs	r3, #10
 80088aa:	18fb      	adds	r3, r7, r3
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d10d      	bne.n	80088ce <eMBPSerialInit+0x132>
        {
            if( eParity != MB_PAR_NONE )
 80088b2:	2330      	movs	r3, #48	; 0x30
 80088b4:	2208      	movs	r2, #8
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	19db      	adds	r3, r3, r7
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d003      	beq.n	80088c8 <eMBPSerialInit+0x12c>
            {
                DataBits = UART_WORDLENGTH_9B;
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	015b      	lsls	r3, r3, #5
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	e010      	b.n	80088ea <eMBPSerialInit+0x14e>
            }
            else
            {
                DataBits = UART_WORDLENGTH_8B;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	e00d      	b.n	80088ea <eMBPSerialInit+0x14e>
            }
        }
        else
        {
            if( eParity != MB_PAR_NONE )
 80088ce:	2330      	movs	r3, #48	; 0x30
 80088d0:	2208      	movs	r2, #8
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	19db      	adds	r3, r3, r7
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d002      	beq.n	80088e2 <eMBPSerialInit+0x146>
            {
                DataBits = UART_WORDLENGTH_8B;
 80088dc:	2300      	movs	r3, #0
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	e003      	b.n	80088ea <eMBPSerialInit+0x14e>
            }
            else
            {
                eStatus = MB_EINVAL;
 80088e2:	2327      	movs	r3, #39	; 0x27
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Setup parity */
        switch ( eParity )
 80088ea:	2330      	movs	r3, #48	; 0x30
 80088ec:	2208      	movs	r2, #8
 80088ee:	189b      	adds	r3, r3, r2
 80088f0:	19db      	adds	r3, r3, r7
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d005      	beq.n	8008904 <eMBPSerialInit+0x168>
 80088f8:	dc0f      	bgt.n	800891a <eMBPSerialInit+0x17e>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <eMBPSerialInit+0x16e>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d007      	beq.n	8008912 <eMBPSerialInit+0x176>
 8008902:	e00a      	b.n	800891a <eMBPSerialInit+0x17e>
        {
        case MB_PAR_NONE:
            Parity = UART_PARITY_NONE;
 8008904:	2300      	movs	r3, #0
 8008906:	61bb      	str	r3, [r7, #24]
            break;
 8008908:	e00c      	b.n	8008924 <eMBPSerialInit+0x188>
        case MB_PAR_ODD:
            Parity = UART_PARITY_ODD;
 800890a:	23c0      	movs	r3, #192	; 0xc0
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	61bb      	str	r3, [r7, #24]
            break;
 8008910:	e008      	b.n	8008924 <eMBPSerialInit+0x188>
        case MB_PAR_EVEN:
            Parity = UART_PARITY_EVEN;
 8008912:	2380      	movs	r3, #128	; 0x80
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	61bb      	str	r3, [r7, #24]
            break;
 8008918:	e004      	b.n	8008924 <eMBPSerialInit+0x188>
        default:
            eStatus = MB_EINVAL;
 800891a:	2327      	movs	r3, #39	; 0x27
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
            break;
 8008922:	46c0      	nop			; (mov r8, r8)
        }

        if( eStatus != MB_EINVAL )
 8008924:	2427      	movs	r4, #39	; 0x27
 8008926:	193b      	adds	r3, r7, r4
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d033      	beq.n	8008996 <eMBPSerialInit+0x1fa>
        {
            switch ( ucPort )
 800892e:	230b      	movs	r3, #11
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d130      	bne.n	800899a <eMBPSerialInit+0x1fe>
            {
#if UART_1_ENABLED == 1
            case UART_1_PORT:
                if( IDX_INVALID == xSerialHdls[UART_1_IDX].ubIdx )
 8008938:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <eMBPSerialInit+0x218>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2bff      	cmp	r3, #255	; 0xff
 800893e:	d125      	bne.n	800898c <eMBPSerialInit+0x1f0>
                {
                    /* Configure  USART1 */
                    //MB_PORT_Init(BaudRate, DataBits, Parity, StopBit);
										MX_USART1_UART_Init();
 8008940:	f7f7 fed2 	bl	80006e8 <MX_USART1_UART_Init>
									
                    /* Disable receive and transmit interrupts from the beginning */
                    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8008944:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <eMBPSerialInit+0x21c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <eMBPSerialInit+0x21c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2120      	movs	r1, #32
 8008950:	438a      	bics	r2, r1
 8008952:	601a      	str	r2, [r3, #0]
										__HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8008954:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <eMBPSerialInit+0x21c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <eMBPSerialInit+0x21c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2140      	movs	r1, #64	; 0x40
 8008960:	438a      	bics	r2, r1
 8008962:	601a      	str	r2, [r3, #0]
									
										HAL_UART_Receive_IT(&huart1, &ubUDR, sizeof (ubUDR));
 8008964:	2317      	movs	r3, #23
 8008966:	18f9      	adds	r1, r7, r3
 8008968:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <eMBPSerialInit+0x21c>)
 800896a:	2201      	movs	r2, #1
 800896c:	0018      	movs	r0, r3
 800896e:	f7fa fa13 	bl	8002d98 <HAL_UART_Receive_IT>

                    /* Setup handle to uart */
                    *pxSerialHdl = &xSerialHdls[UART_1_IDX];
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4a0f      	ldr	r2, [pc, #60]	; (80089b4 <eMBPSerialInit+0x218>)
 8008976:	601a      	str	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].ubIdx = UART_1_IDX;
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <eMBPSerialInit+0x218>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].xMBMHdl = xMBMHdl;
 800897e:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <eMBPSerialInit+0x218>)
 8008980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008982:	60da      	str	r2, [r3, #12]

                    /* Everything is ok */
                    eStatus = MB_ENOERR;
 8008984:	193b      	adds	r3, r7, r4
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    eStatus = MB_ENORES;
                }
                break;
 800898a:	e007      	b.n	800899c <eMBPSerialInit+0x200>
                    eStatus = MB_ENORES;
 800898c:	2327      	movs	r3, #39	; 0x27
 800898e:	18fb      	adds	r3, r7, r3
 8008990:	2204      	movs	r2, #4
 8008992:	701a      	strb	r2, [r3, #0]
                break;
 8008994:	e002      	b.n	800899c <eMBPSerialInit+0x200>
#endif
            default:
                break;
            }
        }
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	e000      	b.n	800899c <eMBPSerialInit+0x200>
                break;
 800899a:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800899c:	f7ff fcd4 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 80089a0:	2327      	movs	r3, #39	; 0x27
 80089a2:	18fb      	adds	r3, r7, r3
 80089a4:	781b      	ldrb	r3, [r3, #0]
}
 80089a6:	0018      	movs	r0, r3
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b00b      	add	sp, #44	; 0x2c
 80089ac:	bd90      	pop	{r4, r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	20001734 	.word	0x20001734
 80089b4:	20001724 	.word	0x20001724
 80089b8:	200000ac 	.word	0x200000ac

080089bc <eMBPSerialClose>:

eMBErrorCode
eMBPSerialClose( xMBPSerialHandle xSerialHdl )
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80089c4:	240f      	movs	r4, #15
 80089c6:	193b      	adds	r3, r7, r4
 80089c8:	2202      	movs	r2, #2
 80089ca:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 80089d0:	f7ff fcb3 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d037      	beq.n	8008a4a <eMBPSerialClose+0x8e>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	011a      	lsls	r2, r3, #4
 80089e0:	4b1f      	ldr	r3, [pc, #124]	; (8008a60 <eMBPSerialClose+0xa4>)
 80089e2:	18d3      	adds	r3, r2, r3
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d12f      	bne.n	8008a4a <eMBPSerialClose+0x8e>
    {
        switch ( pxSerialIntHdl->ubIdx )
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d128      	bne.n	8008a44 <eMBPSerialClose+0x88>
        {
#if UART_1_ENABLED == 1
        case UART_1_IDX:
            if( ( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN ) && ( NULL == pxSerialIntHdl->pvMBMReceiveFN ) )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11f      	bne.n	8008a3a <eMBPSerialClose+0x7e>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d11b      	bne.n	8008a3a <eMBPSerialClose+0x7e>
            {
                /* Close USART 1 */
                HAL_UART_DeInit(&huart1);
 8008a02:	4b18      	ldr	r3, [pc, #96]	; (8008a64 <eMBPSerialClose+0xa8>)
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7fa f879 	bl	8002afc <HAL_UART_DeInit>
                /* Force RS485 back to receive mode */
                RS_485_UART_1_DISABLE_TX(  );
 8008a0a:	2380      	movs	r3, #128	; 0x80
 8008a0c:	0159      	lsls	r1, r3, #5
 8008a0e:	2390      	movs	r3, #144	; 0x90
 8008a10:	05db      	lsls	r3, r3, #23
 8008a12:	2200      	movs	r2, #0
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7f8 ff73 	bl	8001900 <HAL_GPIO_WritePin>
                /* Reset handle */
                HDL_RESET( pxSerialIntHdl );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	605a      	str	r2, [r3, #4]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60da      	str	r2, [r3, #12]
                /* No error */
                eStatus = MB_ENOERR;
 8008a32:	193b      	adds	r3, r7, r4
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_EIO;
            }
            break;
 8008a38:	e008      	b.n	8008a4c <eMBPSerialClose+0x90>
                eStatus = MB_EIO;
 8008a3a:	230f      	movs	r3, #15
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	2205      	movs	r2, #5
 8008a40:	701a      	strb	r2, [r3, #0]
            break;
 8008a42:	e003      	b.n	8008a4c <eMBPSerialClose+0x90>
#endif
        default:
            MBP_ASSERT( 0 );
 8008a44:	f7ff fc66 	bl	8008314 <vMBPAssert>
            break;
 8008a48:	e000      	b.n	8008a4c <eMBPSerialClose+0x90>
        }
    }
 8008a4a:	46c0      	nop			; (mov r8, r8)
    MBP_EXIT_CRITICAL_SECTION(  );
 8008a4c:	f7ff fc7c 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8008a50:	230f      	movs	r3, #15
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	781b      	ldrb	r3, [r3, #0]
}
 8008a56:	0018      	movs	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b005      	add	sp, #20
 8008a5c:	bd90      	pop	{r4, r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	20001724 	.word	0x20001724
 8008a64:	200000ac 	.word	0x200000ac

08008a68 <eMBPSerialTxEnable>:

eMBErrorCode
eMBPSerialTxEnable( xMBPSerialHandle xSerialHdl, pbMBPSerialTransmitterEmptyCB pbMBMTransmitterEmptyFN )
{
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b0c4      	sub	sp, #272	; 0x110
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008a72:	2310      	movs	r3, #16
 8008a74:	33ff      	adds	r3, #255	; 0xff
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	2202      	movs	r2, #2
 8008a7a:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2284      	movs	r2, #132	; 0x84
 8008a80:	0052      	lsls	r2, r2, #1
 8008a82:	18ba      	adds	r2, r7, r2
 8008a84:	6013      	str	r3, [r2, #0]
	
		/* Next lines added for copying frame packet to buffer */
		MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 8008a86:	4b59      	ldr	r3, [pc, #356]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2bff      	cmp	r3, #255	; 0xff
 8008a8c:	d101      	bne.n	8008a92 <eMBPSerialTxEnable+0x2a>
 8008a8e:	f7ff fc41 	bl	8008314 <vMBPAssert>
    BOOL      bHasMoreData = TRUE;      
 8008a92:	2387      	movs	r3, #135	; 0x87
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	18fb      	adds	r3, r7, r3
 8008a98:	2201      	movs	r2, #1
 8008a9a:	701a      	strb	r2, [r3, #0]
    UBYTE     ubTxByte[MBM_SER_PDU_SIZE_MAX]={0};
 8008a9c:	4b54      	ldr	r3, [pc, #336]	; (8008bf0 <eMBPSerialTxEnable+0x188>)
 8008a9e:	2288      	movs	r2, #136	; 0x88
 8008aa0:	0052      	lsls	r2, r2, #1
 8008aa2:	189b      	adds	r3, r3, r2
 8008aa4:	19db      	adds	r3, r3, r7
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	22fc      	movs	r2, #252	; 0xfc
 8008aae:	2100      	movs	r1, #0
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f000 f920 	bl	8008cf6 <memset>
		UBYTE 		FrameCnt=0;
 8008ab6:	230e      	movs	r3, #14
 8008ab8:	33ff      	adds	r3, #255	; 0xff
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008ac0:	f7ff fc3b 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 8008ac4:	2184      	movs	r1, #132	; 0x84
 8008ac6:	0049      	lsls	r1, r1, #1
 8008ac8:	187b      	adds	r3, r7, r1
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d100      	bne.n	8008ad2 <eMBPSerialTxEnable+0x6a>
 8008ad0:	e081      	b.n	8008bd6 <eMBPSerialTxEnable+0x16e>
 8008ad2:	187b      	adds	r3, r7, r1
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	011a      	lsls	r2, r3, #4
 8008ada:	4b44      	ldr	r3, [pc, #272]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008adc:	18d3      	adds	r3, r2, r3
 8008ade:	187a      	adds	r2, r7, r1
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d000      	beq.n	8008ae8 <eMBPSerialTxEnable+0x80>
 8008ae6:	e076      	b.n	8008bd6 <eMBPSerialTxEnable+0x16e>
    {
        eStatus = MB_ENOERR;
 8008ae8:	2310      	movs	r3, #16
 8008aea:	33ff      	adds	r3, #255	; 0xff
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
        if( NULL != pbMBMTransmitterEmptyFN )
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d04f      	beq.n	8008b98 <eMBPSerialTxEnable+0x130>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN );
 8008af8:	187b      	adds	r3, r7, r1
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <eMBPSerialTxEnable+0x9e>
 8008b02:	f7ff fc07 	bl	8008314 <vMBPAssert>
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = pbMBMTransmitterEmptyFN;
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	2184      	movs	r1, #132	; 0x84
 8008b0a:	0049      	lsls	r1, r1, #1
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	605a      	str	r2, [r3, #4]
            switch ( pxSerialIntHdl->ubIdx )
 8008b12:	187b      	adds	r3, r7, r1
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d13a      	bne.n	8008b92 <eMBPSerialTxEnable+0x12a>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* RS485 transmit mode */
                RS_485_UART_1_ENABLE_TX(  );
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	0159      	lsls	r1, r3, #5
 8008b20:	2390      	movs	r3, #144	; 0x90
 8008b22:	05db      	lsls	r3, r3, #23
 8008b24:	2201      	movs	r2, #1
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7f8 feea 	bl	8001900 <HAL_GPIO_WritePin>
                /* Copy the frame to buffer */
								if( NULL != xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN )
 8008b2c:	4b2f      	ldr	r3, [pc, #188]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d020      	beq.n	8008b76 <eMBPSerialTxEnable+0x10e>
									{
										while (bHasMoreData){
 8008b34:	e016      	b.n	8008b64 <eMBPSerialTxEnable+0xfc>
											bHasMoreData = xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN( xSerialHdls[UART_1_IDX].xMBMHdl, &ubTxByte[FrameCnt] );
 8008b36:	4b2d      	ldr	r3, [pc, #180]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	4b2c      	ldr	r3, [pc, #176]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008b3c:	68d8      	ldr	r0, [r3, #12]
 8008b3e:	250e      	movs	r5, #14
 8008b40:	35ff      	adds	r5, #255	; 0xff
 8008b42:	197b      	adds	r3, r7, r5
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2108      	movs	r1, #8
 8008b48:	1879      	adds	r1, r7, r1
 8008b4a:	18cb      	adds	r3, r1, r3
 8008b4c:	2187      	movs	r1, #135	; 0x87
 8008b4e:	0049      	lsls	r1, r1, #1
 8008b50:	187c      	adds	r4, r7, r1
 8008b52:	0019      	movs	r1, r3
 8008b54:	4790      	blx	r2
 8008b56:	0003      	movs	r3, r0
 8008b58:	7023      	strb	r3, [r4, #0]
											FrameCnt++;
 8008b5a:	197b      	adds	r3, r7, r5
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	197b      	adds	r3, r7, r5
 8008b60:	3201      	adds	r2, #1
 8008b62:	701a      	strb	r2, [r3, #0]
										while (bHasMoreData){
 8008b64:	2387      	movs	r3, #135	; 0x87
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e2      	bne.n	8008b36 <eMBPSerialTxEnable+0xce>
										}
										xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN = NULL;
 8008b70:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <eMBPSerialTxEnable+0x184>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	605a      	str	r2, [r3, #4]
									}
								/* Send the buffer once */
								HAL_UART_Transmit_IT( &huart1, ubTxByte, FrameCnt-1 );
 8008b76:	230e      	movs	r3, #14
 8008b78:	33ff      	adds	r3, #255	; 0xff
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	2308      	movs	r3, #8
 8008b86:	18f9      	adds	r1, r7, r3
 8008b88:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <eMBPSerialTxEnable+0x18c>)
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7fa f894 	bl	8002cb8 <HAL_UART_Transmit_IT>
                break;
 8008b90:	e022      	b.n	8008bd8 <eMBPSerialTxEnable+0x170>
#endif
            default:
                MBP_ASSERT( 0 );
 8008b92:	f7ff fbbf 	bl	8008314 <vMBPAssert>
 8008b96:	e01f      	b.n	8008bd8 <eMBPSerialTxEnable+0x170>
            }

        }
        else
        {
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = NULL;
 8008b98:	2184      	movs	r1, #132	; 0x84
 8008b9a:	0049      	lsls	r1, r1, #1
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	605a      	str	r2, [r3, #4]
            /* The transmitter is disable when the last frame has been sent.
             * This is necessary for RS485 with a half-duplex bus.
             */
            switch ( pxSerialIntHdl->ubIdx )
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d110      	bne.n	8008bd0 <eMBPSerialTxEnable+0x168>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Disable transmit register empty interrupt */
								__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8008bae:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <eMBPSerialTxEnable+0x18c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <eMBPSerialTxEnable+0x18c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2180      	movs	r1, #128	; 0x80
 8008bba:	438a      	bics	r2, r1
 8008bbc:	601a      	str	r2, [r3, #0]
                /* Enable transmit complete interrupt */
								__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <eMBPSerialTxEnable+0x18c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <eMBPSerialTxEnable+0x18c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2140      	movs	r1, #64	; 0x40
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	601a      	str	r2, [r3, #0]
                break;
 8008bce:	e003      	b.n	8008bd8 <eMBPSerialTxEnable+0x170>
#endif
            default:
                MBP_ASSERT( 0 );
 8008bd0:	f7ff fba0 	bl	8008314 <vMBPAssert>
 8008bd4:	e000      	b.n	8008bd8 <eMBPSerialTxEnable+0x170>
            }
        }
 8008bd6:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008bd8:	f7ff fbb6 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8008bdc:	2310      	movs	r3, #16
 8008bde:	33ff      	adds	r3, #255	; 0xff
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	781b      	ldrb	r3, [r3, #0]
}
 8008be4:	0018      	movs	r0, r3
 8008be6:	46bd      	mov	sp, r7
 8008be8:	b044      	add	sp, #272	; 0x110
 8008bea:	bdb0      	pop	{r4, r5, r7, pc}
 8008bec:	20001724 	.word	0x20001724
 8008bf0:	fffffef8 	.word	0xfffffef8
 8008bf4:	200000ac 	.word	0x200000ac

08008bf8 <eMBPSerialRxEnable>:

eMBErrorCode
eMBPSerialRxEnable( xMBPSerialHandle xSerialHdl, pvMBPSerialReceiverCB pvMBMReceiveFN )
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008c02:	240f      	movs	r4, #15
 8008c04:	193b      	adds	r3, r7, r4
 8008c06:	2202      	movs	r2, #2
 8008c08:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008c0e:	f7ff fb94 	bl	800833a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d030      	beq.n	8008c7a <eMBPSerialRxEnable+0x82>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	011a      	lsls	r2, r3, #4
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <eMBPSerialRxEnable+0x9c>)
 8008c20:	18d3      	adds	r3, r2, r3
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d128      	bne.n	8008c7a <eMBPSerialRxEnable+0x82>
    {
        eStatus = MB_ENOERR;
 8008c28:	193b      	adds	r3, r7, r4
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
        if( NULL != pvMBMReceiveFN )
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d018      	beq.n	8008c66 <eMBPSerialRxEnable+0x6e>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pvMBMReceiveFN );
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <eMBPSerialRxEnable+0x48>
 8008c3c:	f7ff fb6a 	bl	8008314 <vMBPAssert>
            pxSerialIntHdl->pvMBMReceiveFN = pvMBMReceiveFN;
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d108      	bne.n	8008c60 <eMBPSerialRxEnable+0x68>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Enable USART 1 receive interrupt */
                __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <eMBPSerialRxEnable+0xa0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <eMBPSerialRxEnable+0xa0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2120      	movs	r1, #32
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	601a      	str	r2, [r3, #0]
                break;
 8008c5e:	e00f      	b.n	8008c80 <eMBPSerialRxEnable+0x88>
#endif
            default:
                MBP_ASSERT( 0 );
 8008c60:	f7ff fb58 	bl	8008314 <vMBPAssert>
 8008c64:	e00c      	b.n	8008c80 <eMBPSerialRxEnable+0x88>
            }
        }
        else
        {
            pxSerialIntHdl->pvMBMReceiveFN = NULL;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <eMBPSerialRxEnable+0x86>
                //__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
								
                break;
#endif
            default:
                MBP_ASSERT( 0 );
 8008c74:	f7ff fb4e 	bl	8008314 <vMBPAssert>
 8008c78:	e002      	b.n	8008c80 <eMBPSerialRxEnable+0x88>
            }
        }
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	e000      	b.n	8008c80 <eMBPSerialRxEnable+0x88>
                break;
 8008c7e:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008c80:	f7ff fb62 	bl	8008348 <vMBPExitCritical>
    return eStatus;
 8008c84:	230f      	movs	r3, #15
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	781b      	ldrb	r3, [r3, #0]
}
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	b005      	add	sp, #20
 8008c90:	bd90      	pop	{r4, r7, pc}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	20001724 	.word	0x20001724
 8008c98:	200000ac 	.word	0x200000ac

08008c9c <__libc_init_array>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	4d0c      	ldr	r5, [pc, #48]	; (8008cd4 <__libc_init_array+0x38>)
 8008ca2:	4c0d      	ldr	r4, [pc, #52]	; (8008cd8 <__libc_init_array+0x3c>)
 8008ca4:	1b64      	subs	r4, r4, r5
 8008ca6:	10a4      	asrs	r4, r4, #2
 8008ca8:	42a6      	cmp	r6, r4
 8008caa:	d109      	bne.n	8008cc0 <__libc_init_array+0x24>
 8008cac:	2600      	movs	r6, #0
 8008cae:	f000 f82b 	bl	8008d08 <_init>
 8008cb2:	4d0a      	ldr	r5, [pc, #40]	; (8008cdc <__libc_init_array+0x40>)
 8008cb4:	4c0a      	ldr	r4, [pc, #40]	; (8008ce0 <__libc_init_array+0x44>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	42a6      	cmp	r6, r4
 8008cbc:	d105      	bne.n	8008cca <__libc_init_array+0x2e>
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	00b3      	lsls	r3, r6, #2
 8008cc2:	58eb      	ldr	r3, [r5, r3]
 8008cc4:	4798      	blx	r3
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7ee      	b.n	8008ca8 <__libc_init_array+0xc>
 8008cca:	00b3      	lsls	r3, r6, #2
 8008ccc:	58eb      	ldr	r3, [r5, r3]
 8008cce:	4798      	blx	r3
 8008cd0:	3601      	adds	r6, #1
 8008cd2:	e7f2      	b.n	8008cba <__libc_init_array+0x1e>
 8008cd4:	08009030 	.word	0x08009030
 8008cd8:	08009030 	.word	0x08009030
 8008cdc:	08009030 	.word	0x08009030
 8008ce0:	08009034 	.word	0x08009034

08008ce4 <memcpy>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d100      	bne.n	8008cee <memcpy+0xa>
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	5ccc      	ldrb	r4, [r1, r3]
 8008cf0:	54c4      	strb	r4, [r0, r3]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	e7f8      	b.n	8008ce8 <memcpy+0x4>

08008cf6 <memset>:
 8008cf6:	0003      	movs	r3, r0
 8008cf8:	1882      	adds	r2, r0, r2
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d100      	bne.n	8008d00 <memset+0xa>
 8008cfe:	4770      	bx	lr
 8008d00:	7019      	strb	r1, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	e7f9      	b.n	8008cfa <memset+0x4>
	...

08008d08 <_init>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr

08008d14 <_fini>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1a:	bc08      	pop	{r3}
 8008d1c:	469e      	mov	lr, r3
 8008d1e:	4770      	bx	lr
