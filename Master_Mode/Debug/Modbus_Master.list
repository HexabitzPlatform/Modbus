
Modbus_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf8c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800d04c  0800d04c  0001d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d398  0800d398  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800d398  0800d398  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d398  0800d398  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d398  0800d398  0001d398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005100  20000068  0800d408  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005168  0800d408  00025168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbc7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005967  00000000  00000000  0003cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00042608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f2  00000000  00000000  00044028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f63  00000000  00000000  0004541a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a78e  00000000  00000000  0006837d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6859  00000000  00000000  00092b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bf0  00000000  00000000  00149364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014ef54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d034 	.word	0x0800d034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800d034 	.word	0x0800d034

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2203      	movs	r2, #3
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fff0 	bl	8002230 <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 fe82 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000084 	.word	0x20000084
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MX_DMA_Init+0x70>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MX_DMA_Init+0x70>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_DMA_Init+0x70>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_DMA_Init+0x70>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_DMA_Init+0x70>)
 80002c8:	2102      	movs	r1, #2
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_DMA_Init+0x70>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	2202      	movs	r2, #2
 80002d4:	4013      	ands	r3, r2
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	2009      	movs	r0, #9
 80002e0:	f001 ff70 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002e4:	2009      	movs	r0, #9
 80002e6:	f001 ff82 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2103      	movs	r1, #3
 80002ee:	200a      	movs	r0, #10
 80002f0:	f001 ff68 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f001 ff7a 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	200b      	movs	r0, #11
 8000300:	f001 ff60 	bl	80021c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000304:	200b      	movs	r0, #11
 8000306:	f001 ff72 	bl	80021ee <HAL_NVIC_EnableIRQ>

}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000318:	b5b0      	push	{r4, r5, r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
  uint16_t PageStatusA = 6, PageStatusB = 6;
 800031e:	240a      	movs	r4, #10
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2206      	movs	r2, #6
 8000324:	801a      	strh	r2, [r3, #0]
 8000326:	2508      	movs	r5, #8
 8000328:	197b      	adds	r3, r7, r5
 800032a:	2206      	movs	r2, #6
 800032c:	801a      	strh	r2, [r3, #0]
  uint16_t VarIdx = 0;
 800032e:	230e      	movs	r3, #14
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	2200      	movs	r2, #0
 8000334:	801a      	strh	r2, [r3, #0]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000336:	1dbb      	adds	r3, r7, #6
 8000338:	2200      	movs	r2, #0
 800033a:	801a      	strh	r2, [r3, #0]
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	801a      	strh	r2, [r3, #0]
  int16_t x = -1;
 8000342:	230c      	movs	r3, #12
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	2201      	movs	r2, #1
 8000348:	4252      	negs	r2, r2
 800034a:	801a      	strh	r2, [r3, #0]
	uint16_t FlashStatus = HAL_ERROR;
 800034c:	1cbb      	adds	r3, r7, #2
 800034e:	2201      	movs	r2, #1
 8000350:	801a      	strh	r2, [r3, #0]
	
	HAL_FLASH_Unlock();
 8000352:	f002 fdb1 	bl	8002eb8 <HAL_FLASH_Unlock>
	
  /* Get PageA status */
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8000356:	4ac2      	ldr	r2, [pc, #776]	; (8000660 <EE_Init+0x348>)
 8000358:	193b      	adds	r3, r7, r4
 800035a:	8812      	ldrh	r2, [r2, #0]
 800035c:	801a      	strh	r2, [r3, #0]
  /* Get PageB status */
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 800035e:	4ac1      	ldr	r2, [pc, #772]	; (8000664 <EE_Init+0x34c>)
 8000360:	197b      	adds	r3, r7, r5
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	801a      	strh	r2, [r3, #0]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatusA)
 8000366:	193b      	adds	r3, r7, r4
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	4abf      	ldr	r2, [pc, #764]	; (8000668 <EE_Init+0x350>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d00c      	beq.n	800038a <EE_Init+0x72>
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	0252      	lsls	r2, r2, #9
 8000374:	4293      	cmp	r3, r2
 8000376:	db00      	blt.n	800037a <EE_Init+0x62>
 8000378:	e2ab      	b.n	80008d2 <EE_Init+0x5ba>
 800037a:	2b00      	cmp	r3, #0
 800037c:	d100      	bne.n	8000380 <EE_Init+0x68>
 800037e:	e1be      	b.n	80006fe <EE_Init+0x3e6>
 8000380:	4aba      	ldr	r2, [pc, #744]	; (800066c <EE_Init+0x354>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d100      	bne.n	8000388 <EE_Init+0x70>
 8000386:	e09b      	b.n	80004c0 <EE_Init+0x1a8>
 8000388:	e2a3      	b.n	80008d2 <EE_Init+0x5ba>
  {
    case ERASED:
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800038a:	2308      	movs	r3, #8
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d12e      	bne.n	80003f2 <EE_Init+0xda>
      {
        /* Erase PageA */
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8000394:	4bb2      	ldr	r3, [pc, #712]	; (8000660 <EE_Init+0x348>)
 8000396:	0018      	movs	r0, r3
 8000398:	f002 fe4e 	bl	8003038 <FLASH_PageErase>
        /* If erase operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800039c:	4bb4      	ldr	r3, [pc, #720]	; (8000670 <EE_Init+0x358>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fdda 	bl	8002f58 <FLASH_WaitForLastOperation>
 80003a4:	0003      	movs	r3, r0
 80003a6:	001a      	movs	r2, r3
 80003a8:	1cbb      	adds	r3, r7, #2
 80003aa:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80003ac:	1cbb      	adds	r3, r7, #2
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <EE_Init+0xa4>
        {
          return pFlash.ErrorCode;
 80003b4:	4baf      	ldr	r3, [pc, #700]	; (8000674 <EE_Init+0x35c>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	e2a8      	b.n	800090e <EE_Init+0x5f6>
        }
				else
				{
					/* Erase PageA */
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80003bc:	4bae      	ldr	r3, [pc, #696]	; (8000678 <EE_Init+0x360>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 fe3a 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80003c4:	4baa      	ldr	r3, [pc, #680]	; (8000670 <EE_Init+0x358>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 fdc6 	bl	8002f58 <FLASH_WaitForLastOperation>
 80003cc:	0003      	movs	r3, r0
 80003ce:	001a      	movs	r2, r3
 80003d0:	1cbb      	adds	r3, r7, #2
 80003d2:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 80003d4:	1cbb      	adds	r3, r7, #2
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d003      	beq.n	80003e4 <EE_Init+0xcc>
					{
						return pFlash.ErrorCode;
 80003dc:	4ba5      	ldr	r3, [pc, #660]	; (8000674 <EE_Init+0x35c>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	e294      	b.n	800090e <EE_Init+0x5f6>
					}
					else
					{			
						/* Operation is completed, disable the PER Bit */
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80003e4:	4ba5      	ldr	r3, [pc, #660]	; (800067c <EE_Init+0x364>)
 80003e6:	691a      	ldr	r2, [r3, #16]
 80003e8:	4ba4      	ldr	r3, [pc, #656]	; (800067c <EE_Init+0x364>)
 80003ea:	2102      	movs	r1, #2
 80003ec:	438a      	bics	r2, r1
 80003ee:	611a      	str	r2, [r3, #16]
				if(FlashStatus != HAL_OK)
        {
          return pFlash.ErrorCode;
        }
      }
      break;
 80003f0:	e283      	b.n	80008fa <EE_Init+0x5e2>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 80003f2:	2308      	movs	r3, #8
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	4a9c      	ldr	r2, [pc, #624]	; (800066c <EE_Init+0x354>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d14a      	bne.n	8000494 <EE_Init+0x17c>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80003fe:	4b98      	ldr	r3, [pc, #608]	; (8000660 <EE_Init+0x348>)
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fe19 	bl	8003038 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000406:	4b9a      	ldr	r3, [pc, #616]	; (8000670 <EE_Init+0x358>)
 8000408:	0018      	movs	r0, r3
 800040a:	f002 fda5 	bl	8002f58 <FLASH_WaitForLastOperation>
 800040e:	0003      	movs	r3, r0
 8000410:	001a      	movs	r2, r3
 8000412:	1cbb      	adds	r3, r7, #2
 8000414:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <EE_Init+0x10e>
          return pFlash.ErrorCode;
 800041e:	4b95      	ldr	r3, [pc, #596]	; (8000674 <EE_Init+0x35c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	b29b      	uxth	r3, r3
 8000424:	e273      	b.n	800090e <EE_Init+0x5f6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8000426:	4b94      	ldr	r3, [pc, #592]	; (8000678 <EE_Init+0x360>)
 8000428:	0018      	movs	r0, r3
 800042a:	f002 fe05 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800042e:	4b90      	ldr	r3, [pc, #576]	; (8000670 <EE_Init+0x358>)
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fd91 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000436:	0003      	movs	r3, r0
 8000438:	001a      	movs	r2, r3
 800043a:	1cbb      	adds	r3, r7, #2
 800043c:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 800043e:	1cbb      	adds	r3, r7, #2
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <EE_Init+0x136>
						return pFlash.ErrorCode;
 8000446:	4b8b      	ldr	r3, [pc, #556]	; (8000674 <EE_Init+0x35c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	b29b      	uxth	r3, r3
 800044c:	e25f      	b.n	800090e <EE_Init+0x5f6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800044e:	4b8b      	ldr	r3, [pc, #556]	; (800067c <EE_Init+0x364>)
 8000450:	691a      	ldr	r2, [r3, #16]
 8000452:	4b8a      	ldr	r3, [pc, #552]	; (800067c <EE_Init+0x364>)
 8000454:	2102      	movs	r1, #2
 8000456:	438a      	bics	r2, r1
 8000458:	611a      	str	r2, [r3, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800045a:	4982      	ldr	r1, [pc, #520]	; (8000664 <EE_Init+0x34c>)
 800045c:	2200      	movs	r2, #0
 800045e:	2300      	movs	r3, #0
 8000460:	2001      	movs	r0, #1
 8000462:	f002 fb9b 	bl	8002b9c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000466:	4b82      	ldr	r3, [pc, #520]	; (8000670 <EE_Init+0x358>)
 8000468:	0018      	movs	r0, r3
 800046a:	f002 fd75 	bl	8002f58 <FLASH_WaitForLastOperation>
 800046e:	0003      	movs	r3, r0
 8000470:	001a      	movs	r2, r3
 8000472:	1cbb      	adds	r3, r7, #2
 8000474:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000476:	1cbb      	adds	r3, r7, #2
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d003      	beq.n	8000486 <EE_Init+0x16e>
          return pFlash.ErrorCode;
 800047e:	4b7d      	ldr	r3, [pc, #500]	; (8000674 <EE_Init+0x35c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	b29b      	uxth	r3, r3
 8000484:	e243      	b.n	800090e <EE_Init+0x5f6>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000486:	4b7d      	ldr	r3, [pc, #500]	; (800067c <EE_Init+0x364>)
 8000488:	691a      	ldr	r2, [r3, #16]
 800048a:	4b7c      	ldr	r3, [pc, #496]	; (800067c <EE_Init+0x364>)
 800048c:	2101      	movs	r1, #1
 800048e:	438a      	bics	r2, r1
 8000490:	611a      	str	r2, [r3, #16]
      break;
 8000492:	e232      	b.n	80008fa <EE_Init+0x5e2>
        FlashStatus = EE_Format();
 8000494:	1cbc      	adds	r4, r7, #2
 8000496:	f000 fab3 	bl	8000a00 <EE_Format>
 800049a:	0003      	movs	r3, r0
 800049c:	8023      	strh	r3, [r4, #0]
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800049e:	4b74      	ldr	r3, [pc, #464]	; (8000670 <EE_Init+0x358>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fd59 	bl	8002f58 <FLASH_WaitForLastOperation>
 80004a6:	0003      	movs	r3, r0
 80004a8:	001a      	movs	r2, r3
 80004aa:	1cbb      	adds	r3, r7, #2
 80004ac:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80004ae:	1cbb      	adds	r3, r7, #2
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d100      	bne.n	80004b8 <EE_Init+0x1a0>
 80004b6:	e220      	b.n	80008fa <EE_Init+0x5e2>
          return pFlash.ErrorCode;
 80004b8:	4b6e      	ldr	r3, [pc, #440]	; (8000674 <EE_Init+0x35c>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	e226      	b.n	800090e <EE_Init+0x5f6>

    case RECEIVE_DATA:
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 80004c0:	2308      	movs	r3, #8
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d000      	beq.n	80004cc <EE_Init+0x1b4>
 80004ca:	e09a      	b.n	8000602 <EE_Init+0x2ea>
      {
        /* Transfer data from PageB to PageA */
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80004cc:	230e      	movs	r3, #14
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2201      	movs	r2, #1
 80004d2:	801a      	strh	r2, [r3, #0]
 80004d4:	e043      	b.n	800055e <EE_Init+0x246>
        {
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 80004d6:	4b6a      	ldr	r3, [pc, #424]	; (8000680 <EE_Init+0x368>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	210e      	movs	r1, #14
 80004de:	187a      	adds	r2, r7, r1
 80004e0:	8812      	ldrh	r2, [r2, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d104      	bne.n	80004f0 <EE_Init+0x1d8>
          {
            x = VarIdx;
 80004e6:	230c      	movs	r3, #12
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	801a      	strh	r2, [r3, #0]
          }
          if (VarIdx != x)
 80004f0:	250e      	movs	r5, #14
 80004f2:	197b      	adds	r3, r7, r5
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	230c      	movs	r3, #12
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	5e5b      	ldrsh	r3, [r3, r1]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d027      	beq.n	8000552 <EE_Init+0x23a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8000502:	1d3c      	adds	r4, r7, #4
 8000504:	4a5f      	ldr	r2, [pc, #380]	; (8000684 <EE_Init+0x36c>)
 8000506:	197b      	adds	r3, r7, r5
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fa17 	bl	8000940 <EE_ReadVariable>
 8000512:	0003      	movs	r3, r0
 8000514:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d019      	beq.n	8000552 <EE_Init+0x23a>
            {
              /* Transfer the variable to the PageA */
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 800051e:	4b59      	ldr	r3, [pc, #356]	; (8000684 <EE_Init+0x36c>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	1dbc      	adds	r4, r7, #6
 8000524:	197b      	adds	r3, r7, r5
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fb50 	bl	8000bd0 <EE_VerifyPageFullWriteVariable>
 8000530:	0003      	movs	r3, r0
 8000532:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
							/* Wait for last operation to be completed */
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000534:	4b4e      	ldr	r3, [pc, #312]	; (8000670 <EE_Init+0x358>)
 8000536:	0018      	movs	r0, r3
 8000538:	f002 fd0e 	bl	8002f58 <FLASH_WaitForLastOperation>
 800053c:	0003      	movs	r3, r0
 800053e:	001a      	movs	r2, r3
 8000540:	1cbb      	adds	r3, r7, #2
 8000542:	801a      	strh	r2, [r3, #0]
							if(FlashStatus != HAL_OK)
 8000544:	1cbb      	adds	r3, r7, #2
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <EE_Init+0x23a>
              {
                return EepromStatus;
 800054c:	1dbb      	adds	r3, r7, #6
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	e1dd      	b.n	800090e <EE_Init+0x5f6>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8000552:	210e      	movs	r1, #14
 8000554:	187b      	adds	r3, r7, r1
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	187b      	adds	r3, r7, r1
 800055a:	3201      	adds	r2, #1
 800055c:	801a      	strh	r2, [r3, #0]
 800055e:	230e      	movs	r3, #14
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	429a      	cmp	r2, r3
 800056a:	d9b4      	bls.n	80004d6 <EE_Init+0x1be>
              }
            }
          }
        }
        /* Mark PageA as valid */
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 800056c:	493c      	ldr	r1, [pc, #240]	; (8000660 <EE_Init+0x348>)
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	2001      	movs	r0, #1
 8000574:	f002 fb12 	bl	8002b9c <HAL_FLASH_Program>
        /* If program operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000578:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <EE_Init+0x358>)
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fcec 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	1cbb      	adds	r3, r7, #2
 8000586:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000588:	1cbb      	adds	r3, r7, #2
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <EE_Init+0x280>
        {
          return pFlash.ErrorCode;
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <EE_Init+0x35c>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	b29b      	uxth	r3, r3
 8000596:	e1ba      	b.n	800090e <EE_Init+0x5f6>
        }
				else
				{
				  /* If the program operation is completed, disable the PG Bit */
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000598:	4b38      	ldr	r3, [pc, #224]	; (800067c <EE_Init+0x364>)
 800059a:	691a      	ldr	r2, [r3, #16]
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <EE_Init+0x364>)
 800059e:	2101      	movs	r1, #1
 80005a0:	438a      	bics	r2, r1
 80005a2:	611a      	str	r2, [r3, #16]
				}
        /* Erase PageB */
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80005a4:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <EE_Init+0x34c>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fd46 	bl	8003038 <FLASH_PageErase>
        /* If erase operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <EE_Init+0x358>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 fcd2 	bl	8002f58 <FLASH_WaitForLastOperation>
 80005b4:	0003      	movs	r3, r0
 80005b6:	001a      	movs	r2, r3
 80005b8:	1cbb      	adds	r3, r7, #2
 80005ba:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80005bc:	1cbb      	adds	r3, r7, #2
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d003      	beq.n	80005cc <EE_Init+0x2b4>
        {
          return pFlash.ErrorCode;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <EE_Init+0x35c>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	e1a0      	b.n	800090e <EE_Init+0x5f6>
        }
				else
				{
					/* Erase PageB */
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80005cc:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <EE_Init+0x370>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 fd32 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <EE_Init+0x358>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 fcbe 	bl	8002f58 <FLASH_WaitForLastOperation>
 80005dc:	0003      	movs	r3, r0
 80005de:	001a      	movs	r2, r3
 80005e0:	1cbb      	adds	r3, r7, #2
 80005e2:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 80005e4:	1cbb      	adds	r3, r7, #2
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <EE_Init+0x2dc>
					{
						return pFlash.ErrorCode;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <EE_Init+0x35c>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	e18c      	b.n	800090e <EE_Init+0x5f6>
					}
					else
					{
						/* Operation is completed, disable the PER Bit */
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <EE_Init+0x364>)
 80005f6:	691a      	ldr	r2, [r3, #16]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <EE_Init+0x364>)
 80005fa:	2102      	movs	r1, #2
 80005fc:	438a      	bics	r2, r1
 80005fe:	611a      	str	r2, [r3, #16]
				if(FlashStatus != HAL_OK)
        {
          return pFlash.ErrorCode;
        }
      }
      break;
 8000600:	e17d      	b.n	80008fe <EE_Init+0x5e6>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8000602:	2308      	movs	r3, #8
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <EE_Init+0x350>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d161      	bne.n	80006d2 <EE_Init+0x3ba>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <EE_Init+0x34c>)
 8000610:	0018      	movs	r0, r3
 8000612:	f002 fd11 	bl	8003038 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <EE_Init+0x358>)
 8000618:	0018      	movs	r0, r3
 800061a:	f002 fc9d 	bl	8002f58 <FLASH_WaitForLastOperation>
 800061e:	0003      	movs	r3, r0
 8000620:	001a      	movs	r2, r3
 8000622:	1cbb      	adds	r3, r7, #2
 8000624:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <EE_Init+0x31e>
          return pFlash.ErrorCode;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <EE_Init+0x35c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	b29b      	uxth	r3, r3
 8000634:	e16b      	b.n	800090e <EE_Init+0x5f6>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <EE_Init+0x370>)
 8000638:	0018      	movs	r0, r3
 800063a:	f002 fcfd 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <EE_Init+0x358>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fc89 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000646:	0003      	movs	r3, r0
 8000648:	001a      	movs	r2, r3
 800064a:	1cbb      	adds	r3, r7, #2
 800064c:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01a      	beq.n	800068c <EE_Init+0x374>
						return pFlash.ErrorCode;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <EE_Init+0x35c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	b29b      	uxth	r3, r3
 800065c:	e157      	b.n	800090e <EE_Init+0x5f6>
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	0801e000 	.word	0x0801e000
 8000664:	0801f000 	.word	0x0801f000
 8000668:	0000ffff 	.word	0x0000ffff
 800066c:	0000eeee 	.word	0x0000eeee
 8000670:	0000c350 	.word	0x0000c350
 8000674:	20000760 	.word	0x20000760
 8000678:	0801e800 	.word	0x0801e800
 800067c:	40022000 	.word	0x40022000
 8000680:	0801e006 	.word	0x0801e006
 8000684:	200000a8 	.word	0x200000a8
 8000688:	0801f800 	.word	0x0801f800
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800068c:	4ba2      	ldr	r3, [pc, #648]	; (8000918 <EE_Init+0x600>)
 800068e:	691a      	ldr	r2, [r3, #16]
 8000690:	4ba1      	ldr	r3, [pc, #644]	; (8000918 <EE_Init+0x600>)
 8000692:	2102      	movs	r1, #2
 8000694:	438a      	bics	r2, r1
 8000696:	611a      	str	r2, [r3, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8000698:	49a0      	ldr	r1, [pc, #640]	; (800091c <EE_Init+0x604>)
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	2001      	movs	r0, #1
 80006a0:	f002 fa7c 	bl	8002b9c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80006a4:	4b9e      	ldr	r3, [pc, #632]	; (8000920 <EE_Init+0x608>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fc56 	bl	8002f58 <FLASH_WaitForLastOperation>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	1cbb      	adds	r3, r7, #2
 80006b2:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80006b4:	1cbb      	adds	r3, r7, #2
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <EE_Init+0x3ac>
          return pFlash.ErrorCode;
 80006bc:	4b99      	ldr	r3, [pc, #612]	; (8000924 <EE_Init+0x60c>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	e124      	b.n	800090e <EE_Init+0x5f6>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80006c4:	4b94      	ldr	r3, [pc, #592]	; (8000918 <EE_Init+0x600>)
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	4b93      	ldr	r3, [pc, #588]	; (8000918 <EE_Init+0x600>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	438a      	bics	r2, r1
 80006ce:	611a      	str	r2, [r3, #16]
      break;
 80006d0:	e115      	b.n	80008fe <EE_Init+0x5e6>
        FlashStatus = EE_Format();
 80006d2:	1cbc      	adds	r4, r7, #2
 80006d4:	f000 f994 	bl	8000a00 <EE_Format>
 80006d8:	0003      	movs	r3, r0
 80006da:	8023      	strh	r3, [r4, #0]
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80006dc:	4b90      	ldr	r3, [pc, #576]	; (8000920 <EE_Init+0x608>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fc3a 	bl	8002f58 <FLASH_WaitForLastOperation>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	1cbb      	adds	r3, r7, #2
 80006ea:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80006ec:	1cbb      	adds	r3, r7, #2
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d100      	bne.n	80006f6 <EE_Init+0x3de>
 80006f4:	e103      	b.n	80008fe <EE_Init+0x5e6>
          return pFlash.ErrorCode;
 80006f6:	4b8b      	ldr	r3, [pc, #556]	; (8000924 <EE_Init+0x60c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	e107      	b.n	800090e <EE_Init+0x5f6>

    case VALID_PAGE:
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80006fe:	2308      	movs	r3, #8
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d114      	bne.n	8000732 <EE_Init+0x41a>
      {
        /* Erase both PageA and PageB and set PageA as valid page */
        FlashStatus = EE_Format();
 8000708:	1cbc      	adds	r4, r7, #2
 800070a:	f000 f979 	bl	8000a00 <EE_Format>
 800070e:	0003      	movs	r3, r0
 8000710:	8023      	strh	r3, [r4, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000712:	4b83      	ldr	r3, [pc, #524]	; (8000920 <EE_Init+0x608>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 fc1f 	bl	8002f58 <FLASH_WaitForLastOperation>
 800071a:	0003      	movs	r3, r0
 800071c:	001a      	movs	r2, r3
 800071e:	1cbb      	adds	r3, r7, #2
 8000720:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000722:	1cbb      	adds	r3, r7, #2
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <EE_Init+0x414>
 800072a:	e0ea      	b.n	8000902 <EE_Init+0x5ea>
        {
          return FlashStatus;
 800072c:	1cbb      	adds	r3, r7, #2
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	e0ed      	b.n	800090e <EE_Init+0x5f6>
        }
      }
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8000732:	2308      	movs	r3, #8
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4a7b      	ldr	r2, [pc, #492]	; (8000928 <EE_Init+0x610>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d12e      	bne.n	800079c <EE_Init+0x484>
      {
        /* Erase PageB */
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800073e:	4b7b      	ldr	r3, [pc, #492]	; (800092c <EE_Init+0x614>)
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fc79 	bl	8003038 <FLASH_PageErase>
        /* If erase operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000746:	4b76      	ldr	r3, [pc, #472]	; (8000920 <EE_Init+0x608>)
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fc05 	bl	8002f58 <FLASH_WaitForLastOperation>
 800074e:	0003      	movs	r3, r0
 8000750:	001a      	movs	r2, r3
 8000752:	1cbb      	adds	r3, r7, #2
 8000754:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000756:	1cbb      	adds	r3, r7, #2
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <EE_Init+0x44e>
        {
          return pFlash.ErrorCode;
 800075e:	4b71      	ldr	r3, [pc, #452]	; (8000924 <EE_Init+0x60c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	b29b      	uxth	r3, r3
 8000764:	e0d3      	b.n	800090e <EE_Init+0x5f6>
        }
				else
				{
					/* Erase PageB */
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8000766:	4b72      	ldr	r3, [pc, #456]	; (8000930 <EE_Init+0x618>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fc65 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800076e:	4b6c      	ldr	r3, [pc, #432]	; (8000920 <EE_Init+0x608>)
 8000770:	0018      	movs	r0, r3
 8000772:	f002 fbf1 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000776:	0003      	movs	r3, r0
 8000778:	001a      	movs	r2, r3
 800077a:	1cbb      	adds	r3, r7, #2
 800077c:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 800077e:	1cbb      	adds	r3, r7, #2
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <EE_Init+0x476>
					{
						return pFlash.ErrorCode;
 8000786:	4b67      	ldr	r3, [pc, #412]	; (8000924 <EE_Init+0x60c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	b29b      	uxth	r3, r3
 800078c:	e0bf      	b.n	800090e <EE_Init+0x5f6>
					}
					else
					{					
						/* Operation is completed, disable the PER Bit */
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800078e:	4b62      	ldr	r3, [pc, #392]	; (8000918 <EE_Init+0x600>)
 8000790:	691a      	ldr	r2, [r3, #16]
 8000792:	4b61      	ldr	r3, [pc, #388]	; (8000918 <EE_Init+0x600>)
 8000794:	2102      	movs	r1, #2
 8000796:	438a      	bics	r2, r1
 8000798:	611a      	str	r2, [r3, #16]
						/* Operation is completed, disable the PER Bit */
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
					}
				}
      }
      break;
 800079a:	e0b2      	b.n	8000902 <EE_Init+0x5ea>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 800079c:	230e      	movs	r3, #14
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2201      	movs	r2, #1
 80007a2:	801a      	strh	r2, [r3, #0]
 80007a4:	e043      	b.n	800082e <EE_Init+0x516>
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 80007a6:	4b63      	ldr	r3, [pc, #396]	; (8000934 <EE_Init+0x61c>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	210e      	movs	r1, #14
 80007ae:	187a      	adds	r2, r7, r1
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d104      	bne.n	80007c0 <EE_Init+0x4a8>
            x = VarIdx;
 80007b6:	230c      	movs	r3, #12
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	187a      	adds	r2, r7, r1
 80007bc:	8812      	ldrh	r2, [r2, #0]
 80007be:	801a      	strh	r2, [r3, #0]
          if (VarIdx != x)
 80007c0:	250e      	movs	r5, #14
 80007c2:	197b      	adds	r3, r7, r5
 80007c4:	881a      	ldrh	r2, [r3, #0]
 80007c6:	230c      	movs	r3, #12
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	5e5b      	ldrsh	r3, [r3, r1]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d027      	beq.n	8000822 <EE_Init+0x50a>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80007d2:	1d3c      	adds	r4, r7, #4
 80007d4:	4a58      	ldr	r2, [pc, #352]	; (8000938 <EE_Init+0x620>)
 80007d6:	197b      	adds	r3, r7, r5
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f8af 	bl	8000940 <EE_ReadVariable>
 80007e2:	0003      	movs	r3, r0
 80007e4:	8023      	strh	r3, [r4, #0]
            if (ReadStatus != 0x1)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d019      	beq.n	8000822 <EE_Init+0x50a>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80007ee:	4b52      	ldr	r3, [pc, #328]	; (8000938 <EE_Init+0x620>)
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	1dbc      	adds	r4, r7, #6
 80007f4:	197b      	adds	r3, r7, r5
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f9e8 	bl	8000bd0 <EE_VerifyPageFullWriteVariable>
 8000800:	0003      	movs	r3, r0
 8000802:	8023      	strh	r3, [r4, #0]
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000804:	4b46      	ldr	r3, [pc, #280]	; (8000920 <EE_Init+0x608>)
 8000806:	0018      	movs	r0, r3
 8000808:	f002 fba6 	bl	8002f58 <FLASH_WaitForLastOperation>
 800080c:	0003      	movs	r3, r0
 800080e:	001a      	movs	r2, r3
 8000810:	1cbb      	adds	r3, r7, #2
 8000812:	801a      	strh	r2, [r3, #0]
							if(FlashStatus != HAL_OK)
 8000814:	1cbb      	adds	r3, r7, #2
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <EE_Init+0x50a>
                return EepromStatus;
 800081c:	1dbb      	adds	r3, r7, #6
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	e075      	b.n	800090e <EE_Init+0x5f6>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8000822:	210e      	movs	r1, #14
 8000824:	187b      	adds	r3, r7, r1
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	801a      	strh	r2, [r3, #0]
 800082e:	230e      	movs	r3, #14
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	429a      	cmp	r2, r3
 800083a:	d9b4      	bls.n	80007a6 <EE_Init+0x48e>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 800083c:	493b      	ldr	r1, [pc, #236]	; (800092c <EE_Init+0x614>)
 800083e:	2200      	movs	r2, #0
 8000840:	2300      	movs	r3, #0
 8000842:	2001      	movs	r0, #1
 8000844:	f002 f9aa 	bl	8002b9c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <EE_Init+0x608>)
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fb84 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000850:	0003      	movs	r3, r0
 8000852:	001a      	movs	r2, r3
 8000854:	1cbb      	adds	r3, r7, #2
 8000856:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 8000858:	1cbb      	adds	r3, r7, #2
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d003      	beq.n	8000868 <EE_Init+0x550>
          return pFlash.ErrorCode;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <EE_Init+0x60c>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	b29b      	uxth	r3, r3
 8000866:	e052      	b.n	800090e <EE_Init+0x5f6>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <EE_Init+0x600>)
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <EE_Init+0x600>)
 800086e:	2101      	movs	r1, #1
 8000870:	438a      	bics	r2, r1
 8000872:	611a      	str	r2, [r3, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <EE_Init+0x604>)
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fbde 	bl	8003038 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <EE_Init+0x608>)
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fb6a 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000884:	0003      	movs	r3, r0
 8000886:	001a      	movs	r2, r3
 8000888:	1cbb      	adds	r3, r7, #2
 800088a:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 800088c:	1cbb      	adds	r3, r7, #2
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <EE_Init+0x584>
          return pFlash.ErrorCode;
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <EE_Init+0x60c>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	b29b      	uxth	r3, r3
 800089a:	e038      	b.n	800090e <EE_Init+0x5f6>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <EE_Init+0x624>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f002 fbca 	bl	8003038 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <EE_Init+0x608>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fb56 	bl	8002f58 <FLASH_WaitForLastOperation>
 80008ac:	0003      	movs	r3, r0
 80008ae:	001a      	movs	r2, r3
 80008b0:	1cbb      	adds	r3, r7, #2
 80008b2:	801a      	strh	r2, [r3, #0]
					if(FlashStatus != HAL_OK)
 80008b4:	1cbb      	adds	r3, r7, #2
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <EE_Init+0x5ac>
						return pFlash.ErrorCode;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <EE_Init+0x60c>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	e024      	b.n	800090e <EE_Init+0x5f6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <EE_Init+0x600>)
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <EE_Init+0x600>)
 80008ca:	2102      	movs	r1, #2
 80008cc:	438a      	bics	r2, r1
 80008ce:	611a      	str	r2, [r3, #16]
      break;
 80008d0:	e017      	b.n	8000902 <EE_Init+0x5ea>

    default:  /* Any other state -> format eeprom */
      /* Erase both PageA and PageB and set PageA as valid page */
      FlashStatus = EE_Format();
 80008d2:	1cbc      	adds	r4, r7, #2
 80008d4:	f000 f894 	bl	8000a00 <EE_Format>
 80008d8:	0003      	movs	r3, r0
 80008da:	8023      	strh	r3, [r4, #0]
      /* If erase/program operation was failed, a Flash error code is returned */
				/* Wait for last operation to be completed */
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <EE_Init+0x608>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 fb3a 	bl	8002f58 <FLASH_WaitForLastOperation>
 80008e4:	0003      	movs	r3, r0
 80008e6:	001a      	movs	r2, r3
 80008e8:	1cbb      	adds	r3, r7, #2
 80008ea:	801a      	strh	r2, [r3, #0]
				if(FlashStatus != HAL_OK)
 80008ec:	1cbb      	adds	r3, r7, #2
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <EE_Init+0x5ee>
      {
        return FlashStatus;
 80008f4:	1cbb      	adds	r3, r7, #2
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	e009      	b.n	800090e <EE_Init+0x5f6>
      break;
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	e004      	b.n	8000908 <EE_Init+0x5f0>
      break;
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	e002      	b.n	8000908 <EE_Init+0x5f0>
      break;
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	e000      	b.n	8000908 <EE_Init+0x5f0>
      }
      break;
 8000906:	46c0      	nop			; (mov r8, r8)
  }

	HAL_FLASH_Lock();
 8000908:	f002 fafc 	bl	8002f04 <HAL_FLASH_Lock>
	
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b004      	add	sp, #16
 8000914:	bdb0      	pop	{r4, r5, r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40022000 	.word	0x40022000
 800091c:	0801e000 	.word	0x0801e000
 8000920:	0000c350 	.word	0x0000c350
 8000924:	20000760 	.word	0x20000760
 8000928:	0000ffff 	.word	0x0000ffff
 800092c:	0801f000 	.word	0x0801f000
 8000930:	0801f800 	.word	0x0801f800
 8000934:	0801f006 	.word	0x0801f006
 8000938:	200000a8 	.word	0x200000a8
 800093c:	0801e800 	.word	0x0801e800

08000940 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	1dbb      	adds	r3, r7, #6
 800094c:	801a      	strh	r2, [r3, #0]
  uint16_t ValidPage = PAGEA;
 800094e:	210e      	movs	r1, #14
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	801a      	strh	r2, [r3, #0]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000956:	230c      	movs	r3, #12
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <EE_ReadVariable+0xb4>)
 800095c:	801a      	strh	r2, [r3, #0]
 800095e:	2316      	movs	r3, #22
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	2201      	movs	r2, #1
 8000964:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0, PageStartAddress = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800096e:	000d      	movs	r5, r1
 8000970:	187c      	adds	r4, r7, r1
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f8d6 	bl	8000b24 <EE_FindValidPage>
 8000978:	0003      	movs	r3, r0
 800097a:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800097c:	197b      	adds	r3, r7, r5
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2bab      	cmp	r3, #171	; 0xab
 8000982:	d101      	bne.n	8000988 <EE_ReadVariable+0x48>
  {
    return  NO_VALID_PAGE;
 8000984:	23ab      	movs	r3, #171	; 0xab
 8000986:	e031      	b.n	80009ec <EE_ReadVariable+0xac>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000988:	220e      	movs	r2, #14
 800098a:	18bb      	adds	r3, r7, r2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	491a      	ldr	r1, [pc, #104]	; (80009f8 <EE_ReadVariable+0xb8>)
 8000990:	468c      	mov	ip, r1
 8000992:	4463      	add	r3, ip
 8000994:	02db      	lsls	r3, r3, #11
 8000996:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address - Each page is twice page size */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8000998:	18bb      	adds	r3, r7, r2
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	3302      	adds	r3, #2
 800099e:	02db      	lsls	r3, r3, #11
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <EE_ReadVariable+0xbc>)
 80009a2:	4694      	mov	ip, r2
 80009a4:	4463      	add	r3, ip
 80009a6:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80009a8:	e018      	b.n	80009dc <EE_ReadVariable+0x9c>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	210c      	movs	r1, #12
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	8812      	ldrh	r2, [r2, #0]
 80009b2:	801a      	strh	r2, [r3, #0]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	1dbb      	adds	r3, r7, #6
 80009b8:	8812      	ldrh	r2, [r2, #0]
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d10a      	bne.n	80009d6 <EE_ReadVariable+0x96>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	3b02      	subs	r3, #2
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80009cc:	2316      	movs	r3, #22
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]

      break;
 80009d4:	e007      	b.n	80009e6 <EE_ReadVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3b04      	subs	r3, #4
 80009da:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3302      	adds	r3, #2
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d8e1      	bhi.n	80009aa <EE_ReadVariable+0x6a>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80009e6:	2316      	movs	r3, #22
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	881b      	ldrh	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b006      	add	sp, #24
 80009f2:	bdb0      	pop	{r4, r5, r7, pc}
 80009f4:	00005555 	.word	0x00005555
 80009f8:	0001003c 	.word	0x0001003c
 80009fc:	0801dffe 	.word	0x0801dffe

08000a00 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
uint16_t EE_Format(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	
	HAL_FLASH_Unlock();
 8000a0c:	f002 fa54 	bl	8002eb8 <HAL_FLASH_Unlock>
	
	/* Erase PageA */
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8000a10:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <EE_Format+0x108>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fb10 	bl	8003038 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000a18:	1dfc      	adds	r4, r7, #7
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <EE_Format+0x10c>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fa9b 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000a22:	0003      	movs	r3, r0
 8000a24:	7023      	strb	r3, [r4, #0]
	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <EE_Format+0x36>
	{
		return pFlash.ErrorCode;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <EE_Format+0x110>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	e064      	b.n	8000b00 <EE_Format+0x100>
	}
	else
	{
		/* Erase PageA */
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <EE_Format+0x114>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fafd 	bl	8003038 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000a3e:	1dfc      	adds	r4, r7, #7
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <EE_Format+0x10c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 fa88 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
		if(FlashStatus != HAL_OK)
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <EE_Format+0x5c>
		{
			return pFlash.ErrorCode;
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <EE_Format+0x110>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	e051      	b.n	8000b00 <EE_Format+0x100>
		}
		else
		{			
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <EE_Format+0x118>)
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <EE_Format+0x118>)
 8000a62:	2102      	movs	r1, #2
 8000a64:	438a      	bics	r2, r1
 8000a66:	611a      	str	r2, [r3, #16]
		}
	}
	
	/* Set PageA as valid page: Write VALID_PAGE at Page0 base address */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8000a68:	4927      	ldr	r1, [pc, #156]	; (8000b08 <EE_Format+0x108>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f002 f894 	bl	8002b9c <HAL_FLASH_Program>

	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000a74:	1dfc      	adds	r4, r7, #7
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <EE_Format+0x10c>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f002 fa6d 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	7023      	strb	r3, [r4, #0]
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <EE_Format+0x92>
	{
		return pFlash.ErrorCode;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <EE_Format+0x110>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	e036      	b.n	8000b00 <EE_Format+0x100>
	}
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <EE_Format+0x118>)
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <EE_Format+0x118>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
	}
				
	/* Erase PageB */
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <EE_Format+0x11c>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 fac9 	bl	8003038 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000aa6:	1dfc      	adds	r4, r7, #7
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <EE_Format+0x10c>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fa54 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]
	/* If program operation was failed, a Flash error code is returned */
	if (FlashStatus != HAL_OK)
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <EE_Format+0xc4>
	{
		return pFlash.ErrorCode;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <EE_Format+0x110>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	e01d      	b.n	8000b00 <EE_Format+0x100>
	}
	else
	{
		/* Erase PageB */
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <EE_Format+0x120>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 fab6 	bl	8003038 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000acc:	1dfc      	adds	r4, r7, #7
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <EE_Format+0x10c>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fa41 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	7023      	strb	r3, [r4, #0]
		if(FlashStatus != HAL_OK)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <EE_Format+0xea>
		{
			return pFlash.ErrorCode;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <EE_Format+0x110>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	e00a      	b.n	8000b00 <EE_Format+0x100>
		}
		else
		{					
			/* If the program operation is completed, disable the PG Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <EE_Format+0x118>)
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <EE_Format+0x118>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	438a      	bics	r2, r1
 8000af4:	611a      	str	r2, [r3, #16]
		}
	}

	HAL_FLASH_Lock();
 8000af6:	f002 fa05 	bl	8002f04 <HAL_FLASH_Lock>
	
  /* Return Page1 erase operation status */
  return FlashStatus;
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b29b      	uxth	r3, r3
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	0801e000 	.word	0x0801e000
 8000b0c:	0000c350 	.word	0x0000c350
 8000b10:	20000760 	.word	0x20000760
 8000b14:	0801e800 	.word	0x0801e800
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	0801f000 	.word	0x0801f000
 8000b20:	0801f800 	.word	0x0801f800

08000b24 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGEA or PAGEB) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	701a      	strb	r2, [r3, #0]
  uint16_t PageStatusA = 6, PageStatusB = 6;
 8000b30:	210e      	movs	r1, #14
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2206      	movs	r2, #6
 8000b36:	801a      	strh	r2, [r3, #0]
 8000b38:	200c      	movs	r0, #12
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	2206      	movs	r2, #6
 8000b3e:	801a      	strh	r2, [r3, #0]

  /* Get PageA actual status */
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8000b40:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <EE_FindValidPage+0xa0>)
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	8812      	ldrh	r2, [r2, #0]
 8000b46:	801a      	strh	r2, [r3, #0]

  /* Get PageB actual status */
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <EE_FindValidPage+0xa4>)
 8000b4a:	183b      	adds	r3, r7, r0
 8000b4c:	8812      	ldrh	r2, [r2, #0]
 8000b4e:	801a      	strh	r2, [r3, #0]

  /* Write or read operation */
  switch (Operation)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01f      	beq.n	8000b98 <EE_FindValidPage+0x74>
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d12d      	bne.n	8000bb8 <EE_FindValidPage+0x94>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatusB == VALID_PAGE)
 8000b5c:	183b      	adds	r3, r7, r0
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d108      	bne.n	8000b76 <EE_FindValidPage+0x52>
      {
        /* PageA receiving data */
        if (PageStatusA == RECEIVE_DATA)
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <EE_FindValidPage+0xa8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <EE_FindValidPage+0x4e>
        {
          return PAGEA;         /* PageA valid */
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e023      	b.n	8000bba <EE_FindValidPage+0x96>
        }
        else
        {
          return PAGEB;         /* PageB valid */
 8000b72:	2302      	movs	r3, #2
 8000b74:	e021      	b.n	8000bba <EE_FindValidPage+0x96>
        }
      }
      else if (PageStatusA == VALID_PAGE)
 8000b76:	230e      	movs	r3, #14
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <EE_FindValidPage+0x70>
      {
        /* PageB receiving data */
        if (PageStatusB == RECEIVE_DATA)
 8000b80:	230c      	movs	r3, #12
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <EE_FindValidPage+0xa8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <EE_FindValidPage+0x6c>
        {
          return PAGEB;         /* PageB valid */
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e014      	b.n	8000bba <EE_FindValidPage+0x96>
        }
        else
        {
          return PAGEA;         /* PageA valid */
 8000b90:	2300      	movs	r3, #0
 8000b92:	e012      	b.n	8000bba <EE_FindValidPage+0x96>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b94:	23ab      	movs	r3, #171	; 0xab
 8000b96:	e010      	b.n	8000bba <EE_FindValidPage+0x96>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatusA == VALID_PAGE)
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <EE_FindValidPage+0x82>
      {
        return PAGEA;           /* PageA valid */
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e009      	b.n	8000bba <EE_FindValidPage+0x96>
      }
      else if (PageStatusB == VALID_PAGE)
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <EE_FindValidPage+0x90>
      {
        return PAGEB;           /* PageB valid */
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <EE_FindValidPage+0x96>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000bb4:	23ab      	movs	r3, #171	; 0xab
 8000bb6:	e000      	b.n	8000bba <EE_FindValidPage+0x96>
      }

    default:
      return PAGEA;             /* PageA valid */
 8000bb8:	2300      	movs	r3, #0
  }
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	0801e000 	.word	0x0801e000
 8000bc8:	0801f000 	.word	0x0801f000
 8000bcc:	0000eeee 	.word	0x0000eeee

08000bd0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	230e      	movs	r3, #14
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	801a      	strh	r2, [r3, #0]
 8000bde:	230c      	movs	r3, #12
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	1c0a      	adds	r2, r1, #0
 8000be4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000be6:	2313      	movs	r3, #19
 8000be8:	2108      	movs	r1, #8
 8000bea:	185b      	adds	r3, r3, r1
 8000bec:	19db      	adds	r3, r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
  uint16_t ValidPage = PAGEA;
 8000bf2:	2610      	movs	r6, #16
 8000bf4:	1873      	adds	r3, r6, r1
 8000bf6:	19db      	adds	r3, r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	801a      	strh	r2, [r3, #0]
  uint32_t Address = 0, PageEndAddress = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
	
	HAL_FLASH_Unlock();
 8000c04:	f002 f958 	bl	8002eb8 <HAL_FLASH_Unlock>

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000c08:	2108      	movs	r1, #8
 8000c0a:	1873      	adds	r3, r6, r1
 8000c0c:	19de      	adds	r6, r3, r7
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ff88 	bl	8000b24 <EE_FindValidPage>
 8000c14:	0003      	movs	r3, r0
 8000c16:	8033      	strh	r3, [r6, #0]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000c18:	2610      	movs	r6, #16
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	1873      	adds	r3, r6, r1
 8000c1e:	19db      	adds	r3, r3, r7
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	2bab      	cmp	r3, #171	; 0xab
 8000c24:	d101      	bne.n	8000c2a <EE_VerifyPageFullWriteVariable+0x5a>
  {
    return  NO_VALID_PAGE;
 8000c26:	23ab      	movs	r3, #171	; 0xab
 8000c28:	e072      	b.n	8000d10 <EE_VerifyPageFullWriteVariable+0x140>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	2008      	movs	r0, #8
 8000c2e:	1813      	adds	r3, r2, r0
 8000c30:	19db      	adds	r3, r3, r7
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	4938      	ldr	r1, [pc, #224]	; (8000d18 <EE_VerifyPageFullWriteVariable+0x148>)
 8000c36:	468c      	mov	ip, r1
 8000c38:	4463      	add	r3, ip
 8000c3a:	02db      	lsls	r3, r3, #11
 8000c3c:	61fb      	str	r3, [r7, #28]

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8000c3e:	1813      	adds	r3, r2, r0
 8000c40:	19db      	adds	r3, r3, r7
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	3302      	adds	r3, #2
 8000c46:	02db      	lsls	r3, r3, #11
 8000c48:	4a34      	ldr	r2, [pc, #208]	; (8000d1c <EE_VerifyPageFullWriteVariable+0x14c>)
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	4463      	add	r3, ip
 8000c4e:	617b      	str	r3, [r7, #20]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000c50:	e057      	b.n	8000d02 <EE_VerifyPageFullWriteVariable+0x132>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	d150      	bne.n	8000cfc <EE_VerifyPageFullWriteVariable+0x12c>
    {
      /* Set variable data */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	001c      	movs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	001d      	movs	r5, r3
 8000c68:	69f9      	ldr	r1, [r7, #28]
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	002b      	movs	r3, r5
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f001 ff94 	bl	8002b9c <HAL_FLASH_Program>
			/* Wait for last operation to be completed */
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000c74:	2513      	movs	r5, #19
 8000c76:	2608      	movs	r6, #8
 8000c78:	19ab      	adds	r3, r5, r6
 8000c7a:	19dc      	adds	r4, r3, r7
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <EE_VerifyPageFullWriteVariable+0x150>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 f96a 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000c84:	0003      	movs	r3, r0
 8000c86:	7023      	strb	r3, [r4, #0]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000c88:	19ab      	adds	r3, r5, r6
 8000c8a:	19db      	adds	r3, r3, r7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <EE_VerifyPageFullWriteVariable+0xca>
      {
        return pFlash.ErrorCode;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <EE_VerifyPageFullWriteVariable+0x154>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	e03a      	b.n	8000d10 <EE_VerifyPageFullWriteVariable+0x140>
      }
			else
			{
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <EE_VerifyPageFullWriteVariable+0x158>)
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <EE_VerifyPageFullWriteVariable+0x158>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	438a      	bics	r2, r1
 8000ca4:	611a      	str	r2, [r3, #16]
			}
			
      /* Set variable virtual address */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	1c99      	adds	r1, r3, #2
 8000caa:	230e      	movs	r3, #14
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f001 ff6d 	bl	8002b9c <HAL_FLASH_Program>
			
			/* Wait for last operation to be completed */
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8000cc2:	2513      	movs	r5, #19
 8000cc4:	2608      	movs	r6, #8
 8000cc6:	19ab      	adds	r3, r5, r6
 8000cc8:	19dc      	adds	r4, r3, r7
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <EE_VerifyPageFullWriteVariable+0x150>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f002 f943 	bl	8002f58 <FLASH_WaitForLastOperation>
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	7023      	strb	r3, [r4, #0]
			/* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000cd6:	19ab      	adds	r3, r5, r6
 8000cd8:	19db      	adds	r3, r3, r7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <EE_VerifyPageFullWriteVariable+0x118>
      {
        return pFlash.ErrorCode;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <EE_VerifyPageFullWriteVariable+0x154>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	e013      	b.n	8000d10 <EE_VerifyPageFullWriteVariable+0x140>
      }
			else
			{
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <EE_VerifyPageFullWriteVariable+0x158>)
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <EE_VerifyPageFullWriteVariable+0x158>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	611a      	str	r2, [r3, #16]
			}
			
      /* Return program operation status */
      return pFlash.ErrorCode;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <EE_VerifyPageFullWriteVariable+0x154>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	e009      	b.n	8000d10 <EE_VerifyPageFullWriteVariable+0x140>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	61fb      	str	r3, [r7, #28]
  while (Address < PageEndAddress)
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3a3      	bcc.n	8000c52 <EE_VerifyPageFullWriteVariable+0x82>
    }
  }
	
	HAL_FLASH_Lock();
 8000d0a:	f002 f8fb 	bl	8002f04 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000d0e:	2380      	movs	r3, #128	; 0x80
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b009      	add	sp, #36	; 0x24
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d18:	0001003c 	.word	0x0001003c
 8000d1c:	0801dffe 	.word	0x0801dffe
 8000d20:	0000c350 	.word	0x0000c350
 8000d24:	20000760 	.word	0x20000760
 8000d28:	40022000 	.word	0x40022000

08000d2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <MX_FREERTOS_Init+0x2c>)
 8000d36:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d38:	c313      	stmia	r3!, {r0, r1, r4}
 8000d3a:	ca03      	ldmia	r2!, {r0, r1}
 8000d3c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2100      	movs	r1, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f005 fc69 	bl	800661a <osThreadCreate>
 8000d48:	0002      	movs	r2, r0
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <MX_FREERTOS_Init+0x30>)
 8000d4c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b007      	add	sp, #28
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	0800d058 	.word	0x0800d058
 8000d5c:	200000ac 	.word	0x200000ac

08000d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	240c      	movs	r4, #12
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f00c f86f 	bl	800ce54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d78:	695a      	ldr	r2, [r3, #20]
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0289      	lsls	r1, r1, #10
 8000d80:	430a      	orrs	r2, r1
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d94:	695a      	ldr	r2, [r3, #20]
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	02c9      	lsls	r1, r1, #11
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_GPIO_Init+0x8c>)
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	02db      	lsls	r3, r3, #11
 8000da8:	4013      	ands	r3, r2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	480f      	ldr	r0, [pc, #60]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	0019      	movs	r1, r3
 8000db8:	f002 fbac 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	01d2      	lsls	r2, r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f002 f949 	bl	8003074 <HAL_GPIO_Init>

}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b009      	add	sp, #36	; 0x24
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400

08000df4 <main>:
  */
uint16_t ff[6]={1,2,4,5,7} ;
uint16_t aa =0;
unsigned short ee[12];
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f001 f8e6 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f834 	bl	8000e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
#if (Modbus_Mode==1 || Modbus_Mode==MODBUS_SLAVE)
  Module_Init();
 8000e00:	f007 fc84 	bl	800870c <Module_Init>

  EE_Init();
 8000e04:	f7ff fa88 	bl	8000318 <EE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e08:	f7ff ff90 	bl	8000d2c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e0c:	f005 fbfd 	bl	800660a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x1c>
	...

08000e14 <StartDefaultTask>:
  }
  /* USER CODE END 3 */
}
//uint16_t  d[20]={1,2,3,3,4,56,7};
void StartDefaultTask(void const * argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
#if (Modbus_Mode==MODBUS_MASTER)
		eStatus=SetupModbusRTU(BAUD_RATE, MB_PAR_NONE);
 8000e1c:	2396      	movs	r3, #150	; 0x96
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	2102      	movs	r1, #2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f007 fdec 	bl	8008a00 <SetupModbusRTU>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <StartDefaultTask+0x48>)
 8000e2e:	701a      	strb	r2, [r3, #0]
		SetTimeOut(200);
 8000e30:	20c8      	movs	r0, #200	; 0xc8
 8000e32:	f007 fec9 	bl	8008bc8 <SetTimeOut>
		/* Infinite loop */
  for(;;)
  {

#if (Modbus_Mode==MODBUS_MASTER)
		MasterLoop();
 8000e36:	f008 fd51 	bl	80098dc <MasterLoop>
		//	WriteModbusRegister(1,0,aa);
	WriteModbusMultiRegisters(1, 0, 6,ff);
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <StartDefaultTask+0x4c>)
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f007 fe83 	bl	8008b4c <WriteModbusMultiRegisters>
//	ReadModbusRegister(1, 0,6, ee);

		HAL_Delay(200);
 8000e46:	20c8      	movs	r0, #200	; 0xc8
 8000e48:	f001 f8ee 	bl	8002028 <HAL_Delay>

		_IND_TOGGLE();
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	01db      	lsls	r3, r3, #7
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <StartDefaultTask+0x50>)
 8000e52:	0019      	movs	r1, r3
 8000e54:	0010      	movs	r0, r2
 8000e56:	f002 fb7a 	bl	800354e <HAL_GPIO_TogglePin>
		MasterLoop();
 8000e5a:	e7ec      	b.n	8000e36 <StartDefaultTask+0x22>
 8000e5c:	20004ad8 	.word	0x20004ad8
 8000e60:	20000000 	.word	0x20000000
 8000e64:	48000400 	.word	0x48000400

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b099      	sub	sp, #100	; 0x64
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	242c      	movs	r4, #44	; 0x2c
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	0018      	movs	r0, r3
 8000e74:	2334      	movs	r3, #52	; 0x34
 8000e76:	001a      	movs	r2, r3
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f00b ffeb 	bl	800ce54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7e:	231c      	movs	r3, #28
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	2310      	movs	r3, #16
 8000e86:	001a      	movs	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f00b ffe3 	bl	800ce54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8e:	003b      	movs	r3, r7
 8000e90:	0018      	movs	r0, r3
 8000e92:	231c      	movs	r3, #28
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f00b ffdc 	bl	800ce54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000e9c:	0021      	movs	r1, r4
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	22c0      	movs	r2, #192	; 0xc0
 8000eb4:	0252      	lsls	r2, r2, #9
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	22e0      	movs	r2, #224	; 0xe0
 8000ebc:	0392      	lsls	r2, r2, #14
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f002 fb8d 	bl	80035e8 <HAL_RCC_OscConfig>
 8000ece:	1e03      	subs	r3, r0, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f843 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	211c      	movs	r1, #28
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2207      	movs	r2, #7
 8000edc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f002 fefd 	bl	8003cf4 <HAL_RCC_ClockConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000efe:	f000 f82d 	bl	8000f5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8000f02:	003b      	movs	r3, r7
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <SystemClock_Config+0xcc>)
 8000f06:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f003 f87f 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f26:	f000 f819 	bl	8000f5c <Error_Handler>
  }
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b019      	add	sp, #100	; 0x64
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	00040003 	.word	0x00040003

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f001 f851 	bl	8001ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40014400 	.word	0x40014400

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0549      	lsls	r1, r1, #21
 8000f90:	430a      	orrs	r2, r1
 8000f92:	61da      	str	r2, [r3, #28]
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_MspInit+0x80>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	055b      	lsls	r3, r3, #21
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2103      	movs	r1, #3
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f90a 	bl	80021c4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f001 f905 	bl	80021c4 <HAL_NVIC_SetPriority>
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 f917 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f001 f8fd 	bl	80021c4 <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f001 f90f 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f001 f8f5 	bl	80021c4 <HAL_NVIC_SetPriority>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f001 f907 	bl	80021ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	0019      	movs	r1, r3
 8001002:	2015      	movs	r0, #21
 8001004:	f001 f8de 	bl	80021c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001008:	2015      	movs	r0, #21
 800100a:	f001 f8f0 	bl	80021ee <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_InitTick+0xa8>)
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_InitTick+0xa8>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0289      	lsls	r1, r1, #10
 8001018:	430a      	orrs	r2, r1
 800101a:	619a      	str	r2, [r3, #24]
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_InitTick+0xa8>)
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102a:	230c      	movs	r3, #12
 800102c:	18fa      	adds	r2, r7, r3
 800102e:	2310      	movs	r3, #16
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f002 ffc9 	bl	8003fcc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f002 ffb1 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 800103e:	0003      	movs	r3, r0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	4914      	ldr	r1, [pc, #80]	; (8001098 <HAL_InitTick+0xac>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff f85e 	bl	8000108 <__udivsi3>
 800104c:	0003      	movs	r3, r0
 800104e:	3b01      	subs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0xb0>)
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_InitTick+0xb4>)
 8001056:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_InitTick+0xb0>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_InitTick+0xb8>)
 800105c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_InitTick+0xb0>)
 8001060:	6a3a      	ldr	r2, [r7, #32]
 8001062:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_InitTick+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_InitTick+0xb0>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_InitTick+0xb0>)
 8001072:	0018      	movs	r0, r3
 8001074:	f003 f8d4 	bl	8004220 <HAL_TIM_Base_Init>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d105      	bne.n	8001088 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_InitTick+0xb0>)
 800107e:	0018      	movs	r0, r3
 8001080:	f003 f926 	bl	80042d0 <HAL_TIM_Base_Start_IT>
 8001084:	0003      	movs	r3, r0
 8001086:	e000      	b.n	800108a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b00a      	add	sp, #40	; 0x28
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40021000 	.word	0x40021000
 8001098:	000f4240 	.word	0x000f4240
 800109c:	200000b0 	.word	0x200000b0
 80010a0:	40014400 	.word	0x40014400
 80010a4:	000003e7 	.word	0x000003e7

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <PVD_VDDIO2_IRQHandler>:

/**
  * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
  */
void PVD_VDDIO2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

  /* USER CODE END PVD_VDDIO2_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80010bc:	f002 fa62 	bl	8003584 <HAL_PWR_PVD_IRQHandler>
  HAL_PWREx_Vddio2Monitor_IRQHandler();
 80010c0:	f002 fa7a 	bl	80035b8 <HAL_PWREx_Vddio2Monitor_IRQHandler>
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

  /* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80010ce:	f001 fdfb 	bl	8002cc8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <DMA1_Ch1_IRQHandler+0x14>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 fc4e 	bl	800298c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20000428 	.word	0x20000428

080010fc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>)
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fc42 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x30>)
 800110a:	0018      	movs	r0, r3
 800110c:	f001 fc3e 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fc3a 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fc36 	bl	800298c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	2000046c 	.word	0x2000046c
 800112c:	200004b0 	.word	0x200004b0
 8001130:	20000604 	.word	0x20000604
 8001134:	20000648 	.word	0x20000648

08001138 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fc24 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 8001146:	0018      	movs	r0, r3
 8001148:	f001 fc20 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
 800114e:	0018      	movs	r0, r3
 8001150:	f001 fc1c 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fc18 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800115e:	0018      	movs	r0, r3
 8001160:	f001 fc14 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_tx);
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 8001166:	0018      	movs	r0, r3
 8001168:	f001 fc10 	bl	800298c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800116e:	0018      	movs	r0, r3
 8001170:	f001 fc0c 	bl	800298c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	200004f4 	.word	0x200004f4
 8001180:	20000538 	.word	0x20000538
 8001184:	200005c0 	.word	0x200005c0
 8001188:	2000057c 	.word	0x2000057c
 800118c:	200006d0 	.word	0x200006d0
 8001190:	2000068c 	.word	0x2000068c
 8001194:	20000714 	.word	0x20000714

08001198 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <TIM16_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 f8e8 	bl	8004374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	200000b0 	.word	0x200000b0

080011b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <USART1_IRQHandler+0x28>)
 80011bc:	0018      	movs	r0, r3
 80011be:	f003 fce1 	bl	8004b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <USART1_IRQHandler+0x20>
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <USART1_IRQHandler+0x2c>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	0552      	lsls	r2, r2, #21
 80011ce:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000f8 	.word	0x200000f8
 80011dc:	e000ed04 	.word	0xe000ed04

080011e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <USART2_IRQHandler+0x14>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f003 fccc 	bl	8004b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	20000180 	.word	0x20000180

080011f8 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <USART3_8_IRQHandler+0x2c>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f003 fcc0 	bl	8004b84 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <USART3_8_IRQHandler+0x30>)
 8001206:	0018      	movs	r0, r3
 8001208:	f003 fcbc 	bl	8004b84 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <USART3_8_IRQHandler+0x34>)
 800120e:	0018      	movs	r0, r3
 8001210:	f003 fcb8 	bl	8004b84 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <USART3_8_IRQHandler+0x38>)
 8001216:	0018      	movs	r0, r3
 8001218:	f003 fcb4 	bl	8004b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000208 	.word	0x20000208
 8001228:	20000290 	.word	0x20000290
 800122c:	20000318 	.word	0x20000318
 8001230:	200003a0 	.word	0x200003a0

08001234 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_USART1_UART_Init+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 800124c:	2296      	movs	r2, #150	; 0x96
 800124e:	0192      	lsls	r2, r2, #6
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 800127e:	2210      	movs	r2, #16
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0152      	lsls	r2, r2, #5
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_USART1_UART_Init+0x64>)
 800128c:	2300      	movs	r3, #0
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	f005 f929 	bl	80064e8 <HAL_RS485Ex_Init>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800129a:	f7ff fe5f 	bl	8000f5c <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000f8 	.word	0x200000f8
 80012a8:	40013800 	.word	0x40013800

080012ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <MX_USART2_UART_Init+0x64>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012b8:	22e1      	movs	r2, #225	; 0xe1
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012ea:	2210      	movs	r2, #16
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0152      	lsls	r2, r2, #5
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x60>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f003 fa01 	bl	8004700 <HAL_UART_Init>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001302:	f7ff fe2b 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000180 	.word	0x20000180
 8001310:	40004400 	.word	0x40004400

08001314 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_USART3_UART_Init+0x60>)
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <MX_USART3_UART_Init+0x64>)
 800131c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001320:	22e1      	movs	r2, #225	; 0xe1
 8001322:	0312      	lsls	r2, r2, #12
 8001324:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART3_UART_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART3_UART_Init+0x60>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_USART3_UART_Init+0x60>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001352:	2210      	movs	r2, #16
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0152      	lsls	r2, r2, #5
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <MX_USART3_UART_Init+0x60>)
 8001360:	0018      	movs	r0, r3
 8001362:	f003 f9cd 	bl	8004700 <HAL_UART_Init>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800136a:	f7ff fdf7 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000208 	.word	0x20000208
 8001378:	40004800 	.word	0x40004800

0800137c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART4_UART_Init+0x60>)
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <MX_USART4_UART_Init+0x64>)
 8001384:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_USART4_UART_Init+0x60>)
 8001388:	22e1      	movs	r2, #225	; 0xe1
 800138a:	0312      	lsls	r2, r2, #12
 800138c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART4_UART_Init+0x60>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART4_UART_Init+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART4_UART_Init+0x60>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013ba:	2210      	movs	r2, #16
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	0152      	lsls	r2, r2, #5
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <MX_USART4_UART_Init+0x60>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f003 f999 	bl	8004700 <HAL_UART_Init>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART4_UART_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f7ff fdc3 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000290 	.word	0x20000290
 80013e0:	40004c00 	.word	0x40004c00

080013e4 <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART5_UART_Init+0x60>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_USART5_UART_Init+0x64>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_USART5_UART_Init+0x60>)
 80013f0:	22e1      	movs	r2, #225	; 0xe1
 80013f2:	0312      	lsls	r2, r2, #12
 80013f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART5_UART_Init+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART5_UART_Init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART5_UART_Init+0x60>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_USART5_UART_Init+0x60>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001422:	2210      	movs	r2, #16
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0152      	lsls	r2, r2, #5
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MX_USART5_UART_Init+0x60>)
 8001430:	0018      	movs	r0, r3
 8001432:	f003 f965 	bl	8004700 <HAL_UART_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_USART5_UART_Init+0x5a>
  {
    Error_Handler();
 800143a:	f7ff fd8f 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000318 	.word	0x20000318
 8001448:	40005000 	.word	0x40005000

0800144c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <MX_USART6_UART_Init+0x64>)
 8001454:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001458:	22e1      	movs	r2, #225	; 0xe1
 800145a:	0312      	lsls	r2, r2, #12
 800145c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_USART6_UART_Init+0x60>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART6_UART_Init+0x60>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART6_UART_Init+0x60>)
 800148a:	2210      	movs	r2, #16
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	0152      	lsls	r2, r2, #5
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <MX_USART6_UART_Init+0x60>)
 8001498:	0018      	movs	r0, r3
 800149a:	f003 f931 	bl	8004700 <HAL_UART_Init>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART6_UART_Init+0x5a>
  {
    Error_Handler();
 80014a2:	f7ff fd5b 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200003a0 	.word	0x200003a0
 80014b0:	40011400 	.word	0x40011400

080014b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b095      	sub	sp, #84	; 0x54
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	243c      	movs	r4, #60	; 0x3c
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	0018      	movs	r0, r3
 80014c2:	2314      	movs	r3, #20
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f00b fcc4 	bl	800ce54 <memset>
  if(uartHandle->Instance==USART1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4ab0      	ldr	r2, [pc, #704]	; (8001794 <HAL_UART_MspInit+0x2e0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d000      	beq.n	80014d8 <HAL_UART_MspInit+0x24>
 80014d6:	e0ac      	b.n	8001632 <HAL_UART_MspInit+0x17e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d8:	4baf      	ldr	r3, [pc, #700]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	4bae      	ldr	r3, [pc, #696]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	01c9      	lsls	r1, r1, #7
 80014e2:	430a      	orrs	r2, r1
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	4bac      	ldr	r3, [pc, #688]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	01db      	lsls	r3, r3, #7
 80014ee:	4013      	ands	r3, r2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4ba8      	ldr	r3, [pc, #672]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	4ba7      	ldr	r3, [pc, #668]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0289      	lsls	r1, r1, #10
 80014fe:	430a      	orrs	r2, r1
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	4ba5      	ldr	r3, [pc, #660]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	22b0      	movs	r2, #176	; 0xb0
 8001514:	0152      	lsls	r2, r2, #5
 8001516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	0021      	movs	r1, r4
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2202      	movs	r2, #2
 800151e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2203      	movs	r2, #3
 800152a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2201      	movs	r2, #1
 8001530:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	187a      	adds	r2, r7, r1
 8001534:	2390      	movs	r3, #144	; 0x90
 8001536:	05db      	lsls	r3, r3, #23
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f001 fd9a 	bl	8003074 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001540:	4b96      	ldr	r3, [pc, #600]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001542:	4a97      	ldr	r2, [pc, #604]	; (80017a0 <HAL_UART_MspInit+0x2ec>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001546:	4b95      	ldr	r3, [pc, #596]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b93      	ldr	r3, [pc, #588]	; (800179c <HAL_UART_MspInit+0x2e8>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001558:	4b90      	ldr	r3, [pc, #576]	; (800179c <HAL_UART_MspInit+0x2e8>)
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001560:	4b8e      	ldr	r3, [pc, #568]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_UART_MspInit+0x2e8>)
 800156a:	2220      	movs	r2, #32
 800156c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001574:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_UART_MspInit+0x2e8>)
 8001576:	0018      	movs	r0, r3
 8001578:	f001 f894 	bl	80026a4 <HAL_DMA_Init>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001580:	f7ff fcec 	bl	8000f5c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8001584:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 8001586:	23a8      	movs	r3, #168	; 0xa8
 8001588:	58d3      	ldr	r3, [r2, r3]
 800158a:	4986      	ldr	r1, [pc, #536]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 800158c:	220f      	movs	r2, #15
 800158e:	4393      	bics	r3, r2
 8001590:	22a8      	movs	r2, #168	; 0xa8
 8001592:	508b      	str	r3, [r1, r2]
 8001594:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 8001596:	23a8      	movs	r3, #168	; 0xa8
 8001598:	58d3      	ldr	r3, [r2, r3]
 800159a:	4982      	ldr	r1, [pc, #520]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 800159c:	2208      	movs	r2, #8
 800159e:	4313      	orrs	r3, r2
 80015a0:	22a8      	movs	r2, #168	; 0xa8
 80015a2:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a7d      	ldr	r2, [pc, #500]	; (800179c <HAL_UART_MspInit+0x2e8>)
 80015a8:	675a      	str	r2, [r3, #116]	; 0x74
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <HAL_UART_MspInit+0x2e8>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80015b0:	4b7d      	ldr	r3, [pc, #500]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_UART_MspInit+0x2f8>)
 80015b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b6:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015b8:	2210      	movs	r2, #16
 80015ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c8:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80015d8:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015da:	2220      	movs	r2, #32
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015e4:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 f85c 	bl	80026a4 <HAL_DMA_Init>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80015f0:	f7ff fcb4 	bl	8000f5c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 80015f4:	4a6b      	ldr	r2, [pc, #428]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80015f6:	23a8      	movs	r3, #168	; 0xa8
 80015f8:	58d3      	ldr	r3, [r2, r3]
 80015fa:	496a      	ldr	r1, [pc, #424]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80015fc:	22f0      	movs	r2, #240	; 0xf0
 80015fe:	4393      	bics	r3, r2
 8001600:	22a8      	movs	r2, #168	; 0xa8
 8001602:	508b      	str	r3, [r1, r2]
 8001604:	4a67      	ldr	r2, [pc, #412]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 8001606:	23a8      	movs	r3, #168	; 0xa8
 8001608:	58d3      	ldr	r3, [r2, r3]
 800160a:	4966      	ldr	r1, [pc, #408]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	4313      	orrs	r3, r2
 8001610:	22a8      	movs	r2, #168	; 0xa8
 8001612:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a64      	ldr	r2, [pc, #400]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 8001618:	671a      	str	r2, [r3, #112]	; 0x70
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_UART_MspInit+0x2f4>)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2103      	movs	r1, #3
 8001624:	201b      	movs	r0, #27
 8001626:	f000 fdcd 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800162a:	201b      	movs	r0, #27
 800162c:	f000 fddf 	bl	80021ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001630:	e3a9      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <HAL_UART_MspInit+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d000      	beq.n	800163e <HAL_UART_MspInit+0x18a>
 800163c:	e0c6      	b.n	80017cc <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART2_CLK_ENABLE();
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0289      	lsls	r1, r1, #10
 8001648:	430a      	orrs	r2, r1
 800164a:	61da      	str	r2, [r3, #28]
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	029b      	lsls	r3, r3, #10
 8001654:	4013      	ands	r3, r2
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0289      	lsls	r1, r1, #10
 8001664:	430a      	orrs	r2, r1
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_UART_MspInit+0x2e4>)
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	029b      	lsls	r3, r3, #10
 8001670:	4013      	ands	r3, r2
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001676:	213c      	movs	r1, #60	; 0x3c
 8001678:	187b      	adds	r3, r7, r1
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2202      	movs	r2, #2
 8001682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2203      	movs	r2, #3
 800168e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2201      	movs	r2, #1
 8001694:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	187a      	adds	r2, r7, r1
 8001698:	2390      	movs	r3, #144	; 0x90
 800169a:	05db      	lsls	r3, r3, #23
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 fce8 	bl	8003074 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016a6:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <HAL_UART_MspInit+0x304>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b0:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016d4:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_UART_MspInit+0x300>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 ffe4 	bl	80026a4 <HAL_DMA_Init>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x230>
      Error_Handler();
 80016e0:	f7ff fc3c 	bl	8000f5c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 80016e4:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80016e6:	23a8      	movs	r3, #168	; 0xa8
 80016e8:	58d3      	ldr	r3, [r2, r3]
 80016ea:	492e      	ldr	r1, [pc, #184]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80016ec:	4a33      	ldr	r2, [pc, #204]	; (80017bc <HAL_UART_MspInit+0x308>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	22a8      	movs	r2, #168	; 0xa8
 80016f2:	508b      	str	r3, [r1, r2]
 80016f4:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80016f6:	23a8      	movs	r3, #168	; 0xa8
 80016f8:	58d3      	ldr	r3, [r2, r3]
 80016fa:	492a      	ldr	r1, [pc, #168]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 80016fc:	2290      	movs	r2, #144	; 0x90
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	4313      	orrs	r3, r2
 8001702:	22a8      	movs	r2, #168	; 0xa8
 8001704:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_UART_MspInit+0x300>)
 800170a:	675a      	str	r2, [r3, #116]	; 0x74
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_UART_MspInit+0x300>)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001714:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_UART_MspInit+0x310>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 800171a:	2210      	movs	r2, #16
 800171c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001744:	0018      	movs	r0, r3
 8001746:	f000 ffad 	bl	80026a4 <HAL_DMA_Init>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <HAL_UART_MspInit+0x29e>
      Error_Handler();
 800174e:	f7ff fc05 	bl	8000f5c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 8001754:	23a8      	movs	r3, #168	; 0xa8
 8001756:	58d3      	ldr	r3, [r2, r3]
 8001758:	4912      	ldr	r1, [pc, #72]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 800175a:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0x314>)
 800175c:	4013      	ands	r3, r2
 800175e:	22a8      	movs	r2, #168	; 0xa8
 8001760:	508b      	str	r3, [r1, r2]
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 8001764:	23a8      	movs	r3, #168	; 0xa8
 8001766:	58d3      	ldr	r3, [r2, r3]
 8001768:	490e      	ldr	r1, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0x2f0>)
 800176a:	2290      	movs	r2, #144	; 0x90
 800176c:	0212      	lsls	r2, r2, #8
 800176e:	4313      	orrs	r3, r2
 8001770:	22a8      	movs	r2, #168	; 0xa8
 8001772:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 8001778:	671a      	str	r2, [r3, #112]	; 0x70
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_UART_MspInit+0x30c>)
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2103      	movs	r1, #3
 8001784:	201c      	movs	r0, #28
 8001786:	f000 fd1d 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800178a:	201c      	movs	r0, #28
 800178c:	f000 fd2f 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001790:	e2f9      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40013800 	.word	0x40013800
 8001798:	40021000 	.word	0x40021000
 800179c:	20000428 	.word	0x20000428
 80017a0:	40020008 	.word	0x40020008
 80017a4:	40020000 	.word	0x40020000
 80017a8:	2000046c 	.word	0x2000046c
 80017ac:	4002001c 	.word	0x4002001c
 80017b0:	40004400 	.word	0x40004400
 80017b4:	200004b0 	.word	0x200004b0
 80017b8:	40020030 	.word	0x40020030
 80017bc:	fffff0ff 	.word	0xfffff0ff
 80017c0:	200004f4 	.word	0x200004f4
 80017c4:	40020044 	.word	0x40020044
 80017c8:	ffff0fff 	.word	0xffff0fff
  else if(uartHandle->Instance==USART3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4aae      	ldr	r2, [pc, #696]	; (8001a8c <HAL_UART_MspInit+0x5d8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d000      	beq.n	80017d8 <HAL_UART_MspInit+0x324>
 80017d6:	e0a9      	b.n	800192c <HAL_UART_MspInit+0x478>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d8:	4bad      	ldr	r3, [pc, #692]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	4bac      	ldr	r3, [pc, #688]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	02c9      	lsls	r1, r1, #11
 80017e2:	430a      	orrs	r2, r1
 80017e4:	61da      	str	r2, [r3, #28]
 80017e6:	4baa      	ldr	r3, [pc, #680]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	02db      	lsls	r3, r3, #11
 80017ee:	4013      	ands	r3, r2
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4ba6      	ldr	r3, [pc, #664]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	4ba5      	ldr	r3, [pc, #660]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	02c9      	lsls	r1, r1, #11
 80017fe:	430a      	orrs	r2, r1
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	4ba3      	ldr	r3, [pc, #652]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	02db      	lsls	r3, r3, #11
 800180a:	4013      	ands	r3, r2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001810:	213c      	movs	r1, #60	; 0x3c
 8001812:	187b      	adds	r3, r7, r1
 8001814:	22c0      	movs	r2, #192	; 0xc0
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2202      	movs	r2, #2
 800181e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2203      	movs	r2, #3
 800182a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2204      	movs	r2, #4
 8001830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	187b      	adds	r3, r7, r1
 8001834:	4a97      	ldr	r2, [pc, #604]	; (8001a94 <HAL_UART_MspInit+0x5e0>)
 8001836:	0019      	movs	r1, r3
 8001838:	0010      	movs	r0, r2
 800183a:	f001 fc1b 	bl	8003074 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel5;
 800183e:	4b96      	ldr	r3, [pc, #600]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001840:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_UART_MspInit+0x5e8>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001844:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b90      	ldr	r3, [pc, #576]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001862:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001868:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800186e:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 8001870:	0018      	movs	r0, r3
 8001872:	f000 ff17 	bl	80026a4 <HAL_DMA_Init>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 800187a:	f7ff fb6f 	bl	8000f5c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);
 800187e:	4a88      	ldr	r2, [pc, #544]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 8001880:	23a8      	movs	r3, #168	; 0xa8
 8001882:	58d3      	ldr	r3, [r2, r3]
 8001884:	4986      	ldr	r1, [pc, #536]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 8001886:	4a87      	ldr	r2, [pc, #540]	; (8001aa4 <HAL_UART_MspInit+0x5f0>)
 8001888:	4013      	ands	r3, r2
 800188a:	22a8      	movs	r2, #168	; 0xa8
 800188c:	508b      	str	r3, [r1, r2]
 800188e:	4a84      	ldr	r2, [pc, #528]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 8001890:	23a8      	movs	r3, #168	; 0xa8
 8001892:	58d3      	ldr	r3, [r2, r3]
 8001894:	4982      	ldr	r1, [pc, #520]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 8001896:	22a0      	movs	r2, #160	; 0xa0
 8001898:	0312      	lsls	r2, r2, #12
 800189a:	4313      	orrs	r3, r2
 800189c:	22a8      	movs	r2, #168	; 0xa8
 800189e:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a7d      	ldr	r2, [pc, #500]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 80018a4:	675a      	str	r2, [r3, #116]	; 0x74
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_UART_MspInit+0x5e4>)
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel7;
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018ae:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_UART_MspInit+0x5f8>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b2:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018b4:	2210      	movs	r2, #16
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80018d0:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80018dc:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 fee0 	bl	80026a4 <HAL_DMA_Init>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <HAL_UART_MspInit+0x438>
      Error_Handler();
 80018e8:	f7ff fb38 	bl	8000f5c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);
 80018ec:	4a6c      	ldr	r2, [pc, #432]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80018ee:	23a8      	movs	r3, #168	; 0xa8
 80018f0:	58d3      	ldr	r3, [r2, r3]
 80018f2:	496b      	ldr	r1, [pc, #428]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80018f4:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <HAL_UART_MspInit+0x5fc>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	22a8      	movs	r2, #168	; 0xa8
 80018fa:	508b      	str	r3, [r1, r2]
 80018fc:	4a68      	ldr	r2, [pc, #416]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80018fe:	23a8      	movs	r3, #168	; 0xa8
 8001900:	58d3      	ldr	r3, [r2, r3]
 8001902:	4967      	ldr	r1, [pc, #412]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 8001904:	22a0      	movs	r2, #160	; 0xa0
 8001906:	0512      	lsls	r2, r2, #20
 8001908:	4313      	orrs	r3, r2
 800190a:	22a8      	movs	r2, #168	; 0xa8
 800190c:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 8001912:	671a      	str	r2, [r3, #112]	; 0x70
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_UART_MspInit+0x5f4>)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2103      	movs	r1, #3
 800191e:	201d      	movs	r0, #29
 8001920:	f000 fc50 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001924:	201d      	movs	r0, #29
 8001926:	f000 fc62 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 800192a:	e22c      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART4)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <HAL_UART_MspInit+0x600>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d000      	beq.n	8001938 <HAL_UART_MspInit+0x484>
 8001936:	e0cb      	b.n	8001ad0 <HAL_UART_MspInit+0x61c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001938:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	0309      	lsls	r1, r1, #12
 8001942:	430a      	orrs	r2, r1
 8001944:	61da      	str	r2, [r3, #28]
 8001946:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	031b      	lsls	r3, r3, #12
 800194e:	4013      	ands	r3, r2
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	4b4d      	ldr	r3, [pc, #308]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	0289      	lsls	r1, r1, #10
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_UART_MspInit+0x5dc>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001970:	213c      	movs	r1, #60	; 0x3c
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2203      	movs	r2, #3
 8001976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2202      	movs	r2, #2
 800197c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2203      	movs	r2, #3
 8001988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2204      	movs	r2, #4
 800198e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	187a      	adds	r2, r7, r1
 8001992:	2390      	movs	r3, #144	; 0x90
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f001 fb6b 	bl	8003074 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800199e:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019a0:	4a46      	ldr	r2, [pc, #280]	; (8001abc <HAL_UART_MspInit+0x608>)
 80019a2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 fe67 	bl	80026a4 <HAL_DMA_Init>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_MspInit+0x52a>
      Error_Handler();
 80019da:	f7ff fabf 	bl	8000f5c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);
 80019de:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80019e0:	23a8      	movs	r3, #168	; 0xa8
 80019e2:	58d3      	ldr	r3, [r2, r3]
 80019e4:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <HAL_UART_MspInit+0x60c>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	22a8      	movs	r2, #168	; 0xa8
 80019ec:	508b      	str	r3, [r1, r2]
 80019ee:	4a2c      	ldr	r2, [pc, #176]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80019f0:	23a8      	movs	r3, #168	; 0xa8
 80019f2:	58d3      	ldr	r3, [r2, r3]
 80019f4:	492a      	ldr	r1, [pc, #168]	; (8001aa0 <HAL_UART_MspInit+0x5ec>)
 80019f6:	22b0      	movs	r2, #176	; 0xb0
 80019f8:	0412      	lsls	r2, r2, #16
 80019fa:	4313      	orrs	r3, r2
 80019fc:	22a8      	movs	r2, #168	; 0xa8
 80019fe:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 8001a04:	675a      	str	r2, [r3, #116]	; 0x74
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_UART_MspInit+0x604>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart4_tx.Instance = DMA2_Channel1;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <HAL_UART_MspInit+0x614>)
 8001a10:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a14:	2210      	movs	r2, #16
 8001a16:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fe30 	bl	80026a4 <HAL_DMA_Init>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x598>
      Error_Handler();
 8001a48:	f7ff fa88 	bl	8000f5c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_UART_MspInit+0x618>)
 8001a4e:	23a8      	movs	r3, #168	; 0xa8
 8001a50:	58d3      	ldr	r3, [r2, r3]
 8001a52:	491e      	ldr	r1, [pc, #120]	; (8001acc <HAL_UART_MspInit+0x618>)
 8001a54:	220f      	movs	r2, #15
 8001a56:	4393      	bics	r3, r2
 8001a58:	22a8      	movs	r2, #168	; 0xa8
 8001a5a:	508b      	str	r3, [r1, r2]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_UART_MspInit+0x618>)
 8001a5e:	23a8      	movs	r3, #168	; 0xa8
 8001a60:	58d3      	ldr	r3, [r2, r3]
 8001a62:	491a      	ldr	r1, [pc, #104]	; (8001acc <HAL_UART_MspInit+0x618>)
 8001a64:	220b      	movs	r2, #11
 8001a66:	4313      	orrs	r3, r2
 8001a68:	22a8      	movs	r2, #168	; 0xa8
 8001a6a:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a70:	671a      	str	r2, [r3, #112]	; 0x70
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0x610>)
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	201d      	movs	r0, #29
 8001a7e:	f000 fba1 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001a82:	201d      	movs	r0, #29
 8001a84:	f000 fbb3 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001a88:	e17d      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40004800 	.word	0x40004800
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	20000538 	.word	0x20000538
 8001a9c:	40020058 	.word	0x40020058
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	fff0ffff 	.word	0xfff0ffff
 8001aa8:	2000057c 	.word	0x2000057c
 8001aac:	40020080 	.word	0x40020080
 8001ab0:	f0ffffff 	.word	0xf0ffffff
 8001ab4:	40004c00 	.word	0x40004c00
 8001ab8:	200005c0 	.word	0x200005c0
 8001abc:	4002006c 	.word	0x4002006c
 8001ac0:	ff0fffff 	.word	0xff0fffff
 8001ac4:	20000604 	.word	0x20000604
 8001ac8:	40020408 	.word	0x40020408
 8001acc:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART5)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4aae      	ldr	r2, [pc, #696]	; (8001d90 <HAL_UART_MspInit+0x8dc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_UART_MspInit+0x628>
 8001ada:	e0a7      	b.n	8001c2c <HAL_UART_MspInit+0x778>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001adc:	4bad      	ldr	r3, [pc, #692]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	4bac      	ldr	r3, [pc, #688]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0349      	lsls	r1, r1, #13
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	61da      	str	r2, [r3, #28]
 8001aea:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	035b      	lsls	r3, r3, #13
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4ba6      	ldr	r3, [pc, #664]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	4ba5      	ldr	r3, [pc, #660]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	02c9      	lsls	r1, r1, #11
 8001b02:	430a      	orrs	r2, r1
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	4ba3      	ldr	r3, [pc, #652]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	02db      	lsls	r3, r3, #11
 8001b0e:	4013      	ands	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b14:	213c      	movs	r1, #60	; 0x3c
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2218      	movs	r2, #24
 8001b1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2202      	movs	r2, #2
 8001b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2204      	movs	r2, #4
 8001b32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	4a98      	ldr	r2, [pc, #608]	; (8001d98 <HAL_UART_MspInit+0x8e4>)
 8001b38:	0019      	movs	r1, r3
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	f001 fa9a 	bl	8003074 <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA2_Channel2;
 8001b40:	4b96      	ldr	r3, [pc, #600]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b42:	4a97      	ldr	r2, [pc, #604]	; (8001da0 <HAL_UART_MspInit+0x8ec>)
 8001b44:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b46:	4b95      	ldr	r3, [pc, #596]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4c:	4b93      	ldr	r3, [pc, #588]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b52:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b58:	4b90      	ldr	r3, [pc, #576]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5e:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8001b64:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8001b70:	4b8a      	ldr	r3, [pc, #552]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fd96 	bl	80026a4 <HAL_DMA_Init>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x6cc>
      Error_Handler();
 8001b7c:	f7ff f9ee 	bl	8000f5c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);
 8001b80:	4a88      	ldr	r2, [pc, #544]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001b82:	23a8      	movs	r3, #168	; 0xa8
 8001b84:	58d3      	ldr	r3, [r2, r3]
 8001b86:	4987      	ldr	r1, [pc, #540]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001b88:	22f0      	movs	r2, #240	; 0xf0
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	22a8      	movs	r2, #168	; 0xa8
 8001b8e:	508b      	str	r3, [r1, r2]
 8001b90:	4a84      	ldr	r2, [pc, #528]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001b92:	23a8      	movs	r3, #168	; 0xa8
 8001b94:	58d3      	ldr	r3, [r2, r3]
 8001b96:	4983      	ldr	r1, [pc, #524]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001b98:	22c0      	movs	r2, #192	; 0xc0
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	22a8      	movs	r2, #168	; 0xa8
 8001b9e:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a7e      	ldr	r2, [pc, #504]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001ba4:	675a      	str	r2, [r3, #116]	; 0x74
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <HAL_UART_MspInit+0x8e8>)
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart5_tx.Instance = DMA2_Channel4;
 8001bac:	4b7e      	ldr	r3, [pc, #504]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bae:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_UART_MspInit+0x8f8>)
 8001bb0:	601a      	str	r2, [r3, #0]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
    hdma_usart5_tx.Init.Mode = DMA_NORMAL;
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 8001bdc:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 fd60 	bl	80026a4 <HAL_DMA_Init>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_UART_MspInit+0x738>
      Error_Handler();
 8001be8:	f7ff f9b8 	bl	8000f5c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);
 8001bec:	4a6d      	ldr	r2, [pc, #436]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001bee:	23a8      	movs	r3, #168	; 0xa8
 8001bf0:	58d3      	ldr	r3, [r2, r3]
 8001bf2:	496c      	ldr	r1, [pc, #432]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001bf4:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_UART_MspInit+0x8fc>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	22a8      	movs	r2, #168	; 0xa8
 8001bfa:	508b      	str	r3, [r1, r2]
 8001bfc:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001bfe:	23a8      	movs	r3, #168	; 0xa8
 8001c00:	58d3      	ldr	r3, [r2, r3]
 8001c02:	4968      	ldr	r1, [pc, #416]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001c04:	22c0      	movs	r2, #192	; 0xc0
 8001c06:	0212      	lsls	r2, r2, #8
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	22a8      	movs	r2, #168	; 0xa8
 8001c0c:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001c12:	671a      	str	r2, [r3, #112]	; 0x70
 8001c14:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_UART_MspInit+0x8f4>)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	201d      	movs	r0, #29
 8001c20:	f000 fad0 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001c24:	201d      	movs	r0, #29
 8001c26:	f000 fae2 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001c2a:	e0ac      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART6)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a60      	ldr	r2, [pc, #384]	; (8001db4 <HAL_UART_MspInit+0x900>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d000      	beq.n	8001c38 <HAL_UART_MspInit+0x784>
 8001c36:	e0a6      	b.n	8001d86 <HAL_UART_MspInit+0x8d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c3e:	2120      	movs	r1, #32
 8001c40:	430a      	orrs	r2, r1
 8001c42:	619a      	str	r2, [r3, #24]
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	0289      	lsls	r1, r1, #10
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <HAL_UART_MspInit+0x8e0>)
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c6c:	213c      	movs	r1, #60	; 0x3c
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2230      	movs	r2, #48	; 0x30
 8001c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2202      	movs	r2, #2
 8001c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2203      	movs	r2, #3
 8001c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2205      	movs	r2, #5
 8001c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	187a      	adds	r2, r7, r1
 8001c8e:	2390      	movs	r3, #144	; 0x90
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f001 f9ed 	bl	8003074 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Channel3;
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_UART_MspInit+0x908>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca0:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc4:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fce9 	bl	80026a4 <HAL_DMA_Init>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_MspInit+0x826>
      Error_Handler();
 8001cd6:	f7ff f941 	bl	8000f5c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001cdc:	23a8      	movs	r3, #168	; 0xa8
 8001cde:	58d3      	ldr	r3, [r2, r3]
 8001ce0:	4930      	ldr	r1, [pc, #192]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001ce2:	4a37      	ldr	r2, [pc, #220]	; (8001dc0 <HAL_UART_MspInit+0x90c>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	22a8      	movs	r2, #168	; 0xa8
 8001ce8:	508b      	str	r3, [r1, r2]
 8001cea:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001cec:	23a8      	movs	r3, #168	; 0xa8
 8001cee:	58d3      	ldr	r3, [r2, r3]
 8001cf0:	492c      	ldr	r1, [pc, #176]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001cf2:	22d0      	movs	r2, #208	; 0xd0
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	22a8      	movs	r2, #168	; 0xa8
 8001cfa:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a2e      	ldr	r2, [pc, #184]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001d00:	675a      	str	r2, [r3, #116]	; 0x74
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_UART_MspInit+0x904>)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Instance = DMA2_Channel5;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_UART_MspInit+0x914>)
 8001d0c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d10:	2210      	movs	r2, #16
 8001d12:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fcb2 	bl	80026a4 <HAL_DMA_Init>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_MspInit+0x894>
      Error_Handler();
 8001d44:	f7ff f90a 	bl	8000f5c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001d4a:	23a8      	movs	r3, #168	; 0xa8
 8001d4c:	58d3      	ldr	r3, [r2, r3]
 8001d4e:	4915      	ldr	r1, [pc, #84]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001d50:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_UART_MspInit+0x918>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	22a8      	movs	r2, #168	; 0xa8
 8001d56:	508b      	str	r3, [r1, r2]
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001d5a:	23a8      	movs	r3, #168	; 0xa8
 8001d5c:	58d3      	ldr	r3, [r2, r3]
 8001d5e:	4911      	ldr	r1, [pc, #68]	; (8001da4 <HAL_UART_MspInit+0x8f0>)
 8001d60:	22d0      	movs	r2, #208	; 0xd0
 8001d62:	0312      	lsls	r2, r2, #12
 8001d64:	4313      	orrs	r3, r2
 8001d66:	22a8      	movs	r2, #168	; 0xa8
 8001d68:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d6e:	671a      	str	r2, [r3, #112]	; 0x70
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_UART_MspInit+0x910>)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2103      	movs	r1, #3
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f000 fa22 	bl	80021c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001d80:	201d      	movs	r0, #29
 8001d82:	f000 fa34 	bl	80021ee <HAL_NVIC_EnableIRQ>
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b015      	add	sp, #84	; 0x54
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40005000 	.word	0x40005000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	20000648 	.word	0x20000648
 8001da0:	4002041c 	.word	0x4002041c
 8001da4:	40020400 	.word	0x40020400
 8001da8:	2000068c 	.word	0x2000068c
 8001dac:	40020444 	.word	0x40020444
 8001db0:	ffff0fff 	.word	0xffff0fff
 8001db4:	40011400 	.word	0x40011400
 8001db8:	200006d0 	.word	0x200006d0
 8001dbc:	40020430 	.word	0x40020430
 8001dc0:	fffff0ff 	.word	0xfffff0ff
 8001dc4:	20000714 	.word	0x20000714
 8001dc8:	40020458 	.word	0x40020458
 8001dcc:	fff0ffff 	.word	0xfff0ffff

08001dd0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_UART_MspDeInit+0x170>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d11b      	bne.n	8001e1a <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001de8:	4957      	ldr	r1, [pc, #348]	; (8001f48 <HAL_UART_MspDeInit+0x178>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	619a      	str	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12);
 8001dee:	23b0      	movs	r3, #176	; 0xb0
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	2390      	movs	r3, #144	; 0x90
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f001 fab3 	bl	8003364 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fc96 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f000 fc91 	bl	8002734 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001e12:	201b      	movs	r0, #27
 8001e14:	f000 f9fb 	bl	800220e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8001e18:	e08d      	b.n	8001f36 <HAL_UART_MspDeInit+0x166>
  else if(uartHandle->Instance==USART2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_UART_MspDeInit+0x17c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_UART_MspDeInit+0x88>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001e2a:	4949      	ldr	r1, [pc, #292]	; (8001f50 <HAL_UART_MspDeInit+0x180>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001e30:	2390      	movs	r3, #144	; 0x90
 8001e32:	05db      	lsls	r3, r3, #23
 8001e34:	210c      	movs	r1, #12
 8001e36:	0018      	movs	r0, r3
 8001e38:	f001 fa94 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fc77 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fc72 	bl	8002734 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001e50:	201c      	movs	r0, #28
 8001e52:	f000 f9dc 	bl	800220e <HAL_NVIC_DisableIRQ>
}
 8001e56:	e06e      	b.n	8001f36 <HAL_UART_MspDeInit+0x166>
  else if(uartHandle->Instance==USART3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_UART_MspDeInit+0x184>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d117      	bne.n	8001e92 <HAL_UART_MspDeInit+0xc2>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001e68:	493b      	ldr	r1, [pc, #236]	; (8001f58 <HAL_UART_MspDeInit+0x188>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <HAL_UART_MspDeInit+0x18c>)
 8001e74:	0019      	movs	r1, r3
 8001e76:	0010      	movs	r0, r2
 8001e78:	f001 fa74 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 fc57 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fc52 	bl	8002734 <HAL_DMA_DeInit>
}
 8001e90:	e051      	b.n	8001f36 <HAL_UART_MspDeInit+0x166>
  else if(uartHandle->Instance==USART4)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_UART_MspDeInit+0x190>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d116      	bne.n	8001eca <HAL_UART_MspDeInit+0xfa>
    __HAL_RCC_USART4_CLK_DISABLE();
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001ea2:	4930      	ldr	r1, [pc, #192]	; (8001f64 <HAL_UART_MspDeInit+0x194>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001ea8:	2390      	movs	r3, #144	; 0x90
 8001eaa:	05db      	lsls	r3, r3, #23
 8001eac:	2103      	movs	r1, #3
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f001 fa58 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fc3b 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fc36 	bl	8002734 <HAL_DMA_DeInit>
}
 8001ec8:	e035      	b.n	8001f36 <HAL_UART_MspDeInit+0x166>
  else if(uartHandle->Instance==USART5)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_UART_MspDeInit+0x198>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d115      	bne.n	8001f00 <HAL_UART_MspDeInit+0x130>
    __HAL_RCC_USART5_CLK_DISABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001eda:	4924      	ldr	r1, [pc, #144]	; (8001f6c <HAL_UART_MspDeInit+0x19c>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_UART_MspDeInit+0x18c>)
 8001ee2:	2118      	movs	r1, #24
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f001 fa3d 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 fc20 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fc1b 	bl	8002734 <HAL_DMA_DeInit>
}
 8001efe:	e01a      	b.n	8001f36 <HAL_UART_MspDeInit+0x166>
  else if(uartHandle->Instance==USART6)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_UART_MspDeInit+0x1a0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d115      	bne.n	8001f36 <HAL_UART_MspDeInit+0x166>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_UART_MspDeInit+0x174>)
 8001f10:	2120      	movs	r1, #32
 8001f12:	438a      	bics	r2, r1
 8001f14:	619a      	str	r2, [r3, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8001f16:	2390      	movs	r3, #144	; 0x90
 8001f18:	05db      	lsls	r3, r3, #23
 8001f1a:	2130      	movs	r1, #48	; 0x30
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f001 fa21 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fc04 	bl	8002734 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fbff 	bl	8002734 <HAL_DMA_DeInit>
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40013800 	.word	0x40013800
 8001f44:	40021000 	.word	0x40021000
 8001f48:	ffffbfff 	.word	0xffffbfff
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	fffdffff 	.word	0xfffdffff
 8001f54:	40004800 	.word	0x40004800
 8001f58:	fffbffff 	.word	0xfffbffff
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	40004c00 	.word	0x40004c00
 8001f64:	fff7ffff 	.word	0xfff7ffff
 8001f68:	40005000 	.word	0x40005000
 8001f6c:	ffefffff 	.word	0xffefffff
 8001f70:	40011400 	.word	0x40011400

08001f74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f78:	f7ff f95c 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <LoopForever+0xe>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	; (8001fc0 <LoopForever+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fa2:	f00a ffbd 	bl	800cf20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa6:	f7fe ff25 	bl	8000df4 <main>

08001faa <LoopForever>:

LoopForever:
    b LoopForever
 8001faa:	e7fe      	b.n	8001faa <LoopForever>
  ldr   r0, =_estack
 8001fac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001fb8:	0800d3a0 	.word	0x0800d3a0
  ldr r2, =_sbss
 8001fbc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001fc0:	20005168 	.word	0x20005168

08001fc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_COMP_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_Init+0x24>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_Init+0x24>)
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7ff f807 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fde:	f7fe ffc3 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x1c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x20>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	18d2      	adds	r2, r2, r3
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_IncTick+0x20>)
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000010 	.word	0x20000010
 8002010:	20000758 	.word	0x20000758

08002014 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_GetTick+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000758 	.word	0x20000758

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff fff0 	bl	8002014 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3301      	adds	r3, #1
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	001a      	movs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	189b      	adds	r3, r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }
  
    while((HAL_GetTick() - tickstart) < wait)
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	f7ff ffe0 	bl	8002014 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000010 	.word	0x20000010

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	0002      	movs	r2, r0
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b7f      	cmp	r3, #127	; 0x7f
 8002082:	d809      	bhi.n	8002098 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	001a      	movs	r2, r3
 800208a:	231f      	movs	r3, #31
 800208c:	401a      	ands	r2, r3
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_EnableIRQ+0x30>)
 8002090:	2101      	movs	r1, #1
 8002092:	4091      	lsls	r1, r2
 8002094:	000a      	movs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
  }
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	0002      	movs	r2, r0
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b7f      	cmp	r3, #127	; 0x7f
 80020b6:	d810      	bhi.n	80020da <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	231f      	movs	r3, #31
 80020c0:	4013      	ands	r3, r2
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_DisableIRQ+0x40>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ce:	f3bf 8f4f 	dsb	sy
}
 80020d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80020d4:	f3bf 8f6f 	isb	sy
}
 80020d8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b7f      	cmp	r3, #127	; 0x7f
 80020fc:	d828      	bhi.n	8002150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fe:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <__NVIC_SetPriority+0xd4>)
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	33c0      	adds	r3, #192	; 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	589b      	ldr	r3, [r3, r2]
 800210e:	1dfa      	adds	r2, r7, #7
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	0011      	movs	r1, r2
 8002114:	2203      	movs	r2, #3
 8002116:	400a      	ands	r2, r1
 8002118:	00d2      	lsls	r2, r2, #3
 800211a:	21ff      	movs	r1, #255	; 0xff
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	43d2      	mvns	r2, r2
 8002122:	401a      	ands	r2, r3
 8002124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	401a      	ands	r2, r3
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	2303      	movs	r3, #3
 8002136:	4003      	ands	r3, r0
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213c:	481f      	ldr	r0, [pc, #124]	; (80021bc <__NVIC_SetPriority+0xd4>)
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	430a      	orrs	r2, r1
 8002148:	33c0      	adds	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214e:	e031      	b.n	80021b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <__NVIC_SetPriority+0xd8>)
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0019      	movs	r1, r3
 8002158:	230f      	movs	r3, #15
 800215a:	400b      	ands	r3, r1
 800215c:	3b08      	subs	r3, #8
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3306      	adds	r3, #6
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1dfa      	adds	r2, r7, #7
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	0011      	movs	r1, r2
 8002170:	2203      	movs	r2, #3
 8002172:	400a      	ands	r2, r1
 8002174:	00d2      	lsls	r2, r2, #3
 8002176:	21ff      	movs	r1, #255	; 0xff
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	43d2      	mvns	r2, r2
 800217e:	401a      	ands	r2, r3
 8002180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	401a      	ands	r2, r3
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	2303      	movs	r3, #3
 8002192:	4003      	ands	r3, r0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <__NVIC_SetPriority+0xd8>)
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	001c      	movs	r4, r3
 80021a0:	230f      	movs	r3, #15
 80021a2:	4023      	ands	r3, r4
 80021a4:	3b08      	subs	r3, #8
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	430a      	orrs	r2, r1
 80021aa:	3306      	adds	r3, #6
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18c3      	adds	r3, r0, r3
 80021b0:	3304      	adds	r3, #4
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b003      	add	sp, #12
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	210f      	movs	r1, #15
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	1c02      	adds	r2, r0, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ff81 	bl	80020e8 <__NVIC_SetPriority>
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b004      	add	sp, #16
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	0002      	movs	r2, r0
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff ff35 	bl	8002070 <__NVIC_EnableIRQ>
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	0002      	movs	r2, r0
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b25b      	sxtb	r3, r3
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff3f 	bl	80020a4 <__NVIC_DisableIRQ>
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e056      	b.n	80022f0 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7f5b      	ldrb	r3, [r3, #29]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe f807 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	791b      	ldrb	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_CRC_Init+0xc8>)
 800226e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2118      	movs	r1, #24
 800227c:	438a      	bics	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e00b      	b.n	800229a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f000 f993 	bl	80025b8 <HAL_CRCEx_Polynomial_Set>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d001      	beq.n	800229a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e02a      	b.n	80022f0 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	795b      	ldrb	r3, [r3, #5]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4252      	negs	r2, r2
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	e004      	b.n	80022b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6912      	ldr	r2, [r2, #16]
 80022b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2260      	movs	r2, #96	; 0x60
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	4393      	bics	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	04c11db7 	.word	0x04c11db7

080022fc <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2202      	movs	r2, #2
 8002310:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d005      	beq.n	8002326 <HAL_CRC_Accumulate+0x2a>
 800231a:	d82d      	bhi.n	8002378 <HAL_CRC_Accumulate+0x7c>
 800231c:	2b01      	cmp	r3, #1
 800231e:	d019      	beq.n	8002354 <HAL_CRC_Accumulate+0x58>
 8002320:	2b02      	cmp	r3, #2
 8002322:	d020      	beq.n	8002366 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002324:	e028      	b.n	8002378 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e00a      	b.n	8002342 <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	18d2      	adds	r2, r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3301      	adds	r3, #1
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d3f0      	bcc.n	800232c <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
      break;
 8002352:	e012      	b.n	800237a <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f864 	bl	8002428 <CRC_Handle_8>
 8002360:	0003      	movs	r3, r0
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	e009      	b.n	800237a <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f8ec 	bl	800254a <CRC_Handle_16>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
      break;
 8002376:	e000      	b.n	800237a <HAL_CRC_Accumulate+0x7e>
      break;
 8002378:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002380:	693b      	ldr	r3, [r7, #16]
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b006      	add	sp, #24
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2202      	movs	r2, #2
 800239e:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2101      	movs	r1, #1
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d005      	beq.n	80023c4 <HAL_CRC_Calculate+0x3a>
 80023b8:	d82d      	bhi.n	8002416 <HAL_CRC_Calculate+0x8c>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d019      	beq.n	80023f2 <HAL_CRC_Calculate+0x68>
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d020      	beq.n	8002404 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80023c2:	e028      	b.n	8002416 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	18d2      	adds	r2, r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3f0      	bcc.n	80023ca <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
      break;
 80023f0:	e012      	b.n	8002418 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 f815 	bl	8002428 <CRC_Handle_8>
 80023fe:	0003      	movs	r3, r0
 8002400:	613b      	str	r3, [r7, #16]
      break;
 8002402:	e009      	b.n	8002418 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f89d 	bl	800254a <CRC_Handle_16>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]
      break;
 8002414:	e000      	b.n	8002418 <HAL_CRC_Calculate+0x8e>
      break;
 8002416:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800241e:	693b      	ldr	r3, [r7, #16]
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b006      	add	sp, #24
 8002426:	bd80      	pop	{r7, pc}

08002428 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e023      	b.n	8002482 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	18d3      	adds	r3, r2, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	3301      	adds	r3, #1
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	18cb      	adds	r3, r1, r3
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002454:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	18cb      	adds	r3, r1, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002464:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	3303      	adds	r3, #3
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	18cb      	adds	r3, r1, r3
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002478:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800247a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3d6      	bcc.n	800243a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	d053      	beq.n	800253c <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	4013      	ands	r3, r2
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	18d2      	adds	r2, r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d119      	bne.n	80024ec <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	18d3      	adds	r3, r2, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	3301      	adds	r3, #1
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	18cb      	adds	r3, r1, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	211a      	movs	r1, #26
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	187a      	adds	r2, r7, r1
 80024e8:	8812      	ldrh	r2, [r2, #0]
 80024ea:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d122      	bne.n	800253c <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	18d3      	adds	r3, r2, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b21a      	sxth	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3301      	adds	r3, #1
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	18cb      	adds	r3, r1, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b21b      	sxth	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b21a      	sxth	r2, r3
 8002516:	211a      	movs	r1, #26
 8002518:	187b      	adds	r3, r7, r1
 800251a:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	187a      	adds	r2, r7, r1
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	18d2      	adds	r2, r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b008      	add	sp, #32
 8002548:	bd80      	pop	{r7, pc}

0800254a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e013      	b.n	8002584 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	18d3      	adds	r3, r2, r3
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	041a      	lsls	r2, r3, #16
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	18cb      	adds	r3, r1, r3
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	0019      	movs	r1, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3e6      	bcc.n	800255c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	18d3      	adds	r3, r2, r3
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b006      	add	sp, #24
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2117      	movs	r1, #23
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025cc:	231f      	movs	r3, #31
 80025ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d103      	bne.n	80025e0 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e045      	b.n	800266c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	613a      	str	r2, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_CRCEx_Polynomial_Set+0x46>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	221f      	movs	r2, #31
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	40da      	lsrs	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0f1      	beq.n	80025e2 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b18      	cmp	r3, #24
 8002602:	d00f      	beq.n	8002624 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b18      	cmp	r3, #24
 8002608:	d824      	bhi.n	8002654 <HAL_CRCEx_Polynomial_Set+0x9c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b10      	cmp	r3, #16
 800260e:	d011      	beq.n	8002634 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d81e      	bhi.n	8002654 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_CRCEx_Polynomial_Set+0xa6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d010      	beq.n	8002644 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002622:	e017      	b.n	8002654 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b06      	cmp	r3, #6
 8002628:	d91b      	bls.n	8002662 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 800262a:	2317      	movs	r3, #23
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002632:	e016      	b.n	8002662 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b07      	cmp	r3, #7
 8002638:	d915      	bls.n	8002666 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002642:	e010      	b.n	8002666 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	d90f      	bls.n	800266a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 800264a:	2317      	movs	r3, #23
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002652:	e00a      	b.n	800266a <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002654:	2317      	movs	r3, #23
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
        break;
 800265c:	e006      	b.n	800266c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	e004      	b.n	800266c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	e002      	b.n	800266c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	e000      	b.n	800266c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800266a:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800266c:	2317      	movs	r3, #23
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2218      	movs	r2, #24
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002694:	2317      	movs	r3, #23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b006      	add	sp, #24
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e036      	b.n	8002728 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	2102      	movs	r1, #2
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_DMA_Init+0x8c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fa0c 	bl	8002b28 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2221      	movs	r2, #33	; 0x21
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}
 8002730:	ffffc00f 	.word	0xffffc00f

08002734 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e03b      	b.n	80027be <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	438a      	bics	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f9d5 	bl	8002b28 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2101      	movs	r1, #1
 8002788:	4091      	lsls	r1, r2
 800278a:	000a      	movs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2221      	movs	r2, #33	; 0x21
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2317      	movs	r3, #23
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_DMA_Start_IT+0x24>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e04f      	b.n	800288a <HAL_DMA_Start_IT+0xc4>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	; 0x21
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d13a      	bne.n	8002874 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	; 0x21
 8002802:	2102      	movs	r1, #2
 8002804:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f954 	bl	8002ad0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	210e      	movs	r1, #14
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	210a      	movs	r1, #10
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2104      	movs	r1, #4
 800285e:	438a      	bics	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e007      	b.n	8002884 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	2100      	movs	r1, #0
 800287a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800287c:	2317      	movs	r3, #23
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2202      	movs	r2, #2
 8002882:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b006      	add	sp, #24
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	5c9b      	ldrb	r3, [r3, r2]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d008      	beq.n	80028b8 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2204      	movs	r2, #4
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e020      	b.n	80028fa <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	210e      	movs	r1, #14
 80028c4:	438a      	bics	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2101      	movs	r1, #1
 80028d4:	438a      	bics	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2101      	movs	r1, #1
 80028e2:	4091      	lsls	r1, r2
 80028e4:	000a      	movs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	2101      	movs	r1, #1
 80028ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	210f      	movs	r1, #15
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2221      	movs	r2, #33	; 0x21
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d006      	beq.n	800292c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e028      	b.n	800297e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	210e      	movs	r1, #14
 8002938:	438a      	bics	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2101      	movs	r1, #1
 8002948:	438a      	bics	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2101      	movs	r1, #1
 8002956:	4091      	lsls	r1, r2
 8002958:	000a      	movs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2221      	movs	r2, #33	; 0x21
 8002960:	2101      	movs	r1, #1
 8002962:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	0010      	movs	r0, r2
 800297c:	4798      	blx	r3
    }
  }
  return status;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2204      	movs	r2, #4
 80029aa:	409a      	lsls	r2, r3
 80029ac:	0013      	movs	r3, r2
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	d024      	beq.n	80029fe <HAL_DMA_IRQHandler+0x72>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d020      	beq.n	80029fe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2220      	movs	r2, #32
 80029c4:	4013      	ands	r3, r2
 80029c6:	d107      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2104      	movs	r1, #4
 80029d4:	438a      	bics	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2104      	movs	r1, #4
 80029e2:	4091      	lsls	r1, r2
 80029e4:	000a      	movs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d100      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x66>
 80029f0:	e06a      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	0010      	movs	r0, r2
 80029fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029fc:	e064      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2202      	movs	r2, #2
 8002a04:	409a      	lsls	r2, r3
 8002a06:	0013      	movs	r3, r2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xda>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d027      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d10b      	bne.n	8002a3a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	210a      	movs	r1, #10
 8002a2e:	438a      	bics	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2221      	movs	r2, #33	; 0x21
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	2102      	movs	r1, #2
 8002a44:	4091      	lsls	r1, r2
 8002a46:	000a      	movs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d036      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	0010      	movs	r0, r2
 8002a62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a64:	e030      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	d028      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d024      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	210e      	movs	r1, #14
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2101      	movs	r1, #1
 8002a98:	4091      	lsls	r1, r2
 8002a9a:	000a      	movs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2221      	movs	r2, #33	; 0x21
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	4798      	blx	r3
    }
  }
}
 8002ac6:	e7ff      	b.n	8002ac8 <HAL_DMA_IRQHandler+0x13c>
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4091      	lsls	r1, r2
 8002aea:	000a      	movs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d108      	bne.n	8002b10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b0e:	e007      	b.n	8002b20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	001a      	movs	r2, r3
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <DMA_CalcBaseAndBitshift+0x60>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d810      	bhi.n	8002b5e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <DMA_CalcBaseAndBitshift+0x64>)
 8002b42:	4694      	mov	ip, r2
 8002b44:	4463      	add	r3, ip
 8002b46:	2114      	movs	r1, #20
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fd fadd 	bl	8000108 <__udivsi3>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <DMA_CalcBaseAndBitshift+0x68>)
 8002b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b5c:	e00f      	b.n	8002b7e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <DMA_CalcBaseAndBitshift+0x6c>)
 8002b64:	4694      	mov	ip, r2
 8002b66:	4463      	add	r3, ip
 8002b68:	2114      	movs	r1, #20
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd facc 	bl	8000108 <__udivsi3>
 8002b70:	0003      	movs	r3, r0
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <DMA_CalcBaseAndBitshift+0x70>)
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40020407 	.word	0x40020407
 8002b8c:	bffdfff8 	.word	0xbffdfff8
 8002b90:	40020000 	.word	0x40020000
 8002b94:	bffdfbf8 	.word	0xbffdfbf8
 8002b98:	40020400 	.word	0x40020400

08002b9c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603a      	str	r2, [r7, #0]
 8002ba8:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002baa:	2317      	movs	r3, #23
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002bb2:	2316      	movs	r3, #22
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002bba:	2315      	movs	r3, #21
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <HAL_FLASH_Program+0x120>)
 8002bc4:	7e1b      	ldrb	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_FLASH_Program+0x32>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e072      	b.n	8002cb4 <HAL_FLASH_Program+0x118>
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_FLASH_Program+0x120>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bd4:	2317      	movs	r3, #23
 8002bd6:	18fe      	adds	r6, r7, r3
 8002bd8:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <HAL_FLASH_Program+0x124>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f9bc 	bl	8002f58 <FLASH_WaitForLastOperation>
 8002be0:	0003      	movs	r3, r0
 8002be2:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002be4:	2317      	movs	r3, #23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d15c      	bne.n	8002ca8 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d104      	bne.n	8002bfe <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002bf4:	2315      	movs	r3, #21
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e00b      	b.n	8002c16 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d104      	bne.n	8002c0e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c04:	2315      	movs	r3, #21
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2202      	movs	r2, #2
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e003      	b.n	8002c16 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c0e:	2315      	movs	r3, #21
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2204      	movs	r2, #4
 8002c14:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002c16:	2316      	movs	r3, #22
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e039      	b.n	8002c94 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002c20:	2116      	movs	r1, #22
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	005a      	lsls	r2, r3, #1
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	18d0      	adds	r0, r2, r3
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	001a      	movs	r2, r3
 8002c34:	3a20      	subs	r2, #32
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	db03      	blt.n	8002c42 <HAL_FLASH_Program+0xa6>
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	40d1      	lsrs	r1, r2
 8002c3e:	000c      	movs	r4, r1
 8002c40:	e008      	b.n	8002c54 <HAL_FLASH_Program+0xb8>
 8002c42:	2220      	movs	r2, #32
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	40d9      	lsrs	r1, r3
 8002c50:	000c      	movs	r4, r1
 8002c52:	4314      	orrs	r4, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	40da      	lsrs	r2, r3
 8002c58:	0015      	movs	r5, r2
 8002c5a:	b2a3      	uxth	r3, r4
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	f000 f95f 	bl	8002f20 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c62:	2317      	movs	r3, #23
 8002c64:	18fe      	adds	r6, r7, r3
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_FLASH_Program+0x124>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f975 	bl	8002f58 <FLASH_WaitForLastOperation>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_FLASH_Program+0x128>)
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_FLASH_Program+0x128>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002c7e:	2317      	movs	r3, #23
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10e      	bne.n	8002ca6 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8002c88:	2116      	movs	r1, #22
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	3201      	adds	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	2316      	movs	r3, #22
 8002c96:	18fa      	adds	r2, r7, r3
 8002c98:	2315      	movs	r3, #21
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3bd      	bcc.n	8002c20 <HAL_FLASH_Program+0x84>
 8002ca4:	e000      	b.n	8002ca8 <HAL_FLASH_Program+0x10c>
      {
        break;
 8002ca6:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_FLASH_Program+0x120>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	761a      	strb	r2, [r3, #24]

  return status;
 8002cae:	2317      	movs	r3, #23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b007      	add	sp, #28
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbc:	20000760 	.word	0x20000760
 8002cc0:	0000c350 	.word	0x0000c350
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d005      	beq.n	8002cea <HAL_FLASH_IRQHandler+0x22>
 8002cde:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d10f      	bne.n	8002d0a <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002cea:	4b69      	ldr	r3, [pc, #420]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002cf0:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4252      	negs	r2, r2
 8002cf6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002cf8:	f000 f96e 	bl	8002fd8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f8d2 	bl	8002ea8 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d04:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d000      	beq.n	8002d18 <HAL_FLASH_IRQHandler+0x50>
 8002d16:	e0a1      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d18:	4b5c      	ldr	r3, [pc, #368]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <HAL_FLASH_IRQHandler+0x62>
 8002d28:	e098      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d132      	bne.n	8002d9a <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002d34:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d3c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01b      	beq.n	8002d7e <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f8a2 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002d54:	4b4e      	ldr	r3, [pc, #312]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	4463      	add	r3, ip
 8002d60:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002d62:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d6e:	2102      	movs	r1, #2
 8002d70:	438a      	bics	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f95e 	bl	8003038 <FLASH_PageErase>
 8002d7c:	e06e      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	425b      	negs	r3, r3
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f880 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>
 8002d98:	e060      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d10c      	bne.n	8002dbe <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002da4:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002daa:	2104      	movs	r1, #4
 8002dac:	438a      	bics	r2, r1
 8002dae:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 f871 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e04e      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002dc6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002dd8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	0419      	lsls	r1, r3, #16
 8002de8:	0c14      	lsrs	r4, r2, #16
 8002dea:	430c      	orrs	r4, r1
 8002dec:	0c1d      	lsrs	r5, r3, #16
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002df0:	611c      	str	r4, [r3, #16]
 8002df2:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	b292      	uxth	r2, r2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f887 	bl	8002f20 <FLASH_Program_HalfWord>
 8002e12:	e023      	b.n	8002e5c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d105      	bne.n	8002e2a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f838 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>
 8002e28:	e011      	b.n	8002e4e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d106      	bne.n	8002e42 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	3b02      	subs	r3, #2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f82c 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	3b06      	subs	r3, #6
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 f825 	bl	8002e98 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	4252      	negs	r2, r2
 8002e54:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e6c:	2107      	movs	r1, #7
 8002e6e:	438a      	bics	r2, r1
 8002e70:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e78:	4906      	ldr	r1, [pc, #24]	; (8002e94 <HAL_FLASH_IRQHandler+0x1cc>)
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	761a      	strb	r2, [r3, #24]
  }
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	20000760 	.word	0x20000760
 8002e94:	ffffebff 	.word	0xffffebff

08002e98 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_FLASH_Unlock+0x40>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_FLASH_Unlock+0x40>)
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_FLASH_Unlock+0x44>)
 8002ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_FLASH_Unlock+0x40>)
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_FLASH_Unlock+0x48>)
 8002ed8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_FLASH_Unlock+0x40>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d002      	beq.n	8002eea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	45670123 	.word	0x45670123
 8002f00:	cdef89ab 	.word	0xcdef89ab

08002f04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_FLASH_Lock+0x18>)
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_FLASH_Lock+0x18>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	430a      	orrs	r2, r1
 8002f12:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40022000 	.word	0x40022000

08002f20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	000a      	movs	r2, r1
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <FLASH_Program_HalfWord+0x30>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <FLASH_Program_HalfWord+0x34>)
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <FLASH_Program_HalfWord+0x34>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1cba      	adds	r2, r7, #2
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	801a      	strh	r2, [r3, #0]
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000760 	.word	0x20000760
 8002f54:	40022000 	.word	0x40022000

08002f58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff f858 	bl	8002014 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f68:	e00f      	b.n	8002f8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	d00c      	beq.n	8002f8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <FLASH_WaitForLastOperation+0x2e>
 8002f76:	f7ff f84d 	bl	8002014 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d201      	bcs.n	8002f8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e01f      	b.n	8002fca <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <FLASH_WaitForLastOperation+0x7c>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d0e9      	beq.n	8002f6a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <FLASH_WaitForLastOperation+0x7c>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d102      	bne.n	8002fa8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <FLASH_WaitForLastOperation+0x7c>)
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <FLASH_WaitForLastOperation+0x7c>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d005      	beq.n	8002fc0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <FLASH_WaitForLastOperation+0x7c>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d103      	bne.n	8002fc8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002fc0:	f000 f80a 	bl	8002fd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	40022000 	.word	0x40022000

08002fd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <FLASH_SetErrorCode+0x58>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d109      	bne.n	8003002 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <FLASH_SetErrorCode+0x5c>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <FLASH_SetErrorCode+0x5c>)
 8002ff8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4313      	orrs	r3, r2
 8003000:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <FLASH_SetErrorCode+0x58>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	2b04      	cmp	r3, #4
 800300c:	d109      	bne.n	8003022 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <FLASH_SetErrorCode+0x5c>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2201      	movs	r2, #1
 8003014:	431a      	orrs	r2, r3
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <FLASH_SetErrorCode+0x5c>)
 8003018:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2204      	movs	r2, #4
 800301e:	4313      	orrs	r3, r2
 8003020:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003022:	4b03      	ldr	r3, [pc, #12]	; (8003030 <FLASH_SetErrorCode+0x58>)
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}  
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40022000 	.word	0x40022000
 8003034:	20000760 	.word	0x20000760

08003038 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <FLASH_PageErase+0x34>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <FLASH_PageErase+0x38>)
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <FLASH_PageErase+0x38>)
 800304c:	2102      	movs	r1, #2
 800304e:	430a      	orrs	r2, r1
 8003050:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <FLASH_PageErase+0x38>)
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <FLASH_PageErase+0x38>)
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <FLASH_PageErase+0x38>)
 800305e:	2140      	movs	r1, #64	; 0x40
 8003060:	430a      	orrs	r2, r1
 8003062:	611a      	str	r2, [r3, #16]
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000760 	.word	0x20000760
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e155      	b.n	8003330 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4091      	lsls	r1, r2
 800308e:	000a      	movs	r2, r1
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d100      	bne.n	800309c <HAL_GPIO_Init+0x28>
 800309a:	e146      	b.n	800332a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d005      	beq.n	80030b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d130      	bne.n	8003116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	409a      	lsls	r2, r3
 80030c2:	0013      	movs	r3, r2
 80030c4:	43da      	mvns	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	43da      	mvns	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	2201      	movs	r2, #1
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
 8003108:	0013      	movs	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	4013      	ands	r3, r2
 800311e:	2b03      	cmp	r3, #3
 8003120:	d017      	beq.n	8003152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	409a      	lsls	r2, r3
 8003130:	0013      	movs	r3, r2
 8003132:	43da      	mvns	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2203      	movs	r2, #3
 8003158:	4013      	ands	r3, r2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d123      	bne.n	80031a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	58d3      	ldr	r3, [r2, r3]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2207      	movs	r2, #7
 8003170:	4013      	ands	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	43da      	mvns	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2107      	movs	r1, #7
 800318a:	400b      	ands	r3, r1
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	401a      	ands	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	23c0      	movs	r3, #192	; 0xc0
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	4013      	ands	r3, r2
 80031e4:	d100      	bne.n	80031e8 <HAL_GPIO_Init+0x174>
 80031e6:	e0a0      	b.n	800332a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e8:	4b57      	ldr	r3, [pc, #348]	; (8003348 <HAL_GPIO_Init+0x2d4>)
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_GPIO_Init+0x2d4>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	430a      	orrs	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_GPIO_Init+0x2d4>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_GPIO_Init+0x2d8>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	589b      	ldr	r3, [r3, r2]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2203      	movs	r2, #3
 8003212:	4013      	ands	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	43da      	mvns	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	2390      	movs	r3, #144	; 0x90
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	429a      	cmp	r2, r3
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x1ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a47      	ldr	r2, [pc, #284]	; (8003350 <HAL_GPIO_Init+0x2dc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x1ea>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_GPIO_Init+0x2e0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x1e6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a45      	ldr	r2, [pc, #276]	; (8003358 <HAL_GPIO_Init+0x2e4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x1e2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a44      	ldr	r2, [pc, #272]	; (800335c <HAL_GPIO_Init+0x2e8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x1de>
 800324e:	2304      	movs	r3, #4
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x1f0>
 8003252:	2305      	movs	r3, #5
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x1f0>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x1f0>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x1f0>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x1f0>
 8003262:	2300      	movs	r3, #0
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	2103      	movs	r1, #3
 8003268:	400a      	ands	r2, r1
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	; (800334c <HAL_GPIO_Init+0x2d8>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43da      	mvns	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	035b      	lsls	r3, r3, #13
 800329a:	4013      	ands	r3, r2
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032ac:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43da      	mvns	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	039b      	lsls	r3, r3, #14
 80032c4:	4013      	ands	r3, r2
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43da      	mvns	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	029b      	lsls	r3, r3, #10
 80032ee:	4013      	ands	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43da      	mvns	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	4013      	ands	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_GPIO_Init+0x2ec>)
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	40da      	lsrs	r2, r3
 8003338:	1e13      	subs	r3, r2, #0
 800333a:	d000      	beq.n	800333e <HAL_GPIO_Init+0x2ca>
 800333c:	e6a2      	b.n	8003084 <HAL_GPIO_Init+0x10>
  } 
}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40010000 	.word	0x40010000
 8003350:	48000400 	.word	0x48000400
 8003354:	48000800 	.word	0x48000800
 8003358:	48000c00 	.word	0x48000c00
 800335c:	48001000 	.word	0x48001000
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003372:	e0b7      	b.n	80034e4 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003374:	2201      	movs	r2, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	409a      	lsls	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d100      	bne.n	8003388 <HAL_GPIO_DeInit+0x24>
 8003386:	e0aa      	b.n	80034de <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003388:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_GPIO_DeInit+0x198>)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	589b      	ldr	r3, [r3, r2]
 8003394:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2203      	movs	r2, #3
 800339a:	4013      	ands	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	2390      	movs	r3, #144	; 0x90
 80033ac:	05db      	lsls	r3, r3, #23
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_DeInit+0x82>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_GPIO_DeInit+0x19c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_DeInit+0x7e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a51      	ldr	r2, [pc, #324]	; (8003504 <HAL_GPIO_DeInit+0x1a0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_DeInit+0x7a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a50      	ldr	r2, [pc, #320]	; (8003508 <HAL_GPIO_DeInit+0x1a4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_DeInit+0x76>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	; (800350c <HAL_GPIO_DeInit+0x1a8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_DeInit+0x72>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_DeInit+0x84>
 80033d6:	2305      	movs	r3, #5
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_DeInit+0x84>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_DeInit+0x84>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_DeInit+0x84>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_DeInit+0x84>
 80033e6:	2300      	movs	r3, #0
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	2103      	movs	r1, #3
 80033ec:	400a      	ands	r2, r1
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d132      	bne.n	800345e <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033f8:	4b45      	ldr	r3, [pc, #276]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43d9      	mvns	r1, r3
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 8003402:	400a      	ands	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003406:	4b42      	ldr	r3, [pc, #264]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43d9      	mvns	r1, r3
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 8003410:	400a      	ands	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003414:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43d9      	mvns	r1, r3
 800341c:	4b3c      	ldr	r3, [pc, #240]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 800341e:	400a      	ands	r2, r1
 8003420:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43d9      	mvns	r1, r3
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_GPIO_DeInit+0x1ac>)
 800342c:	400a      	ands	r2, r1
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2203      	movs	r2, #3
 8003434:	4013      	ands	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	409a      	lsls	r2, r3
 800343c:	0013      	movs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_GPIO_DeInit+0x198>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	589a      	ldr	r2, [r3, r2]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43d9      	mvns	r1, r3
 8003450:	482a      	ldr	r0, [pc, #168]	; (80034fc <HAL_GPIO_DeInit+0x198>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	400a      	ands	r2, r1
 8003458:	3302      	adds	r3, #2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	0052      	lsls	r2, r2, #1
 8003466:	2103      	movs	r1, #3
 8003468:	4091      	lsls	r1, r2
 800346a:	000a      	movs	r2, r1
 800346c:	43d2      	mvns	r2, r2
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	58d3      	ldr	r3, [r2, r3]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	2107      	movs	r1, #7
 8003484:	400a      	ands	r2, r1
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	210f      	movs	r1, #15
 800348a:	4091      	lsls	r1, r2
 800348c:	000a      	movs	r2, r1
 800348e:	43d1      	mvns	r1, r2
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	08d2      	lsrs	r2, r2, #3
 8003494:	4019      	ands	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	0092      	lsls	r2, r2, #2
 800349c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	0052      	lsls	r2, r2, #1
 80034a6:	2103      	movs	r1, #3
 80034a8:	4091      	lsls	r1, r2
 80034aa:	000a      	movs	r2, r1
 80034ac:	43d2      	mvns	r2, r2
 80034ae:	401a      	ands	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2101      	movs	r1, #1
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4091      	lsls	r1, r2
 80034be:	000a      	movs	r2, r1
 80034c0:	43d2      	mvns	r2, r2
 80034c2:	401a      	ands	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	0052      	lsls	r2, r2, #1
 80034d0:	2103      	movs	r1, #3
 80034d2:	4091      	lsls	r1, r2
 80034d4:	000a      	movs	r2, r1
 80034d6:	43d2      	mvns	r2, r2
 80034d8:	401a      	ands	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    }

    position++;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	40da      	lsrs	r2, r3
 80034ea:	1e13      	subs	r3, r2, #0
 80034ec:	d000      	beq.n	80034f0 <HAL_GPIO_DeInit+0x18c>
 80034ee:	e741      	b.n	8003374 <HAL_GPIO_DeInit+0x10>
  }
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b006      	add	sp, #24
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40010000 	.word	0x40010000
 8003500:	48000400 	.word	0x48000400
 8003504:	48000800 	.word	0x48000800
 8003508:	48000c00 	.word	0x48000c00
 800350c:	48001000 	.word	0x48001000
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	0008      	movs	r0, r1
 800351e:	0011      	movs	r1, r2
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	1c02      	adds	r2, r0, #0
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	1c7b      	adds	r3, r7, #1
 8003528:	1c0a      	adds	r2, r1, #0
 800352a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800352c:	1c7b      	adds	r3, r7, #1
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003534:	1cbb      	adds	r3, r7, #2
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800353e:	1cbb      	adds	r3, r7, #2
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	000a      	movs	r2, r1
 8003558:	1cbb      	adds	r3, r7, #2
 800355a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003562:	1cbb      	adds	r3, r7, #2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43db      	mvns	r3, r3
 8003570:	1cb9      	adds	r1, r7, #2
 8003572:	8809      	ldrh	r1, [r1, #0]
 8003574:	400b      	ands	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_PWR_PVD_IRQHandler+0x24>)
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	4013      	ands	r3, r2
 8003592:	d005      	beq.n	80035a0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003594:	f000 f80a 	bl	80035ac <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_PWR_PVD_IRQHandler+0x24>)
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0252      	lsls	r2, r2, #9
 800359e:	615a      	str	r2, [r3, #20]
  }
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	da05      	bge.n	80035d0 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 80035c4:	f000 f80a 	bl	80035dc <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0612      	lsls	r2, r2, #24
 80035ce:	615a      	str	r2, [r3, #20]
  }
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f000 fb76 	bl	8003ce8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	d100      	bne.n	8003608 <HAL_RCC_OscConfig+0x20>
 8003606:	e08e      	b.n	8003726 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003608:	4bc5      	ldr	r3, [pc, #788]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	220c      	movs	r2, #12
 800360e:	4013      	ands	r3, r2
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00e      	beq.n	8003632 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003614:	4bc2      	ldr	r3, [pc, #776]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	220c      	movs	r2, #12
 800361a:	4013      	ands	r3, r2
 800361c:	2b08      	cmp	r3, #8
 800361e:	d117      	bne.n	8003650 <HAL_RCC_OscConfig+0x68>
 8003620:	4bbf      	ldr	r3, [pc, #764]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	23c0      	movs	r3, #192	; 0xc0
 8003626:	025b      	lsls	r3, r3, #9
 8003628:	401a      	ands	r2, r3
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	025b      	lsls	r3, r3, #9
 800362e:	429a      	cmp	r2, r3
 8003630:	d10e      	bne.n	8003650 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003632:	4bbb      	ldr	r3, [pc, #748]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	029b      	lsls	r3, r3, #10
 800363a:	4013      	ands	r3, r2
 800363c:	d100      	bne.n	8003640 <HAL_RCC_OscConfig+0x58>
 800363e:	e071      	b.n	8003724 <HAL_RCC_OscConfig+0x13c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d000      	beq.n	800364a <HAL_RCC_OscConfig+0x62>
 8003648:	e06c      	b.n	8003724 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f000 fb4c 	bl	8003ce8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x80>
 8003658:	4bb1      	ldr	r3, [pc, #708]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4bb0      	ldr	r3, [pc, #704]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0249      	lsls	r1, r1, #9
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e02f      	b.n	80036c8 <HAL_RCC_OscConfig+0xe0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0xa2>
 8003670:	4bab      	ldr	r3, [pc, #684]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4baa      	ldr	r3, [pc, #680]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003676:	49ab      	ldr	r1, [pc, #684]	; (8003924 <HAL_RCC_OscConfig+0x33c>)
 8003678:	400a      	ands	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	4ba8      	ldr	r3, [pc, #672]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4ba7      	ldr	r3, [pc, #668]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003682:	49a9      	ldr	r1, [pc, #676]	; (8003928 <HAL_RCC_OscConfig+0x340>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e01e      	b.n	80036c8 <HAL_RCC_OscConfig+0xe0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10e      	bne.n	80036b0 <HAL_RCC_OscConfig+0xc8>
 8003692:	4ba3      	ldr	r3, [pc, #652]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba2      	ldr	r3, [pc, #648]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	02c9      	lsls	r1, r1, #11
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	4b9f      	ldr	r3, [pc, #636]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b9e      	ldr	r3, [pc, #632]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	0249      	lsls	r1, r1, #9
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0xe0>
 80036b0:	4b9b      	ldr	r3, [pc, #620]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b9a      	ldr	r3, [pc, #616]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036b6:	499b      	ldr	r1, [pc, #620]	; (8003924 <HAL_RCC_OscConfig+0x33c>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	4b98      	ldr	r3, [pc, #608]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b97      	ldr	r3, [pc, #604]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036c2:	4999      	ldr	r1, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x340>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d014      	beq.n	80036fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe fca0 	bl	8002014 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036da:	f7fe fc9b 	bl	8002014 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e2fd      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ec:	4b8c      	ldr	r3, [pc, #560]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0xf2>
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fc8b 	bl	8002014 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fc86 	bl	8002014 <HAL_GetTick>
 8003708:	0002      	movs	r2, r0
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e2e8      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b82      	ldr	r3, [pc, #520]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	029b      	lsls	r3, r3, #10
 800371e:	4013      	ands	r3, r2
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x11c>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d100      	bne.n	8003732 <HAL_RCC_OscConfig+0x14a>
 8003730:	e06c      	b.n	800380c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	220c      	movs	r2, #12
 8003738:	4013      	ands	r3, r2
 800373a:	d00e      	beq.n	800375a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800373c:	4b78      	ldr	r3, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	220c      	movs	r2, #12
 8003742:	4013      	ands	r3, r2
 8003744:	2b08      	cmp	r3, #8
 8003746:	d11f      	bne.n	8003788 <HAL_RCC_OscConfig+0x1a0>
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	23c0      	movs	r3, #192	; 0xc0
 800374e:	025b      	lsls	r3, r3, #9
 8003750:	401a      	ands	r2, r3
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	429a      	cmp	r2, r3
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b71      	ldr	r3, [pc, #452]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d005      	beq.n	8003770 <HAL_RCC_OscConfig+0x188>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e2bb      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	22f8      	movs	r2, #248	; 0xf8
 8003776:	4393      	bics	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00da      	lsls	r2, r3, #3
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e041      	b.n	800380c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d024      	beq.n	80037da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003796:	2101      	movs	r1, #1
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe fc3a 	bl	8002014 <HAL_GetTick>
 80037a0:	0003      	movs	r3, r0
 80037a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fc35 	bl	8002014 <HAL_GetTick>
 80037aa:	0002      	movs	r2, r0
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e297      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2202      	movs	r2, #2
 80037be:	4013      	ands	r3, r2
 80037c0:	d0f1      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	22f8      	movs	r2, #248	; 0xf8
 80037c8:	4393      	bics	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	00da      	lsls	r2, r3, #3
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	438a      	bics	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fc15 	bl	8002014 <HAL_GetTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fe fc10 	bl	8002014 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e272      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d1f1      	bne.n	80037f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	4013      	ands	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fe fbf3 	bl	8002014 <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003834:	f7fe fbee 	bl	8002014 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e250      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2202      	movs	r2, #2
 800384c:	4013      	ands	r3, r2
 800384e:	d0f1      	beq.n	8003834 <HAL_RCC_OscConfig+0x24c>
 8003850:	e018      	b.n	8003884 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003858:	2101      	movs	r1, #1
 800385a:	438a      	bics	r2, r1
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fe fbd9 	bl	8002014 <HAL_GetTick>
 8003862:	0003      	movs	r3, r0
 8003864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003868:	f7fe fbd4 	bl	8002014 <HAL_GetTick>
 800386c:	0002      	movs	r2, r0
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e236      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2202      	movs	r2, #2
 8003880:	4013      	ands	r3, r2
 8003882:	d1f1      	bne.n	8003868 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2204      	movs	r2, #4
 800388a:	4013      	ands	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_RCC_OscConfig+0x2a8>
 800388e:	e0b5      	b.n	80039fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003890:	201f      	movs	r0, #31
 8003892:	183b      	adds	r3, r7, r0
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	055b      	lsls	r3, r3, #21
 80038a0:	4013      	ands	r3, r2
 80038a2:	d110      	bne.n	80038c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	0549      	lsls	r1, r1, #21
 80038ae:	430a      	orrs	r2, r1
 80038b0:	61da      	str	r2, [r3, #28]
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	055b      	lsls	r3, r3, #21
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038c0:	183b      	adds	r3, r7, r0
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_OscConfig+0x344>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4013      	ands	r3, r2
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_RCC_OscConfig+0x344>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_OscConfig+0x344>)
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0049      	lsls	r1, r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e0:	f7fe fb98 	bl	8002014 <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fe fb93 	bl	8002014 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1f5      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x344>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10f      	bne.n	8003930 <HAL_RCC_OscConfig+0x348>
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_RCC_OscConfig+0x338>)
 8003916:	2101      	movs	r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	621a      	str	r2, [r3, #32]
 800391c:	e036      	b.n	800398c <HAL_RCC_OscConfig+0x3a4>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	40021000 	.word	0x40021000
 8003924:	fffeffff 	.word	0xfffeffff
 8003928:	fffbffff 	.word	0xfffbffff
 800392c:	40007000 	.word	0x40007000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x36a>
 8003938:	4bca      	ldr	r3, [pc, #808]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	4bc9      	ldr	r3, [pc, #804]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	621a      	str	r2, [r3, #32]
 8003944:	4bc7      	ldr	r3, [pc, #796]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	4bc6      	ldr	r3, [pc, #792]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800394a:	2104      	movs	r1, #4
 800394c:	438a      	bics	r2, r1
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x3a4>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x38c>
 800395a:	4bc2      	ldr	r3, [pc, #776]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	4bc1      	ldr	r3, [pc, #772]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003960:	2104      	movs	r1, #4
 8003962:	430a      	orrs	r2, r1
 8003964:	621a      	str	r2, [r3, #32]
 8003966:	4bbf      	ldr	r3, [pc, #764]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	4bbe      	ldr	r3, [pc, #760]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800396c:	2101      	movs	r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	621a      	str	r2, [r3, #32]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x3a4>
 8003974:	4bbb      	ldr	r3, [pc, #748]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	4bba      	ldr	r3, [pc, #744]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	621a      	str	r2, [r3, #32]
 8003980:	4bb8      	ldr	r3, [pc, #736]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	4bb7      	ldr	r3, [pc, #732]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003986:	2104      	movs	r1, #4
 8003988:	438a      	bics	r2, r1
 800398a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fe fb3e 	bl	8002014 <HAL_GetTick>
 8003998:	0003      	movs	r3, r0
 800399a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe fb39 	bl	8002014 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	4aaf      	ldr	r2, [pc, #700]	; (8003c68 <HAL_RCC_OscConfig+0x680>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e19a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b2:	4bac      	ldr	r3, [pc, #688]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x3b6>
 80039bc:	e013      	b.n	80039e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe fb29 	bl	8002014 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c6:	e009      	b.n	80039dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe fb24 	bl	8002014 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4aa5      	ldr	r2, [pc, #660]	; (8003c68 <HAL_RCC_OscConfig+0x680>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e185      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	4ba1      	ldr	r3, [pc, #644]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e6:	231f      	movs	r3, #31
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b9c      	ldr	r3, [pc, #624]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	4b9b      	ldr	r3, [pc, #620]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 80039f6:	499d      	ldr	r1, [pc, #628]	; (8003c6c <HAL_RCC_OscConfig+0x684>)
 80039f8:	400a      	ands	r2, r1
 80039fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d12a      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a0e:	4b95      	ldr	r3, [pc, #596]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	4b94      	ldr	r3, [pc, #592]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a14:	2104      	movs	r1, #4
 8003a16:	430a      	orrs	r2, r1
 8003a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a1a:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1e:	4b91      	ldr	r3, [pc, #580]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe faf5 	bl	8002014 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a30:	f7fe faf0 	bl	8002014 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e152      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f1      	beq.n	8003a30 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a4c:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	22f8      	movs	r2, #248	; 0xf8
 8003a52:	4393      	bics	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	00da      	lsls	r2, r3, #3
 8003a5c:	4b81      	ldr	r3, [pc, #516]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
 8003a62:	e034      	b.n	8003ace <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	3305      	adds	r3, #5
 8003a6a:	d111      	bne.n	8003a90 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003a6c:	4b7d      	ldr	r3, [pc, #500]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a70:	4b7c      	ldr	r3, [pc, #496]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a72:	2104      	movs	r1, #4
 8003a74:	438a      	bics	r2, r1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a78:	4b7a      	ldr	r3, [pc, #488]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	22f8      	movs	r2, #248	; 0xf8
 8003a7e:	4393      	bics	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	00da      	lsls	r2, r3, #3
 8003a88:	4b76      	ldr	r3, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a8e:	e01e      	b.n	8003ace <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a96:	2104      	movs	r1, #4
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a9c:	4b71      	ldr	r3, [pc, #452]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa0:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fab4 	bl	8002014 <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ab2:	f7fe faaf 	bl	8002014 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e111      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ac4:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d1f1      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d05c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003ad8:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	220c      	movs	r2, #12
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b0c      	cmp	r3, #12
 8003ae2:	d00e      	beq.n	8003b02 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003ae4:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	220c      	movs	r2, #12
 8003aea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d114      	bne.n	8003b1a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003af0:	4b5c      	ldr	r3, [pc, #368]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	23c0      	movs	r3, #192	; 0xc0
 8003af6:	025b      	lsls	r3, r3, #9
 8003af8:	401a      	ands	r2, r3
 8003afa:	23c0      	movs	r3, #192	; 0xc0
 8003afc:	025b      	lsls	r3, r3, #9
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b02:	4b58      	ldr	r3, [pc, #352]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	029b      	lsls	r3, r3, #10
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d040      	beq.n	8003b90 <HAL_RCC_OscConfig+0x5a8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d03c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0e6      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b22:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b26:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0249      	lsls	r1, r1, #9
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fa70 	bl	8002014 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3a:	f7fe fa6b 	bl	8002014 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0cd      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	4013      	ands	r3, r2
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x552>
 8003b58:	e01b      	b.n	8003b92 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b5a:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b60:	4943      	ldr	r1, [pc, #268]	; (8003c70 <HAL_RCC_OscConfig+0x688>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fa55 	bl	8002014 <HAL_GetTick>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b70:	f7fe fa50 	bl	8002014 <HAL_GetTick>
 8003b74:	0002      	movs	r2, r0
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b2      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	029b      	lsls	r3, r3, #10
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x588>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003b90:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d100      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5b4>
 8003b9a:	e0a4      	b.n	8003ce6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d100      	bne.n	8003baa <HAL_RCC_OscConfig+0x5c2>
 8003ba8:	e078      	b.n	8003c9c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d14c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003bb8:	492e      	ldr	r1, [pc, #184]	; (8003c74 <HAL_RCC_OscConfig+0x68c>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fa29 	bl	8002014 <HAL_GetTick>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fe fa24 	bl	8002014 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e086      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	049b      	lsls	r3, r3, #18
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be6:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	220f      	movs	r2, #15
 8003bec:	4393      	bics	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_RCC_OscConfig+0x690>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	0449      	lsls	r1, r1, #17
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe f9f7 	bl	8002014 <HAL_GetTick>
 8003c26:	0003      	movs	r3, r0
 8003c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fe f9f2 	bl	8002014 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e054      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	049b      	lsls	r3, r3, #18
 8003c46:	4013      	ands	r3, r2
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x644>
 8003c4a:	e04c      	b.n	8003ce6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_RCC_OscConfig+0x67c>)
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <HAL_RCC_OscConfig+0x68c>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe f9dc 	bl	8002014 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x6a6>
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	40021000 	.word	0x40021000
 8003c68:	00001388 	.word	0x00001388
 8003c6c:	efffffff 	.word	0xefffffff
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	feffffff 	.word	0xfeffffff
 8003c78:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe f9ca 	bl	8002014 <HAL_GetTick>
 8003c80:	0002      	movs	r2, r0
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e02c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_RCC_OscConfig+0x708>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	049b      	lsls	r3, r3, #18
 8003c96:	4013      	ands	r3, r2
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x694>
 8003c9a:	e024      	b.n	8003ce6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e01f      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_RCC_OscConfig+0x708>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_OscConfig+0x708>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	23c0      	movs	r3, #192	; 0xc0
 8003cb8:	025b      	lsls	r3, r3, #9
 8003cba:	401a      	ands	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	401a      	ands	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	23f0      	movs	r3, #240	; 0xf0
 8003cd6:	039b      	lsls	r3, r3, #14
 8003cd8:	401a      	ands	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b008      	add	sp, #32
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0bf      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d911      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b5e      	ldr	r3, [pc, #376]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0a6      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	4013      	ands	r3, r2
 8003d42:	d015      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d006      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4b50      	ldr	r3, [pc, #320]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d54:	21e0      	movs	r1, #224	; 0xe0
 8003d56:	00c9      	lsls	r1, r1, #3
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	22f0      	movs	r2, #240	; 0xf0
 8003d62:	4393      	bics	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	d04c      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	029b      	lsls	r3, r3, #10
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d120      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e07a      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	049b      	lsls	r3, r3, #18
 8003da2:	4013      	ands	r3, r2
 8003da4:	d114      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06e      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	029b      	lsls	r3, r3, #10
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e062      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e05b      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd0:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de4:	f7fe f916 	bl	8002014 <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dec:	e009      	b.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f7fe f911 	bl	8002014 <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <HAL_RCC_ClockConfig+0x1a4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e042      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	220c      	movs	r2, #12
 8003e08:	401a      	ands	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1ec      	bne.n	8003dee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d211      	bcs.n	8003e46 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	4393      	bics	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCC_ClockConfig+0x19c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e020      	b.n	8003e88 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d009      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_RCC_ClockConfig+0x1a8>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e64:	f000 f820 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e68:	0001      	movs	r1, r0
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_ClockConfig+0x1a0>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	220f      	movs	r2, #15
 8003e72:	4013      	ands	r3, r2
 8003e74:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1ac>)
 8003e76:	5cd3      	ldrb	r3, [r2, r3]
 8003e78:	000a      	movs	r2, r1
 8003e7a:	40da      	lsrs	r2, r3
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e80:	2003      	movs	r0, #3
 8003e82:	f7fd f8b3 	bl	8000fec <HAL_InitTick>
  
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40022000 	.word	0x40022000
 8003e94:	40021000 	.word	0x40021000
 8003e98:	00001388 	.word	0x00001388
 8003e9c:	fffff8ff 	.word	0xfffff8ff
 8003ea0:	0800d0d4 	.word	0x0800d0d4
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	220c      	movs	r2, #12
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d046      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0xb8>
 8003ed2:	d848      	bhi.n	8003f66 <HAL_RCC_GetSysClockFreq+0xbe>
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d002      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x36>
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003edc:	e043      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ee0:	613b      	str	r3, [r7, #16]
      break;
 8003ee2:	e043      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	220f      	movs	r2, #15
 8003eea:	4013      	ands	r3, r2
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	4013      	ands	r3, r2
 8003efa:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	23c0      	movs	r3, #192	; 0xc0
 8003f04:	025b      	lsls	r3, r3, #9
 8003f06:	401a      	ands	r2, r3
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d109      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	481a      	ldr	r0, [pc, #104]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f14:	f7fc f8f8 	bl	8000108 <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4353      	muls	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e01a      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	23c0      	movs	r3, #192	; 0xc0
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	23c0      	movs	r3, #192	; 0xc0
 8003f2e:	025b      	lsls	r3, r3, #9
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d109      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	4814      	ldr	r0, [pc, #80]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003f38:	f7fc f8e6 	bl	8000108 <__udivsi3>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	001a      	movs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4353      	muls	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	480c      	ldr	r0, [pc, #48]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f4c:	f7fc f8dc 	bl	8000108 <__udivsi3>
 8003f50:	0003      	movs	r3, r0
 8003f52:	001a      	movs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4353      	muls	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	613b      	str	r3, [r7, #16]
      break;
 8003f5e:	e005      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003f62:	613b      	str	r3, [r7, #16]
      break;
 8003f64:	e002      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f68:	613b      	str	r3, [r7, #16]
      break;
 8003f6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f6c:	693b      	ldr	r3, [r7, #16]
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b006      	add	sp, #24
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	007a1200 	.word	0x007a1200
 8003f80:	0800d0ec 	.word	0x0800d0ec
 8003f84:	0800d0fc 	.word	0x0800d0fc
 8003f88:	02dc6c00 	.word	0x02dc6c00

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003fa4:	f7ff fff2 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fa8:	0001      	movs	r1, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	40d9      	lsrs	r1, r3
 8003fba:	000b      	movs	r3, r1
}    
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	0800d0e4 	.word	0x0800d0e4

08003fcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2207      	movs	r2, #7
 8003fda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <HAL_RCC_GetClockConfig+0x4c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_GetClockConfig+0x4c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	401a      	ands	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_RCC_GetClockConfig+0x4c>)
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	23e0      	movs	r3, #224	; 0xe0
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_GetClockConfig+0x50>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	401a      	ands	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	40021000 	.word	0x40021000
 800401c:	40022000 	.word	0x40022000

08004020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	025b      	lsls	r3, r3, #9
 8004038:	4013      	ands	r3, r2
 800403a:	d100      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800403c:	e08e      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2017      	movs	r0, #23
 8004040:	183b      	adds	r3, r7, r0
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b6e      	ldr	r3, [pc, #440]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	055b      	lsls	r3, r3, #21
 800404e:	4013      	ands	r3, r2
 8004050:	d110      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4b6b      	ldr	r3, [pc, #428]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0549      	lsls	r1, r1, #21
 800405c:	430a      	orrs	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
 8004060:	4b67      	ldr	r3, [pc, #412]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	055b      	lsls	r3, r3, #21
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	183b      	adds	r3, r7, r0
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d11a      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	0049      	lsls	r1, r1, #1
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fd ffc1 	bl	8002014 <HAL_GetTick>
 8004092:	0003      	movs	r3, r0
 8004094:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fd ffbc 	bl	8002014 <HAL_GetTick>
 800409c:	0002      	movs	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0a6      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b6:	4b52      	ldr	r3, [pc, #328]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	23c0      	movs	r3, #192	; 0xc0
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4013      	ands	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d034      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	23c0      	movs	r3, #192	; 0xc0
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d02c      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4a4a      	ldr	r2, [pc, #296]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	0249      	lsls	r1, r1, #9
 80040ec:	430a      	orrs	r2, r1
 80040ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b43      	ldr	r3, [pc, #268]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	4b42      	ldr	r3, [pc, #264]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040f6:	4945      	ldr	r1, [pc, #276]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	4013      	ands	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fd ff83 	bl	8002014 <HAL_GetTick>
 800410e:	0003      	movs	r3, r0
 8004110:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fd ff7e 	bl	8002014 <HAL_GetTick>
 8004118:	0002      	movs	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e067      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	2202      	movs	r2, #2
 800412e:	4013      	ands	r3, r2
 8004130:	d0f0      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004132:	4b33      	ldr	r3, [pc, #204]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4a34      	ldr	r2, [pc, #208]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004138:	4013      	ands	r3, r2
 800413a:	0019      	movs	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004142:	430a      	orrs	r2, r1
 8004144:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004156:	492f      	ldr	r1, [pc, #188]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004158:	400a      	ands	r2, r1
 800415a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	4013      	ands	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	2203      	movs	r2, #3
 800416c:	4393      	bics	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004176:	430a      	orrs	r2, r1
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2202      	movs	r2, #2
 8004180:	4013      	ands	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004194:	430a      	orrs	r2, r1
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	02db      	lsls	r3, r3, #11
 80041a0:	4013      	ands	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	0019      	movs	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2220      	movs	r2, #32
 80041be:	4013      	ands	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	2210      	movs	r2, #16
 80041c8:	4393      	bics	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	4393      	bics	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b006      	add	sp, #24
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	40007000 	.word	0x40007000
 8004208:	fffffcff 	.word	0xfffffcff
 800420c:	fffeffff 	.word	0xfffeffff
 8004210:	00001388 	.word	0x00001388
 8004214:	efffffff 	.word	0xefffffff
 8004218:	fffcffff 	.word	0xfffcffff
 800421c:	fff3ffff 	.word	0xfff3ffff

08004220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e042      	b.n	80042b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223d      	movs	r2, #61	; 0x3d
 8004236:	5c9b      	ldrb	r3, [r3, r2]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	223c      	movs	r2, #60	; 0x3c
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f839 	bl	80042c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	223d      	movs	r2, #61	; 0x3d
 8004252:	2102      	movs	r1, #2
 8004254:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	0019      	movs	r1, r3
 8004260:	0010      	movs	r0, r2
 8004262:	f000 f9bd 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2246      	movs	r2, #70	; 0x46
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223e      	movs	r2, #62	; 0x3e
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	223f      	movs	r2, #63	; 0x3f
 800427a:	2101      	movs	r1, #1
 800427c:	5499      	strb	r1, [r3, r2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2240      	movs	r2, #64	; 0x40
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2241      	movs	r2, #65	; 0x41
 800428a:	2101      	movs	r1, #1
 800428c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2242      	movs	r2, #66	; 0x42
 8004292:	2101      	movs	r1, #1
 8004294:	5499      	strb	r1, [r3, r2]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2243      	movs	r2, #67	; 0x43
 800429a:	2101      	movs	r1, #1
 800429c:	5499      	strb	r1, [r3, r2]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2244      	movs	r2, #68	; 0x44
 80042a2:	2101      	movs	r1, #1
 80042a4:	5499      	strb	r1, [r3, r2]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2245      	movs	r2, #69	; 0x45
 80042aa:	2101      	movs	r1, #1
 80042ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	223d      	movs	r2, #61	; 0x3d
 80042b2:	2101      	movs	r1, #1
 80042b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	223d      	movs	r2, #61	; 0x3d
 80042dc:	5c9b      	ldrb	r3, [r3, r2]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e03b      	b.n	8004360 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	223d      	movs	r2, #61	; 0x3d
 80042ec:	2102      	movs	r1, #2
 80042ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_TIM_Base_Start_IT+0x98>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <HAL_TIM_Base_Start_IT+0x5a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	429a      	cmp	r2, r3
 8004314:	d009      	beq.n	800432a <HAL_TIM_Base_Start_IT+0x5a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_TIM_Base_Start_IT+0x9c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIM_Base_Start_IT+0x5a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_TIM_Base_Start_IT+0xa0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d111      	bne.n	800434e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2207      	movs	r2, #7
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b06      	cmp	r3, #6
 800433a:	d010      	beq.n	800435e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2101      	movs	r1, #1
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	e007      	b.n	800435e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b004      	add	sp, #16
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40000400 	.word	0x40000400
 8004370:	40014000 	.word	0x40014000

08004374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2202      	movs	r2, #2
 8004384:	4013      	ands	r3, r2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d124      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2202      	movs	r2, #2
 8004392:	4013      	ands	r3, r2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d11d      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2203      	movs	r2, #3
 800439e:	4252      	negs	r2, r2
 80043a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2203      	movs	r2, #3
 80043b0:	4013      	ands	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 f8fa 	bl	80045b0 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e007      	b.n	80043ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 f8ed 	bl	80045a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f8f9 	bl	80045c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d125      	bne.n	800442e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2204      	movs	r2, #4
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11e      	bne.n	800442e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2205      	movs	r2, #5
 80043f6:	4252      	negs	r2, r2
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	23c0      	movs	r3, #192	; 0xc0
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4013      	ands	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f8cd 	bl	80045b0 <HAL_TIM_IC_CaptureCallback>
 8004416:	e007      	b.n	8004428 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0018      	movs	r0, r3
 800441c:	f000 f8c0 	bl	80045a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f000 f8cc 	bl	80045c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2208      	movs	r2, #8
 8004436:	4013      	ands	r3, r2
 8004438:	2b08      	cmp	r3, #8
 800443a:	d124      	bne.n	8004486 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2208      	movs	r2, #8
 8004444:	4013      	ands	r3, r2
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11d      	bne.n	8004486 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2209      	movs	r2, #9
 8004450:	4252      	negs	r2, r2
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2203      	movs	r2, #3
 8004462:	4013      	ands	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f8a1 	bl	80045b0 <HAL_TIM_IC_CaptureCallback>
 800446e:	e007      	b.n	8004480 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f894 	bl	80045a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f000 f8a0 	bl	80045c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2210      	movs	r2, #16
 800448e:	4013      	ands	r3, r2
 8004490:	2b10      	cmp	r3, #16
 8004492:	d125      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2210      	movs	r2, #16
 800449c:	4013      	ands	r3, r2
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d11e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2211      	movs	r2, #17
 80044a8:	4252      	negs	r2, r2
 80044aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2208      	movs	r2, #8
 80044b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	23c0      	movs	r3, #192	; 0xc0
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 f874 	bl	80045b0 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e007      	b.n	80044da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f867 	bl	80045a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f000 f873 	bl	80045c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2201      	movs	r2, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10f      	bne.n	800450e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d108      	bne.n	800450e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2202      	movs	r2, #2
 8004502:	4252      	negs	r2, r2
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f7fc fd15 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	4013      	ands	r3, r2
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d10f      	bne.n	800453c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	4013      	ands	r3, r2
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d108      	bne.n	800453c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2281      	movs	r2, #129	; 0x81
 8004530:	4252      	negs	r2, r2
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f000 f8da 	bl	80046f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	4013      	ands	r3, r2
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d10f      	bne.n	800456a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2240      	movs	r2, #64	; 0x40
 8004552:	4013      	ands	r3, r2
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d108      	bne.n	800456a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2241      	movs	r2, #65	; 0x41
 800455e:	4252      	negs	r2, r2
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f000 f833 	bl	80045d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2220      	movs	r2, #32
 8004572:	4013      	ands	r3, r2
 8004574:	2b20      	cmp	r3, #32
 8004576:	d10f      	bne.n	8004598 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	4013      	ands	r3, r2
 8004582:	2b20      	cmp	r3, #32
 8004584:	d108      	bne.n	8004598 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2221      	movs	r2, #33	; 0x21
 800458c:	4252      	negs	r2, r2
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 f8a4 	bl	80046e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b002      	add	sp, #8
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d008      	beq.n	800460a <TIM_Base_SetConfig+0x2a>
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	05db      	lsls	r3, r3, #23
 80045fe:	429a      	cmp	r2, r3
 8004600:	d003      	beq.n	800460a <TIM_Base_SetConfig+0x2a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2270      	movs	r2, #112	; 0x70
 800460e:	4393      	bics	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	05db      	lsls	r3, r3, #23
 800462a:	429a      	cmp	r2, r3
 800462c:	d013      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <TIM_Base_SetConfig+0xec>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <TIM_Base_SetConfig+0xf4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x76>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_Base_SetConfig+0xf8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a20      	ldr	r2, [pc, #128]	; (80046dc <TIM_Base_SetConfig+0xfc>)
 800465a:	4013      	ands	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	4393      	bics	r3, r2
 800466e:	001a      	movs	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_Base_SetConfig+0xce>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_Base_SetConfig+0xce>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a0c      	ldr	r2, [pc, #48]	; (80046d4 <TIM_Base_SetConfig+0xf4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_Base_SetConfig+0xce>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <TIM_Base_SetConfig+0xf8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d103      	bne.n	80046b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	615a      	str	r2, [r3, #20]
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40002000 	.word	0x40002000
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800
 80046dc:	fffffcff 	.word	0xfffffcff

080046e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e044      	b.n	800479c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2278      	movs	r2, #120	; 0x78
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f7fc fec5 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2224      	movs	r2, #36	; 0x24
 800472e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fd2a 	bl	800519c <UART_SetConfig>
 8004748:	0003      	movs	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e024      	b.n	800479c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 ff05 	bl	800556c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490d      	ldr	r1, [pc, #52]	; (80047a4 <HAL_UART_Init+0xa4>)
 800476e:	400a      	ands	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	212a      	movs	r1, #42	; 0x2a
 800477e:	438a      	bics	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2101      	movs	r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 ff9d 	bl	80056d4 <UART_CheckIdleState>
 800479a:	0003      	movs	r3, r0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	ffffb7ff 	.word	0xffffb7ff

080047a8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e030      	b.n	800481c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2224      	movs	r2, #36	; 0x24
 80047be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	438a      	bics	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2200      	movs	r2, #0
 80047de:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fd faf0 	bl	8001dd0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2284      	movs	r2, #132	; 0x84
 80047f4:	2100      	movs	r1, #0
 80047f6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	2100      	movs	r1, #0
 8004804:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2278      	movs	r2, #120	; 0x78
 8004816:	2100      	movs	r1, #0
 8004818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	1dbb      	adds	r3, r7, #6
 8004830:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	2b20      	cmp	r3, #32
 8004838:	d15b      	bne.n	80048f2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_UART_Transmit_IT+0x24>
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e053      	b.n	80048f4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	429a      	cmp	r2, r3
 8004856:	d109      	bne.n	800486c <HAL_UART_Transmit_IT+0x48>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2201      	movs	r2, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d001      	beq.n	800486c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e043      	b.n	80048f4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1dba      	adds	r2, r7, #6
 8004876:	2150      	movs	r1, #80	; 0x50
 8004878:	8812      	ldrh	r2, [r2, #0]
 800487a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1dba      	adds	r2, r7, #6
 8004880:	2152      	movs	r1, #82	; 0x52
 8004882:	8812      	ldrh	r2, [r2, #0]
 8004884:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2284      	movs	r2, #132	; 0x84
 8004890:	2100      	movs	r1, #0
 8004892:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2221      	movs	r2, #33	; 0x21
 8004898:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	015b      	lsls	r3, r3, #5
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d107      	bne.n	80048b6 <HAL_UART_Transmit_IT+0x92>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a12      	ldr	r2, [pc, #72]	; (80048fc <HAL_UART_Transmit_IT+0xd8>)
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80048b4:	e002      	b.n	80048bc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_UART_Transmit_IT+0xdc>)
 80048ba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	613b      	str	r3, [r7, #16]
  return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	2301      	movs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b008      	add	sp, #32
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	08006065 	.word	0x08006065
 8004900:	08005fb1 	.word	0x08005fb1

08004904 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	1dbb      	adds	r3, r7, #6
 8004910:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	589b      	ldr	r3, [r3, r2]
 8004918:	2b20      	cmp	r3, #32
 800491a:	d145      	bne.n	80049a8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_UART_Receive_IT+0x26>
 8004922:	1dbb      	adds	r3, r7, #6
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e03d      	b.n	80049aa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	015b      	lsls	r3, r3, #5
 8004936:	429a      	cmp	r2, r3
 8004938:	d109      	bne.n	800494e <HAL_UART_Receive_IT+0x4a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2201      	movs	r2, #1
 8004946:	4013      	ands	r3, r2
 8004948:	d001      	beq.n	800494e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e02d      	b.n	80049aa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	4013      	ands	r3, r2
 8004960:	d019      	beq.n	8004996 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	613b      	str	r3, [r7, #16]
  return(result);
 8004968:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f383 8810 	msr	PRIMASK, r3
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	04c9      	lsls	r1, r1, #19
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f383 8810 	msr	PRIMASK, r3
}
 8004994:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004996:	1dbb      	adds	r3, r7, #6
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 ffaa 	bl	80058f8 <UART_Start_Receive_IT>
 80049a4:	0003      	movs	r3, r0
 80049a6:	e000      	b.n	80049aa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b008      	add	sp, #32
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	1dbb      	adds	r3, r7, #6
 80049c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d000      	beq.n	80049cc <HAL_UART_Transmit_DMA+0x18>
 80049ca:	e077      	b.n	8004abc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_UART_Transmit_DMA+0x26>
 80049d2:	1dbb      	adds	r3, r7, #6
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e06f      	b.n	8004abe <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	015b      	lsls	r3, r3, #5
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d109      	bne.n	80049fe <HAL_UART_Transmit_DMA+0x4a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d001      	beq.n	80049fe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e05f      	b.n	8004abe <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1dba      	adds	r2, r7, #6
 8004a08:	2150      	movs	r1, #80	; 0x50
 8004a0a:	8812      	ldrh	r2, [r2, #0]
 8004a0c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1dba      	adds	r2, r7, #6
 8004a12:	2152      	movs	r1, #82	; 0x52
 8004a14:	8812      	ldrh	r2, [r2, #0]
 8004a16:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2284      	movs	r2, #132	; 0x84
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2221      	movs	r2, #33	; 0x21
 8004a24:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d027      	beq.n	8004a7e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_UART_Transmit_DMA+0x114>)
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_UART_Transmit_DMA+0x118>)
 8004a3c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_UART_Transmit_DMA+0x11c>)
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	0019      	movs	r1, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3328      	adds	r3, #40	; 0x28
 8004a5e:	001a      	movs	r2, r3
 8004a60:	1dbb      	adds	r3, r7, #6
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f7fd feaf 	bl	80027c6 <HAL_DMA_Start_IT>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2284      	movs	r2, #132	; 0x84
 8004a70:	2110      	movs	r1, #16
 8004a72:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e01f      	b.n	8004abe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b008      	add	sp, #32
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	08005cdd 	.word	0x08005cdd
 8004acc:	08005d71 	.word	0x08005d71
 8004ad0:	08005eff 	.word	0x08005eff

08004ad4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	1dbb      	adds	r3, r7, #6
 8004ae0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	589b      	ldr	r3, [r3, r2]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d145      	bne.n	8004b78 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_UART_Receive_DMA+0x26>
 8004af2:	1dbb      	adds	r3, r7, #6
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e03d      	b.n	8004b7a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	015b      	lsls	r3, r3, #5
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d109      	bne.n	8004b1e <HAL_UART_Receive_DMA+0x4a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d105      	bne.n	8004b1e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2201      	movs	r2, #1
 8004b16:	4013      	ands	r3, r2
 8004b18:	d001      	beq.n	8004b1e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e02d      	b.n	8004b7a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d019      	beq.n	8004b66 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	613b      	str	r3, [r7, #16]
  return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2180      	movs	r1, #128	; 0x80
 8004b54:	04c9      	lsls	r1, r1, #19
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b66:	1dbb      	adds	r3, r7, #6
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 ff8c 	bl	8005a8c <UART_Start_Receive_DMA>
 8004b74:	0003      	movs	r3, r0
 8004b76:	e000      	b.n	8004b7a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b008      	add	sp, #32
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b0ab      	sub	sp, #172	; 0xac
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	22a4      	movs	r2, #164	; 0xa4
 8004b94:	18b9      	adds	r1, r7, r2
 8004b96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	20a0      	movs	r0, #160	; 0xa0
 8004ba0:	1839      	adds	r1, r7, r0
 8004ba2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	219c      	movs	r1, #156	; 0x9c
 8004bac:	1879      	adds	r1, r7, r1
 8004bae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	18bb      	adds	r3, r7, r2
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a99      	ldr	r2, [pc, #612]	; (8004e1c <HAL_UART_IRQHandler+0x298>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2298      	movs	r2, #152	; 0x98
 8004bbc:	18bc      	adds	r4, r7, r2
 8004bbe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004bc0:	18bb      	adds	r3, r7, r2
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d114      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d00a      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d100      	bne.n	8004be6 <HAL_UART_IRQHandler+0x62>
 8004be4:	e29e      	b.n	8005124 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	0010      	movs	r0, r2
 8004bee:	4798      	blx	r3
      }
      return;
 8004bf0:	e298      	b.n	8005124 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bf2:	2398      	movs	r3, #152	; 0x98
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d100      	bne.n	8004bfe <HAL_UART_IRQHandler+0x7a>
 8004bfc:	e114      	b.n	8004e28 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bfe:	239c      	movs	r3, #156	; 0x9c
 8004c00:	18fb      	adds	r3, r7, r3
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	d106      	bne.n	8004c18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c0a:	23a0      	movs	r3, #160	; 0xa0
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a83      	ldr	r2, [pc, #524]	; (8004e20 <HAL_UART_IRQHandler+0x29c>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	d100      	bne.n	8004c18 <HAL_UART_IRQHandler+0x94>
 8004c16:	e107      	b.n	8004e28 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c18:	23a4      	movs	r3, #164	; 0xa4
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4013      	ands	r3, r2
 8004c22:	d012      	beq.n	8004c4a <HAL_UART_IRQHandler+0xc6>
 8004c24:	23a0      	movs	r3, #160	; 0xa0
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	; 0x84
 8004c3e:	589b      	ldr	r3, [r3, r2]
 8004c40:	2201      	movs	r2, #1
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2184      	movs	r1, #132	; 0x84
 8004c48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c4a:	23a4      	movs	r3, #164	; 0xa4
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2202      	movs	r2, #2
 8004c52:	4013      	ands	r3, r2
 8004c54:	d011      	beq.n	8004c7a <HAL_UART_IRQHandler+0xf6>
 8004c56:	239c      	movs	r3, #156	; 0x9c
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2202      	movs	r2, #2
 8004c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2284      	movs	r2, #132	; 0x84
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	2204      	movs	r2, #4
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2184      	movs	r1, #132	; 0x84
 8004c78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c7a:	23a4      	movs	r3, #164	; 0xa4
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2204      	movs	r2, #4
 8004c82:	4013      	ands	r3, r2
 8004c84:	d011      	beq.n	8004caa <HAL_UART_IRQHandler+0x126>
 8004c86:	239c      	movs	r3, #156	; 0x9c
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d00b      	beq.n	8004caa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2204      	movs	r2, #4
 8004c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2284      	movs	r2, #132	; 0x84
 8004c9e:	589b      	ldr	r3, [r3, r2]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2184      	movs	r1, #132	; 0x84
 8004ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004caa:	23a4      	movs	r3, #164	; 0xa4
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d017      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cb6:	23a0      	movs	r3, #160	; 0xa0
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d105      	bne.n	8004cce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cc2:	239c      	movs	r3, #156	; 0x9c
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2284      	movs	r2, #132	; 0x84
 8004cda:	589b      	ldr	r3, [r3, r2]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2184      	movs	r1, #132	; 0x84
 8004ce4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ce6:	23a4      	movs	r3, #164	; 0xa4
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <HAL_UART_IRQHandler+0x198>
 8004cf4:	23a0      	movs	r3, #160	; 0xa0
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	04db      	lsls	r3, r3, #19
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d00c      	beq.n	8004d1c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	0112      	lsls	r2, r2, #4
 8004d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2284      	movs	r2, #132	; 0x84
 8004d10:	589b      	ldr	r3, [r3, r2]
 8004d12:	2220      	movs	r2, #32
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2184      	movs	r1, #132	; 0x84
 8004d1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2284      	movs	r2, #132	; 0x84
 8004d20:	589b      	ldr	r3, [r3, r2]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d100      	bne.n	8004d28 <HAL_UART_IRQHandler+0x1a4>
 8004d26:	e1ff      	b.n	8005128 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d28:	23a4      	movs	r3, #164	; 0xa4
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	4013      	ands	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d34:	23a0      	movs	r3, #160	; 0xa0
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	0010      	movs	r0, r2
 8004d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2284      	movs	r2, #132	; 0x84
 8004d56:	589b      	ldr	r3, [r3, r2]
 8004d58:	2194      	movs	r1, #148	; 0x94
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2240      	movs	r2, #64	; 0x40
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d004      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2228      	movs	r2, #40	; 0x28
 8004d72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d74:	d047      	beq.n	8004e06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 ff4b 	bl	8005c14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d137      	bne.n	8004dfc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d90:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d94:	2090      	movs	r0, #144	; 0x90
 8004d96:	183a      	adds	r2, r7, r0
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da0:	f383 8810 	msr	PRIMASK, r3
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2140      	movs	r1, #64	; 0x40
 8004db2:	438a      	bics	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	183b      	adds	r3, r7, r0
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dbe:	f383 8810 	msr	PRIMASK, r3
}
 8004dc2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d012      	beq.n	8004df2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <HAL_UART_IRQHandler+0x2a0>)
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fd fd92 	bl	8002902 <HAL_DMA_Abort_IT>
 8004dde:	1e03      	subs	r3, r0, #0
 8004de0:	d01a      	beq.n	8004e18 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	0018      	movs	r0, r3
 8004dee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e012      	b.n	8004e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f000 f9bd 	bl	8005174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	e00d      	b.n	8004e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 f9b8 	bl	8005174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	e008      	b.n	8004e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 f9b3 	bl	8005174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2284      	movs	r2, #132	; 0x84
 8004e12:	2100      	movs	r1, #0
 8004e14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004e16:	e187      	b.n	8005128 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	46c0      	nop			; (mov r8, r8)
    return;
 8004e1a:	e185      	b.n	8005128 <HAL_UART_IRQHandler+0x5a4>
 8004e1c:	0000080f 	.word	0x0000080f
 8004e20:	04000120 	.word	0x04000120
 8004e24:	08005f83 	.word	0x08005f83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d000      	beq.n	8004e32 <HAL_UART_IRQHandler+0x2ae>
 8004e30:	e139      	b.n	80050a6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e32:	23a4      	movs	r3, #164	; 0xa4
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d100      	bne.n	8004e40 <HAL_UART_IRQHandler+0x2bc>
 8004e3e:	e132      	b.n	80050a6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e40:	23a0      	movs	r3, #160	; 0xa0
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2210      	movs	r2, #16
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <HAL_UART_IRQHandler+0x2ca>
 8004e4c:	e12b      	b.n	80050a6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2240      	movs	r2, #64	; 0x40
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d000      	beq.n	8004e66 <HAL_UART_IRQHandler+0x2e2>
 8004e64:	e09f      	b.n	8004fa6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	217e      	movs	r1, #126	; 0x7e
 8004e70:	187b      	adds	r3, r7, r1
 8004e72:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d100      	bne.n	8004e7e <HAL_UART_IRQHandler+0x2fa>
 8004e7c:	e156      	b.n	800512c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2258      	movs	r2, #88	; 0x58
 8004e82:	5a9b      	ldrh	r3, [r3, r2]
 8004e84:	187a      	adds	r2, r7, r1
 8004e86:	8812      	ldrh	r2, [r2, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d300      	bcc.n	8004e8e <HAL_UART_IRQHandler+0x30a>
 8004e8c:	e14e      	b.n	800512c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	187a      	adds	r2, r7, r1
 8004e92:	215a      	movs	r1, #90	; 0x5a
 8004e94:	8812      	ldrh	r2, [r2, #0]
 8004e96:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d06f      	beq.n	8004f82 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eac:	2301      	movs	r3, #1
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	499e      	ldr	r1, [pc, #632]	; (800513c <HAL_UART_IRQHandler+0x5b8>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004edc:	677b      	str	r3, [r7, #116]	; 0x74
 8004ede:	2301      	movs	r3, #1
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f06:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f10:	2301      	movs	r3, #1
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2140      	movs	r1, #64	; 0x40
 8004f28:	438a      	bics	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	2120      	movs	r1, #32
 8004f3e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f46:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f50:	2301      	movs	r3, #1
 8004f52:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2110      	movs	r1, #16
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7fd fc88 	bl	8002892 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2258      	movs	r2, #88	; 0x58
 8004f8c:	5a9a      	ldrh	r2, [r3, r2]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	215a      	movs	r1, #90	; 0x5a
 8004f92:	5a5b      	ldrh	r3, [r3, r1]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f8f0 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fa4:	e0c2      	b.n	800512c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2258      	movs	r2, #88	; 0x58
 8004faa:	5a99      	ldrh	r1, [r3, r2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	225a      	movs	r2, #90	; 0x5a
 8004fb0:	5a9b      	ldrh	r3, [r3, r2]
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	208e      	movs	r0, #142	; 0x8e
 8004fb6:	183b      	adds	r3, r7, r0
 8004fb8:	1a8a      	subs	r2, r1, r2
 8004fba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	225a      	movs	r2, #90	; 0x5a
 8004fc0:	5a9b      	ldrh	r3, [r3, r2]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d100      	bne.n	8004fca <HAL_UART_IRQHandler+0x446>
 8004fc8:	e0b2      	b.n	8005130 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d100      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x450>
 8004fd2:	e0ad      	b.n	8005130 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fda:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fdc:	2488      	movs	r4, #136	; 0x88
 8004fde:	193a      	adds	r2, r7, r4
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f383 8810 	msr	PRIMASK, r3
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4951      	ldr	r1, [pc, #324]	; (8005140 <HAL_UART_IRQHandler+0x5bc>)
 8004ffa:	400a      	ands	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	193b      	adds	r3, r7, r4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500c:	f3ef 8310 	mrs	r3, PRIMASK
 8005010:	61bb      	str	r3, [r7, #24]
  return(result);
 8005012:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	2484      	movs	r4, #132	; 0x84
 8005016:	193a      	adds	r2, r7, r4
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	2301      	movs	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2101      	movs	r1, #1
 8005032:	438a      	bics	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	193b      	adds	r3, r7, r4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f383 8810 	msr	PRIMASK, r3
}
 8005042:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	2120      	movs	r1, #32
 800504a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005058:	f3ef 8310 	mrs	r3, PRIMASK
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	2480      	movs	r4, #128	; 0x80
 8005062:	193a      	adds	r2, r7, r4
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	2301      	movs	r3, #1
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2110      	movs	r1, #16
 800507e:	438a      	bics	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	193b      	adds	r3, r7, r4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005096:	183b      	adds	r3, r7, r0
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0011      	movs	r1, r2
 800509e:	0018      	movs	r0, r3
 80050a0:	f000 f870 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050a4:	e044      	b.n	8005130 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050a6:	23a4      	movs	r3, #164	; 0xa4
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	035b      	lsls	r3, r3, #13
 80050b0:	4013      	ands	r3, r2
 80050b2:	d010      	beq.n	80050d6 <HAL_UART_IRQHandler+0x552>
 80050b4:	239c      	movs	r3, #156	; 0x9c
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	03db      	lsls	r3, r3, #15
 80050be:	4013      	ands	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	0352      	lsls	r2, r2, #13
 80050ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f001 fa7a 	bl	80065c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d4:	e02f      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050d6:	23a4      	movs	r3, #164	; 0xa4
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	4013      	ands	r3, r2
 80050e0:	d00f      	beq.n	8005102 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050e2:	23a0      	movs	r3, #160	; 0xa0
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	4013      	ands	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01e      	beq.n	8005134 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	0010      	movs	r0, r2
 80050fe:	4798      	blx	r3
    }
    return;
 8005100:	e018      	b.n	8005134 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005102:	23a4      	movs	r3, #164	; 0xa4
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2240      	movs	r2, #64	; 0x40
 800510a:	4013      	ands	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_UART_IRQHandler+0x5b2>
 800510e:	23a0      	movs	r3, #160	; 0xa0
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2240      	movs	r2, #64	; 0x40
 8005116:	4013      	ands	r3, r2
 8005118:	d00d      	beq.n	8005136 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	0018      	movs	r0, r3
 800511e:	f000 ffff 	bl	8006120 <UART_EndTransmit_IT>
    return;
 8005122:	e008      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	e006      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	e004      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
      return;
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	e002      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	e000      	b.n	8005136 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005134:	46c0      	nop			; (mov r8, r8)
  }

}
 8005136:	46bd      	mov	sp, r7
 8005138:	b02b      	add	sp, #172	; 0xac
 800513a:	bd90      	pop	{r4, r7, pc}
 800513c:	fffffeff 	.word	0xfffffeff
 8005140:	fffffedf 	.word	0xfffffedf

08005144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	46bd      	mov	sp, r7
 8005170:	b002      	add	sp, #8
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	000a      	movs	r2, r1
 800518e:	1cbb      	adds	r3, r7, #2
 8005190:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b002      	add	sp, #8
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a4:	231e      	movs	r3, #30
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4abe      	ldr	r2, [pc, #760]	; (80054c4 <UART_SetConfig+0x328>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4ab9      	ldr	r2, [pc, #740]	; (80054c8 <UART_SetConfig+0x32c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4ab0      	ldr	r2, [pc, #704]	; (80054cc <UART_SetConfig+0x330>)
 800520a:	4013      	ands	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4aac      	ldr	r2, [pc, #688]	; (80054d0 <UART_SetConfig+0x334>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d127      	bne.n	8005272 <UART_SetConfig+0xd6>
 8005222:	4bac      	ldr	r3, [pc, #688]	; (80054d4 <UART_SetConfig+0x338>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	2203      	movs	r2, #3
 8005228:	4013      	ands	r3, r2
 800522a:	2b03      	cmp	r3, #3
 800522c:	d00d      	beq.n	800524a <UART_SetConfig+0xae>
 800522e:	d81b      	bhi.n	8005268 <UART_SetConfig+0xcc>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d014      	beq.n	800525e <UART_SetConfig+0xc2>
 8005234:	d818      	bhi.n	8005268 <UART_SetConfig+0xcc>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <UART_SetConfig+0xa4>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00a      	beq.n	8005254 <UART_SetConfig+0xb8>
 800523e:	e013      	b.n	8005268 <UART_SetConfig+0xcc>
 8005240:	231f      	movs	r3, #31
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e0bd      	b.n	80053c6 <UART_SetConfig+0x22a>
 800524a:	231f      	movs	r3, #31
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2202      	movs	r2, #2
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e0b8      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2204      	movs	r2, #4
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e0b3      	b.n	80053c6 <UART_SetConfig+0x22a>
 800525e:	231f      	movs	r3, #31
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2208      	movs	r2, #8
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e0ae      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2210      	movs	r2, #16
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e0a9      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a98      	ldr	r2, [pc, #608]	; (80054d8 <UART_SetConfig+0x33c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d134      	bne.n	80052e6 <UART_SetConfig+0x14a>
 800527c:	4b95      	ldr	r3, [pc, #596]	; (80054d4 <UART_SetConfig+0x338>)
 800527e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005280:	23c0      	movs	r3, #192	; 0xc0
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	4013      	ands	r3, r2
 8005286:	22c0      	movs	r2, #192	; 0xc0
 8005288:	0292      	lsls	r2, r2, #10
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <UART_SetConfig+0x122>
 800528e:	22c0      	movs	r2, #192	; 0xc0
 8005290:	0292      	lsls	r2, r2, #10
 8005292:	4293      	cmp	r3, r2
 8005294:	d822      	bhi.n	80052dc <UART_SetConfig+0x140>
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	0292      	lsls	r2, r2, #10
 800529a:	4293      	cmp	r3, r2
 800529c:	d019      	beq.n	80052d2 <UART_SetConfig+0x136>
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	0292      	lsls	r2, r2, #10
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d81a      	bhi.n	80052dc <UART_SetConfig+0x140>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <UART_SetConfig+0x118>
 80052aa:	2280      	movs	r2, #128	; 0x80
 80052ac:	0252      	lsls	r2, r2, #9
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00a      	beq.n	80052c8 <UART_SetConfig+0x12c>
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x140>
 80052b4:	231f      	movs	r3, #31
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e083      	b.n	80053c6 <UART_SetConfig+0x22a>
 80052be:	231f      	movs	r3, #31
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	2202      	movs	r2, #2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e07e      	b.n	80053c6 <UART_SetConfig+0x22a>
 80052c8:	231f      	movs	r3, #31
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	2204      	movs	r2, #4
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e079      	b.n	80053c6 <UART_SetConfig+0x22a>
 80052d2:	231f      	movs	r3, #31
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	2208      	movs	r2, #8
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e074      	b.n	80053c6 <UART_SetConfig+0x22a>
 80052dc:	231f      	movs	r3, #31
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2210      	movs	r2, #16
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e06f      	b.n	80053c6 <UART_SetConfig+0x22a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7c      	ldr	r2, [pc, #496]	; (80054dc <UART_SetConfig+0x340>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d134      	bne.n	800535a <UART_SetConfig+0x1be>
 80052f0:	4b78      	ldr	r3, [pc, #480]	; (80054d4 <UART_SetConfig+0x338>)
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	23c0      	movs	r3, #192	; 0xc0
 80052f6:	031b      	lsls	r3, r3, #12
 80052f8:	4013      	ands	r3, r2
 80052fa:	22c0      	movs	r2, #192	; 0xc0
 80052fc:	0312      	lsls	r2, r2, #12
 80052fe:	4293      	cmp	r3, r2
 8005300:	d017      	beq.n	8005332 <UART_SetConfig+0x196>
 8005302:	22c0      	movs	r2, #192	; 0xc0
 8005304:	0312      	lsls	r2, r2, #12
 8005306:	4293      	cmp	r3, r2
 8005308:	d822      	bhi.n	8005350 <UART_SetConfig+0x1b4>
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	0312      	lsls	r2, r2, #12
 800530e:	4293      	cmp	r3, r2
 8005310:	d019      	beq.n	8005346 <UART_SetConfig+0x1aa>
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	0312      	lsls	r2, r2, #12
 8005316:	4293      	cmp	r3, r2
 8005318:	d81a      	bhi.n	8005350 <UART_SetConfig+0x1b4>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <UART_SetConfig+0x18c>
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	02d2      	lsls	r2, r2, #11
 8005322:	4293      	cmp	r3, r2
 8005324:	d00a      	beq.n	800533c <UART_SetConfig+0x1a0>
 8005326:	e013      	b.n	8005350 <UART_SetConfig+0x1b4>
 8005328:	231f      	movs	r3, #31
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	e049      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005332:	231f      	movs	r3, #31
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	2202      	movs	r2, #2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e044      	b.n	80053c6 <UART_SetConfig+0x22a>
 800533c:	231f      	movs	r3, #31
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2204      	movs	r2, #4
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e03f      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005346:	231f      	movs	r3, #31
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2208      	movs	r2, #8
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e03a      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005350:	231f      	movs	r3, #31
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2210      	movs	r2, #16
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e035      	b.n	80053c6 <UART_SetConfig+0x22a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a60      	ldr	r2, [pc, #384]	; (80054e0 <UART_SetConfig+0x344>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d104      	bne.n	800536e <UART_SetConfig+0x1d2>
 8005364:	231f      	movs	r3, #31
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e02b      	b.n	80053c6 <UART_SetConfig+0x22a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5c      	ldr	r2, [pc, #368]	; (80054e4 <UART_SetConfig+0x348>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d104      	bne.n	8005382 <UART_SetConfig+0x1e6>
 8005378:	231f      	movs	r3, #31
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e021      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a58      	ldr	r2, [pc, #352]	; (80054e8 <UART_SetConfig+0x34c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d104      	bne.n	8005396 <UART_SetConfig+0x1fa>
 800538c:	231f      	movs	r3, #31
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	e017      	b.n	80053c6 <UART_SetConfig+0x22a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a54      	ldr	r2, [pc, #336]	; (80054ec <UART_SetConfig+0x350>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d104      	bne.n	80053aa <UART_SetConfig+0x20e>
 80053a0:	231f      	movs	r3, #31
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x22a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a50      	ldr	r2, [pc, #320]	; (80054f0 <UART_SetConfig+0x354>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d104      	bne.n	80053be <UART_SetConfig+0x222>
 80053b4:	231f      	movs	r3, #31
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e003      	b.n	80053c6 <UART_SetConfig+0x22a>
 80053be:	231f      	movs	r3, #31
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	2210      	movs	r2, #16
 80053c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d15c      	bne.n	800548c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80053d2:	231f      	movs	r3, #31
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d015      	beq.n	8005408 <UART_SetConfig+0x26c>
 80053dc:	dc18      	bgt.n	8005410 <UART_SetConfig+0x274>
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d00d      	beq.n	80053fe <UART_SetConfig+0x262>
 80053e2:	dc15      	bgt.n	8005410 <UART_SetConfig+0x274>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <UART_SetConfig+0x252>
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d005      	beq.n	80053f8 <UART_SetConfig+0x25c>
 80053ec:	e010      	b.n	8005410 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ee:	f7fe fdd7 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 80053f2:	0003      	movs	r3, r0
 80053f4:	61bb      	str	r3, [r7, #24]
        break;
 80053f6:	e012      	b.n	800541e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <UART_SetConfig+0x358>)
 80053fa:	61bb      	str	r3, [r7, #24]
        break;
 80053fc:	e00f      	b.n	800541e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fe fd53 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8005402:	0003      	movs	r3, r0
 8005404:	61bb      	str	r3, [r7, #24]
        break;
 8005406:	e00a      	b.n	800541e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	61bb      	str	r3, [r7, #24]
        break;
 800540e:	e006      	b.n	800541e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005414:	231e      	movs	r3, #30
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
        break;
 800541c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d100      	bne.n	8005426 <UART_SetConfig+0x28a>
 8005424:	e095      	b.n	8005552 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	005a      	lsls	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	18d2      	adds	r2, r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0019      	movs	r1, r3
 8005438:	0010      	movs	r0, r2
 800543a:	f7fa fe65 	bl	8000108 <__udivsi3>
 800543e:	0003      	movs	r3, r0
 8005440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d91c      	bls.n	8005482 <UART_SetConfig+0x2e6>
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	429a      	cmp	r2, r3
 8005450:	d217      	bcs.n	8005482 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	b29a      	uxth	r2, r3
 8005456:	200e      	movs	r0, #14
 8005458:	183b      	adds	r3, r7, r0
 800545a:	210f      	movs	r1, #15
 800545c:	438a      	bics	r2, r1
 800545e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	b29b      	uxth	r3, r3
 8005466:	2207      	movs	r2, #7
 8005468:	4013      	ands	r3, r2
 800546a:	b299      	uxth	r1, r3
 800546c:	183b      	adds	r3, r7, r0
 800546e:	183a      	adds	r2, r7, r0
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	183a      	adds	r2, r7, r0
 800547c:	8812      	ldrh	r2, [r2, #0]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e067      	b.n	8005552 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005482:	231e      	movs	r3, #30
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e062      	b.n	8005552 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800548c:	231f      	movs	r3, #31
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b08      	cmp	r3, #8
 8005494:	d030      	beq.n	80054f8 <UART_SetConfig+0x35c>
 8005496:	dc33      	bgt.n	8005500 <UART_SetConfig+0x364>
 8005498:	2b04      	cmp	r3, #4
 800549a:	d00d      	beq.n	80054b8 <UART_SetConfig+0x31c>
 800549c:	dc30      	bgt.n	8005500 <UART_SetConfig+0x364>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <UART_SetConfig+0x30c>
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d005      	beq.n	80054b2 <UART_SetConfig+0x316>
 80054a6:	e02b      	b.n	8005500 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a8:	f7fe fd7a 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 80054ac:	0003      	movs	r3, r0
 80054ae:	61bb      	str	r3, [r7, #24]
        break;
 80054b0:	e02d      	b.n	800550e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <UART_SetConfig+0x358>)
 80054b4:	61bb      	str	r3, [r7, #24]
        break;
 80054b6:	e02a      	b.n	800550e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b8:	f7fe fcf6 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 80054bc:	0003      	movs	r3, r0
 80054be:	61bb      	str	r3, [r7, #24]
        break;
 80054c0:	e025      	b.n	800550e <UART_SetConfig+0x372>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	efff69f3 	.word	0xefff69f3
 80054c8:	ffffcfff 	.word	0xffffcfff
 80054cc:	fffff4ff 	.word	0xfffff4ff
 80054d0:	40013800 	.word	0x40013800
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40004400 	.word	0x40004400
 80054dc:	40004800 	.word	0x40004800
 80054e0:	40004c00 	.word	0x40004c00
 80054e4:	40005000 	.word	0x40005000
 80054e8:	40011400 	.word	0x40011400
 80054ec:	40011800 	.word	0x40011800
 80054f0:	40011c00 	.word	0x40011c00
 80054f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	61bb      	str	r3, [r7, #24]
        break;
 80054fe:	e006      	b.n	800550e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005504:	231e      	movs	r3, #30
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
        break;
 800550c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01e      	beq.n	8005552 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	085a      	lsrs	r2, r3, #1
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	18d2      	adds	r2, r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	0019      	movs	r1, r3
 8005524:	0010      	movs	r0, r2
 8005526:	f7fa fdef 	bl	8000108 <__udivsi3>
 800552a:	0003      	movs	r3, r0
 800552c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d90a      	bls.n	800554a <UART_SetConfig+0x3ae>
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	025b      	lsls	r3, r3, #9
 800553a:	429a      	cmp	r2, r3
 800553c:	d205      	bcs.n	800554a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	e003      	b.n	8005552 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800554a:	231e      	movs	r3, #30
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800555e:	231e      	movs	r3, #30
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	781b      	ldrb	r3, [r3, #0]
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b008      	add	sp, #32
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2201      	movs	r2, #1
 800557a:	4013      	ands	r3, r2
 800557c:	d00b      	beq.n	8005596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a4a      	ldr	r2, [pc, #296]	; (80056b0 <UART_AdvFeatureConfig+0x144>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d00b      	beq.n	80055b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a43      	ldr	r2, [pc, #268]	; (80056b4 <UART_AdvFeatureConfig+0x148>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	0019      	movs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2204      	movs	r2, #4
 80055be:	4013      	ands	r3, r2
 80055c0:	d00b      	beq.n	80055da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <UART_AdvFeatureConfig+0x14c>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2208      	movs	r2, #8
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4a34      	ldr	r2, [pc, #208]	; (80056bc <UART_AdvFeatureConfig+0x150>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2210      	movs	r2, #16
 8005602:	4013      	ands	r3, r2
 8005604:	d00b      	beq.n	800561e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a2c      	ldr	r2, [pc, #176]	; (80056c0 <UART_AdvFeatureConfig+0x154>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2220      	movs	r2, #32
 8005624:	4013      	ands	r3, r2
 8005626:	d00b      	beq.n	8005640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <UART_AdvFeatureConfig+0x158>)
 8005630:	4013      	ands	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	4013      	ands	r3, r2
 8005648:	d01d      	beq.n	8005686 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <UART_AdvFeatureConfig+0x15c>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	035b      	lsls	r3, r3, #13
 800566a:	429a      	cmp	r2, r3
 800566c:	d10b      	bne.n	8005686 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <UART_AdvFeatureConfig+0x160>)
 8005676:	4013      	ands	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	4013      	ands	r3, r2
 800568e:	d00b      	beq.n	80056a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4a0e      	ldr	r2, [pc, #56]	; (80056d0 <UART_AdvFeatureConfig+0x164>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }
}
 80056a8:	46c0      	nop			; (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	fffdffff 	.word	0xfffdffff
 80056b4:	fffeffff 	.word	0xfffeffff
 80056b8:	fffbffff 	.word	0xfffbffff
 80056bc:	ffff7fff 	.word	0xffff7fff
 80056c0:	ffffefff 	.word	0xffffefff
 80056c4:	ffffdfff 	.word	0xffffdfff
 80056c8:	ffefffff 	.word	0xffefffff
 80056cc:	ff9fffff 	.word	0xff9fffff
 80056d0:	fff7ffff 	.word	0xfff7ffff

080056d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b092      	sub	sp, #72	; 0x48
 80056d8:	af02      	add	r7, sp, #8
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2284      	movs	r2, #132	; 0x84
 80056e0:	2100      	movs	r1, #0
 80056e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e4:	f7fc fc96 	bl	8002014 <HAL_GetTick>
 80056e8:	0003      	movs	r3, r0
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2208      	movs	r2, #8
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d12c      	bne.n	8005754 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	0391      	lsls	r1, r2, #14
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4a46      	ldr	r2, [pc, #280]	; (800581c <UART_CheckIdleState+0x148>)
 8005704:	9200      	str	r2, [sp, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	f000 f88c 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d021      	beq.n	8005754 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005710:	f3ef 8310 	mrs	r3, PRIMASK
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
 800571a:	2301      	movs	r3, #1
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	f383 8810 	msr	PRIMASK, r3
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	438a      	bics	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2278      	movs	r2, #120	; 0x78
 800574c:	2100      	movs	r1, #0
 800574e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e05f      	b.n	8005814 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2204      	movs	r2, #4
 800575c:	4013      	ands	r3, r2
 800575e:	2b04      	cmp	r3, #4
 8005760:	d146      	bne.n	80057f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	03d1      	lsls	r1, r2, #15
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4a2c      	ldr	r2, [pc, #176]	; (800581c <UART_CheckIdleState+0x148>)
 800576c:	9200      	str	r2, [sp, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	f000 f858 	bl	8005824 <UART_WaitOnFlagUntilTimeout>
 8005774:	1e03      	subs	r3, r0, #0
 8005776:	d03b      	beq.n	80057f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	60fb      	str	r3, [r7, #12]
  return(result);
 800577e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	2301      	movs	r3, #1
 8005784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f383 8810 	msr	PRIMASK, r3
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4921      	ldr	r1, [pc, #132]	; (8005820 <UART_CheckIdleState+0x14c>)
 800579a:	400a      	ands	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80057b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
 80057b4:	2301      	movs	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	2120      	movs	r1, #32
 80057e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2278      	movs	r2, #120	; 0x78
 80057e8:	2100      	movs	r1, #0
 80057ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e011      	b.n	8005814 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	2120      	movs	r1, #32
 80057fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2278      	movs	r2, #120	; 0x78
 800580e:	2100      	movs	r1, #0
 8005810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b010      	add	sp, #64	; 0x40
 800581a:	bd80      	pop	{r7, pc}
 800581c:	01ffffff 	.word	0x01ffffff
 8005820:	fffffedf 	.word	0xfffffedf

08005824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	1dfb      	adds	r3, r7, #7
 8005832:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005834:	e04b      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	3301      	adds	r3, #1
 800583a:	d048      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583c:	f7fc fbea 	bl	8002014 <HAL_GetTick>
 8005840:	0002      	movs	r2, r0
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <UART_WaitOnFlagUntilTimeout+0x2e>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e04b      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2204      	movs	r2, #4
 800585e:	4013      	ands	r3, r2
 8005860:	d035      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2208      	movs	r2, #8
 800586a:	4013      	ands	r3, r2
 800586c:	2b08      	cmp	r3, #8
 800586e:	d111      	bne.n	8005894 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2208      	movs	r2, #8
 8005876:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f9ca 	bl	8005c14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2284      	movs	r2, #132	; 0x84
 8005884:	2108      	movs	r1, #8
 8005886:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2278      	movs	r2, #120	; 0x78
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e02c      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	401a      	ands	r2, r3
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d112      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 f9ad 	bl	8005c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2284      	movs	r2, #132	; 0x84
 80058be:	2120      	movs	r1, #32
 80058c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2278      	movs	r2, #120	; 0x78
 80058c6:	2100      	movs	r1, #0
 80058c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	425a      	negs	r2, r3
 80058de:	4153      	adcs	r3, r2
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	001a      	movs	r2, r3
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a4      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b004      	add	sp, #16
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	1dbb      	adds	r3, r7, #6
 8005904:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1dba      	adds	r2, r7, #6
 8005910:	2158      	movs	r1, #88	; 0x58
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1dba      	adds	r2, r7, #6
 800591a:	215a      	movs	r1, #90	; 0x5a
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	015b      	lsls	r3, r3, #5
 800592e:	429a      	cmp	r2, r3
 8005930:	d10d      	bne.n	800594e <UART_Start_Receive_IT+0x56>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <UART_Start_Receive_IT+0x4c>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	225c      	movs	r2, #92	; 0x5c
 800593e:	4950      	ldr	r1, [pc, #320]	; (8005a80 <UART_Start_Receive_IT+0x188>)
 8005940:	5299      	strh	r1, [r3, r2]
 8005942:	e02e      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	225c      	movs	r2, #92	; 0x5c
 8005948:	21ff      	movs	r1, #255	; 0xff
 800594a:	5299      	strh	r1, [r3, r2]
 800594c:	e029      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <UART_Start_Receive_IT+0x7a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <UART_Start_Receive_IT+0x70>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	225c      	movs	r2, #92	; 0x5c
 8005962:	21ff      	movs	r1, #255	; 0xff
 8005964:	5299      	strh	r1, [r3, r2]
 8005966:	e01c      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	225c      	movs	r2, #92	; 0x5c
 800596c:	217f      	movs	r1, #127	; 0x7f
 800596e:	5299      	strh	r1, [r3, r2]
 8005970:	e017      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	055b      	lsls	r3, r3, #21
 800597a:	429a      	cmp	r2, r3
 800597c:	d10d      	bne.n	800599a <UART_Start_Receive_IT+0xa2>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <UART_Start_Receive_IT+0x98>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	225c      	movs	r2, #92	; 0x5c
 800598a:	217f      	movs	r1, #127	; 0x7f
 800598c:	5299      	strh	r1, [r3, r2]
 800598e:	e008      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	225c      	movs	r2, #92	; 0x5c
 8005994:	213f      	movs	r1, #63	; 0x3f
 8005996:	5299      	strh	r1, [r3, r2]
 8005998:	e003      	b.n	80059a2 <UART_Start_Receive_IT+0xaa>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	225c      	movs	r2, #92	; 0x5c
 800599e:	2100      	movs	r1, #0
 80059a0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2284      	movs	r2, #132	; 0x84
 80059a6:	2100      	movs	r1, #0
 80059a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	2122      	movs	r1, #34	; 0x22
 80059b0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b2:	f3ef 8310 	mrs	r3, PRIMASK
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	2301      	movs	r3, #1
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	f383 8810 	msr	PRIMASK, r3
}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2101      	movs	r1, #1
 80059d4:	430a      	orrs	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059da:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d107      	bne.n	8005a00 <UART_Start_Receive_IT+0x108>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <UART_Start_Receive_IT+0x18c>)
 80059fc:	669a      	str	r2, [r3, #104]	; 0x68
 80059fe:	e002      	b.n	8005a06 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <UART_Start_Receive_IT+0x190>)
 8005a04:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d019      	beq.n	8005a42 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a12:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a14:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
 8005a18:	2301      	movs	r3, #1
 8005a1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2190      	movs	r1, #144	; 0x90
 8005a30:	0049      	lsls	r1, r1, #1
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f383 8810 	msr	PRIMASK, r3
}
 8005a40:	e018      	b.n	8005a74 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a42:	f3ef 8310 	mrs	r3, PRIMASK
 8005a46:	613b      	str	r3, [r7, #16]
  return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2120      	movs	r1, #32
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b010      	add	sp, #64	; 0x40
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	000001ff 	.word	0x000001ff
 8005a84:	08006331 	.word	0x08006331
 8005a88:	08006179 	.word	0x08006179

08005a8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b090      	sub	sp, #64	; 0x40
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1dba      	adds	r2, r7, #6
 8005aa4:	2158      	movs	r1, #88	; 0x58
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2284      	movs	r2, #132	; 0x84
 8005aae:	2100      	movs	r1, #0
 8005ab0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	2122      	movs	r1, #34	; 0x22
 8005ab8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d028      	beq.n	8005b14 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	4a3e      	ldr	r2, [pc, #248]	; (8005bc0 <UART_Start_Receive_DMA+0x134>)
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ace:	4a3d      	ldr	r2, [pc, #244]	; (8005bc4 <UART_Start_Receive_DMA+0x138>)
 8005ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	4a3c      	ldr	r2, [pc, #240]	; (8005bc8 <UART_Start_Receive_DMA+0x13c>)
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	0019      	movs	r1, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	001a      	movs	r2, r3
 8005af4:	1dbb      	adds	r3, r7, #6
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	f7fc fe65 	bl	80027c6 <HAL_DMA_Start_IT>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d009      	beq.n	8005b14 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2284      	movs	r2, #132	; 0x84
 8005b04:	2110      	movs	r1, #16
 8005b06:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	2120      	movs	r1, #32
 8005b0e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e050      	b.n	8005bb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b26:	2301      	movs	r3, #1
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	0049      	lsls	r1, r1, #1
 8005b40:	430a      	orrs	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	613b      	str	r3, [r7, #16]
  return(result);
 8005b56:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2101      	movs	r1, #1
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f383 8810 	msr	PRIMASK, r3
}
 8005b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b82:	f3ef 8310 	mrs	r3, PRIMASK
 8005b86:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b88:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	f383 8810 	msr	PRIMASK, r3
}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b010      	add	sp, #64	; 0x40
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	08005d91 	.word	0x08005d91
 8005bc4:	08005ebd 	.word	0x08005ebd
 8005bc8:	08005eff 	.word	0x08005eff

08005bcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bda:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	2301      	movs	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f383 8810 	msr	PRIMASK, r3
}
 8005be8:	46c0      	nop			; (mov r8, r8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	21c0      	movs	r1, #192	; 0xc0
 8005bf6:	438a      	bics	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b006      	add	sp, #24
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	; 0x38
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c20:	617b      	str	r3, [r7, #20]
  return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f383 8810 	msr	PRIMASK, r3
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4926      	ldr	r1, [pc, #152]	; (8005cd8 <UART_EndRxTransfer+0xc4>)
 8005c3e:	400a      	ands	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f383 8810 	msr	PRIMASK, r3
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c52:	623b      	str	r3, [r7, #32]
  return(result);
 8005c54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f383 8810 	msr	PRIMASK, r3
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2101      	movs	r1, #1
 8005c70:	438a      	bics	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d118      	bne.n	8005cba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c88:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c92:	2301      	movs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f383 8810 	msr	PRIMASK, r3
}
 8005c9c:	46c0      	nop			; (mov r8, r8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2110      	movs	r1, #16
 8005caa:	438a      	bics	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f383 8810 	msr	PRIMASK, r3
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b00e      	add	sp, #56	; 0x38
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	fffffedf 	.word	0xfffffedf

08005cdc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08c      	sub	sp, #48	; 0x30
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d035      	beq.n	8005d5e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	2252      	movs	r2, #82	; 0x52
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d00:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d04:	2301      	movs	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f383 8810 	msr	PRIMASK, r3
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	438a      	bics	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f383 8810 	msr	PRIMASK, r3
}
 8005d2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d30:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d32:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	2301      	movs	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2140      	movs	r1, #64	; 0x40
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	f383 8810 	msr	PRIMASK, r3
}
 8005d5c:	e004      	b.n	8005d68 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff f9ef 	bl	8005144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	46c0      	nop			; (mov r8, r8)
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	b00c      	add	sp, #48	; 0x30
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7ff f9e7 	bl	8005154 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b004      	add	sp, #16
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b094      	sub	sp, #80	; 0x50
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d06f      	beq.n	8005e86 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da8:	225a      	movs	r2, #90	; 0x5a
 8005daa:	2100      	movs	r1, #0
 8005dac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005db4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db8:	2301      	movs	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	493a      	ldr	r1, [pc, #232]	; (8005eb8 <UART_DMAReceiveCplt+0x128>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de0:	f3ef 8310 	mrs	r3, PRIMASK
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dea:	2301      	movs	r3, #1
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	f383 8810 	msr	PRIMASK, r3
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2101      	movs	r1, #1
 8005e02:	438a      	bics	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e12:	f3ef 8310 	mrs	r3, PRIMASK
 8005e16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	f383 8810 	msr	PRIMASK, r3
}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2140      	movs	r1, #64	; 0x40
 8005e34:	438a      	bics	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	2120      	movs	r1, #32
 8005e4a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d118      	bne.n	8005e86 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e54:	f3ef 8310 	mrs	r3, PRIMASK
 8005e58:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5e:	2301      	movs	r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f383 8810 	msr	PRIMASK, r3
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2110      	movs	r1, #16
 8005e76:	438a      	bics	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f383 8810 	msr	PRIMASK, r3
}
 8005e84:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d108      	bne.n	8005ea6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e96:	2258      	movs	r2, #88	; 0x58
 8005e98:	5a9a      	ldrh	r2, [r3, r2]
 8005e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9c:	0011      	movs	r1, r2
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7ff f970 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ea4:	e003      	b.n	8005eae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f003 fd25 	bl	80098f8 <HAL_UART_RxCpltCallback>
}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b014      	add	sp, #80	; 0x50
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	fffffeff 	.word	0xfffffeff

08005ebc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10a      	bne.n	8005eee <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2258      	movs	r2, #88	; 0x58
 8005edc:	5a9b      	ldrh	r3, [r3, r2]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f7ff f94c 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eec:	e003      	b.n	8005ef6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff f937 	bl	8005164 <HAL_UART_RxHalfCpltCallback>
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b004      	add	sp, #16
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	589b      	ldr	r3, [r3, r2]
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b80      	cmp	r3, #128	; 0x80
 8005f26:	d10a      	bne.n	8005f3e <UART_DMAError+0x40>
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b21      	cmp	r3, #33	; 0x21
 8005f2c:	d107      	bne.n	8005f3e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2252      	movs	r2, #82	; 0x52
 8005f32:	2100      	movs	r1, #0
 8005f34:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7ff fe47 	bl	8005bcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2240      	movs	r2, #64	; 0x40
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d10a      	bne.n	8005f62 <UART_DMAError+0x64>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b22      	cmp	r3, #34	; 0x22
 8005f50:	d107      	bne.n	8005f62 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	225a      	movs	r2, #90	; 0x5a
 8005f56:	2100      	movs	r1, #0
 8005f58:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff fe59 	bl	8005c14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2284      	movs	r2, #132	; 0x84
 8005f66:	589b      	ldr	r3, [r3, r2]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2184      	movs	r1, #132	; 0x84
 8005f70:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7ff f8fd 	bl	8005174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b006      	add	sp, #24
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	225a      	movs	r2, #90	; 0x5a
 8005f94:	2100      	movs	r1, #0
 8005f96:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2252      	movs	r2, #82	; 0x52
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff f8e6 	bl	8005174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b004      	add	sp, #16
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	; 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fbc:	2b21      	cmp	r3, #33	; 0x21
 8005fbe:	d14d      	bne.n	800605c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2252      	movs	r2, #82	; 0x52
 8005fc4:	5a9b      	ldrh	r3, [r3, r2]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d132      	bne.n	8006032 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	438a      	bics	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	617b      	str	r3, [r7, #20]
  return(result);
 8006004:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006006:	623b      	str	r3, [r7, #32]
 8006008:	2301      	movs	r3, #1
 800600a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006030:	e014      	b.n	800605c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b292      	uxth	r2, r2
 800603e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2252      	movs	r2, #82	; 0x52
 800604e:	5a9b      	ldrh	r3, [r3, r2]
 8006050:	b29b      	uxth	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	b299      	uxth	r1, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2252      	movs	r2, #82	; 0x52
 800605a:	5299      	strh	r1, [r3, r2]
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b00a      	add	sp, #40	; 0x28
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08c      	sub	sp, #48	; 0x30
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006070:	2b21      	cmp	r3, #33	; 0x21
 8006072:	d151      	bne.n	8006118 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2252      	movs	r2, #82	; 0x52
 8006078:	5a9b      	ldrh	r3, [r3, r2]
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d132      	bne.n	80060e6 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006080:	f3ef 8310 	mrs	r3, PRIMASK
 8006084:	60fb      	str	r3, [r7, #12]
  return(result);
 8006086:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
 800608a:	2301      	movs	r3, #1
 800608c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2180      	movs	r1, #128	; 0x80
 80060a2:	438a      	bics	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f383 8810 	msr	PRIMASK, r3
}
 80060b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b2:	f3ef 8310 	mrs	r3, PRIMASK
 80060b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80060b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	2301      	movs	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f383 8810 	msr	PRIMASK, r3
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2140      	movs	r1, #64	; 0x40
 80060d4:	430a      	orrs	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80060e4:	e018      	b.n	8006118 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	05d2      	lsls	r2, r2, #23
 80060f6:	0dd2      	lsrs	r2, r2, #23
 80060f8:	b292      	uxth	r2, r2
 80060fa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2252      	movs	r2, #82	; 0x52
 800610a:	5a9b      	ldrh	r3, [r3, r2]
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b299      	uxth	r1, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2252      	movs	r2, #82	; 0x52
 8006116:	5299      	strh	r1, [r3, r2]
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	b00c      	add	sp, #48	; 0x30
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006128:	f3ef 8310 	mrs	r3, PRIMASK
 800612c:	60bb      	str	r3, [r7, #8]
  return(result);
 800612e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	2301      	movs	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	46c0      	nop			; (mov r8, r8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2140      	movs	r1, #64	; 0x40
 800614a:	438a      	bics	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	0018      	movs	r0, r3
 800616a:	f7fe ffeb 	bl	8005144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	46bd      	mov	sp, r7
 8006172:	b006      	add	sp, #24
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b094      	sub	sp, #80	; 0x50
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006180:	204e      	movs	r0, #78	; 0x4e
 8006182:	183b      	adds	r3, r7, r0
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	215c      	movs	r1, #92	; 0x5c
 8006188:	5a52      	ldrh	r2, [r2, r1]
 800618a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	589b      	ldr	r3, [r3, r2]
 8006192:	2b22      	cmp	r3, #34	; 0x22
 8006194:	d000      	beq.n	8006198 <UART_RxISR_8BIT+0x20>
 8006196:	e0ba      	b.n	800630e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	214c      	movs	r1, #76	; 0x4c
 800619e:	187b      	adds	r3, r7, r1
 80061a0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80061a2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	183b      	adds	r3, r7, r0
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b2d9      	uxtb	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	400a      	ands	r2, r1
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	225a      	movs	r2, #90	; 0x5a
 80061c8:	5a9b      	ldrh	r3, [r3, r2]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b299      	uxth	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	225a      	movs	r2, #90	; 0x5a
 80061d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	225a      	movs	r2, #90	; 0x5a
 80061da:	5a9b      	ldrh	r3, [r3, r2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d000      	beq.n	80061e4 <UART_RxISR_8BIT+0x6c>
 80061e2:	e09c      	b.n	800631e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e4:	f3ef 8310 	mrs	r3, PRIMASK
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ee:	2301      	movs	r3, #1
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	f383 8810 	msr	PRIMASK, r3
}
 80061f8:	46c0      	nop			; (mov r8, r8)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4948      	ldr	r1, [pc, #288]	; (8006328 <UART_RxISR_8BIT+0x1b0>)
 8006206:	400a      	ands	r2, r1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006216:	f3ef 8310 	mrs	r3, PRIMASK
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	647b      	str	r3, [r7, #68]	; 0x44
 8006220:	2301      	movs	r3, #1
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	f383 8810 	msr	PRIMASK, r3
}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2101      	movs	r1, #1
 8006238:	438a      	bics	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	f383 8810 	msr	PRIMASK, r3
}
 8006246:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	2120      	movs	r1, #32
 800624e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	4013      	ands	r3, r2
 8006268:	d018      	beq.n	800629c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800626a:	f3ef 8310 	mrs	r3, PRIMASK
 800626e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006270:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	2301      	movs	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f383 8810 	msr	PRIMASK, r3
}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4928      	ldr	r1, [pc, #160]	; (800632c <UART_RxISR_8BIT+0x1b4>)
 800628c:	400a      	ands	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f383 8810 	msr	PRIMASK, r3
}
 800629a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d12f      	bne.n	8006304 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062aa:	f3ef 8310 	mrs	r3, PRIMASK
 80062ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80062b0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b4:	2301      	movs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2110      	movs	r1, #16
 80062cc:	438a      	bics	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f383 8810 	msr	PRIMASK, r3
}
 80062da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	2210      	movs	r2, #16
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d103      	bne.n	80062f2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2210      	movs	r2, #16
 80062f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2258      	movs	r2, #88	; 0x58
 80062f6:	5a9a      	ldrh	r2, [r3, r2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0011      	movs	r1, r2
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7fe ff41 	bl	8005184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006302:	e00c      	b.n	800631e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f003 faf6 	bl	80098f8 <HAL_UART_RxCpltCallback>
}
 800630c:	e007      	b.n	800631e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2108      	movs	r1, #8
 800631a:	430a      	orrs	r2, r1
 800631c:	619a      	str	r2, [r3, #24]
}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	46bd      	mov	sp, r7
 8006322:	b014      	add	sp, #80	; 0x50
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	fffffedf 	.word	0xfffffedf
 800632c:	fbffffff 	.word	0xfbffffff

08006330 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b094      	sub	sp, #80	; 0x50
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006338:	204e      	movs	r0, #78	; 0x4e
 800633a:	183b      	adds	r3, r7, r0
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	215c      	movs	r1, #92	; 0x5c
 8006340:	5a52      	ldrh	r2, [r2, r1]
 8006342:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	589b      	ldr	r3, [r3, r2]
 800634a:	2b22      	cmp	r3, #34	; 0x22
 800634c:	d000      	beq.n	8006350 <UART_RxISR_16BIT+0x20>
 800634e:	e0ba      	b.n	80064c6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	214c      	movs	r1, #76	; 0x4c
 8006356:	187b      	adds	r3, r7, r1
 8006358:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800635a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006362:	187b      	adds	r3, r7, r1
 8006364:	183a      	adds	r2, r7, r0
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	b29a      	uxth	r2, r3
 800636e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006370:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	225a      	movs	r2, #90	; 0x5a
 8006380:	5a9b      	ldrh	r3, [r3, r2]
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b299      	uxth	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	225a      	movs	r2, #90	; 0x5a
 800638c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	225a      	movs	r2, #90	; 0x5a
 8006392:	5a9b      	ldrh	r3, [r3, r2]
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d000      	beq.n	800639c <UART_RxISR_16BIT+0x6c>
 800639a:	e09c      	b.n	80064d6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639c:	f3ef 8310 	mrs	r3, PRIMASK
 80063a0:	623b      	str	r3, [r7, #32]
  return(result);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a4:	647b      	str	r3, [r7, #68]	; 0x44
 80063a6:	2301      	movs	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	f383 8810 	msr	PRIMASK, r3
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4948      	ldr	r1, [pc, #288]	; (80064e0 <UART_RxISR_16BIT+0x1b0>)
 80063be:	400a      	ands	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	f383 8810 	msr	PRIMASK, r3
}
 80063cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ce:	f3ef 8310 	mrs	r3, PRIMASK
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40
 80063d8:	2301      	movs	r3, #1
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	f383 8810 	msr	PRIMASK, r3
}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2101      	movs	r1, #1
 80063f0:	438a      	bics	r2, r1
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	f383 8810 	msr	PRIMASK, r3
}
 80063fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2280      	movs	r2, #128	; 0x80
 8006404:	2120      	movs	r1, #32
 8006406:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	041b      	lsls	r3, r3, #16
 800641e:	4013      	ands	r3, r2
 8006420:	d018      	beq.n	8006454 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006422:	f3ef 8310 	mrs	r3, PRIMASK
 8006426:	617b      	str	r3, [r7, #20]
  return(result);
 8006428:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642c:	2301      	movs	r3, #1
 800642e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4928      	ldr	r1, [pc, #160]	; (80064e4 <UART_RxISR_16BIT+0x1b4>)
 8006444:	400a      	ands	r2, r1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f383 8810 	msr	PRIMASK, r3
}
 8006452:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006458:	2b01      	cmp	r3, #1
 800645a:	d12f      	bne.n	80064bc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006462:	f3ef 8310 	mrs	r3, PRIMASK
 8006466:	60bb      	str	r3, [r7, #8]
  return(result);
 8006468:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646a:	63bb      	str	r3, [r7, #56]	; 0x38
 800646c:	2301      	movs	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f383 8810 	msr	PRIMASK, r3
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2110      	movs	r1, #16
 8006484:	438a      	bics	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f383 8810 	msr	PRIMASK, r3
}
 8006492:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2210      	movs	r2, #16
 800649c:	4013      	ands	r3, r2
 800649e:	2b10      	cmp	r3, #16
 80064a0:	d103      	bne.n	80064aa <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2258      	movs	r2, #88	; 0x58
 80064ae:	5a9a      	ldrh	r2, [r3, r2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0011      	movs	r1, r2
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7fe fe65 	bl	8005184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064ba:	e00c      	b.n	80064d6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0018      	movs	r0, r3
 80064c0:	f003 fa1a 	bl	80098f8 <HAL_UART_RxCpltCallback>
}
 80064c4:	e007      	b.n	80064d6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2108      	movs	r1, #8
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b014      	add	sp, #80	; 0x50
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	fffffedf 	.word	0xfffffedf
 80064e4:	fbffffff 	.word	0xfbffffff

080064e8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e05b      	b.n	80065b8 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2278      	movs	r2, #120	; 0x78
 800650c:	2100      	movs	r1, #0
 800650e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	0018      	movs	r0, r3
 8006514:	f7fa ffce 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2224      	movs	r2, #36	; 0x24
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2101      	movs	r1, #1
 800652a:	438a      	bics	r2, r1
 800652c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	0018      	movs	r0, r3
 8006532:	f7fe fe33 	bl	800519c <UART_SetConfig>
 8006536:	0003      	movs	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e03b      	b.n	80065b8 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff f80e 	bl	800556c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	01c9      	lsls	r1, r1, #7
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <HAL_RS485Ex_Init+0xd8>)
 800656a:	4013      	ands	r3, r2
 800656c:	0019      	movs	r1, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	055b      	lsls	r3, r3, #21
 800657c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	041b      	lsls	r3, r3, #16
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <HAL_RS485Ex_Init+0xdc>)
 8006590:	4013      	ands	r3, r2
 8006592:	0019      	movs	r1, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2101      	movs	r1, #1
 80065aa:	430a      	orrs	r2, r1
 80065ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7ff f88f 	bl	80056d4 <UART_CheckIdleState>
 80065b6:	0003      	movs	r3, r0
}
 80065b8:	0018      	movs	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b006      	add	sp, #24
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	ffff7fff 	.word	0xffff7fff
 80065c4:	fc00ffff 	.word	0xfc00ffff

080065c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	0002      	movs	r2, r0
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065e8:	1dbb      	adds	r3, r7, #6
 80065ea:	2200      	movs	r2, #0
 80065ec:	5e9b      	ldrsh	r3, [r3, r2]
 80065ee:	2b84      	cmp	r3, #132	; 0x84
 80065f0:	d006      	beq.n	8006600 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80065f2:	1dbb      	adds	r3, r7, #6
 80065f4:	2200      	movs	r2, #0
 80065f6:	5e9a      	ldrsh	r2, [r3, r2]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	18d3      	adds	r3, r2, r3
 80065fc:	3303      	adds	r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	0018      	movs	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	b004      	add	sp, #16
 8006608:	bd80      	pop	{r7, pc}

0800660a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800660e:	f000 fe1d 	bl	800724c <vTaskStartScheduler>
  
  return osOK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800661a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661c:	b087      	sub	sp, #28
 800661e:	af02      	add	r7, sp, #8
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685c      	ldr	r4, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006630:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2208      	movs	r2, #8
 8006636:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006638:	0018      	movs	r0, r3
 800663a:	f7ff ffcd 	bl	80065d8 <makeFreeRtosPriority>
 800663e:	0001      	movs	r1, r0
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	230c      	movs	r3, #12
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	9100      	str	r1, [sp, #0]
 800664a:	0013      	movs	r3, r2
 800664c:	0032      	movs	r2, r6
 800664e:	0029      	movs	r1, r5
 8006650:	0020      	movs	r0, r4
 8006652:	f000 fcbe 	bl	8006fd2 <xTaskCreate>
 8006656:	0003      	movs	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d001      	beq.n	8006660 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006660:	68fb      	ldr	r3, [r7, #12]
}
 8006662:	0018      	movs	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	b005      	add	sp, #20
 8006668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800666a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3308      	adds	r3, #8
 8006676:	001a      	movs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	4252      	negs	r2, r2
 8006682:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3308      	adds	r3, #8
 8006688:	001a      	movs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3308      	adds	r3, #8
 8006692:	001a      	movs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b002      	add	sp, #8
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b002      	add	sp, #8
 80066ba:	bd80      	pop	{r7, pc}

080066bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b004      	add	sp, #16
 80066fe:	bd80      	pop	{r7, pc}

08006700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3301      	adds	r3, #1
 8006714:	d103      	bne.n	800671e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e00c      	b.n	8006738 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3308      	adds	r3, #8
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e002      	b.n	800672c <vListInsert+0x2c>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d2f6      	bcs.n	8006726 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b004      	add	sp, #16
 800676a:	bd80      	pop	{r7, pc}

0800676c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6852      	ldr	r2, [r2, #4]
 800678c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d103      	bne.n	80067a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b004      	add	sp, #16
 80067ba:	bd80      	pop	{r7, pc}

080067bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <xQueueGenericReset+0x18>
 80067d0:	b672      	cpsid	i
 80067d2:	e7fe      	b.n	80067d2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80067d4:	f001 fd5c 	bl	8008290 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	434b      	muls	r3, r1
 80067e6:	18d2      	adds	r2, r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	1e59      	subs	r1, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	434b      	muls	r3, r1
 800680a:	18d2      	adds	r2, r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2244      	movs	r2, #68	; 0x44
 8006814:	21ff      	movs	r1, #255	; 0xff
 8006816:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2245      	movs	r2, #69	; 0x45
 800681c:	21ff      	movs	r1, #255	; 0xff
 800681e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3310      	adds	r3, #16
 8006832:	0018      	movs	r0, r3
 8006834:	f000 ff48 	bl	80076c8 <xTaskRemoveFromEventList>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d00c      	beq.n	8006856 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800683c:	f001 fd18 	bl	8008270 <vPortYield>
 8006840:	e009      	b.n	8006856 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3310      	adds	r3, #16
 8006846:	0018      	movs	r0, r3
 8006848:	f7ff ff0f 	bl	800666a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3324      	adds	r3, #36	; 0x24
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff ff0a 	bl	800666a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006856:	f001 fd2d 	bl	80082b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800685a:	2301      	movs	r3, #1
}
 800685c:	0018      	movs	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	b004      	add	sp, #16
 8006862:	bd80      	pop	{r7, pc}

08006864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b08b      	sub	sp, #44	; 0x2c
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	1dfb      	adds	r3, r7, #7
 8006870:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <xQueueGenericCreate+0x18>
 8006878:	b672      	cpsid	i
 800687a:	e7fe      	b.n	800687a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e003      	b.n	8006890 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4353      	muls	r3, r2
 800688e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3348      	adds	r3, #72	; 0x48
 8006894:	0018      	movs	r0, r3
 8006896:	f001 fd93 	bl	80083c0 <pvPortMalloc>
 800689a:	0003      	movs	r3, r0
 800689c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00c      	beq.n	80068be <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	3348      	adds	r3, #72	; 0x48
 80068a8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781c      	ldrb	r4, [r3, #0]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	0023      	movs	r3, r4
 80068ba:	f000 f805 	bl	80068c8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068be:	69bb      	ldr	r3, [r7, #24]
	}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b009      	add	sp, #36	; 0x24
 80068c6:	bd90      	pop	{r4, r7, pc}

080068c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	001a      	movs	r2, r3
 80068d6:	1cfb      	adds	r3, r7, #3
 80068d8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e002      	b.n	80068ee <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2101      	movs	r1, #1
 80068fe:	0018      	movs	r0, r3
 8006900:	f7ff ff5c 	bl	80067bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	46bd      	mov	sp, r7
 8006908:	b004      	add	sp, #16
 800690a:	bd80      	pop	{r7, pc}

0800690c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSend+0x20>
 8006928:	b672      	cpsid	i
 800692a:	e7fe      	b.n	800692a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <xQueueGenericSend+0x2e>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <xQueueGenericSend+0x32>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSend+0x34>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <xQueueGenericSend+0x3c>
 8006944:	b672      	cpsid	i
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x4a>
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSend+0x4e>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSend+0x50>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <xQueueGenericSend+0x58>
 8006960:	b672      	cpsid	i
 8006962:	e7fe      	b.n	8006962 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006964:	f001 f836 	bl	80079d4 <xTaskGetSchedulerState>
 8006968:	1e03      	subs	r3, r0, #0
 800696a:	d102      	bne.n	8006972 <xQueueGenericSend+0x66>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <xQueueGenericSend+0x6a>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <xQueueGenericSend+0x6c>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <xQueueGenericSend+0x74>
 800697c:	b672      	cpsid	i
 800697e:	e7fe      	b.n	800697e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006980:	f001 fc86 	bl	8008290 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698c:	429a      	cmp	r2, r3
 800698e:	d302      	bcc.n	8006996 <xQueueGenericSend+0x8a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d11e      	bne.n	80069d4 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	0018      	movs	r0, r3
 800699e:	f000 f99f 	bl	8006ce0 <prvCopyDataToQueue>
 80069a2:	0003      	movs	r3, r0
 80069a4:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fe88 	bl	80076c8 <xTaskRemoveFromEventList>
 80069b8:	1e03      	subs	r3, r0, #0
 80069ba:	d007      	beq.n	80069cc <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069bc:	f001 fc58 	bl	8008270 <vPortYield>
 80069c0:	e004      	b.n	80069cc <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069c8:	f001 fc52 	bl	8008270 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069cc:	f001 fc72 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e05b      	b.n	8006a8c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069da:	f001 fc6b 	bl	80082b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	e054      	b.n	8006a8c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e8:	2314      	movs	r3, #20
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 fec7 	bl	8007780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f6:	f001 fc5d 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069fa:	f000 fc6d 	bl	80072d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069fe:	f001 fc47 	bl	8008290 <vPortEnterCritical>
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2244      	movs	r2, #68	; 0x44
 8006a06:	5c9b      	ldrb	r3, [r3, r2]
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x10a>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2244      	movs	r2, #68	; 0x44
 8006a12:	2100      	movs	r1, #0
 8006a14:	5499      	strb	r1, [r3, r2]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	2245      	movs	r2, #69	; 0x45
 8006a1a:	5c9b      	ldrb	r3, [r3, r2]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	3301      	adds	r3, #1
 8006a20:	d103      	bne.n	8006a2a <xQueueGenericSend+0x11e>
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	2245      	movs	r2, #69	; 0x45
 8006a26:	2100      	movs	r1, #0
 8006a28:	5499      	strb	r1, [r3, r2]
 8006a2a:	f001 fc43 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	2314      	movs	r3, #20
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	0011      	movs	r1, r2
 8006a36:	0018      	movs	r0, r3
 8006a38:	f000 feb6 	bl	80077a8 <xTaskCheckForTimeOut>
 8006a3c:	1e03      	subs	r3, r0, #0
 8006a3e:	d11e      	bne.n	8006a7e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	0018      	movs	r0, r3
 8006a44:	f000 fa51 	bl	8006eea <prvIsQueueFull>
 8006a48:	1e03      	subs	r3, r0, #0
 8006a4a:	d011      	beq.n	8006a70 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	3310      	adds	r3, #16
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	0011      	movs	r1, r2
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 fdf3 	bl	8007640 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f9d0 	bl	8006e02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a62:	f000 fc45 	bl	80072f0 <xTaskResumeAll>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d18a      	bne.n	8006980 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006a6a:	f001 fc01 	bl	8008270 <vPortYield>
 8006a6e:	e787      	b.n	8006980 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 f9c5 	bl	8006e02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a78:	f000 fc3a 	bl	80072f0 <xTaskResumeAll>
 8006a7c:	e780      	b.n	8006980 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 f9be 	bl	8006e02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a86:	f000 fc33 	bl	80072f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a8a:	2300      	movs	r3, #0
		}
	}
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b00a      	add	sp, #40	; 0x28
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a94:	b590      	push	{r4, r7, lr}
 8006a96:	b089      	sub	sp, #36	; 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <xQueueGenericSendFromISR+0x1c>
 8006aac:	b672      	cpsid	i
 8006aae:	e7fe      	b.n	8006aae <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <xQueueGenericSendFromISR+0x2a>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <xQueueGenericSendFromISR+0x2e>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <xQueueGenericSendFromISR+0x30>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <xQueueGenericSendFromISR+0x38>
 8006ac8:	b672      	cpsid	i
 8006aca:	e7fe      	b.n	8006aca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d103      	bne.n	8006ada <xQueueGenericSendFromISR+0x46>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <xQueueGenericSendFromISR+0x4a>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <xQueueGenericSendFromISR+0x4c>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <xQueueGenericSendFromISR+0x54>
 8006ae4:	b672      	cpsid	i
 8006ae6:	e7fe      	b.n	8006ae6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae8:	f001 fbfc 	bl	80082e4 <ulSetInterruptMaskFromISR>
 8006aec:	0003      	movs	r3, r0
 8006aee:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d302      	bcc.n	8006b02 <xQueueGenericSendFromISR+0x6e>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d12e      	bne.n	8006b60 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b02:	2413      	movs	r4, #19
 8006b04:	193b      	adds	r3, r7, r4
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	2145      	movs	r1, #69	; 0x45
 8006b0a:	5c52      	ldrb	r2, [r2, r1]
 8006b0c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 f8e3 	bl	8006ce0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b1a:	193b      	adds	r3, r7, r4
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	3301      	adds	r3, #1
 8006b22:	d111      	bne.n	8006b48 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	0018      	movs	r0, r3
 8006b32:	f000 fdc9 	bl	80076c8 <xTaskRemoveFromEventList>
 8006b36:	1e03      	subs	r3, r0, #0
 8006b38:	d00f      	beq.n	8006b5a <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e008      	b.n	8006b5a <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b48:	2313      	movs	r3, #19
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	b259      	sxtb	r1, r3
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2245      	movs	r2, #69	; 0x45
 8006b58:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
		{
 8006b5e:	e001      	b.n	8006b64 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	0018      	movs	r0, r3
 8006b68:	f001 fbc2 	bl	80082f0 <vClearInterruptMaskFromISR>

	return xReturn;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b009      	add	sp, #36	; 0x24
 8006b74:	bd90      	pop	{r4, r7, pc}

08006b76 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b08a      	sub	sp, #40	; 0x28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <xQueueReceive+0x1e>
 8006b90:	b672      	cpsid	i
 8006b92:	e7fe      	b.n	8006b92 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <xQueueReceive+0x2c>
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <xQueueReceive+0x30>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueReceive+0x32>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xQueueReceive+0x3a>
 8006bac:	b672      	cpsid	i
 8006bae:	e7fe      	b.n	8006bae <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb0:	f000 ff10 	bl	80079d4 <xTaskGetSchedulerState>
 8006bb4:	1e03      	subs	r3, r0, #0
 8006bb6:	d102      	bne.n	8006bbe <xQueueReceive+0x48>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <xQueueReceive+0x4c>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueReceive+0x4e>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <xQueueReceive+0x56>
 8006bc8:	b672      	cpsid	i
 8006bca:	e7fe      	b.n	8006bca <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bcc:	f001 fb60 	bl	8008290 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	0011      	movs	r1, r2
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 f8e7 	bl	8006db6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	1e5a      	subs	r2, r3, #1
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 fd63 	bl	80076c8 <xTaskRemoveFromEventList>
 8006c02:	1e03      	subs	r3, r0, #0
 8006c04:	d001      	beq.n	8006c0a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c06:	f001 fb33 	bl	8008270 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c0a:	f001 fb53 	bl	80082b4 <vPortExitCritical>
				return pdPASS;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e062      	b.n	8006cd8 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c18:	f001 fb4c 	bl	80082b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e05b      	b.n	8006cd8 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c26:	2314      	movs	r3, #20
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f000 fda8 	bl	8007780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c34:	f001 fb3e 	bl	80082b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c38:	f000 fb4e 	bl	80072d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3c:	f001 fb28 	bl	8008290 <vPortEnterCritical>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	2244      	movs	r2, #68	; 0x44
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	3301      	adds	r3, #1
 8006c4a:	d103      	bne.n	8006c54 <xQueueReceive+0xde>
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2244      	movs	r2, #68	; 0x44
 8006c50:	2100      	movs	r1, #0
 8006c52:	5499      	strb	r1, [r3, r2]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2245      	movs	r2, #69	; 0x45
 8006c58:	5c9b      	ldrb	r3, [r3, r2]
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	d103      	bne.n	8006c68 <xQueueReceive+0xf2>
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2245      	movs	r2, #69	; 0x45
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]
 8006c68:	f001 fb24 	bl	80082b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c6c:	1d3a      	adds	r2, r7, #4
 8006c6e:	2314      	movs	r3, #20
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	0011      	movs	r1, r2
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fd97 	bl	80077a8 <xTaskCheckForTimeOut>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d11e      	bne.n	8006cbc <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	0018      	movs	r0, r3
 8006c82:	f000 f91c 	bl	8006ebe <prvIsQueueEmpty>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d011      	beq.n	8006cae <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	3324      	adds	r3, #36	; 0x24
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fcd4 	bl	8007640 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f000 f8b1 	bl	8006e02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ca0:	f000 fb26 	bl	80072f0 <xTaskResumeAll>
 8006ca4:	1e03      	subs	r3, r0, #0
 8006ca6:	d191      	bne.n	8006bcc <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006ca8:	f001 fae2 	bl	8008270 <vPortYield>
 8006cac:	e78e      	b.n	8006bcc <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f8a6 	bl	8006e02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb6:	f000 fb1b 	bl	80072f0 <xTaskResumeAll>
 8006cba:	e787      	b.n	8006bcc <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 f89f 	bl	8006e02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc4:	f000 fb14 	bl	80072f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f000 f8f7 	bl	8006ebe <prvIsQueueEmpty>
 8006cd0:	1e03      	subs	r3, r0, #0
 8006cd2:	d100      	bne.n	8006cd6 <xQueueReceive+0x160>
 8006cd4:	e77a      	b.n	8006bcc <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b00a      	add	sp, #40	; 0x28
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10e      	bne.n	8006d1c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d14e      	bne.n	8006da4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 fe7e 	bl	8007a0c <xTaskPriorityDisinherit>
 8006d10:	0003      	movs	r3, r0
 8006d12:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e043      	b.n	8006da4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d119      	bne.n	8006d56 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6898      	ldr	r0, [r3, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	0019      	movs	r1, r3
 8006d2e:	f006 f91d 	bl	800cf6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	18d2      	adds	r2, r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d32b      	bcc.n	8006da4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	e026      	b.n	8006da4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	0019      	movs	r1, r3
 8006d62:	f006 f903 	bl	800cf6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	425b      	negs	r3, r3
 8006d70:	18d2      	adds	r2, r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d207      	bcs.n	8006d92 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	425b      	negs	r3, r3
 8006d8c:	18d2      	adds	r2, r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d105      	bne.n	8006da4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dac:	697b      	ldr	r3, [r7, #20]
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b006      	add	sp, #24
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d018      	beq.n	8006dfa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	18d2      	adds	r2, r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d303      	bcc.n	8006dea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f006 f8b9 	bl	800cf6c <memcpy>
	}
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b002      	add	sp, #8
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e0a:	f001 fa41 	bl	8008290 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e0e:	230f      	movs	r3, #15
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	2145      	movs	r1, #69	; 0x45
 8006e16:	5c52      	ldrb	r2, [r2, r1]
 8006e18:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e1a:	e013      	b.n	8006e44 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 fc4d 	bl	80076c8 <xTaskRemoveFromEventList>
 8006e2e:	1e03      	subs	r3, r0, #0
 8006e30:	d001      	beq.n	8006e36 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e32:	f000 fd09 	bl	8007848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e36:	210f      	movs	r1, #15
 8006e38:	187b      	adds	r3, r7, r1
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	187b      	adds	r3, r7, r1
 8006e42:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e44:	230f      	movs	r3, #15
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dce5      	bgt.n	8006e1c <prvUnlockQueue+0x1a>
 8006e50:	e000      	b.n	8006e54 <prvUnlockQueue+0x52>
					break;
 8006e52:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2245      	movs	r2, #69	; 0x45
 8006e58:	21ff      	movs	r1, #255	; 0xff
 8006e5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006e5c:	f001 fa2a 	bl	80082b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e60:	f001 fa16 	bl	8008290 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e64:	230e      	movs	r3, #14
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	2144      	movs	r1, #68	; 0x44
 8006e6c:	5c52      	ldrb	r2, [r2, r1]
 8006e6e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e70:	e013      	b.n	8006e9a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3310      	adds	r3, #16
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fc22 	bl	80076c8 <xTaskRemoveFromEventList>
 8006e84:	1e03      	subs	r3, r0, #0
 8006e86:	d001      	beq.n	8006e8c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006e88:	f000 fcde 	bl	8007848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e8c:	210e      	movs	r1, #14
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	187b      	adds	r3, r7, r1
 8006e98:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9a:	230e      	movs	r3, #14
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dce5      	bgt.n	8006e72 <prvUnlockQueue+0x70>
 8006ea6:	e000      	b.n	8006eaa <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006ea8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2244      	movs	r2, #68	; 0x44
 8006eae:	21ff      	movs	r1, #255	; 0xff
 8006eb0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006eb2:	f001 f9ff 	bl	80082b4 <vPortExitCritical>
}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec6:	f001 f9e3 	bl	8008290 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	e001      	b.n	8006edc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006edc:	f001 f9ea 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b004      	add	sp, #16
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ef2:	f001 f9cd 	bl	8008290 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d102      	bne.n	8006f08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e001      	b.n	8006f0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f0c:	f001 f9d2 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	0018      	movs	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b004      	add	sp, #16
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e015      	b.n	8006f58 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <vQueueAddToRegistry+0x4c>)
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	00d2      	lsls	r2, r2, #3
 8006f32:	58d3      	ldr	r3, [r2, r3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10c      	bne.n	8006f52 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <vQueueAddToRegistry+0x4c>)
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	00d2      	lsls	r2, r2, #3
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <vQueueAddToRegistry+0x4c>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f50:	e006      	b.n	8006f60 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b07      	cmp	r3, #7
 8006f5c:	d9e6      	bls.n	8006f2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b004      	add	sp, #16
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000780 	.word	0x20000780

08006f6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f7c:	f001 f988 	bl	8008290 <vPortEnterCritical>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2244      	movs	r2, #68	; 0x44
 8006f84:	5c9b      	ldrb	r3, [r3, r2]
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	3301      	adds	r3, #1
 8006f8a:	d103      	bne.n	8006f94 <vQueueWaitForMessageRestricted+0x28>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2244      	movs	r2, #68	; 0x44
 8006f90:	2100      	movs	r1, #0
 8006f92:	5499      	strb	r1, [r3, r2]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2245      	movs	r2, #69	; 0x45
 8006f98:	5c9b      	ldrb	r3, [r3, r2]
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	d103      	bne.n	8006fa8 <vQueueWaitForMessageRestricted+0x3c>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2245      	movs	r2, #69	; 0x45
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	5499      	strb	r1, [r3, r2]
 8006fa8:	f001 f984 	bl	80082b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f000 fb5d 	bl	800767c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f7ff ff1c 	bl	8006e02 <prvUnlockQueue>
	}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b006      	add	sp, #24
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fd2:	b590      	push	{r4, r7, lr}
 8006fd4:	b08d      	sub	sp, #52	; 0x34
 8006fd6:	af04      	add	r7, sp, #16
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	1dbb      	adds	r3, r7, #6
 8006fe0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe2:	1dbb      	adds	r3, r7, #6
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f001 f9e9 	bl	80083c0 <pvPortMalloc>
 8006fee:	0003      	movs	r3, r0
 8006ff0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d010      	beq.n	800701a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ff8:	20a0      	movs	r0, #160	; 0xa0
 8006ffa:	f001 f9e1 	bl	80083c0 <pvPortMalloc>
 8006ffe:	0003      	movs	r3, r0
 8007000:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
 800700e:	e006      	b.n	800701e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	0018      	movs	r0, r3
 8007014:	f001 fa7a 	bl	800850c <vPortFree>
 8007018:	e001      	b.n	800701e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d016      	beq.n	8007052 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007024:	1dbb      	adds	r3, r7, #6
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	683c      	ldr	r4, [r7, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	2300      	movs	r3, #0
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	0023      	movs	r3, r4
 8007040:	f000 f810 	bl	8007064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	0018      	movs	r0, r3
 8007048:	f000 f89c 	bl	8007184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800704c:	2301      	movs	r3, #1
 800704e:	61bb      	str	r3, [r7, #24]
 8007050:	e002      	b.n	8007058 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007052:	2301      	movs	r3, #1
 8007054:	425b      	negs	r3, r3
 8007056:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007058:	69bb      	ldr	r3, [r7, #24]
	}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b009      	add	sp, #36	; 0x24
 8007060:	bd90      	pop	{r4, r7, pc}
	...

08007064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	493e      	ldr	r1, [pc, #248]	; (8007174 <prvInitialiseNewTask+0x110>)
 800707a:	468c      	mov	ip, r1
 800707c:	4463      	add	r3, ip
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	18d3      	adds	r3, r2, r3
 8007082:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2207      	movs	r2, #7
 8007088:	4393      	bics	r3, r2
 800708a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2207      	movs	r2, #7
 8007090:	4013      	ands	r3, r2
 8007092:	d001      	beq.n	8007098 <prvInitialiseNewTask+0x34>
 8007094:	b672      	cpsid	i
 8007096:	e7fe      	b.n	8007096 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e013      	b.n	80070c6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	18d3      	adds	r3, r2, r3
 80070a4:	7818      	ldrb	r0, [r3, #0]
 80070a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a8:	2134      	movs	r1, #52	; 0x34
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	18d3      	adds	r3, r2, r3
 80070ae:	185b      	adds	r3, r3, r1
 80070b0:	1c02      	adds	r2, r0, #0
 80070b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	3301      	adds	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d9e8      	bls.n	800709e <prvInitialiseNewTask+0x3a>
 80070cc:	e000      	b.n	80070d0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80070ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	2243      	movs	r2, #67	; 0x43
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d901      	bls.n	80070e2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070de:	2306      	movs	r3, #6
 80070e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	6a3a      	ldr	r2, [r7, #32]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	2200      	movs	r2, #0
 80070f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	3304      	adds	r3, #4
 80070f8:	0018      	movs	r0, r3
 80070fa:	f7ff fad4 	bl	80066a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	3318      	adds	r3, #24
 8007102:	0018      	movs	r0, r3
 8007104:	f7ff facf 	bl	80066a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800710c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	2207      	movs	r2, #7
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	2298      	movs	r2, #152	; 0x98
 8007122:	2100      	movs	r1, #0
 8007124:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	229c      	movs	r2, #156	; 0x9c
 800712a:	2100      	movs	r1, #0
 800712c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	334c      	adds	r3, #76	; 0x4c
 8007132:	224c      	movs	r2, #76	; 0x4c
 8007134:	2100      	movs	r1, #0
 8007136:	0018      	movs	r0, r3
 8007138:	f005 fe8c 	bl	800ce54 <memset>
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <prvInitialiseNewTask+0x114>)
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <prvInitialiseNewTask+0x118>)
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	4a0d      	ldr	r2, [pc, #52]	; (8007180 <prvInitialiseNewTask+0x11c>)
 800714c:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68f9      	ldr	r1, [r7, #12]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	0018      	movs	r0, r3
 8007156:	f001 f803 	bl	8008160 <pxPortInitialiseStack>
 800715a:	0002      	movs	r2, r0
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800716a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b006      	add	sp, #24
 8007172:	bd80      	pop	{r7, pc}
 8007174:	3fffffff 	.word	0x3fffffff
 8007178:	20005028 	.word	0x20005028
 800717c:	20005090 	.word	0x20005090
 8007180:	200050f8 	.word	0x200050f8

08007184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800718c:	f001 f880 	bl	8008290 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007190:	4b28      	ldr	r3, [pc, #160]	; (8007234 <prvAddNewTaskToReadyList+0xb0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	4b27      	ldr	r3, [pc, #156]	; (8007234 <prvAddNewTaskToReadyList+0xb0>)
 8007198:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800719a:	4b27      	ldr	r3, [pc, #156]	; (8007238 <prvAddNewTaskToReadyList+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071a2:	4b25      	ldr	r3, [pc, #148]	; (8007238 <prvAddNewTaskToReadyList+0xb4>)
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071a8:	4b22      	ldr	r3, [pc, #136]	; (8007234 <prvAddNewTaskToReadyList+0xb0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d110      	bne.n	80071d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071b0:	f000 fb64 	bl	800787c <prvInitialiseTaskLists>
 80071b4:	e00d      	b.n	80071d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071b6:	4b21      	ldr	r3, [pc, #132]	; (800723c <prvAddNewTaskToReadyList+0xb8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071be:	4b1e      	ldr	r3, [pc, #120]	; (8007238 <prvAddNewTaskToReadyList+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d802      	bhi.n	80071d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071cc:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <prvAddNewTaskToReadyList+0xb4>)
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071d2:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <prvAddNewTaskToReadyList+0xbc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	4b19      	ldr	r3, [pc, #100]	; (8007240 <prvAddNewTaskToReadyList+0xbc>)
 80071da:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	4b18      	ldr	r3, [pc, #96]	; (8007244 <prvAddNewTaskToReadyList+0xc0>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d903      	bls.n	80071f0 <prvAddNewTaskToReadyList+0x6c>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ec:	4b15      	ldr	r3, [pc, #84]	; (8007244 <prvAddNewTaskToReadyList+0xc0>)
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	0013      	movs	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	189b      	adds	r3, r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4a12      	ldr	r2, [pc, #72]	; (8007248 <prvAddNewTaskToReadyList+0xc4>)
 80071fe:	189a      	adds	r2, r3, r2
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	0019      	movs	r1, r3
 8007206:	0010      	movs	r0, r2
 8007208:	f7ff fa58 	bl	80066bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800720c:	f001 f852 	bl	80082b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <prvAddNewTaskToReadyList+0xb8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007218:	4b07      	ldr	r3, [pc, #28]	; (8007238 <prvAddNewTaskToReadyList+0xb4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	429a      	cmp	r2, r3
 8007224:	d201      	bcs.n	800722a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007226:	f001 f823 	bl	8008270 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	46bd      	mov	sp, r7
 800722e:	b002      	add	sp, #8
 8007230:	bd80      	pop	{r7, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	200008c0 	.word	0x200008c0
 8007238:	200007c0 	.word	0x200007c0
 800723c:	200008cc 	.word	0x200008cc
 8007240:	200008dc 	.word	0x200008dc
 8007244:	200008c8 	.word	0x200008c8
 8007248:	200007c4 	.word	0x200007c4

0800724c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007252:	4919      	ldr	r1, [pc, #100]	; (80072b8 <vTaskStartScheduler+0x6c>)
 8007254:	4819      	ldr	r0, [pc, #100]	; (80072bc <vTaskStartScheduler+0x70>)
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <vTaskStartScheduler+0x74>)
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	2300      	movs	r3, #0
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	f7ff feb6 	bl	8006fd2 <xTaskCreate>
 8007266:	0003      	movs	r3, r0
 8007268:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d103      	bne.n	8007278 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8007270:	f000 fc7c 	bl	8007b6c <xTimerCreateTimerTask>
 8007274:	0003      	movs	r3, r0
 8007276:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d113      	bne.n	80072a6 <vTaskStartScheduler+0x5a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800727e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <vTaskStartScheduler+0x78>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	334c      	adds	r3, #76	; 0x4c
 8007286:	001a      	movs	r2, r3
 8007288:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <vTaskStartScheduler+0x7c>)
 800728a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <vTaskStartScheduler+0x80>)
 800728e:	2201      	movs	r2, #1
 8007290:	4252      	negs	r2, r2
 8007292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <vTaskStartScheduler+0x84>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <vTaskStartScheduler+0x88>)
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072a0:	f000 ffc2 	bl	8008228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072a4:	e004      	b.n	80072b0 <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3301      	adds	r3, #1
 80072aa:	d101      	bne.n	80072b0 <vTaskStartScheduler+0x64>
 80072ac:	b672      	cpsid	i
 80072ae:	e7fe      	b.n	80072ae <vTaskStartScheduler+0x62>
}
 80072b0:	46c0      	nop			; (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	0800d06c 	.word	0x0800d06c
 80072bc:	0800785d 	.word	0x0800785d
 80072c0:	200008e4 	.word	0x200008e4
 80072c4:	200007c0 	.word	0x200007c0
 80072c8:	20000064 	.word	0x20000064
 80072cc:	200008e0 	.word	0x200008e0
 80072d0:	200008cc 	.word	0x200008cc
 80072d4:	200008c4 	.word	0x200008c4

080072d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80072dc:	4b03      	ldr	r3, [pc, #12]	; (80072ec <vTaskSuspendAll+0x14>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	4b02      	ldr	r3, [pc, #8]	; (80072ec <vTaskSuspendAll+0x14>)
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200008e8 	.word	0x200008e8

080072f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072fe:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <xTaskResumeAll+0xf8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <xTaskResumeAll+0x1a>
 8007306:	b672      	cpsid	i
 8007308:	e7fe      	b.n	8007308 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800730a:	f000 ffc1 	bl	8008290 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <xTaskResumeAll+0xf8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	1e5a      	subs	r2, r3, #1
 8007314:	4b34      	ldr	r3, [pc, #208]	; (80073e8 <xTaskResumeAll+0xf8>)
 8007316:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007318:	4b33      	ldr	r3, [pc, #204]	; (80073e8 <xTaskResumeAll+0xf8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d15b      	bne.n	80073d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007320:	4b32      	ldr	r3, [pc, #200]	; (80073ec <xTaskResumeAll+0xfc>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d057      	beq.n	80073d8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007328:	e02f      	b.n	800738a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800732a:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <xTaskResumeAll+0x100>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3318      	adds	r3, #24
 8007336:	0018      	movs	r0, r3
 8007338:	f7ff fa18 	bl	800676c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3304      	adds	r3, #4
 8007340:	0018      	movs	r0, r3
 8007342:	f7ff fa13 	bl	800676c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	4b2a      	ldr	r3, [pc, #168]	; (80073f4 <xTaskResumeAll+0x104>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d903      	bls.n	800735a <xTaskResumeAll+0x6a>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	4b27      	ldr	r3, [pc, #156]	; (80073f4 <xTaskResumeAll+0x104>)
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	0013      	movs	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	189b      	adds	r3, r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a24      	ldr	r2, [pc, #144]	; (80073f8 <xTaskResumeAll+0x108>)
 8007368:	189a      	adds	r2, r3, r2
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3304      	adds	r3, #4
 800736e:	0019      	movs	r1, r3
 8007370:	0010      	movs	r0, r2
 8007372:	f7ff f9a3 	bl	80066bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <xTaskResumeAll+0x10c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007384:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <xTaskResumeAll+0x110>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <xTaskResumeAll+0x100>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1cb      	bne.n	800732a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007398:	f000 faf8 	bl	800798c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800739c:	4b19      	ldr	r3, [pc, #100]	; (8007404 <xTaskResumeAll+0x114>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00f      	beq.n	80073c8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073a8:	f000 f83c 	bl	8007424 <xTaskIncrementTick>
 80073ac:	1e03      	subs	r3, r0, #0
 80073ae:	d002      	beq.n	80073b6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <xTaskResumeAll+0x110>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f2      	bne.n	80073a8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <xTaskResumeAll+0x114>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073c8:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <xTaskResumeAll+0x110>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073d4:	f000 ff4c 	bl	8008270 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073d8:	f000 ff6c 	bl	80082b4 <vPortExitCritical>

	return xAlreadyYielded;
 80073dc:	68bb      	ldr	r3, [r7, #8]
}
 80073de:	0018      	movs	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b004      	add	sp, #16
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	200008e8 	.word	0x200008e8
 80073ec:	200008c0 	.word	0x200008c0
 80073f0:	20000880 	.word	0x20000880
 80073f4:	200008c8 	.word	0x200008c8
 80073f8:	200007c4 	.word	0x200007c4
 80073fc:	200007c0 	.word	0x200007c0
 8007400:	200008d4 	.word	0x200008d4
 8007404:	200008d0 	.word	0x200008d0

08007408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <xTaskGetTickCount+0x18>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007414:	687b      	ldr	r3, [r7, #4]
}
 8007416:	0018      	movs	r0, r3
 8007418:	46bd      	mov	sp, r7
 800741a:	b002      	add	sp, #8
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	200008c4 	.word	0x200008c4

08007424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800742e:	4b4c      	ldr	r3, [pc, #304]	; (8007560 <xTaskIncrementTick+0x13c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d000      	beq.n	8007438 <xTaskIncrementTick+0x14>
 8007436:	e083      	b.n	8007540 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007438:	4b4a      	ldr	r3, [pc, #296]	; (8007564 <xTaskIncrementTick+0x140>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007440:	4b48      	ldr	r3, [pc, #288]	; (8007564 <xTaskIncrementTick+0x140>)
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d117      	bne.n	800747c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800744c:	4b46      	ldr	r3, [pc, #280]	; (8007568 <xTaskIncrementTick+0x144>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <xTaskIncrementTick+0x36>
 8007456:	b672      	cpsid	i
 8007458:	e7fe      	b.n	8007458 <xTaskIncrementTick+0x34>
 800745a:	4b43      	ldr	r3, [pc, #268]	; (8007568 <xTaskIncrementTick+0x144>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4b42      	ldr	r3, [pc, #264]	; (800756c <xTaskIncrementTick+0x148>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b40      	ldr	r3, [pc, #256]	; (8007568 <xTaskIncrementTick+0x144>)
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	4b40      	ldr	r3, [pc, #256]	; (800756c <xTaskIncrementTick+0x148>)
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	4b40      	ldr	r3, [pc, #256]	; (8007570 <xTaskIncrementTick+0x14c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <xTaskIncrementTick+0x14c>)
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f000 fa88 	bl	800798c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800747c:	4b3d      	ldr	r3, [pc, #244]	; (8007574 <xTaskIncrementTick+0x150>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	429a      	cmp	r2, r3
 8007484:	d34e      	bcc.n	8007524 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007486:	4b38      	ldr	r3, [pc, #224]	; (8007568 <xTaskIncrementTick+0x144>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <xTaskIncrementTick+0x70>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <xTaskIncrementTick+0x72>
 8007494:	2300      	movs	r3, #0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d004      	beq.n	80074a4 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800749a:	4b36      	ldr	r3, [pc, #216]	; (8007574 <xTaskIncrementTick+0x150>)
 800749c:	2201      	movs	r2, #1
 800749e:	4252      	negs	r2, r2
 80074a0:	601a      	str	r2, [r3, #0]
					break;
 80074a2:	e03f      	b.n	8007524 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80074a4:	4b30      	ldr	r3, [pc, #192]	; (8007568 <xTaskIncrementTick+0x144>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d203      	bcs.n	80074c4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074bc:	4b2d      	ldr	r3, [pc, #180]	; (8007574 <xTaskIncrementTick+0x150>)
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	601a      	str	r2, [r3, #0]
						break;
 80074c2:	e02f      	b.n	8007524 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	3304      	adds	r3, #4
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7ff f94f 	bl	800676c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3318      	adds	r3, #24
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff f946 	bl	800676c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	4b24      	ldr	r3, [pc, #144]	; (8007578 <xTaskIncrementTick+0x154>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d903      	bls.n	80074f4 <xTaskIncrementTick+0xd0>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	4b21      	ldr	r3, [pc, #132]	; (8007578 <xTaskIncrementTick+0x154>)
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	0013      	movs	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4a1e      	ldr	r2, [pc, #120]	; (800757c <xTaskIncrementTick+0x158>)
 8007502:	189a      	adds	r2, r3, r2
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3304      	adds	r3, #4
 8007508:	0019      	movs	r1, r3
 800750a:	0010      	movs	r0, r2
 800750c:	f7ff f8d6 	bl	80066bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <xTaskIncrementTick+0x15c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	429a      	cmp	r2, r3
 800751c:	d3b3      	bcc.n	8007486 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007522:	e7b0      	b.n	8007486 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <xTaskIncrementTick+0x15c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752a:	4914      	ldr	r1, [pc, #80]	; (800757c <xTaskIncrementTick+0x158>)
 800752c:	0013      	movs	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	189b      	adds	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	585b      	ldr	r3, [r3, r1]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d907      	bls.n	800754a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	e004      	b.n	800754a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <xTaskIncrementTick+0x160>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskIncrementTick+0x160>)
 8007548:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <xTaskIncrementTick+0x164>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b006      	add	sp, #24
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200008e8 	.word	0x200008e8
 8007564:	200008c4 	.word	0x200008c4
 8007568:	20000878 	.word	0x20000878
 800756c:	2000087c 	.word	0x2000087c
 8007570:	200008d8 	.word	0x200008d8
 8007574:	200008e0 	.word	0x200008e0
 8007578:	200008c8 	.word	0x200008c8
 800757c:	200007c4 	.word	0x200007c4
 8007580:	200007c0 	.word	0x200007c0
 8007584:	200008d0 	.word	0x200008d0
 8007588:	200008d4 	.word	0x200008d4

0800758c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007592:	4b25      	ldr	r3, [pc, #148]	; (8007628 <vTaskSwitchContext+0x9c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <vTaskSwitchContext+0xa0>)
 800759c:	2201      	movs	r2, #1
 800759e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075a0:	e03d      	b.n	800761e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80075a2:	4b22      	ldr	r3, [pc, #136]	; (800762c <vTaskSwitchContext+0xa0>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80075a8:	4b21      	ldr	r3, [pc, #132]	; (8007630 <vTaskSwitchContext+0xa4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	607b      	str	r3, [r7, #4]
 80075ae:	e007      	b.n	80075c0 <vTaskSwitchContext+0x34>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <vTaskSwitchContext+0x2e>
 80075b6:	b672      	cpsid	i
 80075b8:	e7fe      	b.n	80075b8 <vTaskSwitchContext+0x2c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3b01      	subs	r3, #1
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	491c      	ldr	r1, [pc, #112]	; (8007634 <vTaskSwitchContext+0xa8>)
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	0013      	movs	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	189b      	adds	r3, r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	585b      	ldr	r3, [r3, r1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0ee      	beq.n	80075b0 <vTaskSwitchContext+0x24>
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	0013      	movs	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	189b      	adds	r3, r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <vTaskSwitchContext+0xa8>)
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d104      	bne.n	8007602 <vTaskSwitchContext+0x76>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <vTaskSwitchContext+0xac>)
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <vTaskSwitchContext+0xa4>)
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <vTaskSwitchContext+0xac>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	334c      	adds	r3, #76	; 0x4c
 8007618:	001a      	movs	r2, r3
 800761a:	4b08      	ldr	r3, [pc, #32]	; (800763c <vTaskSwitchContext+0xb0>)
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b002      	add	sp, #8
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	200008e8 	.word	0x200008e8
 800762c:	200008d4 	.word	0x200008d4
 8007630:	200008c8 	.word	0x200008c8
 8007634:	200007c4 	.word	0x200007c4
 8007638:	200007c0 	.word	0x200007c0
 800763c:	20000064 	.word	0x20000064

08007640 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <vTaskPlaceOnEventList+0x14>
 8007650:	b672      	cpsid	i
 8007652:	e7fe      	b.n	8007652 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <vTaskPlaceOnEventList+0x38>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3318      	adds	r3, #24
 800765a:	001a      	movs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	0011      	movs	r1, r2
 8007660:	0018      	movs	r0, r3
 8007662:	f7ff f84d 	bl	8006700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2101      	movs	r1, #1
 800766a:	0018      	movs	r0, r3
 800766c:	f000 fa2a 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
}
 8007670:	46c0      	nop			; (mov r8, r8)
 8007672:	46bd      	mov	sp, r7
 8007674:	b002      	add	sp, #8
 8007676:	bd80      	pop	{r7, pc}
 8007678:	200007c0 	.word	0x200007c0

0800767c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <vTaskPlaceOnEventListRestricted+0x16>
 800768e:	b672      	cpsid	i
 8007690:	e7fe      	b.n	8007690 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007692:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <vTaskPlaceOnEventListRestricted+0x48>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3318      	adds	r3, #24
 8007698:	001a      	movs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0011      	movs	r1, r2
 800769e:	0018      	movs	r0, r3
 80076a0:	f7ff f80c 	bl	80066bc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80076aa:	2301      	movs	r3, #1
 80076ac:	425b      	negs	r3, r3
 80076ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 fa04 	bl	8007ac4 <prvAddCurrentTaskToDelayedList>
	}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b004      	add	sp, #16
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	200007c0 	.word	0x200007c0

080076c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xTaskRemoveFromEventList+0x1a>
 80076de:	b672      	cpsid	i
 80076e0:	e7fe      	b.n	80076e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3318      	adds	r3, #24
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7ff f840 	bl	800676c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <xTaskRemoveFromEventList+0xa0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11d      	bne.n	8007730 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	3304      	adds	r3, #4
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7ff f837 	bl	800676c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	4b1a      	ldr	r3, [pc, #104]	; (800776c <xTaskRemoveFromEventList+0xa4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d903      	bls.n	8007712 <xTaskRemoveFromEventList+0x4a>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4b17      	ldr	r3, [pc, #92]	; (800776c <xTaskRemoveFromEventList+0xa4>)
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	0013      	movs	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	189b      	adds	r3, r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4a14      	ldr	r2, [pc, #80]	; (8007770 <xTaskRemoveFromEventList+0xa8>)
 8007720:	189a      	adds	r2, r3, r2
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3304      	adds	r3, #4
 8007726:	0019      	movs	r1, r3
 8007728:	0010      	movs	r0, r2
 800772a:	f7fe ffc7 	bl	80066bc <vListInsertEnd>
 800772e:	e007      	b.n	8007740 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3318      	adds	r3, #24
 8007734:	001a      	movs	r2, r3
 8007736:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <xTaskRemoveFromEventList+0xac>)
 8007738:	0011      	movs	r1, r2
 800773a:	0018      	movs	r0, r3
 800773c:	f7fe ffbe 	bl	80066bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007744:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <xTaskRemoveFromEventList+0xb0>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	429a      	cmp	r2, r3
 800774c:	d905      	bls.n	800775a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800774e:	2301      	movs	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <xTaskRemoveFromEventList+0xb4>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	e001      	b.n	800775e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	0018      	movs	r0, r3
 8007762:	46bd      	mov	sp, r7
 8007764:	b004      	add	sp, #16
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200008e8 	.word	0x200008e8
 800776c:	200008c8 	.word	0x200008c8
 8007770:	200007c4 	.word	0x200007c4
 8007774:	20000880 	.word	0x20000880
 8007778:	200007c0 	.word	0x200007c0
 800777c:	200008d4 	.word	0x200008d4

08007780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <vTaskInternalSetTimeOutState+0x20>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <vTaskInternalSetTimeOutState+0x24>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	605a      	str	r2, [r3, #4]
}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	200008d8 	.word	0x200008d8
 80077a4:	200008c4 	.word	0x200008c4

080077a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <xTaskCheckForTimeOut+0x14>
 80077b8:	b672      	cpsid	i
 80077ba:	e7fe      	b.n	80077ba <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <xTaskCheckForTimeOut+0x1e>
 80077c2:	b672      	cpsid	i
 80077c4:	e7fe      	b.n	80077c4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80077c6:	f000 fd63 	bl	8008290 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077ca:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <xTaskCheckForTimeOut+0x98>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	d102      	bne.n	80077e8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e024      	b.n	8007832 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	4b15      	ldr	r3, [pc, #84]	; (8007844 <xTaskCheckForTimeOut+0x9c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d007      	beq.n	8007804 <xTaskCheckForTimeOut+0x5c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077fe:	2301      	movs	r3, #1
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e016      	b.n	8007832 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	429a      	cmp	r2, r3
 800780c:	d20c      	bcs.n	8007828 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0018      	movs	r0, r3
 800781e:	f7ff ffaf 	bl	8007780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	e004      	b.n	8007832 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007832:	f000 fd3f 	bl	80082b4 <vPortExitCritical>

	return xReturn;
 8007836:	697b      	ldr	r3, [r7, #20]
}
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	b006      	add	sp, #24
 800783e:	bd80      	pop	{r7, pc}
 8007840:	200008c4 	.word	0x200008c4
 8007844:	200008d8 	.word	0x200008d8

08007848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800784c:	4b02      	ldr	r3, [pc, #8]	; (8007858 <vTaskMissedYield+0x10>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200008d4 	.word	0x200008d4

0800785c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007864:	f000 f84e 	bl	8007904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <prvIdleTask+0x1c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d9f9      	bls.n	8007864 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007870:	f000 fcfe 	bl	8008270 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007874:	e7f6      	b.n	8007864 <prvIdleTask+0x8>
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	200007c4 	.word	0x200007c4

0800787c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007882:	2300      	movs	r3, #0
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	e00c      	b.n	80078a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	0013      	movs	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	189b      	adds	r3, r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <prvInitialiseTaskLists+0x68>)
 8007894:	189b      	adds	r3, r3, r2
 8007896:	0018      	movs	r0, r3
 8007898:	f7fe fee7 	bl	800666a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3301      	adds	r3, #1
 80078a0:	607b      	str	r3, [r7, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b06      	cmp	r3, #6
 80078a6:	d9ef      	bls.n	8007888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <prvInitialiseTaskLists+0x6c>)
 80078aa:	0018      	movs	r0, r3
 80078ac:	f7fe fedd 	bl	800666a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b0:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <prvInitialiseTaskLists+0x70>)
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7fe fed9 	bl	800666a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <prvInitialiseTaskLists+0x74>)
 80078ba:	0018      	movs	r0, r3
 80078bc:	f7fe fed5 	bl	800666a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <prvInitialiseTaskLists+0x78>)
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7fe fed1 	bl	800666a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <prvInitialiseTaskLists+0x7c>)
 80078ca:	0018      	movs	r0, r3
 80078cc:	f7fe fecd 	bl	800666a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <prvInitialiseTaskLists+0x80>)
 80078d2:	4a05      	ldr	r2, [pc, #20]	; (80078e8 <prvInitialiseTaskLists+0x6c>)
 80078d4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d6:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvInitialiseTaskLists+0x84>)
 80078d8:	4a04      	ldr	r2, [pc, #16]	; (80078ec <prvInitialiseTaskLists+0x70>)
 80078da:	601a      	str	r2, [r3, #0]
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200007c4 	.word	0x200007c4
 80078e8:	20000850 	.word	0x20000850
 80078ec:	20000864 	.word	0x20000864
 80078f0:	20000880 	.word	0x20000880
 80078f4:	20000894 	.word	0x20000894
 80078f8:	200008ac 	.word	0x200008ac
 80078fc:	20000878 	.word	0x20000878
 8007900:	2000087c 	.word	0x2000087c

08007904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790a:	e01a      	b.n	8007942 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800790c:	f000 fcc0 	bl	8008290 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <prvCheckTasksWaitingTermination+0x50>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	0018      	movs	r0, r3
 800791e:	f7fe ff25 	bl	800676c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	1e5a      	subs	r2, r3, #1
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 800792a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	1e5a      	subs	r2, r3, #1
 8007932:	4b0a      	ldr	r3, [pc, #40]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007934:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007936:	f000 fcbd 	bl	80082b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0018      	movs	r0, r3
 800793e:	f000 f80f 	bl	8007960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e0      	bne.n	800790c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000894 	.word	0x20000894
 8007958:	200008c0 	.word	0x200008c0
 800795c:	200008a8 	.word	0x200008a8

08007960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	334c      	adds	r3, #76	; 0x4c
 800796c:	0018      	movs	r0, r3
 800796e:	f005 fa79 	bl	800ce64 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	0018      	movs	r0, r3
 8007978:	f000 fdc8 	bl	800850c <vPortFree>
			vPortFree( pxTCB );
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	0018      	movs	r0, r3
 8007980:	f000 fdc4 	bl	800850c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007984:	46c0      	nop			; (mov r8, r8)
 8007986:	46bd      	mov	sp, r7
 8007988:	b002      	add	sp, #8
 800798a:	bd80      	pop	{r7, pc}

0800798c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <prvResetNextTaskUnblockTime+0x40>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <prvResetNextTaskUnblockTime+0x14>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <prvResetNextTaskUnblockTime+0x16>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079a6:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <prvResetNextTaskUnblockTime+0x44>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	4252      	negs	r2, r2
 80079ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079ae:	e008      	b.n	80079c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <prvResetNextTaskUnblockTime+0x40>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <prvResetNextTaskUnblockTime+0x44>)
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b002      	add	sp, #8
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	20000878 	.word	0x20000878
 80079d0:	200008e0 	.word	0x200008e0

080079d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079da:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <xTaskGetSchedulerState+0x30>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079e2:	2301      	movs	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	e008      	b.n	80079fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <xTaskGetSchedulerState+0x34>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079f0:	2302      	movs	r3, #2
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e001      	b.n	80079fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079fa:	687b      	ldr	r3, [r7, #4]
	}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b002      	add	sp, #8
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200008cc 	.word	0x200008cc
 8007a08:	200008e8 	.word	0x200008e8

08007a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d044      	beq.n	8007aac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a22:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <xTaskPriorityDisinherit+0xac>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <xTaskPriorityDisinherit+0x24>
 8007a2c:	b672      	cpsid	i
 8007a2e:	e7fe      	b.n	8007a2e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <xTaskPriorityDisinherit+0x30>
 8007a38:	b672      	cpsid	i
 8007a3a:	e7fe      	b.n	8007a3a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a40:	1e5a      	subs	r2, r3, #1
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d02c      	beq.n	8007aac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d128      	bne.n	8007aac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7fe fe84 	bl	800676c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	2207      	movs	r2, #7
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <xTaskPriorityDisinherit+0xb0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <xTaskPriorityDisinherit+0x80>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <xTaskPriorityDisinherit+0xb0>)
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	0013      	movs	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	189b      	adds	r3, r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <xTaskPriorityDisinherit+0xb4>)
 8007a9a:	189a      	adds	r2, r3, r2
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	0010      	movs	r0, r2
 8007aa4:	f7fe fe0a 	bl	80066bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aac:	68fb      	ldr	r3, [r7, #12]
	}
 8007aae:	0018      	movs	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b004      	add	sp, #16
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	200007c0 	.word	0x200007c0
 8007abc:	200008c8 	.word	0x200008c8
 8007ac0:	200007c4 	.word	0x200007c4

08007ac4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ad4:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	0018      	movs	r0, r3
 8007adc:	f7fe fe46 	bl	800676c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	d10b      	bne.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d008      	beq.n	8007afe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aec:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <prvAddCurrentTaskToDelayedList+0x98>)
 8007af4:	0011      	movs	r1, r2
 8007af6:	0018      	movs	r0, r3
 8007af8:	f7fe fde0 	bl	80066bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007afc:	e026      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	18d3      	adds	r3, r2, r3
 8007b04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d209      	bcs.n	8007b2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	0019      	movs	r1, r3
 8007b22:	0010      	movs	r0, r2
 8007b24:	f7fe fdec 	bl	8006700 <vListInsert>
}
 8007b28:	e010      	b.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3304      	adds	r3, #4
 8007b34:	0019      	movs	r1, r3
 8007b36:	0010      	movs	r0, r2
 8007b38:	f7fe fde2 	bl	8006700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d202      	bcs.n	8007b4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b46:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b004      	add	sp, #16
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200008c4 	.word	0x200008c4
 8007b58:	200007c0 	.word	0x200007c0
 8007b5c:	200008ac 	.word	0x200008ac
 8007b60:	2000087c 	.word	0x2000087c
 8007b64:	20000878 	.word	0x20000878
 8007b68:	200008e0 	.word	0x200008e0

08007b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b76:	f000 faa1 	bl	80080bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b7a:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <xTimerCreateTimerTask+0x44>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8007b82:	2380      	movs	r3, #128	; 0x80
 8007b84:	005a      	lsls	r2, r3, #1
 8007b86:	490b      	ldr	r1, [pc, #44]	; (8007bb4 <xTimerCreateTimerTask+0x48>)
 8007b88:	480b      	ldr	r0, [pc, #44]	; (8007bb8 <xTimerCreateTimerTask+0x4c>)
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <xTimerCreateTimerTask+0x50>)
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	2303      	movs	r3, #3
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	f7ff fa1d 	bl	8006fd2 <xTaskCreate>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <xTimerCreateTimerTask+0x3a>
 8007ba2:	b672      	cpsid	i
 8007ba4:	e7fe      	b.n	8007ba4 <xTimerCreateTimerTask+0x38>
	return xReturn;
 8007ba6:	687b      	ldr	r3, [r7, #4]
}
 8007ba8:	0018      	movs	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000091c 	.word	0x2000091c
 8007bb4:	0800d074 	.word	0x0800d074
 8007bb8:	08007d55 	.word	0x08007d55
 8007bbc:	20000920 	.word	0x20000920

08007bc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b089      	sub	sp, #36	; 0x24
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007bce:	2028      	movs	r0, #40	; 0x28
 8007bd0:	f000 fbf6 	bl	80083c0 <pvPortMalloc>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007bde:	683c      	ldr	r4, [r7, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	0023      	movs	r3, r4
 8007bf0:	f000 f805 	bl	8007bfe <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007bf4:	697b      	ldr	r3, [r7, #20]
	}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b007      	add	sp, #28
 8007bfc:	bd90      	pop	{r4, r7, pc}

08007bfe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <prvInitialiseNewTimer+0x18>
 8007c12:	b672      	cpsid	i
 8007c14:	e7fe      	b.n	8007c14 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d015      	beq.n	8007c48 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007c1c:	f000 fa4e 	bl	80080bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3304      	adds	r3, #4
 8007c42:	0018      	movs	r0, r3
 8007c44:	f7fe fd2f 	bl	80066a6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007c48:	46c0      	nop			; (mov r8, r8)
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b004      	add	sp, #16
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c50:	b590      	push	{r4, r7, lr}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <xTimerGenericCommand+0x1c>
 8007c68:	b672      	cpsid	i
 8007c6a:	e7fe      	b.n	8007c6a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <xTimerGenericCommand+0x90>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d030      	beq.n	8007cd6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c74:	2410      	movs	r4, #16
 8007c76:	193b      	adds	r3, r7, r4
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c7c:	193b      	adds	r3, r7, r4
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c82:	193b      	adds	r3, r7, r4
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	dc19      	bgt.n	8007cc2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c8e:	f7ff fea1 	bl	80079d4 <xTaskGetSchedulerState>
 8007c92:	0003      	movs	r3, r0
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d109      	bne.n	8007cac <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c98:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <xTimerGenericCommand+0x90>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	1939      	adds	r1, r7, r4
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f7fe fe33 	bl	800690c <xQueueGenericSend>
 8007ca6:	0003      	movs	r3, r0
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	e014      	b.n	8007cd6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <xTimerGenericCommand+0x90>)
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	18f9      	adds	r1, r7, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f7fe fe28 	bl	800690c <xQueueGenericSend>
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e009      	b.n	8007cd6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cc2:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <xTimerGenericCommand+0x90>)
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	2310      	movs	r3, #16
 8007cca:	18f9      	adds	r1, r7, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f7fe fee1 	bl	8006a94 <xQueueGenericSendFromISR>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
}
 8007cd8:	0018      	movs	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b009      	add	sp, #36	; 0x24
 8007cde:	bd90      	pop	{r4, r7, pc}
 8007ce0:	2000091c 	.word	0x2000091c

08007ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cee:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <prvProcessExpiredTimer+0x6c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7fe fd35 	bl	800676c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d119      	bne.n	8007d3e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	18d1      	adds	r1, r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f8b6 	bl	8007e88 <prvInsertTimerInActiveList>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d00e      	beq.n	8007d3e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f7ff ff90 	bl	8007c50 <xTimerGenericCommand>
 8007d30:	0003      	movs	r3, r0
 8007d32:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <prvProcessExpiredTimer+0x5a>
 8007d3a:	b672      	cpsid	i
 8007d3c:	e7fe      	b.n	8007d3c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	0010      	movs	r0, r2
 8007d46:	4798      	blx	r3
}
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b004      	add	sp, #16
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000914 	.word	0x20000914

08007d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	18fb      	adds	r3, r7, r3
 8007d60:	0018      	movs	r0, r3
 8007d62:	f000 f851 	bl	8007e08 <prvGetNextExpireTime>
 8007d66:	0003      	movs	r3, r0
 8007d68:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	0011      	movs	r1, r2
 8007d70:	0018      	movs	r0, r3
 8007d72:	f000 f803 	bl	8007d7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d76:	f000 f8c9 	bl	8007f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d7a:	e7ef      	b.n	8007d5c <prvTimerTask+0x8>

08007d7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d86:	f7ff faa7 	bl	80072d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f85a 	bl	8007e48 <prvSampleTimeNow>
 8007d94:	0003      	movs	r3, r0
 8007d96:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d129      	bne.n	8007df2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10c      	bne.n	8007dbe <prvProcessTimerOrBlockTask+0x42>
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d808      	bhi.n	8007dbe <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007dac:	f7ff faa0 	bl	80072f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	0011      	movs	r1, r2
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff ff94 	bl	8007ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dbc:	e01b      	b.n	8007df6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <prvProcessTimerOrBlockTask+0x84>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	425a      	negs	r2, r3
 8007dcc:	4153      	adcs	r3, r2
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <prvProcessTimerOrBlockTask+0x88>)
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	0019      	movs	r1, r3
 8007de0:	f7ff f8c4 	bl	8006f6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007de4:	f7ff fa84 	bl	80072f0 <xTaskResumeAll>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d104      	bne.n	8007df6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007dec:	f000 fa40 	bl	8008270 <vPortYield>
}
 8007df0:	e001      	b.n	8007df6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007df2:	f7ff fa7d 	bl	80072f0 <xTaskResumeAll>
}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	b004      	add	sp, #16
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	20000918 	.word	0x20000918
 8007e04:	2000091c 	.word	0x2000091c

08007e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <prvGetNextExpireTime+0x3c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	425a      	negs	r2, r3
 8007e18:	4153      	adcs	r3, r2
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	001a      	movs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2a:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <prvGetNextExpireTime+0x3c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e001      	b.n	8007e3a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b004      	add	sp, #16
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000914 	.word	0x20000914

08007e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e50:	f7ff fada 	bl	8007408 <xTaskGetTickCount>
 8007e54:	0003      	movs	r3, r0
 8007e56:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e58:	4b0a      	ldr	r3, [pc, #40]	; (8007e84 <prvSampleTimeNow+0x3c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d205      	bcs.n	8007e6e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007e62:	f000 f8d1 	bl	8008008 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e002      	b.n	8007e74 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e74:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <prvSampleTimeNow+0x3c>)
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b004      	add	sp, #16
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000924 	.word	0x20000924

08007e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d812      	bhi.n	8007ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e01b      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ec2:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <prvInsertTimerInActiveList+0x7c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	0019      	movs	r1, r3
 8007ecc:	0010      	movs	r0, r2
 8007ece:	f7fe fc17 	bl	8006700 <vListInsert>
 8007ed2:	e012      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d206      	bcs.n	8007eea <prvInsertTimerInActiveList+0x62>
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e007      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <prvInsertTimerInActiveList+0x80>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	0010      	movs	r0, r2
 8007ef6:	f7fe fc03 	bl	8006700 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007efa:	697b      	ldr	r3, [r7, #20]
}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b006      	add	sp, #24
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000918 	.word	0x20000918
 8007f08:	20000914 	.word	0x20000914

08007f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b08b      	sub	sp, #44	; 0x2c
 8007f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f12:	e065      	b.n	8007fe0 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f14:	2208      	movs	r2, #8
 8007f16:	18bb      	adds	r3, r7, r2
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	db60      	blt.n	8007fe0 <prvProcessReceivedCommands+0xd4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f1e:	18bb      	adds	r3, r7, r2
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fe fc1b 	bl	800676c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7ff ff85 	bl	8007e48 <prvSampleTimeNow>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8007f42:	2308      	movs	r3, #8
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b09      	cmp	r3, #9
 8007f4a:	d848      	bhi.n	8007fde <prvProcessReceivedCommands+0xd2>
 8007f4c:	009a      	lsls	r2, r3, #2
 8007f4e:	4b2c      	ldr	r3, [pc, #176]	; (8008000 <prvProcessReceivedCommands+0xf4>)
 8007f50:	18d3      	adds	r3, r2, r3
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f56:	2408      	movs	r4, #8
 8007f58:	193b      	adds	r3, r7, r4
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	18d1      	adds	r1, r2, r3
 8007f62:	193b      	adds	r3, r7, r4
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	69f8      	ldr	r0, [r7, #28]
 8007f6a:	f7ff ff8d 	bl	8007e88 <prvInsertTimerInActiveList>
 8007f6e:	1e03      	subs	r3, r0, #0
 8007f70:	d036      	beq.n	8007fe0 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	0010      	movs	r0, r2
 8007f7a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d12d      	bne.n	8007fe0 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f84:	193b      	adds	r3, r7, r4
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	18d2      	adds	r2, r2, r3
 8007f8e:	69f8      	ldr	r0, [r7, #28]
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	f7ff fe5a 	bl	8007c50 <xTimerGenericCommand>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d11c      	bne.n	8007fe0 <prvProcessReceivedCommands+0xd4>
 8007fa6:	b672      	cpsid	i
 8007fa8:	e7fe      	b.n	8007fa8 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007faa:	2308      	movs	r3, #8
 8007fac:	18fb      	adds	r3, r7, r3
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <prvProcessReceivedCommands+0xb4>
 8007fbc:	b672      	cpsid	i
 8007fbe:	e7fe      	b.n	8007fbe <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	18d1      	adds	r1, r2, r3
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	69f8      	ldr	r0, [r7, #28]
 8007fce:	f7ff ff5b 	bl	8007e88 <prvInsertTimerInActiveList>
					break;
 8007fd2:	e005      	b.n	8007fe0 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f000 fa98 	bl	800850c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fdc:	e000      	b.n	8007fe0 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
 8007fde:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fe0:	4b08      	ldr	r3, [pc, #32]	; (8008004 <prvProcessReceivedCommands+0xf8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	18b9      	adds	r1, r7, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	0018      	movs	r0, r3
 8007fec:	f7fe fdc3 	bl	8006b76 <xQueueReceive>
 8007ff0:	1e03      	subs	r3, r0, #0
 8007ff2:	d18f      	bne.n	8007f14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ff4:	46c0      	nop			; (mov r8, r8)
 8007ff6:	46c0      	nop			; (mov r8, r8)
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	b009      	add	sp, #36	; 0x24
 8007ffc:	bd90      	pop	{r4, r7, pc}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	0800d10c 	.word	0x0800d10c
 8008004:	2000091c 	.word	0x2000091c

08008008 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800800e:	e03e      	b.n	800808e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <prvSwitchTimerLists+0xac>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800801a:	4b26      	ldr	r3, [pc, #152]	; (80080b4 <prvSwitchTimerLists+0xac>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3304      	adds	r3, #4
 8008028:	0018      	movs	r0, r3
 800802a:	f7fe fb9f 	bl	800676c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	0010      	movs	r0, r2
 8008036:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d126      	bne.n	800808e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	18d3      	adds	r3, r2, r3
 8008048:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	429a      	cmp	r2, r3
 8008050:	d90e      	bls.n	8008070 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800805e:	4b15      	ldr	r3, [pc, #84]	; (80080b4 <prvSwitchTimerLists+0xac>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3304      	adds	r3, #4
 8008066:	0019      	movs	r1, r3
 8008068:	0010      	movs	r0, r2
 800806a:	f7fe fb49 	bl	8006700 <vListInsert>
 800806e:	e00e      	b.n	800808e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	2300      	movs	r3, #0
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2300      	movs	r3, #0
 800807a:	2100      	movs	r1, #0
 800807c:	f7ff fde8 	bl	8007c50 <xTimerGenericCommand>
 8008080:	0003      	movs	r3, r0
 8008082:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <prvSwitchTimerLists+0x86>
 800808a:	b672      	cpsid	i
 800808c:	e7fe      	b.n	800808c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <prvSwitchTimerLists+0xac>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1bb      	bne.n	8008010 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008098:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <prvSwitchTimerLists+0xac>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <prvSwitchTimerLists+0xb0>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <prvSwitchTimerLists+0xac>)
 80080a4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80080a6:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <prvSwitchTimerLists+0xb0>)
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	601a      	str	r2, [r3, #0]
}
 80080ac:	46c0      	nop			; (mov r8, r8)
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b006      	add	sp, #24
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000914 	.word	0x20000914
 80080b8:	20000918 	.word	0x20000918

080080bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080c0:	f000 f8e6 	bl	8008290 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080c4:	4b14      	ldr	r3, [pc, #80]	; (8008118 <prvCheckForValidListAndQueue+0x5c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d120      	bne.n	800810e <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80080cc:	4b13      	ldr	r3, [pc, #76]	; (800811c <prvCheckForValidListAndQueue+0x60>)
 80080ce:	0018      	movs	r0, r3
 80080d0:	f7fe facb 	bl	800666a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080d4:	4b12      	ldr	r3, [pc, #72]	; (8008120 <prvCheckForValidListAndQueue+0x64>)
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7fe fac7 	bl	800666a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <prvCheckForValidListAndQueue+0x68>)
 80080de:	4a0f      	ldr	r2, [pc, #60]	; (800811c <prvCheckForValidListAndQueue+0x60>)
 80080e0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080e2:	4b11      	ldr	r3, [pc, #68]	; (8008128 <prvCheckForValidListAndQueue+0x6c>)
 80080e4:	4a0e      	ldr	r2, [pc, #56]	; (8008120 <prvCheckForValidListAndQueue+0x64>)
 80080e6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80080e8:	2200      	movs	r2, #0
 80080ea:	210c      	movs	r1, #12
 80080ec:	2004      	movs	r0, #4
 80080ee:	f7fe fbb9 	bl	8006864 <xQueueGenericCreate>
 80080f2:	0002      	movs	r2, r0
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <prvCheckForValidListAndQueue+0x5c>)
 80080f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080f8:	4b07      	ldr	r3, [pc, #28]	; (8008118 <prvCheckForValidListAndQueue+0x5c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <prvCheckForValidListAndQueue+0x5c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a09      	ldr	r2, [pc, #36]	; (800812c <prvCheckForValidListAndQueue+0x70>)
 8008106:	0011      	movs	r1, r2
 8008108:	0018      	movs	r0, r3
 800810a:	f7fe ff07 	bl	8006f1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800810e:	f000 f8d1 	bl	80082b4 <vPortExitCritical>
}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	2000091c 	.word	0x2000091c
 800811c:	200008ec 	.word	0x200008ec
 8008120:	20000900 	.word	0x20000900
 8008124:	20000914 	.word	0x20000914
 8008128:	20000918 	.word	0x20000918
 800812c:	0800d07c 	.word	0x0800d07c

08008130 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <pvTimerGetTimerID+0x16>
 8008142:	b672      	cpsid	i
 8008144:	e7fe      	b.n	8008144 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8008146:	f000 f8a3 	bl	8008290 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8008150:	f000 f8b0 	bl	80082b4 <vPortExitCritical>

	return pvReturn;
 8008154:	68bb      	ldr	r3, [r7, #8]
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b004      	add	sp, #16
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3b04      	subs	r3, #4
 8008170:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2280      	movs	r2, #128	; 0x80
 8008176:	0452      	lsls	r2, r2, #17
 8008178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3b04      	subs	r3, #4
 800817e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3b04      	subs	r3, #4
 800818a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <pxPortInitialiseStack+0x50>)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3b14      	subs	r3, #20
 8008196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3b20      	subs	r3, #32
 80081a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	0018      	movs	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b004      	add	sp, #16
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	080081b5 	.word	0x080081b5

080081b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081be:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <prvTaskExitError+0x2c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	d001      	beq.n	80081ca <prvTaskExitError+0x16>
 80081c6:	b672      	cpsid	i
 80081c8:	e7fe      	b.n	80081c8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80081ca:	b672      	cpsid	i
	while( ulDummy == 0 )
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0fc      	beq.n	80081ce <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081d4:	46c0      	nop			; (mov r8, r8)
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b002      	add	sp, #8
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	20000014 	.word	0x20000014

080081e4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80081e8:	46c0      	nop			; (mov r8, r8)
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80081f0:	4a0b      	ldr	r2, [pc, #44]	; (8008220 <pxCurrentTCBConst2>)
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	3020      	adds	r0, #32
 80081f8:	f380 8809 	msr	PSP, r0
 80081fc:	2002      	movs	r0, #2
 80081fe:	f380 8814 	msr	CONTROL, r0
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008208:	46ae      	mov	lr, r5
 800820a:	bc08      	pop	{r3}
 800820c:	bc04      	pop	{r2}
 800820e:	b662      	cpsie	i
 8008210:	4718      	bx	r3
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	46c0      	nop			; (mov r8, r8)

08008220 <pxCurrentTCBConst2>:
 8008220:	200007c0 	.word	0x200007c0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008224:	46c0      	nop			; (mov r8, r8)
 8008226:	46c0      	nop			; (mov r8, r8)

08008228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800822c:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <xPortStartScheduler+0x40>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <xPortStartScheduler+0x40>)
 8008232:	21ff      	movs	r1, #255	; 0xff
 8008234:	0409      	lsls	r1, r1, #16
 8008236:	430a      	orrs	r2, r1
 8008238:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800823a:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <xPortStartScheduler+0x40>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <xPortStartScheduler+0x40>)
 8008240:	21ff      	movs	r1, #255	; 0xff
 8008242:	0609      	lsls	r1, r1, #24
 8008244:	430a      	orrs	r2, r1
 8008246:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008248:	f000 f898 	bl	800837c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <xPortStartScheduler+0x44>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008252:	f7ff ffcd 	bl	80081f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008256:	f7ff f999 	bl	800758c <vTaskSwitchContext>
	prvTaskExitError();
 800825a:	f7ff ffab 	bl	80081b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800825e:	2300      	movs	r3, #0
}
 8008260:	0018      	movs	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	46c0      	nop			; (mov r8, r8)
 8008268:	e000ed20 	.word	0xe000ed20
 800826c:	20000014 	.word	0x20000014

08008270 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <vPortYield+0x1c>)
 8008276:	2280      	movs	r2, #128	; 0x80
 8008278:	0552      	lsls	r2, r2, #21
 800827a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800827c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008280:	f3bf 8f6f 	isb	sy
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008294:	b672      	cpsid	i
    uxCriticalNesting++;
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <vPortEnterCritical+0x20>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <vPortEnterCritical+0x20>)
 800829e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80082a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80082a4:	f3bf 8f6f 	isb	sy
}
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	20000014 	.word	0x20000014

080082b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <vPortExitCritical+0x2c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <vPortExitCritical+0x10>
 80082c0:	b672      	cpsid	i
 80082c2:	e7fe      	b.n	80082c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80082c4:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <vPortExitCritical+0x2c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	1e5a      	subs	r2, r3, #1
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <vPortExitCritical+0x2c>)
 80082cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <vPortExitCritical+0x2c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d100      	bne.n	80082d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80082d6:	b662      	cpsie	i
    }
}
 80082d8:	46c0      	nop			; (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	20000014 	.word	0x20000014

080082e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80082e4:	f3ef 8010 	mrs	r0, PRIMASK
 80082e8:	b672      	cpsid	i
 80082ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80082ec:	46c0      	nop			; (mov r8, r8)
 80082ee:	0018      	movs	r0, r3

080082f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80082f0:	f380 8810 	msr	PRIMASK, r0
 80082f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80082f6:	46c0      	nop			; (mov r8, r8)
	...

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <pxCurrentTCBConst>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	3820      	subs	r0, #32
 800830a:	6010      	str	r0, [r2, #0]
 800830c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800830e:	4644      	mov	r4, r8
 8008310:	464d      	mov	r5, r9
 8008312:	4656      	mov	r6, sl
 8008314:	465f      	mov	r7, fp
 8008316:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008318:	b508      	push	{r3, lr}
 800831a:	b672      	cpsid	i
 800831c:	f7ff f936 	bl	800758c <vTaskSwitchContext>
 8008320:	b662      	cpsie	i
 8008322:	bc0c      	pop	{r2, r3}
 8008324:	6811      	ldr	r1, [r2, #0]
 8008326:	6808      	ldr	r0, [r1, #0]
 8008328:	3010      	adds	r0, #16
 800832a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800832c:	46a0      	mov	r8, r4
 800832e:	46a9      	mov	r9, r5
 8008330:	46b2      	mov	sl, r6
 8008332:	46bb      	mov	fp, r7
 8008334:	f380 8809 	msr	PSP, r0
 8008338:	3820      	subs	r0, #32
 800833a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800833c:	4718      	bx	r3
 800833e:	46c0      	nop			; (mov r8, r8)

08008340 <pxCurrentTCBConst>:
 8008340:	200007c0 	.word	0x200007c0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008344:	46c0      	nop			; (mov r8, r8)
 8008346:	46c0      	nop			; (mov r8, r8)

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800834e:	f7ff ffc9 	bl	80082e4 <ulSetInterruptMaskFromISR>
 8008352:	0003      	movs	r3, r0
 8008354:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008356:	f7ff f865 	bl	8007424 <xTaskIncrementTick>
 800835a:	1e03      	subs	r3, r0, #0
 800835c:	d003      	beq.n	8008366 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <SysTick_Handler+0x30>)
 8008360:	2280      	movs	r2, #128	; 0x80
 8008362:	0552      	lsls	r2, r2, #21
 8008364:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	0018      	movs	r0, r3
 800836a:	f7ff ffc1 	bl	80082f0 <vClearInterruptMaskFromISR>
}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b002      	add	sp, #8
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <prvSetupTimerInterrupt+0x34>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <prvSetupTimerInterrupt+0x38>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <prvSetupTimerInterrupt+0x3c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	22fa      	movs	r2, #250	; 0xfa
 8008392:	0091      	lsls	r1, r2, #2
 8008394:	0018      	movs	r0, r3
 8008396:	f7f7 feb7 	bl	8000108 <__udivsi3>
 800839a:	0003      	movs	r3, r0
 800839c:	001a      	movs	r2, r3
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <prvSetupTimerInterrupt+0x40>)
 80083a0:	3a01      	subs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <prvSetupTimerInterrupt+0x34>)
 80083a6:	2207      	movs	r2, #7
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	e000e010 	.word	0xe000e010
 80083b4:	e000e018 	.word	0xe000e018
 80083b8:	2000000c 	.word	0x2000000c
 80083bc:	e000e014 	.word	0xe000e014

080083c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80083cc:	f7fe ff84 	bl	80072d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083d0:	4b49      	ldr	r3, [pc, #292]	; (80084f8 <pvPortMalloc+0x138>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083d8:	f000 f8e0 	bl	800859c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083dc:	4b47      	ldr	r3, [pc, #284]	; (80084fc <pvPortMalloc+0x13c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	4013      	ands	r3, r2
 80083e4:	d000      	beq.n	80083e8 <pvPortMalloc+0x28>
 80083e6:	e079      	b.n	80084dc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d012      	beq.n	8008414 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80083ee:	2208      	movs	r2, #8
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	4013      	ands	r3, r2
 80083fc:	d00a      	beq.n	8008414 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2207      	movs	r2, #7
 8008402:	4393      	bics	r3, r2
 8008404:	3308      	adds	r3, #8
 8008406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2207      	movs	r2, #7
 800840c:	4013      	ands	r3, r2
 800840e:	d001      	beq.n	8008414 <pvPortMalloc+0x54>
 8008410:	b672      	cpsid	i
 8008412:	e7fe      	b.n	8008412 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d060      	beq.n	80084dc <pvPortMalloc+0x11c>
 800841a:	4b39      	ldr	r3, [pc, #228]	; (8008500 <pvPortMalloc+0x140>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d85b      	bhi.n	80084dc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008424:	4b37      	ldr	r3, [pc, #220]	; (8008504 <pvPortMalloc+0x144>)
 8008426:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008428:	4b36      	ldr	r3, [pc, #216]	; (8008504 <pvPortMalloc+0x144>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800842e:	e004      	b.n	800843a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d903      	bls.n	800844c <pvPortMalloc+0x8c>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f1      	bne.n	8008430 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800844c:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <pvPortMalloc+0x138>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	429a      	cmp	r2, r3
 8008454:	d042      	beq.n	80084dc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2208      	movs	r2, #8
 800845c:	189b      	adds	r3, r3, r2
 800845e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	2308      	movs	r3, #8
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	429a      	cmp	r2, r3
 8008476:	d916      	bls.n	80084a6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	18d3      	adds	r3, r2, r3
 800847e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2207      	movs	r2, #7
 8008484:	4013      	ands	r3, r2
 8008486:	d001      	beq.n	800848c <pvPortMalloc+0xcc>
 8008488:	b672      	cpsid	i
 800848a:	e7fe      	b.n	800848a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	0018      	movs	r0, r3
 80084a2:	f000 f8db 	bl	800865c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084a6:	4b16      	ldr	r3, [pc, #88]	; (8008500 <pvPortMalloc+0x140>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	4b13      	ldr	r3, [pc, #76]	; (8008500 <pvPortMalloc+0x140>)
 80084b2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084b4:	4b12      	ldr	r3, [pc, #72]	; (8008500 <pvPortMalloc+0x140>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	4b13      	ldr	r3, [pc, #76]	; (8008508 <pvPortMalloc+0x148>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d203      	bcs.n	80084c8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <pvPortMalloc+0x140>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <pvPortMalloc+0x148>)
 80084c6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <pvPortMalloc+0x13c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	431a      	orrs	r2, r3
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084dc:	f7fe ff08 	bl	80072f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2207      	movs	r2, #7
 80084e4:	4013      	ands	r3, r2
 80084e6:	d001      	beq.n	80084ec <pvPortMalloc+0x12c>
 80084e8:	b672      	cpsid	i
 80084ea:	e7fe      	b.n	80084ea <pvPortMalloc+0x12a>
	return pvReturn;
 80084ec:	68fb      	ldr	r3, [r7, #12]
}
 80084ee:	0018      	movs	r0, r3
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b006      	add	sp, #24
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	20004930 	.word	0x20004930
 80084fc:	2000493c 	.word	0x2000493c
 8008500:	20004934 	.word	0x20004934
 8008504:	20004928 	.word	0x20004928
 8008508:	20004938 	.word	0x20004938

0800850c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d035      	beq.n	800858a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800851e:	2308      	movs	r3, #8
 8008520:	425b      	negs	r3, r3
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	18d3      	adds	r3, r2, r3
 8008526:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4b18      	ldr	r3, [pc, #96]	; (8008594 <vPortFree+0x88>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4013      	ands	r3, r2
 8008536:	d101      	bne.n	800853c <vPortFree+0x30>
 8008538:	b672      	cpsid	i
 800853a:	e7fe      	b.n	800853a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <vPortFree+0x3c>
 8008544:	b672      	cpsid	i
 8008546:	e7fe      	b.n	8008546 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b11      	ldr	r3, [pc, #68]	; (8008594 <vPortFree+0x88>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4013      	ands	r3, r2
 8008552:	d01a      	beq.n	800858a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d116      	bne.n	800858a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <vPortFree+0x88>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	43db      	mvns	r3, r3
 8008566:	401a      	ands	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800856c:	f7fe feb4 	bl	80072d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	4b08      	ldr	r3, [pc, #32]	; (8008598 <vPortFree+0x8c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	18d2      	adds	r2, r2, r3
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <vPortFree+0x8c>)
 800857c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	0018      	movs	r0, r3
 8008582:	f000 f86b 	bl	800865c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008586:	f7fe feb3 	bl	80072f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	46bd      	mov	sp, r7
 800858e:	b004      	add	sp, #16
 8008590:	bd80      	pop	{r7, pc}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	2000493c 	.word	0x2000493c
 8008598:	20004934 	.word	0x20004934

0800859c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085a2:	2380      	movs	r3, #128	; 0x80
 80085a4:	01db      	lsls	r3, r3, #7
 80085a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085a8:	4b26      	ldr	r3, [pc, #152]	; (8008644 <prvHeapInit+0xa8>)
 80085aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2207      	movs	r2, #7
 80085b0:	4013      	ands	r3, r2
 80085b2:	d00c      	beq.n	80085ce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3307      	adds	r3, #7
 80085b8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2207      	movs	r2, #7
 80085be:	4393      	bics	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <prvHeapInit+0xa8>)
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085d2:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <prvHeapInit+0xac>)
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085d8:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <prvHeapInit+0xac>)
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	18d3      	adds	r3, r2, r3
 80085e4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085e6:	2208      	movs	r2, #8
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2207      	movs	r2, #7
 80085f2:	4393      	bics	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4b14      	ldr	r3, [pc, #80]	; (800864c <prvHeapInit+0xb0>)
 80085fa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80085fc:	4b13      	ldr	r3, [pc, #76]	; (800864c <prvHeapInit+0xb0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008604:	4b11      	ldr	r3, [pc, #68]	; (800864c <prvHeapInit+0xb0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800861a:	4b0c      	ldr	r3, [pc, #48]	; (800864c <prvHeapInit+0xb0>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <prvHeapInit+0xb4>)
 8008628:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <prvHeapInit+0xb8>)
 8008630:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008632:	4b09      	ldr	r3, [pc, #36]	; (8008658 <prvHeapInit+0xbc>)
 8008634:	2280      	movs	r2, #128	; 0x80
 8008636:	0612      	lsls	r2, r2, #24
 8008638:	601a      	str	r2, [r3, #0]
}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b004      	add	sp, #16
 8008640:	bd80      	pop	{r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	20000928 	.word	0x20000928
 8008648:	20004928 	.word	0x20004928
 800864c:	20004930 	.word	0x20004930
 8008650:	20004938 	.word	0x20004938
 8008654:	20004934 	.word	0x20004934
 8008658:	2000493c 	.word	0x2000493c

0800865c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008664:	4b27      	ldr	r3, [pc, #156]	; (8008704 <prvInsertBlockIntoFreeList+0xa8>)
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	e002      	b.n	8008670 <prvInsertBlockIntoFreeList+0x14>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d8f7      	bhi.n	800866a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d108      	bne.n	800869e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	18d2      	adds	r2, r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	18d2      	adds	r2, r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d118      	bne.n	80086e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <prvInsertBlockIntoFreeList+0xac>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d00d      	beq.n	80086da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	18d2      	adds	r2, r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	e008      	b.n	80086ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvInsertBlockIntoFreeList+0xac>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e003      	b.n	80086ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d002      	beq.n	80086fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b004      	add	sp, #16
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	20004928 	.word	0x20004928
 8008708:	20004930 	.word	0x20004930

0800870c <Module_Init>:
//}

/* --- Modbus module initialization.
*/
void Module_Init(void)
{
 800870c:	b590      	push	{r4, r7, lr}
 800870e:	b089      	sub	sp, #36	; 0x24
 8008710:	af02      	add	r7, sp, #8
	
	/* System Clock Configuration */
	SystemClock_Config();
 8008712:	f7f8 fba9 	bl	8000e68 <SystemClock_Config>

/* Peripherals Init */
	MX_GPIO_Init();
 8008716:	f7f8 fb23 	bl	8000d60 <MX_GPIO_Init>
	MX_DMA_Init();
 800871a:	f7f7 fdc3 	bl	80002a4 <MX_DMA_Init>
	MX_CRC_Init();
 800871e:	f7f7 fd7f 	bl	8000220 <MX_CRC_Init>

	/* Array ports */
	MX_USART1_UART_Init();
 8008722:	f7f8 fd8d 	bl	8001240 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8008726:	f7f8 fdc1 	bl	80012ac <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800872a:	f7f8 fdf3 	bl	8001314 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800872e:	f7f8 fe25 	bl	800137c <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 8008732:	f7f8 fe57 	bl	80013e4 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 8008736:	f7f8 fe89 	bl	800144c <MX_USART6_UART_Init>
	
	/* RS485 port */
//	RS485_DE_RE_Init();
	RS485_RECEIVER_EN();
 800873a:	2380      	movs	r3, #128	; 0x80
 800873c:	0159      	lsls	r1, r3, #5
 800873e:	2390      	movs	r3, #144	; 0x90
 8008740:	05db      	lsls	r3, r3, #23
 8008742:	2200      	movs	r2, #0
 8008744:	0018      	movs	r0, r3
 8008746:	f7fa fee5 	bl	8003514 <HAL_GPIO_WritePin>
	
	/* Definition and creation of software timers */
	zTimer = xTimerCreate( "RTC_Timer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_RTC_TIMER, RTC_HandleTimer );	
 800874a:	484a      	ldr	r0, [pc, #296]	; (8008874 <Module_Init+0x168>)
 800874c:	4b4a      	ldr	r3, [pc, #296]	; (8008878 <Module_Init+0x16c>)
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	23fe      	movs	r3, #254	; 0xfe
 8008752:	2201      	movs	r2, #1
 8008754:	2101      	movs	r1, #1
 8008756:	f7ff fa33 	bl	8007bc0 <xTimerCreate>
 800875a:	0002      	movs	r2, r0
 800875c:	4b47      	ldr	r3, [pc, #284]	; (800887c <Module_Init+0x170>)
 800875e:	601a      	str	r2, [r3, #0]
	xTimerStart( zTimer, portMAX_DELAY );
 8008760:	4b46      	ldr	r3, [pc, #280]	; (800887c <Module_Init+0x170>)
 8008762:	681c      	ldr	r4, [r3, #0]
 8008764:	f7fe fe50 	bl	8007408 <xTaskGetTickCount>
 8008768:	0002      	movs	r2, r0
 800876a:	2301      	movs	r3, #1
 800876c:	425b      	negs	r3, r3
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	2101      	movs	r1, #1
 8008774:	0020      	movs	r0, r4
 8008776:	f7ff fa6b 	bl	8007c50 <xTimerGenericCommand>
	
	sTimer = xTimerCreate( "TimeOut_Timer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_TMOUT_TIMER, TMOUT_HandleTimer );	
 800877a:	4841      	ldr	r0, [pc, #260]	; (8008880 <Module_Init+0x174>)
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <Module_Init+0x178>)
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	23fd      	movs	r3, #253	; 0xfd
 8008782:	2201      	movs	r2, #1
 8008784:	2101      	movs	r1, #1
 8008786:	f7ff fa1b 	bl	8007bc0 <xTimerCreate>
 800878a:	0002      	movs	r2, r0
 800878c:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <Module_Init+0x17c>)
 800878e:	601a      	str	r2, [r3, #0]
	xTimerStart( sTimer, portMAX_DELAY );
 8008790:	4b3d      	ldr	r3, [pc, #244]	; (8008888 <Module_Init+0x17c>)
 8008792:	681c      	ldr	r4, [r3, #0]
 8008794:	f7fe fe38 	bl	8007408 <xTaskGetTickCount>
 8008798:	0002      	movs	r2, r0
 800879a:	2301      	movs	r3, #1
 800879c:	425b      	negs	r3, r3
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	2101      	movs	r1, #1
 80087a4:	0020      	movs	r0, r4
 80087a6:	f7ff fa53 	bl	8007c50 <xTimerGenericCommand>

	osThreadDef(defaultTask, MessagingTask, osPriorityNormal, 0, 8*128);
 80087aa:	1d3b      	adds	r3, r7, #4
 80087ac:	4a37      	ldr	r2, [pc, #220]	; (800888c <Module_Init+0x180>)
 80087ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80087b0:	c313      	stmia	r3!, {r0, r1, r4}
 80087b2:	ca03      	ldmia	r2!, {r0, r1}
 80087b4:	c303      	stmia	r3!, {r0, r1}
	MessagingTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	2100      	movs	r1, #0
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7fd ff2d 	bl	800661a <osThreadCreate>
 80087c0:	0002      	movs	r2, r0
 80087c2:	4b33      	ldr	r3, [pc, #204]	; (8008890 <Module_Init+0x184>)
 80087c4:	601a      	str	r2, [r3, #0]
	
	/* Initializing DMA recieve */ 
	HAL_UART_Receive_DMA(P1uart, &RcvMessage[0][0], RcvMessageMaxSize);
 80087c6:	4933      	ldr	r1, [pc, #204]	; (8008894 <Module_Init+0x188>)
 80087c8:	4b33      	ldr	r3, [pc, #204]	; (8008898 <Module_Init+0x18c>)
 80087ca:	2214      	movs	r2, #20
 80087cc:	0018      	movs	r0, r3
 80087ce:	f7fc f981 	bl	8004ad4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P2uart, &RcvMessage[1][0], RcvMessageMaxSize);
 80087d2:	4932      	ldr	r1, [pc, #200]	; (800889c <Module_Init+0x190>)
 80087d4:	4b32      	ldr	r3, [pc, #200]	; (80088a0 <Module_Init+0x194>)
 80087d6:	2214      	movs	r2, #20
 80087d8:	0018      	movs	r0, r3
 80087da:	f7fc f97b 	bl	8004ad4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P3uart, &RcvMessage[2][0], RcvMessageMaxSize);
 80087de:	4931      	ldr	r1, [pc, #196]	; (80088a4 <Module_Init+0x198>)
 80087e0:	4b31      	ldr	r3, [pc, #196]	; (80088a8 <Module_Init+0x19c>)
 80087e2:	2214      	movs	r2, #20
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fc f975 	bl	8004ad4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P4uart, &RcvMessage[3][0], RcvMessageMaxSize);
 80087ea:	4930      	ldr	r1, [pc, #192]	; (80088ac <Module_Init+0x1a0>)
 80087ec:	4b30      	ldr	r3, [pc, #192]	; (80088b0 <Module_Init+0x1a4>)
 80087ee:	2214      	movs	r2, #20
 80087f0:	0018      	movs	r0, r3
 80087f2:	f7fc f96f 	bl	8004ad4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P5uart, &RcvMessage[4][0], RcvMessageMaxSize);
 80087f6:	492f      	ldr	r1, [pc, #188]	; (80088b4 <Module_Init+0x1a8>)
 80087f8:	4b2f      	ldr	r3, [pc, #188]	; (80088b8 <Module_Init+0x1ac>)
 80087fa:	2214      	movs	r2, #20
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7fc f969 	bl	8004ad4 <HAL_UART_Receive_DMA>
	
	SPZMeterHandle=&SPZMeter;
 8008802:	4b2e      	ldr	r3, [pc, #184]	; (80088bc <Module_Init+0x1b0>)
 8008804:	4a2e      	ldr	r2, [pc, #184]	; (80088c0 <Module_Init+0x1b4>)
 8008806:	601a      	str	r2, [r3, #0]
	strcpy( SPZMeter.Model, "SPZ");
 8008808:	4b2d      	ldr	r3, [pc, #180]	; (80088c0 <Module_Init+0x1b4>)
 800880a:	4a2e      	ldr	r2, [pc, #184]	; (80088c4 <Module_Init+0x1b8>)
 800880c:	601a      	str	r2, [r3, #0]
	SPZMeter.SerialNumber=9188326;
 800880e:	4b2c      	ldr	r3, [pc, #176]	; (80088c0 <Module_Init+0x1b4>)
 8008810:	4a2d      	ldr	r2, [pc, #180]	; (80088c8 <Module_Init+0x1bc>)
 8008812:	60da      	str	r2, [r3, #12]
	SPZMeter.ID=1;
 8008814:	4b2a      	ldr	r3, [pc, #168]	; (80088c0 <Module_Init+0x1b4>)
 8008816:	2201      	movs	r2, #1
 8008818:	741a      	strb	r2, [r3, #16]
	SPZMeter.NoReg=80;
 800881a:	4b29      	ldr	r3, [pc, #164]	; (80088c0 <Module_Init+0x1b4>)
 800881c:	2250      	movs	r2, #80	; 0x50
 800881e:	825a      	strh	r2, [r3, #18]
	SPZMeter.FstRegAddress=0x00;
 8008820:	4b27      	ldr	r3, [pc, #156]	; (80088c0 <Module_Init+0x1b4>)
 8008822:	2200      	movs	r2, #0
 8008824:	829a      	strh	r2, [r3, #20]
	SPZMeter.LastRegAddress=0x4F;
 8008826:	4b26      	ldr	r3, [pc, #152]	; (80088c0 <Module_Init+0x1b4>)
 8008828:	224f      	movs	r2, #79	; 0x4f
 800882a:	82da      	strh	r2, [r3, #22]
	SPZMeter.Status=0;
 800882c:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <Module_Init+0x1b4>)
 800882e:	2200      	movs	r2, #0
 8008830:	745a      	strb	r2, [r3, #17]
	
	DeltaMeterHandle=&DeltaMeter;
 8008832:	4b26      	ldr	r3, [pc, #152]	; (80088cc <Module_Init+0x1c0>)
 8008834:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <Module_Init+0x1c4>)
 8008836:	601a      	str	r2, [r3, #0]
	strcpy( DeltaMeter.Model, "Delta");
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <Module_Init+0x1c4>)
 800883a:	4a26      	ldr	r2, [pc, #152]	; (80088d4 <Module_Init+0x1c8>)
 800883c:	6811      	ldr	r1, [r2, #0]
 800883e:	6019      	str	r1, [r3, #0]
 8008840:	8892      	ldrh	r2, [r2, #4]
 8008842:	809a      	strh	r2, [r3, #4]
	DeltaMeter.SerialNumber=9188326;
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <Module_Init+0x1c4>)
 8008846:	4a20      	ldr	r2, [pc, #128]	; (80088c8 <Module_Init+0x1bc>)
 8008848:	60da      	str	r2, [r3, #12]
	DeltaMeter.ID=2;
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <Module_Init+0x1c4>)
 800884c:	2202      	movs	r2, #2
 800884e:	741a      	strb	r2, [r3, #16]
	DeltaMeter.NoReg=140;
 8008850:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <Module_Init+0x1c4>)
 8008852:	228c      	movs	r2, #140	; 0x8c
 8008854:	825a      	strh	r2, [r3, #18]
	DeltaMeter.FstRegAddress=0x100;
 8008856:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <Module_Init+0x1c4>)
 8008858:	2280      	movs	r2, #128	; 0x80
 800885a:	0052      	lsls	r2, r2, #1
 800885c:	829a      	strh	r2, [r3, #20]
	DeltaMeter.LastRegAddress=0x18B;
 800885e:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <Module_Init+0x1c4>)
 8008860:	228c      	movs	r2, #140	; 0x8c
 8008862:	32ff      	adds	r2, #255	; 0xff
 8008864:	82da      	strh	r2, [r3, #22]
	DeltaMeter.Status=0;
 8008866:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <Module_Init+0x1c4>)
 8008868:	2200      	movs	r2, #0
 800886a:	745a      	strb	r2, [r3, #17]
	
}
 800886c:	46c0      	nop			; (mov r8, r8)
 800886e:	46bd      	mov	sp, r7
 8008870:	b007      	add	sp, #28
 8008872:	bd90      	pop	{r4, r7, pc}
 8008874:	0800d084 	.word	0x0800d084
 8008878:	08008f29 	.word	0x08008f29
 800887c:	20004950 	.word	0x20004950
 8008880:	0800d090 	.word	0x0800d090
 8008884:	08008ed1 	.word	0x08008ed1
 8008888:	20004954 	.word	0x20004954
 800888c:	0800d0b4 	.word	0x0800d0b4
 8008890:	20004958 	.word	0x20004958
 8008894:	20004994 	.word	0x20004994
 8008898:	20000290 	.word	0x20000290
 800889c:	200049a8 	.word	0x200049a8
 80088a0:	20000180 	.word	0x20000180
 80088a4:	200049bc 	.word	0x200049bc
 80088a8:	200003a0 	.word	0x200003a0
 80088ac:	200049d0 	.word	0x200049d0
 80088b0:	20000208 	.word	0x20000208
 80088b4:	200049e4 	.word	0x200049e4
 80088b8:	20000318 	.word	0x20000318
 80088bc:	20004974 	.word	0x20004974
 80088c0:	2000495c 	.word	0x2000495c
 80088c4:	005a5053 	.word	0x005a5053
 80088c8:	008c33e6 	.word	0x008c33e6
 80088cc:	20004990 	.word	0x20004990
 80088d0:	20004978 	.word	0x20004978
 80088d4:	0800d0a0 	.word	0x0800d0a0

080088d8 <GetPort>:
/*-----------------------------------------------------------*/

/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART4)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a16      	ldr	r2, [pc, #88]	; (8008940 <GetPort+0x68>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d101      	bne.n	80088ee <GetPort+0x16>
			return 1;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e023      	b.n	8008936 <GetPort+0x5e>
	else if (huart->Instance == USART2)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a14      	ldr	r2, [pc, #80]	; (8008944 <GetPort+0x6c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d101      	bne.n	80088fc <GetPort+0x24>
			return 2;
 80088f8:	2302      	movs	r3, #2
 80088fa:	e01c      	b.n	8008936 <GetPort+0x5e>
	else if (huart->Instance == USART6)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a11      	ldr	r2, [pc, #68]	; (8008948 <GetPort+0x70>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d101      	bne.n	800890a <GetPort+0x32>
			return 3;
 8008906:	2303      	movs	r3, #3
 8008908:	e015      	b.n	8008936 <GetPort+0x5e>
	else if (huart->Instance == USART3)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a0f      	ldr	r2, [pc, #60]	; (800894c <GetPort+0x74>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d101      	bne.n	8008918 <GetPort+0x40>
			return 4;
 8008914:	2304      	movs	r3, #4
 8008916:	e00e      	b.n	8008936 <GetPort+0x5e>
	else if (huart->Instance == USART5)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0c      	ldr	r2, [pc, #48]	; (8008950 <GetPort+0x78>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d101      	bne.n	8008926 <GetPort+0x4e>
			return 5;
 8008922:	2305      	movs	r3, #5
 8008924:	e007      	b.n	8008936 <GetPort+0x5e>
	else if (huart->Instance == USART1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a0a      	ldr	r2, [pc, #40]	; (8008954 <GetPort+0x7c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d101      	bne.n	8008934 <GetPort+0x5c>
			return 6;
 8008930:	2306      	movs	r3, #6
 8008932:	e000      	b.n	8008936 <GetPort+0x5e>
		
	return 0;
 8008934:	2300      	movs	r3, #0
}
 8008936:	0018      	movs	r0, r3
 8008938:	46bd      	mov	sp, r7
 800893a:	b002      	add	sp, #8
 800893c:	bd80      	pop	{r7, pc}
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	40004c00 	.word	0x40004c00
 8008944:	40004400 	.word	0x40004400
 8008948:	40011400 	.word	0x40011400
 800894c:	40004800 	.word	0x40004800
 8008950:	40005000 	.word	0x40005000
 8008954:	40013800 	.word	0x40013800

08008958 <GetUART>:
/*-----------------------------------------------------------*/

/* --- Get the UART handle for a given port. 
*/
UART_HandleTypeDef* GetUART(uint8_t Port)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	0002      	movs	r2, r0
 8008960:	1dfb      	adds	r3, r7, #7
 8008962:	701a      	strb	r2, [r3, #0]
	if (1 == Port)
 8008964:	1dfb      	adds	r3, r7, #7
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <GetUART+0x18>
			return &huart4; 
 800896c:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <GetUART+0x60>)
 800896e:	e01e      	b.n	80089ae <GetUART+0x56>
	else if (2 == Port)
 8008970:	1dfb      	adds	r3, r7, #7
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d101      	bne.n	800897c <GetUART+0x24>
			return &huart2;
 8008978:	4b10      	ldr	r3, [pc, #64]	; (80089bc <GetUART+0x64>)
 800897a:	e018      	b.n	80089ae <GetUART+0x56>
	else if (3 == Port)
 800897c:	1dfb      	adds	r3, r7, #7
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d101      	bne.n	8008988 <GetUART+0x30>
			return &huart6; 
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <GetUART+0x68>)
 8008986:	e012      	b.n	80089ae <GetUART+0x56>
	else if (4 == Port)
 8008988:	1dfb      	adds	r3, r7, #7
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b04      	cmp	r3, #4
 800898e:	d101      	bne.n	8008994 <GetUART+0x3c>
			return &huart3;
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <GetUART+0x6c>)
 8008992:	e00c      	b.n	80089ae <GetUART+0x56>
	else if (5 == Port)
 8008994:	1dfb      	adds	r3, r7, #7
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b05      	cmp	r3, #5
 800899a:	d101      	bne.n	80089a0 <GetUART+0x48>
			return &huart5;
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <GetUART+0x70>)
 800899e:	e006      	b.n	80089ae <GetUART+0x56>
	else if (6 == Port)
 80089a0:	1dfb      	adds	r3, r7, #7
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	d101      	bne.n	80089ac <GetUART+0x54>
			return &huart1;
 80089a8:	4b08      	ldr	r3, [pc, #32]	; (80089cc <GetUART+0x74>)
 80089aa:	e000      	b.n	80089ae <GetUART+0x56>
		
	return NULL;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	0018      	movs	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b002      	add	sp, #8
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	20000290 	.word	0x20000290
 80089bc:	20000180 	.word	0x20000180
 80089c0:	200003a0 	.word	0x200003a0
 80089c4:	20000208 	.word	0x20000208
 80089c8:	20000318 	.word	0x20000318
 80089cc:	200000f8 	.word	0x200000f8

080089d0 <MessagingTask>:
/*-----------------------------------------------------------*/

/* --- setup the Modbus mode as RTU
*/
void MessagingTask(void const * argument)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (1==rxMessaging.Flag)
 80089d8:	4b08      	ldr	r3, [pc, #32]	; (80089fc <MessagingTask+0x2c>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10a      	bne.n	80089f6 <MessagingTask+0x26>
		{
			MasterMessagingParser(rxMessaging.Port);
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <MessagingTask+0x2c>)
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	0018      	movs	r0, r3
 80089e6:	f000 faf1 	bl	8008fcc <MasterMessagingParser>
			rxMessaging.Flag=0;
 80089ea:	4b04      	ldr	r3, [pc, #16]	; (80089fc <MessagingTask+0x2c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 80089f0:	f7ff fc3e 	bl	8008270 <vPortYield>
 80089f4:	e7f0      	b.n	80089d8 <MessagingTask+0x8>
		}
		else
			taskYIELD();
 80089f6:	f7ff fc3b 	bl	8008270 <vPortYield>
		if (1==rxMessaging.Flag)
 80089fa:	e7ed      	b.n	80089d8 <MessagingTask+0x8>
 80089fc:	2000494c 	.word	0x2000494c

08008a00 <SetupModbusRTU>:
   ----------------------------------------------------------------------- */

/* --- setup the Modbus mode as RTU
*/
Module_Status SetupModbusRTU(uint32_t BaudRate, uint32_t ParityBit)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	Module_Status Status;
	ULONG Pbit = (ULONG) ParityBit;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	613b      	str	r3, [r7, #16]
	ULONG ulBaudRate = (ULONG) BaudRate;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60fb      	str	r3, [r7, #12]
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008a12:	200a      	movs	r0, #10
 8008a14:	f7f9 fbfb 	bl	800220e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008a18:	200b      	movs	r0, #11
 8008a1a:	f7f9 fbf8 	bl	800220e <HAL_NVIC_DisableIRQ>
	/* Initialize Modbus port as RTU */
	if ( MB_ENOERR != eMBMSerialInit( &xMBMaster,  MB_RTU, 1, ulBaudRate, Pbit ) ) {
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	480f      	ldr	r0, [pc, #60]	; (8008a64 <SetupModbusRTU+0x64>)
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	0013      	movs	r3, r2
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f001 fa59 	bl	8009ee4 <eMBMSerialInit>
 8008a32:	1e03      	subs	r3, r0, #0
 8008a34:	d004      	beq.n	8008a40 <SetupModbusRTU+0x40>
		Status = Modbus_ERROR;}
 8008a36:	2317      	movs	r3, #23
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	e003      	b.n	8008a48 <SetupModbusRTU+0x48>
	else 	
		Status = Modbus_OK;
 8008a40:	2317      	movs	r3, #23
 8008a42:	18fb      	adds	r3, r7, r3
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008a48:	200b      	movs	r0, #11
 8008a4a:	f7f9 fbd0 	bl	80021ee <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008a4e:	200a      	movs	r0, #10
 8008a50:	f7f9 fbcd 	bl	80021ee <HAL_NVIC_EnableIRQ>
 return Status;	
 8008a54:	2317      	movs	r3, #23
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	781b      	ldrb	r3, [r3, #0]
}
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	b006      	add	sp, #24
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	20004940 	.word	0x20004940

08008a68 <ReadModbusRegister>:
/*-----------------------------------------------------------*/

/* --- read data from a slave on Modbus port FC: 0x03
*/
Module_Status ReadModbusRegister(uint8_t SlaveAdd, uint32_t RegAdd, uint8_t NofReg, unsigned short * DataBuffer )
{
 8008a68:	b5b0      	push	{r4, r5, r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	0011      	movs	r1, r2
 8008a72:	607b      	str	r3, [r7, #4]
 8008a74:	250f      	movs	r5, #15
 8008a76:	197b      	adds	r3, r7, r5
 8008a78:	1c02      	adds	r2, r0, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	240e      	movs	r4, #14
 8008a7e:	193b      	adds	r3, r7, r4
 8008a80:	1c0a      	adds	r2, r1, #0
 8008a82:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	unsigned short *Buffer=DataBuffer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	613b      	str	r3, [r7, #16]

	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008a88:	200a      	movs	r0, #10
 8008a8a:	f7f9 fbc0 	bl	800220e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008a8e:	200b      	movs	r0, #11
 8008a90:	f7f9 fbbd 	bl	800220e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMReadHoldingRegisters(xMBMaster, SlaveAdd, RegAdd, NofReg, Buffer)) {	
 8008a94:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <ReadModbusRegister+0x78>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	193b      	adds	r3, r7, r4
 8008a9e:	781c      	ldrb	r4, [r3, #0]
 8008aa0:	197b      	adds	r3, r7, r5
 8008aa2:	7819      	ldrb	r1, [r3, #0]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	0023      	movs	r3, r4
 8008aaa:	f002 fd68 	bl	800b57e <eMBMReadHoldingRegisters>
 8008aae:	1e03      	subs	r3, r0, #0
 8008ab0:	d004      	beq.n	8008abc <ReadModbusRegister+0x54>
		Status = Modbus_ERROR;}
 8008ab2:	2317      	movs	r3, #23
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	22ff      	movs	r2, #255	; 0xff
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e003      	b.n	8008ac4 <ReadModbusRegister+0x5c>
	else {
		Status = Modbus_OK;
 8008abc:	2317      	movs	r3, #23
 8008abe:	18fb      	adds	r3, r7, r3
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
	}
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008ac4:	200b      	movs	r0, #11
 8008ac6:	f7f9 fb92 	bl	80021ee <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008aca:	200a      	movs	r0, #10
 8008acc:	f7f9 fb8f 	bl	80021ee <HAL_NVIC_EnableIRQ>

	return Status;
 8008ad0:	2317      	movs	r3, #23
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	781b      	ldrb	r3, [r3, #0]
}
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	b006      	add	sp, #24
 8008adc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	20004940 	.word	0x20004940

08008ae4 <WriteModbusRegister>:
/*-----------------------------------------------------------*/

/* --- write data to a slave on Modbus port FC: 0x06
*/
Module_Status WriteModbusRegister(uint8_t SlaveAdd, uint32_t RegAdd, uint32_t Data)
{
 8008ae4:	b5b0      	push	{r4, r5, r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	250f      	movs	r5, #15
 8008af0:	197b      	adds	r3, r7, r5
 8008af2:	1c02      	adds	r2, r0, #0
 8008af4:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008af6:	200a      	movs	r0, #10
 8008af8:	f7f9 fb89 	bl	800220e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008afc:	200b      	movs	r0, #11
 8008afe:	f7f9 fb86 	bl	800220e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMWriteSingleRegister(xMBMaster, SlaveAdd, RegAdd, Data)) {	
 8008b02:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <WriteModbusRegister+0x64>)
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	b29c      	uxth	r4, r3
 8008b0e:	197b      	adds	r3, r7, r5
 8008b10:	7819      	ldrb	r1, [r3, #0]
 8008b12:	0023      	movs	r3, r4
 8008b14:	f002 fd01 	bl	800b51a <eMBMWriteSingleRegister>
 8008b18:	1e03      	subs	r3, r0, #0
 8008b1a:	d004      	beq.n	8008b26 <WriteModbusRegister+0x42>
		Status = Modbus_ERROR;}
 8008b1c:	2317      	movs	r3, #23
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	22ff      	movs	r2, #255	; 0xff
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e003      	b.n	8008b2e <WriteModbusRegister+0x4a>
	else {
		Status = Modbus_OK;
 8008b26:	2317      	movs	r3, #23
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
	}
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008b2e:	200b      	movs	r0, #11
 8008b30:	f7f9 fb5d 	bl	80021ee <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008b34:	200a      	movs	r0, #10
 8008b36:	f7f9 fb5a 	bl	80021ee <HAL_NVIC_EnableIRQ>
	return Status;
 8008b3a:	2317      	movs	r3, #23
 8008b3c:	18fb      	adds	r3, r7, r3
 8008b3e:	781b      	ldrb	r3, [r3, #0]
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b006      	add	sp, #24
 8008b46:	bdb0      	pop	{r4, r5, r7, pc}
 8008b48:	20004940 	.word	0x20004940

08008b4c <WriteModbusMultiRegisters>:
/*-----------------------------------------------------------*/

/* --- write N data bytes to a slave on Modbus port FC: 0x10
*/
Module_Status WriteModbusMultiRegisters(uint8_t SlaveAdd, uint32_t RegAdd, uint8_t NofReg, uint16_t *Data)
{
 8008b4c:	b5b0      	push	{r4, r5, r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	0011      	movs	r1, r2
 8008b56:	607b      	str	r3, [r7, #4]
 8008b58:	250f      	movs	r5, #15
 8008b5a:	197b      	adds	r3, r7, r5
 8008b5c:	1c02      	adds	r2, r0, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	240e      	movs	r4, #14
 8008b62:	193b      	adds	r3, r7, r4
 8008b64:	1c0a      	adds	r2, r1, #0
 8008b66:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	USHORT *InBuffer = (USHORT *)Data;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	613b      	str	r3, [r7, #16]
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008b6c:	200a      	movs	r0, #10
 8008b6e:	f7f9 fb4e 	bl	800220e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008b72:	200b      	movs	r0, #11
 8008b74:	f7f9 fb4b 	bl	800220e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMWriteMultipleRegisters(xMBMaster, SlaveAdd, RegAdd, NofReg, InBuffer)) {
 8008b78:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <WriteModbusMultiRegisters+0x78>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	193b      	adds	r3, r7, r4
 8008b82:	781c      	ldrb	r4, [r3, #0]
 8008b84:	197b      	adds	r3, r7, r5
 8008b86:	7819      	ldrb	r1, [r3, #0]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	0023      	movs	r3, r4
 8008b8e:	f002 fd26 	bl	800b5de <eMBMWriteMultipleRegisters>
 8008b92:	1e03      	subs	r3, r0, #0
 8008b94:	d004      	beq.n	8008ba0 <WriteModbusMultiRegisters+0x54>
		Status = Modbus_ERROR;}
 8008b96:	2317      	movs	r3, #23
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	22ff      	movs	r2, #255	; 0xff
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	e003      	b.n	8008ba8 <WriteModbusMultiRegisters+0x5c>
	else {
		Status = Modbus_OK;
 8008ba0:	2317      	movs	r3, #23
 8008ba2:	18fb      	adds	r3, r7, r3
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
	}
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008ba8:	200b      	movs	r0, #11
 8008baa:	f7f9 fb20 	bl	80021ee <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008bae:	200a      	movs	r0, #10
 8008bb0:	f7f9 fb1d 	bl	80021ee <HAL_NVIC_EnableIRQ>
	return Status;
 8008bb4:	2317      	movs	r3, #23
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781b      	ldrb	r3, [r3, #0]
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b006      	add	sp, #24
 8008bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	20004940 	.word	0x20004940

08008bc8 <SetTimeOut>:
/*-----------------------------------------------------------*/

/* --- set timeout to a slave on Modbus port
*/
Module_Status SetTimeOut(uint16_t MiliSeconds)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	0002      	movs	r2, r0
 8008bd0:	1dbb      	adds	r3, r7, #6
 8008bd2:	801a      	strh	r2, [r3, #0]
	Module_Status Status;
	USHORT timeout = (USHORT) MiliSeconds;
 8008bd4:	240c      	movs	r4, #12
 8008bd6:	193b      	adds	r3, r7, r4
 8008bd8:	1dba      	adds	r2, r7, #6
 8008bda:	8812      	ldrh	r2, [r2, #0]
 8008bdc:	801a      	strh	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008bde:	200a      	movs	r0, #10
 8008be0:	f7f9 fb15 	bl	800220e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008be4:	200b      	movs	r0, #11
 8008be6:	f7f9 fb12 	bl	800220e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMSetSlaveTimeout( xMBMaster, timeout )) {
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <SetTimeOut+0x64>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	193b      	adds	r3, r7, r4
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	0019      	movs	r1, r3
 8008bf4:	0010      	movs	r0, r2
 8008bf6:	f001 f893 	bl	8009d20 <eMBMSetSlaveTimeout>
 8008bfa:	1e03      	subs	r3, r0, #0
 8008bfc:	d004      	beq.n	8008c08 <SetTimeOut+0x40>
		Status = Modbus_ERROR;}
 8008bfe:	230f      	movs	r3, #15
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	22ff      	movs	r2, #255	; 0xff
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e003      	b.n	8008c10 <SetTimeOut+0x48>
	else
		Status = Modbus_OK;
 8008c08:	230f      	movs	r3, #15
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8008c10:	200b      	movs	r0, #11
 8008c12:	f7f9 faec 	bl	80021ee <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8008c16:	200a      	movs	r0, #10
 8008c18:	f7f9 fae9 	bl	80021ee <HAL_NVIC_EnableIRQ>
	return Status;
 8008c1c:	230f      	movs	r3, #15
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	781b      	ldrb	r3, [r3, #0]
}
 8008c22:	0018      	movs	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b005      	add	sp, #20
 8008c28:	bd90      	pop	{r4, r7, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	20004940 	.word	0x20004940

08008c30 <SendMessage>:
/*-----------------------------------------------------------*/
/* --- send data packet from port
*/

Module_Status SendMessage(uint16_t Port, uint16_t mCode, uint8_t dst, uint8_t *pData, uint16_t size)
{
 8008c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c32:	b0d3      	sub	sp, #332	; 0x14c
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	0004      	movs	r4, r0
 8008c38:	0008      	movs	r0, r1
 8008c3a:	0011      	movs	r1, r2
 8008c3c:	607b      	str	r3, [r7, #4]
 8008c3e:	4b9e      	ldr	r3, [pc, #632]	; (8008eb8 <SendMessage+0x288>)
 8008c40:	25a4      	movs	r5, #164	; 0xa4
 8008c42:	006d      	lsls	r5, r5, #1
 8008c44:	195b      	adds	r3, r3, r5
 8008c46:	19db      	adds	r3, r3, r7
 8008c48:	1c22      	adds	r2, r4, #0
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	4b9b      	ldr	r3, [pc, #620]	; (8008ebc <SendMessage+0x28c>)
 8008c4e:	002c      	movs	r4, r5
 8008c50:	191b      	adds	r3, r3, r4
 8008c52:	19db      	adds	r3, r3, r7
 8008c54:	1c02      	adds	r2, r0, #0
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	4b99      	ldr	r3, [pc, #612]	; (8008ec0 <SendMessage+0x290>)
 8008c5a:	191b      	adds	r3, r3, r4
 8008c5c:	19db      	adds	r3, r3, r7
 8008c5e:	1c0a      	adds	r2, r1, #0
 8008c60:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	UART_HandleTypeDef* handle;
	uint16_t length;
	uint8_t crc8;
	uint8_t MessagePacket[300]={0};
 8008c62:	4b98      	ldr	r3, [pc, #608]	; (8008ec4 <SendMessage+0x294>)
 8008c64:	191b      	adds	r3, r3, r4
 8008c66:	19db      	adds	r3, r3, r7
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	2294      	movs	r2, #148	; 0x94
 8008c70:	0052      	lsls	r2, r2, #1
 8008c72:	2100      	movs	r1, #0
 8008c74:	0018      	movs	r0, r3
 8008c76:	f004 f8ed 	bl	800ce54 <memset>

	/* check port */
	if (0<Port && 6>Port)
 8008c7a:	4b8f      	ldr	r3, [pc, #572]	; (8008eb8 <SendMessage+0x288>)
 8008c7c:	191b      	adds	r3, r3, r4
 8008c7e:	19db      	adds	r3, r3, r7
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d100      	bne.n	8008c88 <SendMessage+0x58>
 8008c86:	e109      	b.n	8008e9c <SendMessage+0x26c>
 8008c88:	4b8b      	ldr	r3, [pc, #556]	; (8008eb8 <SendMessage+0x288>)
 8008c8a:	191b      	adds	r3, r3, r4
 8008c8c:	19db      	adds	r3, r3, r7
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d900      	bls.n	8008c96 <SendMessage+0x66>
 8008c94:	e102      	b.n	8008e9c <SendMessage+0x26c>
	{
		/* get the handle of the port to transmit from */
		handle=GetUART(Port);
 8008c96:	4b88      	ldr	r3, [pc, #544]	; (8008eb8 <SendMessage+0x288>)
 8008c98:	191b      	adds	r3, r3, r4
 8008c9a:	19db      	adds	r3, r3, r7
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f7ff fe59 	bl	8008958 <GetUART>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	22a0      	movs	r2, #160	; 0xa0
 8008caa:	0052      	lsls	r2, r2, #1
 8008cac:	18ba      	adds	r2, r7, r2
 8008cae:	6013      	str	r3, [r2, #0]

		/* Configuring packet's header */
		/* packet delimiter */
		MessagePacket[0]='H';
 8008cb0:	4b84      	ldr	r3, [pc, #528]	; (8008ec4 <SendMessage+0x294>)
 8008cb2:	191b      	adds	r3, r3, r4
 8008cb4:	19db      	adds	r3, r3, r7
 8008cb6:	2248      	movs	r2, #72	; 0x48
 8008cb8:	701a      	strb	r2, [r3, #0]
		MessagePacket[1]='Z';
 8008cba:	4b82      	ldr	r3, [pc, #520]	; (8008ec4 <SendMessage+0x294>)
 8008cbc:	191b      	adds	r3, r3, r4
 8008cbe:	19db      	adds	r3, r3, r7
 8008cc0:	225a      	movs	r2, #90	; 0x5a
 8008cc2:	705a      	strb	r2, [r3, #1]

		if (87==mCode)
 8008cc4:	4b7d      	ldr	r3, [pc, #500]	; (8008ebc <SendMessage+0x28c>)
 8008cc6:	191b      	adds	r3, r3, r4
 8008cc8:	19db      	adds	r3, r3, r7
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	2b57      	cmp	r3, #87	; 0x57
 8008cce:	d13a      	bne.n	8008d46 <SendMessage+0x116>
		{
			/* Calculating packet length */
			length=size+9;                          /*not including H & Z delimiters, the length bytes and the CRC byte.*/
 8008cd0:	25ac      	movs	r5, #172	; 0xac
 8008cd2:	006d      	lsls	r5, r5, #1
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	18ea      	adds	r2, r5, r3
 8008cd8:	19d3      	adds	r3, r2, r7
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	3309      	adds	r3, #9
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	219f      	movs	r1, #159	; 0x9f
 8008ce2:	0049      	lsls	r1, r1, #1
 8008ce4:	187b      	adds	r3, r7, r1
 8008ce6:	801a      	strh	r2, [r3, #0]
			memcpy(&MessagePacket[2], &length, 2);
 8008ce8:	1879      	adds	r1, r7, r1
 8008cea:	2610      	movs	r6, #16
 8008cec:	19bb      	adds	r3, r7, r6
 8008cee:	3302      	adds	r3, #2
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f004 f93a 	bl	800cf6c <memcpy>
			/* destination module */
			MessagePacket[4]=dst;
 8008cf8:	4b72      	ldr	r3, [pc, #456]	; (8008ec4 <SendMessage+0x294>)
 8008cfa:	0021      	movs	r1, r4
 8008cfc:	185b      	adds	r3, r3, r1
 8008cfe:	19db      	adds	r3, r3, r7
 8008d00:	4a6f      	ldr	r2, [pc, #444]	; (8008ec0 <SendMessage+0x290>)
 8008d02:	1852      	adds	r2, r2, r1
 8008d04:	19d2      	adds	r2, r2, r7
 8008d06:	7812      	ldrb	r2, [r2, #0]
 8008d08:	711a      	strb	r2, [r3, #4]
			/* source module */
			MessagePacket[5]=MyID;
 8008d0a:	4b6e      	ldr	r3, [pc, #440]	; (8008ec4 <SendMessage+0x294>)
 8008d0c:	185b      	adds	r3, r3, r1
 8008d0e:	19db      	adds	r3, r3, r7
 8008d10:	2201      	movs	r2, #1
 8008d12:	715a      	strb	r2, [r3, #5]
			/* options byte */
			MessagePacket[6]=Options;
 8008d14:	4b6b      	ldr	r3, [pc, #428]	; (8008ec4 <SendMessage+0x294>)
 8008d16:	185b      	adds	r3, r3, r1
 8008d18:	19db      	adds	r3, r3, r7
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	719a      	strb	r2, [r3, #6]
			/* message code */
			MessagePacket[7]=mCode;
 8008d1e:	4b67      	ldr	r3, [pc, #412]	; (8008ebc <SendMessage+0x28c>)
 8008d20:	185b      	adds	r3, r3, r1
 8008d22:	19db      	adds	r3, r3, r7
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	4b66      	ldr	r3, [pc, #408]	; (8008ec4 <SendMessage+0x294>)
 8008d2a:	185b      	adds	r3, r3, r1
 8008d2c:	19db      	adds	r3, r3, r7
 8008d2e:	71da      	strb	r2, [r3, #7]

			/* Copying data payload */
			memcpy(&MessagePacket[8],pData,size);
 8008d30:	2308      	movs	r3, #8
 8008d32:	18eb      	adds	r3, r5, r3
 8008d34:	19db      	adds	r3, r3, r7
 8008d36:	881a      	ldrh	r2, [r3, #0]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	19bb      	adds	r3, r7, r6
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f004 f914 	bl	800cf6c <memcpy>
 8008d44:	e039      	b.n	8008dba <SendMessage+0x18a>
		}
		else
		{
			/* Calculating packet length */
			length=size+8;                          /*not including H & Z delimiters, the length bytes and the CRC byte.*/
 8008d46:	20ac      	movs	r0, #172	; 0xac
 8008d48:	0040      	lsls	r0, r0, #1
 8008d4a:	2408      	movs	r4, #8
 8008d4c:	1903      	adds	r3, r0, r4
 8008d4e:	19db      	adds	r3, r3, r7
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	3308      	adds	r3, #8
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	219f      	movs	r1, #159	; 0x9f
 8008d58:	0049      	lsls	r1, r1, #1
 8008d5a:	187b      	adds	r3, r7, r1
 8008d5c:	801a      	strh	r2, [r3, #0]
			MessagePacket[2]=length;
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	4b57      	ldr	r3, [pc, #348]	; (8008ec4 <SendMessage+0x294>)
 8008d66:	21a4      	movs	r1, #164	; 0xa4
 8008d68:	0049      	lsls	r1, r1, #1
 8008d6a:	185b      	adds	r3, r3, r1
 8008d6c:	19db      	adds	r3, r3, r7
 8008d6e:	709a      	strb	r2, [r3, #2]
			/* destination module */
		  MessagePacket[3]=dst;
 8008d70:	4b54      	ldr	r3, [pc, #336]	; (8008ec4 <SendMessage+0x294>)
 8008d72:	185b      	adds	r3, r3, r1
 8008d74:	19db      	adds	r3, r3, r7
 8008d76:	4a52      	ldr	r2, [pc, #328]	; (8008ec0 <SendMessage+0x290>)
 8008d78:	1852      	adds	r2, r2, r1
 8008d7a:	19d2      	adds	r2, r2, r7
 8008d7c:	7812      	ldrb	r2, [r2, #0]
 8008d7e:	70da      	strb	r2, [r3, #3]
			/* source module */
		  MessagePacket[4]=MyID;
 8008d80:	4b50      	ldr	r3, [pc, #320]	; (8008ec4 <SendMessage+0x294>)
 8008d82:	185b      	adds	r3, r3, r1
 8008d84:	19db      	adds	r3, r3, r7
 8008d86:	2201      	movs	r2, #1
 8008d88:	711a      	strb	r2, [r3, #4]
		  /* options byte */
		  MessagePacket[5]=Options;
 8008d8a:	4b4e      	ldr	r3, [pc, #312]	; (8008ec4 <SendMessage+0x294>)
 8008d8c:	185b      	adds	r3, r3, r1
 8008d8e:	19db      	adds	r3, r3, r7
 8008d90:	2200      	movs	r2, #0
 8008d92:	715a      	strb	r2, [r3, #5]
		  /* message code */
		  MessagePacket[6]=mCode;
 8008d94:	4b49      	ldr	r3, [pc, #292]	; (8008ebc <SendMessage+0x28c>)
 8008d96:	185b      	adds	r3, r3, r1
 8008d98:	19db      	adds	r3, r3, r7
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	4b49      	ldr	r3, [pc, #292]	; (8008ec4 <SendMessage+0x294>)
 8008da0:	185b      	adds	r3, r3, r1
 8008da2:	19db      	adds	r3, r3, r7
 8008da4:	719a      	strb	r2, [r3, #6]
			/* Copying data payload */
			memcpy(&MessagePacket[7],pData,size);
 8008da6:	1903      	adds	r3, r0, r4
 8008da8:	19db      	adds	r3, r3, r7
 8008daa:	881a      	ldrh	r2, [r3, #0]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	2310      	movs	r3, #16
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	3307      	adds	r3, #7
 8008db4:	0018      	movs	r0, r3
 8008db6:	f004 f8d9 	bl	800cf6c <memcpy>
		}

		/* Calculating CRC8 for the packet */
		crc8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&MessagePacket, (length-1)/4);
 8008dba:	239f      	movs	r3, #159	; 0x9f
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	18fb      	adds	r3, r7, r3
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da00      	bge.n	8008dca <SendMessage+0x19a>
 8008dc8:	3303      	adds	r3, #3
 8008dca:	109b      	asrs	r3, r3, #2
 8008dcc:	001a      	movs	r2, r3
 8008dce:	2310      	movs	r3, #16
 8008dd0:	18f9      	adds	r1, r7, r3
 8008dd2:	4b3d      	ldr	r3, [pc, #244]	; (8008ec8 <SendMessage+0x298>)
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7f9 fad8 	bl	800238a <HAL_CRC_Calculate>
 8008dda:	0002      	movs	r2, r0
 8008ddc:	23a3      	movs	r3, #163	; 0xa3
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	701a      	strb	r2, [r3, #0]
		if ((length-1)%4 !=0){
 8008de4:	219f      	movs	r1, #159	; 0x9f
 8008de6:	0049      	lsls	r1, r1, #1
 8008de8:	187b      	adds	r3, r7, r1
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	001a      	movs	r2, r3
 8008df0:	2303      	movs	r3, #3
 8008df2:	4013      	ands	r3, r2
 8008df4:	d014      	beq.n	8008e20 <SendMessage+0x1f0>
			crc8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&MessagePacket[((length-1)/4)*4], 1);
 8008df6:	187b      	adds	r3, r7, r1
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da00      	bge.n	8008e02 <SendMessage+0x1d2>
 8008e00:	3303      	adds	r3, #3
 8008e02:	109b      	asrs	r3, r3, #2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	2210      	movs	r2, #16
 8008e08:	18ba      	adds	r2, r7, r2
 8008e0a:	18d1      	adds	r1, r2, r3
 8008e0c:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <SendMessage+0x298>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7f9 fa73 	bl	80022fc <HAL_CRC_Accumulate>
 8008e16:	0002      	movs	r2, r0
 8008e18:	23a3      	movs	r3, #163	; 0xa3
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	701a      	strb	r2, [r3, #0]
		}
		MessagePacket[length-1]=crc8;
 8008e20:	209f      	movs	r0, #159	; 0x9f
 8008e22:	0040      	lsls	r0, r0, #1
 8008e24:	183b      	adds	r3, r7, r0
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	4a26      	ldr	r2, [pc, #152]	; (8008ec4 <SendMessage+0x294>)
 8008e2c:	25a4      	movs	r5, #164	; 0xa4
 8008e2e:	006d      	lsls	r5, r5, #1
 8008e30:	1952      	adds	r2, r2, r5
 8008e32:	19d2      	adds	r2, r2, r7
 8008e34:	21a3      	movs	r1, #163	; 0xa3
 8008e36:	0049      	lsls	r1, r1, #1
 8008e38:	1879      	adds	r1, r7, r1
 8008e3a:	7809      	ldrb	r1, [r1, #0]
 8008e3c:	54d1      	strb	r1, [r2, r3]

		/* Send data packet via DMA */
		HAL_UART_Transmit_DMA(handle, MessagePacket,length);    /* in case length doesn't include delimeter and CRC should be added to 5*/
 8008e3e:	183b      	adds	r3, r7, r0
 8008e40:	881a      	ldrh	r2, [r3, #0]
 8008e42:	2310      	movs	r3, #16
 8008e44:	18f9      	adds	r1, r7, r3
 8008e46:	24a0      	movs	r4, #160	; 0xa0
 8008e48:	0064      	lsls	r4, r4, #1
 8008e4a:	193b      	adds	r3, r7, r4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	0018      	movs	r0, r3
 8008e50:	f7fb fdb0 	bl	80049b4 <HAL_UART_Transmit_DMA>

		/* wait to finish transmitting packet */
		HAL_Delay(100);
 8008e54:	2064      	movs	r0, #100	; 0x64
 8008e56:	f7f9 f8e7 	bl	8002028 <HAL_Delay>

		/* Reinitializing DMA */
		HAL_UART_DeInit(handle);
 8008e5a:	193b      	adds	r3, r7, r4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f7fb fca2 	bl	80047a8 <HAL_UART_DeInit>
		HAL_UART_Init(handle);
 8008e64:	193b      	adds	r3, r7, r4
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7fb fc49 	bl	8004700 <HAL_UART_Init>
		HAL_UART_Receive_DMA(handle, &RcvMessage[Port-1][0], RcvMessageMaxSize);
 8008e6e:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <SendMessage+0x288>)
 8008e70:	195b      	adds	r3, r3, r5
 8008e72:	19db      	adds	r3, r3, r7
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	1e5a      	subs	r2, r3, #1
 8008e78:	0013      	movs	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	189b      	adds	r3, r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a12      	ldr	r2, [pc, #72]	; (8008ecc <SendMessage+0x29c>)
 8008e82:	1899      	adds	r1, r3, r2
 8008e84:	193b      	adds	r3, r7, r4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2214      	movs	r2, #20
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7fb fe22 	bl	8004ad4 <HAL_UART_Receive_DMA>

		Status = Modbus_OK;
 8008e90:	2348      	movs	r3, #72	; 0x48
 8008e92:	33ff      	adds	r3, #255	; 0xff
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e004      	b.n	8008ea6 <SendMessage+0x276>
	}
	else
		Status = Modbus_ERR_WrongParams;
 8008e9c:	2348      	movs	r3, #72	; 0x48
 8008e9e:	33ff      	adds	r3, #255	; 0xff
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	701a      	strb	r2, [r3, #0]

	return Status;
 8008ea6:	2348      	movs	r3, #72	; 0x48
 8008ea8:	33ff      	adds	r3, #255	; 0xff
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	781b      	ldrb	r3, [r3, #0]
}
 8008eae:	0018      	movs	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	b053      	add	sp, #332	; 0x14c
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	fffffec6 	.word	0xfffffec6
 8008ebc:	fffffec4 	.word	0xfffffec4
 8008ec0:	fffffec3 	.word	0xfffffec3
 8008ec4:	fffffec8 	.word	0xfffffec8
 8008ec8:	20000084 	.word	0x20000084
 8008ecc:	20004994 	.word	0x20004994

08008ed0 <TMOUT_HandleTimer>:


/* --- TimeOut software timer*/

static void TMOUT_HandleTimer(TimerHandle_t sTimer)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

	Timer_ID = ( uint32_t ) pvTimerGetTimerID( sTimer );
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f7ff f926 	bl	8008130 <pvTimerGetTimerID>
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	60fb      	str	r3, [r7, #12]
  if (TIMERID_TMOUT_TIMER == Timer_ID)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2bfd      	cmp	r3, #253	; 0xfd
 8008eec:	d114      	bne.n	8008f18 <TMOUT_HandleTimer+0x48>
  {
		TMOUT_Counter++;
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <TMOUT_HandleTimer+0x50>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <TMOUT_HandleTimer+0x50>)
 8008ef8:	801a      	strh	r2, [r3, #0]
		if (TMOUT_Counter==1000){
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <TMOUT_HandleTimer+0x50>)
 8008efc:	881a      	ldrh	r2, [r3, #0]
 8008efe:	23fa      	movs	r3, #250	; 0xfa
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d108      	bne.n	8008f18 <TMOUT_HandleTimer+0x48>
			wmTimeOut++;
 8008f06:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <TMOUT_HandleTimer+0x54>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <TMOUT_HandleTimer+0x54>)
 8008f10:	701a      	strb	r2, [r3, #0]
			TMOUT_Counter=0;
 8008f12:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <TMOUT_HandleTimer+0x50>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8008f18:	46c0      	nop			; (mov r8, r8)
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b004      	add	sp, #16
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	2000494a 	.word	0x2000494a
 8008f24:	20004947 	.word	0x20004947

08008f28 <RTC_HandleTimer>:
/*-----------------------------------------------------------*/

/* --- RTC software timer*/

static void RTC_HandleTimer(TimerHandle_t zTimer)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]

	Timer_ID = ( uint32_t ) pvTimerGetTimerID( zTimer );
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7ff f8fa 	bl	8008130 <pvTimerGetTimerID>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	60fb      	str	r3, [r7, #12]
  if (TIMERID_RTC_TIMER == Timer_ID)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2bfe      	cmp	r3, #254	; 0xfe
 8008f44:	d135      	bne.n	8008fb2 <RTC_HandleTimer+0x8a>
  {
		msCounter++;
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <RTC_HandleTimer+0x94>)
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <RTC_HandleTimer+0x94>)
 8008f50:	801a      	strh	r2, [r3, #0]
		if (msCounter==1000)
 8008f52:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <RTC_HandleTimer+0x94>)
 8008f54:	881a      	ldrh	r2, [r3, #0]
 8008f56:	23fa      	movs	r3, #250	; 0xfa
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d108      	bne.n	8008f70 <RTC_HandleTimer+0x48>
		{
			Second++;
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <RTC_HandleTimer+0x98>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	3301      	adds	r3, #1
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <RTC_HandleTimer+0x98>)
 8008f68:	701a      	strb	r2, [r3, #0]
			msCounter=0;
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <RTC_HandleTimer+0x94>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	801a      	strh	r2, [r3, #0]
		}
		if (Second==60)
 8008f70:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <RTC_HandleTimer+0x98>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b3c      	cmp	r3, #60	; 0x3c
 8008f76:	d108      	bne.n	8008f8a <RTC_HandleTimer+0x62>
		{
			Second=0;
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <RTC_HandleTimer+0x98>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
			Minute++;
 8008f7e:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <RTC_HandleTimer+0x9c>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <RTC_HandleTimer+0x9c>)
 8008f88:	701a      	strb	r2, [r3, #0]
		}
		if (Minute==60)
 8008f8a:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <RTC_HandleTimer+0x9c>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b3c      	cmp	r3, #60	; 0x3c
 8008f90:	d108      	bne.n	8008fa4 <RTC_HandleTimer+0x7c>
		{
			Minute=0;
 8008f92:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <RTC_HandleTimer+0x9c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]
			Hour++;
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <RTC_HandleTimer+0xa0>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <RTC_HandleTimer+0xa0>)
 8008fa2:	701a      	strb	r2, [r3, #0]
		}
		if (Hour==24)
 8008fa4:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <RTC_HandleTimer+0xa0>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b18      	cmp	r3, #24
 8008faa:	d102      	bne.n	8008fb2 <RTC_HandleTimer+0x8a>
		{
			Hour=0;
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <RTC_HandleTimer+0xa0>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b004      	add	sp, #16
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	20004948 	.word	0x20004948
 8008fc0:	20004946 	.word	0x20004946
 8008fc4:	20004945 	.word	0x20004945
 8008fc8:	20004944 	.word	0x20004944

08008fcc <MasterMessagingParser>:
uint16_t ReadVar[25]={0};
uint32_t remoteVar[9]={0};


Module_Status MasterMessagingParser(uint8_t Port)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b08f      	sub	sp, #60	; 0x3c
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	0002      	movs	r2, r0
 8008fd4:	1dfb      	adds	r3, r7, #7
 8008fd6:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	UART_HandleTypeDef* Handle;
	uint8_t packetLength=0;
 8008fd8:	2336      	movs	r3, #54	; 0x36
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
	uint8_t CRC8=0;
 8008fe0:	2535      	movs	r5, #53	; 0x35
 8008fe2:	197b      	adds	r3, r7, r5
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
	uint16_t code=0;
 8008fe8:	2632      	movs	r6, #50	; 0x32
 8008fea:	19bb      	adds	r3, r7, r6
 8008fec:	2200      	movs	r2, #0
 8008fee:	801a      	strh	r2, [r3, #0]
	uint8_t data[12]={0};
 8008ff0:	2420      	movs	r4, #32
 8008ff2:	193b      	adds	r3, r7, r4
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	0018      	movs	r0, r3
 8009000:	f003 ff28 	bl	800ce54 <memset>
	uint8_t CRC_Buffer[RcvMessageMaxSize]={0};
 8009004:	240c      	movs	r4, #12
 8009006:	193b      	adds	r3, r7, r4
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	3304      	adds	r3, #4
 800900e:	2210      	movs	r2, #16
 8009010:	2100      	movs	r1, #0
 8009012:	0018      	movs	r0, r3
 8009014:	f003 ff1e 	bl	800ce54 <memset>
	UNUSED(packetLength);
	UNUSED(CRC8);
	Handle=GetUART(Port);
 8009018:	1dfb      	adds	r3, r7, #7
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	0018      	movs	r0, r3
 800901e:	f7ff fc9b 	bl	8008958 <GetUART>
 8009022:	0003      	movs	r3, r0
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Parsing message */
	if (RcvMessage[Port-1][0]=='H' && RcvMessage[Port-1][1]=='Z')
 8009026:	1dfb      	adds	r3, r7, #7
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	494f      	ldr	r1, [pc, #316]	; (800916c <MasterMessagingParser+0x1a0>)
 800902e:	0013      	movs	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	189b      	adds	r3, r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	5c5b      	ldrb	r3, [r3, r1]
 8009038:	2b48      	cmp	r3, #72	; 0x48
 800903a:	d167      	bne.n	800910c <MasterMessagingParser+0x140>
 800903c:	1dfb      	adds	r3, r7, #7
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	1e5a      	subs	r2, r3, #1
 8009042:	494a      	ldr	r1, [pc, #296]	; (800916c <MasterMessagingParser+0x1a0>)
 8009044:	0013      	movs	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	189b      	adds	r3, r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	18cb      	adds	r3, r1, r3
 800904e:	3301      	adds	r3, #1
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b5a      	cmp	r3, #90	; 0x5a
 8009054:	d15a      	bne.n	800910c <MasterMessagingParser+0x140>
	{
		/* Get packet length */
		packetLength=RcvMessage[Port-1][2];
 8009056:	1dfb      	adds	r3, r7, #7
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	1e5a      	subs	r2, r3, #1
 800905c:	2336      	movs	r3, #54	; 0x36
 800905e:	18f9      	adds	r1, r7, r3
 8009060:	4842      	ldr	r0, [pc, #264]	; (800916c <MasterMessagingParser+0x1a0>)
 8009062:	0013      	movs	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	189b      	adds	r3, r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	18c3      	adds	r3, r0, r3
 800906c:	3302      	adds	r3, #2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	700b      	strb	r3, [r1, #0]
		memcpy(CRC_Buffer, &RcvMessage[Port-1][0], RcvMessageMaxSize-1);
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	1e5a      	subs	r2, r3, #1
 8009078:	0013      	movs	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	189b      	adds	r3, r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4a3a      	ldr	r2, [pc, #232]	; (800916c <MasterMessagingParser+0x1a0>)
 8009082:	1899      	adds	r1, r3, r2
 8009084:	193b      	adds	r3, r7, r4
 8009086:	2213      	movs	r2, #19
 8009088:	0018      	movs	r0, r3
 800908a:	f003 ff6f 	bl	800cf6c <memcpy>

		/* Calculating CRC8 for the packet */
		CRC8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&CRC_Buffer, (RcvMessageMaxSize-1)/4);
 800908e:	1939      	adds	r1, r7, r4
 8009090:	4b37      	ldr	r3, [pc, #220]	; (8009170 <MasterMessagingParser+0x1a4>)
 8009092:	2204      	movs	r2, #4
 8009094:	0018      	movs	r0, r3
 8009096:	f7f9 f978 	bl	800238a <HAL_CRC_Calculate>
 800909a:	0002      	movs	r2, r0
 800909c:	197b      	adds	r3, r7, r5
 800909e:	701a      	strb	r2, [r3, #0]
		if ((RcvMessageMaxSize-1)%4 !=0){
			CRC8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&CRC_Buffer[((RcvMessageMaxSize-1)/4)*4], 1);
 80090a0:	193b      	adds	r3, r7, r4
 80090a2:	3310      	adds	r3, #16
 80090a4:	0019      	movs	r1, r3
 80090a6:	4b32      	ldr	r3, [pc, #200]	; (8009170 <MasterMessagingParser+0x1a4>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7f9 f926 	bl	80022fc <HAL_CRC_Accumulate>
 80090b0:	0002      	movs	r2, r0
 80090b2:	197b      	adds	r3, r7, r5
 80090b4:	701a      	strb	r2, [r3, #0]

		/* Check CRC value */
//		if (CRC8 == RcvMessage[Port-1][RcvMessageMaxSize-1])
//		{
			/* message code */
			code=RcvMessage[Port-1][6];  //( (uint16_t) RcvMessage[Port-1][6] << 8 )
 80090b6:	1dfb      	adds	r3, r7, #7
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	492b      	ldr	r1, [pc, #172]	; (800916c <MasterMessagingParser+0x1a0>)
 80090be:	0013      	movs	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	18cb      	adds	r3, r1, r3
 80090c8:	3306      	adds	r3, #6
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	19bb      	adds	r3, r7, r6
 80090ce:	801a      	strh	r2, [r3, #0]

			memcpy(data,&RcvMessage[Port-1][7],RcvMessageMaxSize-8);
 80090d0:	1dfb      	adds	r3, r7, #7
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	1e5a      	subs	r2, r3, #1
 80090d6:	0013      	movs	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	189b      	adds	r3, r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	1dda      	adds	r2, r3, #7
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <MasterMessagingParser+0x1a0>)
 80090e2:	18d3      	adds	r3, r2, r3
 80090e4:	2420      	movs	r4, #32
 80090e6:	193a      	adds	r2, r7, r4
 80090e8:	0010      	movs	r0, r2
 80090ea:	0019      	movs	r1, r3
 80090ec:	230c      	movs	r3, #12
 80090ee:	001a      	movs	r2, r3
 80090f0:	f003 ff3c 	bl	800cf6c <memcpy>
			Module_MessagingProcessing(code, data);
 80090f4:	193a      	adds	r2, r7, r4
 80090f6:	19bb      	adds	r3, r7, r6
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	0011      	movs	r1, r2
 80090fc:	0018      	movs	r0, r3
 80090fe:	f000 f839 	bl	8009174 <Module_MessagingProcessing>
			Status = Modbus_OK;
 8009102:	2337      	movs	r3, #55	; 0x37
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e003      	b.n	8009114 <MasterMessagingParser+0x148>
//		}
//		else
//			Status = Modbus_ERROR;
	}
	else
		Status = Modbus_ERROR;
 800910c:	2337      	movs	r3, #55	; 0x37
 800910e:	18fb      	adds	r3, r7, r3
 8009110:	22ff      	movs	r2, #255	; 0xff
 8009112:	701a      	strb	r2, [r3, #0]

	/* clear RcvMessage	*/
	memset(&RcvMessage[Port-1][0],0,RcvMessageMaxSize);
 8009114:	1dfb      	adds	r3, r7, #7
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	1e5a      	subs	r2, r3, #1
 800911a:	0013      	movs	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	189b      	adds	r3, r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4a12      	ldr	r2, [pc, #72]	; (800916c <MasterMessagingParser+0x1a0>)
 8009124:	189b      	adds	r3, r3, r2
 8009126:	2214      	movs	r2, #20
 8009128:	2100      	movs	r1, #0
 800912a:	0018      	movs	r0, r3
 800912c:	f003 fe92 	bl	800ce54 <memset>

	/* re-initializing DMA of receiving port */
	HAL_UART_DeInit(Handle);
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	0018      	movs	r0, r3
 8009134:	f7fb fb38 	bl	80047a8 <HAL_UART_DeInit>
	HAL_UART_Init(Handle);
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	0018      	movs	r0, r3
 800913c:	f7fb fae0 	bl	8004700 <HAL_UART_Init>
	HAL_UART_Receive_DMA(Handle, &RcvMessage[Port-1][0], RcvMessageMaxSize);
 8009140:	1dfb      	adds	r3, r7, #7
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	1e5a      	subs	r2, r3, #1
 8009146:	0013      	movs	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	189b      	adds	r3, r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4a07      	ldr	r2, [pc, #28]	; (800916c <MasterMessagingParser+0x1a0>)
 8009150:	1899      	adds	r1, r3, r2
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	2214      	movs	r2, #20
 8009156:	0018      	movs	r0, r3
 8009158:	f7fb fcbc 	bl	8004ad4 <HAL_UART_Receive_DMA>

	return Status;
 800915c:	2337      	movs	r3, #55	; 0x37
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	781b      	ldrb	r3, [r3, #0]
}
 8009162:	0018      	movs	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	b00f      	add	sp, #60	; 0x3c
 8009168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	20004994 	.word	0x20004994
 8009170:	20000084 	.word	0x20000084

08009174 <Module_MessagingProcessing>:
/* --- Modbus message processing.
*/


Module_Status Module_MessagingProcessing(uint16_t code,  uint8_t *pData)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	0002      	movs	r2, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	1dbb      	adds	r3, r7, #6
 8009180:	801a      	strh	r2, [r3, #0]


	Module_Status result = Modbus_OK;
 8009182:	230f      	movs	r3, #15
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]



	switch (code)
 800918a:	1dbb      	adds	r3, r7, #6
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	2b58      	cmp	r3, #88	; 0x58
 8009190:	d100      	bne.n	8009194 <Module_MessagingProcessing+0x20>
 8009192:	e0de      	b.n	8009352 <Module_MessagingProcessing+0x1de>
 8009194:	dd00      	ble.n	8009198 <Module_MessagingProcessing+0x24>
 8009196:	e1d3      	b.n	8009540 <Module_MessagingProcessing+0x3cc>
 8009198:	2b57      	cmp	r3, #87	; 0x57
 800919a:	d06c      	beq.n	8009276 <Module_MessagingProcessing+0x102>
 800919c:	dd00      	ble.n	80091a0 <Module_MessagingProcessing+0x2c>
 800919e:	e1cf      	b.n	8009540 <Module_MessagingProcessing+0x3cc>
 80091a0:	2b56      	cmp	r3, #86	; 0x56
 80091a2:	d039      	beq.n	8009218 <Module_MessagingProcessing+0xa4>
 80091a4:	dd00      	ble.n	80091a8 <Module_MessagingProcessing+0x34>
 80091a6:	e1cb      	b.n	8009540 <Module_MessagingProcessing+0x3cc>
 80091a8:	2b55      	cmp	r3, #85	; 0x55
 80091aa:	d008      	beq.n	80091be <Module_MessagingProcessing+0x4a>
 80091ac:	dd00      	ble.n	80091b0 <Module_MessagingProcessing+0x3c>
 80091ae:	e1c7      	b.n	8009540 <Module_MessagingProcessing+0x3cc>
 80091b0:	2b1e      	cmp	r3, #30
 80091b2:	d100      	bne.n	80091b6 <Module_MessagingProcessing+0x42>
 80091b4:	e0e2      	b.n	800937c <Module_MessagingProcessing+0x208>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d100      	bne.n	80091bc <Module_MessagingProcessing+0x48>
 80091ba:	e0f0      	b.n	800939e <Module_MessagingProcessing+0x22a>
 80091bc:	e1c0      	b.n	8009540 <Module_MessagingProcessing+0x3cc>


	break;
		case CODE_H1DR1_READ:

			flag1=1;
 80091be:	4be8      	ldr	r3, [pc, #928]	; (8009560 <Module_MessagingProcessing+0x3ec>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]
			flag2=1;
 80091c4:	4be7      	ldr	r3, [pc, #924]	; (8009564 <Module_MessagingProcessing+0x3f0>)
 80091c6:	2201      	movs	r2, #1
 80091c8:	701a      	strb	r2, [r3, #0]
			Slave_add = pData[1];
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785a      	ldrb	r2, [r3, #1]
 80091ce:	4be6      	ldr	r3, [pc, #920]	; (8009568 <Module_MessagingProcessing+0x3f4>)
 80091d0:	701a      	strb	r2, [r3, #0]
			Reg_address = ( (uint16_t) pData[3] << 8 ) + pData[2];
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	3303      	adds	r3, #3
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	b29a      	uxth	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3302      	adds	r3, #2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	18d3      	adds	r3, r2, r3
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	4be0      	ldr	r3, [pc, #896]	; (800956c <Module_MessagingProcessing+0x3f8>)
 80091ec:	801a      	strh	r2, [r3, #0]
			Nu_regiters = ( (uint16_t) pData[5] << 8 ) + pData[4];
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3305      	adds	r3, #5
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	3304      	adds	r3, #4
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	18d3      	adds	r3, r2, r3
 8009204:	b29a      	uxth	r2, r3
 8009206:	4bda      	ldr	r3, [pc, #872]	; (8009570 <Module_MessagingProcessing+0x3fc>)
 8009208:	801a      	strh	r2, [r3, #0]
			Port = pData[6];
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	3306      	adds	r3, #6
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	001a      	movs	r2, r3
 8009212:	4bd8      	ldr	r3, [pc, #864]	; (8009574 <Module_MessagingProcessing+0x400>)
 8009214:	601a      	str	r2, [r3, #0]

		break;
 8009216:	e199      	b.n	800954c <Module_MessagingProcessing+0x3d8>

		case CODE_H1DR1_WRITE:

			flag1=1;
 8009218:	4bd1      	ldr	r3, [pc, #836]	; (8009560 <Module_MessagingProcessing+0x3ec>)
 800921a:	2201      	movs	r2, #1
 800921c:	701a      	strb	r2, [r3, #0]
			flag2=2;
 800921e:	4bd1      	ldr	r3, [pc, #836]	; (8009564 <Module_MessagingProcessing+0x3f0>)
 8009220:	2202      	movs	r2, #2
 8009222:	701a      	strb	r2, [r3, #0]
			Slave_add = pData[1];
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	785a      	ldrb	r2, [r3, #1]
 8009228:	4bcf      	ldr	r3, [pc, #828]	; (8009568 <Module_MessagingProcessing+0x3f4>)
 800922a:	701a      	strb	r2, [r3, #0]
			Reg_address = ( (uint16_t) pData[3] << 8 ) + pData[2];
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	3303      	adds	r3, #3
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	b29a      	uxth	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	3302      	adds	r3, #2
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	18d3      	adds	r3, r2, r3
 8009242:	b29a      	uxth	r2, r3
 8009244:	4bc9      	ldr	r3, [pc, #804]	; (800956c <Module_MessagingProcessing+0x3f8>)
 8009246:	801a      	strh	r2, [r3, #0]
			Write = pData[4] | pData[5]<<8 |pData[6] << 16 | pData[7] <<24   ;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	001a      	movs	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	3305      	adds	r3, #5
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	431a      	orrs	r2, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	3306      	adds	r3, #6
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	041b      	lsls	r3, r3, #16
 8009262:	431a      	orrs	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	3307      	adds	r3, #7
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	061b      	lsls	r3, r3, #24
 800926c:	4313      	orrs	r3, r2
 800926e:	001a      	movs	r2, r3
 8009270:	4bc1      	ldr	r3, [pc, #772]	; (8009578 <Module_MessagingProcessing+0x404>)
 8009272:	601a      	str	r2, [r3, #0]


		 break;
 8009274:	e16a      	b.n	800954c <Module_MessagingProcessing+0x3d8>

		case CODE_H1DR1_MULTIWRITE:
			flag1=1;
 8009276:	4bba      	ldr	r3, [pc, #744]	; (8009560 <Module_MessagingProcessing+0x3ec>)
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
			flag2=3;
 800927c:	4bb9      	ldr	r3, [pc, #740]	; (8009564 <Module_MessagingProcessing+0x3f0>)
 800927e:	2203      	movs	r2, #3
 8009280:	701a      	strb	r2, [r3, #0]
			Slave_add = pData[1];
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	785a      	ldrb	r2, [r3, #1]
 8009286:	4bb8      	ldr	r3, [pc, #736]	; (8009568 <Module_MessagingProcessing+0x3f4>)
 8009288:	701a      	strb	r2, [r3, #0]
			Reg_address = ( (uint16_t) pData[3] << 8 ) + pData[2];
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	3303      	adds	r3, #3
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	b29a      	uxth	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	3302      	adds	r3, #2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	18d3      	adds	r3, r2, r3
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	4bb2      	ldr	r3, [pc, #712]	; (800956c <Module_MessagingProcessing+0x3f8>)
 80092a4:	801a      	strh	r2, [r3, #0]
			Nu_regiters = ( (uint16_t) pData[5] << 8 ) + pData[4];
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	3305      	adds	r3, #5
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	021b      	lsls	r3, r3, #8
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	3304      	adds	r3, #4
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	18d3      	adds	r3, r2, r3
 80092bc:	b29a      	uxth	r2, r3
 80092be:	4bac      	ldr	r3, [pc, #688]	; (8009570 <Module_MessagingProcessing+0x3fc>)
 80092c0:	801a      	strh	r2, [r3, #0]
			memcpy(&WriteBuffer[0],&pData[6] ,sizeof (WriteBuffer[0])); // pData[6]  +pData[7]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	1d99      	adds	r1, r3, #6
 80092c6:	4bad      	ldr	r3, [pc, #692]	; (800957c <Module_MessagingProcessing+0x408>)
 80092c8:	2202      	movs	r2, #2
 80092ca:	0018      	movs	r0, r3
 80092cc:	f003 fe4e 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[1],&pData[8] ,sizeof (WriteBuffer[0])); // pData[8]  +pData[9]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	0019      	movs	r1, r3
 80092d6:	4baa      	ldr	r3, [pc, #680]	; (8009580 <Module_MessagingProcessing+0x40c>)
 80092d8:	2202      	movs	r2, #2
 80092da:	0018      	movs	r0, r3
 80092dc:	f003 fe46 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[2],&pData[10],sizeof (WriteBuffer[0])); // pData[10] +pData[11]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	330a      	adds	r3, #10
 80092e4:	0019      	movs	r1, r3
 80092e6:	4ba7      	ldr	r3, [pc, #668]	; (8009584 <Module_MessagingProcessing+0x410>)
 80092e8:	2202      	movs	r2, #2
 80092ea:	0018      	movs	r0, r3
 80092ec:	f003 fe3e 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[3],&pData[12],sizeof (WriteBuffer[0])); // pData[12] +pData[13]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	0019      	movs	r1, r3
 80092f6:	4ba4      	ldr	r3, [pc, #656]	; (8009588 <Module_MessagingProcessing+0x414>)
 80092f8:	2202      	movs	r2, #2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f003 fe36 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[4],&pData[14],sizeof (WriteBuffer[0])); // pData[14] +pData[15]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	330e      	adds	r3, #14
 8009304:	0019      	movs	r1, r3
 8009306:	4ba1      	ldr	r3, [pc, #644]	; (800958c <Module_MessagingProcessing+0x418>)
 8009308:	2202      	movs	r2, #2
 800930a:	0018      	movs	r0, r3
 800930c:	f003 fe2e 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[5],&pData[16],sizeof (WriteBuffer[0])); // pData[16] +pData[17]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	3310      	adds	r3, #16
 8009314:	0019      	movs	r1, r3
 8009316:	4b9e      	ldr	r3, [pc, #632]	; (8009590 <Module_MessagingProcessing+0x41c>)
 8009318:	2202      	movs	r2, #2
 800931a:	0018      	movs	r0, r3
 800931c:	f003 fe26 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[6],&pData[18],sizeof (WriteBuffer[0])); // pData[18] +pData[19]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	3312      	adds	r3, #18
 8009324:	0019      	movs	r1, r3
 8009326:	4b9b      	ldr	r3, [pc, #620]	; (8009594 <Module_MessagingProcessing+0x420>)
 8009328:	2202      	movs	r2, #2
 800932a:	0018      	movs	r0, r3
 800932c:	f003 fe1e 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[7],&pData[20],sizeof (WriteBuffer[0])); // pData[20] +pData[21]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	3314      	adds	r3, #20
 8009334:	0019      	movs	r1, r3
 8009336:	4b98      	ldr	r3, [pc, #608]	; (8009598 <Module_MessagingProcessing+0x424>)
 8009338:	2202      	movs	r2, #2
 800933a:	0018      	movs	r0, r3
 800933c:	f003 fe16 	bl	800cf6c <memcpy>
			memcpy(&WriteBuffer[8],&pData[22],sizeof (WriteBuffer[0])); // pData[22] +pData[23]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	3316      	adds	r3, #22
 8009344:	0019      	movs	r1, r3
 8009346:	4b95      	ldr	r3, [pc, #596]	; (800959c <Module_MessagingProcessing+0x428>)
 8009348:	2202      	movs	r2, #2
 800934a:	0018      	movs	r0, r3
 800934c:	f003 fe0e 	bl	800cf6c <memcpy>




		 break;
 8009350:	e0fc      	b.n	800954c <Module_MessagingProcessing+0x3d8>

		case CODE_H1DR1_STIMEOUT:
			flag1=1;
 8009352:	4b83      	ldr	r3, [pc, #524]	; (8009560 <Module_MessagingProcessing+0x3ec>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
			flag2=4;
 8009358:	4b82      	ldr	r3, [pc, #520]	; (8009564 <Module_MessagingProcessing+0x3f0>)
 800935a:	2204      	movs	r2, #4
 800935c:	701a      	strb	r2, [r3, #0]
			TimeOut = ( (uint16_t) pData[2] << 8 ) + pData[1];
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	3302      	adds	r3, #2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	b29a      	uxth	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	3301      	adds	r3, #1
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	18d3      	adds	r3, r2, r3
 8009374:	b29a      	uxth	r2, r3
 8009376:	4b8a      	ldr	r3, [pc, #552]	; (80095a0 <Module_MessagingProcessing+0x42c>)
 8009378:	801a      	strh	r2, [r3, #0]


		 break;
 800937a:	e0e7      	b.n	800954c <Module_MessagingProcessing+0x3d8>


		case CODE_READ_REMOTE:


				flag1=1;
 800937c:	4b78      	ldr	r3, [pc, #480]	; (8009560 <Module_MessagingProcessing+0x3ec>)
 800937e:	2201      	movs	r2, #1
 8009380:	701a      	strb	r2, [r3, #0]
				flag2=5;
 8009382:	4b78      	ldr	r3, [pc, #480]	; (8009564 <Module_MessagingProcessing+0x3f0>)
 8009384:	2205      	movs	r2, #5
 8009386:	701a      	strb	r2, [r3, #0]
				rank=RcvMessage[2][7];
 8009388:	4b86      	ldr	r3, [pc, #536]	; (80095a4 <Module_MessagingProcessing+0x430>)
 800938a:	222f      	movs	r2, #47	; 0x2f
 800938c:	5c9a      	ldrb	r2, [r3, r2]
 800938e:	4b86      	ldr	r3, [pc, #536]	; (80095a8 <Module_MessagingProcessing+0x434>)
 8009390:	701a      	strb	r2, [r3, #0]
				Port=RcvMessage[2][8];
 8009392:	4b84      	ldr	r3, [pc, #528]	; (80095a4 <Module_MessagingProcessing+0x430>)
 8009394:	2230      	movs	r2, #48	; 0x30
 8009396:	5c9b      	ldrb	r3, [r3, r2]
 8009398:	001a      	movs	r2, r3
 800939a:	4b76      	ldr	r3, [pc, #472]	; (8009574 <Module_MessagingProcessing+0x400>)
 800939c:	601a      	str	r2, [r3, #0]

	case CODE_WRITE_REMOTE:
		    rank = pData[0];
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781a      	ldrb	r2, [r3, #0]
 80093a2:	4b81      	ldr	r3, [pc, #516]	; (80095a8 <Module_MessagingProcessing+0x434>)
 80093a4:	701a      	strb	r2, [r3, #0]

	   switch( rank)
 80093a6:	4b80      	ldr	r3, [pc, #512]	; (80095a8 <Module_MessagingProcessing+0x434>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d100      	bne.n	80093b0 <Module_MessagingProcessing+0x23c>
 80093ae:	e086      	b.n	80094be <Module_MessagingProcessing+0x34a>
 80093b0:	dd00      	ble.n	80093b4 <Module_MessagingProcessing+0x240>
 80093b2:	e0ca      	b.n	800954a <Module_MessagingProcessing+0x3d6>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <Module_MessagingProcessing+0x24a>
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d040      	beq.n	800943e <Module_MessagingProcessing+0x2ca>

				remoteVar[8] = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Ninth Var
					break;
			  }

	 break;
 80093bc:	e0c5      	b.n	800954a <Module_MessagingProcessing+0x3d6>
				remoteVar[0] = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // First Var
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	001a      	movs	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	3302      	adds	r3, #2
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	18d2      	adds	r2, r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	3303      	adds	r3, #3
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	18d2      	adds	r2, r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	3304      	adds	r3, #4
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	061b      	lsls	r3, r3, #24
 80093e2:	18d2      	adds	r2, r2, r3
 80093e4:	4b71      	ldr	r3, [pc, #452]	; (80095ac <Module_MessagingProcessing+0x438>)
 80093e6:	601a      	str	r2, [r3, #0]
				remoteVar[1] = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Second Var
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	3305      	adds	r3, #5
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	001a      	movs	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	3306      	adds	r3, #6
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	18d2      	adds	r2, r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	3307      	adds	r3, #7
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	041b      	lsls	r3, r3, #16
 8009402:	18d2      	adds	r2, r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	061b      	lsls	r3, r3, #24
 800940c:	18d2      	adds	r2, r2, r3
 800940e:	4b67      	ldr	r3, [pc, #412]	; (80095ac <Module_MessagingProcessing+0x438>)
 8009410:	605a      	str	r2, [r3, #4]
				remoteVar[2] = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Third Var
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	3309      	adds	r3, #9
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	001a      	movs	r2, r3
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	330a      	adds	r3, #10
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	18d2      	adds	r2, r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	330b      	adds	r3, #11
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	18d2      	adds	r2, r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	330c      	adds	r3, #12
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	061b      	lsls	r3, r3, #24
 8009436:	18d2      	adds	r2, r2, r3
 8009438:	4b5c      	ldr	r3, [pc, #368]	; (80095ac <Module_MessagingProcessing+0x438>)
 800943a:	609a      	str	r2, [r3, #8]
				  break;
 800943c:	e07f      	b.n	800953e <Module_MessagingProcessing+0x3ca>
				remoteVar[3] = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // Fourth Var
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	001a      	movs	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3302      	adds	r3, #2
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	18d2      	adds	r2, r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	3303      	adds	r3, #3
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	041b      	lsls	r3, r3, #16
 8009458:	18d2      	adds	r2, r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	3304      	adds	r3, #4
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	18d2      	adds	r2, r2, r3
 8009464:	4b51      	ldr	r3, [pc, #324]	; (80095ac <Module_MessagingProcessing+0x438>)
 8009466:	60da      	str	r2, [r3, #12]
				remoteVar[4] = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Fifth Var
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	3305      	adds	r3, #5
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	001a      	movs	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3306      	adds	r3, #6
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	18d2      	adds	r2, r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	3307      	adds	r3, #7
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	18d2      	adds	r2, r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	061b      	lsls	r3, r3, #24
 800948c:	18d2      	adds	r2, r2, r3
 800948e:	4b47      	ldr	r3, [pc, #284]	; (80095ac <Module_MessagingProcessing+0x438>)
 8009490:	611a      	str	r2, [r3, #16]
				remoteVar[5] = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Sixth Var
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3309      	adds	r3, #9
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	001a      	movs	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	330a      	adds	r3, #10
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	18d2      	adds	r2, r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	330b      	adds	r3, #11
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	18d2      	adds	r2, r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	061b      	lsls	r3, r3, #24
 80094b6:	18d2      	adds	r2, r2, r3
 80094b8:	4b3c      	ldr	r3, [pc, #240]	; (80095ac <Module_MessagingProcessing+0x438>)
 80094ba:	615a      	str	r2, [r3, #20]
					break;
 80094bc:	e03f      	b.n	800953e <Module_MessagingProcessing+0x3ca>
				remoteVar[6] = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // Seventh Var
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	001a      	movs	r2, r3
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	3302      	adds	r3, #2
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	18d2      	adds	r2, r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	3303      	adds	r3, #3
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	18d2      	adds	r2, r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	3304      	adds	r3, #4
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	18d2      	adds	r2, r2, r3
 80094e4:	4b31      	ldr	r3, [pc, #196]	; (80095ac <Module_MessagingProcessing+0x438>)
 80094e6:	619a      	str	r2, [r3, #24]
				remoteVar[7] = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Eighth Var
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	3305      	adds	r3, #5
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	001a      	movs	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	3306      	adds	r3, #6
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	18d2      	adds	r2, r2, r3
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	3307      	adds	r3, #7
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	18d2      	adds	r2, r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	061b      	lsls	r3, r3, #24
 800950c:	18d2      	adds	r2, r2, r3
 800950e:	4b27      	ldr	r3, [pc, #156]	; (80095ac <Module_MessagingProcessing+0x438>)
 8009510:	61da      	str	r2, [r3, #28]
				remoteVar[8] = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Ninth Var
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	3309      	adds	r3, #9
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	001a      	movs	r2, r3
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	330a      	adds	r3, #10
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	18d2      	adds	r2, r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	330b      	adds	r3, #11
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	041b      	lsls	r3, r3, #16
 800952c:	18d2      	adds	r2, r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	061b      	lsls	r3, r3, #24
 8009536:	18d2      	adds	r2, r2, r3
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <Module_MessagingProcessing+0x438>)
 800953a:	621a      	str	r2, [r3, #32]
					break;
 800953c:	46c0      	nop			; (mov r8, r8)
	 break;
 800953e:	e004      	b.n	800954a <Module_MessagingProcessing+0x3d6>
		default:
				result = Modbus_ERR_UnknownMessage;
 8009540:	230f      	movs	r3, #15
 8009542:	18fb      	adds	r3, r7, r3
 8009544:	2201      	movs	r2, #1
 8009546:	701a      	strb	r2, [r3, #0]
				break;
 8009548:	e000      	b.n	800954c <Module_MessagingProcessing+0x3d8>
	 break;
 800954a:	46c0      	nop			; (mov r8, r8)
}
				code=0;
 800954c:	1dbb      	adds	r3, r7, #6
 800954e:	2200      	movs	r2, #0
 8009550:	801a      	strh	r2, [r3, #0]
				return result;
 8009552:	230f      	movs	r3, #15
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	781b      	ldrb	r3, [r3, #0]


}
 8009558:	0018      	movs	r0, r3
 800955a:	46bd      	mov	sp, r7
 800955c:	b004      	add	sp, #16
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20004ad0 	.word	0x20004ad0
 8009564:	20004ad1 	.word	0x20004ad1
 8009568:	200049f8 	.word	0x200049f8
 800956c:	200049fa 	.word	0x200049fa
 8009570:	200049fc 	.word	0x200049fc
 8009574:	20004a70 	.word	0x20004a70
 8009578:	20004a58 	.word	0x20004a58
 800957c:	20004a5c 	.word	0x20004a5c
 8009580:	20004a5e 	.word	0x20004a5e
 8009584:	20004a60 	.word	0x20004a60
 8009588:	20004a62 	.word	0x20004a62
 800958c:	20004a64 	.word	0x20004a64
 8009590:	20004a66 	.word	0x20004a66
 8009594:	20004a68 	.word	0x20004a68
 8009598:	20004a6a 	.word	0x20004a6a
 800959c:	20004a6c 	.word	0x20004a6c
 80095a0:	200049fe 	.word	0x200049fe
 80095a4:	20004994 	.word	0x20004994
 80095a8:	20004a74 	.word	0x20004a74
 80095ac:	20004aac 	.word	0x20004aac

080095b0 <CheckTheFlag>:
void CheckTheFlag()
			  {
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af02      	add	r7, sp, #8
	Module_Status status;
				  switch (flag2) {
 80095b6:	4b9c      	ldr	r3, [pc, #624]	; (8009828 <CheckTheFlag+0x278>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d900      	bls.n	80095c0 <CheckTheFlag+0x10>
 80095be:	e12d      	b.n	800981c <CheckTheFlag+0x26c>
 80095c0:	009a      	lsls	r2, r3, #2
 80095c2:	4b9a      	ldr	r3, [pc, #616]	; (800982c <CheckTheFlag+0x27c>)
 80095c4:	18d3      	adds	r3, r2, r3
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	469f      	mov	pc, r3
							case 1:
 80095ca:	46c0      	nop			; (mov r8, r8)

							    do
							    {
							    	status =ReadModbusRegister(6, 0x200, 10, &ReadBuffer[0]);
 80095cc:	1dfc      	adds	r4, r7, #7
 80095ce:	4b98      	ldr	r3, [pc, #608]	; (8009830 <CheckTheFlag+0x280>)
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	0091      	lsls	r1, r2, #2
 80095d4:	220a      	movs	r2, #10
 80095d6:	2006      	movs	r0, #6
 80095d8:	f7ff fa46 	bl	8008a68 <ReadModbusRegister>
 80095dc:	0003      	movs	r3, r0
 80095de:	7023      	strb	r3, [r4, #0]
							    }
							    while( status != Modbus_OK );
 80095e0:	1dfb      	adds	r3, r7, #7
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f0      	bne.n	80095ca <CheckTheFlag+0x1a>
					        	memcpy(&messageParams[1],&ReadBuffer[4],sizeof (ReadBuffer[4]) ); // First var
 80095e8:	4992      	ldr	r1, [pc, #584]	; (8009834 <CheckTheFlag+0x284>)
 80095ea:	4b93      	ldr	r3, [pc, #588]	; (8009838 <CheckTheFlag+0x288>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	0018      	movs	r0, r3
 80095f0:	f003 fcbc 	bl	800cf6c <memcpy>
								memcpy(&messageParams[3],&ReadBuffer[5],sizeof (ReadBuffer[5]) );
 80095f4:	4991      	ldr	r1, [pc, #580]	; (800983c <CheckTheFlag+0x28c>)
 80095f6:	4b92      	ldr	r3, [pc, #584]	; (8009840 <CheckTheFlag+0x290>)
 80095f8:	2202      	movs	r2, #2
 80095fa:	0018      	movs	r0, r3
 80095fc:	f003 fcb6 	bl	800cf6c <memcpy>

				//					memcpy(&uint32_t uint32_number ,&messageParams[ 4 byte ],	sizeof (uint32_number)) ;
				//					memcpy(&float float_number ,&uint32_number,sizeof (float_number));

								memcpy(&messageParams[5],&ReadBuffer[6],sizeof (ReadBuffer[6]) );// Second var
 8009600:	4990      	ldr	r1, [pc, #576]	; (8009844 <CheckTheFlag+0x294>)
 8009602:	4b91      	ldr	r3, [pc, #580]	; (8009848 <CheckTheFlag+0x298>)
 8009604:	2202      	movs	r2, #2
 8009606:	0018      	movs	r0, r3
 8009608:	f003 fcb0 	bl	800cf6c <memcpy>
								memcpy(&messageParams[7],&ReadBuffer[7],sizeof (ReadBuffer[7]) );
 800960c:	498f      	ldr	r1, [pc, #572]	; (800984c <CheckTheFlag+0x29c>)
 800960e:	4b90      	ldr	r3, [pc, #576]	; (8009850 <CheckTheFlag+0x2a0>)
 8009610:	2202      	movs	r2, #2
 8009612:	0018      	movs	r0, r3
 8009614:	f003 fcaa 	bl	800cf6c <memcpy>


				                memcpy(&messageParams[9],&ReadBuffer[8],sizeof (ReadBuffer[8]) );// Third var
 8009618:	498e      	ldr	r1, [pc, #568]	; (8009854 <CheckTheFlag+0x2a4>)
 800961a:	4b8f      	ldr	r3, [pc, #572]	; (8009858 <CheckTheFlag+0x2a8>)
 800961c:	2202      	movs	r2, #2
 800961e:	0018      	movs	r0, r3
 8009620:	f003 fca4 	bl	800cf6c <memcpy>
								memcpy(&messageParams[11],&ReadBuffer[9],sizeof (ReadBuffer[9]) );
 8009624:	498d      	ldr	r1, [pc, #564]	; (800985c <CheckTheFlag+0x2ac>)
 8009626:	4b8e      	ldr	r3, [pc, #568]	; (8009860 <CheckTheFlag+0x2b0>)
 8009628:	2202      	movs	r2, #2
 800962a:	0018      	movs	r0, r3
 800962c:	f003 fc9e 	bl	800cf6c <memcpy>

								memcpy(&messageParams[13],&ReadBuffer[6],sizeof (ReadBuffer[6]) );// Second var
 8009630:	4984      	ldr	r1, [pc, #528]	; (8009844 <CheckTheFlag+0x294>)
 8009632:	4b8c      	ldr	r3, [pc, #560]	; (8009864 <CheckTheFlag+0x2b4>)
 8009634:	2202      	movs	r2, #2
 8009636:	0018      	movs	r0, r3
 8009638:	f003 fc98 	bl	800cf6c <memcpy>
								memcpy(&messageParams[15],&ReadBuffer[7],sizeof (ReadBuffer[7]) );
 800963c:	4983      	ldr	r1, [pc, #524]	; (800984c <CheckTheFlag+0x29c>)
 800963e:	4b8a      	ldr	r3, [pc, #552]	; (8009868 <CheckTheFlag+0x2b8>)
 8009640:	2202      	movs	r2, #2
 8009642:	0018      	movs	r0, r3
 8009644:	f003 fc92 	bl	800cf6c <memcpy>

				                memcpy(&messageParams[17],&ReadBuffer[8],sizeof (ReadBuffer[8]) );// Third var
 8009648:	4982      	ldr	r1, [pc, #520]	; (8009854 <CheckTheFlag+0x2a4>)
 800964a:	4b88      	ldr	r3, [pc, #544]	; (800986c <CheckTheFlag+0x2bc>)
 800964c:	2202      	movs	r2, #2
 800964e:	0018      	movs	r0, r3
 8009650:	f003 fc8c 	bl	800cf6c <memcpy>

				                do
				                { status=SendMessage(Port , CODE_READ_REMOTE_ModBus_RESPONSE ,2 , messageParams ,19);}
 8009654:	4b86      	ldr	r3, [pc, #536]	; (8009870 <CheckTheFlag+0x2c0>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	b298      	uxth	r0, r3
 800965a:	1dfc      	adds	r4, r7, #7
 800965c:	4b85      	ldr	r3, [pc, #532]	; (8009874 <CheckTheFlag+0x2c4>)
 800965e:	2213      	movs	r2, #19
 8009660:	9200      	str	r2, [sp, #0]
 8009662:	2202      	movs	r2, #2
 8009664:	2124      	movs	r1, #36	; 0x24
 8009666:	f7ff fae3 	bl	8008c30 <SendMessage>
 800966a:	0003      	movs	r3, r0
 800966c:	7023      	strb	r3, [r4, #0]
											    while( status != Modbus_OK );
 800966e:	1dfb      	adds	r3, r7, #7
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1ee      	bne.n	8009654 <CheckTheFlag+0xa4>
									flag1=0;
 8009676:	4b80      	ldr	r3, [pc, #512]	; (8009878 <CheckTheFlag+0x2c8>)
 8009678:	2200      	movs	r2, #0
 800967a:	701a      	strb	r2, [r3, #0]
									flag2=0;
 800967c:	4b6a      	ldr	r3, [pc, #424]	; (8009828 <CheckTheFlag+0x278>)
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]

								break;
 8009682:	e0cc      	b.n	800981e <CheckTheFlag+0x26e>
							case 2:
 8009684:	46c0      	nop			; (mov r8, r8)
								do
								{
									 status=WriteModbusRegister(Slave_add, Reg_address, WriteBuffer);
 8009686:	4b7d      	ldr	r3, [pc, #500]	; (800987c <CheckTheFlag+0x2cc>)
 8009688:	7818      	ldrb	r0, [r3, #0]
 800968a:	4b7d      	ldr	r3, [pc, #500]	; (8009880 <CheckTheFlag+0x2d0>)
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	0019      	movs	r1, r3
 8009690:	4b7c      	ldr	r3, [pc, #496]	; (8009884 <CheckTheFlag+0x2d4>)
 8009692:	1dfc      	adds	r4, r7, #7
 8009694:	001a      	movs	r2, r3
 8009696:	f7ff fa25 	bl	8008ae4 <WriteModbusRegister>
 800969a:	0003      	movs	r3, r0
 800969c:	7023      	strb	r3, [r4, #0]
								}
								while( status != Modbus_OK );
 800969e:	1dfb      	adds	r3, r7, #7
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1ee      	bne.n	8009684 <CheckTheFlag+0xd4>
									flag1=0;
 80096a6:	4b74      	ldr	r3, [pc, #464]	; (8009878 <CheckTheFlag+0x2c8>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	701a      	strb	r2, [r3, #0]
									flag2=0;
 80096ac:	4b5e      	ldr	r3, [pc, #376]	; (8009828 <CheckTheFlag+0x278>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
								break;
 80096b2:	e0b4      	b.n	800981e <CheckTheFlag+0x26e>
							case 3:
 80096b4:	46c0      	nop			; (mov r8, r8)
								do
								{
									 status=WriteModbusMultiRegisters(Slave_add, Reg_address, Nu_regiters, WriteBuffer);
 80096b6:	4b71      	ldr	r3, [pc, #452]	; (800987c <CheckTheFlag+0x2cc>)
 80096b8:	7818      	ldrb	r0, [r3, #0]
 80096ba:	4b71      	ldr	r3, [pc, #452]	; (8009880 <CheckTheFlag+0x2d0>)
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	0019      	movs	r1, r3
 80096c0:	4b71      	ldr	r3, [pc, #452]	; (8009888 <CheckTheFlag+0x2d8>)
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	1dfc      	adds	r4, r7, #7
 80096c8:	4b6e      	ldr	r3, [pc, #440]	; (8009884 <CheckTheFlag+0x2d4>)
 80096ca:	f7ff fa3f 	bl	8008b4c <WriteModbusMultiRegisters>
 80096ce:	0003      	movs	r3, r0
 80096d0:	7023      	strb	r3, [r4, #0]
								}
								while( status != Modbus_OK );
 80096d2:	1dfb      	adds	r3, r7, #7
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1ec      	bne.n	80096b4 <CheckTheFlag+0x104>
										flag1=0;
 80096da:	4b67      	ldr	r3, [pc, #412]	; (8009878 <CheckTheFlag+0x2c8>)
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]
										flag2=0;
 80096e0:	4b51      	ldr	r3, [pc, #324]	; (8009828 <CheckTheFlag+0x278>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]

								break;
 80096e6:	e09a      	b.n	800981e <CheckTheFlag+0x26e>
							case 4:


					 status=SetTimeOut(TimeOut);
 80096e8:	4b68      	ldr	r3, [pc, #416]	; (800988c <CheckTheFlag+0x2dc>)
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	1dfc      	adds	r4, r7, #7
 80096ee:	0018      	movs	r0, r3
 80096f0:	f7ff fa6a 	bl	8008bc8 <SetTimeOut>
 80096f4:	0003      	movs	r3, r0
 80096f6:	7023      	strb	r3, [r4, #0]

					break;
 80096f8:	e091      	b.n	800981e <CheckTheFlag+0x26e>

							case 5 :

										switch(rank)
 80096fa:	4b65      	ldr	r3, [pc, #404]	; (8009890 <CheckTheFlag+0x2e0>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d04f      	beq.n	80097a2 <CheckTheFlag+0x1f2>
 8009702:	dc73      	bgt.n	80097ec <CheckTheFlag+0x23c>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <CheckTheFlag+0x15e>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d025      	beq.n	8009758 <CheckTheFlag+0x1a8>
 800970c:	e06e      	b.n	80097ec <CheckTheFlag+0x23c>
										{

											case 0 :

									        	memcpy(&messageParams[1],&ReadVar[0],sizeof (ReadVar[4]) ); // First var
 800970e:	4961      	ldr	r1, [pc, #388]	; (8009894 <CheckTheFlag+0x2e4>)
 8009710:	4b49      	ldr	r3, [pc, #292]	; (8009838 <CheckTheFlag+0x288>)
 8009712:	2202      	movs	r2, #2
 8009714:	0018      	movs	r0, r3
 8009716:	f003 fc29 	bl	800cf6c <memcpy>
												memcpy(&messageParams[3],&ReadVar[5],sizeof (ReadVar[5]) );
 800971a:	495f      	ldr	r1, [pc, #380]	; (8009898 <CheckTheFlag+0x2e8>)
 800971c:	4b48      	ldr	r3, [pc, #288]	; (8009840 <CheckTheFlag+0x290>)
 800971e:	2202      	movs	r2, #2
 8009720:	0018      	movs	r0, r3
 8009722:	f003 fc23 	bl	800cf6c <memcpy>

								//					memcpy(&uint32_t uint32_number ,&messageParams[ 4 byte ],	sizeof (uint32_number)) ;
								//					memcpy(&float float_number ,&uint32_number,sizeof (float_number));

												memcpy(&messageParams[5],&ReadVar[6],sizeof (ReadVar[6]) );// Second var
 8009726:	495d      	ldr	r1, [pc, #372]	; (800989c <CheckTheFlag+0x2ec>)
 8009728:	4b47      	ldr	r3, [pc, #284]	; (8009848 <CheckTheFlag+0x298>)
 800972a:	2202      	movs	r2, #2
 800972c:	0018      	movs	r0, r3
 800972e:	f003 fc1d 	bl	800cf6c <memcpy>
												memcpy(&messageParams[7],&ReadVar[7],sizeof (ReadVar[7]) );
 8009732:	495b      	ldr	r1, [pc, #364]	; (80098a0 <CheckTheFlag+0x2f0>)
 8009734:	4b46      	ldr	r3, [pc, #280]	; (8009850 <CheckTheFlag+0x2a0>)
 8009736:	2202      	movs	r2, #2
 8009738:	0018      	movs	r0, r3
 800973a:	f003 fc17 	bl	800cf6c <memcpy>


								                memcpy(&messageParams[9],&ReadVar[8],sizeof (ReadVar[8]) );// Third var
 800973e:	4959      	ldr	r1, [pc, #356]	; (80098a4 <CheckTheFlag+0x2f4>)
 8009740:	4b45      	ldr	r3, [pc, #276]	; (8009858 <CheckTheFlag+0x2a8>)
 8009742:	2202      	movs	r2, #2
 8009744:	0018      	movs	r0, r3
 8009746:	f003 fc11 	bl	800cf6c <memcpy>
												memcpy(&messageParams[11],&ReadVar[9],sizeof (ReadVar[9]) );
 800974a:	4957      	ldr	r1, [pc, #348]	; (80098a8 <CheckTheFlag+0x2f8>)
 800974c:	4b44      	ldr	r3, [pc, #272]	; (8009860 <CheckTheFlag+0x2b0>)
 800974e:	2202      	movs	r2, #2
 8009750:	0018      	movs	r0, r3
 8009752:	f003 fc0b 	bl	800cf6c <memcpy>


												break;
 8009756:	e049      	b.n	80097ec <CheckTheFlag+0x23c>


											case 1 :
								                /***********************************/
									        	memcpy(&messageParams[1],&ReadVar[10],sizeof (ReadVar[10]) ); // Fourth var
 8009758:	4954      	ldr	r1, [pc, #336]	; (80098ac <CheckTheFlag+0x2fc>)
 800975a:	4b37      	ldr	r3, [pc, #220]	; (8009838 <CheckTheFlag+0x288>)
 800975c:	2202      	movs	r2, #2
 800975e:	0018      	movs	r0, r3
 8009760:	f003 fc04 	bl	800cf6c <memcpy>
												memcpy(&messageParams[3],&ReadVar[11],sizeof (ReadVar[11]) );
 8009764:	4952      	ldr	r1, [pc, #328]	; (80098b0 <CheckTheFlag+0x300>)
 8009766:	4b36      	ldr	r3, [pc, #216]	; (8009840 <CheckTheFlag+0x290>)
 8009768:	2202      	movs	r2, #2
 800976a:	0018      	movs	r0, r3
 800976c:	f003 fbfe 	bl	800cf6c <memcpy>


												memcpy(&messageParams[5],&ReadVar[12],sizeof (ReadVar[12]) );// Fifth var
 8009770:	4950      	ldr	r1, [pc, #320]	; (80098b4 <CheckTheFlag+0x304>)
 8009772:	4b35      	ldr	r3, [pc, #212]	; (8009848 <CheckTheFlag+0x298>)
 8009774:	2202      	movs	r2, #2
 8009776:	0018      	movs	r0, r3
 8009778:	f003 fbf8 	bl	800cf6c <memcpy>
												memcpy(&messageParams[7],&ReadVar[13],sizeof (ReadVar[13]) );
 800977c:	494e      	ldr	r1, [pc, #312]	; (80098b8 <CheckTheFlag+0x308>)
 800977e:	4b34      	ldr	r3, [pc, #208]	; (8009850 <CheckTheFlag+0x2a0>)
 8009780:	2202      	movs	r2, #2
 8009782:	0018      	movs	r0, r3
 8009784:	f003 fbf2 	bl	800cf6c <memcpy>


								                memcpy(&messageParams[9],&ReadVar[14],sizeof (ReadVar[14]) );// Sixth var
 8009788:	494c      	ldr	r1, [pc, #304]	; (80098bc <CheckTheFlag+0x30c>)
 800978a:	4b33      	ldr	r3, [pc, #204]	; (8009858 <CheckTheFlag+0x2a8>)
 800978c:	2202      	movs	r2, #2
 800978e:	0018      	movs	r0, r3
 8009790:	f003 fbec 	bl	800cf6c <memcpy>
												memcpy(&messageParams[11],&ReadVar[15],sizeof (ReadVar[15]) );
 8009794:	494a      	ldr	r1, [pc, #296]	; (80098c0 <CheckTheFlag+0x310>)
 8009796:	4b32      	ldr	r3, [pc, #200]	; (8009860 <CheckTheFlag+0x2b0>)
 8009798:	2202      	movs	r2, #2
 800979a:	0018      	movs	r0, r3
 800979c:	f003 fbe6 	bl	800cf6c <memcpy>

												break;
 80097a0:	e024      	b.n	80097ec <CheckTheFlag+0x23c>



											case 2 :
												/***********************************/
									        	memcpy(&messageParams[1],&ReadVar[16],sizeof (ReadVar[16]) ); // Seventh var
 80097a2:	4948      	ldr	r1, [pc, #288]	; (80098c4 <CheckTheFlag+0x314>)
 80097a4:	4b24      	ldr	r3, [pc, #144]	; (8009838 <CheckTheFlag+0x288>)
 80097a6:	2202      	movs	r2, #2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f003 fbdf 	bl	800cf6c <memcpy>
												memcpy(&messageParams[3],&ReadVar[17],sizeof (ReadVar[17]) );
 80097ae:	4946      	ldr	r1, [pc, #280]	; (80098c8 <CheckTheFlag+0x318>)
 80097b0:	4b23      	ldr	r3, [pc, #140]	; (8009840 <CheckTheFlag+0x290>)
 80097b2:	2202      	movs	r2, #2
 80097b4:	0018      	movs	r0, r3
 80097b6:	f003 fbd9 	bl	800cf6c <memcpy>


												memcpy(&messageParams[5],&ReadVar[18],sizeof (ReadVar[18]) );// Eighth var
 80097ba:	4944      	ldr	r1, [pc, #272]	; (80098cc <CheckTheFlag+0x31c>)
 80097bc:	4b22      	ldr	r3, [pc, #136]	; (8009848 <CheckTheFlag+0x298>)
 80097be:	2202      	movs	r2, #2
 80097c0:	0018      	movs	r0, r3
 80097c2:	f003 fbd3 	bl	800cf6c <memcpy>
												memcpy(&messageParams[7],&ReadVar[19],sizeof (ReadVar[19]) );
 80097c6:	4942      	ldr	r1, [pc, #264]	; (80098d0 <CheckTheFlag+0x320>)
 80097c8:	4b21      	ldr	r3, [pc, #132]	; (8009850 <CheckTheFlag+0x2a0>)
 80097ca:	2202      	movs	r2, #2
 80097cc:	0018      	movs	r0, r3
 80097ce:	f003 fbcd 	bl	800cf6c <memcpy>


								                memcpy(&messageParams[9],&ReadVar[20],sizeof (ReadVar[20]) );// Ninth var
 80097d2:	4940      	ldr	r1, [pc, #256]	; (80098d4 <CheckTheFlag+0x324>)
 80097d4:	4b20      	ldr	r3, [pc, #128]	; (8009858 <CheckTheFlag+0x2a8>)
 80097d6:	2202      	movs	r2, #2
 80097d8:	0018      	movs	r0, r3
 80097da:	f003 fbc7 	bl	800cf6c <memcpy>
												memcpy(&messageParams[11],&ReadVar[21],sizeof (ReadVar[21]) );
 80097de:	493e      	ldr	r1, [pc, #248]	; (80098d8 <CheckTheFlag+0x328>)
 80097e0:	4b1f      	ldr	r3, [pc, #124]	; (8009860 <CheckTheFlag+0x2b0>)
 80097e2:	2202      	movs	r2, #2
 80097e4:	0018      	movs	r0, r3
 80097e6:	f003 fbc1 	bl	800cf6c <memcpy>


												  break;
 80097ea:	46c0      	nop			; (mov r8, r8)


									}
								do
								{
									 status=SendMessage(Port , CODE_READ_REMOTE_ModBus_RESPONSE ,2 , messageParams ,13);
 80097ec:	4b20      	ldr	r3, [pc, #128]	; (8009870 <CheckTheFlag+0x2c0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	b298      	uxth	r0, r3
 80097f2:	1dfc      	adds	r4, r7, #7
 80097f4:	4b1f      	ldr	r3, [pc, #124]	; (8009874 <CheckTheFlag+0x2c4>)
 80097f6:	220d      	movs	r2, #13
 80097f8:	9200      	str	r2, [sp, #0]
 80097fa:	2202      	movs	r2, #2
 80097fc:	2124      	movs	r1, #36	; 0x24
 80097fe:	f7ff fa17 	bl	8008c30 <SendMessage>
 8009802:	0003      	movs	r3, r0
 8009804:	7023      	strb	r3, [r4, #0]
						     	}
								while( status != Modbus_OK );
 8009806:	1dfb      	adds	r3, r7, #7
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1ee      	bne.n	80097ec <CheckTheFlag+0x23c>
								flag1=0;
 800980e:	4b1a      	ldr	r3, [pc, #104]	; (8009878 <CheckTheFlag+0x2c8>)
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
								flag2=0;
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <CheckTheFlag+0x278>)
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
					break;
 800981a:	e000      	b.n	800981e <CheckTheFlag+0x26e>
							default:

								break;
 800981c:	46c0      	nop			; (mov r8, r8)
						}

			  }
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	b003      	add	sp, #12
 8009824:	bd90      	pop	{r4, r7, pc}
 8009826:	46c0      	nop			; (mov r8, r8)
 8009828:	20004ad1 	.word	0x20004ad1
 800982c:	0800d134 	.word	0x0800d134
 8009830:	20004a00 	.word	0x20004a00
 8009834:	20004a08 	.word	0x20004a08
 8009838:	20004a35 	.word	0x20004a35
 800983c:	20004a0a 	.word	0x20004a0a
 8009840:	20004a37 	.word	0x20004a37
 8009844:	20004a0c 	.word	0x20004a0c
 8009848:	20004a39 	.word	0x20004a39
 800984c:	20004a0e 	.word	0x20004a0e
 8009850:	20004a3b 	.word	0x20004a3b
 8009854:	20004a10 	.word	0x20004a10
 8009858:	20004a3d 	.word	0x20004a3d
 800985c:	20004a12 	.word	0x20004a12
 8009860:	20004a3f 	.word	0x20004a3f
 8009864:	20004a41 	.word	0x20004a41
 8009868:	20004a43 	.word	0x20004a43
 800986c:	20004a45 	.word	0x20004a45
 8009870:	20004a70 	.word	0x20004a70
 8009874:	20004a34 	.word	0x20004a34
 8009878:	20004ad0 	.word	0x20004ad0
 800987c:	200049f8 	.word	0x200049f8
 8009880:	200049fa 	.word	0x200049fa
 8009884:	20004a5c 	.word	0x20004a5c
 8009888:	200049fc 	.word	0x200049fc
 800988c:	200049fe 	.word	0x200049fe
 8009890:	20004a74 	.word	0x20004a74
 8009894:	20004a78 	.word	0x20004a78
 8009898:	20004a82 	.word	0x20004a82
 800989c:	20004a84 	.word	0x20004a84
 80098a0:	20004a86 	.word	0x20004a86
 80098a4:	20004a88 	.word	0x20004a88
 80098a8:	20004a8a 	.word	0x20004a8a
 80098ac:	20004a8c 	.word	0x20004a8c
 80098b0:	20004a8e 	.word	0x20004a8e
 80098b4:	20004a90 	.word	0x20004a90
 80098b8:	20004a92 	.word	0x20004a92
 80098bc:	20004a94 	.word	0x20004a94
 80098c0:	20004a96 	.word	0x20004a96
 80098c4:	20004a98 	.word	0x20004a98
 80098c8:	20004a9a 	.word	0x20004a9a
 80098cc:	20004a9c 	.word	0x20004a9c
 80098d0:	20004a9e 	.word	0x20004a9e
 80098d4:	20004aa0 	.word	0x20004aa0
 80098d8:	20004aa2 	.word	0x20004aa2

080098dc <MasterLoop>:
Module_Status s=0 ;
uint16_t  n[5] ;
Module_Status eStatus;

void MasterLoop ()
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
	if(1==flag1)
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <MasterLoop+0x18>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <MasterLoop+0x10>
	{CheckTheFlag();}
 80098e8:	f7ff fe62 	bl	80095b0 <CheckTheFlag>

}
 80098ec:	46c0      	nop			; (mov r8, r8)
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	20004ad0 	.word	0x20004ad0

080098f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	f++;
 8009900:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <HAL_UART_RxCpltCallback+0xd8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <HAL_UART_RxCpltCallback+0xd8>)
 8009908:	601a      	str	r2, [r3, #0]
	uint8_t port ;
  /* Prevent unused argument(s) compilation warning */
	rxMessaging.Port=GetPort(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	0018      	movs	r0, r3
 800990e:	f7fe ffe3 	bl	80088d8 <GetPort>
 8009912:	0003      	movs	r3, r0
 8009914:	001a      	movs	r2, r3
 8009916:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <HAL_UART_RxCpltCallback+0xdc>)
 8009918:	705a      	strb	r2, [r3, #1]
	if (0<rxMessaging.Port && 6>rxMessaging.Port)
 800991a:	4b2e      	ldr	r3, [pc, #184]	; (80099d4 <HAL_UART_RxCpltCallback+0xdc>)
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d006      	beq.n	8009930 <HAL_UART_RxCpltCallback+0x38>
 8009922:	4b2c      	ldr	r3, [pc, #176]	; (80099d4 <HAL_UART_RxCpltCallback+0xdc>)
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b05      	cmp	r3, #5
 8009928:	d802      	bhi.n	8009930 <HAL_UART_RxCpltCallback+0x38>
	{
		rxMessaging.Flag=1;
 800992a:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <HAL_UART_RxCpltCallback+0xdc>)
 800992c:	2201      	movs	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
	}


	if(huart == P1uart)
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4b29      	ldr	r3, [pc, #164]	; (80099d8 <HAL_UART_RxCpltCallback+0xe0>)
 8009934:	429a      	cmp	r2, r3
 8009936:	d109      	bne.n	800994c <HAL_UART_RxCpltCallback+0x54>
	{
		port=1;
 8009938:	210f      	movs	r1, #15
 800993a:	187b      	adds	r3, r7, r1
 800993c:	2201      	movs	r2, #1
 800993e:	701a      	strb	r2, [r3, #0]
		MasterMessagingParser(port);
 8009940:	187b      	adds	r3, r7, r1
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	0018      	movs	r0, r3
 8009946:	f7ff fb41 	bl	8008fcc <MasterMessagingParser>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800994a:	e03d      	b.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
	else if (huart == P2uart)
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	4b23      	ldr	r3, [pc, #140]	; (80099dc <HAL_UART_RxCpltCallback+0xe4>)
 8009950:	429a      	cmp	r2, r3
 8009952:	d109      	bne.n	8009968 <HAL_UART_RxCpltCallback+0x70>
		port=2;
 8009954:	210f      	movs	r1, #15
 8009956:	187b      	adds	r3, r7, r1
 8009958:	2202      	movs	r2, #2
 800995a:	701a      	strb	r2, [r3, #0]
		MasterMessagingParser(port);
 800995c:	187b      	adds	r3, r7, r1
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	0018      	movs	r0, r3
 8009962:	f7ff fb33 	bl	8008fcc <MasterMessagingParser>
}
 8009966:	e02f      	b.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
	else if (huart == P3uart)
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <HAL_UART_RxCpltCallback+0xe8>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d109      	bne.n	8009984 <HAL_UART_RxCpltCallback+0x8c>
		port=3;
 8009970:	210f      	movs	r1, #15
 8009972:	187b      	adds	r3, r7, r1
 8009974:	2203      	movs	r2, #3
 8009976:	701a      	strb	r2, [r3, #0]
		MasterMessagingParser(port);
 8009978:	187b      	adds	r3, r7, r1
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	0018      	movs	r0, r3
 800997e:	f7ff fb25 	bl	8008fcc <MasterMessagingParser>
}
 8009982:	e021      	b.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
	else if (huart == P4uart)
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	4b17      	ldr	r3, [pc, #92]	; (80099e4 <HAL_UART_RxCpltCallback+0xec>)
 8009988:	429a      	cmp	r2, r3
 800998a:	d109      	bne.n	80099a0 <HAL_UART_RxCpltCallback+0xa8>
		port=4;
 800998c:	210f      	movs	r1, #15
 800998e:	187b      	adds	r3, r7, r1
 8009990:	2204      	movs	r2, #4
 8009992:	701a      	strb	r2, [r3, #0]
		MasterMessagingParser(port);
 8009994:	187b      	adds	r3, r7, r1
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	0018      	movs	r0, r3
 800999a:	f7ff fb17 	bl	8008fcc <MasterMessagingParser>
}
 800999e:	e013      	b.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
	else if (huart == P5uart)
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <HAL_UART_RxCpltCallback+0xf0>)
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d109      	bne.n	80099bc <HAL_UART_RxCpltCallback+0xc4>
		port=5;
 80099a8:	210f      	movs	r1, #15
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	2205      	movs	r2, #5
 80099ae:	701a      	strb	r2, [r3, #0]
		MasterMessagingParser(port);
 80099b0:	187b      	adds	r3, r7, r1
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	0018      	movs	r0, r3
 80099b6:	f7ff fb09 	bl	8008fcc <MasterMessagingParser>
}
 80099ba:	e005      	b.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
		if (huart == P_RS485uart)
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <HAL_UART_RxCpltCallback+0xf4>)
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d101      	bne.n	80099c8 <HAL_UART_RxCpltCallback+0xd0>
		prvvMBPUSART1_RXNE_ISR();          /* Call Modbus protocol port ISR */
 80099c4:	f002 ff7e 	bl	800c8c4 <prvvMBPUSART1_RXNE_ISR>
}
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b004      	add	sp, #16
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20004ad4 	.word	0x20004ad4
 80099d4:	2000494c 	.word	0x2000494c
 80099d8:	20000290 	.word	0x20000290
 80099dc:	20000180 	.word	0x20000180
 80099e0:	200003a0 	.word	0x200003a0
 80099e4:	20000208 	.word	0x20000208
 80099e8:	20000318 	.word	0x20000318
 80099ec:	200000f8 	.word	0x200000f8

080099f0 <pxMBMGetNewHdl>:

#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    xMBMInternalHandle * pxMBMGetNewHdl( void )
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENORES, eStatus2;
 80099f6:	230f      	movs	r3, #15
 80099f8:	18fb      	adds	r3, r7, r3
 80099fa:	2204      	movs	r2, #4
 80099fc:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]
    UBYTE           ubIdx;

    MBP_ENTER_CRITICAL_SECTION(  );
 8009a02:	f002 fcd2 	bl	800c3aa <vMBPEnterCritical>
    if( !bIsInitalized )
 8009a06:	4b5e      	ldr	r3, [pc, #376]	; (8009b80 <pxMBMGetNewHdl+0x190>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d155      	bne.n	8009aba <pxMBMGetNewHdl+0xca>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8009a0e:	1dfb      	adds	r3, r7, #7
 8009a10:	2200      	movs	r2, #0
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	e04a      	b.n	8009aac <pxMBMGetNewHdl+0xbc>
        {
            MBM_RESET_HDL( &xMBMInternalHdl[ubIdx] );
 8009a16:	1dfb      	adds	r3, r7, #7
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	4b5a      	ldr	r3, [pc, #360]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a1c:	0152      	lsls	r2, r2, #5
 8009a1e:	2100      	movs	r1, #0
 8009a20:	50d1      	str	r1, [r2, r3]
 8009a22:	1dfb      	adds	r3, r7, #7
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	4a57      	ldr	r2, [pc, #348]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a28:	015b      	lsls	r3, r3, #5
 8009a2a:	18d3      	adds	r3, r2, r3
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	1dfb      	adds	r3, r7, #7
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4a53      	ldr	r2, [pc, #332]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a38:	015b      	lsls	r3, r3, #5
 8009a3a:	18d3      	adds	r3, r2, r3
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	1dfb      	adds	r3, r7, #7
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	4a4f      	ldr	r2, [pc, #316]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a48:	015b      	lsls	r3, r3, #5
 8009a4a:	18d3      	adds	r3, r2, r3
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	1dfb      	adds	r3, r7, #7
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	4a4b      	ldr	r2, [pc, #300]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a58:	015b      	lsls	r3, r3, #5
 8009a5a:	18d3      	adds	r3, r2, r3
 8009a5c:	3310      	adds	r3, #16
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	1dfb      	adds	r3, r7, #7
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	4a47      	ldr	r2, [pc, #284]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a68:	015b      	lsls	r3, r3, #5
 8009a6a:	18d3      	adds	r3, r2, r3
 8009a6c:	330e      	adds	r3, #14
 8009a6e:	2200      	movs	r2, #0
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	1dfb      	adds	r3, r7, #7
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	4a43      	ldr	r2, [pc, #268]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a78:	015b      	lsls	r3, r3, #5
 8009a7a:	18d3      	adds	r3, r2, r3
 8009a7c:	3314      	adds	r3, #20
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	1dfb      	adds	r3, r7, #7
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	4a3f      	ldr	r2, [pc, #252]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a88:	015b      	lsls	r3, r3, #5
 8009a8a:	18d3      	adds	r3, r2, r3
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	1dfb      	adds	r3, r7, #7
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	4a3b      	ldr	r2, [pc, #236]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009a98:	015b      	lsls	r3, r3, #5
 8009a9a:	18d3      	adds	r3, r2, r3
 8009a9c:	331c      	adds	r3, #28
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8009aa2:	1dfb      	adds	r3, r7, #7
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	3201      	adds	r2, #1
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	1dfb      	adds	r3, r7, #7
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d9b0      	bls.n	8009a16 <pxMBMGetNewHdl+0x26>
        }
        bIsInitalized = TRUE;
 8009ab4:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <pxMBMGetNewHdl+0x190>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
    }
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8009aba:	1dfb      	adds	r3, r7, #7
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	e042      	b.n	8009b48 <pxMBMGetNewHdl+0x158>
    {
        if( IDX_INVALID == xMBMInternalHdl[ubIdx].ubIdx )
 8009ac2:	1dfb      	adds	r3, r7, #7
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	4a2f      	ldr	r2, [pc, #188]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009ac8:	015b      	lsls	r3, r3, #5
 8009aca:	18d3      	adds	r3, r2, r3
 8009acc:	330c      	adds	r3, #12
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2bff      	cmp	r3, #255	; 0xff
 8009ad2:	d134      	bne.n	8009b3e <pxMBMGetNewHdl+0x14e>
        {
            pxIntHdl = &xMBMInternalHdl[ubIdx];
 8009ad4:	1dfb      	adds	r3, r7, #7
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	4b2a      	ldr	r3, [pc, #168]	; (8009b84 <pxMBMGetNewHdl+0x194>)
 8009adc:	18d3      	adds	r3, r2, r3
 8009ade:	60bb      	str	r3, [r7, #8]
            pxIntHdl->ubIdx = ubIdx;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	1dfa      	adds	r2, r7, #7
 8009ae4:	7812      	ldrb	r2, [r2, #0]
 8009ae6:	731a      	strb	r2, [r3, #12]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
            pxIntHdl->usSlaveTimeoutMS = MBM_DEFAULT_RESPONSE_TIMEOUT;
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_TIMEOUT_RESOLUTION_MS, bMBMResponseTimeoutCB, pxIntHdl ) ) )
#else
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_DEFAULT_RESPONSE_TIMEOUT, bMBMResponseTimeoutCB, pxIntHdl ) ) )
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	1dbc      	adds	r4, r7, #6
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <pxMBMGetNewHdl+0x198>)
 8009af0:	21fa      	movs	r1, #250	; 0xfa
 8009af2:	0049      	lsls	r1, r1, #1
 8009af4:	f002 ff54 	bl	800c9a0 <eMBPTimerInit>
 8009af8:	0003      	movs	r3, r0
 8009afa:	7023      	strb	r3, [r4, #0]
 8009afc:	1dbb      	adds	r3, r7, #6
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d005      	beq.n	8009b10 <pxMBMGetNewHdl+0x120>
#endif
            {
                eStatus = eStatus2;
 8009b04:	230f      	movs	r3, #15
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	1dba      	adds	r2, r7, #6
 8009b0a:	7812      	ldrb	r2, [r2, #0]
 8009b0c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_ENOERR;
            }
            break;
 8009b0e:	e01f      	b.n	8009b50 <pxMBMGetNewHdl+0x160>
            else if( MB_ENOERR != ( eStatus2 = eMBPEventCreate( &( pxIntHdl->xFrameEventHdl ) ) ) )
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3304      	adds	r3, #4
 8009b14:	1dbc      	adds	r4, r7, #6
 8009b16:	0018      	movs	r0, r3
 8009b18:	f002 fb3e 	bl	800c198 <eMBPEventCreate>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	7023      	strb	r3, [r4, #0]
 8009b20:	1dbb      	adds	r3, r7, #6
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <pxMBMGetNewHdl+0x144>
                eStatus = eStatus2;
 8009b28:	230f      	movs	r3, #15
 8009b2a:	18fb      	adds	r3, r7, r3
 8009b2c:	1dba      	adds	r2, r7, #6
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	701a      	strb	r2, [r3, #0]
            break;
 8009b32:	e00d      	b.n	8009b50 <pxMBMGetNewHdl+0x160>
                eStatus = MB_ENOERR;
 8009b34:	230f      	movs	r3, #15
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	2200      	movs	r2, #0
 8009b3a:	701a      	strb	r2, [r3, #0]
            break;
 8009b3c:	e008      	b.n	8009b50 <pxMBMGetNewHdl+0x160>
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8009b3e:	1dfb      	adds	r3, r7, #7
 8009b40:	781a      	ldrb	r2, [r3, #0]
 8009b42:	1dfb      	adds	r3, r7, #7
 8009b44:	3201      	adds	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	1dfb      	adds	r3, r7, #7
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d9b8      	bls.n	8009ac2 <pxMBMGetNewHdl+0xd2>
        }
    }
    if( MB_ENOERR != eStatus )
 8009b50:	230f      	movs	r3, #15
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <pxMBMGetNewHdl+0x172>
    {
        ( void )eMBMReleaseHdl( pxIntHdl );
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f000 f815 	bl	8009b8c <eMBMReleaseHdl>
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009b62:	f002 fc29 	bl	800c3b8 <vMBPExitCritical>
    return MB_ENOERR == eStatus ? pxIntHdl : NULL;      /*lint !e826 ~ suspicious ptr-to-ptr conversion */
 8009b66:	230f      	movs	r3, #15
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <pxMBMGetNewHdl+0x184>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	e000      	b.n	8009b76 <pxMBMGetNewHdl+0x186>
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	0018      	movs	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b005      	add	sp, #20
 8009b7c:	bd90      	pop	{r4, r7, pc}
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	20004ad9 	.word	0x20004ad9
 8009b84:	20004adc 	.word	0x20004adc
 8009b88:	08009cb9 	.word	0x08009cb9

08009b8c <eMBMReleaseHdl>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    eMBErrorCode
eMBMReleaseHdl( xMBMInternalHandle * pxIntHdl )
{
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8009b94:	240f      	movs	r4, #15
 8009b96:	193b      	adds	r3, r7, r4
 8009b98:	2202      	movs	r2, #2
 8009b9a:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 8009b9c:	f002 fc05 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBMInternalHdl ) )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d100      	bne.n	8009ba8 <eMBMReleaseHdl+0x1c>
 8009ba6:	e07c      	b.n	8009ca2 <eMBMReleaseHdl+0x116>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7b1b      	ldrb	r3, [r3, #12]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	4b41      	ldr	r3, [pc, #260]	; (8009cb4 <eMBMReleaseHdl+0x128>)
 8009bb0:	18d3      	adds	r3, r2, r3
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d000      	beq.n	8009bba <eMBMReleaseHdl+0x2e>
 8009bb8:	e073      	b.n	8009ca2 <eMBMReleaseHdl+0x116>
    {

        /* we are now sure that this was really a handle returned by create. */
        if( NULL != pxIntHdl->pFrameCloseFN )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d03e      	beq.n	8009c40 <eMBMReleaseHdl+0xb4>
        {
            if( MB_ENOERR != ( eStatus = pxIntHdl->pFrameCloseFN( pxIntHdl ) ) )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	0025      	movs	r5, r4
 8009bc8:	193c      	adds	r4, r7, r4
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	0010      	movs	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	7023      	strb	r3, [r4, #0]
 8009bd4:	197b      	adds	r3, r7, r5
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d162      	bne.n	8009ca2 <eMBMReleaseHdl+0x116>
            {
            }
            else
            {
                if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <eMBMReleaseHdl+0x62>
                {
                    vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	0018      	movs	r0, r3
 8009bea:	f002 fba9 	bl	800c340 <vMBPEventDelete>
                }
                if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <eMBMReleaseHdl+0x74>
                {
                    vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f002 ffa8 	bl	800cb50 <vMBPTimerClose>
                }
                MBM_RESET_HDL( pxIntHdl );
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	22ff      	movs	r2, #255	; 0xff
 8009c16:	731a      	strb	r2, [r3, #12]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	611a      	str	r2, [r3, #16]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	81da      	strh	r2, [r3, #14]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	615a      	str	r2, [r3, #20]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	619a      	str	r2, [r3, #24]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	61da      	str	r2, [r3, #28]
                eStatus = MB_ENOERR;
 8009c36:	230f      	movs	r3, #15
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e030      	b.n	8009ca2 <eMBMReleaseHdl+0x116>
            }
        }
        else
        {
            if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <eMBMReleaseHdl+0xc6>
            {
                vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f002 fb77 	bl	800c340 <vMBPEventDelete>
            }
            if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <eMBMReleaseHdl+0xd8>
            {
                vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f002 ff76 	bl	800cb50 <vMBPTimerClose>
            }
            MBM_RESET_HDL( pxIntHdl );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	609a      	str	r2, [r3, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	22ff      	movs	r2, #255	; 0xff
 8009c7a:	731a      	strb	r2, [r3, #12]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	611a      	str	r2, [r3, #16]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	81da      	strh	r2, [r3, #14]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	615a      	str	r2, [r3, #20]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	619a      	str	r2, [r3, #24]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	61da      	str	r2, [r3, #28]
            eStatus = MB_ENOERR;
 8009c9a:	230f      	movs	r3, #15
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009ca2:	f002 fb89 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 8009ca6:	230f      	movs	r3, #15
 8009ca8:	18fb      	adds	r3, r7, r3
 8009caa:	781b      	ldrb	r3, [r3, #0]
}
 8009cac:	0018      	movs	r0, r3
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b004      	add	sp, #16
 8009cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8009cb4:	20004adc 	.word	0x20004adc

08009cb8 <bMBMResponseTimeoutCB>:

STATIC          BOOL
bMBMResponseTimeoutCB( xMBMHandle xHdl )
{
 8009cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = FALSE;
 8009cc0:	2517      	movs	r5, #23
 8009cc2:	197b      	adds	r3, r7, r5
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	613b      	str	r3, [r7, #16]
    BOOL            bTimeout = FALSE;
 8009ccc:	210f      	movs	r1, #15
 8009cce:	187b      	adds	r3, r7, r1
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	701a      	strb	r2, [r3, #0]
    {
        eStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl );
        MBP_ASSERT( MB_ENOERR == eStatus );
    }
#else
    bTimeout = TRUE;
 8009cd4:	187b      	adds	r3, r7, r1
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	701a      	strb	r2, [r3, #0]
#endif
    if( bTimeout )
 8009cda:	187b      	adds	r3, r7, r1
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d017      	beq.n	8009d12 <bMBMResponseTimeoutCB+0x5a>
    {
        if( MB_ENOERR == ( eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_TIMEDOUT ) ) )
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	260e      	movs	r6, #14
 8009ce8:	19bc      	adds	r4, r7, r6
 8009cea:	2102      	movs	r1, #2
 8009cec:	0018      	movs	r0, r3
 8009cee:	f002 fac9 	bl	800c284 <eMBPEventPost>
 8009cf2:	0003      	movs	r3, r0
 8009cf4:	7023      	strb	r3, [r4, #0]
 8009cf6:	19bb      	adds	r3, r7, r6
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <bMBMResponseTimeoutCB+0x4c>
        {
            bNeedCtxSwitch = TRUE;
 8009cfe:	197b      	adds	r3, r7, r5
 8009d00:	2201      	movs	r2, #1
 8009d02:	701a      	strb	r2, [r3, #0]
        }
        MBP_ASSERT( MB_ENOERR == eStatus );
 8009d04:	230e      	movs	r3, #14
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <bMBMResponseTimeoutCB+0x5a>
 8009d0e:	f002 fb39 	bl	800c384 <vMBPAssert>
    }
    return bNeedCtxSwitch;
 8009d12:	2317      	movs	r3, #23
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	781b      	ldrb	r3, [r3, #0]
}
 8009d18:	0018      	movs	r0, r3
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	b007      	add	sp, #28
 8009d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d20 <eMBMSetSlaveTimeout>:

eMBErrorCode
eMBMSetSlaveTimeout( xMBMHandle xHdl, USHORT usNMilliSeconds )
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	000a      	movs	r2, r1
 8009d2a:	1cbb      	adds	r3, r7, #2
 8009d2c:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8009d2e:	240f      	movs	r4, #15
 8009d30:	193b      	adds	r3, r7, r4
 8009d32:	2202      	movs	r2, #2
 8009d34:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8009d3a:	f002 fb36 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBMInternalHdl ) )
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d012      	beq.n	8009d6a <eMBMSetSlaveTimeout+0x4a>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	7b1b      	ldrb	r3, [r3, #12]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <eMBMSetSlaveTimeout+0x5c>)
 8009d4c:	18d3      	adds	r3, r2, r3
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d10a      	bne.n	8009d6a <eMBMSetSlaveTimeout+0x4a>
    {
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
        pxIntHdl->usSlaveTimeoutMS = usNMilliSeconds;
        eStatus = eMBPTimerSetTimeout( pxIntHdl->xRespTimeoutHdl, MBM_TIMEOUT_RESOLUTION_MS );
#else
        eStatus = eMBPTimerSetTimeout( pxIntHdl->xRespTimeoutHdl, usNMilliSeconds );
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	193c      	adds	r4, r7, r4
 8009d5a:	1cbb      	adds	r3, r7, #2
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	0019      	movs	r1, r3
 8009d60:	0010      	movs	r0, r2
 8009d62:	f002 ff1d 	bl	800cba0 <eMBPTimerSetTimeout>
 8009d66:	0003      	movs	r3, r0
 8009d68:	7023      	strb	r3, [r4, #0]
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009d6a:	f002 fb25 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 8009d6e:	230f      	movs	r3, #15
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	781b      	ldrb	r3, [r3, #0]
}
 8009d74:	0018      	movs	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	b005      	add	sp, #20
 8009d7a:	bd90      	pop	{r4, r7, pc}
 8009d7c:	20004adc 	.word	0x20004adc

08009d80 <vMBMMasterTransactionPolled>:
    return eStatus;
}

void
vMBMMasterTransactionPolled( xMBMInternalHandle * pxIntHdl, UCHAR ucSlaveAddress, eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	230b      	movs	r3, #11
 8009d8e:	18fb      	adds	r3, r7, r3
 8009d90:	1c0a      	adds	r2, r1, #0
 8009d92:	701a      	strb	r2, [r3, #0]
    xMBPEventType   xFrameEvent;

    switch ( *peState )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d002      	beq.n	8009da2 <vMBMMasterTransactionPolled+0x22>
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d02b      	beq.n	8009df8 <vMBMMasterTransactionPolled+0x78>
 8009da0:	e091      	b.n	8009ec6 <vMBMMasterTransactionPolled+0x146>
         */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
        pxIntHdl->usSlaveTimeoutLeftMS = pxIntHdl->usSlaveTimeoutMS;
#endif
        if( ( MB_ENOERR != ( *peStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl ) ) ) )
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	0018      	movs	r0, r3
 8009da8:	f002 ff32 	bl	800cc10 <eMBPTimerStart>
 8009dac:	0003      	movs	r3, r0
 8009dae:	001a      	movs	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	701a      	strb	r2, [r3, #0]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <vMBMMasterTransactionPolled+0x44>
        {
            *peState = MBM_STATE_ERROR;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	701a      	strb	r2, [r3, #0]
            /* Frame transmission has started. We now switch to the state where we
             * wait for an event.
             */
            *peState = MBM_STATE_WAITING;
        }
        break;
 8009dc2:	e088      	b.n	8009ed6 <vMBMMasterTransactionPolled+0x156>
        else if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameSendFN( pxIntHdl, ucSlaveAddress, pxIntHdl->usFrameMBPDULength ) ) )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	89d4      	ldrh	r4, [r2, #14]
 8009dcc:	220b      	movs	r2, #11
 8009dce:	18ba      	adds	r2, r7, r2
 8009dd0:	7811      	ldrb	r1, [r2, #0]
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	0022      	movs	r2, r4
 8009dd6:	4798      	blx	r3
 8009dd8:	0003      	movs	r3, r0
 8009dda:	001a      	movs	r2, r3
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <vMBMMasterTransactionPolled+0x70>
            *peState = MBM_STATE_ERROR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2204      	movs	r2, #4
 8009dec:	701a      	strb	r2, [r3, #0]
        break;
 8009dee:	e072      	b.n	8009ed6 <vMBMMasterTransactionPolled+0x156>
            *peState = MBM_STATE_WAITING;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2202      	movs	r2, #2
 8009df4:	701a      	strb	r2, [r3, #0]
        break;
 8009df6:	e06e      	b.n	8009ed6 <vMBMMasterTransactionPolled+0x156>
        /* Wait for an event. Possible events are either a timeout when no slave has
         * responded (MBM_EV_TIMEDOUT), the reception of a frame(MBM_EV_RECEIVED)
         * or in case of a broadcast message the end of the transmission(MBM_EV_SENT).
         */
    case MBM_STATE_WAITING:
        if( bMBPEventGet( pxIntHdl->xFrameEventHdl, &xFrameEvent ) )
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2417      	movs	r4, #23
 8009dfe:	193a      	adds	r2, r7, r4
 8009e00:	0011      	movs	r1, r2
 8009e02:	0018      	movs	r0, r3
 8009e04:	f002 fa6a 	bl	800c2dc <bMBPEventGet>
 8009e08:	1e03      	subs	r3, r0, #0
 8009e0a:	d063      	beq.n	8009ed4 <vMBMMasterTransactionPolled+0x154>
        {
            /* In any case stop the timeout. */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
            ( void )eMBPTimerStop( pxIntHdl->xRespTimeoutHdl );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	0018      	movs	r0, r3
 8009e12:	f002 ff35 	bl	800cc80 <eMBPTimerStop>
#endif
            switch ( ( eMBMEvent ) xFrameEvent )
 8009e16:	193b      	adds	r3, r7, r4
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b06      	cmp	r3, #6
 8009e1c:	d84b      	bhi.n	8009eb6 <vMBMMasterTransactionPolled+0x136>
 8009e1e:	009a      	lsls	r2, r3, #2
 8009e20:	4b2f      	ldr	r3, [pc, #188]	; (8009ee0 <vMBMMasterTransactionPolled+0x160>)
 8009e22:	18d3      	adds	r3, r2, r3
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	469f      	mov	pc, r3
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Request timeout. Reseting state.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	220b      	movs	r2, #11
 8009e2e:	18ba      	adds	r2, r7, r2
 8009e30:	7811      	ldrb	r1, [r2, #0]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	4798      	blx	r3
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
                pxIntHdl->xFrameStat.ulNTimeouts++;
#endif
                *peState = MBM_STATE_DONE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2205      	movs	r2, #5
 8009e3c:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ETIMEDOUT;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2208      	movs	r2, #8
 8009e42:	701a      	strb	r2, [r3, #0]
               // *peStatus = MB_ENOERR;

                break;
 8009e44:	e03e      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Response frame received.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, &( pxIntHdl->usFrameMBPDULength ) ) ) )
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	320e      	adds	r2, #14
 8009e4e:	0014      	movs	r4, r2
 8009e50:	220b      	movs	r2, #11
 8009e52:	18ba      	adds	r2, r7, r2
 8009e54:	7811      	ldrb	r1, [r2, #0]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	0022      	movs	r2, r4
 8009e5a:	4798      	blx	r3
 8009e5c:	0003      	movs	r3, r0
 8009e5e:	001a      	movs	r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <vMBMMasterTransactionPolled+0xf4>
                {
                    /* Error receiving frame. Abort this transmission. */
                    *peState = MBM_STATE_ERROR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    *peState = MBM_STATE_DISASSEMBLE;
                }
                break;
 8009e72:	e027      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                    *peState = MBM_STATE_DISASSEMBLE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2203      	movs	r2, #3
 8009e78:	701a      	strb	r2, [r3, #0]
                break;
 8009e7a:	e023      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Receiver error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	220b      	movs	r2, #11
 8009e82:	18ba      	adds	r2, r7, r2
 8009e84:	7811      	ldrb	r1, [r2, #0]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4798      	blx	r3
                *peState = MBM_STATE_ERROR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2205      	movs	r2, #5
 8009e96:	701a      	strb	r2, [r3, #0]
                break;
 8009e98:	e014      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Frame sent.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_DONE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2205      	movs	r2, #5
 8009e9e:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ENOERR;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
                break;
 8009ea6:	e00d      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Transmitter error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2205      	movs	r2, #5
 8009eb2:	701a      	strb	r2, [r3, #0]
                break;
 8009eb4:	e006      	b.n	8009ec4 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal event received!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2204      	movs	r2, #4
 8009eba:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EILLSTATE;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2206      	movs	r2, #6
 8009ec0:	701a      	strb	r2, [r3, #0]
                break;
 8009ec2:	46c0      	nop			; (mov r8, r8)
            }
        }
        break;
 8009ec4:	e006      	b.n	8009ed4 <vMBMMasterTransactionPolled+0x154>
        if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
        {
            vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal state!\n", ( USHORT ) pxIntHdl->ubIdx );
        }
#endif
        *peState = MBM_STATE_ERROR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2204      	movs	r2, #4
 8009eca:	701a      	strb	r2, [r3, #0]
        *peStatus = MB_EILLSTATE;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2206      	movs	r2, #6
 8009ed0:	701a      	strb	r2, [r3, #0]
        break;
 8009ed2:	e000      	b.n	8009ed6 <vMBMMasterTransactionPolled+0x156>
        break;
 8009ed4:	46c0      	nop			; (mov r8, r8)
    }
}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	b007      	add	sp, #28
 8009edc:	bd90      	pop	{r4, r7, pc}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	0800d14c 	.word	0x0800d14c

08009ee4 <eMBMSerialInit>:

#if MBM_ASCII_ENABLED == 1 || MBM_RTU_ENABLED == 1
eMBErrorCode
eMBMSerialInit( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity )
{
 8009ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ee6:	b089      	sub	sp, #36	; 0x24
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	0008      	movs	r0, r1
 8009eee:	0011      	movs	r1, r2
 8009ef0:	607b      	str	r3, [r7, #4]
 8009ef2:	230b      	movs	r3, #11
 8009ef4:	18fb      	adds	r3, r7, r3
 8009ef6:	1c02      	adds	r2, r0, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	230a      	movs	r3, #10
 8009efc:	18fb      	adds	r3, r7, r3
 8009efe:	1c0a      	adds	r2, r1, #0
 8009f00:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    UCHAR           ucStopBits;
    ucStopBits = MB_PAR_NONE == eParity ? ( UCHAR ) 2 : ( UCHAR ) 1;
 8009f02:	2328      	movs	r3, #40	; 0x28
 8009f04:	2208      	movs	r2, #8
 8009f06:	189b      	adds	r3, r3, r2
 8009f08:	19db      	adds	r3, r3, r7
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d101      	bne.n	8009f14 <eMBMSerialInit+0x30>
 8009f10:	2202      	movs	r2, #2
 8009f12:	e000      	b.n	8009f16 <eMBMSerialInit+0x32>
 8009f14:	2201      	movs	r2, #1
 8009f16:	2617      	movs	r6, #23
 8009f18:	19bb      	adds	r3, r7, r6
 8009f1a:	701a      	strb	r2, [r3, #0]
    eStatus = eMBMSerialInitExt( pxHdl, eMode, ucPort, ulBaudRate, eParity, ucStopBits );
 8009f1c:	2316      	movs	r3, #22
 8009f1e:	18fc      	adds	r4, r7, r3
 8009f20:	687d      	ldr	r5, [r7, #4]
 8009f22:	220a      	movs	r2, #10
 8009f24:	18bb      	adds	r3, r7, r2
 8009f26:	781a      	ldrb	r2, [r3, #0]
 8009f28:	210b      	movs	r1, #11
 8009f2a:	187b      	adds	r3, r7, r1
 8009f2c:	7819      	ldrb	r1, [r3, #0]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	19bb      	adds	r3, r7, r6
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	2628      	movs	r6, #40	; 0x28
 8009f38:	2308      	movs	r3, #8
 8009f3a:	18f3      	adds	r3, r6, r3
 8009f3c:	19db      	adds	r3, r3, r7
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	002b      	movs	r3, r5
 8009f44:	f000 f809 	bl	8009f5a <eMBMSerialInitExt>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	7023      	strb	r3, [r4, #0]
    return eStatus;
 8009f4c:	2316      	movs	r3, #22
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	781b      	ldrb	r3, [r3, #0]
}
 8009f52:	0018      	movs	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	b007      	add	sp, #28
 8009f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f5a <eMBMSerialInitExt>:

eMBErrorCode
eMBMSerialInitExt( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8009f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5c:	b08b      	sub	sp, #44	; 0x2c
 8009f5e:	af02      	add	r7, sp, #8
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	0008      	movs	r0, r1
 8009f64:	0011      	movs	r1, r2
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	230b      	movs	r3, #11
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	1c02      	adds	r2, r0, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	230a      	movs	r3, #10
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	1c0a      	adds	r2, r1, #0
 8009f76:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxMBMNewIntHdl;
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8009f78:	241f      	movs	r4, #31
 8009f7a:	193b      	adds	r3, r7, r4
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	701a      	strb	r2, [r3, #0]
    {
        vMBPLibraryLoad(  );
    }
#endif

    if( NULL != pxHdl )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d064      	beq.n	800a050 <eMBMSerialInitExt+0xf6>
    {
        if( NULL == ( pxMBMNewIntHdl = pxMBMGetNewHdl(  ) ) )
 8009f86:	f7ff fd33 	bl	80099f0 <pxMBMGetNewHdl>
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	61bb      	str	r3, [r7, #24]
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d103      	bne.n	8009f9c <eMBMSerialInitExt+0x42>
        {
            eStatus = MB_ENORES;
 8009f94:	193b      	adds	r3, r7, r4
 8009f96:	2204      	movs	r2, #4
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e039      	b.n	800a010 <eMBMSerialInitExt+0xb6>
        }
        else
        {
            switch ( eMode )
 8009f9c:	230b      	movs	r3, #11
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d018      	beq.n	8009fd8 <eMBMSerialInitExt+0x7e>
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d12d      	bne.n	800a006 <eMBMSerialInitExt+0xac>
            {
#if MBM_ASCII_ENABLED == 1
            case MB_ASCII:
                eStatus = eMBMSerialASCIIInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 8009faa:	231f      	movs	r3, #31
 8009fac:	18fc      	adds	r4, r7, r3
 8009fae:	2330      	movs	r3, #48	; 0x30
 8009fb0:	2608      	movs	r6, #8
 8009fb2:	199b      	adds	r3, r3, r6
 8009fb4:	19db      	adds	r3, r3, r7
 8009fb6:	781d      	ldrb	r5, [r3, #0]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	230a      	movs	r3, #10
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	7819      	ldrb	r1, [r3, #0]
 8009fc0:	69b8      	ldr	r0, [r7, #24]
 8009fc2:	2334      	movs	r3, #52	; 0x34
 8009fc4:	199b      	adds	r3, r3, r6
 8009fc6:	19db      	adds	r3, r3, r7
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	002b      	movs	r3, r5
 8009fce:	f000 f847 	bl	800a060 <eMBMSerialASCIIInit>
 8009fd2:	0003      	movs	r3, r0
 8009fd4:	7023      	strb	r3, [r4, #0]
                break;
 8009fd6:	e01b      	b.n	800a010 <eMBMSerialInitExt+0xb6>
#endif

#if MBM_RTU_ENABLED == 1
            case MB_RTU:
                eStatus = eMBMSerialRTUInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 8009fd8:	231f      	movs	r3, #31
 8009fda:	18fc      	adds	r4, r7, r3
 8009fdc:	2330      	movs	r3, #48	; 0x30
 8009fde:	2608      	movs	r6, #8
 8009fe0:	199b      	adds	r3, r3, r6
 8009fe2:	19db      	adds	r3, r3, r7
 8009fe4:	781d      	ldrb	r5, [r3, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	230a      	movs	r3, #10
 8009fea:	18fb      	adds	r3, r7, r3
 8009fec:	7819      	ldrb	r1, [r3, #0]
 8009fee:	69b8      	ldr	r0, [r7, #24]
 8009ff0:	2334      	movs	r3, #52	; 0x34
 8009ff2:	199b      	adds	r3, r3, r6
 8009ff4:	19db      	adds	r3, r3, r7
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	002b      	movs	r3, r5
 8009ffc:	f001 fb20 	bl	800b640 <eMBMSerialRTUInit>
 800a000:	0003      	movs	r3, r0
 800a002:	7023      	strb	r3, [r4, #0]
                break;
 800a004:	e004      	b.n	800a010 <eMBMSerialInitExt+0xb6>
#endif

            default:
                eStatus = MB_EINVAL;
 800a006:	231f      	movs	r3, #31
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	2202      	movs	r2, #2
 800a00c:	701a      	strb	r2, [r3, #0]
                break;
 800a00e:	46c0      	nop			; (mov r8, r8)
            }
        }

        if( eStatus != MB_ENOERR )
 800a010:	261f      	movs	r6, #31
 800a012:	19bb      	adds	r3, r7, r6
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d017      	beq.n	800a04a <eMBMSerialInitExt+0xf0>
        {
            if( NULL != pxMBMNewIntHdl )
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <eMBMSerialInitExt+0xe8>
            {
                if( MB_ENOERR != ( eStatus2 = eMBMReleaseHdl( pxMBMNewIntHdl ) ) )
 800a020:	2517      	movs	r5, #23
 800a022:	197c      	adds	r4, r7, r5
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	0018      	movs	r0, r3
 800a028:	f7ff fdb0 	bl	8009b8c <eMBMReleaseHdl>
 800a02c:	0003      	movs	r3, r0
 800a02e:	7023      	strb	r3, [r4, #0]
 800a030:	002a      	movs	r2, r5
 800a032:	18bb      	adds	r3, r7, r2
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <eMBMSerialInitExt+0xe8>
                {
                    eStatus = eStatus2;
 800a03a:	19bb      	adds	r3, r7, r6
 800a03c:	18ba      	adds	r2, r7, r2
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	701a      	strb	r2, [r3, #0]
                }
            }
            *pxHdl = NULL;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e002      	b.n	800a050 <eMBMSerialInitExt+0xf6>
        }
        else
        {
            *pxHdl = pxMBMNewIntHdl;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	601a      	str	r2, [r3, #0]
        vMBPLibraryUnload(  );
    }
    MBP_EXIT_CRITICAL_INIT(  );
#endif

    return eStatus;
 800a050:	231f      	movs	r3, #31
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	781b      	ldrb	r3, [r3, #0]
}
 800a056:	0018      	movs	r0, r3
 800a058:	46bd      	mov	sp, r7
 800a05a:	b009      	add	sp, #36	; 0x24
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a060 <eMBMSerialASCIIInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialASCIIInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	b08d      	sub	sp, #52	; 0x34
 800a064:	af04      	add	r7, sp, #16
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	0008      	movs	r0, r1
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	0019      	movs	r1, r3
 800a06e:	230b      	movs	r3, #11
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	1c02      	adds	r2, r0, #0
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	230a      	movs	r3, #10
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	1c0a      	adds	r2, r1, #0
 800a07c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 800a07e:	231f      	movs	r3, #31
 800a080:	18fb      	adds	r3, r7, r3
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
    xMBMASCIIFrameHandle *pxFrameHdl = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800a08a:	f002 f98e 	bl	800c3aa <vMBPEnterCritical>
        if( !bIsInitialized )
 800a08e:	4bae      	ldr	r3, [pc, #696]	; (800a348 <eMBMSerialASCIIInit+0x2e8>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d000      	beq.n	800a098 <eMBMSerialASCIIInit+0x38>
 800a096:	e0b6      	b.n	800a206 <eMBMSerialASCIIInit+0x1a6>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 800a098:	2317      	movs	r3, #23
 800a09a:	18fb      	adds	r3, r7, r3
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
 800a0a0:	e0a8      	b.n	800a1f4 <eMBMSerialASCIIInit+0x194>
            {
                HDL_RESET( &xMBMASCIIFrameHdl[ubIdx] );
 800a0a2:	2417      	movs	r4, #23
 800a0a4:	193b      	adds	r3, r7, r4
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	49a8      	ldr	r1, [pc, #672]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a0aa:	0013      	movs	r3, r2
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	189b      	adds	r3, r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	189b      	adds	r3, r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	22ff      	movs	r2, #255	; 0xff
 800a0b8:	545a      	strb	r2, [r3, r1]
 800a0ba:	193b      	adds	r3, r7, r4
 800a0bc:	781a      	ldrb	r2, [r3, #0]
 800a0be:	48a3      	ldr	r0, [pc, #652]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	33ff      	adds	r3, #255	; 0xff
 800a0c4:	0019      	movs	r1, r3
 800a0c6:	0013      	movs	r3, r2
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	189b      	adds	r3, r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	18c3      	adds	r3, r0, r3
 800a0d4:	185b      	adds	r3, r3, r1
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	193b      	adds	r3, r7, r4
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	489b      	ldr	r0, [pc, #620]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a0e0:	2381      	movs	r3, #129	; 0x81
 800a0e2:	0059      	lsls	r1, r3, #1
 800a0e4:	0013      	movs	r3, r2
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	189b      	adds	r3, r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	189b      	adds	r3, r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	18c3      	adds	r3, r0, r3
 800a0f2:	185b      	adds	r3, r3, r1
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	193b      	adds	r3, r7, r4
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	4893      	ldr	r0, [pc, #588]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a0fe:	2380      	movs	r3, #128	; 0x80
 800a100:	0059      	lsls	r1, r3, #1
 800a102:	0013      	movs	r3, r2
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	189b      	adds	r3, r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	189b      	adds	r3, r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	18c3      	adds	r3, r0, r3
 800a110:	185b      	adds	r3, r3, r1
 800a112:	2200      	movs	r2, #0
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	193b      	adds	r3, r7, r4
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	488c      	ldr	r0, [pc, #560]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a11c:	2382      	movs	r3, #130	; 0x82
 800a11e:	0059      	lsls	r1, r3, #1
 800a120:	0013      	movs	r3, r2
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	189b      	adds	r3, r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	189b      	adds	r3, r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	18c3      	adds	r3, r0, r3
 800a12e:	185b      	adds	r3, r3, r1
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	193b      	adds	r3, r7, r4
 800a136:	781a      	ldrb	r2, [r3, #0]
 800a138:	4884      	ldr	r0, [pc, #528]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a13a:	2383      	movs	r3, #131	; 0x83
 800a13c:	0059      	lsls	r1, r3, #1
 800a13e:	0013      	movs	r3, r2
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	189b      	adds	r3, r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	189b      	adds	r3, r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	18c3      	adds	r3, r0, r3
 800a14c:	185b      	adds	r3, r3, r1
 800a14e:	2200      	movs	r2, #0
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	193b      	adds	r3, r7, r4
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	487d      	ldr	r0, [pc, #500]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	0059      	lsls	r1, r3, #1
 800a15c:	0013      	movs	r3, r2
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	189b      	adds	r3, r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	189b      	adds	r3, r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	18c3      	adds	r3, r0, r3
 800a16a:	185b      	adds	r3, r3, r1
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	193b      	adds	r3, r7, r4
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	4875      	ldr	r0, [pc, #468]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a176:	2384      	movs	r3, #132	; 0x84
 800a178:	0059      	lsls	r1, r3, #1
 800a17a:	0013      	movs	r3, r2
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	189b      	adds	r3, r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	18c3      	adds	r3, r0, r3
 800a188:	185b      	adds	r3, r3, r1
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	193b      	adds	r3, r7, r4
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	486e      	ldr	r0, [pc, #440]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a194:	2386      	movs	r3, #134	; 0x86
 800a196:	0059      	lsls	r1, r3, #1
 800a198:	0013      	movs	r3, r2
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	189b      	adds	r3, r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	189b      	adds	r3, r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	18c3      	adds	r3, r0, r3
 800a1a6:	185b      	adds	r3, r3, r1
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	193b      	adds	r3, r7, r4
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	4866      	ldr	r0, [pc, #408]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a1b2:	2388      	movs	r3, #136	; 0x88
 800a1b4:	0059      	lsls	r1, r3, #1
 800a1b6:	0013      	movs	r3, r2
 800a1b8:	011b      	lsls	r3, r3, #4
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	189b      	adds	r3, r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	18c3      	adds	r3, r0, r3
 800a1c4:	185b      	adds	r3, r3, r1
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	193b      	adds	r3, r7, r4
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	0013      	movs	r3, r2
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	189b      	adds	r3, r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	189b      	adds	r3, r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4a5c      	ldr	r2, [pc, #368]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a1dc:	189b      	adds	r3, r3, r2
 800a1de:	3301      	adds	r3, #1
 800a1e0:	22ff      	movs	r2, #255	; 0xff
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	f002 fe35 	bl	800ce54 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 800a1ea:	193b      	adds	r3, r7, r4
 800a1ec:	781a      	ldrb	r2, [r3, #0]
 800a1ee:	193b      	adds	r3, r7, r4
 800a1f0:	3201      	adds	r2, #1
 800a1f2:	701a      	strb	r2, [r3, #0]
 800a1f4:	2317      	movs	r3, #23
 800a1f6:	18fb      	adds	r3, r7, r3
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d800      	bhi.n	800a200 <eMBMSerialASCIIInit+0x1a0>
 800a1fe:	e750      	b.n	800a0a2 <eMBMSerialASCIIInit+0x42>
            }
            bIsInitialized = TRUE;
 800a200:	4b51      	ldr	r3, [pc, #324]	; (800a348 <eMBMSerialASCIIInit+0x2e8>)
 800a202:	2201      	movs	r2, #1
 800a204:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 800a206:	2317      	movs	r3, #23
 800a208:	18fb      	adds	r3, r7, r3
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	e023      	b.n	800a258 <eMBMSerialASCIIInit+0x1f8>
        {
            if( IDX_INVALID == xMBMASCIIFrameHdl[ubIdx].ubIdx )
 800a210:	2017      	movs	r0, #23
 800a212:	183b      	adds	r3, r7, r0
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	494d      	ldr	r1, [pc, #308]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a218:	0013      	movs	r3, r2
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	189b      	adds	r3, r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	189b      	adds	r3, r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	5c5b      	ldrb	r3, [r3, r1]
 800a226:	2bff      	cmp	r3, #255	; 0xff
 800a228:	d110      	bne.n	800a24c <eMBMSerialASCIIInit+0x1ec>
            {
                pxFrameHdl = &xMBMASCIIFrameHdl[ubIdx];
 800a22a:	0001      	movs	r1, r0
 800a22c:	187b      	adds	r3, r7, r1
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	0013      	movs	r3, r2
 800a232:	011b      	lsls	r3, r3, #4
 800a234:	189b      	adds	r3, r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	189b      	adds	r3, r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4a43      	ldr	r2, [pc, #268]	; (800a34c <eMBMSerialASCIIInit+0x2ec>)
 800a23e:	189b      	adds	r3, r3, r2
 800a240:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	187a      	adds	r2, r7, r1
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	701a      	strb	r2, [r3, #0]
                break;
 800a24a:	e00a      	b.n	800a262 <eMBMSerialASCIIInit+0x202>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 800a24c:	2117      	movs	r1, #23
 800a24e:	187b      	adds	r3, r7, r1
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	187b      	adds	r3, r7, r1
 800a254:	3201      	adds	r2, #1
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	2317      	movs	r3, #23
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d9d6      	bls.n	800a210 <eMBMSerialASCIIInit+0x1b0>
            }
        }

        if( NULL != pxFrameHdl )
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d061      	beq.n	800a32c <eMBMSerialASCIIInit+0x2cc>
        {
            usTimeoutMS = ( USHORT ) ( MBM_ASCII_TIMEOUT_SEC * 1000U );
 800a268:	2314      	movs	r3, #20
 800a26a:	18fb      	adds	r3, r7, r3
 800a26c:	22fa      	movs	r2, #250	; 0xfa
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	801a      	strh	r2, [r3, #0]

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 7, eParity, ucStopBits, pxIntHdl
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	3311      	adds	r3, #17
 800a276:	33ff      	adds	r3, #255	; 0xff
 800a278:	0018      	movs	r0, r3
 800a27a:	2513      	movs	r5, #19
 800a27c:	197c      	adds	r4, r7, r5
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	230b      	movs	r3, #11
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	7819      	ldrb	r1, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	2330      	movs	r3, #48	; 0x30
 800a28c:	2608      	movs	r6, #8
 800a28e:	199b      	adds	r3, r3, r6
 800a290:	19db      	adds	r3, r3, r7
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	230a      	movs	r3, #10
 800a298:	18fb      	adds	r3, r7, r3
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	2307      	movs	r3, #7
 800a2a0:	f002 f892 	bl	800c3c8 <eMBPSerialInit>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	7023      	strb	r3, [r4, #0]
 800a2a8:	197b      	adds	r3, r7, r5
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <eMBMSerialASCIIInit+0x25c>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , NULL, MB_ASCII 
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 800a2b0:	231f      	movs	r3, #31
 800a2b2:	18fb      	adds	r3, r7, r3
 800a2b4:	197a      	adds	r2, r7, r5
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e02d      	b.n	800a318 <eMBMSerialASCIIInit+0x2b8>
            }
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialASCIITimerCB, pxIntHdl ) ) )
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	330d      	adds	r3, #13
 800a2c0:	33ff      	adds	r3, #255	; 0xff
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	2613      	movs	r6, #19
 800a2c6:	19bc      	adds	r4, r7, r6
 800a2c8:	68fd      	ldr	r5, [r7, #12]
 800a2ca:	4a21      	ldr	r2, [pc, #132]	; (800a350 <eMBMSerialASCIIInit+0x2f0>)
 800a2cc:	2314      	movs	r3, #20
 800a2ce:	18fb      	adds	r3, r7, r3
 800a2d0:	8819      	ldrh	r1, [r3, #0]
 800a2d2:	002b      	movs	r3, r5
 800a2d4:	f002 fb64 	bl	800c9a0 <eMBPTimerInit>
 800a2d8:	0003      	movs	r3, r0
 800a2da:	7023      	strb	r3, [r4, #0]
 800a2dc:	19bb      	adds	r3, r7, r6
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d005      	beq.n	800a2f0 <eMBMSerialASCIIInit+0x290>
            {
                eStatus = eStatus2;
 800a2e4:	231f      	movs	r3, #31
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	19ba      	adds	r2, r7, r6
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	e013      	b.n	800a318 <eMBMSerialASCIIInit+0x2b8>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_PDU_OFF];
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	1c9a      	adds	r2, r3, #2
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialASCIIFrameSend;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4a14      	ldr	r2, [pc, #80]	; (800a354 <eMBMSerialASCIIInit+0x2f4>)
 800a302:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialASCIIFrameReceive;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a14      	ldr	r2, [pc, #80]	; (800a358 <eMBMSerialASCIIInit+0x2f8>)
 800a308:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialASCIIFrameClose;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4a13      	ldr	r2, [pc, #76]	; (800a35c <eMBMSerialASCIIInit+0x2fc>)
 800a30e:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialASCIIFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 800a310:	231f      	movs	r3, #31
 800a312:	18fb      	adds	r3, r7, r3
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
                             ", baudrate=%lu, parity=" MBP_FORMAT_USHORT "): %s.\n", ( USHORT ) pxFrameHdl->ubIdx,
                             ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif

            if( MB_ENOERR != eStatus )
 800a318:	231f      	movs	r3, #31
 800a31a:	18fb      	adds	r3, r7, r3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d008      	beq.n	800a334 <eMBMSerialASCIIInit+0x2d4>
            {
                ( void )eMBMSerialASCIIFrameCloseInternal( pxFrameHdl );
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	0018      	movs	r0, r3
 800a326:	f000 f9b0 	bl	800a68a <eMBMSerialASCIIFrameCloseInternal>
 800a32a:	e003      	b.n	800a334 <eMBMSerialASCIIInit+0x2d4>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 800a32c:	231f      	movs	r3, #31
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	2204      	movs	r2, #4
 800a332:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800a334:	f002 f840 	bl	800c3b8 <vMBPExitCritical>
    else
    {
        eStatus = MB_EINVAL;
    }
#endif
    return eStatus;
 800a338:	231f      	movs	r3, #31
 800a33a:	18fb      	adds	r3, r7, r3
 800a33c:	781b      	ldrb	r3, [r3, #0]
}
 800a33e:	0018      	movs	r0, r3
 800a340:	46bd      	mov	sp, r7
 800a342:	b009      	add	sp, #36	; 0x24
 800a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	20004b5c 	.word	0x20004b5c
 800a34c:	20004b60 	.word	0x20004b60
 800a350:	0800acb1 	.word	0x0800acb1
 800a354:	0800a361 	.word	0x0800a361
 800a358:	0800a4e5 	.word	0x0800a4e5
 800a35c:	0800a659 	.word	0x0800a659

0800a360 <eMBMSerialASCIIFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialASCIIFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	0008      	movs	r0, r1
 800a36a:	0011      	movs	r1, r2
 800a36c:	1cfb      	adds	r3, r7, #3
 800a36e:	1c02      	adds	r2, r0, #0
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	003b      	movs	r3, r7
 800a374:	1c0a      	adds	r2, r1, #0
 800a376:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800a378:	2317      	movs	r3, #23
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	2202      	movs	r2, #2
 800a37e:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_ASCII,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) ucSlaveAddress, ( USHORT ) usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) &&
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d100      	bne.n	800a392 <eMBMSerialASCIIFrameSend+0x32>
 800a390:	e09c      	b.n	800a4cc <eMBMSerialASCIIFrameSend+0x16c>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	001a      	movs	r2, r3
 800a398:	0013      	movs	r3, r2
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	189b      	adds	r3, r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	189b      	adds	r3, r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4a4d      	ldr	r2, [pc, #308]	; (800a4dc <eMBMSerialASCIIFrameSend+0x17c>)
 800a3a6:	189b      	adds	r3, r3, r2
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d000      	beq.n	800a3b0 <eMBMSerialASCIIFrameSend+0x50>
 800a3ae:	e08d      	b.n	800a4cc <eMBMSerialASCIIFrameSend+0x16c>
 800a3b0:	1cfb      	adds	r3, r7, #3
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d009      	beq.n	800a3cc <eMBMSerialASCIIFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 1 /* LRC */  ) ) ) )
 800a3b8:	1cfb      	adds	r3, r7, #3
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d100      	bne.n	800a3c2 <eMBMSerialASCIIFrameSend+0x62>
 800a3c0:	e084      	b.n	800a4cc <eMBMSerialASCIIFrameSend+0x16c>
 800a3c2:	1cfb      	adds	r3, r7, #3
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2bf7      	cmp	r3, #247	; 0xf7
 800a3c8:	d900      	bls.n	800a3cc <eMBMSerialASCIIFrameSend+0x6c>
 800a3ca:	e07f      	b.n	800a4cc <eMBMSerialASCIIFrameSend+0x16c>
 800a3cc:	003b      	movs	r3, r7
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	2bfd      	cmp	r3, #253	; 0xfd
 800a3d2:	d900      	bls.n	800a3d6 <eMBMSerialASCIIFrameSend+0x76>
 800a3d4:	e07a      	b.n	800a4cc <eMBMSerialASCIIFrameSend+0x16c>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 800a3d6:	f001 ffe8 	bl	800c3aa <vMBPEnterCritical>
            MBP_ASSERT( STATE_TX_IDLE == pxASCIIHdl->eSndState );
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	2382      	movs	r3, #130	; 0x82
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	5cd3      	ldrb	r3, [r2, r3]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <eMBMSerialASCIIFrameSend+0x8c>
 800a3e8:	f001 ffcc 	bl	800c384 <vMBPAssert>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) pxASCIIHdl->eRcvState,
                             pxASCIIHdl->usRcvBufferPos, ( USHORT ) pxASCIIHdl->eSndState, pxASCIIHdl->usSndBufferCnt );
            }
#endif
            MBP_EXIT_CRITICAL_SECTION(  );
 800a3ec:	f001 ffe4 	bl	800c3b8 <vMBPExitCritical>

            /* Added the MODBUS ASCII header (= slave address) */
            pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	1cfa      	adds	r2, r7, #3
 800a3f4:	7812      	ldrb	r2, [r2, #0]
 800a3f6:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt = 1;
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	2383      	movs	r3, #131	; 0x83
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	2101      	movs	r1, #1
 800a400:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxASCIIHdl->usSndBufferCnt += usMBPDULength;
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	2383      	movs	r3, #131	; 0x83
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	5ad3      	ldrh	r3, [r2, r3]
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	003b      	movs	r3, r7
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	18d3      	adds	r3, r2, r3
 800a412:	b299      	uxth	r1, r3
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	2383      	movs	r3, #131	; 0x83
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	52d1      	strh	r1, [r2, r3]

            ubLRC = ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usSndBufferCnt );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	1c58      	adds	r0, r3, #1
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	2383      	movs	r3, #131	; 0x83
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	5ad3      	ldrh	r3, [r2, r3]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	250b      	movs	r5, #11
 800a42c:	197c      	adds	r4, r7, r5
 800a42e:	0019      	movs	r1, r3
 800a430:	f000 fcb3 	bl	800ad9a <ubMBMSerialASCIILRC>
 800a434:	0003      	movs	r3, r0
 800a436:	7023      	strb	r3, [r4, #0]
            pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usSndBufferCnt] = ubLRC;
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	2383      	movs	r3, #131	; 0x83
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	5ad3      	ldrh	r3, [r2, r3]
 800a440:	b29b      	uxth	r3, r3
 800a442:	001a      	movs	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	189b      	adds	r3, r3, r2
 800a448:	197a      	adds	r2, r7, r5
 800a44a:	7812      	ldrb	r2, [r2, #0]
 800a44c:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt++;
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	2383      	movs	r3, #131	; 0x83
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	5ad3      	ldrh	r3, [r2, r3]
 800a456:	b29b      	uxth	r3, r3
 800a458:	3301      	adds	r3, #1
 800a45a:	b299      	uxth	r1, r3
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	2383      	movs	r3, #131	; 0x83
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 800a464:	f001 ffa1 	bl	800c3aa <vMBPEnterCritical>
            pxASCIIHdl->eSndState = STATE_TX_START;
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	2382      	movs	r3, #130	; 0x82
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	2101      	movs	r1, #1
 800a470:	54d1      	strb	r1, [r2, r3]
            pxASCIIHdl->pubSndBufferCur = ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	1c59      	adds	r1, r3, #1
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	2384      	movs	r3, #132	; 0x84
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	50d1      	str	r1, [r2, r3]
#if MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialASCIITransmitterEmptyAPIV1CB ) ) )
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	2388      	movs	r3, #136	; 0x88
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	58d3      	ldr	r3, [r2, r3]
 800a486:	2517      	movs	r5, #23
 800a488:	197c      	adds	r4, r7, r5
 800a48a:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <eMBMSerialASCIIFrameSend+0x180>)
 800a48c:	0011      	movs	r1, r2
 800a48e:	0018      	movs	r0, r3
 800a490:	f002 f902 	bl	800c698 <eMBPSerialTxEnable>
 800a494:	0003      	movs	r3, r0
 800a496:	7023      	strb	r3, [r4, #0]
 800a498:	197b      	adds	r3, r7, r5
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d013      	beq.n	800a4c8 <eMBMSerialASCIIFrameSend+0x168>
            {
                HDL_RESET_TX( pxASCIIHdl );
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	2382      	movs	r3, #130	; 0x82
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	54d1      	strb	r1, [r2, r3]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	2383      	movs	r3, #131	; 0x83
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	52d1      	strh	r1, [r2, r3]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	2380      	movs	r3, #128	; 0x80
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	54d1      	strb	r1, [r2, r3]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	2384      	movs	r3, #132	; 0x84
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 800a4c8:	f001 ff76 	bl	800c3b8 <vMBPExitCritical>
        }
    }
    return eStatus;
 800a4cc:	2317      	movs	r3, #23
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	781b      	ldrb	r3, [r3, #0]
}
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	b006      	add	sp, #24
 800a4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	20004b60 	.word	0x20004b60
 800a4e0:	0800aa71 	.word	0x0800aa71

0800a4e4 <eMBMSerialASCIIFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 800a4e4:	b5b0      	push	{r4, r5, r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	200b      	movs	r0, #11
 800a4f0:	183b      	adds	r3, r7, r0
 800a4f2:	1c0a      	adds	r2, r1, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 800a4f6:	241f      	movs	r4, #31
 800a4f8:	193b      	adds	r3, r7, r4
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d100      	bne.n	800a510 <eMBMSerialASCIIFrameReceive+0x2c>
 800a50e:	e099      	b.n	800a644 <eMBMSerialASCIIFrameReceive+0x160>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	001a      	movs	r2, r3
 800a516:	0013      	movs	r3, r2
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	189b      	adds	r3, r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	189b      	adds	r3, r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4a4c      	ldr	r2, [pc, #304]	; (800a654 <eMBMSerialASCIIFrameReceive+0x170>)
 800a524:	189b      	adds	r3, r3, r2
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d000      	beq.n	800a52e <eMBMSerialASCIIFrameReceive+0x4a>
 800a52c:	e08a      	b.n	800a644 <eMBMSerialASCIIFrameReceive+0x160>
 800a52e:	183b      	adds	r3, r7, r0
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d100      	bne.n	800a538 <eMBMSerialASCIIFrameReceive+0x54>
 800a536:	e085      	b.n	800a644 <eMBMSerialASCIIFrameReceive+0x160>
 800a538:	183b      	adds	r3, r7, r0
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2bf7      	cmp	r3, #247	; 0xf7
 800a53e:	d900      	bls.n	800a542 <eMBMSerialASCIIFrameReceive+0x5e>
 800a540:	e080      	b.n	800a644 <eMBMSerialASCIIFrameReceive+0x160>
        {

            if( NULL == pusMBPDULength )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d02a      	beq.n	800a59e <eMBMSerialASCIIFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	2381      	movs	r3, #129	; 0x81
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	5ad3      	ldrh	r3, [r2, r3]
 800a550:	b29b      	uxth	r3, r3
 800a552:	2b03      	cmp	r3, #3
 800a554:	d91f      	bls.n	800a596 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	b2db      	uxtb	r3, r3
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 800a55c:	183a      	adds	r2, r7, r0
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d118      	bne.n	800a596 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usRcvBufferPos ) == 0 ) )
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	1c58      	adds	r0, r3, #1
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	2381      	movs	r3, #129	; 0x81
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	5ad3      	ldrh	r3, [r2, r3]
 800a570:	b29b      	uxth	r3, r3
 800a572:	0019      	movs	r1, r3
 800a574:	f000 fc11 	bl	800ad9a <ubMBMSerialASCIILRC>
 800a578:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 800a57a:	d10c      	bne.n	800a596 <eMBMSerialASCIIFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxASCIIHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_LRC ) );
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	2381      	movs	r3, #129	; 0x81
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	5ad3      	ldrh	r3, [r2, r3]
 800a584:	b29b      	uxth	r3, r3
 800a586:	3b02      	subs	r3, #2
 800a588:	b29a      	uxth	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	801a      	strh	r2, [r3, #0]
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_ASCII;
                xAnalyzerFrame.x.xASCIIHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xASCIIHeader.ubLRC = pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usRcvBufferPos - 1];
#endif
                eStatus = MB_ENOERR;
 800a58e:	193b      	adds	r3, r7, r4
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
 800a594:	e003      	b.n	800a59e <eMBMSerialASCIIFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 800a596:	231f      	movs	r3, #31
 800a598:	18fb      	adds	r3, r7, r3
 800a59a:	2205      	movs	r2, #5
 800a59c:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 800a59e:	f001 ff04 	bl	800c3aa <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	2388      	movs	r3, #136	; 0x88
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	58d3      	ldr	r3, [r2, r3]
 800a5aa:	2513      	movs	r5, #19
 800a5ac:	197c      	adds	r4, r7, r5
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f002 f871 	bl	800c698 <eMBPSerialTxEnable>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	7023      	strb	r3, [r4, #0]
 800a5ba:	002a      	movs	r2, r5
 800a5bc:	18bb      	adds	r3, r7, r2
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <eMBMSerialASCIIFrameReceive+0xea>
            {
                eStatus = eStatus2;
 800a5c4:	231f      	movs	r3, #31
 800a5c6:	18fb      	adds	r3, r7, r3
 800a5c8:	18ba      	adds	r2, r7, r2
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	2388      	movs	r3, #136	; 0x88
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	58d3      	ldr	r3, [r2, r3]
 800a5d6:	2513      	movs	r5, #19
 800a5d8:	197c      	adds	r4, r7, r5
 800a5da:	2100      	movs	r1, #0
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f002 f921 	bl	800c824 <eMBPSerialRxEnable>
 800a5e2:	0003      	movs	r3, r0
 800a5e4:	7023      	strb	r3, [r4, #0]
 800a5e6:	002a      	movs	r2, r5
 800a5e8:	18bb      	adds	r3, r7, r2
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <eMBMSerialASCIIFrameReceive+0x116>
            {
                eStatus = eStatus2;
 800a5f0:	231f      	movs	r3, #31
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	18ba      	adds	r2, r7, r2
 800a5f6:	7812      	ldrb	r2, [r2, #0]
 800a5f8:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxASCIIHdl->xWaitTmrHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxASCIIHdl );
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	2382      	movs	r3, #130	; 0x82
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	2100      	movs	r1, #0
 800a602:	54d1      	strb	r1, [r2, r3]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	2383      	movs	r3, #131	; 0x83
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	2100      	movs	r1, #0
 800a60c:	52d1      	strh	r1, [r2, r3]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	2100      	movs	r1, #0
 800a616:	54d1      	strb	r1, [r2, r3]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	2384      	movs	r3, #132	; 0x84
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	2100      	movs	r1, #0
 800a620:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxASCIIHdl );
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	2302      	movs	r3, #2
 800a626:	33ff      	adds	r3, #255	; 0xff
 800a628:	2100      	movs	r1, #0
 800a62a:	54d1      	strb	r1, [r2, r3]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	2381      	movs	r3, #129	; 0x81
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	2100      	movs	r1, #0
 800a634:	52d1      	strh	r1, [r2, r3]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	2100      	movs	r1, #0
 800a63e:	54d1      	strb	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 800a640:	f001 feba 	bl	800c3b8 <vMBPExitCritical>
        }
    }

    return eStatus;
 800a644:	231f      	movs	r3, #31
 800a646:	18fb      	adds	r3, r7, r3
 800a648:	781b      	ldrb	r3, [r3, #0]
}
 800a64a:	0018      	movs	r0, r3
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b008      	add	sp, #32
 800a650:	bdb0      	pop	{r4, r5, r7, pc}
 800a652:	46c0      	nop			; (mov r8, r8)
 800a654:	20004b60 	.word	0x20004b60

0800a658 <eMBMSerialASCIIFrameClose>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameClose( xMBHandle xHdl )
{
 800a658:	b5b0      	push	{r4, r5, r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800a660:	210f      	movs	r1, #15
 800a662:	187b      	adds	r3, r7, r1
 800a664:	2202      	movs	r2, #2
 800a666:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialASCIIFrameCloseInternal( ( xMBMASCIIFrameHandle * ) pxIntHdl->xFrameHdl );
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	000d      	movs	r5, r1
 800a672:	187c      	adds	r4, r7, r1
 800a674:	0018      	movs	r0, r3
 800a676:	f000 f808 	bl	800a68a <eMBMSerialASCIIFrameCloseInternal>
 800a67a:	0003      	movs	r3, r0
 800a67c:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 800a67e:	197b      	adds	r3, r7, r5
 800a680:	781b      	ldrb	r3, [r3, #0]
}
 800a682:	0018      	movs	r0, r3
 800a684:	46bd      	mov	sp, r7
 800a686:	b004      	add	sp, #16
 800a688:	bdb0      	pop	{r4, r5, r7, pc}

0800a68a <eMBMSerialASCIIFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameCloseInternal( xMBMASCIIFrameHandle * pxASCIIHdl )
{
 800a68a:	b590      	push	{r4, r7, lr}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800a692:	240f      	movs	r4, #15
 800a694:	193b      	adds	r3, r7, r4
 800a696:	2202      	movs	r2, #2
 800a698:	701a      	strb	r2, [r3, #0]
#if defined( MBM_ENABLE_DEBUG_FACILITY ) && ( MBM_ENABLE_DEBUG_FACILITY == 1 )
    UBYTE           ubIdx;
#endif

    MBP_ENTER_CRITICAL_SECTION(  );
 800a69a:	f001 fe86 	bl	800c3aa <vMBPEnterCritical>
        if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_ASCII ) )
        {
            ubIdx = pxASCIIHdl->ubIdx;
        }
#endif
        if( MBP_SERIALHDL_INVALID != pxASCIIHdl->xSerHdl )
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	2388      	movs	r3, #136	; 0x88
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	58d3      	ldr	r3, [r2, r3]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d055      	beq.n	800a756 <eMBMSerialASCIIFrameCloseInternal+0xcc>
        {
            if( MB_ENOERR != eMBPSerialClose( pxASCIIHdl->xSerHdl ) )
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	2388      	movs	r3, #136	; 0x88
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	58d3      	ldr	r3, [r2, r3]
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f001 ff9c 	bl	800c5f0 <eMBPSerialClose>
 800a6b8:	1e03      	subs	r3, r0, #0
 800a6ba:	d003      	beq.n	800a6c4 <eMBMSerialASCIIFrameCloseInternal+0x3a>
            {
                eStatus = MB_EPORTERR;
 800a6bc:	193b      	adds	r3, r7, r4
 800a6be:	2203      	movs	r2, #3
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	e08b      	b.n	800a7dc <eMBMSerialASCIIFrameCloseInternal+0x152>
            }
            else
            {
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xTmrHdl )
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	2386      	movs	r3, #134	; 0x86
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	58d3      	ldr	r3, [r2, r3]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d006      	beq.n	800a6de <eMBMSerialASCIIFrameCloseInternal+0x54>
                {
                    vMBPTimerClose( pxASCIIHdl->xTmrHdl );
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	2386      	movs	r3, #134	; 0x86
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	58d3      	ldr	r3, [r2, r3]
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f002 fa39 	bl	800cb50 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xWaitTmrHdl )
                {
                    vMBPTimerClose( pxASCIIHdl->xWaitTmrHdl );
                }
#endif
                HDL_RESET( pxASCIIHdl );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	22ff      	movs	r2, #255	; 0xff
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	33ff      	adds	r3, #255	; 0xff
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	54d1      	strb	r1, [r2, r3]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	2381      	movs	r3, #129	; 0x81
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	52d1      	strh	r1, [r2, r3]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	2100      	movs	r1, #0
 800a700:	54d1      	strb	r1, [r2, r3]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	2382      	movs	r3, #130	; 0x82
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	2100      	movs	r1, #0
 800a70a:	54d1      	strb	r1, [r2, r3]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	2383      	movs	r3, #131	; 0x83
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	2100      	movs	r1, #0
 800a714:	52d1      	strh	r1, [r2, r3]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	2380      	movs	r3, #128	; 0x80
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	2100      	movs	r1, #0
 800a71e:	54d1      	strb	r1, [r2, r3]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	2384      	movs	r3, #132	; 0x84
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	2100      	movs	r1, #0
 800a728:	50d1      	str	r1, [r2, r3]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	2386      	movs	r3, #134	; 0x86
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	2100      	movs	r1, #0
 800a732:	50d1      	str	r1, [r2, r3]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	2388      	movs	r3, #136	; 0x88
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	2100      	movs	r1, #0
 800a73c:	50d1      	str	r1, [r2, r3]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3301      	adds	r3, #1
 800a742:	22ff      	movs	r2, #255	; 0xff
 800a744:	2100      	movs	r1, #0
 800a746:	0018      	movs	r0, r3
 800a748:	f002 fb84 	bl	800ce54 <memset>
                eStatus = MB_ENOERR;
 800a74c:	230f      	movs	r3, #15
 800a74e:	18fb      	adds	r3, r7, r3
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	e042      	b.n	800a7dc <eMBMSerialASCIIFrameCloseInternal+0x152>

            }
        }
        else
        {
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xTmrHdl );
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	2386      	movs	r3, #134	; 0x86
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	58d3      	ldr	r3, [r2, r3]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <eMBMSerialASCIIFrameCloseInternal+0xdc>
 800a762:	f001 fe0f 	bl	800c384 <vMBPAssert>
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xBackOffTmrHdl );
#endif
#if MBM_ASCII_WAITAFTERSEND_ENABLED > 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xWaitTmrHdl );
#endif
            HDL_RESET( pxASCIIHdl );
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	701a      	strb	r2, [r3, #0]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	2302      	movs	r3, #2
 800a770:	33ff      	adds	r3, #255	; 0xff
 800a772:	2100      	movs	r1, #0
 800a774:	54d1      	strb	r1, [r2, r3]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	2381      	movs	r3, #129	; 0x81
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	2100      	movs	r1, #0
 800a77e:	52d1      	strh	r1, [r2, r3]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	2380      	movs	r3, #128	; 0x80
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	2100      	movs	r1, #0
 800a788:	54d1      	strb	r1, [r2, r3]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	2382      	movs	r3, #130	; 0x82
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	2100      	movs	r1, #0
 800a792:	54d1      	strb	r1, [r2, r3]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	2383      	movs	r3, #131	; 0x83
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	2100      	movs	r1, #0
 800a79c:	52d1      	strh	r1, [r2, r3]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	2380      	movs	r3, #128	; 0x80
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	54d1      	strb	r1, [r2, r3]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	2384      	movs	r3, #132	; 0x84
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	50d1      	str	r1, [r2, r3]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	2386      	movs	r3, #134	; 0x86
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	50d1      	str	r1, [r2, r3]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	2388      	movs	r3, #136	; 0x88
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	50d1      	str	r1, [r2, r3]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	22ff      	movs	r2, #255	; 0xff
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f002 fb40 	bl	800ce54 <memset>
            eStatus = MB_ENOERR;
 800a7d4:	230f      	movs	r3, #15
 800a7d6:	18fb      	adds	r3, r7, r3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
                         ( USHORT ) ubIdx, eStatus == MB_ENOERR ? "okay" : "failed" );
        }
#endif

    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800a7dc:	f001 fdec 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800a7e0:	230f      	movs	r3, #15
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
}
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b005      	add	sp, #20
 800a7ec:	bd90      	pop	{r4, r7, pc}

0800a7ee <vMBMSerialASCIIReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
vMBMSerialASCIIReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 800a7ee:	b5b0      	push	{r4, r5, r7, lr}
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	000a      	movs	r2, r1
 800a7f8:	1cfb      	adds	r3, r7, #3
 800a7fa:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    BOOL            bEnableTimer = TRUE;
 800a7fc:	2317      	movs	r3, #23
 800a7fe:	18fb      	adds	r3, r7, r3
 800a800:	2201      	movs	r2, #1
 800a802:	701a      	strb	r2, [r3, #0]
    UBYTE           ubBinValue;
    xMBMInternalHandle *pxIntHdl = xHdl;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	2382      	movs	r3, #130	; 0x82
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	5cd3      	ldrb	r3, [r2, r3]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <vMBMSerialASCIIReceiverAPIV1CB+0x32>
 800a81c:	f001 fdb2 	bl	800c384 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eRcvState )
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	2302      	movs	r3, #2
 800a824:	33ff      	adds	r3, #255	; 0xff
 800a826:	5cd3      	ldrb	r3, [r2, r3]
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d100      	bne.n	800a830 <vMBMSerialASCIIReceiverAPIV1CB+0x42>
 800a82e:	e077      	b.n	800a920 <vMBMSerialASCIIReceiverAPIV1CB+0x132>
 800a830:	dd00      	ble.n	800a834 <vMBMSerialASCIIReceiverAPIV1CB+0x46>
 800a832:	e0da      	b.n	800a9ea <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d100      	bne.n	800a83a <vMBMSerialASCIIReceiverAPIV1CB+0x4c>
 800a838:	e0cd      	b.n	800a9d6 <vMBMSerialASCIIReceiverAPIV1CB+0x1e8>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d000      	beq.n	800a840 <vMBMSerialASCIIReceiverAPIV1CB+0x52>
 800a83e:	e0d4      	b.n	800a9ea <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
        /* A new character is received. If the character is a ':' the
         * input buffers are cleared. A CR character signals the end of the 
         * data block. Other characters are real data bytes.
         */
    case STATE_RX_RCV:
        if( MBM_ASCII_START == ubValue )
 800a840:	1cfb      	adds	r3, r7, #3
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b3a      	cmp	r3, #58	; 0x3a
 800a846:	d10a      	bne.n	800a85e <vMBMSerialASCIIReceiverAPIV1CB+0x70>
        {
            /* Empty receive buffer. */
            pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	2380      	movs	r3, #128	; 0x80
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	2100      	movs	r1, #0
 800a850:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->usRcvBufferPos = 0;
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	2381      	movs	r3, #129	; 0x81
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	2100      	movs	r1, #0
 800a85a:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->usRcvBufferPos++;
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
                break;
            }
        }
        break;
 800a85c:	e0ce      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        else if( MBM_ASCII_DEFAULT_CR == ubValue )
 800a85e:	1cfb      	adds	r3, r7, #3
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b0d      	cmp	r3, #13
 800a864:	d105      	bne.n	800a872 <vMBMSerialASCIIReceiverAPIV1CB+0x84>
            pxASCIIFrameHdl->eRcvState = STATE_RX_WAIT_EOF;
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	2302      	movs	r3, #2
 800a86a:	33ff      	adds	r3, #255	; 0xff
 800a86c:	2102      	movs	r1, #2
 800a86e:	54d1      	strb	r1, [r2, r3]
        break;
 800a870:	e0c4      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
            ubBinValue = ubMBMSerialASCIICHAR2BIN( ubValue );
 800a872:	230a      	movs	r3, #10
 800a874:	18fc      	adds	r4, r7, r3
 800a876:	1cfb      	adds	r3, r7, #3
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	0018      	movs	r0, r3
 800a87c:	f000 fa45 	bl	800ad0a <ubMBMSerialASCIICHAR2BIN>
 800a880:	0003      	movs	r3, r0
 800a882:	7023      	strb	r3, [r4, #0]
            switch ( pxASCIIFrameHdl->eBytePos )
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	2380      	movs	r3, #128	; 0x80
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	5cd3      	ldrb	r3, [r2, r3]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <vMBMSerialASCIIReceiverAPIV1CB+0xa8>
 800a890:	2b01      	cmp	r3, #1
 800a892:	d021      	beq.n	800a8d8 <vMBMSerialASCIIReceiverAPIV1CB+0xea>
        break;
 800a894:	e0b2      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
                if( pxASCIIFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	2381      	movs	r3, #129	; 0x81
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	5ad3      	ldrh	r3, [r2, r3]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	2bfe      	cmp	r3, #254	; 0xfe
 800a8a2:	d813      	bhi.n	800a8cc <vMBMSerialASCIIReceiverAPIV1CB+0xde>
                    pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] = ( UBYTE ) ( ubBinValue << 4 );
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	2381      	movs	r3, #129	; 0x81
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	5ad3      	ldrh	r3, [r2, r3]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	0019      	movs	r1, r3
 800a8b0:	230a      	movs	r3, #10
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	185b      	adds	r3, r3, r1
 800a8be:	705a      	strb	r2, [r3, #1]
                    pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	2380      	movs	r3, #128	; 0x80
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	54d1      	strb	r1, [r2, r3]
                break;
 800a8ca:	e028      	b.n	800a91e <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                    pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	33ff      	adds	r3, #255	; 0xff
 800a8d2:	2103      	movs	r1, #3
 800a8d4:	54d1      	strb	r1, [r2, r3]
                break;
 800a8d6:	e022      	b.n	800a91e <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] |= ubBinValue;
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	2381      	movs	r3, #129	; 0x81
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	5ad3      	ldrh	r3, [r2, r3]
 800a8e0:	b299      	uxth	r1, r3
 800a8e2:	000a      	movs	r2, r1
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	189b      	adds	r3, r3, r2
 800a8e8:	785b      	ldrb	r3, [r3, #1]
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	230a      	movs	r3, #10
 800a8ee:	18fb      	adds	r3, r7, r3
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	185b      	adds	r3, r3, r1
 800a8fa:	705a      	strb	r2, [r3, #1]
                pxASCIIFrameHdl->usRcvBufferPos++;
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	2381      	movs	r3, #129	; 0x81
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	5ad3      	ldrh	r3, [r2, r3]
 800a904:	b29b      	uxth	r3, r3
 800a906:	3301      	adds	r3, #1
 800a908:	b299      	uxth	r1, r3
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	2381      	movs	r3, #129	; 0x81
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	2380      	movs	r3, #128	; 0x80
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	2100      	movs	r1, #0
 800a91a:	54d1      	strb	r1, [r2, r3]
                break;
 800a91c:	46c0      	nop			; (mov r8, r8)
        break;
 800a91e:	e06d      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>

    case STATE_RX_WAIT_EOF:
        if( MBM_ASCII_DEFAULT_LF == ubValue )
 800a920:	1cfb      	adds	r3, r7, #3
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b0a      	cmp	r3, #10
 800a926:	d137      	bne.n	800a998 <vMBMSerialASCIIReceiverAPIV1CB+0x1aa>
        {
            bEnableTimer = FALSE;
 800a928:	2317      	movs	r3, #23
 800a92a:	18fb      	adds	r3, r7, r3
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	2388      	movs	r3, #136	; 0x88
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	58d3      	ldr	r3, [r2, r3]
 800a938:	250b      	movs	r5, #11
 800a93a:	197c      	adds	r4, r7, r5
 800a93c:	2100      	movs	r1, #0
 800a93e:	0018      	movs	r0, r3
 800a940:	f001 ff70 	bl	800c824 <eMBPSerialRxEnable>
 800a944:	0003      	movs	r3, r0
 800a946:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800a948:	197b      	adds	r3, r7, r5
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <vMBMSerialASCIIReceiverAPIV1CB+0x166>
 800a950:	f001 fd18 	bl	800c384 <vMBPAssert>
            eStatus = eMBPTimerStop( pxASCIIFrameHdl->xTmrHdl );
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	2386      	movs	r3, #134	; 0x86
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	58d3      	ldr	r3, [r2, r3]
 800a95c:	250b      	movs	r5, #11
 800a95e:	197c      	adds	r4, r7, r5
 800a960:	0018      	movs	r0, r3
 800a962:	f002 f98d 	bl	800cc80 <eMBPTimerStop>
 800a966:	0003      	movs	r3, r0
 800a968:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800a96a:	197b      	adds	r3, r7, r5
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <vMBMSerialASCIIReceiverAPIV1CB+0x188>
 800a972:	f001 fd07 	bl	800c384 <vMBPAssert>

#if MBM_ASCII_BACKOF_TIME_MS > 0
            eStatus = eMBPTimerStart( pxASCIIFrameHdl->xBackOffTmrHdl );
            MBP_ASSERT( MB_ENOERR == eStatus );
#else
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	250b      	movs	r5, #11
 800a97c:	197c      	adds	r4, r7, r5
 800a97e:	2103      	movs	r1, #3
 800a980:	0018      	movs	r0, r3
 800a982:	f001 fc7f 	bl	800c284 <eMBPEventPost>
 800a986:	0003      	movs	r3, r0
 800a988:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800a98a:	197b      	adds	r3, r7, r5
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d031      	beq.n	800a9f6 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
 800a992:	f001 fcf7 	bl	800c384 <vMBPAssert>
        }
        else
        {
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
        }
        break;
 800a996:	e02e      	b.n	800a9f6 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
        else if( MBM_ASCII_START == ubValue )
 800a998:	1cfb      	adds	r3, r7, #3
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b3a      	cmp	r3, #58	; 0x3a
 800a99e:	d114      	bne.n	800a9ca <vMBMSerialASCIIReceiverAPIV1CB+0x1dc>
            HDL_RESET_RX( pxASCIIFrameHdl );
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	33ff      	adds	r3, #255	; 0xff
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	54d1      	strb	r1, [r2, r3]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	2381      	movs	r3, #129	; 0x81
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	52d1      	strh	r1, [r2, r3]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	2380      	movs	r3, #128	; 0x80
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	33ff      	adds	r3, #255	; 0xff
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	54d1      	strb	r1, [r2, r3]
        break;
 800a9c8:	e015      	b.n	800a9f6 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	33ff      	adds	r3, #255	; 0xff
 800a9d0:	2103      	movs	r1, #3
 800a9d2:	54d1      	strb	r1, [r2, r3]
        break;
 800a9d4:	e00f      	b.n	800a9f6 <vMBMSerialASCIIReceiverAPIV1CB+0x208>

    case STATE_RX_IDLE:
        if( MBM_ASCII_START == ubValue )
 800a9d6:	1cfb      	adds	r3, r7, #3
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b3a      	cmp	r3, #58	; 0x3a
 800a9dc:	d10d      	bne.n	800a9fa <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        {
            /* Others settings initialized on the transistion from TX to RX. */
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	33ff      	adds	r3, #255	; 0xff
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	54d1      	strb	r1, [r2, r3]
        }
        break;
 800a9e8:	e007      	b.n	800a9fa <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        /* Receiver stays in error. The timeout from the MODBUS stack will 
         * abort this instruction.
         */
    case STATE_RX_ERROR:
    default:
        pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	33ff      	adds	r3, #255	; 0xff
 800a9f0:	2103      	movs	r1, #3
 800a9f2:	54d1      	strb	r1, [r2, r3]
        break;
 800a9f4:	e002      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	e000      	b.n	800a9fc <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 800a9fa:	46c0      	nop			; (mov r8, r8)
    }
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif
    if( bEnableTimer )
 800a9fc:	2317      	movs	r3, #23
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02f      	beq.n	800aa66 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
    {
        if( MB_ENOERR != eMBPTimerStart( pxASCIIFrameHdl->xTmrHdl ) )
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	2386      	movs	r3, #134	; 0x86
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	58d3      	ldr	r3, [r2, r3]
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f002 f8fe 	bl	800cc10 <eMBPTimerStart>
 800aa14:	1e03      	subs	r3, r0, #0
 800aa16:	d026      	beq.n	800aa66 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
        {
            /* We can only abort here because or timers failed. */
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	2388      	movs	r3, #136	; 0x88
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	58d3      	ldr	r3, [r2, r3]
 800aa20:	250b      	movs	r5, #11
 800aa22:	197c      	adds	r4, r7, r5
 800aa24:	2100      	movs	r1, #0
 800aa26:	0018      	movs	r0, r3
 800aa28:	f001 fefc 	bl	800c824 <eMBPSerialRxEnable>
 800aa2c:	0003      	movs	r3, r0
 800aa2e:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800aa30:	197b      	adds	r3, r7, r5
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <vMBMSerialASCIIReceiverAPIV1CB+0x24e>
 800aa38:	f001 fca4 	bl	800c384 <vMBPAssert>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_RECV_ERROR );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	250b      	movs	r5, #11
 800aa42:	197c      	adds	r4, r7, r5
 800aa44:	2104      	movs	r1, #4
 800aa46:	0018      	movs	r0, r3
 800aa48:	f001 fc1c 	bl	800c284 <eMBPEventPost>
 800aa4c:	0003      	movs	r3, r0
 800aa4e:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800aa50:	197b      	adds	r3, r7, r5
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <vMBMSerialASCIIReceiverAPIV1CB+0x26e>
 800aa58:	f001 fc94 	bl	800c384 <vMBPAssert>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	2302      	movs	r3, #2
 800aa60:	33ff      	adds	r3, #255	; 0xff
 800aa62:	2103      	movs	r1, #3
 800aa64:	54d1      	strb	r1, [r2, r3]
        }
    }
}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	b006      	add	sp, #24
 800aa6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aa70 <bMBMSerialASCIITransmitterEmptyAPIV1CB>:

STATIC          BOOL
bMBMSerialASCIITransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 800aa70:	b5b0      	push	{r4, r5, r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 800aa7a:	2317      	movs	r3, #23
 800aa7c:	18fb      	adds	r3, r7, r3
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 800aa82:	2316      	movs	r3, #22
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eRcvState == STATE_RX_IDLE );
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	2302      	movs	r3, #2
 800aa98:	33ff      	adds	r3, #255	; 0xff
 800aa9a:	5cd3      	ldrb	r3, [r2, r3]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x36>
 800aaa2:	f001 fc6f 	bl	800c384 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eSndState )
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	2382      	movs	r3, #130	; 0x82
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	5cd3      	ldrb	r3, [r2, r3]
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d100      	bne.n	800aab6 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x46>
 800aab4:	e084      	b.n	800abc0 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x150>
 800aab6:	dd00      	ble.n	800aaba <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x4a>
 800aab8:	e0a6      	b.n	800ac08 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d100      	bne.n	800aac0 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x50>
 800aabe:	e072      	b.n	800aba6 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x136>
 800aac0:	dd00      	ble.n	800aac4 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x54>
 800aac2:	e0a1      	b.n	800ac08 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d002      	beq.n	800aace <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x5e>
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d012      	beq.n	800aaf2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x82>
        break;

        /* In this case the transmitter is disabled. */
    case STATE_TX_IDLE:
    default:
        break;
 800aacc:	e09c      	b.n	800ac08 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
        *pubValue = MBM_ASCII_START;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	223a      	movs	r2, #58	; 0x3a
 800aad2:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_DATA;
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	2382      	movs	r3, #130	; 0x82
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	2102      	movs	r1, #2
 800aadc:	54d1      	strb	r1, [r2, r3]
        pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	2100      	movs	r1, #0
 800aae6:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 800aae8:	2317      	movs	r3, #23
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	2201      	movs	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
        break;
 800aaf0:	e08d      	b.n	800ac0e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        if( pxASCIIFrameHdl->usSndBufferCnt > 0 )
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	2383      	movs	r3, #131	; 0x83
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	5ad3      	ldrh	r3, [r2, r3]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d045      	beq.n	800ab8c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x11c>
            switch ( pxASCIIFrameHdl->eBytePos )
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	2380      	movs	r3, #128	; 0x80
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	5cd3      	ldrb	r3, [r2, r3]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xa2>
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d014      	beq.n	800ab3a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xca>
 800ab10:	e044      	b.n	800ab9c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) >> 4 ) );
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	2384      	movs	r3, #132	; 0x84
 800ab16:	005b      	lsls	r3, r3, #1
 800ab18:	58d3      	ldr	r3, [r2, r3]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	091b      	lsrs	r3, r3, #4
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	0018      	movs	r0, r3
 800ab22:	f000 f917 	bl	800ad54 <ubMBMSerialASCIIBIN2CHAR>
 800ab26:	0003      	movs	r3, r0
 800ab28:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	2380      	movs	r3, #128	; 0x80
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	2101      	movs	r1, #1
 800ab36:	54d1      	strb	r1, [r2, r3]
                break;
 800ab38:	e030      	b.n	800ab9c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) & 0x0F ) );
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	2384      	movs	r3, #132	; 0x84
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	58d3      	ldr	r3, [r2, r3]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	220f      	movs	r2, #15
 800ab46:	4013      	ands	r3, r2
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	f000 f902 	bl	800ad54 <ubMBMSerialASCIIBIN2CHAR>
 800ab50:	0003      	movs	r3, r0
 800ab52:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	2380      	movs	r3, #128	; 0x80
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	2100      	movs	r1, #0
 800ab60:	54d1      	strb	r1, [r2, r3]
                pxASCIIFrameHdl->pubSndBufferCur++;
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	2384      	movs	r3, #132	; 0x84
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	58d3      	ldr	r3, [r2, r3]
 800ab6a:	1c59      	adds	r1, r3, #1
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	2384      	movs	r3, #132	; 0x84
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	50d1      	str	r1, [r2, r3]
                pxASCIIFrameHdl->usSndBufferCnt--;
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	2383      	movs	r3, #131	; 0x83
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	5ad3      	ldrh	r3, [r2, r3]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	b299      	uxth	r1, r3
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	2383      	movs	r3, #131	; 0x83
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	52d1      	strh	r1, [r2, r3]
                break;
 800ab8a:	e007      	b.n	800ab9c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
            *pubValue = MBM_ASCII_DEFAULT_CR;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	220d      	movs	r2, #13
 800ab90:	701a      	strb	r2, [r3, #0]
            pxASCIIFrameHdl->eSndState = STATE_TX_END;
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	2382      	movs	r3, #130	; 0x82
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	2103      	movs	r1, #3
 800ab9a:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 800ab9c:	2317      	movs	r3, #23
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	2201      	movs	r2, #1
 800aba2:	701a      	strb	r2, [r3, #0]
        break;
 800aba4:	e033      	b.n	800ac0e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        *pubValue = MBM_ASCII_DEFAULT_LF;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	220a      	movs	r2, #10
 800abaa:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_NOTIFY;
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	2382      	movs	r3, #130	; 0x82
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	2104      	movs	r1, #4
 800abb4:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 800abb6:	2317      	movs	r3, #23
 800abb8:	18fb      	adds	r3, r7, r3
 800abba:	2201      	movs	r2, #1
 800abbc:	701a      	strb	r2, [r3, #0]
        break;
 800abbe:	e026      	b.n	800ac0e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        pxASCIIFrameHdl->eSndState = STATE_TX_IDLE;
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	2382      	movs	r3, #130	; 0x82
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	2100      	movs	r1, #0
 800abc8:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = FALSE;
 800abca:	2317      	movs	r3, #23
 800abcc:	18fb      	adds	r3, r7, r3
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
        if( MB_SER_BROADCAST_ADDR == pxASCIIFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	785b      	ldrb	r3, [r3, #1]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d110      	bne.n	800abfe <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x18e>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SENT );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	250b      	movs	r5, #11
 800abe2:	197c      	adds	r4, r7, r5
 800abe4:	2105      	movs	r1, #5
 800abe6:	0018      	movs	r0, r3
 800abe8:	f001 fb4c 	bl	800c284 <eMBPEventPost>
 800abec:	0003      	movs	r3, r0
 800abee:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800abf0:	197b      	adds	r3, r7, r5
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
 800abf8:	f001 fbc4 	bl	800c384 <vMBPAssert>
        break;
 800abfc:	e006      	b.n	800ac0c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
            bEnableRx = TRUE;
 800abfe:	2316      	movs	r3, #22
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
        break;
 800ac06:	e001      	b.n	800ac0c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
        break;
 800ac08:	46c0      	nop			; (mov r8, r8)
 800ac0a:	e000      	b.n	800ac0e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        break;
 800ac0c:	46c0      	nop			; (mov r8, r8)
    }

    if( !bMoreTXData )
 800ac0e:	2317      	movs	r3, #23
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d113      	bne.n	800ac40 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x1d0>
    {
        HDL_RESET_TX( pxASCIIFrameHdl );
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	2382      	movs	r3, #130	; 0x82
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	2100      	movs	r1, #0
 800ac20:	54d1      	strb	r1, [r2, r3]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	2383      	movs	r3, #131	; 0x83
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	2100      	movs	r1, #0
 800ac2a:	52d1      	strh	r1, [r2, r3]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	2380      	movs	r3, #128	; 0x80
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	2100      	movs	r1, #0
 800ac34:	54d1      	strb	r1, [r2, r3]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	2384      	movs	r3, #132	; 0x84
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 800ac40:	2316      	movs	r3, #22
 800ac42:	18fb      	adds	r3, r7, r3
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d029      	beq.n	800ac9e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
    {
        HDL_RESET_RX( pxASCIIFrameHdl );
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	33ff      	adds	r3, #255	; 0xff
 800ac50:	2100      	movs	r1, #0
 800ac52:	54d1      	strb	r1, [r2, r3]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	2381      	movs	r3, #129	; 0x81
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	52d1      	strh	r1, [r2, r3]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	2380      	movs	r3, #128	; 0x80
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	2100      	movs	r1, #0
 800ac66:	54d1      	strb	r1, [r2, r3]
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else

        if( MB_ENOERR != eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBMSerialASCIIReceiverAPIV1CB ) )
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	2388      	movs	r3, #136	; 0x88
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	58d3      	ldr	r3, [r2, r3]
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x23c>)
 800ac72:	0011      	movs	r1, r2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f001 fdd5 	bl	800c824 <eMBPSerialRxEnable>
 800ac7a:	1e03      	subs	r3, r0, #0
 800ac7c:	d00f      	beq.n	800ac9e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	250b      	movs	r5, #11
 800ac84:	197c      	adds	r4, r7, r5
 800ac86:	2106      	movs	r1, #6
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f001 fafb 	bl	800c284 <eMBPEventPost>
 800ac8e:	0003      	movs	r3, r0
 800ac90:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800ac92:	197b      	adds	r3, r7, r5
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
 800ac9a:	f001 fb73 	bl	800c384 <vMBPAssert>
        }
#endif
    }
    return bMoreTXData;
 800ac9e:	2317      	movs	r3, #23
 800aca0:	18fb      	adds	r3, r7, r3
 800aca2:	781b      	ldrb	r3, [r3, #0]
}
 800aca4:	0018      	movs	r0, r3
 800aca6:	46bd      	mov	sp, r7
 800aca8:	b006      	add	sp, #24
 800acaa:	bdb0      	pop	{r4, r5, r7, pc}
 800acac:	0800a7ef 	.word	0x0800a7ef

0800acb0 <bMBMSerialASCIITimerCB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialASCIITimerCB( xMBHandle xHdl )
{
 800acb0:	b5b0      	push	{r4, r5, r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 800acb8:	2317      	movs	r3, #23
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	2382      	movs	r3, #130	; 0x82
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	5cd3      	ldrb	r3, [r2, r3]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <bMBMSerialASCIITimerCB+0x2c>
 800acd8:	f001 fb54 	bl	800c384 <vMBPAssert>

    eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	250b      	movs	r5, #11
 800ace2:	197c      	adds	r4, r7, r5
 800ace4:	2104      	movs	r1, #4
 800ace6:	0018      	movs	r0, r3
 800ace8:	f001 facc 	bl	800c284 <eMBPEventPost>
 800acec:	0003      	movs	r3, r0
 800acee:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 800acf0:	197b      	adds	r3, r7, r5
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <bMBMSerialASCIITimerCB+0x4c>
 800acf8:	f001 fb44 	bl	800c384 <vMBPAssert>

    return bNeedCtxSwitch;
 800acfc:	2317      	movs	r3, #23
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	781b      	ldrb	r3, [r3, #0]
}
 800ad02:	0018      	movs	r0, r3
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b006      	add	sp, #24
 800ad08:	bdb0      	pop	{r4, r5, r7, pc}

0800ad0a <ubMBMSerialASCIICHAR2BIN>:

STATIC          UBYTE
ubMBMSerialASCIICHAR2BIN( UBYTE ubCharacter )
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	0002      	movs	r2, r0
 800ad12:	1dfb      	adds	r3, r7, #7
 800ad14:	701a      	strb	r2, [r3, #0]
    if( ( ubCharacter >= 0x30 /* ASCII '0' */  ) && ( ubCharacter <= 0x39 /* ASCII '9' */  ) )
 800ad16:	1dfb      	adds	r3, r7, #7
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b2f      	cmp	r3, #47	; 0x2f
 800ad1c:	d908      	bls.n	800ad30 <ubMBMSerialASCIICHAR2BIN+0x26>
 800ad1e:	1dfb      	adds	r3, r7, #7
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b39      	cmp	r3, #57	; 0x39
 800ad24:	d804      	bhi.n	800ad30 <ubMBMSerialASCIICHAR2BIN+0x26>
    {
        return ( UBYTE ) ( ubCharacter - 0x30 /* ASCII '0' */  );
 800ad26:	1dfb      	adds	r3, r7, #7
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	3b30      	subs	r3, #48	; 0x30
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	e00d      	b.n	800ad4c <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else if( ( ubCharacter >= 0x41 /* ASCII 'A' */  ) && ( ubCharacter <= 0x46 /* ASCII 'F' */  ) )
 800ad30:	1dfb      	adds	r3, r7, #7
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d908      	bls.n	800ad4a <ubMBMSerialASCIICHAR2BIN+0x40>
 800ad38:	1dfb      	adds	r3, r7, #7
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b46      	cmp	r3, #70	; 0x46
 800ad3e:	d804      	bhi.n	800ad4a <ubMBMSerialASCIICHAR2BIN+0x40>
    {
        return ( UBYTE ) ( ( ubCharacter - 0x41 ) /* ASCII 'A' */  + 0x0A );
 800ad40:	1dfb      	adds	r3, r7, #7
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	3b37      	subs	r3, #55	; 0x37
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	e000      	b.n	800ad4c <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else
    {
        return 0xFF;
 800ad4a:	23ff      	movs	r3, #255	; 0xff
    }
}
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	b002      	add	sp, #8
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <ubMBMSerialASCIIBIN2CHAR>:

STATIC          UBYTE
ubMBMSerialASCIIBIN2CHAR( UBYTE ubByte )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	0002      	movs	r2, r0
 800ad5c:	1dfb      	adds	r3, r7, #7
 800ad5e:	701a      	strb	r2, [r3, #0]
    if( ubByte <= 0x09 )
 800ad60:	1dfb      	adds	r3, r7, #7
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b09      	cmp	r3, #9
 800ad66:	d804      	bhi.n	800ad72 <ubMBMSerialASCIIBIN2CHAR+0x1e>
    {
        return ( UBYTE ) ( 0x30 + ubByte );
 800ad68:	1dfb      	adds	r3, r7, #7
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	3330      	adds	r3, #48	; 0x30
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	e00f      	b.n	800ad92 <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    else if( ( ubByte >= 0x0A ) && ( ubByte <= 0x0F ) )
 800ad72:	1dfb      	adds	r3, r7, #7
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b09      	cmp	r3, #9
 800ad78:	d908      	bls.n	800ad8c <ubMBMSerialASCIIBIN2CHAR+0x38>
 800ad7a:	1dfb      	adds	r3, r7, #7
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b0f      	cmp	r3, #15
 800ad80:	d804      	bhi.n	800ad8c <ubMBMSerialASCIIBIN2CHAR+0x38>
    {
        return ( UBYTE ) ( ( ubByte - 0x0A ) + 0x41 /* ASCII 'A' */  );
 800ad82:	1dfb      	adds	r3, r7, #7
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	3337      	adds	r3, #55	; 0x37
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	e002      	b.n	800ad92 <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    MBP_ASSERT( 0 );
 800ad8c:	f001 fafa 	bl	800c384 <vMBPAssert>
    /*lint -e(527) */ return 0xFF;
 800ad90:	23ff      	movs	r3, #255	; 0xff
}
 800ad92:	0018      	movs	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	b002      	add	sp, #8
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <ubMBMSerialASCIILRC>:


STATIC          UBYTE
ubMBMSerialASCIILRC( const UBYTE * pubFrame, USHORT usLen )
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	000a      	movs	r2, r1
 800ada4:	1cbb      	adds	r3, r7, #2
 800ada6:	801a      	strh	r2, [r3, #0]
    UBYTE           ubLRC = 0;  /* LRC char initialized */
 800ada8:	230f      	movs	r3, #15
 800adaa:	18fb      	adds	r3, r7, r3
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]

    while( usLen-- > 0 )
 800adb0:	e009      	b.n	800adc6 <ubMBMSerialASCIILRC+0x2c>
    {
        ubLRC += *pubFrame++;   /* Add buffer byte without carry */
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	7819      	ldrb	r1, [r3, #0]
 800adba:	220f      	movs	r2, #15
 800adbc:	18bb      	adds	r3, r7, r2
 800adbe:	18ba      	adds	r2, r7, r2
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	188a      	adds	r2, r1, r2
 800adc4:	701a      	strb	r2, [r3, #0]
    while( usLen-- > 0 )
 800adc6:	1cbb      	adds	r3, r7, #2
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	1cba      	adds	r2, r7, #2
 800adcc:	1e59      	subs	r1, r3, #1
 800adce:	8011      	strh	r1, [r2, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1ee      	bne.n	800adb2 <ubMBMSerialASCIILRC+0x18>
    }

    /* Return twos complement */
    ubLRC = ( UBYTE ) ( -( ( UBYTE ) ubLRC ) );
 800add4:	210f      	movs	r1, #15
 800add6:	187b      	adds	r3, r7, r1
 800add8:	187a      	adds	r2, r7, r1
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	4252      	negs	r2, r2
 800adde:	701a      	strb	r2, [r3, #0]
    return ubLRC;
 800ade0:	187b      	adds	r3, r7, r1
 800ade2:	781b      	ldrb	r3, [r3, #0]
}
 800ade4:	0018      	movs	r0, r3
 800ade6:	46bd      	mov	sp, r7
 800ade8:	b004      	add	sp, #16
 800adea:	bd80      	pop	{r7, pc}

0800adec <usMBMCRC16>:
}
#endif

USHORT
usMBMCRC16( const UBYTE * pucFrame, USHORT usLen )
{
 800adec:	b590      	push	{r4, r7, lr}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	000a      	movs	r2, r1
 800adf6:	1cbb      	adds	r3, r7, #2
 800adf8:	801a      	strh	r2, [r3, #0]
    UBYTE           ubCRCHi = 0xFF;
 800adfa:	230f      	movs	r3, #15
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	22ff      	movs	r2, #255	; 0xff
 800ae00:	701a      	strb	r2, [r3, #0]
    UBYTE           ubCRCLo = 0xFF;
 800ae02:	230e      	movs	r3, #14
 800ae04:	18fb      	adds	r3, r7, r3
 800ae06:	22ff      	movs	r2, #255	; 0xff
 800ae08:	701a      	strb	r2, [r3, #0]

#if CRC16_USETABLE == 0
    USHORT          usCRCTableValue;
#endif

    while( usLen-- )
 800ae0a:	e01a      	b.n	800ae42 <usMBMCRC16+0x56>
    {

        ubIndex = ubCRCLo ^ *( pucFrame++ );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	607a      	str	r2, [r7, #4]
 800ae12:	7819      	ldrb	r1, [r3, #0]
 800ae14:	200d      	movs	r0, #13
 800ae16:	183b      	adds	r3, r7, r0
 800ae18:	240e      	movs	r4, #14
 800ae1a:	193a      	adds	r2, r7, r4
 800ae1c:	7812      	ldrb	r2, [r2, #0]
 800ae1e:	404a      	eors	r2, r1
 800ae20:	701a      	strb	r2, [r3, #0]
#if CRC16_USETABLE == 1
        ubCRCLo = ubCRCHi ^ ( UBYTE ) aucCRCHi[ubIndex];
 800ae22:	183b      	adds	r3, r7, r0
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	4a12      	ldr	r2, [pc, #72]	; (800ae70 <usMBMCRC16+0x84>)
 800ae28:	5cd1      	ldrb	r1, [r2, r3]
 800ae2a:	193b      	adds	r3, r7, r4
 800ae2c:	240f      	movs	r4, #15
 800ae2e:	193a      	adds	r2, r7, r4
 800ae30:	7812      	ldrb	r2, [r2, #0]
 800ae32:	404a      	eors	r2, r1
 800ae34:	701a      	strb	r2, [r3, #0]
        ubCRCHi = ( UBYTE ) aucCRCLo[ubIndex];
 800ae36:	183b      	adds	r3, r7, r0
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	193b      	adds	r3, r7, r4
 800ae3c:	490d      	ldr	r1, [pc, #52]	; (800ae74 <usMBMCRC16+0x88>)
 800ae3e:	5c8a      	ldrb	r2, [r1, r2]
 800ae40:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 800ae42:	1cbb      	adds	r3, r7, #2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	1cba      	adds	r2, r7, #2
 800ae48:	1e59      	subs	r1, r3, #1
 800ae4a:	8011      	strh	r1, [r2, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1dd      	bne.n	800ae0c <usMBMCRC16+0x20>
    }
    /* Additional casts a for PIC MCC18 compiler to fix a bug when -Oi is not used. 
     * This is required because it does not enforce ANSI c integer promotion
     * rules.
     */
    return ( USHORT )( ( USHORT )ubCRCHi << 8 | ( USHORT )ubCRCLo );
 800ae50:	230f      	movs	r3, #15
 800ae52:	18fb      	adds	r3, r7, r3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	b21a      	sxth	r2, r3
 800ae5a:	230e      	movs	r3, #14
 800ae5c:	18fb      	adds	r3, r7, r3
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b21b      	sxth	r3, r3
 800ae62:	4313      	orrs	r3, r2
 800ae64:	b21b      	sxth	r3, r3
 800ae66:	b29b      	uxth	r3, r3
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b005      	add	sp, #20
 800ae6e:	bd90      	pop	{r4, r7, pc}
 800ae70:	0800d168 	.word	0x0800d168
 800ae74:	0800d268 	.word	0x0800d268

0800ae78 <vMBMWriteSingleRegisterPolled>:

#if MBM_FUNC_WR_SINGLE_REG_ENABLED == 1
void
vMBMWriteSingleRegisterPolled( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegAddress, USHORT usValue,
                               eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 800ae78:	b590      	push	{r4, r7, lr}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	000c      	movs	r4, r1
 800ae82:	0010      	movs	r0, r2
 800ae84:	0019      	movs	r1, r3
 800ae86:	230b      	movs	r3, #11
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	1c22      	adds	r2, r4, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	2308      	movs	r3, #8
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	1c02      	adds	r2, r0, #0
 800ae94:	801a      	strh	r2, [r3, #0]
 800ae96:	1dbb      	adds	r3, r7, #6
 800ae98:	1c0a      	adds	r2, r1, #0
 800ae9a:	801a      	strh	r2, [r3, #0]
    USHORT          usRegAddressWritten;
    USHORT          usValueWritten;

    xMBMInternalHandle *pxIntHdl = ( xMBMInternalHandle * ) xHdl;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	617b      	str	r3, [r7, #20]
    if( bMBMIsHdlValid( pxIntHdl ) && ( peState != NULL ) && ( peStatus != NULL ) )
#else
    if( TRUE )
#endif
    {
        switch ( *peState )
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d100      	bne.n	800aeaa <vMBMWriteSingleRegisterPolled+0x32>
 800aea8:	e0d2      	b.n	800b050 <vMBMWriteSingleRegisterPolled+0x1d8>
 800aeaa:	dd00      	ble.n	800aeae <vMBMWriteSingleRegisterPolled+0x36>
 800aeac:	e0d4      	b.n	800b058 <vMBMWriteSingleRegisterPolled+0x1e0>
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d100      	bne.n	800aeb4 <vMBMWriteSingleRegisterPolled+0x3c>
 800aeb2:	e06c      	b.n	800af8e <vMBMWriteSingleRegisterPolled+0x116>
 800aeb4:	dd00      	ble.n	800aeb8 <vMBMWriteSingleRegisterPolled+0x40>
 800aeb6:	e0cf      	b.n	800b058 <vMBMWriteSingleRegisterPolled+0x1e0>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <vMBMWriteSingleRegisterPolled+0x52>
 800aebc:	da00      	bge.n	800aec0 <vMBMWriteSingleRegisterPolled+0x48>
 800aebe:	e0cb      	b.n	800b058 <vMBMWriteSingleRegisterPolled+0x1e0>
 800aec0:	3b01      	subs	r3, #1
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d900      	bls.n	800aec8 <vMBMWriteSingleRegisterPolled+0x50>
 800aec6:	e0c7      	b.n	800b058 <vMBMWriteSingleRegisterPolled+0x1e0>
 800aec8:	e057      	b.n	800af7a <vMBMWriteSingleRegisterPolled+0x102>
				vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE,
							 "[IDX=" MBP_FORMAT_USHORT "] Write single holding register request (start="
							 MBP_FORMAT_USHORT ").\n", ( USHORT ) pxIntHdl->ubIdx, usRegAddress );
			}
#endif
			pxIntHdl->usFrameMBPDULength = 0;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2200      	movs	r2, #0
 800aece:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = MBM_FUNC_WR_REG;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	89d2      	ldrh	r2, [r2, #14]
 800aed8:	189b      	adds	r3, r3, r2
 800aeda:	2206      	movs	r2, #6
 800aedc:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	89db      	ldrh	r3, [r3, #14]
 800aee2:	3301      	adds	r3, #1
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegAddress >> 8U );
 800aeea:	2008      	movs	r0, #8
 800aeec:	183b      	adds	r3, r7, r0
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	0a1b      	lsrs	r3, r3, #8
 800aef2:	b299      	uxth	r1, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	89d2      	ldrh	r2, [r2, #14]
 800aefc:	189b      	adds	r3, r3, r2
 800aefe:	b2ca      	uxtb	r2, r1
 800af00:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	89db      	ldrh	r3, [r3, #14]
 800af06:	3301      	adds	r3, #1
 800af08:	b29a      	uxth	r2, r3
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegAddress & 0x00FFU );
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	89d2      	ldrh	r2, [r2, #14]
 800af16:	189b      	adds	r3, r3, r2
 800af18:	183a      	adds	r2, r7, r0
 800af1a:	8812      	ldrh	r2, [r2, #0]
 800af1c:	b2d2      	uxtb	r2, r2
 800af1e:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	89db      	ldrh	r3, [r3, #14]
 800af24:	3301      	adds	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usValue >> 8U );
 800af2c:	1dbb      	adds	r3, r7, #6
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	0a1b      	lsrs	r3, r3, #8
 800af32:	b299      	uxth	r1, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	89d2      	ldrh	r2, [r2, #14]
 800af3c:	189b      	adds	r3, r3, r2
 800af3e:	b2ca      	uxtb	r2, r1
 800af40:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	89db      	ldrh	r3, [r3, #14]
 800af46:	3301      	adds	r3, #1
 800af48:	b29a      	uxth	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	81da      	strh	r2, [r3, #14]
			pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usValue & 0x00FFU );
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	89d2      	ldrh	r2, [r2, #14]
 800af56:	189b      	adds	r3, r3, r2
 800af58:	1dba      	adds	r2, r7, #6
 800af5a:	8812      	ldrh	r2, [r2, #0]
 800af5c:	b2d2      	uxtb	r2, r2
 800af5e:	701a      	strb	r2, [r3, #0]
			pxIntHdl->usFrameMBPDULength++;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	89db      	ldrh	r3, [r3, #14]
 800af64:	3301      	adds	r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	81da      	strh	r2, [r3, #14]
			/* Frame is assembled. Now send it. */
			*peStatus = MB_EAGAIN;
 800af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6e:	2207      	movs	r2, #7
 800af70:	701a      	strb	r2, [r3, #0]
			*peState = MBM_STATE_SEND;
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2201      	movs	r2, #1
 800af76:	701a      	strb	r2, [r3, #0]
            break;
 800af78:	e075      	b.n	800b066 <vMBMWriteSingleRegisterPolled+0x1ee>

            /* These states are handled by the common state machine. */
        case MBM_STATE_SEND:
        case MBM_STATE_WAITING:
            vMBMMasterTransactionPolled( pxIntHdl, ucSlaveAddress, peState, peStatus );
 800af7a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800af7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7e:	230b      	movs	r3, #11
 800af80:	18fb      	adds	r3, r7, r3
 800af82:	7819      	ldrb	r1, [r3, #0]
 800af84:	6978      	ldr	r0, [r7, #20]
 800af86:	0023      	movs	r3, r4
 800af88:	f7fe fefa 	bl	8009d80 <vMBMMasterTransactionPolled>
            break;
 800af8c:	e06b      	b.n	800b066 <vMBMWriteSingleRegisterPolled+0x1ee>

            /* We need to disassemble the response here. */
        case MBM_STATE_DISASSEMBLE:
            *peState = MBM_STATE_DONE;
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2205      	movs	r2, #5
 800af92:	701a      	strb	r2, [r3, #0]
            if( ( MBM_FUNC_WR_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	89db      	ldrh	r3, [r3, #14]
 800af98:	2b05      	cmp	r3, #5
 800af9a:	d13f      	bne.n	800b01c <vMBMWriteSingleRegisterPolled+0x1a4>
                ( MBM_FUNC_WR_REG == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) )
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	781b      	ldrb	r3, [r3, #0]
            if( ( MBM_FUNC_WR_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800afa2:	2b06      	cmp	r3, #6
 800afa4:	d13a      	bne.n	800b01c <vMBMWriteSingleRegisterPolled+0x1a4>
            {
                usRegAddressWritten =
                    ( USHORT ) ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_ADDR_OFF] << 8U );
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	3301      	adds	r3, #1
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b29a      	uxth	r2, r3
                usRegAddressWritten =
 800afb0:	2012      	movs	r0, #18
 800afb2:	183b      	adds	r3, r7, r0
 800afb4:	0212      	lsls	r2, r2, #8
 800afb6:	801a      	strh	r2, [r3, #0]

                usRegAddressWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_ADDR_OFF + 1];
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	3302      	adds	r3, #2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	b299      	uxth	r1, r3
 800afc2:	183b      	adds	r3, r7, r0
 800afc4:	183a      	adds	r2, r7, r0
 800afc6:	8812      	ldrh	r2, [r2, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	801a      	strh	r2, [r3, #0]
                usValueWritten =
                    ( USHORT ) ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_VALUE_OFF] << 8U );
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	3303      	adds	r3, #3
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	b29a      	uxth	r2, r3
                usValueWritten =
 800afd6:	2410      	movs	r4, #16
 800afd8:	193b      	adds	r3, r7, r4
 800afda:	0212      	lsls	r2, r2, #8
 800afdc:	801a      	strh	r2, [r3, #0]
                usValueWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_REG_RESP_VALUE_OFF + 1];
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	3304      	adds	r3, #4
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	b299      	uxth	r1, r3
 800afe8:	193b      	adds	r3, r7, r4
 800afea:	193a      	adds	r2, r7, r4
 800afec:	8812      	ldrh	r2, [r2, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	801a      	strh	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 800aff2:	183a      	adds	r2, r7, r0
 800aff4:	2308      	movs	r3, #8
 800aff6:	18fb      	adds	r3, r7, r3
 800aff8:	8812      	ldrh	r2, [r2, #0]
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d109      	bne.n	800b014 <vMBMWriteSingleRegisterPolled+0x19c>
 800b000:	193a      	adds	r2, r7, r4
 800b002:	1dbb      	adds	r3, r7, #6
 800b004:	8812      	ldrh	r2, [r2, #0]
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d103      	bne.n	800b014 <vMBMWriteSingleRegisterPolled+0x19c>
                {
                    *peStatus = MB_ENOERR;
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	2200      	movs	r2, #0
 800b010:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 800b012:	e01c      	b.n	800b04e <vMBMWriteSingleRegisterPolled+0x1d6>
                }
                else
                {
                    *peStatus = MB_EIO;
 800b014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b016:	2205      	movs	r2, #5
 800b018:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegAddress ) && ( usValueWritten == usValue ) )
 800b01a:	e018      	b.n	800b04e <vMBMWriteSingleRegisterPolled+0x1d6>
                }
            }
            /* Check for exception frame. */
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	89db      	ldrh	r3, [r3, #14]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d110      	bne.n	800b046 <vMBMWriteSingleRegisterPolled+0x1ce>
                     MB_PDU_FUNC_ISEXCEPTION_FOR( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF], MBM_FUNC_WR_REG ) )
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	781b      	ldrb	r3, [r3, #0]
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b02a:	2b86      	cmp	r3, #134	; 0x86
 800b02c:	d10b      	bne.n	800b046 <vMBMWriteSingleRegisterPolled+0x1ce>
            {
                *peStatus = eMBExceptionToErrorcode( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_EX_CODE_OFF] );
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	3301      	adds	r3, #1
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	0018      	movs	r0, r3
 800b038:	f001 fec2 	bl	800cdc0 <eMBExceptionToErrorcode>
 800b03c:	0003      	movs	r3, r0
 800b03e:	001a      	movs	r2, r3
 800b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	e003      	b.n	800b04e <vMBMWriteSingleRegisterPolled+0x1d6>
            }
            else
            {
                *peStatus = MB_EIO;
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	2205      	movs	r2, #5
 800b04a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b04c:	e00b      	b.n	800b066 <vMBMWriteSingleRegisterPolled+0x1ee>
 800b04e:	e00a      	b.n	800b066 <vMBMWriteSingleRegisterPolled+0x1ee>

        case MBM_STATE_ERROR:
            /* No cleanup required. */
            *peState = MBM_STATE_DONE;
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	2205      	movs	r2, #5
 800b054:	701a      	strb	r2, [r3, #0]
            break;
 800b056:	e006      	b.n	800b066 <vMBMWriteSingleRegisterPolled+0x1ee>

        default:
            *peState = MBM_STATE_DONE;
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	2205      	movs	r2, #5
 800b05c:	701a      	strb	r2, [r3, #0]
            *peStatus = MB_EILLSTATE;
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	2206      	movs	r2, #6
 800b062:	701a      	strb	r2, [r3, #0]
        {
            *peStatus = MB_EINVAL;
        }
    }
#endif
}
 800b064:	46c0      	nop			; (mov r8, r8)
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	46bd      	mov	sp, r7
 800b06a:	b007      	add	sp, #28
 800b06c:	bd90      	pop	{r4, r7, pc}

0800b06e <vMBMReadHoldingRegistersPolled>:

#if MBM_FUNC_RD_HOLDING_ENABLED == 1
void
vMBMReadHoldingRegistersPolled( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegStartAddress, UBYTE ubNRegs,
                                USHORT arusBufferOut[], eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 800b06e:	b590      	push	{r4, r7, lr}
 800b070:	b087      	sub	sp, #28
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	000c      	movs	r4, r1
 800b078:	0010      	movs	r0, r2
 800b07a:	0019      	movs	r1, r3
 800b07c:	1cfb      	adds	r3, r7, #3
 800b07e:	1c22      	adds	r2, r4, #0
 800b080:	701a      	strb	r2, [r3, #0]
 800b082:	003b      	movs	r3, r7
 800b084:	1c02      	adds	r2, r0, #0
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	1cbb      	adds	r3, r7, #2
 800b08a:	1c0a      	adds	r2, r1, #0
 800b08c:	701a      	strb	r2, [r3, #0]
    
	UBYTE           ubNRegCnt;
    xMBMInternalHandle *pxIntHdl = ( xMBMInternalHandle * ) xHdl;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	60fb      	str	r3, [r7, #12]
    if( bMBMIsHdlValid( pxIntHdl ) && ( peState != NULL ) && ( peStatus != NULL ) && ( NULL != arusBufferOut ) )
#else
    if( TRUE )
#endif
    {
        switch ( *peState )
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b04      	cmp	r3, #4
 800b098:	d100      	bne.n	800b09c <vMBMReadHoldingRegistersPolled+0x2e>
 800b09a:	e0f3      	b.n	800b284 <vMBMReadHoldingRegistersPolled+0x216>
 800b09c:	dd00      	ble.n	800b0a0 <vMBMReadHoldingRegistersPolled+0x32>
 800b09e:	e0f5      	b.n	800b28c <vMBMReadHoldingRegistersPolled+0x21e>
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d100      	bne.n	800b0a6 <vMBMReadHoldingRegistersPolled+0x38>
 800b0a4:	e07d      	b.n	800b1a2 <vMBMReadHoldingRegistersPolled+0x134>
 800b0a6:	dd00      	ble.n	800b0aa <vMBMReadHoldingRegistersPolled+0x3c>
 800b0a8:	e0f0      	b.n	800b28c <vMBMReadHoldingRegistersPolled+0x21e>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d006      	beq.n	800b0bc <vMBMReadHoldingRegistersPolled+0x4e>
 800b0ae:	da00      	bge.n	800b0b2 <vMBMReadHoldingRegistersPolled+0x44>
 800b0b0:	e0ec      	b.n	800b28c <vMBMReadHoldingRegistersPolled+0x21e>
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d900      	bls.n	800b0ba <vMBMReadHoldingRegistersPolled+0x4c>
 800b0b8:	e0e8      	b.n	800b28c <vMBMReadHoldingRegistersPolled+0x21e>
 800b0ba:	e069      	b.n	800b190 <vMBMReadHoldingRegistersPolled+0x122>
        {
            /* In this state we prepare the frame and send it. */
        case MBM_STATE_NONE:
            if( ( ( ( ULONG ) usRegStartAddress + ( ULONG ) ubNRegs ) < ( ULONG ) 0x10000 ) &&
 800b0bc:	003b      	movs	r3, r7
 800b0be:	881a      	ldrh	r2, [r3, #0]
 800b0c0:	1cbb      	adds	r3, r7, #2
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	18d2      	adds	r2, r2, r3
 800b0c6:	2380      	movs	r3, #128	; 0x80
 800b0c8:	025b      	lsls	r3, r3, #9
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d259      	bcs.n	800b182 <vMBMReadHoldingRegistersPolled+0x114>
 800b0ce:	1cbb      	adds	r3, r7, #2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d055      	beq.n	800b182 <vMBMReadHoldingRegistersPolled+0x114>
                ( ubNRegs > 0 ) && ( ubNRegs <= MBM_FUNC_RD_REGS_REGCNT_MAX ) )
 800b0d6:	1cbb      	adds	r3, r7, #2
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	2b7d      	cmp	r3, #125	; 0x7d
 800b0dc:	d851      	bhi.n	800b182 <vMBMReadHoldingRegistersPolled+0x114>
                                 "[IDX=" MBP_FORMAT_USHORT "] Read holding registers request (start=" MBP_FORMAT_USHORT
                                 ", length=" MBP_FORMAT_USHORT ").\n", ( USHORT ) pxIntHdl->ubIdx, usRegStartAddress,
                                 ( USHORT ) ubNRegs );
                }
#endif
                pxIntHdl->usFrameMBPDULength = 0;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = MBM_FUNC_RD_REGS;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	89d2      	ldrh	r2, [r2, #14]
 800b0ec:	189b      	adds	r3, r3, r2
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	89db      	ldrh	r3, [r3, #14]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegStartAddress >> 8U );
 800b0fe:	003b      	movs	r3, r7
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	b299      	uxth	r1, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	89d2      	ldrh	r2, [r2, #14]
 800b10e:	189b      	adds	r3, r3, r2
 800b110:	b2ca      	uxtb	r2, r1
 800b112:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	89db      	ldrh	r3, [r3, #14]
 800b118:	3301      	adds	r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	89d2      	ldrh	r2, [r2, #14]
 800b128:	189b      	adds	r3, r3, r2
                    ( UBYTE ) ( usRegStartAddress & 0x00FFU );
 800b12a:	003a      	movs	r2, r7
 800b12c:	8812      	ldrh	r2, [r2, #0]
 800b12e:	b2d2      	uxtb	r2, r2
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b130:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	89db      	ldrh	r3, [r3, #14]
 800b136:	3301      	adds	r3, #1
 800b138:	b29a      	uxth	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = 0;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	89d2      	ldrh	r2, [r2, #14]
 800b146:	189b      	adds	r3, r3, r2
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	89db      	ldrh	r3, [r3, #14]
 800b150:	3301      	adds	r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ubNRegs;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	89d2      	ldrh	r2, [r2, #14]
 800b160:	189b      	adds	r3, r3, r2
 800b162:	1cba      	adds	r2, r7, #2
 800b164:	7812      	ldrb	r2, [r2, #0]
 800b166:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	89db      	ldrh	r3, [r3, #14]
 800b16c:	3301      	adds	r3, #1
 800b16e:	b29a      	uxth	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	81da      	strh	r2, [r3, #14]

                /* Frame is assembled. Now send it. */
                *peStatus = MB_EAGAIN;
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	2207      	movs	r2, #7
 800b178:	701a      	strb	r2, [r3, #0]
                *peState = MBM_STATE_SEND;
 800b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
            else
            {
                *peStatus = MB_EINVAL;
                *peState = MBM_STATE_DONE;
            }
            break;
 800b180:	e08b      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>
                *peStatus = MB_EINVAL;
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	2202      	movs	r2, #2
 800b186:	701a      	strb	r2, [r3, #0]
                *peState = MBM_STATE_DONE;
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	2205      	movs	r2, #5
 800b18c:	701a      	strb	r2, [r3, #0]
            break;
 800b18e:	e084      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>

            /* These states are handled by the common state machine. */
        case MBM_STATE_SEND:
        case MBM_STATE_WAITING:
            vMBMMasterTransactionPolled( pxIntHdl, ucSlaveAddress, peState, peStatus );
 800b190:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b194:	1cfb      	adds	r3, r7, #3
 800b196:	7819      	ldrb	r1, [r3, #0]
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	0023      	movs	r3, r4
 800b19c:	f7fe fdf0 	bl	8009d80 <vMBMMasterTransactionPolled>
            break;
 800b1a0:	e07b      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>

            /* We need to disassemble the response here. */
        case MBM_STATE_DISASSEMBLE:
            *peState = MBM_STATE_DONE;
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	701a      	strb	r2, [r3, #0]
            if( ( MBM_FUNC_RD_REGS_RESP_SIZE( ubNRegs ) == pxIntHdl->usFrameMBPDULength ) &&
 800b1a8:	1cbb      	adds	r3, r7, #2
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	18db      	adds	r3, r3, r3
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	89db      	ldrh	r3, [r3, #14]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d148      	bne.n	800b250 <vMBMReadHoldingRegistersPolled+0x1e2>
                ( MBM_FUNC_RD_REGS == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) &&
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
            if( ( MBM_FUNC_RD_REGS_RESP_SIZE( ubNRegs ) == pxIntHdl->usFrameMBPDULength ) &&
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d143      	bne.n	800b250 <vMBMReadHoldingRegistersPolled+0x1e2>
                ( ( 2 * ubNRegs ) == pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_RD_REGS_RESP_BYTECNT_OFF] ) )
 800b1c8:	1cbb      	adds	r3, r7, #2
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	005a      	lsls	r2, r3, #1
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	781b      	ldrb	r3, [r3, #0]
                ( MBM_FUNC_RD_REGS == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) &&
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d13a      	bne.n	800b250 <vMBMReadHoldingRegistersPolled+0x1e2>
            {

                /* A pointer pointing to the first register value in the stream. */
                pubCurPtr = &( pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_RD_REGS_RESP_REGS_OFF] );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	3302      	adds	r3, #2
 800b1e0:	613b      	str	r3, [r7, #16]
                for( ubNRegCnt = 0; ubNRegCnt < ubNRegs; ubNRegCnt++ )
 800b1e2:	2317      	movs	r3, #23
 800b1e4:	18fb      	adds	r3, r7, r3
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	e026      	b.n	800b23a <vMBMReadHoldingRegistersPolled+0x1cc>
                {
                    arusBufferOut[ubNRegCnt] = ( USHORT ) ( ( USHORT ) * pubCurPtr++ << 8U );
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	613a      	str	r2, [r7, #16]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	2017      	movs	r0, #23
 800b1f8:	183b      	adds	r3, r7, r0
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b200:	18cb      	adds	r3, r1, r3
 800b202:	0212      	lsls	r2, r2, #8
 800b204:	b292      	uxth	r2, r2
 800b206:	801a      	strh	r2, [r3, #0]
                    arusBufferOut[ubNRegCnt] |= ( USHORT ) * pubCurPtr++;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	613a      	str	r2, [r7, #16]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	b299      	uxth	r1, r3
 800b212:	183b      	adds	r3, r7, r0
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b21a:	18d3      	adds	r3, r2, r3
 800b21c:	881a      	ldrh	r2, [r3, #0]
 800b21e:	0004      	movs	r4, r0
 800b220:	183b      	adds	r3, r7, r0
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b228:	18c3      	adds	r3, r0, r3
 800b22a:	430a      	orrs	r2, r1
 800b22c:	b292      	uxth	r2, r2
 800b22e:	801a      	strh	r2, [r3, #0]
                for( ubNRegCnt = 0; ubNRegCnt < ubNRegs; ubNRegCnt++ )
 800b230:	193b      	adds	r3, r7, r4
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	193b      	adds	r3, r7, r4
 800b236:	3201      	adds	r2, #1
 800b238:	701a      	strb	r2, [r3, #0]
 800b23a:	2317      	movs	r3, #23
 800b23c:	18fa      	adds	r2, r7, r3
 800b23e:	1cbb      	adds	r3, r7, #2
 800b240:	7812      	ldrb	r2, [r2, #0]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d3d1      	bcc.n	800b1ec <vMBMReadHoldingRegistersPolled+0x17e>
                }
                *peStatus = MB_ENOERR;
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	2200      	movs	r2, #0
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	e018      	b.n	800b282 <vMBMReadHoldingRegistersPolled+0x214>
            }
            /* Check for exception frame. */
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	89db      	ldrh	r3, [r3, #14]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d110      	bne.n	800b27a <vMBMReadHoldingRegistersPolled+0x20c>
                     MB_PDU_FUNC_ISEXCEPTION_FOR( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF], MBM_FUNC_RD_REGS ) )
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	781b      	ldrb	r3, [r3, #0]
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b25e:	2b83      	cmp	r3, #131	; 0x83
 800b260:	d10b      	bne.n	800b27a <vMBMReadHoldingRegistersPolled+0x20c>
            {
                *peStatus = eMBExceptionToErrorcode( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_EX_CODE_OFF] );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	3301      	adds	r3, #1
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	0018      	movs	r0, r3
 800b26c:	f001 fda8 	bl	800cdc0 <eMBExceptionToErrorcode>
 800b270:	0003      	movs	r3, r0
 800b272:	001a      	movs	r2, r3
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	e003      	b.n	800b282 <vMBMReadHoldingRegistersPolled+0x214>
            }
            else
            {
                *peStatus = MB_EIO;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	2205      	movs	r2, #5
 800b27e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b280:	e00b      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>
 800b282:	e00a      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>

        case MBM_STATE_ERROR:
            /* No cleanup required. */
            *peState = MBM_STATE_DONE;
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	2205      	movs	r2, #5
 800b288:	701a      	strb	r2, [r3, #0]
            break;
 800b28a:	e006      	b.n	800b29a <vMBMReadHoldingRegistersPolled+0x22c>

        default:
            *peState = MBM_STATE_DONE;
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	2205      	movs	r2, #5
 800b290:	701a      	strb	r2, [r3, #0]
            *peStatus = MB_EILLSTATE;
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	2206      	movs	r2, #6
 800b296:	701a      	strb	r2, [r3, #0]
        {
            *peStatus = MB_EINVAL;
        }
    }
#endif
}
 800b298:	46c0      	nop			; (mov r8, r8)
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	46bd      	mov	sp, r7
 800b29e:	b007      	add	sp, #28
 800b2a0:	bd90      	pop	{r4, r7, pc}

0800b2a2 <vMBMWriteMultipleRegistersPolled>:
#if MBM_FUNC_WR_MUL_REGS_ENABLED == 1
void
vMBMWriteMultipleRegistersPolled( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegStartAddress,
                                  UBYTE ubNRegs, const USHORT arusBufferIn[],
                                  eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 800b2a2:	b590      	push	{r4, r7, lr}
 800b2a4:	b087      	sub	sp, #28
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	000c      	movs	r4, r1
 800b2ac:	0010      	movs	r0, r2
 800b2ae:	0019      	movs	r1, r3
 800b2b0:	1cfb      	adds	r3, r7, #3
 800b2b2:	1c22      	adds	r2, r4, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	003b      	movs	r3, r7
 800b2b8:	1c02      	adds	r2, r0, #0
 800b2ba:	801a      	strh	r2, [r3, #0]
 800b2bc:	1cbb      	adds	r3, r7, #2
 800b2be:	1c0a      	adds	r2, r1, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
    USHORT          usRegAddressWritten;
    USHORT          usRegsWritten;
    UBYTE           ubRegIdx;
    xMBMInternalHandle *pxIntHdl = ( xMBMInternalHandle * ) xHdl;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) && ( peState != NULL ) && ( peStatus != NULL ) && ( NULL != arusBufferIn ) )
#else
    if( TRUE )
#endif
    {
        switch ( *peState )
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d100      	bne.n	800b2d0 <vMBMWriteMultipleRegistersPolled+0x2e>
 800b2ce:	e115      	b.n	800b4fc <vMBMWriteMultipleRegistersPolled+0x25a>
 800b2d0:	dd00      	ble.n	800b2d4 <vMBMWriteMultipleRegistersPolled+0x32>
 800b2d2:	e117      	b.n	800b504 <vMBMWriteMultipleRegistersPolled+0x262>
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d100      	bne.n	800b2da <vMBMWriteMultipleRegistersPolled+0x38>
 800b2d8:	e0af      	b.n	800b43a <vMBMWriteMultipleRegistersPolled+0x198>
 800b2da:	dd00      	ble.n	800b2de <vMBMWriteMultipleRegistersPolled+0x3c>
 800b2dc:	e112      	b.n	800b504 <vMBMWriteMultipleRegistersPolled+0x262>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d006      	beq.n	800b2f0 <vMBMWriteMultipleRegistersPolled+0x4e>
 800b2e2:	da00      	bge.n	800b2e6 <vMBMWriteMultipleRegistersPolled+0x44>
 800b2e4:	e10e      	b.n	800b504 <vMBMWriteMultipleRegistersPolled+0x262>
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d900      	bls.n	800b2ee <vMBMWriteMultipleRegistersPolled+0x4c>
 800b2ec:	e10a      	b.n	800b504 <vMBMWriteMultipleRegistersPolled+0x262>
 800b2ee:	e09b      	b.n	800b428 <vMBMWriteMultipleRegistersPolled+0x186>
                                 "[IDX=" MBP_FORMAT_USHORT "] Write multiple holding registers request (start="
                                 MBP_FORMAT_USHORT ", length=" MBP_FORMAT_USHORT ").\n", ( USHORT ) pxIntHdl->ubIdx,
                                 usRegStartAddress, ( USHORT ) ubNRegs );
                }
#endif
                pxIntHdl->usFrameMBPDULength = 0;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = MBM_FUNC_WR_MUL_REGS;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	89d2      	ldrh	r2, [r2, #14]
 800b2fe:	189b      	adds	r3, r3, r2
 800b300:	2210      	movs	r2, #16
 800b302:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	89db      	ldrh	r3, [r3, #14]
 800b308:	3301      	adds	r3, #1
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegStartAddress >> 8U );
 800b310:	003b      	movs	r3, r7
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	b299      	uxth	r1, r3
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	89d2      	ldrh	r2, [r2, #14]
 800b320:	189b      	adds	r3, r3, r2
 800b322:	b2ca      	uxtb	r2, r1
 800b324:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	89db      	ldrh	r3, [r3, #14]
 800b32a:	3301      	adds	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	89d2      	ldrh	r2, [r2, #14]
 800b33a:	189b      	adds	r3, r3, r2
                    ( UBYTE ) ( usRegStartAddress & 0x00FFU );
 800b33c:	003a      	movs	r2, r7
 800b33e:	8812      	ldrh	r2, [r2, #0]
 800b340:	b2d2      	uxtb	r2, r2
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b342:	701a      	strb	r2, [r3, #0]
                pxIntHdl->usFrameMBPDULength++;					
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	89db      	ldrh	r3, [r3, #14]
 800b348:	3301      	adds	r3, #1
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = 0;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	89d2      	ldrh	r2, [r2, #14]
 800b358:	189b      	adds	r3, r3, r2
 800b35a:	2200      	movs	r2, #0
 800b35c:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	89db      	ldrh	r3, [r3, #14]
 800b362:	3301      	adds	r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ubNRegs;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	89d2      	ldrh	r2, [r2, #14]
 800b372:	189b      	adds	r3, r3, r2
 800b374:	1cba      	adds	r2, r7, #2
 800b376:	7812      	ldrb	r2, [r2, #0]
 800b378:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	89db      	ldrh	r3, [r3, #14]
 800b37e:	3301      	adds	r3, #1
 800b380:	b29a      	uxth	r2, r3
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( 2U * ubNRegs );
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	89d2      	ldrh	r2, [r2, #14]
 800b38e:	189a      	adds	r2, r3, r2
 800b390:	1cbb      	adds	r3, r7, #2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	18db      	adds	r3, r3, r3
 800b396:	b2db      	uxtb	r3, r3
 800b398:	7013      	strb	r3, [r2, #0]
				pxIntHdl->usFrameMBPDULength++;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	89db      	ldrh	r3, [r3, #14]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	81da      	strh	r2, [r3, #14]

                for( ubRegIdx = 0; ubRegIdx < ubNRegs; ubRegIdx++ )
 800b3a6:	2317      	movs	r3, #23
 800b3a8:	18fb      	adds	r3, r7, r3
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	e02d      	b.n	800b40c <vMBMWriteMultipleRegistersPolled+0x16a>
                {
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
                        ( UBYTE ) ( arusBufferIn[ubRegIdx] >> 8U );
 800b3b0:	2017      	movs	r0, #23
 800b3b2:	183b      	adds	r3, r7, r0
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ba:	18d3      	adds	r3, r2, r3
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	b299      	uxth	r1, r3
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	89d2      	ldrh	r2, [r2, #14]
 800b3ca:	189b      	adds	r3, r3, r2
                        ( UBYTE ) ( arusBufferIn[ubRegIdx] >> 8U );
 800b3cc:	b2ca      	uxtb	r2, r1
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b3ce:	701a      	strb	r2, [r3, #0]
                    pxIntHdl->usFrameMBPDULength++;						
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	89db      	ldrh	r3, [r3, #14]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	81da      	strh	r2, [r3, #14]
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
                        ( UBYTE ) ( arusBufferIn[ubRegIdx] & 0x00FFU );
 800b3dc:	183b      	adds	r3, r7, r0
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	005b      	lsls	r3, r3, #1
 800b3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3e4:	18d3      	adds	r3, r2, r3
 800b3e6:	8819      	ldrh	r1, [r3, #0]
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	89d2      	ldrh	r2, [r2, #14]
 800b3f0:	189b      	adds	r3, r3, r2
                        ( UBYTE ) ( arusBufferIn[ubRegIdx] & 0x00FFU );
 800b3f2:	b2ca      	uxtb	r2, r1
                    pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 800b3f4:	701a      	strb	r2, [r3, #0]
                    pxIntHdl->usFrameMBPDULength++;						
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	89db      	ldrh	r3, [r3, #14]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	81da      	strh	r2, [r3, #14]
                for( ubRegIdx = 0; ubRegIdx < ubNRegs; ubRegIdx++ )
 800b402:	183b      	adds	r3, r7, r0
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	183b      	adds	r3, r7, r0
 800b408:	3201      	adds	r2, #1
 800b40a:	701a      	strb	r2, [r3, #0]
 800b40c:	2317      	movs	r3, #23
 800b40e:	18fa      	adds	r2, r7, r3
 800b410:	1cbb      	adds	r3, r7, #2
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d3ca      	bcc.n	800b3b0 <vMBMWriteMultipleRegistersPolled+0x10e>
                }
                /* Frame is assembled. Now send it. */
                *peStatus = MB_EAGAIN;
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	2207      	movs	r2, #7
 800b41e:	701a      	strb	r2, [r3, #0]
                *peState = MBM_STATE_SEND;
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	2201      	movs	r2, #1
 800b424:	701a      	strb	r2, [r3, #0]
            {
                *peStatus = MB_EINVAL;
                *peState = MBM_STATE_DONE;
            }
#endif
            break;
 800b426:	e074      	b.n	800b512 <vMBMWriteMultipleRegistersPolled+0x270>

            /* These states are handled by the common state machine. */
        case MBM_STATE_SEND:
        case MBM_STATE_WAITING:
            vMBMMasterTransactionPolled( pxIntHdl, ucSlaveAddress, peState, peStatus );
 800b428:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b42c:	1cfb      	adds	r3, r7, #3
 800b42e:	7819      	ldrb	r1, [r3, #0]
 800b430:	6938      	ldr	r0, [r7, #16]
 800b432:	0023      	movs	r3, r4
 800b434:	f7fe fca4 	bl	8009d80 <vMBMMasterTransactionPolled>
            break;
 800b438:	e06b      	b.n	800b512 <vMBMWriteMultipleRegistersPolled+0x270>

            /* We need to disassemble the response here. */
        case MBM_STATE_DISASSEMBLE:
            *peState = MBM_STATE_DONE;
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	2205      	movs	r2, #5
 800b43e:	701a      	strb	r2, [r3, #0]
            if( ( MBM_FUNC_WR_MUL_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	89db      	ldrh	r3, [r3, #14]
 800b444:	2b05      	cmp	r3, #5
 800b446:	d13f      	bne.n	800b4c8 <vMBMWriteMultipleRegistersPolled+0x226>
                ( MBM_FUNC_WR_MUL_REGS == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) )
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	781b      	ldrb	r3, [r3, #0]
            if( ( MBM_FUNC_WR_MUL_REGS_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b44e:	2b10      	cmp	r3, #16
 800b450:	d13a      	bne.n	800b4c8 <vMBMWriteMultipleRegistersPolled+0x226>
            {
                usRegAddressWritten = ( USHORT )
                    ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_MUL_REGS_RESP_ADDR_OFF] << 8U );
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	3301      	adds	r3, #1
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b29a      	uxth	r2, r3
                usRegAddressWritten = ( USHORT )
 800b45c:	200e      	movs	r0, #14
 800b45e:	183b      	adds	r3, r7, r0
 800b460:	0212      	lsls	r2, r2, #8
 800b462:	801a      	strh	r2, [r3, #0]
                usRegAddressWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_MUL_REGS_RESP_ADDR_OFF + 1];
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	3302      	adds	r3, #2
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	b299      	uxth	r1, r3
 800b46e:	183b      	adds	r3, r7, r0
 800b470:	183a      	adds	r2, r7, r0
 800b472:	8812      	ldrh	r2, [r2, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	801a      	strh	r2, [r3, #0]
                usRegsWritten = ( USHORT )
                    ( ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_MUL_REGS_RESP_REGCNT_OFF] << 8U );
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	3303      	adds	r3, #3
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	b29a      	uxth	r2, r3
                usRegsWritten = ( USHORT )
 800b482:	240c      	movs	r4, #12
 800b484:	193b      	adds	r3, r7, r4
 800b486:	0212      	lsls	r2, r2, #8
 800b488:	801a      	strh	r2, [r3, #0]
                usRegsWritten |= ( USHORT ) pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_WR_MUL_REGS_RESP_REGCNT_OFF + 1];
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	3304      	adds	r3, #4
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b299      	uxth	r1, r3
 800b494:	193b      	adds	r3, r7, r4
 800b496:	193a      	adds	r2, r7, r4
 800b498:	8812      	ldrh	r2, [r2, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	801a      	strh	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegStartAddress ) && ( ( USHORT ) ubNRegs == usRegsWritten ) )
 800b49e:	183a      	adds	r2, r7, r0
 800b4a0:	003b      	movs	r3, r7
 800b4a2:	8812      	ldrh	r2, [r2, #0]
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d10a      	bne.n	800b4c0 <vMBMWriteMultipleRegistersPolled+0x21e>
 800b4aa:	1cbb      	adds	r3, r7, #2
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	193a      	adds	r2, r7, r4
 800b4b2:	8812      	ldrh	r2, [r2, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d103      	bne.n	800b4c0 <vMBMWriteMultipleRegistersPolled+0x21e>
                {
                    *peStatus = MB_ENOERR;
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegStartAddress ) && ( ( USHORT ) ubNRegs == usRegsWritten ) )
 800b4be:	e01c      	b.n	800b4fa <vMBMWriteMultipleRegistersPolled+0x258>
                }
                else
                {
                    *peStatus = MB_EIO;
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	701a      	strb	r2, [r3, #0]
                if( ( usRegAddressWritten == usRegStartAddress ) && ( ( USHORT ) ubNRegs == usRegsWritten ) )
 800b4c6:	e018      	b.n	800b4fa <vMBMWriteMultipleRegistersPolled+0x258>
                }
            }
            /* Check for exception frame. */
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	89db      	ldrh	r3, [r3, #14]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d110      	bne.n	800b4f2 <vMBMWriteMultipleRegistersPolled+0x250>
                     MB_PDU_FUNC_ISEXCEPTION_FOR( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF],
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 800b4d6:	2b90      	cmp	r3, #144	; 0x90
 800b4d8:	d10b      	bne.n	800b4f2 <vMBMWriteMultipleRegistersPolled+0x250>
                                                  MBM_FUNC_WR_MUL_REGS ) )
            {
                *peStatus = eMBExceptionToErrorcode( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_EX_CODE_OFF] );
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f001 fc6c 	bl	800cdc0 <eMBExceptionToErrorcode>
 800b4e8:	0003      	movs	r3, r0
 800b4ea:	001a      	movs	r2, r3
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e003      	b.n	800b4fa <vMBMWriteMultipleRegistersPolled+0x258>
            }
            else
            {
                *peStatus = MB_EIO;
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	2205      	movs	r2, #5
 800b4f6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b4f8:	e00b      	b.n	800b512 <vMBMWriteMultipleRegistersPolled+0x270>
 800b4fa:	e00a      	b.n	800b512 <vMBMWriteMultipleRegistersPolled+0x270>

        case MBM_STATE_ERROR:
            /* No cleanup required. */
            *peState = MBM_STATE_DONE;
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	2205      	movs	r2, #5
 800b500:	701a      	strb	r2, [r3, #0]
            break;
 800b502:	e006      	b.n	800b512 <vMBMWriteMultipleRegistersPolled+0x270>

        default:
            *peState = MBM_STATE_DONE;
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	2205      	movs	r2, #5
 800b508:	701a      	strb	r2, [r3, #0]
            *peStatus = MB_EILLSTATE;
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	2206      	movs	r2, #6
 800b50e:	701a      	strb	r2, [r3, #0]
        {
            *peStatus = MB_EINVAL;
        }
    }
#endif
}
 800b510:	46c0      	nop			; (mov r8, r8)
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	46bd      	mov	sp, r7
 800b516:	b007      	add	sp, #28
 800b518:	bd90      	pop	{r4, r7, pc}

0800b51a <eMBMWriteSingleRegister>:

/* ----------------------- Start implementation (Blocking functions) --------*/
#if MBM_FUNC_WR_SINGLE_REG_ENABLED == 1
eMBErrorCode
eMBMWriteSingleRegister( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegAddress, USHORT usValue )
{
 800b51a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51c:	b089      	sub	sp, #36	; 0x24
 800b51e:	af02      	add	r7, sp, #8
 800b520:	60f8      	str	r0, [r7, #12]
 800b522:	000c      	movs	r4, r1
 800b524:	0010      	movs	r0, r2
 800b526:	0019      	movs	r1, r3
 800b528:	230b      	movs	r3, #11
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	1c22      	adds	r2, r4, #0
 800b52e:	701a      	strb	r2, [r3, #0]
 800b530:	2308      	movs	r3, #8
 800b532:	18fb      	adds	r3, r7, r3
 800b534:	1c02      	adds	r2, r0, #0
 800b536:	801a      	strh	r2, [r3, #0]
 800b538:	1dbb      	adds	r3, r7, #6
 800b53a:	1c0a      	adds	r2, r1, #0
 800b53c:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus;
    eMBMQueryState  eState = MBM_STATE_NONE;
 800b53e:	2316      	movs	r3, #22
 800b540:	18fb      	adds	r3, r7, r3
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]

    do
    {
        vMBMWriteSingleRegisterPolled( xHdl, ucSlaveAddress, usRegAddress, usValue, &eState, &eStatus );
 800b546:	1dbb      	adds	r3, r7, #6
 800b548:	881c      	ldrh	r4, [r3, #0]
 800b54a:	2308      	movs	r3, #8
 800b54c:	18fb      	adds	r3, r7, r3
 800b54e:	881a      	ldrh	r2, [r3, #0]
 800b550:	230b      	movs	r3, #11
 800b552:	18fb      	adds	r3, r7, r3
 800b554:	7819      	ldrb	r1, [r3, #0]
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	2517      	movs	r5, #23
 800b55a:	197b      	adds	r3, r7, r5
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	2616      	movs	r6, #22
 800b560:	19bb      	adds	r3, r7, r6
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	0023      	movs	r3, r4
 800b566:	f7ff fc87 	bl	800ae78 <vMBMWriteSingleRegisterPolled>
    }
    while( eState != MBM_STATE_DONE );
 800b56a:	19bb      	adds	r3, r7, r6
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d1e9      	bne.n	800b546 <eMBMWriteSingleRegister+0x2c>
    return eStatus;
 800b572:	197b      	adds	r3, r7, r5
 800b574:	781b      	ldrb	r3, [r3, #0]
}
 800b576:	0018      	movs	r0, r3
 800b578:	46bd      	mov	sp, r7
 800b57a:	b007      	add	sp, #28
 800b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b57e <eMBMReadHoldingRegisters>:

#if MBM_FUNC_RD_HOLDING_ENABLED == 1
eMBErrorCode
eMBMReadHoldingRegisters( xMBHandle xHdl, UCHAR ucSlaveAddress,
                          USHORT usRegStartAddress, UBYTE ubNRegs, USHORT arusBufferOut[] )
{
 800b57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b580:	b089      	sub	sp, #36	; 0x24
 800b582:	af04      	add	r7, sp, #16
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	000c      	movs	r4, r1
 800b588:	0010      	movs	r0, r2
 800b58a:	0019      	movs	r1, r3
 800b58c:	1cfb      	adds	r3, r7, #3
 800b58e:	1c22      	adds	r2, r4, #0
 800b590:	701a      	strb	r2, [r3, #0]
 800b592:	003b      	movs	r3, r7
 800b594:	1c02      	adds	r2, r0, #0
 800b596:	801a      	strh	r2, [r3, #0]
 800b598:	1cbb      	adds	r3, r7, #2
 800b59a:	1c0a      	adds	r2, r1, #0
 800b59c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    eMBMQueryState  eState = MBM_STATE_NONE;
 800b59e:	230e      	movs	r3, #14
 800b5a0:	18fb      	adds	r3, r7, r3
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]

    do
    {
        vMBMReadHoldingRegistersPolled( xHdl, ucSlaveAddress, usRegStartAddress, ubNRegs, arusBufferOut, &eState,
 800b5a6:	1cbb      	adds	r3, r7, #2
 800b5a8:	781c      	ldrb	r4, [r3, #0]
 800b5aa:	003b      	movs	r3, r7
 800b5ac:	881a      	ldrh	r2, [r3, #0]
 800b5ae:	1cfb      	adds	r3, r7, #3
 800b5b0:	7819      	ldrb	r1, [r3, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	250f      	movs	r5, #15
 800b5b6:	197b      	adds	r3, r7, r5
 800b5b8:	9302      	str	r3, [sp, #8]
 800b5ba:	260e      	movs	r6, #14
 800b5bc:	19bb      	adds	r3, r7, r6
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	0023      	movs	r3, r4
 800b5c6:	f7ff fd52 	bl	800b06e <vMBMReadHoldingRegistersPolled>
                                        &eStatus );
    }
    while( eState != MBM_STATE_DONE );
 800b5ca:	19bb      	adds	r3, r7, r6
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	d1e9      	bne.n	800b5a6 <eMBMReadHoldingRegisters+0x28>
//    eState = MBM_STATE_DONE;
    return eStatus;
 800b5d2:	197b      	adds	r3, r7, r5
 800b5d4:	781b      	ldrb	r3, [r3, #0]
}
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b005      	add	sp, #20
 800b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5de <eMBMWriteMultipleRegisters>:

#if MBM_FUNC_WR_MUL_REGS_ENABLED == 1
eMBErrorCode
eMBMWriteMultipleRegisters( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegStartAddress,
                            UBYTE ubNRegs, const USHORT arusBufferIn[] )
{
 800b5de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e0:	b089      	sub	sp, #36	; 0x24
 800b5e2:	af04      	add	r7, sp, #16
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	000c      	movs	r4, r1
 800b5e8:	0010      	movs	r0, r2
 800b5ea:	0019      	movs	r1, r3
 800b5ec:	1cfb      	adds	r3, r7, #3
 800b5ee:	1c22      	adds	r2, r4, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	003b      	movs	r3, r7
 800b5f4:	1c02      	adds	r2, r0, #0
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	1cbb      	adds	r3, r7, #2
 800b5fa:	1c0a      	adds	r2, r1, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    eMBMQueryState  eState = MBM_STATE_NONE;
 800b5fe:	230e      	movs	r3, #14
 800b600:	18fb      	adds	r3, r7, r3
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]

    do
    {
        vMBMWriteMultipleRegistersPolled( xHdl, ucSlaveAddress, usRegStartAddress, ubNRegs, arusBufferIn, &eState,
 800b606:	1cbb      	adds	r3, r7, #2
 800b608:	781c      	ldrb	r4, [r3, #0]
 800b60a:	003b      	movs	r3, r7
 800b60c:	881a      	ldrh	r2, [r3, #0]
 800b60e:	1cfb      	adds	r3, r7, #3
 800b610:	7819      	ldrb	r1, [r3, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	250f      	movs	r5, #15
 800b616:	197b      	adds	r3, r7, r5
 800b618:	9302      	str	r3, [sp, #8]
 800b61a:	260e      	movs	r6, #14
 800b61c:	19bb      	adds	r3, r7, r6
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	0023      	movs	r3, r4
 800b626:	f7ff fe3c 	bl	800b2a2 <vMBMWriteMultipleRegistersPolled>
                                          &eStatus );
    }
    while( eState != MBM_STATE_DONE );
 800b62a:	19bb      	adds	r3, r7, r6
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b05      	cmp	r3, #5
 800b630:	d1e9      	bne.n	800b606 <eMBMWriteMultipleRegisters+0x28>
    return eStatus;
 800b632:	197b      	adds	r3, r7, r5
 800b634:	781b      	ldrb	r3, [r3, #0]
}
 800b636:	0018      	movs	r0, r3
 800b638:	46bd      	mov	sp, r7
 800b63a:	b005      	add	sp, #20
 800b63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b640 <eMBMSerialRTUInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialRTUInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	b08d      	sub	sp, #52	; 0x34
 800b644:	af04      	add	r7, sp, #16
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	0008      	movs	r0, r1
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	0019      	movs	r1, r3
 800b64e:	230b      	movs	r3, #11
 800b650:	18fb      	adds	r3, r7, r3
 800b652:	1c02      	adds	r2, r0, #0
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	230a      	movs	r3, #10
 800b658:	18fb      	adds	r3, r7, r3
 800b65a:	1c0a      	adds	r2, r1, #0
 800b65c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 800b65e:	231f      	movs	r3, #31
 800b660:	18fb      	adds	r3, r7, r3
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]
    xMBMRTUFrameHandle *pxFrameHdl = NULL;
 800b666:	2300      	movs	r3, #0
 800b668:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800b66a:	f000 fe9e 	bl	800c3aa <vMBPEnterCritical>
        if( !bIsInitialized )
 800b66e:	4ba7      	ldr	r3, [pc, #668]	; (800b90c <eMBMSerialRTUInit+0x2cc>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d000      	beq.n	800b678 <eMBMSerialRTUInit+0x38>
 800b676:	e099      	b.n	800b7ac <eMBMSerialRTUInit+0x16c>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 800b678:	2317      	movs	r3, #23
 800b67a:	18fb      	adds	r3, r7, r3
 800b67c:	2200      	movs	r2, #0
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	e08b      	b.n	800b79a <eMBMSerialRTUInit+0x15a>
            {
                HDL_RESET( &xMBMRTUFrameHdl[ubIdx] );
 800b682:	2417      	movs	r4, #23
 800b684:	193b      	adds	r3, r7, r4
 800b686:	781a      	ldrb	r2, [r3, #0]
 800b688:	49a1      	ldr	r1, [pc, #644]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b68a:	0013      	movs	r3, r2
 800b68c:	011b      	lsls	r3, r3, #4
 800b68e:	189b      	adds	r3, r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	189b      	adds	r3, r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	22ff      	movs	r2, #255	; 0xff
 800b698:	545a      	strb	r2, [r3, r1]
 800b69a:	193b      	adds	r3, r7, r4
 800b69c:	781a      	ldrb	r2, [r3, #0]
 800b69e:	489c      	ldr	r0, [pc, #624]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	33ff      	adds	r3, #255	; 0xff
 800b6a4:	0019      	movs	r1, r3
 800b6a6:	0013      	movs	r3, r2
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	189b      	adds	r3, r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	189b      	adds	r3, r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	18c3      	adds	r3, r0, r3
 800b6b4:	185b      	adds	r3, r3, r1
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	193b      	adds	r3, r7, r4
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	4894      	ldr	r0, [pc, #592]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b6c0:	2381      	movs	r3, #129	; 0x81
 800b6c2:	0059      	lsls	r1, r3, #1
 800b6c4:	0013      	movs	r3, r2
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	189b      	adds	r3, r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	189b      	adds	r3, r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	18c3      	adds	r3, r0, r3
 800b6d2:	185b      	adds	r3, r3, r1
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	801a      	strh	r2, [r3, #0]
 800b6d8:	193b      	adds	r3, r7, r4
 800b6da:	781a      	ldrb	r2, [r3, #0]
 800b6dc:	488c      	ldr	r0, [pc, #560]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b6de:	2382      	movs	r3, #130	; 0x82
 800b6e0:	0059      	lsls	r1, r3, #1
 800b6e2:	0013      	movs	r3, r2
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	189b      	adds	r3, r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	189b      	adds	r3, r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	18c3      	adds	r3, r0, r3
 800b6f0:	185b      	adds	r3, r3, r1
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	193b      	adds	r3, r7, r4
 800b6f8:	781a      	ldrb	r2, [r3, #0]
 800b6fa:	4885      	ldr	r0, [pc, #532]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b6fc:	2383      	movs	r3, #131	; 0x83
 800b6fe:	0059      	lsls	r1, r3, #1
 800b700:	0013      	movs	r3, r2
 800b702:	011b      	lsls	r3, r3, #4
 800b704:	189b      	adds	r3, r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	189b      	adds	r3, r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	18c3      	adds	r3, r0, r3
 800b70e:	185b      	adds	r3, r3, r1
 800b710:	2200      	movs	r2, #0
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	193b      	adds	r3, r7, r4
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	487d      	ldr	r0, [pc, #500]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b71a:	2384      	movs	r3, #132	; 0x84
 800b71c:	0059      	lsls	r1, r3, #1
 800b71e:	0013      	movs	r3, r2
 800b720:	011b      	lsls	r3, r3, #4
 800b722:	189b      	adds	r3, r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	189b      	adds	r3, r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	18c3      	adds	r3, r0, r3
 800b72c:	185b      	adds	r3, r3, r1
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	193b      	adds	r3, r7, r4
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	4876      	ldr	r0, [pc, #472]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b738:	2386      	movs	r3, #134	; 0x86
 800b73a:	0059      	lsls	r1, r3, #1
 800b73c:	0013      	movs	r3, r2
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	189b      	adds	r3, r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	189b      	adds	r3, r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	18c3      	adds	r3, r0, r3
 800b74a:	185b      	adds	r3, r3, r1
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	193b      	adds	r3, r7, r4
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	486e      	ldr	r0, [pc, #440]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b756:	2388      	movs	r3, #136	; 0x88
 800b758:	0059      	lsls	r1, r3, #1
 800b75a:	0013      	movs	r3, r2
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	189b      	adds	r3, r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	18c3      	adds	r3, r0, r3
 800b768:	185b      	adds	r3, r3, r1
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	193b      	adds	r3, r7, r4
 800b770:	781a      	ldrb	r2, [r3, #0]
 800b772:	0013      	movs	r3, r2
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	189b      	adds	r3, r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	189b      	adds	r3, r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4a64      	ldr	r2, [pc, #400]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b780:	189b      	adds	r3, r3, r2
 800b782:	3301      	adds	r3, #1
 800b784:	2280      	movs	r2, #128	; 0x80
 800b786:	0052      	lsls	r2, r2, #1
 800b788:	2100      	movs	r1, #0
 800b78a:	0018      	movs	r0, r3
 800b78c:	f001 fb62 	bl	800ce54 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 800b790:	193b      	adds	r3, r7, r4
 800b792:	781a      	ldrb	r2, [r3, #0]
 800b794:	193b      	adds	r3, r7, r4
 800b796:	3201      	adds	r2, #1
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	2317      	movs	r3, #23
 800b79c:	18fb      	adds	r3, r7, r3
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d800      	bhi.n	800b7a6 <eMBMSerialRTUInit+0x166>
 800b7a4:	e76d      	b.n	800b682 <eMBMSerialRTUInit+0x42>
            }
            bIsInitialized = TRUE;
 800b7a6:	4b59      	ldr	r3, [pc, #356]	; (800b90c <eMBMSerialRTUInit+0x2cc>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 800b7ac:	2317      	movs	r3, #23
 800b7ae:	18fb      	adds	r3, r7, r3
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e023      	b.n	800b7fe <eMBMSerialRTUInit+0x1be>
        {
            if( IDX_INVALID == xMBMRTUFrameHdl[ubIdx].ubIdx )
 800b7b6:	2017      	movs	r0, #23
 800b7b8:	183b      	adds	r3, r7, r0
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	4954      	ldr	r1, [pc, #336]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b7be:	0013      	movs	r3, r2
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	189b      	adds	r3, r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	5c5b      	ldrb	r3, [r3, r1]
 800b7cc:	2bff      	cmp	r3, #255	; 0xff
 800b7ce:	d110      	bne.n	800b7f2 <eMBMSerialRTUInit+0x1b2>
            {
                pxFrameHdl = &xMBMRTUFrameHdl[ubIdx];
 800b7d0:	0001      	movs	r1, r0
 800b7d2:	187b      	adds	r3, r7, r1
 800b7d4:	781a      	ldrb	r2, [r3, #0]
 800b7d6:	0013      	movs	r3, r2
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	189b      	adds	r3, r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	189b      	adds	r3, r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4a4b      	ldr	r2, [pc, #300]	; (800b910 <eMBMSerialRTUInit+0x2d0>)
 800b7e4:	189b      	adds	r3, r3, r2
 800b7e6:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	187a      	adds	r2, r7, r1
 800b7ec:	7812      	ldrb	r2, [r2, #0]
 800b7ee:	701a      	strb	r2, [r3, #0]
                break;
 800b7f0:	e00a      	b.n	800b808 <eMBMSerialRTUInit+0x1c8>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 800b7f2:	2117      	movs	r1, #23
 800b7f4:	187b      	adds	r3, r7, r1
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	187b      	adds	r3, r7, r1
 800b7fa:	3201      	adds	r2, #1
 800b7fc:	701a      	strb	r2, [r3, #0]
 800b7fe:	2317      	movs	r3, #23
 800b800:	18fb      	adds	r3, r7, r3
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d9d6      	bls.n	800b7b6 <eMBMSerialRTUInit+0x176>
            }
        }

        if( NULL != pxFrameHdl )
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d071      	beq.n	800b8f2 <eMBMSerialRTUInit+0x2b2>
            usTimeoutMS = ( USHORT ) MBM_SERIAL_APIV2_RTU_DYNAMIC_TIMEOUT_MS( ulBaudRate );
#else
            /* If baudrate > 19200 then we should use the fixed timer value 1750us. 
             * We can't match this exactly so we use 2000us. Otherwise use 3.5 timers
             * the character timeout. */
            if( ulBaudRate > 19200 )
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	2396      	movs	r3, #150	; 0x96
 800b812:	01db      	lsls	r3, r3, #7
 800b814:	429a      	cmp	r2, r3
 800b816:	d904      	bls.n	800b822 <eMBMSerialRTUInit+0x1e2>
            {
                usTimeoutMS = 2;
 800b818:	2314      	movs	r3, #20
 800b81a:	18fb      	adds	r3, r7, r3
 800b81c:	2202      	movs	r2, #2
 800b81e:	801a      	strh	r2, [r3, #0]
 800b820:	e00a      	b.n	800b838 <eMBMSerialRTUInit+0x1f8>
            {
                /* The number of ticks required for a character is given by 
                 * xTicksCh = TIMER_TICKS_PER_SECOND * 11 / BAUDRATE
                 * The total timeout is given by xTicksCh * 3.5 = xTicksCh * 7/2.
                 */
                usTimeoutMS = ( USHORT ) ( ( 1000UL * 11UL * 7UL ) / ( 2 * ulBaudRate ) );
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	0019      	movs	r1, r3
 800b828:	483a      	ldr	r0, [pc, #232]	; (800b914 <eMBMSerialRTUInit+0x2d4>)
 800b82a:	f7f4 fc6d 	bl	8000108 <__udivsi3>
 800b82e:	0003      	movs	r3, r0
 800b830:	001a      	movs	r2, r3
 800b832:	2314      	movs	r3, #20
 800b834:	18fb      	adds	r3, r7, r3
 800b836:	801a      	strh	r2, [r3, #0]

#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            usTimeoutMSWaitAfterSend = MBM_SERIAL_RTU_DYNAMIC_WAITAFTERSEND_TIMEOUT_MS( ulBaudRate );
#endif

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 8, eParity, ucStopBits, pxIntHdl
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	3311      	adds	r3, #17
 800b83c:	33ff      	adds	r3, #255	; 0xff
 800b83e:	0018      	movs	r0, r3
 800b840:	2513      	movs	r5, #19
 800b842:	197c      	adds	r4, r7, r5
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	230b      	movs	r3, #11
 800b848:	18fb      	adds	r3, r7, r3
 800b84a:	7819      	ldrb	r1, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	9302      	str	r3, [sp, #8]
 800b850:	2330      	movs	r3, #48	; 0x30
 800b852:	2608      	movs	r6, #8
 800b854:	199b      	adds	r3, r3, r6
 800b856:	19db      	adds	r3, r3, r7
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	230a      	movs	r3, #10
 800b85e:	18fb      	adds	r3, r7, r3
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	2308      	movs	r3, #8
 800b866:	f000 fdaf 	bl	800c3c8 <eMBPSerialInit>
 800b86a:	0003      	movs	r3, r0
 800b86c:	7023      	strb	r3, [r4, #0]
 800b86e:	197b      	adds	r3, r7, r5
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <eMBMSerialRTUInit+0x242>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , bMBMSerialRTUT35CB, MB_RTU
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 800b876:	231f      	movs	r3, #31
 800b878:	18fb      	adds	r3, r7, r3
 800b87a:	197a      	adds	r2, r7, r5
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e02d      	b.n	800b8de <eMBMSerialRTUInit+0x29e>
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialRTUT35CB, pxIntHdl ) ) )
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	330d      	adds	r3, #13
 800b886:	33ff      	adds	r3, #255	; 0xff
 800b888:	0018      	movs	r0, r3
 800b88a:	2613      	movs	r6, #19
 800b88c:	19bc      	adds	r4, r7, r6
 800b88e:	68fd      	ldr	r5, [r7, #12]
 800b890:	4a21      	ldr	r2, [pc, #132]	; (800b918 <eMBMSerialRTUInit+0x2d8>)
 800b892:	2314      	movs	r3, #20
 800b894:	18fb      	adds	r3, r7, r3
 800b896:	8819      	ldrh	r1, [r3, #0]
 800b898:	002b      	movs	r3, r5
 800b89a:	f001 f881 	bl	800c9a0 <eMBPTimerInit>
 800b89e:	0003      	movs	r3, r0
 800b8a0:	7023      	strb	r3, [r4, #0]
 800b8a2:	19bb      	adds	r3, r7, r6
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <eMBMSerialRTUInit+0x276>
            {
                eStatus = eStatus2;
 800b8aa:	231f      	movs	r3, #31
 800b8ac:	18fb      	adds	r3, r7, r3
 800b8ae:	19ba      	adds	r2, r7, r6
 800b8b0:	7812      	ldrb	r2, [r2, #0]
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e013      	b.n	800b8de <eMBMSerialRTUInit+0x29e>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_PDU_OFF];
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	1c9a      	adds	r2, r3, #2
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialRTUFrameSend;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4a15      	ldr	r2, [pc, #84]	; (800b91c <eMBMSerialRTUInit+0x2dc>)
 800b8c8:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialRTUFrameReceive;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	4a14      	ldr	r2, [pc, #80]	; (800b920 <eMBMSerialRTUInit+0x2e0>)
 800b8ce:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialRTUFrameClose;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4a14      	ldr	r2, [pc, #80]	; (800b924 <eMBMSerialRTUInit+0x2e4>)
 800b8d4:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialRTUFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 800b8d6:	231f      	movs	r3, #31
 800b8d8:	18fb      	adds	r3, r7, r3
 800b8da:	2200      	movs	r2, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
                             "[IDX=" MBP_FORMAT_USHORT "] Creation of new RTU instance (port=" MBP_FORMAT_USHORT
                             ", baudrate=" MBP_FORMAT_ULONG ", parity=" MBP_FORMAT_USHORT "): %s.\n",
                             ( USHORT ) pxFrameHdl->ubIdx, ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif
            if( MB_ENOERR != eStatus )
 800b8de:	231f      	movs	r3, #31
 800b8e0:	18fb      	adds	r3, r7, r3
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d008      	beq.n	800b8fa <eMBMSerialRTUInit+0x2ba>
            {
                ( void )eMBMSerialRTUFrameCloseInternal( pxFrameHdl );
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	0018      	movs	r0, r3
 800b8ec:	f000 f9d1 	bl	800bc92 <eMBMSerialRTUFrameCloseInternal>
 800b8f0:	e003      	b.n	800b8fa <eMBMSerialRTUInit+0x2ba>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 800b8f2:	231f      	movs	r3, #31
 800b8f4:	18fb      	adds	r3, r7, r3
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800b8fa:	f000 fd5d 	bl	800c3b8 <vMBPExitCritical>
        eStatus = MB_EINVAL;
    }
#endif


    return eStatus;
 800b8fe:	231f      	movs	r3, #31
 800b900:	18fb      	adds	r3, r7, r3
 800b902:	781b      	ldrb	r3, [r3, #0]
}
 800b904:	0018      	movs	r0, r3
 800b906:	46bd      	mov	sp, r7
 800b908:	b009      	add	sp, #36	; 0x24
 800b90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b90c:	20004d88 	.word	0x20004d88
 800b910:	20004d8c 	.word	0x20004d8c
 800b914:	00012cc8 	.word	0x00012cc8
 800b918:	0800c0b1 	.word	0x0800c0b1
 800b91c:	0800b929 	.word	0x0800b929
 800b920:	0800bad9 	.word	0x0800bad9
 800b924:	0800bc61 	.word	0x0800bc61

0800b928 <eMBMSerialRTUFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialRTUFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 800b928:	b5b0      	push	{r4, r5, r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	0008      	movs	r0, r1
 800b932:	0011      	movs	r1, r2
 800b934:	1cfb      	adds	r3, r7, #3
 800b936:	1c02      	adds	r2, r0, #0
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	003b      	movs	r3, r7
 800b93c:	1c0a      	adds	r2, r1, #0
 800b93e:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b940:	2317      	movs	r3, #23
 800b942:	18fb      	adds	r3, r7, r3
 800b944:	2202      	movs	r2, #2
 800b946:	701a      	strb	r2, [r3, #0]
    USHORT          usCRC16;
    xMBMInternalHandle *pxIntHdl = xHdl;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_RTU,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) ucSlaveAddress, usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) &&
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d100      	bne.n	800b95a <eMBMSerialRTUFrameSend+0x32>
 800b958:	e0b2      	b.n	800bac0 <eMBMSerialRTUFrameSend+0x198>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	001a      	movs	r2, r3
 800b960:	0013      	movs	r3, r2
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	189b      	adds	r3, r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	189b      	adds	r3, r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a58      	ldr	r2, [pc, #352]	; (800bad0 <eMBMSerialRTUFrameSend+0x1a8>)
 800b96e:	189b      	adds	r3, r3, r2
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	429a      	cmp	r2, r3
 800b974:	d000      	beq.n	800b978 <eMBMSerialRTUFrameSend+0x50>
 800b976:	e0a3      	b.n	800bac0 <eMBMSerialRTUFrameSend+0x198>
 800b978:	1cfb      	adds	r3, r7, #3
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d009      	beq.n	800b994 <eMBMSerialRTUFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 2 /* CRC16 */  ) ) ) )
 800b980:	1cfb      	adds	r3, r7, #3
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d100      	bne.n	800b98a <eMBMSerialRTUFrameSend+0x62>
 800b988:	e09a      	b.n	800bac0 <eMBMSerialRTUFrameSend+0x198>
 800b98a:	1cfb      	adds	r3, r7, #3
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2bf7      	cmp	r3, #247	; 0xf7
 800b990:	d900      	bls.n	800b994 <eMBMSerialRTUFrameSend+0x6c>
 800b992:	e095      	b.n	800bac0 <eMBMSerialRTUFrameSend+0x198>
 800b994:	003b      	movs	r3, r7
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	2bfd      	cmp	r3, #253	; 0xfd
 800b99a:	d900      	bls.n	800b99e <eMBMSerialRTUFrameSend+0x76>
 800b99c:	e090      	b.n	800bac0 <eMBMSerialRTUFrameSend+0x198>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 800b99e:	f000 fd04 	bl	800c3aa <vMBPEnterCritical>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) pxRTUHdl->eRcvState,
                             pxRTUHdl->usRcvBufferPos, ( USHORT ) pxRTUHdl->eSndState, pxRTUHdl->usSndBufferCnt );
            }
#endif
            MBP_ASSERT( MBM_STATE_TX_IDLE == pxRTUHdl->eSndState );
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	2382      	movs	r3, #130	; 0x82
 800b9a6:	005b      	lsls	r3, r3, #1
 800b9a8:	5cd3      	ldrb	r3, [r2, r3]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <eMBMSerialRTUFrameSend+0x8c>
 800b9b0:	f000 fce8 	bl	800c384 <vMBPAssert>
            MBP_EXIT_CRITICAL_SECTION(  );
 800b9b4:	f000 fd00 	bl	800c3b8 <vMBPExitCritical>

            /* Added the MODBUS RTU header (= slave address) */
            pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	1cfa      	adds	r2, r7, #3
 800b9bc:	7812      	ldrb	r2, [r2, #0]
 800b9be:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt = 1;
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	2383      	movs	r3, #131	; 0x83
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxRTUHdl->usSndBufferCnt += usMBPDULength;
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	2383      	movs	r3, #131	; 0x83
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	5ad3      	ldrh	r3, [r2, r3]
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	003b      	movs	r3, r7
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	18d3      	adds	r3, r2, r3
 800b9da:	b299      	uxth	r1, r3
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	2383      	movs	r3, #131	; 0x83
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	52d1      	strh	r1, [r2, r3]

            usCRC16 = usMBMCRC16( ( const UBYTE * )&pxRTUHdl->ubRTUFrameBuffer[0], pxRTUHdl->usSndBufferCnt );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	1c58      	adds	r0, r3, #1
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	2383      	movs	r3, #131	; 0x83
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	5ad3      	ldrh	r3, [r2, r3]
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	250a      	movs	r5, #10
 800b9f4:	197c      	adds	r4, r7, r5
 800b9f6:	0019      	movs	r1, r3
 800b9f8:	f7ff f9f8 	bl	800adec <usMBMCRC16>
 800b9fc:	0003      	movs	r3, r0
 800b9fe:	8023      	strh	r3, [r4, #0]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 & 0xFFU );
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	2383      	movs	r3, #131	; 0x83
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	5ad3      	ldrh	r3, [r2, r3]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	0019      	movs	r1, r3
 800ba0c:	0028      	movs	r0, r5
 800ba0e:	183b      	adds	r3, r7, r0
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	185b      	adds	r3, r3, r1
 800ba18:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	2383      	movs	r3, #131	; 0x83
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	5ad3      	ldrh	r3, [r2, r3]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	3301      	adds	r3, #1
 800ba26:	b299      	uxth	r1, r3
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	2383      	movs	r3, #131	; 0x83
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	52d1      	strh	r1, [r2, r3]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 >> 8U );
 800ba30:	183b      	adds	r3, r7, r0
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	0a1b      	lsrs	r3, r3, #8
 800ba36:	b298      	uxth	r0, r3
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	2383      	movs	r3, #131	; 0x83
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	5ad3      	ldrh	r3, [r2, r3]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	0019      	movs	r1, r3
 800ba44:	b2c2      	uxtb	r2, r0
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	185b      	adds	r3, r3, r1
 800ba4a:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	2383      	movs	r3, #131	; 0x83
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	5ad3      	ldrh	r3, [r2, r3]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	3301      	adds	r3, #1
 800ba58:	b299      	uxth	r1, r3
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	2383      	movs	r3, #131	; 0x83
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 800ba62:	f000 fca2 	bl	800c3aa <vMBPEnterCritical>
            pxRTUHdl->eSndState = MBM_STATE_TX_XMIT;
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	2382      	movs	r3, #130	; 0x82
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	54d1      	strb	r1, [r2, r3]
            pxRTUHdl->pubSndBufferCur = ( UBYTE * ) & pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF];
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	1c59      	adds	r1, r3, #1
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	2384      	movs	r3, #132	; 0x84
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	50d1      	str	r1, [r2, r3]
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV2CB ) ) )
            {
                HDL_RESET_TX( pxRTUHdl );
            }
#elif MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV1CB ) ) )
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	2388      	movs	r3, #136	; 0x88
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	58d3      	ldr	r3, [r2, r3]
 800ba84:	2517      	movs	r5, #23
 800ba86:	197c      	adds	r4, r7, r5
 800ba88:	4a12      	ldr	r2, [pc, #72]	; (800bad4 <eMBMSerialRTUFrameSend+0x1ac>)
 800ba8a:	0011      	movs	r1, r2
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f000 fe03 	bl	800c698 <eMBPSerialTxEnable>
 800ba92:	0003      	movs	r3, r0
 800ba94:	7023      	strb	r3, [r4, #0]
 800ba96:	197b      	adds	r3, r7, r5
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00e      	beq.n	800babc <eMBMSerialRTUFrameSend+0x194>
            {
                HDL_RESET_TX( pxRTUHdl );
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	2382      	movs	r3, #130	; 0x82
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	2100      	movs	r1, #0
 800baa6:	54d1      	strb	r1, [r2, r3]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	2383      	movs	r3, #131	; 0x83
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	2100      	movs	r1, #0
 800bab0:	52d1      	strh	r1, [r2, r3]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	2384      	movs	r3, #132	; 0x84
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	2100      	movs	r1, #0
 800baba:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 800babc:	f000 fc7c 	bl	800c3b8 <vMBPExitCritical>
        }
    }
    return eStatus;
 800bac0:	2317      	movs	r3, #23
 800bac2:	18fb      	adds	r3, r7, r3
 800bac4:	781b      	ldrb	r3, [r3, #0]
}
 800bac6:	0018      	movs	r0, r3
 800bac8:	46bd      	mov	sp, r7
 800baca:	b006      	add	sp, #24
 800bacc:	bdb0      	pop	{r4, r5, r7, pc}
 800bace:	46c0      	nop			; (mov r8, r8)
 800bad0:	20004d8c 	.word	0x20004d8c
 800bad4:	0800bf1d 	.word	0x0800bf1d

0800bad8 <eMBMSerialRTUFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 800bad8:	b5b0      	push	{r4, r5, r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	607a      	str	r2, [r7, #4]
 800bae2:	200b      	movs	r0, #11
 800bae4:	183b      	adds	r3, r7, r0
 800bae6:	1c0a      	adds	r2, r1, #0
 800bae8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 800baea:	241f      	movs	r4, #31
 800baec:	193b      	adds	r3, r7, r4
 800baee:	2202      	movs	r2, #2
 800baf0:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d100      	bne.n	800bb04 <eMBMSerialRTUFrameReceive+0x2c>
 800bb02:	e0a4      	b.n	800bc4e <eMBMSerialRTUFrameReceive+0x176>
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	001a      	movs	r2, r3
 800bb0a:	0013      	movs	r3, r2
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	189b      	adds	r3, r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	189b      	adds	r3, r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4a51      	ldr	r2, [pc, #324]	; (800bc5c <eMBMSerialRTUFrameReceive+0x184>)
 800bb18:	189b      	adds	r3, r3, r2
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d000      	beq.n	800bb22 <eMBMSerialRTUFrameReceive+0x4a>
 800bb20:	e095      	b.n	800bc4e <eMBMSerialRTUFrameReceive+0x176>
 800bb22:	183b      	adds	r3, r7, r0
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d100      	bne.n	800bb2c <eMBMSerialRTUFrameReceive+0x54>
 800bb2a:	e090      	b.n	800bc4e <eMBMSerialRTUFrameReceive+0x176>
 800bb2c:	183b      	adds	r3, r7, r0
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2bf7      	cmp	r3, #247	; 0xf7
 800bb32:	d900      	bls.n	800bb36 <eMBMSerialRTUFrameReceive+0x5e>
 800bb34:	e08b      	b.n	800bc4e <eMBMSerialRTUFrameReceive+0x176>
        {

            if( NULL == pusMBPDULength )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d02a      	beq.n	800bb92 <eMBMSerialRTUFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	2381      	movs	r3, #129	; 0x81
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	5ad3      	ldrh	r3, [r2, r3]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d91f      	bls.n	800bb8a <eMBMSerialRTUFrameReceive+0xb2>
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	b2db      	uxtb	r3, r3
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 800bb50:	183a      	adds	r2, r7, r0
 800bb52:	7812      	ldrb	r2, [r2, #0]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d118      	bne.n	800bb8a <eMBMSerialRTUFrameReceive+0xb2>
                     ( usMBMCRC16( ( UBYTE * ) & ( pxRTUHdl->ubRTUFrameBuffer[0] ), pxRTUHdl->usRcvBufferPos ) == 0 ) )
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	1c58      	adds	r0, r3, #1
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	2381      	movs	r3, #129	; 0x81
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	5ad3      	ldrh	r3, [r2, r3]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	0019      	movs	r1, r3
 800bb68:	f7ff f940 	bl	800adec <usMBMCRC16>
 800bb6c:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 800bb6e:	d10c      	bne.n	800bb8a <eMBMSerialRTUFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxRTUHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_CRC ) );
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	2381      	movs	r3, #129	; 0x81
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	5ad3      	ldrh	r3, [r2, r3]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	3b03      	subs	r3, #3
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	801a      	strh	r2, [r3, #0]
                xAnalyzerFrame.eFrameType = MB_FRAME_RTU;
                xAnalyzerFrame.x.xRTUHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xRTUHeader.usCRC16 = pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 1];
                xAnalyzerFrame.x.xRTUHeader.usCRC16 |= ( USHORT ) ( pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 2] << 8U );
#endif
                eStatus = MB_ENOERR;
 800bb82:	193b      	adds	r3, r7, r4
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	e003      	b.n	800bb92 <eMBMSerialRTUFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 800bb8a:	231f      	movs	r3, #31
 800bb8c:	18fb      	adds	r3, r7, r3
 800bb8e:	2205      	movs	r2, #5
 800bb90:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 800bb92:	f000 fc0a 	bl	800c3aa <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	2388      	movs	r3, #136	; 0x88
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	58d3      	ldr	r3, [r2, r3]
 800bb9e:	2513      	movs	r5, #19
 800bba0:	197c      	adds	r4, r7, r5
 800bba2:	2100      	movs	r1, #0
 800bba4:	0018      	movs	r0, r3
 800bba6:	f000 fd77 	bl	800c698 <eMBPSerialTxEnable>
 800bbaa:	0003      	movs	r3, r0
 800bbac:	7023      	strb	r3, [r4, #0]
 800bbae:	002a      	movs	r2, r5
 800bbb0:	18bb      	adds	r3, r7, r2
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d004      	beq.n	800bbc2 <eMBMSerialRTUFrameReceive+0xea>
            {
                eStatus = eStatus2;
 800bbb8:	231f      	movs	r3, #31
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	18ba      	adds	r2, r7, r2
 800bbbe:	7812      	ldrb	r2, [r2, #0]
 800bbc0:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	2388      	movs	r3, #136	; 0x88
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	58d3      	ldr	r3, [r2, r3]
 800bbca:	2513      	movs	r5, #19
 800bbcc:	197c      	adds	r4, r7, r5
 800bbce:	2100      	movs	r1, #0
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f000 fe27 	bl	800c824 <eMBPSerialRxEnable>
 800bbd6:	0003      	movs	r3, r0
 800bbd8:	7023      	strb	r3, [r4, #0]
 800bbda:	002a      	movs	r2, r5
 800bbdc:	18bb      	adds	r3, r7, r2
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d004      	beq.n	800bbee <eMBMSerialRTUFrameReceive+0x116>
            {
                eStatus = eStatus2;
 800bbe4:	231f      	movs	r3, #31
 800bbe6:	18fb      	adds	r3, r7, r3
 800bbe8:	18ba      	adds	r2, r7, r2
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	701a      	strb	r2, [r3, #0]
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrHdl ) ) )
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	2386      	movs	r3, #134	; 0x86
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	58d3      	ldr	r3, [r2, r3]
 800bbf6:	2513      	movs	r5, #19
 800bbf8:	197c      	adds	r4, r7, r5
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f001 f840 	bl	800cc80 <eMBPTimerStop>
 800bc00:	0003      	movs	r3, r0
 800bc02:	7023      	strb	r3, [r4, #0]
 800bc04:	002a      	movs	r2, r5
 800bc06:	18bb      	adds	r3, r7, r2
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <eMBMSerialRTUFrameReceive+0x140>
            {
                eStatus = eStatus2;
 800bc0e:	231f      	movs	r3, #31
 800bc10:	18fb      	adds	r3, r7, r3
 800bc12:	18ba      	adds	r2, r7, r2
 800bc14:	7812      	ldrb	r2, [r2, #0]
 800bc16:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrWaitHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxRTUHdl );
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	2382      	movs	r3, #130	; 0x82
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	2100      	movs	r1, #0
 800bc20:	54d1      	strb	r1, [r2, r3]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	2383      	movs	r3, #131	; 0x83
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	2100      	movs	r1, #0
 800bc2a:	52d1      	strh	r1, [r2, r3]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	2384      	movs	r3, #132	; 0x84
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	2100      	movs	r1, #0
 800bc34:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxRTUHdl );
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	2302      	movs	r3, #2
 800bc3a:	33ff      	adds	r3, #255	; 0xff
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	54d1      	strb	r1, [r2, r3]
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	2381      	movs	r3, #129	; 0x81
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	2100      	movs	r1, #0
 800bc48:	52d1      	strh	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 800bc4a:	f000 fbb5 	bl	800c3b8 <vMBPExitCritical>
        }
    }

    return eStatus;
 800bc4e:	231f      	movs	r3, #31
 800bc50:	18fb      	adds	r3, r7, r3
 800bc52:	781b      	ldrb	r3, [r3, #0]
}
 800bc54:	0018      	movs	r0, r3
 800bc56:	46bd      	mov	sp, r7
 800bc58:	b008      	add	sp, #32
 800bc5a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc5c:	20004d8c 	.word	0x20004d8c

0800bc60 <eMBMSerialRTUFrameClose>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameClose( xMBHandle xHdl )
{
 800bc60:	b5b0      	push	{r4, r5, r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800bc68:	210f      	movs	r1, #15
 800bc6a:	187b      	adds	r3, r7, r1
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialRTUFrameCloseInternal( ( xMBMRTUFrameHandle * ) pxIntHdl->xFrameHdl );
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	000d      	movs	r5, r1
 800bc7a:	187c      	adds	r4, r7, r1
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	f000 f808 	bl	800bc92 <eMBMSerialRTUFrameCloseInternal>
 800bc82:	0003      	movs	r3, r0
 800bc84:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 800bc86:	197b      	adds	r3, r7, r5
 800bc88:	781b      	ldrb	r3, [r3, #0]
}
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b004      	add	sp, #16
 800bc90:	bdb0      	pop	{r4, r5, r7, pc}

0800bc92 <eMBMSerialRTUFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameCloseInternal( xMBMRTUFrameHandle * pxRTUHdl )
{
 800bc92:	b590      	push	{r4, r7, lr}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800bc9a:	240f      	movs	r4, #15
 800bc9c:	193b      	adds	r3, r7, r4
 800bc9e:	2202      	movs	r2, #2
 800bca0:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 800bca2:	f000 fb82 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = MB_ENOERR;
 800bca6:	193b      	adds	r3, r7, r4
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
        if( MBP_SERIALHDL_INVALID != pxRTUHdl->xSerHdl )
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	2388      	movs	r3, #136	; 0x88
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	58d3      	ldr	r3, [r2, r3]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d04c      	beq.n	800bd52 <eMBMSerialRTUFrameCloseInternal+0xc0>
        {
            if( MB_ENOERR != eMBPSerialClose( pxRTUHdl->xSerHdl ) )
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	2388      	movs	r3, #136	; 0x88
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	58d3      	ldr	r3, [r2, r3]
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f000 fc95 	bl	800c5f0 <eMBPSerialClose>
 800bcc6:	1e03      	subs	r3, r0, #0
 800bcc8:	d003      	beq.n	800bcd2 <eMBMSerialRTUFrameCloseInternal+0x40>
            {
                eStatus = MB_EPORTERR;
 800bcca:	193b      	adds	r3, r7, r4
 800bccc:	2203      	movs	r2, #3
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	e079      	b.n	800bdc6 <eMBMSerialRTUFrameCloseInternal+0x134>
            }
            else
            {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrHdl )
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	2386      	movs	r3, #134	; 0x86
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	58d3      	ldr	r3, [r2, r3]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <eMBMSerialRTUFrameCloseInternal+0x5a>
                {
                    vMBPTimerClose( pxRTUHdl->xTmrHdl );
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	2386      	movs	r3, #134	; 0x86
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	58d3      	ldr	r3, [r2, r3]
 800bce6:	0018      	movs	r0, r3
 800bce8:	f000 ff32 	bl	800cb50 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrWaitHdl )
                {
                    vMBPTimerClose( pxRTUHdl->xTmrWaitHdl );
                }
#endif
                HDL_RESET( pxRTUHdl );
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	22ff      	movs	r2, #255	; 0xff
 800bcf0:	701a      	strb	r2, [r3, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	33ff      	adds	r3, #255	; 0xff
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	54d1      	strb	r1, [r2, r3]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	2381      	movs	r3, #129	; 0x81
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	2100      	movs	r1, #0
 800bd04:	52d1      	strh	r1, [r2, r3]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	2382      	movs	r3, #130	; 0x82
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	54d1      	strb	r1, [r2, r3]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	2383      	movs	r3, #131	; 0x83
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	2100      	movs	r1, #0
 800bd18:	52d1      	strh	r1, [r2, r3]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	2384      	movs	r3, #132	; 0x84
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	2100      	movs	r1, #0
 800bd22:	50d1      	str	r1, [r2, r3]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	2386      	movs	r3, #134	; 0x86
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	50d1      	str	r1, [r2, r3]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	2388      	movs	r3, #136	; 0x88
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	2100      	movs	r1, #0
 800bd36:	50d1      	str	r1, [r2, r3]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	2280      	movs	r2, #128	; 0x80
 800bd3e:	0052      	lsls	r2, r2, #1
 800bd40:	2100      	movs	r1, #0
 800bd42:	0018      	movs	r0, r3
 800bd44:	f001 f886 	bl	800ce54 <memset>
                eStatus = MB_ENOERR;
 800bd48:	230f      	movs	r3, #15
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
 800bd50:	e039      	b.n	800bdc6 <eMBMSerialRTUFrameCloseInternal+0x134>
            }
        }
        else
        {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrHdl );
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	2386      	movs	r3, #134	; 0x86
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	58d3      	ldr	r3, [r2, r3]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <eMBMSerialRTUFrameCloseInternal+0xd0>
 800bd5e:	f000 fb11 	bl	800c384 <vMBPAssert>
#endif
#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrWaitHdl );
#endif
            HDL_RESET( pxRTUHdl );
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	22ff      	movs	r2, #255	; 0xff
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	33ff      	adds	r3, #255	; 0xff
 800bd6e:	2100      	movs	r1, #0
 800bd70:	54d1      	strb	r1, [r2, r3]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	2381      	movs	r3, #129	; 0x81
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	2100      	movs	r1, #0
 800bd7a:	52d1      	strh	r1, [r2, r3]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	2382      	movs	r3, #130	; 0x82
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	2100      	movs	r1, #0
 800bd84:	54d1      	strb	r1, [r2, r3]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	2383      	movs	r3, #131	; 0x83
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	52d1      	strh	r1, [r2, r3]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	2384      	movs	r3, #132	; 0x84
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	2100      	movs	r1, #0
 800bd98:	50d1      	str	r1, [r2, r3]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	2386      	movs	r3, #134	; 0x86
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	2100      	movs	r1, #0
 800bda2:	50d1      	str	r1, [r2, r3]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	2388      	movs	r3, #136	; 0x88
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	2100      	movs	r1, #0
 800bdac:	50d1      	str	r1, [r2, r3]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	2280      	movs	r2, #128	; 0x80
 800bdb4:	0052      	lsls	r2, r2, #1
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	0018      	movs	r0, r3
 800bdba:	f001 f84b 	bl	800ce54 <memset>
            eStatus = MB_ENOERR;
 800bdbe:	230f      	movs	r3, #15
 800bdc0:	18fb      	adds	r3, r7, r3
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800bdc6:	f000 faf7 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800bdca:	230f      	movs	r3, #15
 800bdcc:	18fb      	adds	r3, r7, r3
 800bdce:	781b      	ldrb	r3, [r3, #0]
}
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	b005      	add	sp, #20
 800bdd6:	bd90      	pop	{r4, r7, pc}

0800bdd8 <bMBMSerialRTUReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
bMBMSerialRTUReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 800bdd8:	b5b0      	push	{r4, r5, r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	000a      	movs	r2, r1
 800bde2:	1cfb      	adds	r3, r7, #3
 800bde4:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    xMBMInternalHandle *pxIntHdl = xHdl;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	617b      	str	r3, [r7, #20]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    ( void )eStatus;
    MBP_ENTER_CRITICAL_SECTION(  );
 800bdea:	f000 fade 	bl	800c3aa <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	613b      	str	r3, [r7, #16]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	2382      	movs	r3, #130	; 0x82
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	5cd3      	ldrb	r3, [r2, r3]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <bMBMSerialRTUReceiverAPIV1CB+0x2e>
 800be02:	f000 fabf 	bl	800c384 <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	2302      	movs	r3, #2
 800be0a:	33ff      	adds	r3, #255	; 0xff
 800be0c:	5cd3      	ldrb	r3, [r2, r3]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <bMBMSerialRTUReceiverAPIV1CB+0x42>
 800be14:	2b01      	cmp	r3, #1
 800be16:	d021      	beq.n	800be5c <bMBMSerialRTUReceiverAPIV1CB+0x84>
 800be18:	e044      	b.n	800bea4 <bMBMSerialRTUReceiverAPIV1CB+0xcc>
    {
    case MBM_STATE_RX_IDLE:
#if defined(__18CXX)
        pxRTUFrameHdl->usRcvBufferPos &= 0;
#else
        pxRTUFrameHdl->usRcvBufferPos = 0;
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	2381      	movs	r3, #129	; 0x81
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	2100      	movs	r1, #0
 800be22:	52d1      	strh	r1, [r2, r3]
#endif
        pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	2381      	movs	r3, #129	; 0x81
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	5ad3      	ldrh	r3, [r2, r3]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	001a      	movs	r2, r3
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	189b      	adds	r3, r3, r2
 800be34:	1cfa      	adds	r2, r7, #3
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	705a      	strb	r2, [r3, #1]
        pxRTUFrameHdl->usRcvBufferPos++;
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	2381      	movs	r3, #129	; 0x81
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	5ad3      	ldrh	r3, [r2, r3]
 800be42:	b29b      	uxth	r3, r3
 800be44:	3301      	adds	r3, #1
 800be46:	b299      	uxth	r1, r3
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	2381      	movs	r3, #129	; 0x81
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	52d1      	strh	r1, [r2, r3]
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_RCV;
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	2302      	movs	r3, #2
 800be54:	33ff      	adds	r3, #255	; 0xff
 800be56:	2101      	movs	r1, #1
 800be58:	54d1      	strb	r1, [r2, r3]

        break;
 800be5a:	e029      	b.n	800beb0 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    case MBM_STATE_RX_RCV:
        if( pxRTUFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	2381      	movs	r3, #129	; 0x81
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	5ad3      	ldrh	r3, [r2, r3]
 800be64:	b29b      	uxth	r3, r3
 800be66:	2bff      	cmp	r3, #255	; 0xff
 800be68:	d816      	bhi.n	800be98 <bMBMSerialRTUReceiverAPIV1CB+0xc0>
        {
            pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	2381      	movs	r3, #129	; 0x81
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	5ad3      	ldrh	r3, [r2, r3]
 800be72:	b29b      	uxth	r3, r3
 800be74:	001a      	movs	r2, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	189b      	adds	r3, r3, r2
 800be7a:	1cfa      	adds	r2, r7, #3
 800be7c:	7812      	ldrb	r2, [r2, #0]
 800be7e:	705a      	strb	r2, [r3, #1]
            pxRTUFrameHdl->usRcvBufferPos++;
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	2381      	movs	r3, #129	; 0x81
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	5ad3      	ldrh	r3, [r2, r3]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	3301      	adds	r3, #1
 800be8c:	b299      	uxth	r1, r3
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	2381      	movs	r3, #129	; 0x81
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	52d1      	strh	r1, [r2, r3]
        }
        else
        {
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
        }
        break;
 800be96:	e00b      	b.n	800beb0 <bMBMSerialRTUReceiverAPIV1CB+0xd8>
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	2302      	movs	r3, #2
 800be9c:	33ff      	adds	r3, #255	; 0xff
 800be9e:	2102      	movs	r1, #2
 800bea0:	54d1      	strb	r1, [r2, r3]
        break;
 800bea2:	e005      	b.n	800beb0 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    default:
    case MBM_STATE_RX_ERROR:
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	2302      	movs	r3, #2
 800bea8:	33ff      	adds	r3, #255	; 0xff
 800beaa:	2102      	movs	r1, #2
 800beac:	54d1      	strb	r1, [r2, r3]
        break;
 800beae:	46c0      	nop			; (mov r8, r8)
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif

#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
#if MBM_TEST_DISABLE_RTU_TIMEOUTS != 1
    if( MB_ENOERR != eMBPTimerStart( pxRTUFrameHdl->xTmrHdl ) )
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	2386      	movs	r3, #134	; 0x86
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	58d3      	ldr	r3, [r2, r3]
 800beb8:	0018      	movs	r0, r3
 800beba:	f000 fea9 	bl	800cc10 <eMBPTimerStart>
 800bebe:	1e03      	subs	r3, r0, #0
 800bec0:	d026      	beq.n	800bf10 <bMBMSerialRTUReceiverAPIV1CB+0x138>
    {
        /* We can only abort here because or timers failed. */
        eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	2388      	movs	r3, #136	; 0x88
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	58d3      	ldr	r3, [r2, r3]
 800beca:	250f      	movs	r5, #15
 800becc:	197c      	adds	r4, r7, r5
 800bece:	2100      	movs	r1, #0
 800bed0:	0018      	movs	r0, r3
 800bed2:	f000 fca7 	bl	800c824 <eMBPSerialRxEnable>
 800bed6:	0003      	movs	r3, r0
 800bed8:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800beda:	197b      	adds	r3, r7, r5
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <bMBMSerialRTUReceiverAPIV1CB+0x10e>
 800bee2:	f000 fa4f 	bl	800c384 <vMBPAssert>
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	250f      	movs	r5, #15
 800beec:	197c      	adds	r4, r7, r5
 800beee:	2104      	movs	r1, #4
 800bef0:	0018      	movs	r0, r3
 800bef2:	f000 f9c7 	bl	800c284 <eMBPEventPost>
 800bef6:	0003      	movs	r3, r0
 800bef8:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800befa:	197b      	adds	r3, r7, r5
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <bMBMSerialRTUReceiverAPIV1CB+0x12e>
 800bf02:	f000 fa3f 	bl	800c384 <vMBPAssert>
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	2302      	movs	r3, #2
 800bf0a:	33ff      	adds	r3, #255	; 0xff
 800bf0c:	2102      	movs	r1, #2
 800bf0e:	54d1      	strb	r1, [r2, r3]
    }
#endif
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 800bf10:	f000 fa52 	bl	800c3b8 <vMBPExitCritical>
}
 800bf14:	46c0      	nop			; (mov r8, r8)
 800bf16:	46bd      	mov	sp, r7
 800bf18:	b006      	add	sp, #24
 800bf1a:	bdb0      	pop	{r4, r5, r7, pc}

0800bf1c <bMBMSerialRTUTransmitterEmptyAPIV1CB>:


STATIC          BOOL
bMBMSerialRTUTransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 800bf1c:	b5b0      	push	{r4, r5, r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 800bf26:	2317      	movs	r3, #23
 800bf28:	18fb      	adds	r3, r7, r3
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 800bf2e:	2316      	movs	r3, #22
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	2200      	movs	r2, #0
 800bf34:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 800bf3a:	f000 fa36 	bl	800c3aa <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eRcvState == MBM_STATE_RX_IDLE );
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	2302      	movs	r3, #2
 800bf48:	33ff      	adds	r3, #255	; 0xff
 800bf4a:	5cd3      	ldrb	r3, [r2, r3]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x3a>
 800bf52:	f000 fa17 	bl	800c384 <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_XMIT );
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	2382      	movs	r3, #130	; 0x82
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	5cd3      	ldrb	r3, [r2, r3]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d001      	beq.n	800bf68 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x4c>
 800bf64:	f000 fa0e 	bl	800c384 <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->pubSndBufferCur != NULL );
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	2384      	movs	r3, #132	; 0x84
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	58d3      	ldr	r3, [r2, r3]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x5c>
 800bf74:	f000 fa06 	bl	800c384 <vMBPAssert>

    switch ( pxRTUFrameHdl->eSndState )
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	2382      	movs	r3, #130	; 0x82
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	5cd3      	ldrb	r3, [r2, r3]
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d141      	bne.n	800c00a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xee>
         * to a broadcast we are done. This is handled by delivering an
         * MBM_EV_SENT event to the main state machine. Otherwise we enable
         * the receiver or abort using an error.
         */
    case MBM_STATE_TX_XMIT:
        if( pxRTUFrameHdl->usSndBufferCnt > 0 )
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	2383      	movs	r3, #131	; 0x83
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	5ad3      	ldrh	r3, [r2, r3]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d01f      	beq.n	800bfd4 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xb8>
        {
            *pubValue = *( pxRTUFrameHdl->pubSndBufferCur );
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	2384      	movs	r3, #132	; 0x84
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	58d3      	ldr	r3, [r2, r3]
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	701a      	strb	r2, [r3, #0]
            pxRTUFrameHdl->pubSndBufferCur++;
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	2384      	movs	r3, #132	; 0x84
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	58d3      	ldr	r3, [r2, r3]
 800bfaa:	1c59      	adds	r1, r3, #1
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	2384      	movs	r3, #132	; 0x84
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	50d1      	str	r1, [r2, r3]
            pxRTUFrameHdl->usSndBufferCnt--;
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	2383      	movs	r3, #131	; 0x83
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	5ad3      	ldrh	r3, [r2, r3]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	b299      	uxth	r1, r3
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	2383      	movs	r3, #131	; 0x83
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	52d1      	strh	r1, [r2, r3]
            bMoreTXData = TRUE;
 800bfca:	2317      	movs	r3, #23
 800bfcc:	18fb      	adds	r3, r7, r3
 800bfce:	2201      	movs	r2, #1
 800bfd0:	701a      	strb	r2, [r3, #0]
            else
            {
                bEnableRx = TRUE;
            }
        }
        break;
 800bfd2:	e02b      	b.n	800c02c <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
            if( MB_SER_BROADCAST_ADDR == pxRTUFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	785b      	ldrb	r3, [r3, #1]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d110      	bne.n	800c000 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xe4>
                eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SENT );
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	250b      	movs	r5, #11
 800bfe4:	197c      	adds	r4, r7, r5
 800bfe6:	2105      	movs	r1, #5
 800bfe8:	0018      	movs	r0, r3
 800bfea:	f000 f94b 	bl	800c284 <eMBPEventPost>
 800bfee:	0003      	movs	r3, r0
 800bff0:	7023      	strb	r3, [r4, #0]
                MBP_ASSERT( MB_ENOERR == eStatus );
 800bff2:	197b      	adds	r3, r7, r5
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d018      	beq.n	800c02c <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
 800bffa:	f000 f9c3 	bl	800c384 <vMBPAssert>
        break;
 800bffe:	e015      	b.n	800c02c <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
                bEnableRx = TRUE;
 800c000:	2316      	movs	r3, #22
 800c002:	18fb      	adds	r3, r7, r3
 800c004:	2201      	movs	r2, #1
 800c006:	701a      	strb	r2, [r3, #0]
        break;
 800c008:	e010      	b.n	800c02c <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>

        /* Default case which aborts the transmitter. */
    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	250b      	movs	r5, #11
 800c010:	197c      	adds	r4, r7, r5
 800c012:	2106      	movs	r1, #6
 800c014:	0018      	movs	r0, r3
 800c016:	f000 f935 	bl	800c284 <eMBPEventPost>
 800c01a:	0003      	movs	r3, r0
 800c01c:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800c01e:	197b      	adds	r3, r7, r5
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
 800c026:	f000 f9ad 	bl	800c384 <vMBPAssert>
        break;
 800c02a:	e001      	b.n	800c030 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
        break;
 800c02c:	46c0      	nop			; (mov r8, r8)
 800c02e:	e000      	b.n	800c032 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x116>
        break;
 800c030:	46c0      	nop			; (mov r8, r8)
    }
    if( !bMoreTXData )
 800c032:	2317      	movs	r3, #23
 800c034:	18fb      	adds	r3, r7, r3
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10e      	bne.n	800c05a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x13e>
    {
        HDL_RESET_TX( pxRTUFrameHdl );
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	2382      	movs	r3, #130	; 0x82
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	2100      	movs	r1, #0
 800c044:	54d1      	strb	r1, [r2, r3]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	2383      	movs	r3, #131	; 0x83
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	2100      	movs	r1, #0
 800c04e:	52d1      	strh	r1, [r2, r3]
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	2384      	movs	r3, #132	; 0x84
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	2100      	movs	r1, #0
 800c058:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 800c05a:	2316      	movs	r3, #22
 800c05c:	18fb      	adds	r3, r7, r3
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d01a      	beq.n	800c09a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else
        if( MB_ENOERR != eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) bMBMSerialRTUReceiverAPIV1CB ) )
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	2388      	movs	r3, #136	; 0x88
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	58d3      	ldr	r3, [r2, r3]
 800c06c:	4a0f      	ldr	r2, [pc, #60]	; (800c0ac <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x190>)
 800c06e:	0011      	movs	r1, r2
 800c070:	0018      	movs	r0, r3
 800c072:	f000 fbd7 	bl	800c824 <eMBPSerialRxEnable>
 800c076:	1e03      	subs	r3, r0, #0
 800c078:	d00f      	beq.n	800c09a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	250b      	movs	r5, #11
 800c080:	197c      	adds	r4, r7, r5
 800c082:	2106      	movs	r1, #6
 800c084:	0018      	movs	r0, r3
 800c086:	f000 f8fd 	bl	800c284 <eMBPEventPost>
 800c08a:	0003      	movs	r3, r0
 800c08c:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800c08e:	197b      	adds	r3, r7, r5
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
 800c096:	f000 f975 	bl	800c384 <vMBPAssert>
        }
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c09a:	f000 f98d 	bl	800c3b8 <vMBPExitCritical>
    return bMoreTXData;
 800c09e:	2317      	movs	r3, #23
 800c0a0:	18fb      	adds	r3, r7, r3
 800c0a2:	781b      	ldrb	r3, [r3, #0]
}
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	b006      	add	sp, #24
 800c0aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ac:	0800bdd9 	.word	0x0800bdd9

0800c0b0 <bMBMSerialRTUT35CB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialRTUT35CB( xMBHandle xHdl )
{
 800c0b0:	b5b0      	push	{r4, r5, r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 800c0b8:	2317      	movs	r3, #23
 800c0ba:	18fb      	adds	r3, r7, r3
 800c0bc:	2201      	movs	r2, #1
 800c0be:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 800c0c4:	f000 f971 	bl	800c3aa <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	2382      	movs	r3, #130	; 0x82
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	5cd3      	ldrb	r3, [r2, r3]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <bMBMSerialRTUT35CB+0x30>
 800c0dc:	f000 f952 	bl	800c384 <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	33ff      	adds	r3, #255	; 0xff
 800c0e6:	5cd3      	ldrb	r3, [r2, r3]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d110      	bne.n	800c110 <bMBMSerialRTUT35CB+0x60>
    {
    case MBM_STATE_RX_RCV:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	250b      	movs	r5, #11
 800c0f4:	197c      	adds	r4, r7, r5
 800c0f6:	2103      	movs	r1, #3
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f000 f8c3 	bl	800c284 <eMBPEventPost>
 800c0fe:	0003      	movs	r3, r0
 800c100:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800c102:	197b      	adds	r3, r7, r5
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d013      	beq.n	800c132 <bMBMSerialRTUT35CB+0x82>
 800c10a:	f000 f93b 	bl	800c384 <vMBPAssert>
        break;
 800c10e:	e010      	b.n	800c132 <bMBMSerialRTUT35CB+0x82>

    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	250b      	movs	r5, #11
 800c116:	197c      	adds	r4, r7, r5
 800c118:	2104      	movs	r1, #4
 800c11a:	0018      	movs	r0, r3
 800c11c:	f000 f8b2 	bl	800c284 <eMBPEventPost>
 800c120:	0003      	movs	r3, r0
 800c122:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800c124:	197b      	adds	r3, r7, r5
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <bMBMSerialRTUT35CB+0x84>
 800c12c:	f000 f92a 	bl	800c384 <vMBPAssert>
 800c130:	e000      	b.n	800c134 <bMBMSerialRTUT35CB+0x84>
        break;
 800c132:	46c0      	nop			; (mov r8, r8)
    }
    pxRTUFrameHdl->eRcvState = MBM_STATE_RX_IDLE;
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	2302      	movs	r3, #2
 800c138:	33ff      	adds	r3, #255	; 0xff
 800c13a:	2100      	movs	r1, #0
 800c13c:	54d1      	strb	r1, [r2, r3]
    /* Disable the receive and the timers after a timeout. */
    eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	2388      	movs	r3, #136	; 0x88
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	58d3      	ldr	r3, [r2, r3]
 800c146:	250b      	movs	r5, #11
 800c148:	197c      	adds	r4, r7, r5
 800c14a:	2100      	movs	r1, #0
 800c14c:	0018      	movs	r0, r3
 800c14e:	f000 fb69 	bl	800c824 <eMBPSerialRxEnable>
 800c152:	0003      	movs	r3, r0
 800c154:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 800c156:	197b      	adds	r3, r7, r5
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <bMBMSerialRTUT35CB+0xb2>
 800c15e:	f000 f911 	bl	800c384 <vMBPAssert>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
    eStatus = eMBPTimerStop( pxRTUFrameHdl->xTmrHdl );
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	2386      	movs	r3, #134	; 0x86
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	58d3      	ldr	r3, [r2, r3]
 800c16a:	250b      	movs	r5, #11
 800c16c:	197c      	adds	r4, r7, r5
 800c16e:	0018      	movs	r0, r3
 800c170:	f000 fd86 	bl	800cc80 <eMBPTimerStop>
 800c174:	0003      	movs	r3, r0
 800c176:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 800c178:	197b      	adds	r3, r7, r5
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <bMBMSerialRTUT35CB+0xd4>
 800c180:	f000 f900 	bl	800c384 <vMBPAssert>
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 800c184:	f000 f918 	bl	800c3b8 <vMBPExitCritical>
    return bNeedCtxSwitch;
 800c188:	2317      	movs	r3, #23
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	781b      	ldrb	r3, [r3, #0]
}
 800c18e:	0018      	movs	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	b006      	add	sp, #24
 800c194:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c198 <eMBPEventCreate>:
/* ----------------------- Start implementation -----------------------------*/


eMBErrorCode
eMBPEventCreate( xMBPEventHandle * pxEventHdl )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c1a0:	230f      	movs	r3, #15
 800c1a2:	18fb      	adds	r3, r7, r3
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	701a      	strb	r2, [r3, #0]
    UBYTE           i;

    if( NULL != pxEventHdl )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d05e      	beq.n	800c26c <eMBPEventCreate+0xd4>
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800c1ae:	f000 f8fc 	bl	800c3aa <vMBPEnterCritical>
        if( !bIsInitialized )
 800c1b2:	4b32      	ldr	r3, [pc, #200]	; (800c27c <eMBPEventCreate+0xe4>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d121      	bne.n	800c1fe <eMBPEventCreate+0x66>
        {
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800c1ba:	230e      	movs	r3, #14
 800c1bc:	18fb      	adds	r3, r7, r3
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	e014      	b.n	800c1ee <eMBPEventCreate+0x56>
            {
                HDL_RESET( &arxEventHdls[i] );
 800c1c4:	200e      	movs	r0, #14
 800c1c6:	183b      	adds	r3, r7, r0
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	4b2d      	ldr	r3, [pc, #180]	; (800c280 <eMBPEventCreate+0xe8>)
 800c1cc:	0052      	lsls	r2, r2, #1
 800c1ce:	21ff      	movs	r1, #255	; 0xff
 800c1d0:	54d1      	strb	r1, [r2, r3]
 800c1d2:	0001      	movs	r1, r0
 800c1d4:	187b      	adds	r3, r7, r1
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	4a29      	ldr	r2, [pc, #164]	; (800c280 <eMBPEventCreate+0xe8>)
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	18d3      	adds	r3, r2, r3
 800c1de:	3301      	adds	r3, #1
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800c1e4:	187b      	adds	r3, r7, r1
 800c1e6:	781a      	ldrb	r2, [r3, #0]
 800c1e8:	187b      	adds	r3, r7, r1
 800c1ea:	3201      	adds	r2, #1
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	230e      	movs	r3, #14
 800c1f0:	18fb      	adds	r3, r7, r3
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d9e5      	bls.n	800c1c4 <eMBPEventCreate+0x2c>
            }
            bIsInitialized = TRUE;
 800c1f8:	4b20      	ldr	r3, [pc, #128]	; (800c27c <eMBPEventCreate+0xe4>)
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	701a      	strb	r2, [r3, #0]
        }
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800c1fe:	230e      	movs	r3, #14
 800c200:	18fb      	adds	r3, r7, r3
 800c202:	2200      	movs	r2, #0
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	e02a      	b.n	800c25e <eMBPEventCreate+0xc6>
        {
            if( IDX_INVALID == arxEventHdls[i].ubIdx )
 800c208:	210e      	movs	r1, #14
 800c20a:	187b      	adds	r3, r7, r1
 800c20c:	781a      	ldrb	r2, [r3, #0]
 800c20e:	4b1c      	ldr	r3, [pc, #112]	; (800c280 <eMBPEventCreate+0xe8>)
 800c210:	0052      	lsls	r2, r2, #1
 800c212:	5cd3      	ldrb	r3, [r2, r3]
 800c214:	2bff      	cmp	r3, #255	; 0xff
 800c216:	d11c      	bne.n	800c252 <eMBPEventCreate+0xba>
            {
                arxEventHdls[i].ubIdx = i;
 800c218:	187b      	adds	r3, r7, r1
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	4b18      	ldr	r3, [pc, #96]	; (800c280 <eMBPEventCreate+0xe8>)
 800c21e:	0052      	lsls	r2, r2, #1
 800c220:	0008      	movs	r0, r1
 800c222:	1879      	adds	r1, r7, r1
 800c224:	7809      	ldrb	r1, [r1, #0]
 800c226:	54d1      	strb	r1, [r2, r3]
                arxEventHdls[i].xType = EV_NONE;
 800c228:	0001      	movs	r1, r0
 800c22a:	187b      	adds	r3, r7, r1
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	4a14      	ldr	r2, [pc, #80]	; (800c280 <eMBPEventCreate+0xe8>)
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	18d3      	adds	r3, r2, r3
 800c234:	3301      	adds	r3, #1
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
                *pxEventHdl = &arxEventHdls[i];
 800c23a:	187b      	adds	r3, r7, r1
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	005a      	lsls	r2, r3, #1
 800c240:	4b0f      	ldr	r3, [pc, #60]	; (800c280 <eMBPEventCreate+0xe8>)
 800c242:	18d2      	adds	r2, r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]
                eStatus = MB_ENOERR;
 800c248:	230f      	movs	r3, #15
 800c24a:	18fb      	adds	r3, r7, r3
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]
                break;
 800c250:	e00a      	b.n	800c268 <eMBPEventCreate+0xd0>
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800c252:	210e      	movs	r1, #14
 800c254:	187b      	adds	r3, r7, r1
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	187b      	adds	r3, r7, r1
 800c25a:	3201      	adds	r2, #1
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	230e      	movs	r3, #14
 800c260:	18fb      	adds	r3, r7, r3
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d9cf      	bls.n	800c208 <eMBPEventCreate+0x70>
            }
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800c268:	f000 f8a6 	bl	800c3b8 <vMBPExitCritical>
    }
    return eStatus;
 800c26c:	230f      	movs	r3, #15
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	781b      	ldrb	r3, [r3, #0]
}
 800c272:	0018      	movs	r0, r3
 800c274:	46bd      	mov	sp, r7
 800c276:	b004      	add	sp, #16
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	46c0      	nop			; (mov r8, r8)
 800c27c:	20004fb4 	.word	0x20004fb4
 800c280:	20004fb8 	.word	0x20004fb8

0800c284 <eMBPEventPost>:

eMBErrorCode
eMBPEventPost( const xMBPEventHandle xEventHdl, xMBPEventType xEvent )
{
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	000a      	movs	r2, r1
 800c28e:	1cfb      	adds	r3, r7, #3
 800c290:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c292:	240f      	movs	r4, #15
 800c294:	193b      	adds	r3, r7, r4
 800c296:	2202      	movs	r2, #2
 800c298:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c29e:	f000 f884 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00e      	beq.n	800c2c6 <eMBPEventPost+0x42>
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	005a      	lsls	r2, r3, #1
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <eMBPEventPost+0x54>)
 800c2b0:	18d3      	adds	r3, r2, r3
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d106      	bne.n	800c2c6 <eMBPEventPost+0x42>
    {
        pxEventHdl->xType = xEvent;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	1cfa      	adds	r2, r7, #3
 800c2bc:	7812      	ldrb	r2, [r2, #0]
 800c2be:	705a      	strb	r2, [r3, #1]
        eStatus = MB_ENOERR;
 800c2c0:	193b      	adds	r3, r7, r4
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c2c6:	f000 f877 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800c2ca:	230f      	movs	r3, #15
 800c2cc:	18fb      	adds	r3, r7, r3
 800c2ce:	781b      	ldrb	r3, [r3, #0]
}
 800c2d0:	0018      	movs	r0, r3
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	b005      	add	sp, #20
 800c2d6:	bd90      	pop	{r4, r7, pc}
 800c2d8:	20004fb8 	.word	0x20004fb8

0800c2dc <bMBPEventGet>:

BOOL
bMBPEventGet( const xMBPEventHandle xEventHdl, xMBPEventType * pxEvent )
{
 800c2dc:	b590      	push	{r4, r7, lr}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
    BOOL            bEventInQueue = FALSE;
 800c2e6:	240f      	movs	r4, #15
 800c2e8:	193b      	adds	r3, r7, r4
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c2f2:	f000 f85a 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d015      	beq.n	800c328 <bMBPEventGet+0x4c>
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	005a      	lsls	r2, r3, #1
 800c302:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <bMBPEventGet+0x60>)
 800c304:	18d3      	adds	r3, r2, r3
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d10d      	bne.n	800c328 <bMBPEventGet+0x4c>
    {
        if( EV_NONE != pxEventHdl->xType )
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <bMBPEventGet+0x4c>
        {
            bEventInQueue = TRUE;
 800c314:	193b      	adds	r3, r7, r4
 800c316:	2201      	movs	r2, #1
 800c318:	701a      	strb	r2, [r3, #0]
            *pxEvent = pxEventHdl->xType;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	785a      	ldrb	r2, [r3, #1]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	701a      	strb	r2, [r3, #0]
            pxEventHdl->xType = EV_NONE;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2200      	movs	r2, #0
 800c326:	705a      	strb	r2, [r3, #1]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c328:	f000 f846 	bl	800c3b8 <vMBPExitCritical>
    return bEventInQueue;
 800c32c:	230f      	movs	r3, #15
 800c32e:	18fb      	adds	r3, r7, r3
 800c330:	781b      	ldrb	r3, [r3, #0]
}
 800c332:	0018      	movs	r0, r3
 800c334:	46bd      	mov	sp, r7
 800c336:	b005      	add	sp, #20
 800c338:	bd90      	pop	{r4, r7, pc}
 800c33a:	46c0      	nop			; (mov r8, r8)
 800c33c:	20004fb8 	.word	0x20004fb8

0800c340 <vMBPEventDelete>:

void
vMBPEventDelete( xMBPEventHandle xEventHdl )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
    xEventInternalHandle *pxEventIntHdl = xEventHdl;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	60fb      	str	r3, [r7, #12]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c34c:	f000 f82d 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventIntHdl, arxEventHdls ) )
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00d      	beq.n	800c372 <vMBPEventDelete+0x32>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	005a      	lsls	r2, r3, #1
 800c35c:	4b08      	ldr	r3, [pc, #32]	; (800c380 <vMBPEventDelete+0x40>)
 800c35e:	18d3      	adds	r3, r2, r3
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	429a      	cmp	r2, r3
 800c364:	d105      	bne.n	800c372 <vMBPEventDelete+0x32>
    {
        HDL_RESET( pxEventIntHdl );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	22ff      	movs	r2, #255	; 0xff
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	705a      	strb	r2, [r3, #1]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c372:	f000 f821 	bl	800c3b8 <vMBPExitCritical>
}
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	46bd      	mov	sp, r7
 800c37a:	b004      	add	sp, #16
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	46c0      	nop			; (mov r8, r8)
 800c380:	20004fb8 	.word	0x20004fb8

0800c384 <vMBPAssert>:
    vMBPAssert(  );
}

void
vMBPAssert( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
    volatile BOOL   bBreakOut = FALSE;
 800c38a:	1dfb      	adds	r3, r7, #7
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]

    vMBPEnterCritical(  );
 800c390:	f000 f80b 	bl	800c3aa <vMBPEnterCritical>
    while( !bBreakOut );
 800c394:	46c0      	nop			; (mov r8, r8)
 800c396:	1dfb      	adds	r3, r7, #7
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0fa      	beq.n	800c396 <vMBPAssert+0x12>
}
 800c3a0:	46c0      	nop			; (mov r8, r8)
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	b002      	add	sp, #8
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <vMBPEnterCritical>:

void
vMBPEnterCritical( void )
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	af00      	add	r7, sp, #0
	portENTER_CRITICAL(  );
 800c3ae:	f7fb ff6f 	bl	8008290 <vPortEnterCritical>
	
}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <vMBPExitCritical>:

void
vMBPExitCritical( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
	portEXIT_CRITICAL(  );
 800c3bc:	f7fb ff7a 	bl	80082b4 <vPortExitCritical>
 
}
 800c3c0:	46c0      	nop			; (mov r8, r8)
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <eMBPSerialInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPSerialInit( xMBPSerialHandle * pxSerialHdl, UCHAR ucPort, ULONG ulBaudRate,
                UCHAR ucDataBits, eMBSerialParity eParity, UCHAR ucStopBits, xMBHandle xMBMHdl)
{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b08b      	sub	sp, #44	; 0x2c
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	0008      	movs	r0, r1
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	0019      	movs	r1, r3
 800c3d6:	230b      	movs	r3, #11
 800c3d8:	18fb      	adds	r3, r7, r3
 800c3da:	1c02      	adds	r2, r0, #0
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	230a      	movs	r3, #10
 800c3e0:	18fb      	adds	r3, r7, r3
 800c3e2:	1c0a      	adds	r2, r1, #0
 800c3e4:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800c3e6:	2327      	movs	r3, #39	; 0x27
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
		UNUSED(BaudRate);
		UNUSED(DataBits);
		UNUSED(Parity);
		UNUSED(StopBit);
		UBYTE           ubUDR;
		ubUDR =0xFF;
 800c3ee:	2313      	movs	r3, #19
 800c3f0:	18fb      	adds	r3, r7, r3
 800c3f2:	22ff      	movs	r2, #255	; 0xff
 800c3f4:	701a      	strb	r2, [r3, #0]
		/* End of addition */

    MBP_ENTER_CRITICAL_SECTION(  );
 800c3f6:	f7ff ffd8 	bl	800c3aa <vMBPEnterCritical>
    if( !bIsInitalized )
 800c3fa:	4b7a      	ldr	r3, [pc, #488]	; (800c5e4 <eMBPSerialInit+0x21c>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d139      	bne.n	800c476 <eMBPSerialInit+0xae>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 800c402:	2326      	movs	r3, #38	; 0x26
 800c404:	18fb      	adds	r3, r7, r3
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e024      	b.n	800c456 <eMBPSerialInit+0x8e>
        {
            HDL_RESET( &xSerialHdls[ubIdx] );
 800c40c:	2026      	movs	r0, #38	; 0x26
 800c40e:	183b      	adds	r3, r7, r0
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	4b75      	ldr	r3, [pc, #468]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c414:	0112      	lsls	r2, r2, #4
 800c416:	21ff      	movs	r1, #255	; 0xff
 800c418:	54d1      	strb	r1, [r2, r3]
 800c41a:	0001      	movs	r1, r0
 800c41c:	187b      	adds	r3, r7, r1
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	4a71      	ldr	r2, [pc, #452]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	18d3      	adds	r3, r2, r3
 800c426:	3304      	adds	r3, #4
 800c428:	2200      	movs	r2, #0
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	187b      	adds	r3, r7, r1
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	4a6d      	ldr	r2, [pc, #436]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	18d3      	adds	r3, r2, r3
 800c436:	3308      	adds	r3, #8
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
 800c43c:	187b      	adds	r3, r7, r1
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	4a69      	ldr	r2, [pc, #420]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	18d3      	adds	r3, r2, r3
 800c446:	330c      	adds	r3, #12
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 800c44c:	187b      	adds	r3, r7, r1
 800c44e:	781a      	ldrb	r2, [r3, #0]
 800c450:	187b      	adds	r3, r7, r1
 800c452:	3201      	adds	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
 800c456:	2326      	movs	r3, #38	; 0x26
 800c458:	18fb      	adds	r3, r7, r3
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0d5      	beq.n	800c40c <eMBPSerialInit+0x44>
        }
#if UART_1_ENABLED == 1
        RS_485_UART_1_INIT(  );
        RS_485_UART_1_DISABLE_TX(  );
 800c460:	2380      	movs	r3, #128	; 0x80
 800c462:	0159      	lsls	r1, r3, #5
 800c464:	2390      	movs	r3, #144	; 0x90
 800c466:	05db      	lsls	r3, r3, #23
 800c468:	2200      	movs	r2, #0
 800c46a:	0018      	movs	r0, r3
 800c46c:	f7f7 f852 	bl	8003514 <HAL_GPIO_WritePin>
#endif
        bIsInitalized = TRUE;
 800c470:	4b5c      	ldr	r3, [pc, #368]	; (800c5e4 <eMBPSerialInit+0x21c>)
 800c472:	2201      	movs	r2, #1
 800c474:	701a      	strb	r2, [r3, #0]
    }

    if( ( MB_HDL_INVALID == xMBMHdl ) || ( NULL == pxSerialHdl ) )
 800c476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <eMBPSerialInit+0xba>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d104      	bne.n	800c48c <eMBPSerialInit+0xc4>
    {
        eStatus = MB_EINVAL;
 800c482:	2327      	movs	r3, #39	; 0x27
 800c484:	18fb      	adds	r3, r7, r3
 800c486:	2202      	movs	r2, #2
 800c488:	701a      	strb	r2, [r3, #0]
 800c48a:	e0a1      	b.n	800c5d0 <eMBPSerialInit+0x208>
    }
    else
    {
        eStatus = MB_ENORES;
 800c48c:	2327      	movs	r3, #39	; 0x27
 800c48e:	18fb      	adds	r3, r7, r3
 800c490:	2204      	movs	r2, #4
 800c492:	701a      	strb	r2, [r3, #0]

        /* Setup baudrate */
        if( ( ulBaudRate > UART_BAUDRATE_MIN ) && ( ulBaudRate < UART_BAUDRATE_MAX ) )
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	2396      	movs	r3, #150	; 0x96
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d904      	bls.n	800c4a8 <eMBPSerialInit+0xe0>
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	23e1      	movs	r3, #225	; 0xe1
 800c4a2:	025b      	lsls	r3, r3, #9
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d303      	bcc.n	800c4b0 <eMBPSerialInit+0xe8>
        {
            //BaudRate = ulBaudRate;
        }
        else
        {
            eStatus = MB_EINVAL;
 800c4a8:	2327      	movs	r3, #39	; 0x27
 800c4aa:	18fb      	adds	r3, r7, r3
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	701a      	strb	r2, [r3, #0]
        }

        /* Setup stopbits */
        switch ( ucStopBits )
 800c4b0:	2334      	movs	r3, #52	; 0x34
 800c4b2:	2208      	movs	r2, #8
 800c4b4:	189b      	adds	r3, r3, r2
 800c4b6:	19db      	adds	r3, r3, r7
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d002      	beq.n	800c4c4 <eMBPSerialInit+0xfc>
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d003      	beq.n	800c4ca <eMBPSerialInit+0x102>
 800c4c2:	e006      	b.n	800c4d2 <eMBPSerialInit+0x10a>
        {
        case 1:
            StopBit = UART_STOPBITS_1;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	623b      	str	r3, [r7, #32]
            break;
 800c4c8:	e008      	b.n	800c4dc <eMBPSerialInit+0x114>
        case 2:
            StopBit = UART_STOPBITS_2;
 800c4ca:	2380      	movs	r3, #128	; 0x80
 800c4cc:	019b      	lsls	r3, r3, #6
 800c4ce:	623b      	str	r3, [r7, #32]
            break;
 800c4d0:	e004      	b.n	800c4dc <eMBPSerialInit+0x114>
        default:
            eStatus = MB_EINVAL;
 800c4d2:	2327      	movs	r3, #39	; 0x27
 800c4d4:	18fb      	adds	r3, r7, r3
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	701a      	strb	r2, [r3, #0]
            break;
 800c4da:	46c0      	nop			; (mov r8, r8)
        }

        /* For STM32 parity is placed on bit 9 (MSB)
         * Select correct number of databits */
        if( ucDataBits == 8 )
 800c4dc:	230a      	movs	r3, #10
 800c4de:	18fb      	adds	r3, r7, r3
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b08      	cmp	r3, #8
 800c4e4:	d10d      	bne.n	800c502 <eMBPSerialInit+0x13a>
        {
            if( eParity != MB_PAR_NONE )
 800c4e6:	2330      	movs	r3, #48	; 0x30
 800c4e8:	2208      	movs	r2, #8
 800c4ea:	189b      	adds	r3, r3, r2
 800c4ec:	19db      	adds	r3, r3, r7
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d003      	beq.n	800c4fc <eMBPSerialInit+0x134>
            {
                DataBits = UART_WORDLENGTH_9B;
 800c4f4:	2380      	movs	r3, #128	; 0x80
 800c4f6:	015b      	lsls	r3, r3, #5
 800c4f8:	61fb      	str	r3, [r7, #28]
 800c4fa:	e010      	b.n	800c51e <eMBPSerialInit+0x156>
            }
            else
            {
                DataBits = UART_WORDLENGTH_8B;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	e00d      	b.n	800c51e <eMBPSerialInit+0x156>
            }
        }
        else
        {
            if( eParity != MB_PAR_NONE )
 800c502:	2330      	movs	r3, #48	; 0x30
 800c504:	2208      	movs	r2, #8
 800c506:	189b      	adds	r3, r3, r2
 800c508:	19db      	adds	r3, r3, r7
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d002      	beq.n	800c516 <eMBPSerialInit+0x14e>
            {
                DataBits = UART_WORDLENGTH_8B;
 800c510:	2300      	movs	r3, #0
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	e003      	b.n	800c51e <eMBPSerialInit+0x156>
            }
            else
            {
                eStatus = MB_EINVAL;
 800c516:	2327      	movs	r3, #39	; 0x27
 800c518:	18fb      	adds	r3, r7, r3
 800c51a:	2202      	movs	r2, #2
 800c51c:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Setup parity */
        switch ( eParity )
 800c51e:	2330      	movs	r3, #48	; 0x30
 800c520:	2208      	movs	r2, #8
 800c522:	189b      	adds	r3, r3, r2
 800c524:	19db      	adds	r3, r3, r7
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d005      	beq.n	800c538 <eMBPSerialInit+0x170>
 800c52c:	dc0f      	bgt.n	800c54e <eMBPSerialInit+0x186>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d005      	beq.n	800c53e <eMBPSerialInit+0x176>
 800c532:	2b01      	cmp	r3, #1
 800c534:	d007      	beq.n	800c546 <eMBPSerialInit+0x17e>
 800c536:	e00a      	b.n	800c54e <eMBPSerialInit+0x186>
        {
        case MB_PAR_NONE:
            Parity = UART_PARITY_NONE;
 800c538:	2300      	movs	r3, #0
 800c53a:	61bb      	str	r3, [r7, #24]
            break;
 800c53c:	e00c      	b.n	800c558 <eMBPSerialInit+0x190>
        case MB_PAR_ODD:
            Parity = UART_PARITY_ODD;
 800c53e:	23c0      	movs	r3, #192	; 0xc0
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	61bb      	str	r3, [r7, #24]
            break;
 800c544:	e008      	b.n	800c558 <eMBPSerialInit+0x190>
        case MB_PAR_EVEN:
            Parity = UART_PARITY_EVEN;
 800c546:	2380      	movs	r3, #128	; 0x80
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	61bb      	str	r3, [r7, #24]
            break;
 800c54c:	e004      	b.n	800c558 <eMBPSerialInit+0x190>
        default:
            eStatus = MB_EINVAL;
 800c54e:	2327      	movs	r3, #39	; 0x27
 800c550:	18fb      	adds	r3, r7, r3
 800c552:	2202      	movs	r2, #2
 800c554:	701a      	strb	r2, [r3, #0]
            break;
 800c556:	46c0      	nop			; (mov r8, r8)
        }

        if( eStatus != MB_EINVAL )
 800c558:	2427      	movs	r4, #39	; 0x27
 800c55a:	193b      	adds	r3, r7, r4
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d036      	beq.n	800c5d0 <eMBPSerialInit+0x208>
        {
            switch ( ucPort )
 800c562:	230b      	movs	r3, #11
 800c564:	18fb      	adds	r3, r7, r3
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d130      	bne.n	800c5ce <eMBPSerialInit+0x206>
            {
#if UART_1_ENABLED == 1
            case UART_1_PORT:
                if( IDX_INVALID == xSerialHdls[UART_1_IDX].ubIdx )
 800c56c:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2bff      	cmp	r3, #255	; 0xff
 800c572:	d127      	bne.n	800c5c4 <eMBPSerialInit+0x1fc>
                {
                    /* Configure  USART1 */
                    //MB_PORT_Init(BaudRate, DataBits, Parity, StopBit);
										MX_USART1_UART_Init();
 800c574:	f7f4 fe64 	bl	8001240 <MX_USART1_UART_Init>
									
                    /* Disable receive and transmit interrupts from the beginning */
                    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800c578:	4b1c      	ldr	r3, [pc, #112]	; (800c5ec <eMBPSerialInit+0x224>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <eMBPSerialInit+0x224>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2120      	movs	r1, #32
 800c584:	438a      	bics	r2, r1
 800c586:	601a      	str	r2, [r3, #0]
										__HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 800c588:	4b18      	ldr	r3, [pc, #96]	; (800c5ec <eMBPSerialInit+0x224>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b17      	ldr	r3, [pc, #92]	; (800c5ec <eMBPSerialInit+0x224>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2140      	movs	r1, #64	; 0x40
 800c594:	438a      	bics	r2, r1
 800c596:	601a      	str	r2, [r3, #0]
									x=sizeof(ubUDR);
 800c598:	2301      	movs	r3, #1
 800c59a:	617b      	str	r3, [r7, #20]
										HAL_UART_Receive_IT(&huart1, &ubUDR, sizeof(ubUDR));
 800c59c:	2313      	movs	r3, #19
 800c59e:	18f9      	adds	r1, r7, r3
 800c5a0:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <eMBPSerialInit+0x224>)
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f7f8 f9ad 	bl	8004904 <HAL_UART_Receive_IT>
//									HAL_StatusTypeDef	 wq=HAL_UART_Receive_DMA(&huart1, &ubUDR, x);
                    /* Setup handle to uart */
                    *pxSerialHdl = &xSerialHdls[UART_1_IDX];
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	4a0e      	ldr	r2, [pc, #56]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c5ae:	601a      	str	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].ubIdx = UART_1_IDX;
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	701a      	strb	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].xMBMHdl = xMBMHdl;
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <eMBPSerialInit+0x220>)
 800c5b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5ba:	60da      	str	r2, [r3, #12]

                    /* Everything is ok */
                    eStatus = MB_ENOERR;
 800c5bc:	193b      	adds	r3, r7, r4
 800c5be:	2200      	movs	r2, #0
 800c5c0:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    eStatus = MB_ENORES;
                }
                break;
 800c5c2:	e005      	b.n	800c5d0 <eMBPSerialInit+0x208>
                    eStatus = MB_ENORES;
 800c5c4:	2327      	movs	r3, #39	; 0x27
 800c5c6:	18fb      	adds	r3, r7, r3
 800c5c8:	2204      	movs	r2, #4
 800c5ca:	701a      	strb	r2, [r3, #0]
                break;
 800c5cc:	e000      	b.n	800c5d0 <eMBPSerialInit+0x208>
#endif
            default:
                break;
 800c5ce:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c5d0:	f7ff fef2 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800c5d4:	2327      	movs	r3, #39	; 0x27
 800c5d6:	18fb      	adds	r3, r7, r3
 800c5d8:	781b      	ldrb	r3, [r3, #0]
}
 800c5da:	0018      	movs	r0, r3
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	b00b      	add	sp, #44	; 0x2c
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	46c0      	nop			; (mov r8, r8)
 800c5e4:	20004fcc 	.word	0x20004fcc
 800c5e8:	20004fbc 	.word	0x20004fbc
 800c5ec:	200000f8 	.word	0x200000f8

0800c5f0 <eMBPSerialClose>:

eMBErrorCode
eMBPSerialClose( xMBPSerialHandle xSerialHdl )
{
 800c5f0:	b590      	push	{r4, r7, lr}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c5f8:	240f      	movs	r4, #15
 800c5fa:	193b      	adds	r3, r7, r4
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c604:	f7ff fed1 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d037      	beq.n	800c67e <eMBPSerialClose+0x8e>
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	011a      	lsls	r2, r3, #4
 800c614:	4b1e      	ldr	r3, [pc, #120]	; (800c690 <eMBPSerialClose+0xa0>)
 800c616:	18d3      	adds	r3, r2, r3
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d12f      	bne.n	800c67e <eMBPSerialClose+0x8e>
    {
        switch ( pxSerialIntHdl->ubIdx )
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d128      	bne.n	800c678 <eMBPSerialClose+0x88>
        {
#if UART_1_ENABLED == 1
        case UART_1_IDX:
            if( ( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN ) && ( NULL == pxSerialIntHdl->pvMBMReceiveFN ) )
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d11f      	bne.n	800c66e <eMBPSerialClose+0x7e>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d11b      	bne.n	800c66e <eMBPSerialClose+0x7e>
            {
                /* Close USART 1 */
                HAL_UART_DeInit(&huart1);
 800c636:	4b17      	ldr	r3, [pc, #92]	; (800c694 <eMBPSerialClose+0xa4>)
 800c638:	0018      	movs	r0, r3
 800c63a:	f7f8 f8b5 	bl	80047a8 <HAL_UART_DeInit>
                /* Force RS485 back to receive mode */
                RS_485_UART_1_DISABLE_TX(  );
 800c63e:	2380      	movs	r3, #128	; 0x80
 800c640:	0159      	lsls	r1, r3, #5
 800c642:	2390      	movs	r3, #144	; 0x90
 800c644:	05db      	lsls	r3, r3, #23
 800c646:	2200      	movs	r2, #0
 800c648:	0018      	movs	r0, r3
 800c64a:	f7f6 ff63 	bl	8003514 <HAL_GPIO_WritePin>
                /* Reset handle */
                HDL_RESET( pxSerialIntHdl );
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	22ff      	movs	r2, #255	; 0xff
 800c652:	701a      	strb	r2, [r3, #0]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2200      	movs	r2, #0
 800c65e:	609a      	str	r2, [r3, #8]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2200      	movs	r2, #0
 800c664:	60da      	str	r2, [r3, #12]
                /* No error */
                eStatus = MB_ENOERR;
 800c666:	193b      	adds	r3, r7, r4
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_EIO;
            }
            break;
 800c66c:	e007      	b.n	800c67e <eMBPSerialClose+0x8e>
                eStatus = MB_EIO;
 800c66e:	230f      	movs	r3, #15
 800c670:	18fb      	adds	r3, r7, r3
 800c672:	2205      	movs	r2, #5
 800c674:	701a      	strb	r2, [r3, #0]
            break;
 800c676:	e002      	b.n	800c67e <eMBPSerialClose+0x8e>
#endif
        default:
            MBP_ASSERT( 0 );
 800c678:	f7ff fe84 	bl	800c384 <vMBPAssert>
            break;
 800c67c:	46c0      	nop			; (mov r8, r8)
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c67e:	f7ff fe9b 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800c682:	230f      	movs	r3, #15
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	781b      	ldrb	r3, [r3, #0]
}
 800c688:	0018      	movs	r0, r3
 800c68a:	46bd      	mov	sp, r7
 800c68c:	b005      	add	sp, #20
 800c68e:	bd90      	pop	{r4, r7, pc}
 800c690:	20004fbc 	.word	0x20004fbc
 800c694:	200000f8 	.word	0x200000f8

0800c698 <eMBPSerialTxEnable>:

eMBErrorCode
eMBPSerialTxEnable( xMBPSerialHandle xSerialHdl, pbMBPSerialTransmitterEmptyCB pbMBMTransmitterEmptyFN )
{
 800c698:	b5b0      	push	{r4, r5, r7, lr}
 800c69a:	b0c4      	sub	sp, #272	; 0x110
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c6a2:	2310      	movs	r3, #16
 800c6a4:	33ff      	adds	r3, #255	; 0xff
 800c6a6:	18fb      	adds	r3, r7, r3
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2284      	movs	r2, #132	; 0x84
 800c6b0:	0052      	lsls	r2, r2, #1
 800c6b2:	18ba      	adds	r2, r7, r2
 800c6b4:	6013      	str	r3, [r2, #0]
	
		/* Next lines added for copying frame packet to buffer */
		MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 800c6b6:	4b58      	ldr	r3, [pc, #352]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2bff      	cmp	r3, #255	; 0xff
 800c6bc:	d101      	bne.n	800c6c2 <eMBPSerialTxEnable+0x2a>
 800c6be:	f7ff fe61 	bl	800c384 <vMBPAssert>
    BOOL      bHasMoreData = TRUE;      
 800c6c2:	2387      	movs	r3, #135	; 0x87
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	18fb      	adds	r3, r7, r3
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	701a      	strb	r2, [r3, #0]
    UBYTE     ubTxByte[MBM_SER_PDU_SIZE_MAX]={0};
 800c6cc:	4b53      	ldr	r3, [pc, #332]	; (800c81c <eMBPSerialTxEnable+0x184>)
 800c6ce:	2288      	movs	r2, #136	; 0x88
 800c6d0:	0052      	lsls	r2, r2, #1
 800c6d2:	189b      	adds	r3, r3, r2
 800c6d4:	19db      	adds	r3, r3, r7
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	22fc      	movs	r2, #252	; 0xfc
 800c6de:	2100      	movs	r1, #0
 800c6e0:	0018      	movs	r0, r3
 800c6e2:	f000 fbb7 	bl	800ce54 <memset>
		UBYTE 		FrameCnt=0;
 800c6e6:	230e      	movs	r3, #14
 800c6e8:	33ff      	adds	r3, #255	; 0xff
 800c6ea:	18fb      	adds	r3, r7, r3
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c6f0:	f7ff fe5b 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800c6f4:	2184      	movs	r1, #132	; 0x84
 800c6f6:	0049      	lsls	r1, r1, #1
 800c6f8:	187b      	adds	r3, r7, r1
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d100      	bne.n	800c702 <eMBPSerialTxEnable+0x6a>
 800c700:	e080      	b.n	800c804 <eMBPSerialTxEnable+0x16c>
 800c702:	187b      	adds	r3, r7, r1
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	011a      	lsls	r2, r3, #4
 800c70a:	4b43      	ldr	r3, [pc, #268]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c70c:	18d3      	adds	r3, r2, r3
 800c70e:	187a      	adds	r2, r7, r1
 800c710:	6812      	ldr	r2, [r2, #0]
 800c712:	429a      	cmp	r2, r3
 800c714:	d000      	beq.n	800c718 <eMBPSerialTxEnable+0x80>
 800c716:	e075      	b.n	800c804 <eMBPSerialTxEnable+0x16c>
    {
        eStatus = MB_ENOERR;
 800c718:	2310      	movs	r3, #16
 800c71a:	33ff      	adds	r3, #255	; 0xff
 800c71c:	18fb      	adds	r3, r7, r3
 800c71e:	2200      	movs	r2, #0
 800c720:	701a      	strb	r2, [r3, #0]
        if( NULL != pbMBMTransmitterEmptyFN )
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d04f      	beq.n	800c7c8 <eMBPSerialTxEnable+0x130>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN );
 800c728:	187b      	adds	r3, r7, r1
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <eMBPSerialTxEnable+0x9e>
 800c732:	f7ff fe27 	bl	800c384 <vMBPAssert>
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = pbMBMTransmitterEmptyFN;
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	2184      	movs	r1, #132	; 0x84
 800c73a:	0049      	lsls	r1, r1, #1
 800c73c:	187b      	adds	r3, r7, r1
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	605a      	str	r2, [r3, #4]
            switch ( pxSerialIntHdl->ubIdx )
 800c742:	187b      	adds	r3, r7, r1
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d13a      	bne.n	800c7c2 <eMBPSerialTxEnable+0x12a>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* RS485 transmit mode */
                RS_485_UART_1_ENABLE_TX(  );
 800c74c:	2380      	movs	r3, #128	; 0x80
 800c74e:	0159      	lsls	r1, r3, #5
 800c750:	2390      	movs	r3, #144	; 0x90
 800c752:	05db      	lsls	r3, r3, #23
 800c754:	2201      	movs	r2, #1
 800c756:	0018      	movs	r0, r3
 800c758:	f7f6 fedc 	bl	8003514 <HAL_GPIO_WritePin>
                /* Copy the frame to buffer */
								if( NULL != xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN )
 800c75c:	4b2e      	ldr	r3, [pc, #184]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d020      	beq.n	800c7a6 <eMBPSerialTxEnable+0x10e>
									{
										while (bHasMoreData){
 800c764:	e016      	b.n	800c794 <eMBPSerialTxEnable+0xfc>
											bHasMoreData = xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN( xSerialHdls[UART_1_IDX].xMBMHdl, &ubTxByte[FrameCnt] );
 800c766:	4b2c      	ldr	r3, [pc, #176]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c768:	685a      	ldr	r2, [r3, #4]
 800c76a:	4b2b      	ldr	r3, [pc, #172]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c76c:	68d8      	ldr	r0, [r3, #12]
 800c76e:	250e      	movs	r5, #14
 800c770:	35ff      	adds	r5, #255	; 0xff
 800c772:	197b      	adds	r3, r7, r5
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2108      	movs	r1, #8
 800c778:	1879      	adds	r1, r7, r1
 800c77a:	18cb      	adds	r3, r1, r3
 800c77c:	2187      	movs	r1, #135	; 0x87
 800c77e:	0049      	lsls	r1, r1, #1
 800c780:	187c      	adds	r4, r7, r1
 800c782:	0019      	movs	r1, r3
 800c784:	4790      	blx	r2
 800c786:	0003      	movs	r3, r0
 800c788:	7023      	strb	r3, [r4, #0]
											FrameCnt++;
 800c78a:	197b      	adds	r3, r7, r5
 800c78c:	781a      	ldrb	r2, [r3, #0]
 800c78e:	197b      	adds	r3, r7, r5
 800c790:	3201      	adds	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
										while (bHasMoreData){
 800c794:	2387      	movs	r3, #135	; 0x87
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1e2      	bne.n	800c766 <eMBPSerialTxEnable+0xce>
										}
										xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN = NULL;
 800c7a0:	4b1d      	ldr	r3, [pc, #116]	; (800c818 <eMBPSerialTxEnable+0x180>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	605a      	str	r2, [r3, #4]
									}
								/* Send the buffer once */
					HAL_UART_Transmit_IT( &huart1, ubTxByte, FrameCnt-1 );
 800c7a6:	230e      	movs	r3, #14
 800c7a8:	33ff      	adds	r3, #255	; 0xff
 800c7aa:	18fb      	adds	r3, r7, r3
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	18f9      	adds	r1, r7, r3
 800c7b8:	4b19      	ldr	r3, [pc, #100]	; (800c820 <eMBPSerialTxEnable+0x188>)
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	f7f8 f832 	bl	8004824 <HAL_UART_Transmit_IT>
							//	HAL_UART_Transmit_DMA(&huart1, ubTxByte, FrameCnt-1);
                break;
 800c7c0:	e020      	b.n	800c804 <eMBPSerialTxEnable+0x16c>
#endif
            default:
                MBP_ASSERT( 0 );
 800c7c2:	f7ff fddf 	bl	800c384 <vMBPAssert>
 800c7c6:	e01d      	b.n	800c804 <eMBPSerialTxEnable+0x16c>
            }

        }
        else
        {
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = NULL;
 800c7c8:	2184      	movs	r1, #132	; 0x84
 800c7ca:	0049      	lsls	r1, r1, #1
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	605a      	str	r2, [r3, #4]
            /* The transmitter is disable when the last frame has been sent.
             * This is necessary for RS485 with a half-duplex bus.
             */
            switch ( pxSerialIntHdl->ubIdx )
 800c7d4:	187b      	adds	r3, r7, r1
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d110      	bne.n	800c800 <eMBPSerialTxEnable+0x168>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Disable transmit register empty interrupt */
								__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 800c7de:	4b10      	ldr	r3, [pc, #64]	; (800c820 <eMBPSerialTxEnable+0x188>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	; (800c820 <eMBPSerialTxEnable+0x188>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2180      	movs	r1, #128	; 0x80
 800c7ea:	438a      	bics	r2, r1
 800c7ec:	601a      	str	r2, [r3, #0]
                /* Enable transmit complete interrupt */
								__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800c7ee:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <eMBPSerialTxEnable+0x188>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <eMBPSerialTxEnable+0x188>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2140      	movs	r1, #64	; 0x40
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	601a      	str	r2, [r3, #0]
                break;
 800c7fe:	e001      	b.n	800c804 <eMBPSerialTxEnable+0x16c>
#endif
            default:
                MBP_ASSERT( 0 );
 800c800:	f7ff fdc0 	bl	800c384 <vMBPAssert>
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c804:	f7ff fdd8 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800c808:	2310      	movs	r3, #16
 800c80a:	33ff      	adds	r3, #255	; 0xff
 800c80c:	18fb      	adds	r3, r7, r3
 800c80e:	781b      	ldrb	r3, [r3, #0]
}
 800c810:	0018      	movs	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	b044      	add	sp, #272	; 0x110
 800c816:	bdb0      	pop	{r4, r5, r7, pc}
 800c818:	20004fbc 	.word	0x20004fbc
 800c81c:	fffffef8 	.word	0xfffffef8
 800c820:	200000f8 	.word	0x200000f8

0800c824 <eMBPSerialRxEnable>:

eMBErrorCode
eMBPSerialRxEnable( xMBPSerialHandle xSerialHdl, pvMBPSerialReceiverCB pvMBMReceiveFN )
{
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c82e:	240f      	movs	r4, #15
 800c830:	193b      	adds	r3, r7, r4
 800c832:	2202      	movs	r2, #2
 800c834:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c83a:	f7ff fdb6 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d031      	beq.n	800c8a8 <eMBPSerialRxEnable+0x84>
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	011a      	lsls	r2, r3, #4
 800c84a:	4b1c      	ldr	r3, [pc, #112]	; (800c8bc <eMBPSerialRxEnable+0x98>)
 800c84c:	18d3      	adds	r3, r2, r3
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	429a      	cmp	r2, r3
 800c852:	d129      	bne.n	800c8a8 <eMBPSerialRxEnable+0x84>
    {
        eStatus = MB_ENOERR;
 800c854:	193b      	adds	r3, r7, r4
 800c856:	2200      	movs	r2, #0
 800c858:	701a      	strb	r2, [r3, #0]
        if( NULL != pvMBMReceiveFN )
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d018      	beq.n	800c892 <eMBPSerialRxEnable+0x6e>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pvMBMReceiveFN );
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <eMBPSerialRxEnable+0x48>
 800c868:	f7ff fd8c 	bl	800c384 <vMBPAssert>
            pxSerialIntHdl->pvMBMReceiveFN = pvMBMReceiveFN;
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d108      	bne.n	800c88c <eMBPSerialRxEnable+0x68>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Enable USART 1 receive interrupt */
                __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800c87a:	4b11      	ldr	r3, [pc, #68]	; (800c8c0 <eMBPSerialRxEnable+0x9c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <eMBPSerialRxEnable+0x9c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2120      	movs	r1, #32
 800c886:	430a      	orrs	r2, r1
 800c888:	601a      	str	r2, [r3, #0]
                break;
 800c88a:	e00d      	b.n	800c8a8 <eMBPSerialRxEnable+0x84>
#endif
            default:
                MBP_ASSERT( 0 );
 800c88c:	f7ff fd7a 	bl	800c384 <vMBPAssert>
 800c890:	e00a      	b.n	800c8a8 <eMBPSerialRxEnable+0x84>
            }
        }
        else
        {
            pxSerialIntHdl->pvMBMReceiveFN = NULL;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	2200      	movs	r2, #0
 800c896:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <eMBPSerialRxEnable+0x82>
                //__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
								
                break;
#endif
            default:
                MBP_ASSERT( 0 );
 800c8a0:	f7ff fd70 	bl	800c384 <vMBPAssert>
 800c8a4:	e000      	b.n	800c8a8 <eMBPSerialRxEnable+0x84>
                break;
 800c8a6:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c8a8:	f7ff fd86 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800c8ac:	230f      	movs	r3, #15
 800c8ae:	18fb      	adds	r3, r7, r3
 800c8b0:	781b      	ldrb	r3, [r3, #0]
}
 800c8b2:	0018      	movs	r0, r3
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	b005      	add	sp, #20
 800c8b8:	bd90      	pop	{r4, r7, pc}
 800c8ba:	46c0      	nop			; (mov r8, r8)
 800c8bc:	20004fbc 	.word	0x20004fbc
 800c8c0:	200000f8 	.word	0x200000f8

0800c8c4 <prvvMBPUSART1_RXNE_ISR>:
}

/* USART 1 Receive interrupt */
void
prvvMBPUSART1_RXNE_ISR( void )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
    UBYTE           ubUDR;
    FlagStatus      fs;
	int x;
	UNUSED(x);
    /* Read current flagstatus */
    fs = RESET;
 800c8ca:	210f      	movs	r1, #15
 800c8cc:	187b      	adds	r3, r7, r1
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE) )
 800c8d2:	4b30      	ldr	r3, [pc, #192]	; (800c994 <prvvMBPUSART1_RXNE_ISR+0xd0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	69db      	ldr	r3, [r3, #28]
 800c8d8:	2208      	movs	r2, #8
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d105      	bne.n	800c8ec <prvvMBPUSART1_RXNE_ISR+0x28>
    {
        fs |= 1;
 800c8e0:	187b      	adds	r3, r7, r1
 800c8e2:	187a      	adds	r2, r7, r1
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_NE) )
 800c8ec:	4b29      	ldr	r3, [pc, #164]	; (800c994 <prvvMBPUSART1_RXNE_ISR+0xd0>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	2204      	movs	r2, #4
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	d106      	bne.n	800c908 <prvvMBPUSART1_RXNE_ISR+0x44>
    {
        fs |= 2;
 800c8fa:	220f      	movs	r2, #15
 800c8fc:	18bb      	adds	r3, r7, r2
 800c8fe:	18ba      	adds	r2, r7, r2
 800c900:	7812      	ldrb	r2, [r2, #0]
 800c902:	2102      	movs	r1, #2
 800c904:	430a      	orrs	r2, r1
 800c906:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE) )
 800c908:	4b22      	ldr	r3, [pc, #136]	; (800c994 <prvvMBPUSART1_RXNE_ISR+0xd0>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	2202      	movs	r2, #2
 800c910:	4013      	ands	r3, r2
 800c912:	2b02      	cmp	r3, #2
 800c914:	d106      	bne.n	800c924 <prvvMBPUSART1_RXNE_ISR+0x60>
    {
        fs |= 4;
 800c916:	220f      	movs	r2, #15
 800c918:	18bb      	adds	r3, r7, r2
 800c91a:	18ba      	adds	r2, r7, r2
 800c91c:	7812      	ldrb	r2, [r2, #0]
 800c91e:	2104      	movs	r1, #4
 800c920:	430a      	orrs	r2, r1
 800c922:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_PE) )
 800c924:	4b1b      	ldr	r3, [pc, #108]	; (800c994 <prvvMBPUSART1_RXNE_ISR+0xd0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	2201      	movs	r2, #1
 800c92c:	4013      	ands	r3, r2
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d106      	bne.n	800c940 <prvvMBPUSART1_RXNE_ISR+0x7c>
    {
        fs |= 8;
 800c932:	220f      	movs	r2, #15
 800c934:	18bb      	adds	r3, r7, r2
 800c936:	18ba      	adds	r2, r7, r2
 800c938:	7812      	ldrb	r2, [r2, #0]
 800c93a:	2108      	movs	r1, #8
 800c93c:	430a      	orrs	r2, r1
 800c93e:	701a      	strb	r2, [r3, #0]
    }

    /* Receive byte from USART1 */
		
		ubUDR = (0xFF & (USART1->RDR));
 800c940:	4b15      	ldr	r3, [pc, #84]	; (800c998 <prvvMBPUSART1_RXNE_ISR+0xd4>)
 800c942:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c944:	b29b      	uxth	r3, r3
 800c946:	b2da      	uxtb	r2, r3
 800c948:	1dfb      	adds	r3, r7, #7
 800c94a:	701a      	strb	r2, [r3, #0]

    /* Send data to modbus functions
     * if no error */
    if( fs == RESET )
 800c94c:	230f      	movs	r3, #15
 800c94e:	18fb      	adds	r3, r7, r3
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d111      	bne.n	800c97a <prvvMBPUSART1_RXNE_ISR+0xb6>
    {
        /* Pass received data on to modbuslib */
        MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 800c956:	4b11      	ldr	r3, [pc, #68]	; (800c99c <prvvMBPUSART1_RXNE_ISR+0xd8>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2bff      	cmp	r3, #255	; 0xff
 800c95c:	d101      	bne.n	800c962 <prvvMBPUSART1_RXNE_ISR+0x9e>
 800c95e:	f7ff fd11 	bl	800c384 <vMBPAssert>
        if( NULL != xSerialHdls[UART_1_IDX].pvMBMReceiveFN )
 800c962:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <prvvMBPUSART1_RXNE_ISR+0xd8>)
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d007      	beq.n	800c97a <prvvMBPUSART1_RXNE_ISR+0xb6>
        {
            xSerialHdls[UART_1_IDX].pvMBMReceiveFN( xSerialHdls[UART_1_IDX].xMBMHdl, ubUDR );
 800c96a:	4b0c      	ldr	r3, [pc, #48]	; (800c99c <prvvMBPUSART1_RXNE_ISR+0xd8>)
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	4b0b      	ldr	r3, [pc, #44]	; (800c99c <prvvMBPUSART1_RXNE_ISR+0xd8>)
 800c970:	68d8      	ldr	r0, [r3, #12]
 800c972:	1dfb      	adds	r3, r7, #7
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	0019      	movs	r1, r3
 800c978:	4790      	blx	r2
        }
    }
	x=sizeof(ubUDR);
 800c97a:	2301      	movs	r3, #1
 800c97c:	60bb      	str	r3, [r7, #8]
HAL_UART_Receive_IT(&huart1, &ubUDR,sizeof(ubUDR));
 800c97e:	1df9      	adds	r1, r7, #7
 800c980:	4b04      	ldr	r3, [pc, #16]	; (800c994 <prvvMBPUSART1_RXNE_ISR+0xd0>)
 800c982:	2201      	movs	r2, #1
 800c984:	0018      	movs	r0, r3
 800c986:	f7f7 ffbd 	bl	8004904 <HAL_UART_Receive_IT>
		//	HAL_UART_Receive_DMA(&huart1, &ubUDR, 5);
		//__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
		
}
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	46bd      	mov	sp, r7
 800c98e:	b004      	add	sp, #16
 800c990:	bd80      	pop	{r7, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	200000f8 	.word	0x200000f8
 800c998:	40013800 	.word	0x40013800
 800c99c:	20004fbc 	.word	0x20004fbc

0800c9a0 <eMBPTimerInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPTimerInit( xMBPTimerHandle * xTimerHdl, USHORT usTimeOut1ms,
               pbMBPTimerExpiredCB pbMBPTimerExpiredFN, xMBHandle xHdl )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	607a      	str	r2, [r7, #4]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	230a      	movs	r3, #10
 800c9ae:	18fb      	adds	r3, r7, r3
 800c9b0:	1c0a      	adds	r2, r1, #0
 800c9b2:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EPORTERR;
 800c9b4:	2317      	movs	r3, #23
 800c9b6:	18fb      	adds	r3, r7, r3
 800c9b8:	2203      	movs	r2, #3
 800c9ba:	701a      	strb	r2, [r3, #0]
    UBYTE           ubIdx;


    MBP_ENTER_CRITICAL_SECTION(  );
 800c9bc:	f7ff fcf5 	bl	800c3aa <vMBPEnterCritical>
    if( ( NULL != xTimerHdl ) && ( NULL != pbMBPTimerExpiredFN ) && ( MB_HDL_INVALID != xHdl ) )
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d100      	bne.n	800c9c8 <eMBPTimerInit+0x28>
 800c9c6:	e0ac      	b.n	800cb22 <eMBPTimerInit+0x182>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d100      	bne.n	800c9d0 <eMBPTimerInit+0x30>
 800c9ce:	e0a8      	b.n	800cb22 <eMBPTimerInit+0x182>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d100      	bne.n	800c9d8 <eMBPTimerInit+0x38>
 800c9d6:	e0a4      	b.n	800cb22 <eMBPTimerInit+0x182>
    {
        if( !bIsInitalized )
 800c9d8:	4b58      	ldr	r3, [pc, #352]	; (800cb3c <eMBPTimerInit+0x19c>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d145      	bne.n	800ca6c <eMBPTimerInit+0xcc>
        {
            /* Initialize a hardware timer for 1 millisecond. */
						//MX_TIM16_Init();
						xTimer = xTimerCreate( "MB1msTimer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_MB_TIMER, HandleTimer );
 800c9e0:	4857      	ldr	r0, [pc, #348]	; (800cb40 <eMBPTimerInit+0x1a0>)
 800c9e2:	4b58      	ldr	r3, [pc, #352]	; (800cb44 <eMBPTimerInit+0x1a4>)
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	23ff      	movs	r3, #255	; 0xff
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	f7fb f8e8 	bl	8007bc0 <xTimerCreate>
 800c9f0:	0002      	movs	r2, r0
 800c9f2:	4b55      	ldr	r3, [pc, #340]	; (800cb48 <eMBPTimerInit+0x1a8>)
 800c9f4:	601a      	str	r2, [r3, #0]

            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800c9f6:	2316      	movs	r3, #22
 800c9f8:	18fb      	adds	r3, r7, r3
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	e02d      	b.n	800ca5c <eMBPTimerInit+0xbc>
            {
                RESET_HDL( &arxTimerHdls[ubIdx] );
 800ca00:	2016      	movs	r0, #22
 800ca02:	183b      	adds	r3, r7, r0
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	4b51      	ldr	r3, [pc, #324]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca08:	0112      	lsls	r2, r2, #4
 800ca0a:	21ff      	movs	r1, #255	; 0xff
 800ca0c:	54d1      	strb	r1, [r2, r3]
 800ca0e:	0001      	movs	r1, r0
 800ca10:	187b      	adds	r3, r7, r1
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	4a4d      	ldr	r2, [pc, #308]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca16:	011b      	lsls	r3, r3, #4
 800ca18:	18d3      	adds	r3, r2, r3
 800ca1a:	3302      	adds	r3, #2
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	801a      	strh	r2, [r3, #0]
 800ca20:	187b      	adds	r3, r7, r1
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	4a49      	ldr	r2, [pc, #292]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	18d3      	adds	r3, r2, r3
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4252      	negs	r2, r2
 800ca30:	801a      	strh	r2, [r3, #0]
 800ca32:	187b      	adds	r3, r7, r1
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	4a45      	ldr	r2, [pc, #276]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	18d3      	adds	r3, r2, r3
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	187b      	adds	r3, r7, r1
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	4a41      	ldr	r2, [pc, #260]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	18d3      	adds	r3, r2, r3
 800ca4c:	330c      	adds	r3, #12
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800ca52:	187b      	adds	r3, r7, r1
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	187b      	adds	r3, r7, r1
 800ca58:	3201      	adds	r2, #1
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	2316      	movs	r3, #22
 800ca5e:	18fb      	adds	r3, r7, r3
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d9cc      	bls.n	800ca00 <eMBPTimerInit+0x60>
            }

            bIsInitalized = TRUE;
 800ca66:	4b35      	ldr	r3, [pc, #212]	; (800cb3c <eMBPTimerInit+0x19c>)
 800ca68:	2201      	movs	r2, #1
 800ca6a:	701a      	strb	r2, [r3, #0]

        }
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800ca6c:	2316      	movs	r3, #22
 800ca6e:	18fb      	adds	r3, r7, r3
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e00c      	b.n	800ca90 <eMBPTimerInit+0xf0>
        {
            if( IDX_INVALID == arxTimerHdls[ubIdx].ubIdx )
 800ca76:	2116      	movs	r1, #22
 800ca78:	187b      	adds	r3, r7, r1
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	4b33      	ldr	r3, [pc, #204]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800ca7e:	0112      	lsls	r2, r2, #4
 800ca80:	5cd3      	ldrb	r3, [r2, r3]
 800ca82:	2bff      	cmp	r3, #255	; 0xff
 800ca84:	d00a      	beq.n	800ca9c <eMBPTimerInit+0xfc>
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800ca86:	187b      	adds	r3, r7, r1
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	187b      	adds	r3, r7, r1
 800ca8c:	3201      	adds	r2, #1
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	2316      	movs	r3, #22
 800ca92:	18fb      	adds	r3, r7, r3
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d9ed      	bls.n	800ca76 <eMBPTimerInit+0xd6>
 800ca9a:	e000      	b.n	800ca9e <eMBPTimerInit+0xfe>
            {
                break;
 800ca9c:	46c0      	nop			; (mov r8, r8)
            }
        }
        if( MAX_TIMER_HDLS != ubIdx )
 800ca9e:	2116      	movs	r1, #22
 800caa0:	187b      	adds	r3, r7, r1
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b05      	cmp	r3, #5
 800caa6:	d037      	beq.n	800cb18 <eMBPTimerInit+0x178>
        {
            arxTimerHdls[ubIdx].ubIdx = ubIdx;
 800caa8:	187b      	adds	r3, r7, r1
 800caaa:	781a      	ldrb	r2, [r3, #0]
 800caac:	4b27      	ldr	r3, [pc, #156]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800caae:	0112      	lsls	r2, r2, #4
 800cab0:	0008      	movs	r0, r1
 800cab2:	1879      	adds	r1, r7, r1
 800cab4:	7809      	ldrb	r1, [r1, #0]
 800cab6:	54d1      	strb	r1, [r2, r3]
            arxTimerHdls[ubIdx].usNTimeOutMS = usTimeOut1ms;
 800cab8:	0001      	movs	r1, r0
 800caba:	187b      	adds	r3, r7, r1
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4a23      	ldr	r2, [pc, #140]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800cac0:	011b      	lsls	r3, r3, #4
 800cac2:	18d3      	adds	r3, r2, r3
 800cac4:	3302      	adds	r3, #2
 800cac6:	220a      	movs	r2, #10
 800cac8:	18ba      	adds	r2, r7, r2
 800caca:	8812      	ldrh	r2, [r2, #0]
 800cacc:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800cace:	187b      	adds	r3, r7, r1
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	4a1e      	ldr	r2, [pc, #120]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	18d3      	adds	r3, r2, r3
 800cad8:	3304      	adds	r3, #4
 800cada:	2201      	movs	r2, #1
 800cadc:	4252      	negs	r2, r2
 800cade:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].xMBMHdl = xHdl;
 800cae0:	187b      	adds	r3, r7, r1
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	4a19      	ldr	r2, [pc, #100]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	18d3      	adds	r3, r2, r3
 800caea:	3308      	adds	r3, #8
 800caec:	683a      	ldr	r2, [r7, #0]
 800caee:	601a      	str	r2, [r3, #0]
            arxTimerHdls[ubIdx].pbMBPTimerExpiredFN = pbMBPTimerExpiredFN;
 800caf0:	187b      	adds	r3, r7, r1
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4a15      	ldr	r2, [pc, #84]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	18d3      	adds	r3, r2, r3
 800cafa:	330c      	adds	r3, #12
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	601a      	str	r2, [r3, #0]

            *xTimerHdl = &arxTimerHdls[ubIdx];
 800cb00:	187b      	adds	r3, r7, r1
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	011a      	lsls	r2, r3, #4
 800cb06:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <eMBPTimerInit+0x1ac>)
 800cb08:	18d2      	adds	r2, r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	601a      	str	r2, [r3, #0]

            eStatus = MB_ENOERR;
 800cb0e:	2317      	movs	r3, #23
 800cb10:	18fb      	adds	r3, r7, r3
 800cb12:	2200      	movs	r2, #0
 800cb14:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 800cb16:	e008      	b.n	800cb2a <eMBPTimerInit+0x18a>
        }
        else
        {
            eStatus = MB_ENORES;
 800cb18:	2317      	movs	r3, #23
 800cb1a:	18fb      	adds	r3, r7, r3
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 800cb20:	e003      	b.n	800cb2a <eMBPTimerInit+0x18a>
        }
    }
    else
    {
        eStatus = MB_EINVAL;
 800cb22:	2317      	movs	r3, #23
 800cb24:	18fb      	adds	r3, r7, r3
 800cb26:	2202      	movs	r2, #2
 800cb28:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800cb2a:	f7ff fc45 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800cb2e:	2317      	movs	r3, #23
 800cb30:	18fb      	adds	r3, r7, r3
 800cb32:	781b      	ldrb	r3, [r3, #0]
}
 800cb34:	0018      	movs	r0, r3
 800cb36:	46bd      	mov	sp, r7
 800cb38:	b006      	add	sp, #24
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20005020 	.word	0x20005020
 800cb40:	0800d0c8 	.word	0x0800d0c8
 800cb44:	0800cced 	.word	0x0800cced
 800cb48:	20005024 	.word	0x20005024
 800cb4c:	20004fd0 	.word	0x20004fd0

0800cb50 <vMBPTimerClose>:

void
vMBPTimerClose( xMBPTimerHandle xTimerHdl )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60fb      	str	r3, [r7, #12]

    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d017      	beq.n	800cb92 <vMBPTimerClose+0x42>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	011a      	lsls	r2, r3, #4
 800cb68:	4b0c      	ldr	r3, [pc, #48]	; (800cb9c <vMBPTimerClose+0x4c>)
 800cb6a:	18d3      	adds	r3, r2, r3
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d10f      	bne.n	800cb92 <vMBPTimerClose+0x42>
    {
        RESET_HDL( pxTimerIntHdl );
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	805a      	strh	r2, [r3, #2]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2201      	movs	r2, #1
 800cb82:	4252      	negs	r2, r2
 800cb84:	809a      	strh	r2, [r3, #4]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	609a      	str	r2, [r3, #8]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	60da      	str	r2, [r3, #12]
    }
}
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	46bd      	mov	sp, r7
 800cb96:	b004      	add	sp, #16
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	20004fd0 	.word	0x20004fd0

0800cba0 <eMBPTimerSetTimeout>:

eMBErrorCode
eMBPTimerSetTimeout( xMBPTimerHandle xTimerHdl, USHORT usTimeOut1ms )
{
 800cba0:	b590      	push	{r4, r7, lr}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	000a      	movs	r2, r1
 800cbaa:	1cbb      	adds	r3, r7, #2
 800cbac:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800cbae:	240f      	movs	r4, #15
 800cbb0:	193b      	adds	r3, r7, r4
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800cbba:	f7ff fbf6 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) &&
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d017      	beq.n	800cbf4 <eMBPTimerSetTimeout+0x54>
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	011a      	lsls	r2, r3, #4
 800cbca:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <eMBPTimerSetTimeout+0x68>)
 800cbcc:	18d3      	adds	r3, r2, r3
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d10f      	bne.n	800cbf4 <eMBPTimerSetTimeout+0x54>
 800cbd4:	1cbb      	adds	r3, r7, #2
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00b      	beq.n	800cbf4 <eMBPTimerSetTimeout+0x54>
        ( usTimeOut1ms > 0 ) && ( usTimeOut1ms != TIMER_TIMEOUT_INVALID ) )
 800cbdc:	1cbb      	adds	r3, r7, #2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <eMBPTimerSetTimeout+0x6c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d006      	beq.n	800cbf4 <eMBPTimerSetTimeout+0x54>
    {

        pxTimerIntHdl->usNTimeOutMS = usTimeOut1ms;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	1cba      	adds	r2, r7, #2
 800cbea:	8812      	ldrh	r2, [r2, #0]
 800cbec:	805a      	strh	r2, [r3, #2]
        eStatus = MB_ENOERR;
 800cbee:	193b      	adds	r3, r7, r4
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800cbf4:	f7ff fbe0 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800cbf8:	230f      	movs	r3, #15
 800cbfa:	18fb      	adds	r3, r7, r3
 800cbfc:	781b      	ldrb	r3, [r3, #0]
}
 800cbfe:	0018      	movs	r0, r3
 800cc00:	46bd      	mov	sp, r7
 800cc02:	b005      	add	sp, #20
 800cc04:	bd90      	pop	{r4, r7, pc}
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	20004fd0 	.word	0x20004fd0
 800cc0c:	0000ffff 	.word	0x0000ffff

0800cc10 <eMBPTimerStart>:

eMBErrorCode
eMBPTimerStart( xMBPTimerHandle xTimerHdl )
{
 800cc10:	b5b0      	push	{r4, r5, r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800cc18:	250f      	movs	r5, #15
 800cc1a:	197b      	adds	r3, r7, r5
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800cc24:	f7ff fbc1 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d01b      	beq.n	800cc66 <eMBPTimerStart+0x56>
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	011a      	lsls	r2, r3, #4
 800cc34:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <eMBPTimerStart+0x68>)
 800cc36:	18d3      	adds	r3, r2, r3
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d113      	bne.n	800cc66 <eMBPTimerStart+0x56>
    {
				xTimerStart( xTimer, portMAX_DELAY );
 800cc3e:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <eMBPTimerStart+0x6c>)
 800cc40:	681c      	ldr	r4, [r3, #0]
 800cc42:	f7fa fbe1 	bl	8007408 <xTaskGetTickCount>
 800cc46:	0002      	movs	r2, r0
 800cc48:	2301      	movs	r3, #1
 800cc4a:	425b      	negs	r3, r3
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2101      	movs	r1, #1
 800cc52:	0020      	movs	r0, r4
 800cc54:	f7fa fffc 	bl	8007c50 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = pxTimerIntHdl->usNTimeOutMS;
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	885a      	ldrh	r2, [r3, #2]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 800cc60:	197b      	adds	r3, r7, r5
 800cc62:	2200      	movs	r2, #0
 800cc64:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800cc66:	f7ff fba7 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800cc6a:	230f      	movs	r3, #15
 800cc6c:	18fb      	adds	r3, r7, r3
 800cc6e:	781b      	ldrb	r3, [r3, #0]
}
 800cc70:	0018      	movs	r0, r3
 800cc72:	46bd      	mov	sp, r7
 800cc74:	b004      	add	sp, #16
 800cc76:	bdb0      	pop	{r4, r5, r7, pc}
 800cc78:	20004fd0 	.word	0x20004fd0
 800cc7c:	20005024 	.word	0x20005024

0800cc80 <eMBPTimerStop>:

eMBErrorCode
eMBPTimerStop( xMBPTimerHandle xTimerHdl )
{
 800cc80:	b590      	push	{r4, r7, lr}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800cc88:	240f      	movs	r4, #15
 800cc8a:	193b      	adds	r3, r7, r4
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800cc94:	f7ff fb89 	bl	800c3aa <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d018      	beq.n	800ccd0 <eMBPTimerStop+0x50>
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	011a      	lsls	r2, r3, #4
 800cca4:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <eMBPTimerStop+0x64>)
 800cca6:	18d3      	adds	r3, r2, r3
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d110      	bne.n	800ccd0 <eMBPTimerStop+0x50>
    {
				xTimerStop( xTimer, portMAX_DELAY );
 800ccae:	4b0e      	ldr	r3, [pc, #56]	; (800cce8 <eMBPTimerStop+0x68>)
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2200      	movs	r2, #0
 800ccbc:	2103      	movs	r1, #3
 800ccbe:	f7fa ffc7 	bl	8007c50 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	4252      	negs	r2, r2
 800ccc8:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 800ccca:	193b      	adds	r3, r7, r4
 800cccc:	2200      	movs	r2, #0
 800ccce:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800ccd0:	f7ff fb72 	bl	800c3b8 <vMBPExitCritical>
    return eStatus;
 800ccd4:	230f      	movs	r3, #15
 800ccd6:	18fb      	adds	r3, r7, r3
 800ccd8:	781b      	ldrb	r3, [r3, #0]
}
 800ccda:	0018      	movs	r0, r3
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	b005      	add	sp, #20
 800cce0:	bd90      	pop	{r4, r7, pc}
 800cce2:	46c0      	nop			; (mov r8, r8)
 800cce4:	20004fd0 	.word	0x20004fd0
 800cce8:	20005024 	.word	0x20005024

0800ccec <HandleTimer>:

/*timer callback function
*/
static void HandleTimer(TimerHandle_t xTimer)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
		UBYTE           ubIdx;
	uint32_t Timer_ID = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	60bb      	str	r3, [r7, #8]

#if MBP_DEBUG_TIMER_PERFORMANCE == 1
    STATIC BOOL     bLastState = FALSE;
#endif
  /* Get Timer ID */
  Timer_ID = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f7fb fa18 	bl	8008130 <pvTimerGetTimerID>
 800cd00:	0003      	movs	r3, r0
 800cd02:	60bb      	str	r3, [r7, #8]
  if (TIMERID_MB_TIMER == Timer_ID)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2bff      	cmp	r3, #255	; 0xff
 800cd08:	d152      	bne.n	800cdb0 <HandleTimer+0xc4>
  {
#if MBP_DEBUG_TIMER_PERFORMANCE == 1
        vMBPSetDebugPin( MBP_DEBUGPIN_0, bLastState );
        bLastState = !bLastState;
#endif
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800cd0a:	230f      	movs	r3, #15
 800cd0c:	18fb      	adds	r3, r7, r3
 800cd0e:	2200      	movs	r2, #0
 800cd10:	701a      	strb	r2, [r3, #0]
 800cd12:	e048      	b.n	800cda6 <HandleTimer+0xba>
        {
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800cd14:	200f      	movs	r0, #15
 800cd16:	183b      	adds	r3, r7, r0
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	4b27      	ldr	r3, [pc, #156]	; (800cdb8 <HandleTimer+0xcc>)
 800cd1c:	0112      	lsls	r2, r2, #4
 800cd1e:	5cd3      	ldrb	r3, [r2, r3]
 800cd20:	2bff      	cmp	r3, #255	; 0xff
 800cd22:	d03a      	beq.n	800cd9a <HandleTimer+0xae>
                ( TIMER_TIMEOUT_INVALID != arxTimerHdls[ubIdx].usNTimeLeft ) )
 800cd24:	183b      	adds	r3, r7, r0
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	4a23      	ldr	r2, [pc, #140]	; (800cdb8 <HandleTimer+0xcc>)
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	18d3      	adds	r3, r2, r3
 800cd2e:	3304      	adds	r3, #4
 800cd30:	881b      	ldrh	r3, [r3, #0]
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800cd32:	4a22      	ldr	r2, [pc, #136]	; (800cdbc <HandleTimer+0xd0>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d030      	beq.n	800cd9a <HandleTimer+0xae>
            {
                arxTimerHdls[ubIdx].usNTimeLeft--;
 800cd38:	183b      	adds	r3, r7, r0
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	491e      	ldr	r1, [pc, #120]	; (800cdb8 <HandleTimer+0xcc>)
 800cd3e:	011a      	lsls	r2, r3, #4
 800cd40:	188a      	adds	r2, r1, r2
 800cd42:	3204      	adds	r2, #4
 800cd44:	8812      	ldrh	r2, [r2, #0]
 800cd46:	3a01      	subs	r2, #1
 800cd48:	b291      	uxth	r1, r2
 800cd4a:	4a1b      	ldr	r2, [pc, #108]	; (800cdb8 <HandleTimer+0xcc>)
 800cd4c:	011b      	lsls	r3, r3, #4
 800cd4e:	18d3      	adds	r3, r2, r3
 800cd50:	3304      	adds	r3, #4
 800cd52:	1c0a      	adds	r2, r1, #0
 800cd54:	801a      	strh	r2, [r3, #0]
                if( 0 == arxTimerHdls[ubIdx].usNTimeLeft )
 800cd56:	183b      	adds	r3, r7, r0
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	4a17      	ldr	r2, [pc, #92]	; (800cdb8 <HandleTimer+0xcc>)
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	18d3      	adds	r3, r2, r3
 800cd60:	3304      	adds	r3, #4
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d118      	bne.n	800cd9a <HandleTimer+0xae>
                {
                    arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800cd68:	183b      	adds	r3, r7, r0
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	4a12      	ldr	r2, [pc, #72]	; (800cdb8 <HandleTimer+0xcc>)
 800cd6e:	011b      	lsls	r3, r3, #4
 800cd70:	18d3      	adds	r3, r2, r3
 800cd72:	3304      	adds	r3, #4
 800cd74:	2201      	movs	r2, #1
 800cd76:	4252      	negs	r2, r2
 800cd78:	801a      	strh	r2, [r3, #0]
                    ( void )arxTimerHdls[ubIdx].pbMBPTimerExpiredFN( arxTimerHdls[ubIdx].xMBMHdl );
 800cd7a:	183b      	adds	r3, r7, r0
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	4a0e      	ldr	r2, [pc, #56]	; (800cdb8 <HandleTimer+0xcc>)
 800cd80:	011b      	lsls	r3, r3, #4
 800cd82:	18d3      	adds	r3, r2, r3
 800cd84:	330c      	adds	r3, #12
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	183b      	adds	r3, r7, r0
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	490a      	ldr	r1, [pc, #40]	; (800cdb8 <HandleTimer+0xcc>)
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	18cb      	adds	r3, r1, r3
 800cd92:	3308      	adds	r3, #8
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	0018      	movs	r0, r3
 800cd98:	4790      	blx	r2
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800cd9a:	210f      	movs	r1, #15
 800cd9c:	187b      	adds	r3, r7, r1
 800cd9e:	781a      	ldrb	r2, [r3, #0]
 800cda0:	187b      	adds	r3, r7, r1
 800cda2:	3201      	adds	r2, #1
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	230f      	movs	r3, #15
 800cda8:	18fb      	adds	r3, r7, r3
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d9b1      	bls.n	800cd14 <HandleTimer+0x28>
                }
            }
        }
  }
}
 800cdb0:	46c0      	nop			; (mov r8, r8)
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b004      	add	sp, #16
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	20004fd0 	.word	0x20004fd0
 800cdbc:	0000ffff 	.word	0x0000ffff

0800cdc0 <eMBExceptionToErrorcode>:
    return eException;
}

eMBErrorCode
eMBExceptionToErrorcode( UBYTE eMBPDUException )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	0002      	movs	r2, r0
 800cdc8:	1dfb      	adds	r3, r7, #7
 800cdca:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EIO;
 800cdcc:	230f      	movs	r3, #15
 800cdce:	18fb      	adds	r3, r7, r3
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	701a      	strb	r2, [r3, #0]

    switch ( eMBPDUException )
 800cdd4:	1dfb      	adds	r3, r7, #7
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b0b      	cmp	r3, #11
 800cdda:	d831      	bhi.n	800ce40 <eMBExceptionToErrorcode+0x80>
 800cddc:	009a      	lsls	r2, r3, #2
 800cdde:	4b1c      	ldr	r3, [pc, #112]	; (800ce50 <eMBExceptionToErrorcode+0x90>)
 800cde0:	18d3      	adds	r3, r2, r3
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	469f      	mov	pc, r3
    {
    case MB_PDU_EX_ILLEGAL_FUNCTION:
        eStatus = MB_EX_ILLEGAL_FUNCTION;
 800cde6:	230f      	movs	r3, #15
 800cde8:	18fb      	adds	r3, r7, r3
 800cdea:	220a      	movs	r2, #10
 800cdec:	701a      	strb	r2, [r3, #0]
        break;
 800cdee:	e028      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_ADDRESS:
        eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800cdf0:	230f      	movs	r3, #15
 800cdf2:	18fb      	adds	r3, r7, r3
 800cdf4:	220b      	movs	r2, #11
 800cdf6:	701a      	strb	r2, [r3, #0]
        break;
 800cdf8:	e023      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_VALUE:
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800cdfa:	230f      	movs	r3, #15
 800cdfc:	18fb      	adds	r3, r7, r3
 800cdfe:	220c      	movs	r2, #12
 800ce00:	701a      	strb	r2, [r3, #0]
        break;
 800ce02:	e01e      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_DEVICE_FAILURE:
        eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800ce04:	230f      	movs	r3, #15
 800ce06:	18fb      	adds	r3, r7, r3
 800ce08:	220d      	movs	r2, #13
 800ce0a:	701a      	strb	r2, [r3, #0]
        break;
 800ce0c:	e019      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ACKNOWLEDGE:
        eStatus = MB_EX_ACKNOWLEDGE;
 800ce0e:	230f      	movs	r3, #15
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	220e      	movs	r2, #14
 800ce14:	701a      	strb	r2, [r3, #0]
        break;
 800ce16:	e014      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_BUSY:
        eStatus = MB_EX_SLAVE_BUSY;
 800ce18:	230f      	movs	r3, #15
 800ce1a:	18fb      	adds	r3, r7, r3
 800ce1c:	220f      	movs	r2, #15
 800ce1e:	701a      	strb	r2, [r3, #0]
        break;
 800ce20:	e00f      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_MEMORY_PARITY_ERROR:
        eStatus = MB_EX_MEMORY_PARITY_ERROR;
 800ce22:	230f      	movs	r3, #15
 800ce24:	18fb      	adds	r3, r7, r3
 800ce26:	2210      	movs	r2, #16
 800ce28:	701a      	strb	r2, [r3, #0]
        break;
 800ce2a:	e00a      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_PATH_UNAVAILABLE:
        eStatus = MB_EX_GATEWAY_PATH_UNAVAILABLE;
 800ce2c:	230f      	movs	r3, #15
 800ce2e:	18fb      	adds	r3, r7, r3
 800ce30:	2211      	movs	r2, #17
 800ce32:	701a      	strb	r2, [r3, #0]
        break;
 800ce34:	e005      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_TARGET_FAILED:
        eStatus = MB_EX_GATEWAY_TARGET_FAILED;
 800ce36:	230f      	movs	r3, #15
 800ce38:	18fb      	adds	r3, r7, r3
 800ce3a:	2212      	movs	r2, #18
 800ce3c:	701a      	strb	r2, [r3, #0]
        break;
 800ce3e:	e000      	b.n	800ce42 <eMBExceptionToErrorcode+0x82>
    default:
        break;
 800ce40:	46c0      	nop			; (mov r8, r8)
    }
    return eStatus;
 800ce42:	230f      	movs	r3, #15
 800ce44:	18fb      	adds	r3, r7, r3
 800ce46:	781b      	ldrb	r3, [r3, #0]
}
 800ce48:	0018      	movs	r0, r3
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b004      	add	sp, #16
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	0800d368 	.word	0x0800d368

0800ce54 <memset>:
 800ce54:	0003      	movs	r3, r0
 800ce56:	1882      	adds	r2, r0, r2
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d100      	bne.n	800ce5e <memset+0xa>
 800ce5c:	4770      	bx	lr
 800ce5e:	7019      	strb	r1, [r3, #0]
 800ce60:	3301      	adds	r3, #1
 800ce62:	e7f9      	b.n	800ce58 <memset+0x4>

0800ce64 <_reclaim_reent>:
 800ce64:	4b2d      	ldr	r3, [pc, #180]	; (800cf1c <_reclaim_reent+0xb8>)
 800ce66:	b570      	push	{r4, r5, r6, lr}
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	0004      	movs	r4, r0
 800ce6c:	4283      	cmp	r3, r0
 800ce6e:	d042      	beq.n	800cef6 <_reclaim_reent+0x92>
 800ce70:	69c3      	ldr	r3, [r0, #28]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <_reclaim_reent+0x28>
 800ce76:	2500      	movs	r5, #0
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	42ab      	cmp	r3, r5
 800ce7c:	d140      	bne.n	800cf00 <_reclaim_reent+0x9c>
 800ce7e:	69e3      	ldr	r3, [r4, #28]
 800ce80:	6819      	ldr	r1, [r3, #0]
 800ce82:	2900      	cmp	r1, #0
 800ce84:	d002      	beq.n	800ce8c <_reclaim_reent+0x28>
 800ce86:	0020      	movs	r0, r4
 800ce88:	f000 f87a 	bl	800cf80 <_free_r>
 800ce8c:	6961      	ldr	r1, [r4, #20]
 800ce8e:	2900      	cmp	r1, #0
 800ce90:	d002      	beq.n	800ce98 <_reclaim_reent+0x34>
 800ce92:	0020      	movs	r0, r4
 800ce94:	f000 f874 	bl	800cf80 <_free_r>
 800ce98:	69e1      	ldr	r1, [r4, #28]
 800ce9a:	2900      	cmp	r1, #0
 800ce9c:	d002      	beq.n	800cea4 <_reclaim_reent+0x40>
 800ce9e:	0020      	movs	r0, r4
 800cea0:	f000 f86e 	bl	800cf80 <_free_r>
 800cea4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cea6:	2900      	cmp	r1, #0
 800cea8:	d002      	beq.n	800ceb0 <_reclaim_reent+0x4c>
 800ceaa:	0020      	movs	r0, r4
 800ceac:	f000 f868 	bl	800cf80 <_free_r>
 800ceb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceb2:	2900      	cmp	r1, #0
 800ceb4:	d002      	beq.n	800cebc <_reclaim_reent+0x58>
 800ceb6:	0020      	movs	r0, r4
 800ceb8:	f000 f862 	bl	800cf80 <_free_r>
 800cebc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cebe:	2900      	cmp	r1, #0
 800cec0:	d002      	beq.n	800cec8 <_reclaim_reent+0x64>
 800cec2:	0020      	movs	r0, r4
 800cec4:	f000 f85c 	bl	800cf80 <_free_r>
 800cec8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ceca:	2900      	cmp	r1, #0
 800cecc:	d002      	beq.n	800ced4 <_reclaim_reent+0x70>
 800cece:	0020      	movs	r0, r4
 800ced0:	f000 f856 	bl	800cf80 <_free_r>
 800ced4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d002      	beq.n	800cee0 <_reclaim_reent+0x7c>
 800ceda:	0020      	movs	r0, r4
 800cedc:	f000 f850 	bl	800cf80 <_free_r>
 800cee0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cee2:	2900      	cmp	r1, #0
 800cee4:	d002      	beq.n	800ceec <_reclaim_reent+0x88>
 800cee6:	0020      	movs	r0, r4
 800cee8:	f000 f84a 	bl	800cf80 <_free_r>
 800ceec:	6a23      	ldr	r3, [r4, #32]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <_reclaim_reent+0x92>
 800cef2:	0020      	movs	r0, r4
 800cef4:	4798      	blx	r3
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	5949      	ldr	r1, [r1, r5]
 800cefa:	2900      	cmp	r1, #0
 800cefc:	d108      	bne.n	800cf10 <_reclaim_reent+0xac>
 800cefe:	3504      	adds	r5, #4
 800cf00:	69e3      	ldr	r3, [r4, #28]
 800cf02:	68d9      	ldr	r1, [r3, #12]
 800cf04:	2d80      	cmp	r5, #128	; 0x80
 800cf06:	d1f7      	bne.n	800cef8 <_reclaim_reent+0x94>
 800cf08:	0020      	movs	r0, r4
 800cf0a:	f000 f839 	bl	800cf80 <_free_r>
 800cf0e:	e7b6      	b.n	800ce7e <_reclaim_reent+0x1a>
 800cf10:	680e      	ldr	r6, [r1, #0]
 800cf12:	0020      	movs	r0, r4
 800cf14:	f000 f834 	bl	800cf80 <_free_r>
 800cf18:	0031      	movs	r1, r6
 800cf1a:	e7ee      	b.n	800cefa <_reclaim_reent+0x96>
 800cf1c:	20000064 	.word	0x20000064

0800cf20 <__libc_init_array>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	2600      	movs	r6, #0
 800cf24:	4c0c      	ldr	r4, [pc, #48]	; (800cf58 <__libc_init_array+0x38>)
 800cf26:	4d0d      	ldr	r5, [pc, #52]	; (800cf5c <__libc_init_array+0x3c>)
 800cf28:	1b64      	subs	r4, r4, r5
 800cf2a:	10a4      	asrs	r4, r4, #2
 800cf2c:	42a6      	cmp	r6, r4
 800cf2e:	d109      	bne.n	800cf44 <__libc_init_array+0x24>
 800cf30:	2600      	movs	r6, #0
 800cf32:	f000 f87f 	bl	800d034 <_init>
 800cf36:	4c0a      	ldr	r4, [pc, #40]	; (800cf60 <__libc_init_array+0x40>)
 800cf38:	4d0a      	ldr	r5, [pc, #40]	; (800cf64 <__libc_init_array+0x44>)
 800cf3a:	1b64      	subs	r4, r4, r5
 800cf3c:	10a4      	asrs	r4, r4, #2
 800cf3e:	42a6      	cmp	r6, r4
 800cf40:	d105      	bne.n	800cf4e <__libc_init_array+0x2e>
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	00b3      	lsls	r3, r6, #2
 800cf46:	58eb      	ldr	r3, [r5, r3]
 800cf48:	4798      	blx	r3
 800cf4a:	3601      	adds	r6, #1
 800cf4c:	e7ee      	b.n	800cf2c <__libc_init_array+0xc>
 800cf4e:	00b3      	lsls	r3, r6, #2
 800cf50:	58eb      	ldr	r3, [r5, r3]
 800cf52:	4798      	blx	r3
 800cf54:	3601      	adds	r6, #1
 800cf56:	e7f2      	b.n	800cf3e <__libc_init_array+0x1e>
 800cf58:	0800d398 	.word	0x0800d398
 800cf5c:	0800d398 	.word	0x0800d398
 800cf60:	0800d39c 	.word	0x0800d39c
 800cf64:	0800d398 	.word	0x0800d398

0800cf68 <__retarget_lock_acquire_recursive>:
 800cf68:	4770      	bx	lr

0800cf6a <__retarget_lock_release_recursive>:
 800cf6a:	4770      	bx	lr

0800cf6c <memcpy>:
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	b510      	push	{r4, lr}
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d100      	bne.n	800cf76 <memcpy+0xa>
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	5ccc      	ldrb	r4, [r1, r3]
 800cf78:	54c4      	strb	r4, [r0, r3]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	e7f8      	b.n	800cf70 <memcpy+0x4>
	...

0800cf80 <_free_r>:
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	0005      	movs	r5, r0
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d010      	beq.n	800cfaa <_free_r+0x2a>
 800cf88:	1f0c      	subs	r4, r1, #4
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	da00      	bge.n	800cf92 <_free_r+0x12>
 800cf90:	18e4      	adds	r4, r4, r3
 800cf92:	0028      	movs	r0, r5
 800cf94:	f000 f83e 	bl	800d014 <__malloc_lock>
 800cf98:	4a1d      	ldr	r2, [pc, #116]	; (800d010 <_free_r+0x90>)
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d105      	bne.n	800cfac <_free_r+0x2c>
 800cfa0:	6063      	str	r3, [r4, #4]
 800cfa2:	6014      	str	r4, [r2, #0]
 800cfa4:	0028      	movs	r0, r5
 800cfa6:	f000 f83d 	bl	800d024 <__malloc_unlock>
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	d908      	bls.n	800cfc2 <_free_r+0x42>
 800cfb0:	6820      	ldr	r0, [r4, #0]
 800cfb2:	1821      	adds	r1, r4, r0
 800cfb4:	428b      	cmp	r3, r1
 800cfb6:	d1f3      	bne.n	800cfa0 <_free_r+0x20>
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	1809      	adds	r1, r1, r0
 800cfbe:	6021      	str	r1, [r4, #0]
 800cfc0:	e7ee      	b.n	800cfa0 <_free_r+0x20>
 800cfc2:	001a      	movs	r2, r3
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <_free_r+0x4e>
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	d9f9      	bls.n	800cfc2 <_free_r+0x42>
 800cfce:	6811      	ldr	r1, [r2, #0]
 800cfd0:	1850      	adds	r0, r2, r1
 800cfd2:	42a0      	cmp	r0, r4
 800cfd4:	d10b      	bne.n	800cfee <_free_r+0x6e>
 800cfd6:	6820      	ldr	r0, [r4, #0]
 800cfd8:	1809      	adds	r1, r1, r0
 800cfda:	1850      	adds	r0, r2, r1
 800cfdc:	6011      	str	r1, [r2, #0]
 800cfde:	4283      	cmp	r3, r0
 800cfe0:	d1e0      	bne.n	800cfa4 <_free_r+0x24>
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	1841      	adds	r1, r0, r1
 800cfe8:	6011      	str	r1, [r2, #0]
 800cfea:	6053      	str	r3, [r2, #4]
 800cfec:	e7da      	b.n	800cfa4 <_free_r+0x24>
 800cfee:	42a0      	cmp	r0, r4
 800cff0:	d902      	bls.n	800cff8 <_free_r+0x78>
 800cff2:	230c      	movs	r3, #12
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	e7d5      	b.n	800cfa4 <_free_r+0x24>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	1821      	adds	r1, r4, r0
 800cffc:	428b      	cmp	r3, r1
 800cffe:	d103      	bne.n	800d008 <_free_r+0x88>
 800d000:	6819      	ldr	r1, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	1809      	adds	r1, r1, r0
 800d006:	6021      	str	r1, [r4, #0]
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	6054      	str	r4, [r2, #4]
 800d00c:	e7ca      	b.n	800cfa4 <_free_r+0x24>
 800d00e:	46c0      	nop			; (mov r8, r8)
 800d010:	20005164 	.word	0x20005164

0800d014 <__malloc_lock>:
 800d014:	b510      	push	{r4, lr}
 800d016:	4802      	ldr	r0, [pc, #8]	; (800d020 <__malloc_lock+0xc>)
 800d018:	f7ff ffa6 	bl	800cf68 <__retarget_lock_acquire_recursive>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	46c0      	nop			; (mov r8, r8)
 800d020:	20005160 	.word	0x20005160

0800d024 <__malloc_unlock>:
 800d024:	b510      	push	{r4, lr}
 800d026:	4802      	ldr	r0, [pc, #8]	; (800d030 <__malloc_unlock+0xc>)
 800d028:	f7ff ff9f 	bl	800cf6a <__retarget_lock_release_recursive>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	46c0      	nop			; (mov r8, r8)
 800d030:	20005160 	.word	0x20005160

0800d034 <_init>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	46c0      	nop			; (mov r8, r8)
 800d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03a:	bc08      	pop	{r3}
 800d03c:	469e      	mov	lr, r3
 800d03e:	4770      	bx	lr

0800d040 <_fini>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d046:	bc08      	pop	{r3}
 800d048:	469e      	mov	lr, r3
 800d04a:	4770      	bx	lr
