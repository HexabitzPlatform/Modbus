
Modbus_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc8  08005dc8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005dc8  08005dc8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dc8  08005dc8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d4  20000060  08005e2c  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004534  08005e2c  00024534  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165d5  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042fe  00000000  00000000  0003669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f6  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffa7  00000000  00000000  0003d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f019  00000000  00000000  0005d04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2d8f  00000000  00000000  0007c066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f6c  00000000  00000000  0012edf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00133d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005cdc 	.word	0x08005cdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08005cdc 	.word	0x08005cdc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2203      	movs	r2, #3
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fc70 	bl	8000b30 <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 f958 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	2000007c 	.word	0x2000007c
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MX_DMA_Init+0x70>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MX_DMA_Init+0x70>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_DMA_Init+0x70>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_DMA_Init+0x70>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_DMA_Init+0x70>)
 80002c8:	2102      	movs	r1, #2
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_DMA_Init+0x70>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	2202      	movs	r2, #2
 80002d4:	4013      	ands	r3, r2
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	2009      	movs	r0, #9
 80002e0:	f000 fc00 	bl	8000ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002e4:	2009      	movs	r0, #9
 80002e6:	f000 fc12 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2103      	movs	r1, #3
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fbf8 	bl	8000ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 fc0a 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	200b      	movs	r0, #11
 8000300:	f000 fbf0 	bl	8000ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000304:	200b      	movs	r0, #11
 8000306:	f000 fc02 	bl	8000b0e <HAL_NVIC_EnableIRQ>

}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_FREERTOS_Init+0x2c>)
 8000322:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000324:	c313      	stmia	r3!, {r0, r1, r4}
 8000326:	ca03      	ldmia	r2!, {r0, r1}
 8000328:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f003 fa1b 	bl	800376a <osThreadCreate>
 8000334:	0002      	movs	r2, r0
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <MX_FREERTOS_Init+0x30>)
 8000338:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b007      	add	sp, #28
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	08005d00 	.word	0x08005d00
 8000348:	200000a0 	.word	0x200000a0

0800034c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	240c      	movs	r4, #12
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	2314      	movs	r3, #20
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f005 fbcd 	bl	8005afc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0289      	lsls	r1, r1, #10
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	029b      	lsls	r3, r3, #10
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	02c9      	lsls	r1, r1, #11
 8000388:	430a      	orrs	r2, r1
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x8c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	02db      	lsls	r3, r3, #11
 8000394:	4013      	ands	r3, r2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <MX_GPIO_Init+0x90>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	0019      	movs	r1, r3
 80003a4:	f001 f91c 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	01d2      	lsls	r2, r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2201      	movs	r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <MX_GPIO_Init+0x90>)
 80003c6:	0019      	movs	r1, r3
 80003c8:	0010      	movs	r0, r2
 80003ca:	f000 ff91 	bl	80012f0 <HAL_GPIO_Init>

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b009      	add	sp, #36	; 0x24
 80003d4:	bd90      	pop	{r4, r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000400 	.word	0x48000400

080003e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003e4:	f000 fac6 	bl	8000974 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003e8:	f000 f814 	bl	8000414 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* Peripherals Init */
	MX_GPIO_Init();
 80003ec:	f7ff ffae 	bl	800034c <MX_GPIO_Init>
	MX_DMA_Init();
 80003f0:	f7ff ff58 	bl	80002a4 <MX_DMA_Init>
	MX_CRC_Init();
 80003f4:	f7ff ff14 	bl	8000220 <MX_CRC_Init>
	MX_USART1_UART_Init();
 80003f8:	f000 f98c 	bl	8000714 <MX_USART1_UART_Init>
	Modbus_task_Init();
 80003fc:	f005 fb20 	bl	8005a40 <Modbus_task_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000400:	f7ff ff8a 	bl	8000318 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000404:	f003 f9a9 	bl	800375a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000408:	e7fe      	b.n	8000408 <main+0x28>

0800040a <StartDefaultTask>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void StartDefaultTask(void const *argument) {
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;) {
 8000412:	e7fe      	b.n	8000412 <StartDefaultTask+0x8>

08000414 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b099      	sub	sp, #100	; 0x64
 8000418:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800041a:	242c      	movs	r4, #44	; 0x2c
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2334      	movs	r3, #52	; 0x34
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f005 fb69 	bl	8005afc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800042a:	231c      	movs	r3, #28
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0018      	movs	r0, r3
 8000430:	2310      	movs	r3, #16
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f005 fb61 	bl	8005afc <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800043a:	003b      	movs	r3, r7
 800043c:	0018      	movs	r0, r3
 800043e:	231c      	movs	r3, #28
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f005 fb5a 	bl	8005afc <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000448:	0021      	movs	r1, r4
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2220      	movs	r2, #32
 800044e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2201      	movs	r2, #1
 8000454:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	22c0      	movs	r2, #192	; 0xc0
 8000460:	0252      	lsls	r2, r2, #9
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	22e0      	movs	r2, #224	; 0xe0
 8000468:	0392      	lsls	r2, r2, #14
 800046a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	220f      	movs	r2, #15
 8000470:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000472:	187b      	adds	r3, r7, r1
 8000474:	0018      	movs	r0, r3
 8000476:	f001 f903 	bl	8001680 <HAL_RCC_OscConfig>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6e>
		Error_Handler();
 800047e:	f000 f843 	bl	8000508 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000482:	211c      	movs	r1, #28
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2207      	movs	r2, #7
 8000488:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2202      	movs	r2, #2
 800048e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2101      	movs	r1, #1
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fc73 	bl	8001d8c <HAL_RCC_ClockConfig>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x9a>
		Error_Handler();
 80004aa:	f000 f82d 	bl	8000508 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80004ae:	003b      	movs	r3, r7
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <SystemClock_Config+0xcc>)
 80004b2:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004c6:	003b      	movs	r3, r7
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 fdf5 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xc2>
		Error_Handler();
 80004d2:	f000 f819 	bl	8000508 <Error_Handler>
	}
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b019      	add	sp, #100	; 0x64
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	00040003 	.word	0x00040003

080004e4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004f6:	f000 fa51 	bl	800099c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40014400 	.word	0x40014400

08000508 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <HAL_MspInit+0x80>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <HAL_MspInit+0x80>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	619a      	str	r2, [r3, #24]
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_MspInit+0x80>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_MspInit+0x80>)
 8000534:	69da      	ldr	r2, [r3, #28]
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <HAL_MspInit+0x80>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0549      	lsls	r1, r1, #21
 800053c:	430a      	orrs	r2, r1
 800053e:	61da      	str	r2, [r3, #28]
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <HAL_MspInit+0x80>)
 8000542:	69da      	ldr	r2, [r3, #28]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	055b      	lsls	r3, r3, #21
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800054e:	2302      	movs	r3, #2
 8000550:	425b      	negs	r3, r3
 8000552:	2200      	movs	r2, #0
 8000554:	2103      	movs	r1, #3
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fac4 	bl	8000ae4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2103      	movs	r1, #3
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fabf 	bl	8000ae4 <HAL_NVIC_SetPriority>
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fad1 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2103      	movs	r1, #3
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fab7 	bl	8000ae4 <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000576:	2003      	movs	r0, #3
 8000578:	f000 fac9 	bl	8000b0e <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2103      	movs	r1, #3
 8000580:	2004      	movs	r0, #4
 8000582:	f000 faaf 	bl	8000ae4 <HAL_NVIC_SetPriority>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000586:	2004      	movs	r0, #4
 8000588:	f000 fac1 	bl	8000b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	0019      	movs	r1, r3
 80005ae:	2015      	movs	r0, #21
 80005b0:	f000 fa98 	bl	8000ae4 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005b4:	2015      	movs	r0, #21
 80005b6:	f000 faaa 	bl	8000b0e <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <HAL_InitTick+0xa8>)
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <HAL_InitTick+0xa8>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	619a      	str	r2, [r3, #24]
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <HAL_InitTick+0xa8>)
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	029b      	lsls	r3, r3, #10
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005d6:	230c      	movs	r3, #12
 80005d8:	18fa      	adds	r2, r7, r3
 80005da:	2310      	movs	r3, #16
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fd3f 	bl	8002064 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005e6:	f001 fd27 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 80005ea:	0003      	movs	r3, r0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	4914      	ldr	r1, [pc, #80]	; (8000644 <HAL_InitTick+0xac>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff fd88 	bl	8000108 <__udivsi3>
 80005f8:	0003      	movs	r3, r0
 80005fa:	3b01      	subs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0xb0>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <HAL_InitTick+0xb4>)
 8000602:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_InitTick+0xb0>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <HAL_InitTick+0xb8>)
 8000608:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_InitTick+0xb0>)
 800060c:	6a3a      	ldr	r2, [r7, #32]
 800060e:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_InitTick+0xb0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_InitTick+0xb0>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_InitTick+0xb0>)
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fe4a 	bl	80022b8 <HAL_TIM_Base_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d105      	bne.n	8000634 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_InitTick+0xb0>)
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fe9c 	bl	8002368 <HAL_TIM_Base_Start_IT>
 8000630:	0003      	movs	r3, r0
 8000632:	e000      	b.n	8000636 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000634:	2301      	movs	r3, #1
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b00a      	add	sp, #40	; 0x28
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000
 8000644:	000f4240 	.word	0x000f4240
 8000648:	200000a4 	.word	0x200000a4
 800064c:	40014400 	.word	0x40014400
 8000650:	000003e7 	.word	0x000003e7

08000654 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <PVD_VDDIO2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
 */
void PVD_VDDIO2_IRQHandler(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

	/* USER CODE END PVD_VDDIO2_IRQn 0 */
	HAL_PWR_PVD_IRQHandler();
 8000668:	f000 ffd8 	bl	800161c <HAL_PWR_PVD_IRQHandler>
	HAL_PWREx_Vddio2Monitor_IRQHandler();
 800066c:	f000 fff0 	bl	8001650 <HAL_PWREx_Vddio2Monitor_IRQHandler>
	/* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

	/* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <FLASH_IRQHandler>:

/**
 * @brief This function handles Flash global interrupt.
 */
void FLASH_IRQHandler(void) {
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FLASH_IRQn 0 */

	/* USER CODE END FLASH_IRQn 0 */
	HAL_FLASH_IRQHandler();
 800067a:	f000 fcd7 	bl	800102c <HAL_FLASH_IRQHandler>
	/* USER CODE BEGIN FLASH_IRQn 1 */

	/* USER CODE END FLASH_IRQn 1 */
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <RCC_CRS_IRQHandler>:

/**
 * @brief This function handles RCC and CRS global interrupts.
 */
void RCC_CRS_IRQHandler(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	/* USER CODE END RCC_CRS_IRQn 0 */
	/* USER CODE BEGIN RCC_CRS_IRQn 1 */

	/* USER CODE END RCC_CRS_IRQn 1 */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <DMA1_Ch1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Ch1_IRQHandler(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
	/* USER CODE END DMA1_Ch1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <DMA1_Ch1_IRQHandler+0x14>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fbeb 	bl	8000e72 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
	/* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000174 	.word	0x20000174

080006a8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
 */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

	/* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fbdf 	bl	8000e72 <HAL_DMA_IRQHandler>

	/* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

	/* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200001b8 	.word	0x200001b8

080006c0 <TIM16_IRQHandler>:

/**
 * @brief This function handles TIM16 global interrupt.
 */
void TIM16_IRQHandler(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_IRQn 0 */

	/* USER CODE END TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim16);
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <TIM16_IRQHandler+0x14>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fea0 	bl	800240c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM16_IRQn 1 */

	/* USER CODE END TIM16_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	200000a4 	.word	0x200000a4

080006d8 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <USART1_IRQHandler+0x28>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 f857 	bl	8002798 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <USART1_IRQHandler+0x20>
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <USART1_IRQHandler+0x2c>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0552      	lsls	r2, r2, #21
 80006f6:	601a      	str	r2, [r3, #0]
	/* USER CODE END USART1_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000ec 	.word	0x200000ec
 8000704:	e000ed04 	.word	0xe000ed04

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_USART1_UART_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_USART1_UART_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000720:	2296      	movs	r2, #150	; 0x96
 8000722:	0192      	lsls	r2, r2, #6
 8000724:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_USART1_UART_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_USART1_UART_Init+0x64>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART1_UART_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000752:	2210      	movs	r2, #16
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0152      	lsls	r2, r2, #5
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_USART1_UART_Init+0x64>)
 8000760:	2300      	movs	r3, #0
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	f002 ff67 	bl	8003638 <HAL_RS485Ex_Init>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x5e>
		Error_Handler();
 800076e:	f7ff fecb 	bl	8000508 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000ec 	.word	0x200000ec
 800077c:	40013800 	.word	0x40013800

08000780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000788:	2414      	movs	r4, #20
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	2314      	movs	r3, #20
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f005 f9b2 	bl	8005afc <memset>
	if (uartHandle->Instance == USART1) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a59      	ldr	r2, [pc, #356]	; (8000904 <HAL_UART_MspInit+0x184>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d000      	beq.n	80007a4 <HAL_UART_MspInit+0x24>
 80007a2:	e0ab      	b.n	80008fc <HAL_UART_MspInit+0x17c>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80007a4:	4b58      	ldr	r3, [pc, #352]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	4b57      	ldr	r3, [pc, #348]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	01c9      	lsls	r1, r1, #7
 80007ae:	430a      	orrs	r2, r1
 80007b0:	619a      	str	r2, [r3, #24]
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	01db      	lsls	r3, r3, #7
 80007ba:	4013      	ands	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b51      	ldr	r3, [pc, #324]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	4b50      	ldr	r3, [pc, #320]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0289      	lsls	r1, r1, #10
 80007ca:	430a      	orrs	r2, r1
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <HAL_UART_MspInit+0x188>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	029b      	lsls	r3, r3, #10
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 PA12     ------> USART1_DE
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	22b0      	movs	r2, #176	; 0xb0
 80007e0:	0152      	lsls	r2, r2, #5
 80007e2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	0021      	movs	r1, r4
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2202      	movs	r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2203      	movs	r2, #3
 80007f6:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2201      	movs	r2, #1
 80007fc:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	187a      	adds	r2, r7, r1
 8000800:	2390      	movs	r3, #144	; 0x90
 8000802:	05db      	lsls	r3, r3, #23
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fd72 	bl	80012f0 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_RX Init */
		hdma_usart1_rx.Instance = DMA1_Channel1;
 800080c:	4b3f      	ldr	r3, [pc, #252]	; (800090c <HAL_UART_MspInit+0x18c>)
 800080e:	4a40      	ldr	r2, [pc, #256]	; (8000910 <HAL_UART_MspInit+0x190>)
 8000810:	601a      	str	r2, [r3, #0]
		hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
		hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <HAL_UART_MspInit+0x18c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
		hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	60da      	str	r2, [r3, #12]
		hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	611a      	str	r2, [r3, #16]
		hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <HAL_UART_MspInit+0x18c>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	615a      	str	r2, [r3, #20]
		hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000836:	2220      	movs	r2, #32
 8000838:	619a      	str	r2, [r3, #24]
		hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <HAL_UART_MspInit+0x18c>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8000840:	4b32      	ldr	r3, [pc, #200]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fa50 	bl	8000ce8 <HAL_DMA_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0xd0>
			Error_Handler();
 800084c:	f7ff fe5c 	bl	8000508 <Error_Handler>
		}

		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000850:	4a30      	ldr	r2, [pc, #192]	; (8000914 <HAL_UART_MspInit+0x194>)
 8000852:	23a8      	movs	r3, #168	; 0xa8
 8000854:	58d3      	ldr	r3, [r2, r3]
 8000856:	492f      	ldr	r1, [pc, #188]	; (8000914 <HAL_UART_MspInit+0x194>)
 8000858:	220f      	movs	r2, #15
 800085a:	4393      	bics	r3, r2
 800085c:	22a8      	movs	r2, #168	; 0xa8
 800085e:	508b      	str	r3, [r1, r2]
 8000860:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <HAL_UART_MspInit+0x194>)
 8000862:	23a8      	movs	r3, #168	; 0xa8
 8000864:	58d3      	ldr	r3, [r2, r3]
 8000866:	492b      	ldr	r1, [pc, #172]	; (8000914 <HAL_UART_MspInit+0x194>)
 8000868:	2208      	movs	r2, #8
 800086a:	4313      	orrs	r3, r2
 800086c:	22a8      	movs	r2, #168	; 0xa8
 800086e:	508b      	str	r3, [r1, r2]

		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a26      	ldr	r2, [pc, #152]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000874:	675a      	str	r2, [r3, #116]	; 0x74
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <HAL_UART_MspInit+0x18c>)
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	625a      	str	r2, [r3, #36]	; 0x24

		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Channel2;
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <HAL_UART_MspInit+0x198>)
 800087e:	4a27      	ldr	r2, [pc, #156]	; (800091c <HAL_UART_MspInit+0x19c>)
 8000880:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <HAL_UART_MspInit+0x198>)
 8000884:	2210      	movs	r2, #16
 8000886:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <HAL_UART_MspInit+0x198>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <HAL_UART_MspInit+0x198>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <HAL_UART_MspInit+0x198>)
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	0092      	lsls	r2, r2, #2
 800089a:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <HAL_UART_MspInit+0x198>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0x198>)
 80008a6:	2220      	movs	r2, #32
 80008a8:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <HAL_UART_MspInit+0x198>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x198>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fa18 	bl	8000ce8 <HAL_DMA_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_UART_MspInit+0x140>
			Error_Handler();
 80008bc:	f7ff fe24 	bl	8000508 <Error_Handler>
		}

		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_UART_MspInit+0x194>)
 80008c2:	23a8      	movs	r3, #168	; 0xa8
 80008c4:	58d3      	ldr	r3, [r2, r3]
 80008c6:	4913      	ldr	r1, [pc, #76]	; (8000914 <HAL_UART_MspInit+0x194>)
 80008c8:	22f0      	movs	r2, #240	; 0xf0
 80008ca:	4393      	bics	r3, r2
 80008cc:	22a8      	movs	r2, #168	; 0xa8
 80008ce:	508b      	str	r3, [r1, r2]
 80008d0:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x194>)
 80008d2:	23a8      	movs	r3, #168	; 0xa8
 80008d4:	58d3      	ldr	r3, [r2, r3]
 80008d6:	490f      	ldr	r1, [pc, #60]	; (8000914 <HAL_UART_MspInit+0x194>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	4313      	orrs	r3, r2
 80008dc:	22a8      	movs	r2, #168	; 0xa8
 80008de:	508b      	str	r3, [r1, r2]

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_UART_MspInit+0x198>)
 80008e4:	671a      	str	r2, [r3, #112]	; 0x70
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_UART_MspInit+0x198>)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2103      	movs	r1, #3
 80008f0:	201b      	movs	r0, #27
 80008f2:	f000 f8f7 	bl	8000ae4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f6:	201b      	movs	r0, #27
 80008f8:	f000 f909 	bl	8000b0e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00b      	add	sp, #44	; 0x2c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000
 800090c:	20000174 	.word	0x20000174
 8000910:	40020008 	.word	0x40020008
 8000914:	40020000 	.word	0x40020000
 8000918:	200001b8 	.word	0x200001b8
 800091c:	4002001c 	.word	0x4002001c

08000920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000922:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000924:	f7ff fef0 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094e:	f005 f93b 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fd45 	bl	80003e0 <main>

08000956 <LoopForever>:

LoopForever:
    b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   r0, =_estack
 8000958:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000964:	08005dd0 	.word	0x08005dd0
  ldr r2, =_sbss
 8000968:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800096c:	20004534 	.word	0x20004534

08000970 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_COMP_IRQHandler>
	...

08000974 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_Init+0x24>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_Init+0x24>)
 800097e:	2110      	movs	r1, #16
 8000980:	430a      	orrs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000984:	2003      	movs	r0, #3
 8000986:	f7ff fe07 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098a:	f7ff fdc3 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	18d2      	adds	r2, r2, r3
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000004 	.word	0x20000004
 80009bc:	200001fc 	.word	0x200001fc

080009c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	200001fc 	.word	0x200001fc

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b7f      	cmp	r3, #127	; 0x7f
 80009e6:	d809      	bhi.n	80009fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	231f      	movs	r3, #31
 80009f0:	401a      	ands	r2, r3
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_EnableIRQ+0x30>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	4091      	lsls	r1, r2
 80009f8:	000a      	movs	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
  }
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a1c:	d828      	bhi.n	8000a70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <__NVIC_SetPriority+0xd4>)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	33c0      	adds	r3, #192	; 0xc0
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	589b      	ldr	r3, [r3, r2]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	481f      	ldr	r0, [pc, #124]	; (8000adc <__NVIC_SetPriority+0xd4>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	33c0      	adds	r3, #192	; 0xc0
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6e:	e031      	b.n	8000ad4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0019      	movs	r1, r3
 8000a78:	230f      	movs	r3, #15
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3306      	adds	r3, #6
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1dfa      	adds	r2, r7, #7
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	400a      	ands	r2, r1
 8000a94:	00d2      	lsls	r2, r2, #3
 8000a96:	21ff      	movs	r1, #255	; 0xff
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	43d2      	mvns	r2, r2
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	001c      	movs	r4, r3
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	3306      	adds	r3, #6
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18c3      	adds	r3, r0, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b003      	add	sp, #12
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	210f      	movs	r1, #15
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	1c02      	adds	r2, r0, #0
 8000af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff ff81 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b004      	add	sp, #16
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	0002      	movs	r2, r0
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ff57 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e056      	b.n	8000bf0 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7f5b      	ldrb	r3, [r3, #29]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fb87 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10c      	bne.n	8000b82 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_CRC_Init+0xc8>)
 8000b6e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2118      	movs	r1, #24
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	e00b      	b.n	8000b9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6899      	ldr	r1, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 f835 	bl	8000bfc <HAL_CRCEx_Polynomial_Set>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e02a      	b.n	8000bf0 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	795b      	ldrb	r3, [r3, #5]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4252      	negs	r2, r2
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	e004      	b.n	8000bb8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6912      	ldr	r2, [r2, #16]
 8000bb6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2260      	movs	r2, #96	; 0x60
 8000bc0:	4393      	bics	r3, r2
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	4393      	bics	r3, r2
 8000bda:	0019      	movs	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699a      	ldr	r2, [r3, #24]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	04c11db7 	.word	0x04c11db7

08000bfc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	2117      	movs	r1, #23
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000c10:	231f      	movs	r3, #31
 8000c12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d103      	bne.n	8000c24 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e045      	b.n	8000cb0 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	613a      	str	r2, [r7, #16]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <HAL_CRCEx_Polynomial_Set+0x46>
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	221f      	movs	r2, #31
 8000c34:	4013      	ands	r3, r2
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	40da      	lsrs	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d0f1      	beq.n	8000c26 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b18      	cmp	r3, #24
 8000c46:	d00f      	beq.n	8000c68 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b18      	cmp	r3, #24
 8000c4c:	d824      	bhi.n	8000c98 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b10      	cmp	r3, #16
 8000c52:	d011      	beq.n	8000c78 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b10      	cmp	r3, #16
 8000c58:	d81e      	bhi.n	8000c98 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d020      	beq.n	8000ca2 <HAL_CRCEx_Polynomial_Set+0xa6>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d010      	beq.n	8000c88 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000c66:	e017      	b.n	8000c98 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d91b      	bls.n	8000ca6 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8000c6e:	2317      	movs	r3, #23
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000c76:	e016      	b.n	8000ca6 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d915      	bls.n	8000caa <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8000c7e:	2317      	movs	r3, #23
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000c86:	e010      	b.n	8000caa <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d90f      	bls.n	8000cae <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8000c8e:	2317      	movs	r3, #23
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000c96:	e00a      	b.n	8000cae <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000c98:	2317      	movs	r3, #23
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
        break;
 8000ca0:	e006      	b.n	8000cb0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	e004      	b.n	8000cb0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	e002      	b.n	8000cb0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	e000      	b.n	8000cb0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000cae:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8000cb0:	2317      	movs	r3, #23
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10e      	bne.n	8000cd8 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2218      	movs	r2, #24
 8000cca:	4393      	bics	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000cd8:	2317      	movs	r3, #23
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e036      	b.n	8000d6c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2221      	movs	r2, #33	; 0x21
 8000d02:	2102      	movs	r1, #2
 8000d04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_DMA_Init+0x8c>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f932 	bl	8000fb8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2221      	movs	r2, #33	; 0x21
 8000d5e:	2101      	movs	r1, #1
 8000d60:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b004      	add	sp, #16
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	ffffc00f 	.word	0xffffc00f

08000d78 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2221      	movs	r2, #33	; 0x21
 8000d84:	5c9b      	ldrb	r3, [r3, r2]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d008      	beq.n	8000d9e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2204      	movs	r2, #4
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2220      	movs	r2, #32
 8000d96:	2100      	movs	r1, #0
 8000d98:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e020      	b.n	8000de0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	210e      	movs	r1, #14
 8000daa:	438a      	bics	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	438a      	bics	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2221      	movs	r2, #33	; 0x21
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df0:	210f      	movs	r1, #15
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2221      	movs	r2, #33	; 0x21
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d006      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2204      	movs	r2, #4
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e028      	b.n	8000e64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	210e      	movs	r1, #14
 8000e1e:	438a      	bics	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	438a      	bics	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	000a      	movs	r2, r1
 8000e40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	2101      	movs	r1, #1
 8000e48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2100      	movs	r1, #0
 8000e50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d004      	beq.n	8000e64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	0010      	movs	r0, r2
 8000e62:	4798      	blx	r3
    }
  }
  return status;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2204      	movs	r2, #4
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	d024      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x72>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d020      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d107      	bne.n	8000ebe <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2104      	movs	r1, #4
 8000eba:	438a      	bics	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_DMA_IRQHandler+0x66>
 8000ed6:	e06a      	b.n	8000fae <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	0010      	movs	r0, r2
 8000ee0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ee2:	e064      	b.n	8000fae <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	2202      	movs	r2, #2
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d02b      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xda>
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d027      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2220      	movs	r2, #32
 8000f04:	4013      	ands	r3, r2
 8000f06:	d10b      	bne.n	8000f20 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	210a      	movs	r1, #10
 8000f14:	438a      	bics	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2221      	movs	r2, #33	; 0x21
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d036      	beq.n	8000fae <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	0010      	movs	r0, r2
 8000f48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f4a:	e030      	b.n	8000fae <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	2208      	movs	r2, #8
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d028      	beq.n	8000fae <HAL_DMA_IRQHandler+0x13c>
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2208      	movs	r2, #8
 8000f60:	4013      	ands	r3, r2
 8000f62:	d024      	beq.n	8000fae <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	210e      	movs	r1, #14
 8000f70:	438a      	bics	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	000a      	movs	r2, r1
 8000f82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2221      	movs	r2, #33	; 0x21
 8000f8e:	2101      	movs	r1, #1
 8000f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2220      	movs	r2, #32
 8000f96:	2100      	movs	r1, #0
 8000f98:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	0010      	movs	r0, r2
 8000faa:	4798      	blx	r3
    }
  }
}
 8000fac:	e7ff      	b.n	8000fae <HAL_DMA_IRQHandler+0x13c>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <DMA_CalcBaseAndBitshift+0x60>)
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d810      	bhi.n	8000fee <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <DMA_CalcBaseAndBitshift+0x64>)
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	4463      	add	r3, ip
 8000fd6:	2114      	movs	r1, #20
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff f895 	bl	8000108 <__udivsi3>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	009a      	lsls	r2, r3, #2
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <DMA_CalcBaseAndBitshift+0x68>)
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000fec:	e00f      	b.n	800100e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <DMA_CalcBaseAndBitshift+0x6c>)
 8000ff4:	4694      	mov	ip, r2
 8000ff6:	4463      	add	r3, ip
 8000ff8:	2114      	movs	r1, #20
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f884 	bl	8000108 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	009a      	lsls	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <DMA_CalcBaseAndBitshift+0x70>)
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40020407 	.word	0x40020407
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	40020000 	.word	0x40020000
 8001024:	bffdfbf8 	.word	0xbffdfbf8
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2210      	movs	r2, #16
 800103c:	4013      	ands	r3, r2
 800103e:	2b10      	cmp	r3, #16
 8001040:	d005      	beq.n	800104e <HAL_FLASH_IRQHandler+0x22>
 8001042:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	2b04      	cmp	r3, #4
 800104c:	d10f      	bne.n	800106e <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800104e:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001054:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001056:	2201      	movs	r2, #1
 8001058:	4252      	negs	r2, r2
 800105a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800105c:	f000 f8fa 	bl	8001254 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f8d2 	bl	800120c <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001068:	4b62      	ldr	r3, [pc, #392]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2220      	movs	r2, #32
 8001074:	4013      	ands	r3, r2
 8001076:	2b20      	cmp	r3, #32
 8001078:	d000      	beq.n	800107c <HAL_FLASH_IRQHandler+0x50>
 800107a:	e0a1      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800107c:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 800107e:	2220      	movs	r2, #32
 8001080:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001082:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <HAL_FLASH_IRQHandler+0x62>
 800108c:	e098      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800108e:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d132      	bne.n	80010fe <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001098:	4b56      	ldr	r3, [pc, #344]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010a0:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01b      	beq.n	80010e2 <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 80010aa:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 f8a2 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	4694      	mov	ip, r2
 80010c2:	4463      	add	r3, ip
 80010c4:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010cc:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80010d2:	2102      	movs	r1, #2
 80010d4:	438a      	bics	r2, r1
 80010d6:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f8ea 	bl	80012b4 <FLASH_PageErase>
 80010e0:	e06e      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f880 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>
 80010fc:	e060      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d10c      	bne.n	8001122 <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 800110e:	2104      	movs	r1, #4
 8001110:	438a      	bics	r2, r1
 8001112:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f871 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e04e      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800112a:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d021      	beq.n	8001178 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	1c9a      	adds	r2, r3, #2
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800113c:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	0419      	lsls	r1, r3, #16
 800114c:	0c14      	lsrs	r4, r2, #16
 800114e:	430c      	orrs	r4, r1
 8001150:	0c1d      	lsrs	r5, r3, #16
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001154:	611c      	str	r4, [r3, #16]
 8001156:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	b292      	uxth	r2, r2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f000 f853 	bl	800121c <FLASH_Program_HalfWord>
 8001176:	e023      	b.n	80011c0 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b03      	cmp	r3, #3
 8001180:	d105      	bne.n	800118e <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	0018      	movs	r0, r3
 8001188:	f000 f838 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>
 800118c:	e011      	b.n	80011b2 <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b04      	cmp	r3, #4
 8001196:	d106      	bne.n	80011a6 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	3b02      	subs	r3, #2
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f82c 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>
 80011a4:	e005      	b.n	80011b2 <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	3b06      	subs	r3, #6
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 f825 	bl	80011fc <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	4252      	negs	r2, r2
 80011b8:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10e      	bne.n	80011e8 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80011d0:	2107      	movs	r1, #7
 80011d2:	438a      	bics	r2, r1
 80011d4:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_FLASH_IRQHandler+0x1c4>)
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <HAL_FLASH_IRQHandler+0x1cc>)
 80011de:	400a      	ands	r2, r1
 80011e0:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_FLASH_IRQHandler+0x1c8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	761a      	strb	r2, [r3, #24]
  }
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bdb0      	pop	{r4, r5, r7, pc}
 80011f0:	40022000 	.word	0x40022000
 80011f4:	20000200 	.word	0x20000200
 80011f8:	ffffebff 	.word	0xffffebff

080011fc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	000a      	movs	r2, r1
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <FLASH_Program_HalfWord+0x30>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <FLASH_Program_HalfWord+0x34>)
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <FLASH_Program_HalfWord+0x34>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1cba      	adds	r2, r7, #2
 8001240:	8812      	ldrh	r2, [r2, #0]
 8001242:	801a      	strh	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000200 	.word	0x20000200
 8001250:	40022000 	.word	0x40022000

08001254 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <FLASH_SetErrorCode+0x58>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2210      	movs	r2, #16
 8001264:	4013      	ands	r3, r2
 8001266:	2b10      	cmp	r3, #16
 8001268:	d109      	bne.n	800127e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <FLASH_SetErrorCode+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2202      	movs	r2, #2
 8001270:	431a      	orrs	r2, r3
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <FLASH_SetErrorCode+0x5c>)
 8001274:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2210      	movs	r2, #16
 800127a:	4313      	orrs	r3, r2
 800127c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <FLASH_SetErrorCode+0x58>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	2b04      	cmp	r3, #4
 8001288:	d109      	bne.n	800129e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <FLASH_SetErrorCode+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2201      	movs	r2, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <FLASH_SetErrorCode+0x5c>)
 8001294:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2204      	movs	r2, #4
 800129a:	4313      	orrs	r3, r2
 800129c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <FLASH_SetErrorCode+0x58>)
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	60da      	str	r2, [r3, #12]
}  
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40022000 	.word	0x40022000
 80012b0:	20000200 	.word	0x20000200

080012b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <FLASH_PageErase+0x34>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <FLASH_PageErase+0x38>)
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <FLASH_PageErase+0x38>)
 80012c8:	2102      	movs	r1, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <FLASH_PageErase+0x38>)
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <FLASH_PageErase+0x38>)
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <FLASH_PageErase+0x38>)
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	430a      	orrs	r2, r1
 80012de:	611a      	str	r2, [r3, #16]
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000200 	.word	0x20000200
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	e155      	b.n	80015ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <HAL_GPIO_Init+0x28>
 8001316:	e146      	b.n	80015a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	2201      	movs	r2, #1
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	58d3      	ldr	r3, [r2, r3]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4013      	ands	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2107      	movs	r1, #7
 8001406:	400b      	ands	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	6939      	ldr	r1, [r7, #16]
 8001420:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	401a      	ands	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_GPIO_Init+0x174>
 8001462:	e0a0      	b.n	80015a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 800146a:	2101      	movs	r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_GPIO_Init+0x2d8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	589b      	ldr	r3, [r3, r2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x1ee>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1ea>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1e6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1de>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014de:	2300      	movs	r3, #0
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	2103      	movs	r1, #3
 80014e4:	400a      	ands	r2, r1
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2d8>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	035b      	lsls	r3, r3, #13
 8001516:	4013      	ands	r3, r2
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43da      	mvns	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	4013      	ands	r3, r2
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	40da      	lsrs	r2, r3
 80015b4:	1e13      	subs	r3, r2, #0
 80015b6:	d000      	beq.n	80015ba <HAL_GPIO_Init+0x2ca>
 80015b8:	e6a2      	b.n	8001300 <HAL_GPIO_Init+0x10>
  } 
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b006      	add	sp, #24
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48001000 	.word	0x48001000
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	0008      	movs	r0, r1
 80015ea:	0011      	movs	r1, r2
 80015ec:	1cbb      	adds	r3, r7, #2
 80015ee:	1c02      	adds	r2, r0, #0
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	1c7b      	adds	r3, r7, #1
 80015f4:	1c0a      	adds	r2, r1, #0
 80015f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f8:	1c7b      	adds	r3, r7, #1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001600:	1cbb      	adds	r3, r7, #2
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	1cbb      	adds	r3, r7, #2
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d005      	beq.n	8001638 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800162c:	f000 f80a 	bl	8001644 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	0252      	lsls	r2, r2, #9
 8001636:	615a      	str	r2, [r3, #20]
  }
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da05      	bge.n	8001668 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 800165c:	f000 f80a 	bl	8001674 <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	0612      	lsls	r2, r2, #24
 8001666:	615a      	str	r2, [r3, #20]
  }
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f000 fb76 	bl	8001d80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	d100      	bne.n	80016a0 <HAL_RCC_OscConfig+0x20>
 800169e:	e08e      	b.n	80017be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016a0:	4bc5      	ldr	r3, [pc, #788]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	220c      	movs	r2, #12
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00e      	beq.n	80016ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4bc2      	ldr	r3, [pc, #776]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	220c      	movs	r2, #12
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d117      	bne.n	80016e8 <HAL_RCC_OscConfig+0x68>
 80016b8:	4bbf      	ldr	r3, [pc, #764]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	23c0      	movs	r3, #192	; 0xc0
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	401a      	ands	r2, r3
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d10e      	bne.n	80016e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4bbb      	ldr	r3, [pc, #748]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d100      	bne.n	80016d8 <HAL_RCC_OscConfig+0x58>
 80016d6:	e071      	b.n	80017bc <HAL_RCC_OscConfig+0x13c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d000      	beq.n	80016e2 <HAL_RCC_OscConfig+0x62>
 80016e0:	e06c      	b.n	80017bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 fb4c 	bl	8001d80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x80>
 80016f0:	4bb1      	ldr	r3, [pc, #708]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0249      	lsls	r1, r1, #9
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e02f      	b.n	8001760 <HAL_RCC_OscConfig+0xe0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0xa2>
 8001708:	4bab      	ldr	r3, [pc, #684]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4baa      	ldr	r3, [pc, #680]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800170e:	49ab      	ldr	r1, [pc, #684]	; (80019bc <HAL_RCC_OscConfig+0x33c>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	4ba8      	ldr	r3, [pc, #672]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4ba7      	ldr	r3, [pc, #668]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800171a:	49a9      	ldr	r1, [pc, #676]	; (80019c0 <HAL_RCC_OscConfig+0x340>)
 800171c:	400a      	ands	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e01e      	b.n	8001760 <HAL_RCC_OscConfig+0xe0>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d10e      	bne.n	8001748 <HAL_RCC_OscConfig+0xc8>
 800172a:	4ba3      	ldr	r3, [pc, #652]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4ba2      	ldr	r3, [pc, #648]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	02c9      	lsls	r1, r1, #11
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	4b9f      	ldr	r3, [pc, #636]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b9e      	ldr	r3, [pc, #632]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0249      	lsls	r1, r1, #9
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xe0>
 8001748:	4b9b      	ldr	r3, [pc, #620]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b9a      	ldr	r3, [pc, #616]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800174e:	499b      	ldr	r1, [pc, #620]	; (80019bc <HAL_RCC_OscConfig+0x33c>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	4b98      	ldr	r3, [pc, #608]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b97      	ldr	r3, [pc, #604]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800175a:	4999      	ldr	r1, [pc, #612]	; (80019c0 <HAL_RCC_OscConfig+0x340>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d014      	beq.n	8001792 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff f92a 	bl	80009c0 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001772:	f7ff f925 	bl	80009c0 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e2fd      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0xf2>
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff f915 	bl	80009c0 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff f910 	bl	80009c0 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e2e8      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x11c>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_OscConfig+0x14a>
 80017c8:	e06c      	b.n	80018a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	220c      	movs	r2, #12
 80017d0:	4013      	ands	r3, r2
 80017d2:	d00e      	beq.n	80017f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	220c      	movs	r2, #12
 80017da:	4013      	ands	r3, r2
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d11f      	bne.n	8001820 <HAL_RCC_OscConfig+0x1a0>
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	23c0      	movs	r3, #192	; 0xc0
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	401a      	ands	r2, r3
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d116      	bne.n	8001820 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	4b71      	ldr	r3, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x188>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e2bb      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	22f8      	movs	r2, #248	; 0xf8
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00da      	lsls	r2, r3, #3
 8001818:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	e041      	b.n	80018a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d024      	beq.n	8001872 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f8c4 	bl	80009c0 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff f8bf 	bl	80009c0 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e297      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d0f1      	beq.n	800183e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	22f8      	movs	r2, #248	; 0xf8
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00da      	lsls	r2, r3, #3
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001878:	2101      	movs	r1, #1
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff f89f 	bl	80009c0 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff f89a 	bl	80009c0 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e272      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d1f1      	bne.n	8001888 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	4013      	ands	r3, r2
 80018ac:	d036      	beq.n	800191c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80018b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f87d 	bl	80009c0 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f878 	bl	80009c0 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e250      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f1      	beq.n	80018cc <HAL_RCC_OscConfig+0x24c>
 80018e8:	e018      	b.n	800191c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ea:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80018ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	438a      	bics	r2, r1
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f863 	bl	80009c0 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff f85e 	bl	80009c0 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e236      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d1f1      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2204      	movs	r2, #4
 8001922:	4013      	ands	r3, r2
 8001924:	d100      	bne.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001926:	e0b5      	b.n	8001a94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	201f      	movs	r0, #31
 800192a:	183b      	adds	r3, r7, r0
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	055b      	lsls	r3, r3, #21
 8001938:	4013      	ands	r3, r2
 800193a:	d110      	bne.n	800195e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0549      	lsls	r1, r1, #21
 8001946:	430a      	orrs	r2, r1
 8001948:	61da      	str	r2, [r3, #28]
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	055b      	lsls	r3, r3, #21
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001958:	183b      	adds	r3, r7, r0
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_OscConfig+0x344>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4013      	ands	r3, r2
 8001968:	d11a      	bne.n	80019a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_RCC_OscConfig+0x344>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x344>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0049      	lsls	r1, r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff f822 	bl	80009c0 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff f81d 	bl	80009c0 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1f5      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x344>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x348>
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	621a      	str	r2, [r3, #32]
 80019b4:	e036      	b.n	8001a24 <HAL_RCC_OscConfig+0x3a4>
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	fffbffff 	.word	0xfffbffff
 80019c4:	40007000 	.word	0x40007000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x36a>
 80019d0:	4bca      	ldr	r3, [pc, #808]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	4bc9      	ldr	r3, [pc, #804]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	4bc7      	ldr	r3, [pc, #796]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	4bc6      	ldr	r3, [pc, #792]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019e2:	2104      	movs	r1, #4
 80019e4:	438a      	bics	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x3a4>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x38c>
 80019f2:	4bc2      	ldr	r3, [pc, #776]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	4bc1      	ldr	r3, [pc, #772]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 80019f8:	2104      	movs	r1, #4
 80019fa:	430a      	orrs	r2, r1
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	4bbf      	ldr	r3, [pc, #764]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	4bbe      	ldr	r3, [pc, #760]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	621a      	str	r2, [r3, #32]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x3a4>
 8001a0c:	4bbb      	ldr	r3, [pc, #748]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4bba      	ldr	r3, [pc, #744]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	4bb8      	ldr	r3, [pc, #736]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	4bb7      	ldr	r3, [pc, #732]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	438a      	bics	r2, r1
 8001a22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d014      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7fe ffc8 	bl	80009c0 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7fe ffc3 	bl	80009c0 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4aaf      	ldr	r2, [pc, #700]	; (8001d00 <HAL_RCC_OscConfig+0x680>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e19a      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4bac      	ldr	r3, [pc, #688]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3b6>
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7fe ffb3 	bl	80009c0 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7fe ffae 	bl	80009c0 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	4aa5      	ldr	r2, [pc, #660]	; (8001d00 <HAL_RCC_OscConfig+0x680>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e185      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4ba1      	ldr	r3, [pc, #644]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7e:	231f      	movs	r3, #31
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b9c      	ldr	r3, [pc, #624]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	4b9b      	ldr	r3, [pc, #620]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	499d      	ldr	r1, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x684>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12a      	bne.n	8001afc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aa6:	4b95      	ldr	r3, [pc, #596]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001aac:	2104      	movs	r1, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ab2:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7fe ff7f 	bl	80009c0 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ac8:	f7fe ff7a 	bl	80009c0 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e152      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ada:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0f1      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ae4:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	22f8      	movs	r2, #248	; 0xf8
 8001aea:	4393      	bics	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	00da      	lsls	r2, r3, #3
 8001af4:	4b81      	ldr	r3, [pc, #516]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
 8001afa:	e034      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	3305      	adds	r3, #5
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b04:	4b7d      	ldr	r3, [pc, #500]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b10:	4b7a      	ldr	r3, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	22f8      	movs	r2, #248	; 0xf8
 8001b16:	4393      	bics	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	00da      	lsls	r2, r3, #3
 8001b20:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	e01e      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b28:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2c:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	430a      	orrs	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b34:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b38:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7fe ff3e 	bl	80009c0 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b4a:	f7fe ff39 	bl	80009c0 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e111      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f1      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d05c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b70:	4b62      	ldr	r3, [pc, #392]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d00e      	beq.n	8001b9a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b7c:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	220c      	movs	r2, #12
 8001b82:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d114      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b88:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	401a      	ands	r2, r3
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	025b      	lsls	r3, r3, #9
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d10b      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b9a:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d040      	beq.n	8001c28 <HAL_RCC_OscConfig+0x5a8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d03c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0e6      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bba:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0249      	lsls	r1, r1, #9
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fefa 	bl	80009c0 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd2:	f7fe fef5 	bl	80009c0 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0cd      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x552>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001bf8:	4943      	ldr	r1, [pc, #268]	; (8001d08 <HAL_RCC_OscConfig+0x688>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fedf 	bl	80009c0 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c08:	f7fe feda 	bl	80009c0 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0b2      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x588>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c28:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5b4>
 8001c32:	e0a4      	b.n	8001d7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d100      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5c2>
 8001c40:	e078      	b.n	8001d34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d14c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c50:	492e      	ldr	r1, [pc, #184]	; (8001d0c <HAL_RCC_OscConfig+0x68c>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe feb3 	bl	80009c0 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7fe feae 	bl	80009c0 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e086      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	049b      	lsls	r3, r3, #18
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	220f      	movs	r2, #15
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_RCC_OscConfig+0x690>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0449      	lsls	r1, r1, #17
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7fe fe81 	bl	80009c0 <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe fe7c 	bl	80009c0 <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e054      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	049b      	lsls	r3, r3, #18
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x644>
 8001ce2:	e04c      	b.n	8001d7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_RCC_OscConfig+0x67c>)
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x68c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fe66 	bl	80009c0 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x6a6>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	00001388 	.word	0x00001388
 8001d04:	efffffff 	.word	0xefffffff
 8001d08:	fffeffff 	.word	0xfffeffff
 8001d0c:	feffffff 	.word	0xfeffffff
 8001d10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe fe54 	bl	80009c0 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e02c      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_RCC_OscConfig+0x708>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	049b      	lsls	r3, r3, #18
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x694>
 8001d32:	e024      	b.n	8001d7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01f      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_OscConfig+0x708>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCC_OscConfig+0x708>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d10e      	bne.n	8001d7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	220f      	movs	r2, #15
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	23f0      	movs	r3, #240	; 0xf0
 8001d6e:	039b      	lsls	r3, r3, #14
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b008      	add	sp, #32
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0bf      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d911      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0a6      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d015      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d006      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001de6:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001dec:	21e0      	movs	r1, #224	; 0xe0
 8001dee:	00c9      	lsls	r1, r1, #3
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	22f0      	movs	r2, #240	; 0xf0
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d04c      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	4013      	ands	r3, r2
 8001e24:	d120      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07a      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	049b      	lsls	r3, r3, #18
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d114      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06e      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	029b      	lsls	r3, r3, #10
 8001e52:	4013      	ands	r3, r2
 8001e54:	d108      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e062      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e05b      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fda0 	bl	80009c0 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e86:	f7fe fd9b 	bl	80009c0 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_RCC_ClockConfig+0x1a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e042      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1ec      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d211      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x19c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e020      	b.n	8001f20 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_RCC_ClockConfig+0x1a8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001efc:	f000 f820 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001f00:	0001      	movs	r1, r0
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1a0>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	220f      	movs	r2, #15
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1ac>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	000a      	movs	r2, r1
 8001f12:	40da      	lsrs	r2, r3
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001f16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f7fe fb3d 	bl	8000598 <HAL_InitTick>
  
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	00001388 	.word	0x00001388
 8001f34:	fffff8ff 	.word	0xfffff8ff
 8001f38:	08005d68 	.word	0x08005d68
 8001f3c:	20000000 	.word	0x20000000

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d046      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>
 8001f6a:	d848      	bhi.n	8001ffe <HAL_RCC_GetSysClockFreq+0xbe>
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d002      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x36>
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x3c>
 8001f74:	e043      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f78:	613b      	str	r3, [r7, #16]
      break;
 8001f7a:	e043      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	220f      	movs	r2, #15
 8001f82:	4013      	ands	r3, r2
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	220f      	movs	r2, #15
 8001f90:	4013      	ands	r3, r2
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	025b      	lsls	r3, r3, #9
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d109      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	481a      	ldr	r0, [pc, #104]	; (8002014 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4353      	muls	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e01a      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	025b      	lsls	r3, r3, #9
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fd0:	f7fe f89a 	bl	8000108 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4353      	muls	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fe4:	f7fe f890 	bl	8000108 <__udivsi3>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	001a      	movs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4353      	muls	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
      break;
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ffa:	613b      	str	r3, [r7, #16]
      break;
 8001ffc:	e002      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002000:	613b      	str	r3, [r7, #16]
      break;
 8002002:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002004:	693b      	ldr	r3, [r7, #16]
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b006      	add	sp, #24
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	08005d80 	.word	0x08005d80
 800201c:	08005d90 	.word	0x08005d90
 8002020:	02dc6c00 	.word	0x02dc6c00

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_GetHCLKFreq+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800203c:	f7ff fff2 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002040:	0001      	movs	r1, r0
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	2207      	movs	r2, #7
 800204a:	4013      	ands	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	40d9      	lsrs	r1, r3
 8002052:	000b      	movs	r3, r1
}    
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	08005d78 	.word	0x08005d78

08002064 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_RCC_GetClockConfig+0x4c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	401a      	ands	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_GetClockConfig+0x4c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	22f0      	movs	r2, #240	; 0xf0
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_GetClockConfig+0x4c>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23e0      	movs	r3, #224	; 0xe0
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	401a      	ands	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetClockConfig+0x50>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	401a      	ands	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020d4:	e08e      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2017      	movs	r0, #23
 80020d8:	183b      	adds	r3, r7, r0
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	4013      	ands	r3, r2
 80020e8:	d110      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0549      	lsls	r1, r1, #21
 80020f4:	430a      	orrs	r2, r1
 80020f6:	61da      	str	r2, [r3, #28]
 80020f8:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	183b      	adds	r3, r7, r0
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d11a      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b60      	ldr	r3, [pc, #384]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc4b 	bl	80009c0 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	e008      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7fe fc46 	bl	80009c0 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0a6      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d034      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	23c0      	movs	r3, #192	; 0xc0
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4013      	ands	r3, r2
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d02c      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0249      	lsls	r1, r1, #9
 8002184:	430a      	orrs	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800218e:	4945      	ldr	r1, [pc, #276]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002190:	400a      	ands	r2, r1
 8002192:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fc0d 	bl	80009c0 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fc08 	bl	80009c0 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e067      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021de:	2317      	movs	r3, #23
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ee:	492f      	ldr	r1, [pc, #188]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	2203      	movs	r2, #3
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220e:	430a      	orrs	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222c:	430a      	orrs	r2, r1
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	02db      	lsls	r3, r3, #11
 8002238:	4013      	ands	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224c:	430a      	orrs	r2, r1
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	2210      	movs	r2, #16
 8002260:	4393      	bics	r3, r2
 8002262:	0019      	movs	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	fffffcff 	.word	0xfffffcff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	00001388 	.word	0x00001388
 80022ac:	efffffff 	.word	0xefffffff
 80022b0:	fffcffff 	.word	0xfffcffff
 80022b4:	fff3ffff 	.word	0xfff3ffff

080022b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e042      	b.n	8002350 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	223d      	movs	r2, #61	; 0x3d
 80022ce:	5c9b      	ldrb	r3, [r3, r2]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223c      	movs	r2, #60	; 0x3c
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f839 	bl	8002358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	223d      	movs	r2, #61	; 0x3d
 80022ea:	2102      	movs	r1, #2
 80022ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f000 f9bd 	bl	8002678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2246      	movs	r2, #70	; 0x46
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223e      	movs	r2, #62	; 0x3e
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223f      	movs	r2, #63	; 0x3f
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2241      	movs	r2, #65	; 0x41
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2242      	movs	r2, #66	; 0x42
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2243      	movs	r2, #67	; 0x43
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2244      	movs	r2, #68	; 0x44
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2245      	movs	r2, #69	; 0x45
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	223d      	movs	r2, #61	; 0x3d
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	223d      	movs	r2, #61	; 0x3d
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d001      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e03b      	b.n	80023f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223d      	movs	r2, #61	; 0x3d
 8002384:	2102      	movs	r1, #2
 8002386:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_TIM_Base_Start_IT+0x98>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00f      	beq.n	80023c2 <HAL_TIM_Base_Start_IT+0x5a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	05db      	lsls	r3, r3, #23
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d009      	beq.n	80023c2 <HAL_TIM_Base_Start_IT+0x5a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_TIM_Base_Start_IT+0x9c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_TIM_Base_Start_IT+0x5a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_TIM_Base_Start_IT+0xa0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d111      	bne.n	80023e6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2207      	movs	r2, #7
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d010      	beq.n	80023f6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	e007      	b.n	80023f6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400
 8002408:	40014000 	.word	0x40014000

0800240c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d124      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d11d      	bne.n	800246c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2203      	movs	r2, #3
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f8fa 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8002454:	e007      	b.n	8002466 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f8ed 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f8f9 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	2b04      	cmp	r3, #4
 8002478:	d125      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2204      	movs	r2, #4
 8002482:	4013      	ands	r3, r2
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2205      	movs	r2, #5
 800248e:	4252      	negs	r2, r2
 8002490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	23c0      	movs	r3, #192	; 0xc0
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f8cd 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f8c0 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f8cc 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2208      	movs	r2, #8
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d124      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2208      	movs	r2, #8
 80024dc:	4013      	ands	r3, r2
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11d      	bne.n	800251e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2209      	movs	r2, #9
 80024e8:	4252      	negs	r2, r2
 80024ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f8a1 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8002506:	e007      	b.n	8002518 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f894 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 f8a0 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2210      	movs	r2, #16
 8002526:	4013      	ands	r3, r2
 8002528:	2b10      	cmp	r3, #16
 800252a:	d125      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2210      	movs	r2, #16
 8002534:	4013      	ands	r3, r2
 8002536:	2b10      	cmp	r3, #16
 8002538:	d11e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2211      	movs	r2, #17
 8002540:	4252      	negs	r2, r2
 8002542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2208      	movs	r2, #8
 8002548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f874 	bl	8002648 <HAL_TIM_IC_CaptureCallback>
 8002560:	e007      	b.n	8002572 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f867 	bl	8002638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f873 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4252      	negs	r2, r2
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fd ff9f 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d10f      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	4013      	ands	r3, r2
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d108      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2281      	movs	r2, #129	; 0x81
 80025c8:	4252      	negs	r2, r2
 80025ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f8da 	bl	8002788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	4013      	ands	r3, r2
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d10f      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d108      	bne.n	8002602 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2241      	movs	r2, #65	; 0x41
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f833 	bl	8002668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	2b20      	cmp	r3, #32
 800260e:	d10f      	bne.n	8002630 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	4013      	ands	r3, r2
 800261a:	2b20      	cmp	r3, #32
 800261c:	d108      	bne.n	8002630 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2221      	movs	r2, #33	; 0x21
 8002624:	4252      	negs	r2, r2
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f8a4 	bl	8002778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <TIM_Base_SetConfig+0xe4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d008      	beq.n	80026a2 <TIM_Base_SetConfig+0x2a>
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	05db      	lsls	r3, r3, #23
 8002696:	429a      	cmp	r2, r3
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0x2a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a30      	ldr	r2, [pc, #192]	; (8002760 <TIM_Base_SetConfig+0xe8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2270      	movs	r2, #112	; 0x70
 80026a6:	4393      	bics	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a29      	ldr	r2, [pc, #164]	; (800275c <TIM_Base_SetConfig+0xe4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	05db      	lsls	r3, r3, #23
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d013      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a25      	ldr	r2, [pc, #148]	; (8002760 <TIM_Base_SetConfig+0xe8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00f      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <TIM_Base_SetConfig+0xec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a23      	ldr	r2, [pc, #140]	; (8002768 <TIM_Base_SetConfig+0xf0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <TIM_Base_SetConfig+0xf4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0x76>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <TIM_Base_SetConfig+0xf8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <TIM_Base_SetConfig+0xfc>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	4393      	bics	r3, r2
 8002706:	001a      	movs	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <TIM_Base_SetConfig+0xe4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_Base_SetConfig+0xce>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <TIM_Base_SetConfig+0xf0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0xce>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <TIM_Base_SetConfig+0xf4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0xce>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <TIM_Base_SetConfig+0xf8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d103      	bne.n	800274e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	615a      	str	r2, [r3, #20]
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400
 8002764:	40002000 	.word	0x40002000
 8002768:	40014000 	.word	0x40014000
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800
 8002774:	fffffcff 	.word	0xfffffcff

08002778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b0ab      	sub	sp, #172	; 0xac
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	22a4      	movs	r2, #164	; 0xa4
 80027a8:	18b9      	adds	r1, r7, r2
 80027aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	20a0      	movs	r0, #160	; 0xa0
 80027b4:	1839      	adds	r1, r7, r0
 80027b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	219c      	movs	r1, #156	; 0x9c
 80027c0:	1879      	adds	r1, r7, r1
 80027c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027c4:	0011      	movs	r1, r2
 80027c6:	18bb      	adds	r3, r7, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a99      	ldr	r2, [pc, #612]	; (8002a30 <HAL_UART_IRQHandler+0x298>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	2298      	movs	r2, #152	; 0x98
 80027d0:	18bc      	adds	r4, r7, r2
 80027d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80027d4:	18bb      	adds	r3, r7, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d114      	bne.n	8002806 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00f      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <HAL_UART_IRQHandler+0x62>
 80027f8:	e29e      	b.n	8002d38 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	0010      	movs	r0, r2
 8002802:	4798      	blx	r3
      }
      return;
 8002804:	e298      	b.n	8002d38 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002806:	2398      	movs	r3, #152	; 0x98
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d100      	bne.n	8002812 <HAL_UART_IRQHandler+0x7a>
 8002810:	e114      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002812:	239c      	movs	r3, #156	; 0x9c
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d106      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800281e:	23a0      	movs	r3, #160	; 0xa0
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <HAL_UART_IRQHandler+0x29c>)
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
 800282a:	e107      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800282c:	23a4      	movs	r3, #164	; 0xa4
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d012      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
 8002838:	23a0      	movs	r3, #160	; 0xa0
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d00b      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2284      	movs	r2, #132	; 0x84
 8002852:	589b      	ldr	r3, [r3, r2]
 8002854:	2201      	movs	r2, #1
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2184      	movs	r1, #132	; 0x84
 800285c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800285e:	23a4      	movs	r3, #164	; 0xa4
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d011      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
 800286a:	239c      	movs	r3, #156	; 0x9c
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d00b      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2284      	movs	r2, #132	; 0x84
 8002882:	589b      	ldr	r3, [r3, r2]
 8002884:	2204      	movs	r2, #4
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2184      	movs	r1, #132	; 0x84
 800288c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800288e:	23a4      	movs	r3, #164	; 0xa4
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	d011      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
 800289a:	239c      	movs	r3, #156	; 0x9c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2284      	movs	r2, #132	; 0x84
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	2202      	movs	r2, #2
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2184      	movs	r1, #132	; 0x84
 80028bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028be:	23a4      	movs	r3, #164	; 0xa4
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	4013      	ands	r3, r2
 80028c8:	d017      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028ca:	23a0      	movs	r3, #160	; 0xa0
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d105      	bne.n	80028e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028d6:	239c      	movs	r3, #156	; 0x9c
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2284      	movs	r2, #132	; 0x84
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	2208      	movs	r2, #8
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2184      	movs	r1, #132	; 0x84
 80028f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028fa:	23a4      	movs	r3, #164	; 0xa4
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
 8002908:	23a0      	movs	r3, #160	; 0xa0
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	04db      	lsls	r3, r3, #19
 8002912:	4013      	ands	r3, r2
 8002914:	d00c      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2284      	movs	r2, #132	; 0x84
 8002924:	589b      	ldr	r3, [r3, r2]
 8002926:	2220      	movs	r2, #32
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2184      	movs	r1, #132	; 0x84
 800292e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2284      	movs	r2, #132	; 0x84
 8002934:	589b      	ldr	r3, [r3, r2]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d100      	bne.n	800293c <HAL_UART_IRQHandler+0x1a4>
 800293a:	e1ff      	b.n	8002d3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800293c:	23a4      	movs	r3, #164	; 0xa4
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2220      	movs	r2, #32
 8002944:	4013      	ands	r3, r2
 8002946:	d00e      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002948:	23a0      	movs	r3, #160	; 0xa0
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	4013      	ands	r3, r2
 8002952:	d008      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	0010      	movs	r0, r2
 8002964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2284      	movs	r2, #132	; 0x84
 800296a:	589b      	ldr	r3, [r3, r2]
 800296c:	2194      	movs	r1, #148	; 0x94
 800296e:	187a      	adds	r2, r7, r1
 8002970:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d004      	beq.n	800298a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002980:	187b      	adds	r3, r7, r1
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	d047      	beq.n	8002a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fdad 	bl	80034ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d137      	bne.n	8002a10 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80029a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a8:	2090      	movs	r0, #144	; 0x90
 80029aa:	183a      	adds	r2, r7, r0
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	438a      	bics	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_UART_IRQHandler+0x2a0>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fe f9fb 	bl	8000de8 <HAL_DMA_Abort_IT>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d01a      	beq.n	8002a2c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a00:	0018      	movs	r0, r3
 8002a02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e012      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9ad 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	e00d      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f9a8 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e008      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f9a3 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2284      	movs	r2, #132	; 0x84
 8002a26:	2100      	movs	r1, #0
 8002a28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a2a:	e187      	b.n	8002d3c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	46c0      	nop			; (mov r8, r8)
    return;
 8002a2e:	e185      	b.n	8002d3c <HAL_UART_IRQHandler+0x5a4>
 8002a30:	0000080f 	.word	0x0000080f
 8002a34:	04000120 	.word	0x04000120
 8002a38:	080035b5 	.word	0x080035b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d000      	beq.n	8002a46 <HAL_UART_IRQHandler+0x2ae>
 8002a44:	e139      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a46:	23a4      	movs	r3, #164	; 0xa4
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d100      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2bc>
 8002a52:	e132      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_UART_IRQHandler+0x2ca>
 8002a60:	e12b      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d000      	beq.n	8002a7a <HAL_UART_IRQHandler+0x2e2>
 8002a78:	e09f      	b.n	8002bba <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	217e      	movs	r1, #126	; 0x7e
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_UART_IRQHandler+0x2fa>
 8002a90:	e156      	b.n	8002d40 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2258      	movs	r2, #88	; 0x58
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	187a      	adds	r2, r7, r1
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d300      	bcc.n	8002aa2 <HAL_UART_IRQHandler+0x30a>
 8002aa0:	e14e      	b.n	8002d40 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	187a      	adds	r2, r7, r1
 8002aa6:	215a      	movs	r1, #90	; 0x5a
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d06f      	beq.n	8002b96 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	499e      	ldr	r1, [pc, #632]	; (8002d50 <HAL_UART_IRQHandler+0x5b8>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
 8002af2:	2301      	movs	r3, #1
 8002af4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b22:	673b      	str	r3, [r7, #112]	; 0x70
 8002b24:	2301      	movs	r3, #1
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2140      	movs	r1, #64	; 0x40
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	2120      	movs	r1, #32
 8002b52:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b64:	2301      	movs	r3, #1
 8002b66:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b82:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fe f8f1 	bl	8000d78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2258      	movs	r2, #88	; 0x58
 8002ba0:	5a9a      	ldrh	r2, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	215a      	movs	r1, #90	; 0x5a
 8002ba6:	5a5b      	ldrh	r3, [r3, r1]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f8e0 	bl	8002d78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb8:	e0c2      	b.n	8002d40 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2258      	movs	r2, #88	; 0x58
 8002bbe:	5a99      	ldrh	r1, [r3, r2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	225a      	movs	r2, #90	; 0x5a
 8002bc4:	5a9b      	ldrh	r3, [r3, r2]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	208e      	movs	r0, #142	; 0x8e
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	1a8a      	subs	r2, r1, r2
 8002bce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	225a      	movs	r2, #90	; 0x5a
 8002bd4:	5a9b      	ldrh	r3, [r3, r2]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d100      	bne.n	8002bde <HAL_UART_IRQHandler+0x446>
 8002bdc:	e0b2      	b.n	8002d44 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <HAL_UART_IRQHandler+0x450>
 8002be6:	e0ad      	b.n	8002d44 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf0:	2488      	movs	r4, #136	; 0x88
 8002bf2:	193a      	adds	r2, r7, r4
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4951      	ldr	r1, [pc, #324]	; (8002d54 <HAL_UART_IRQHandler+0x5bc>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c26:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c28:	2484      	movs	r4, #132	; 0x84
 8002c2a:	193a      	adds	r2, r7, r4
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	438a      	bics	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c74:	2480      	movs	r4, #128	; 0x80
 8002c76:	193a      	adds	r2, r7, r4
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2110      	movs	r1, #16
 8002c92:	438a      	bics	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f860 	bl	8002d78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb8:	e044      	b.n	8002d44 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cba:	23a4      	movs	r3, #164	; 0xa4
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	035b      	lsls	r3, r3, #13
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d010      	beq.n	8002cea <HAL_UART_IRQHandler+0x552>
 8002cc8:	239c      	movs	r3, #156	; 0x9c
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	03db      	lsls	r3, r3, #15
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	0352      	lsls	r2, r2, #13
 8002cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fd18 	bl	8003718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cea:	23a4      	movs	r3, #164	; 0xa4
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d00f      	beq.n	8002d16 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002cf6:	23a0      	movs	r3, #160	; 0xa0
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01e      	beq.n	8002d48 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	0010      	movs	r0, r2
 8002d12:	4798      	blx	r3
    }
    return;
 8002d14:	e018      	b.n	8002d48 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d16:	23a4      	movs	r3, #164	; 0xa4
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2240      	movs	r2, #64	; 0x40
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
 8002d22:	23a0      	movs	r3, #160	; 0xa0
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00d      	beq.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 fc56 	bl	80035e2 <UART_EndTransmit_IT>
    return;
 8002d36:	e008      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	e006      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	e004      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	e002      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	e000      	b.n	8002d4a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002d48:	46c0      	nop			; (mov r8, r8)
  }

}
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b02b      	add	sp, #172	; 0xac
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	fffffeff 	.word	0xfffffeff
 8002d54:	fffffedf 	.word	0xfffffedf

08002d58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	000a      	movs	r2, r1
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b002      	add	sp, #8
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d98:	231e      	movs	r3, #30
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4abe      	ldr	r2, [pc, #760]	; (80030b8 <UART_SetConfig+0x328>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4ab9      	ldr	r2, [pc, #740]	; (80030bc <UART_SetConfig+0x32c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4ab0      	ldr	r2, [pc, #704]	; (80030c0 <UART_SetConfig+0x330>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4aac      	ldr	r2, [pc, #688]	; (80030c4 <UART_SetConfig+0x334>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d127      	bne.n	8002e66 <UART_SetConfig+0xd6>
 8002e16:	4bac      	ldr	r3, [pc, #688]	; (80030c8 <UART_SetConfig+0x338>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d00d      	beq.n	8002e3e <UART_SetConfig+0xae>
 8002e22:	d81b      	bhi.n	8002e5c <UART_SetConfig+0xcc>
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d014      	beq.n	8002e52 <UART_SetConfig+0xc2>
 8002e28:	d818      	bhi.n	8002e5c <UART_SetConfig+0xcc>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0xa4>
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d00a      	beq.n	8002e48 <UART_SetConfig+0xb8>
 8002e32:	e013      	b.n	8002e5c <UART_SetConfig+0xcc>
 8002e34:	231f      	movs	r3, #31
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e0bd      	b.n	8002fba <UART_SetConfig+0x22a>
 8002e3e:	231f      	movs	r3, #31
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e0b8      	b.n	8002fba <UART_SetConfig+0x22a>
 8002e48:	231f      	movs	r3, #31
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e0b3      	b.n	8002fba <UART_SetConfig+0x22a>
 8002e52:	231f      	movs	r3, #31
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2208      	movs	r2, #8
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e0ae      	b.n	8002fba <UART_SetConfig+0x22a>
 8002e5c:	231f      	movs	r3, #31
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	2210      	movs	r2, #16
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e0a9      	b.n	8002fba <UART_SetConfig+0x22a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a98      	ldr	r2, [pc, #608]	; (80030cc <UART_SetConfig+0x33c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d134      	bne.n	8002eda <UART_SetConfig+0x14a>
 8002e70:	4b95      	ldr	r3, [pc, #596]	; (80030c8 <UART_SetConfig+0x338>)
 8002e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e74:	23c0      	movs	r3, #192	; 0xc0
 8002e76:	029b      	lsls	r3, r3, #10
 8002e78:	4013      	ands	r3, r2
 8002e7a:	22c0      	movs	r2, #192	; 0xc0
 8002e7c:	0292      	lsls	r2, r2, #10
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d017      	beq.n	8002eb2 <UART_SetConfig+0x122>
 8002e82:	22c0      	movs	r2, #192	; 0xc0
 8002e84:	0292      	lsls	r2, r2, #10
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d822      	bhi.n	8002ed0 <UART_SetConfig+0x140>
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	0292      	lsls	r2, r2, #10
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <UART_SetConfig+0x136>
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	0292      	lsls	r2, r2, #10
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d81a      	bhi.n	8002ed0 <UART_SetConfig+0x140>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <UART_SetConfig+0x118>
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0252      	lsls	r2, r2, #9
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00a      	beq.n	8002ebc <UART_SetConfig+0x12c>
 8002ea6:	e013      	b.n	8002ed0 <UART_SetConfig+0x140>
 8002ea8:	231f      	movs	r3, #31
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e083      	b.n	8002fba <UART_SetConfig+0x22a>
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e07e      	b.n	8002fba <UART_SetConfig+0x22a>
 8002ebc:	231f      	movs	r3, #31
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	e079      	b.n	8002fba <UART_SetConfig+0x22a>
 8002ec6:	231f      	movs	r3, #31
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2208      	movs	r2, #8
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e074      	b.n	8002fba <UART_SetConfig+0x22a>
 8002ed0:	231f      	movs	r3, #31
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e06f      	b.n	8002fba <UART_SetConfig+0x22a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <UART_SetConfig+0x340>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d134      	bne.n	8002f4e <UART_SetConfig+0x1be>
 8002ee4:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <UART_SetConfig+0x338>)
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee8:	23c0      	movs	r3, #192	; 0xc0
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	4013      	ands	r3, r2
 8002eee:	22c0      	movs	r2, #192	; 0xc0
 8002ef0:	0312      	lsls	r2, r2, #12
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d017      	beq.n	8002f26 <UART_SetConfig+0x196>
 8002ef6:	22c0      	movs	r2, #192	; 0xc0
 8002ef8:	0312      	lsls	r2, r2, #12
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d822      	bhi.n	8002f44 <UART_SetConfig+0x1b4>
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0312      	lsls	r2, r2, #12
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <UART_SetConfig+0x1aa>
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	0312      	lsls	r2, r2, #12
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d81a      	bhi.n	8002f44 <UART_SetConfig+0x1b4>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <UART_SetConfig+0x18c>
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	02d2      	lsls	r2, r2, #11
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00a      	beq.n	8002f30 <UART_SetConfig+0x1a0>
 8002f1a:	e013      	b.n	8002f44 <UART_SetConfig+0x1b4>
 8002f1c:	231f      	movs	r3, #31
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e049      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f26:	231f      	movs	r3, #31
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e044      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f30:	231f      	movs	r3, #31
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2204      	movs	r2, #4
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e03f      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f3a:	231f      	movs	r3, #31
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2208      	movs	r2, #8
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e03a      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f44:	231f      	movs	r3, #31
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2210      	movs	r2, #16
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e035      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a60      	ldr	r2, [pc, #384]	; (80030d4 <UART_SetConfig+0x344>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d104      	bne.n	8002f62 <UART_SetConfig+0x1d2>
 8002f58:	231f      	movs	r3, #31
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e02b      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5c      	ldr	r2, [pc, #368]	; (80030d8 <UART_SetConfig+0x348>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d104      	bne.n	8002f76 <UART_SetConfig+0x1e6>
 8002f6c:	231f      	movs	r3, #31
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e021      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a58      	ldr	r2, [pc, #352]	; (80030dc <UART_SetConfig+0x34c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d104      	bne.n	8002f8a <UART_SetConfig+0x1fa>
 8002f80:	231f      	movs	r3, #31
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e017      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a54      	ldr	r2, [pc, #336]	; (80030e0 <UART_SetConfig+0x350>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d104      	bne.n	8002f9e <UART_SetConfig+0x20e>
 8002f94:	231f      	movs	r3, #31
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e00d      	b.n	8002fba <UART_SetConfig+0x22a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <UART_SetConfig+0x354>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d104      	bne.n	8002fb2 <UART_SetConfig+0x222>
 8002fa8:	231f      	movs	r3, #31
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0x22a>
 8002fb2:	231f      	movs	r3, #31
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d15c      	bne.n	8003080 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d015      	beq.n	8002ffc <UART_SetConfig+0x26c>
 8002fd0:	dc18      	bgt.n	8003004 <UART_SetConfig+0x274>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00d      	beq.n	8002ff2 <UART_SetConfig+0x262>
 8002fd6:	dc15      	bgt.n	8003004 <UART_SetConfig+0x274>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <UART_SetConfig+0x252>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x25c>
 8002fe0:	e010      	b.n	8003004 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7ff f829 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	61bb      	str	r3, [r7, #24]
        break;
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <UART_SetConfig+0x358>)
 8002fee:	61bb      	str	r3, [r7, #24]
        break;
 8002ff0:	e00f      	b.n	8003012 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe ffa5 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	61bb      	str	r3, [r7, #24]
        break;
 8002ffa:	e00a      	b.n	8003012 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	61bb      	str	r3, [r7, #24]
        break;
 8003002:	e006      	b.n	8003012 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003008:	231e      	movs	r3, #30
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d100      	bne.n	800301a <UART_SetConfig+0x28a>
 8003018:	e095      	b.n	8003146 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	005a      	lsls	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	18d2      	adds	r2, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f7fd f86b 	bl	8000108 <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d91c      	bls.n	8003076 <UART_SetConfig+0x2e6>
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	429a      	cmp	r2, r3
 8003044:	d217      	bcs.n	8003076 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	b29a      	uxth	r2, r3
 800304a:	200e      	movs	r0, #14
 800304c:	183b      	adds	r3, r7, r0
 800304e:	210f      	movs	r1, #15
 8003050:	438a      	bics	r2, r1
 8003052:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	2207      	movs	r2, #7
 800305c:	4013      	ands	r3, r2
 800305e:	b299      	uxth	r1, r3
 8003060:	183b      	adds	r3, r7, r0
 8003062:	183a      	adds	r2, r7, r0
 8003064:	8812      	ldrh	r2, [r2, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	183a      	adds	r2, r7, r0
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	e067      	b.n	8003146 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003076:	231e      	movs	r3, #30
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e062      	b.n	8003146 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d030      	beq.n	80030ec <UART_SetConfig+0x35c>
 800308a:	dc33      	bgt.n	80030f4 <UART_SetConfig+0x364>
 800308c:	2b04      	cmp	r3, #4
 800308e:	d00d      	beq.n	80030ac <UART_SetConfig+0x31c>
 8003090:	dc30      	bgt.n	80030f4 <UART_SetConfig+0x364>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <UART_SetConfig+0x30c>
 8003096:	2b02      	cmp	r3, #2
 8003098:	d005      	beq.n	80030a6 <UART_SetConfig+0x316>
 800309a:	e02b      	b.n	80030f4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe ffcc 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 80030a0:	0003      	movs	r3, r0
 80030a2:	61bb      	str	r3, [r7, #24]
        break;
 80030a4:	e02d      	b.n	8003102 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <UART_SetConfig+0x358>)
 80030a8:	61bb      	str	r3, [r7, #24]
        break;
 80030aa:	e02a      	b.n	8003102 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ac:	f7fe ff48 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80030b0:	0003      	movs	r3, r0
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e025      	b.n	8003102 <UART_SetConfig+0x372>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	efff69f3 	.word	0xefff69f3
 80030bc:	ffffcfff 	.word	0xffffcfff
 80030c0:	fffff4ff 	.word	0xfffff4ff
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40004400 	.word	0x40004400
 80030d0:	40004800 	.word	0x40004800
 80030d4:	40004c00 	.word	0x40004c00
 80030d8:	40005000 	.word	0x40005000
 80030dc:	40011400 	.word	0x40011400
 80030e0:	40011800 	.word	0x40011800
 80030e4:	40011c00 	.word	0x40011c00
 80030e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	61bb      	str	r3, [r7, #24]
        break;
 80030f2:	e006      	b.n	8003102 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030f8:	231e      	movs	r3, #30
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
        break;
 8003100:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01e      	beq.n	8003146 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	085a      	lsrs	r2, r3, #1
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	18d2      	adds	r2, r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	0019      	movs	r1, r3
 8003118:	0010      	movs	r0, r2
 800311a:	f7fc fff5 	bl	8000108 <__udivsi3>
 800311e:	0003      	movs	r3, r0
 8003120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d90a      	bls.n	800313e <UART_SetConfig+0x3ae>
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	025b      	lsls	r3, r3, #9
 800312e:	429a      	cmp	r2, r3
 8003130:	d205      	bcs.n	800313e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	b29a      	uxth	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e003      	b.n	8003146 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800313e:	231e      	movs	r3, #30
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003152:	231e      	movs	r3, #30
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	781b      	ldrb	r3, [r3, #0]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b008      	add	sp, #32
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2201      	movs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d00b      	beq.n	800318a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <UART_AdvFeatureConfig+0x144>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2202      	movs	r2, #2
 8003190:	4013      	ands	r3, r2
 8003192:	d00b      	beq.n	80031ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <UART_AdvFeatureConfig+0x148>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2204      	movs	r2, #4
 80031b2:	4013      	ands	r3, r2
 80031b4:	d00b      	beq.n	80031ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <UART_AdvFeatureConfig+0x14c>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2208      	movs	r2, #8
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <UART_AdvFeatureConfig+0x150>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d00b      	beq.n	8003212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a2c      	ldr	r2, [pc, #176]	; (80032b4 <UART_AdvFeatureConfig+0x154>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	2220      	movs	r2, #32
 8003218:	4013      	ands	r3, r2
 800321a:	d00b      	beq.n	8003234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <UART_AdvFeatureConfig+0x158>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	4013      	ands	r3, r2
 800323c:	d01d      	beq.n	800327a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <UART_AdvFeatureConfig+0x15c>)
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	035b      	lsls	r3, r3, #13
 800325e:	429a      	cmp	r2, r3
 8003260:	d10b      	bne.n	800327a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <UART_AdvFeatureConfig+0x160>)
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	4013      	ands	r3, r2
 8003282:	d00b      	beq.n	800329c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <UART_AdvFeatureConfig+0x164>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	fffdffff 	.word	0xfffdffff
 80032a8:	fffeffff 	.word	0xfffeffff
 80032ac:	fffbffff 	.word	0xfffbffff
 80032b0:	ffff7fff 	.word	0xffff7fff
 80032b4:	ffffefff 	.word	0xffffefff
 80032b8:	ffffdfff 	.word	0xffffdfff
 80032bc:	ffefffff 	.word	0xffefffff
 80032c0:	ff9fffff 	.word	0xff9fffff
 80032c4:	fff7ffff 	.word	0xfff7ffff

080032c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b092      	sub	sp, #72	; 0x48
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2284      	movs	r2, #132	; 0x84
 80032d4:	2100      	movs	r1, #0
 80032d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032d8:	f7fd fb72 	bl	80009c0 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2208      	movs	r2, #8
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d12c      	bne.n	8003348 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0391      	lsls	r1, r2, #14
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4a46      	ldr	r2, [pc, #280]	; (8003410 <UART_CheckIdleState+0x148>)
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f000 f88c 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8003300:	1e03      	subs	r3, r0, #0
 8003302:	d021      	beq.n	8003348 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
 800330e:	2301      	movs	r3, #1
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	438a      	bics	r2, r1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2278      	movs	r2, #120	; 0x78
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e05f      	b.n	8003408 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2204      	movs	r2, #4
 8003350:	4013      	ands	r3, r2
 8003352:	2b04      	cmp	r3, #4
 8003354:	d146      	bne.n	80033e4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	03d1      	lsls	r1, r2, #15
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <UART_CheckIdleState+0x148>)
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	f000 f858 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d03b      	beq.n	80033e4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	60fb      	str	r3, [r7, #12]
  return(result);
 8003372:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	2301      	movs	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4921      	ldr	r1, [pc, #132]	; (8003414 <UART_CheckIdleState+0x14c>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80033a4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
 80033a8:	2301      	movs	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	2120      	movs	r1, #32
 80033d6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2278      	movs	r2, #120	; 0x78
 80033dc:	2100      	movs	r1, #0
 80033de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e011      	b.n	8003408 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	2120      	movs	r1, #32
 80033f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2278      	movs	r2, #120	; 0x78
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b010      	add	sp, #64	; 0x40
 800340e:	bd80      	pop	{r7, pc}
 8003410:	01ffffff 	.word	0x01ffffff
 8003414:	fffffedf 	.word	0xfffffedf

08003418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003428:	e04b      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3301      	adds	r3, #1
 800342e:	d048      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fd fac6 	bl	80009c0 <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04b      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	4013      	ands	r3, r2
 8003454:	d035      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2208      	movs	r2, #8
 800345e:	4013      	ands	r3, r2
 8003460:	2b08      	cmp	r3, #8
 8003462:	d111      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f83c 	bl	80034ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2284      	movs	r2, #132	; 0x84
 8003478:	2108      	movs	r1, #8
 800347a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2278      	movs	r2, #120	; 0x78
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e02c      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	401a      	ands	r2, r3
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	429a      	cmp	r2, r3
 800349a:	d112      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f81f 	bl	80034ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2284      	movs	r2, #132	; 0x84
 80034b2:	2120      	movs	r1, #32
 80034b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2278      	movs	r2, #120	; 0x78
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e00f      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	425a      	negs	r2, r3
 80034d2:	4153      	adcs	r3, r2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	001a      	movs	r2, r3
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d0a4      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	617b      	str	r3, [r7, #20]
  return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	2301      	movs	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4926      	ldr	r1, [pc, #152]	; (80035b0 <UART_EndRxTransfer+0xc4>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	623b      	str	r3, [r7, #32]
  return(result);
 800352c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	2301      	movs	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	2b01      	cmp	r3, #1
 800355e:	d118      	bne.n	8003592 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003560:	f3ef 8310 	mrs	r3, PRIMASK
 8003564:	60bb      	str	r3, [r7, #8]
  return(result);
 8003566:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356a:	2301      	movs	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2110      	movs	r1, #16
 8003582:	438a      	bics	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	2120      	movs	r1, #32
 8003598:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b00e      	add	sp, #56	; 0x38
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	fffffedf 	.word	0xfffffedf

080035b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	225a      	movs	r2, #90	; 0x5a
 80035c6:	2100      	movs	r1, #0
 80035c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2252      	movs	r2, #82	; 0x52
 80035ce:	2100      	movs	r1, #0
 80035d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff fbc7 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ea:	f3ef 8310 	mrs	r3, PRIMASK
 80035ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80035f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f383 8810 	msr	PRIMASK, r3
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2140      	movs	r1, #64	; 0x40
 800360c:	438a      	bics	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fb94 	bl	8002d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b006      	add	sp, #24
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e05b      	b.n	8003708 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2278      	movs	r2, #120	; 0x78
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	0018      	movs	r0, r3
 8003664:	f7fd f88c 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	438a      	bics	r2, r1
 800367c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff fb85 	bl	8002d90 <UART_SetConfig>
 8003686:	0003      	movs	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e03b      	b.n	8003708 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	0018      	movs	r0, r3
 800369c:	f7ff fd60 	bl	8003160 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	01c9      	lsls	r1, r1, #7
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a15      	ldr	r2, [pc, #84]	; (8003710 <HAL_RS485Ex_Init+0xd8>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_RS485Ex_Init+0xdc>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	430a      	orrs	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff fde1 	bl	80032c8 <UART_CheckIdleState>
 8003706:	0003      	movs	r3, r0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b006      	add	sp, #24
 800370e:	bd80      	pop	{r7, pc}
 8003710:	ffff7fff 	.word	0xffff7fff
 8003714:	fc00ffff 	.word	0xfc00ffff

08003718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	0002      	movs	r2, r0
 8003730:	1dbb      	adds	r3, r7, #6
 8003732:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	2200      	movs	r2, #0
 800373c:	5e9b      	ldrsh	r3, [r3, r2]
 800373e:	2b84      	cmp	r3, #132	; 0x84
 8003740:	d006      	beq.n	8003750 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003742:	1dbb      	adds	r3, r7, #6
 8003744:	2200      	movs	r2, #0
 8003746:	5e9a      	ldrsh	r2, [r3, r2]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	18d3      	adds	r3, r2, r3
 800374c:	3303      	adds	r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b004      	add	sp, #16
 8003758:	bd80      	pop	{r7, pc}

0800375a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800375e:	f000 fe81 	bl	8004464 <vTaskStartScheduler>
  
  return osOK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800376a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376c:	b087      	sub	sp, #28
 800376e:	af02      	add	r7, sp, #8
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685c      	ldr	r4, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003780:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ffcd 	bl	8003728 <makeFreeRtosPriority>
 800378e:	0001      	movs	r1, r0
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	230c      	movs	r3, #12
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	9100      	str	r1, [sp, #0]
 800379a:	0013      	movs	r3, r2
 800379c:	0032      	movs	r2, r6
 800379e:	0029      	movs	r1, r5
 80037a0:	0020      	movs	r0, r4
 80037a2:	f000 fcbe 	bl	8004122 <xTaskCreate>
 80037a6:	0003      	movs	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d001      	beq.n	80037b0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b005      	add	sp, #20
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3308      	adds	r3, #8
 80037c6:	001a      	movs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4252      	negs	r2, r2
 80037d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3308      	adds	r3, #8
 80037d8:	001a      	movs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3308      	adds	r3, #8
 80037e2:	001a      	movs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b004      	add	sp, #16
 800384e:	bd80      	pop	{r7, pc}

08003850 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3301      	adds	r3, #1
 8003864:	d103      	bne.n	800386e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e00c      	b.n	8003888 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3308      	adds	r3, #8
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e002      	b.n	800387c <vListInsert+0x2c>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d2f6      	bcs.n	8003876 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b004      	add	sp, #16
 80038ba:	bd80      	pop	{r7, pc}

080038bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6892      	ldr	r2, [r2, #8]
 80038d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6852      	ldr	r2, [r2, #4]
 80038dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d103      	bne.n	80038f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	1e5a      	subs	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b004      	add	sp, #16
 800390a:	bd80      	pop	{r7, pc}

0800390c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericReset+0x18>
 8003920:	b672      	cpsid	i
 8003922:	e7fe      	b.n	8003922 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003924:	f001 fdc4 	bl	80054b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	434b      	muls	r3, r1
 8003936:	18d2      	adds	r2, r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	1e59      	subs	r1, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	434b      	muls	r3, r1
 800395a:	18d2      	adds	r2, r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2244      	movs	r2, #68	; 0x44
 8003964:	21ff      	movs	r1, #255	; 0xff
 8003966:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2245      	movs	r2, #69	; 0x45
 800396c:	21ff      	movs	r1, #255	; 0xff
 800396e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d013      	beq.n	80039a6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3310      	adds	r3, #16
 8003982:	0018      	movs	r0, r3
 8003984:	f000 ffac 	bl	80048e0 <xTaskRemoveFromEventList>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d00c      	beq.n	80039a6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800398c:	f001 fd80 	bl	8005490 <vPortYield>
 8003990:	e009      	b.n	80039a6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3310      	adds	r3, #16
 8003996:	0018      	movs	r0, r3
 8003998:	f7ff ff0f 	bl	80037ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff ff0a 	bl	80037ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039a6:	f001 fd95 	bl	80054d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b004      	add	sp, #16
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b08b      	sub	sp, #44	; 0x2c
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <xQueueGenericCreate+0x18>
 80039c8:	b672      	cpsid	i
 80039ca:	e7fe      	b.n	80039ca <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e003      	b.n	80039e0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4353      	muls	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3348      	adds	r3, #72	; 0x48
 80039e4:	0018      	movs	r0, r3
 80039e6:	f001 fdfb 	bl	80055e0 <pvPortMalloc>
 80039ea:	0003      	movs	r3, r0
 80039ec:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00c      	beq.n	8003a0e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	3348      	adds	r3, #72	; 0x48
 80039f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039fa:	1dfb      	adds	r3, r7, #7
 80039fc:	781c      	ldrb	r4, [r3, #0]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	0023      	movs	r3, r4
 8003a0a:	f000 f805 	bl	8003a18 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b009      	add	sp, #36	; 0x24
 8003a16:	bd90      	pop	{r4, r7, pc}

08003a18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	001a      	movs	r2, r3
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff ff5c 	bl	800390c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <xQueueGenericSend+0x20>
 8003a78:	b672      	cpsid	i
 8003a7a:	e7fe      	b.n	8003a7a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <xQueueGenericSend+0x2e>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <xQueueGenericSend+0x32>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <xQueueGenericSend+0x34>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <xQueueGenericSend+0x3c>
 8003a94:	b672      	cpsid	i
 8003a96:	e7fe      	b.n	8003a96 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSend+0x4a>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <xQueueGenericSend+0x4e>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueGenericSend+0x50>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <xQueueGenericSend+0x58>
 8003ab0:	b672      	cpsid	i
 8003ab2:	e7fe      	b.n	8003ab2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ab4:	f001 f89a 	bl	8004bec <xTaskGetSchedulerState>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d102      	bne.n	8003ac2 <xQueueGenericSend+0x66>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueGenericSend+0x6a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueGenericSend+0x6c>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <xQueueGenericSend+0x74>
 8003acc:	b672      	cpsid	i
 8003ace:	e7fe      	b.n	8003ace <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ad0:	f001 fcee 	bl	80054b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <xQueueGenericSend+0x8a>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d11e      	bne.n	8003b24 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 f99f 	bl	8003e30 <prvCopyDataToQueue>
 8003af2:	0003      	movs	r3, r0
 8003af4:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	3324      	adds	r3, #36	; 0x24
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 feec 	bl	80048e0 <xTaskRemoveFromEventList>
 8003b08:	1e03      	subs	r3, r0, #0
 8003b0a:	d007      	beq.n	8003b1c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b0c:	f001 fcc0 	bl	8005490 <vPortYield>
 8003b10:	e004      	b.n	8003b1c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b18:	f001 fcba 	bl	8005490 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b1c:	f001 fcda 	bl	80054d4 <vPortExitCritical>
				return pdPASS;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e05b      	b.n	8003bdc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b2a:	f001 fcd3 	bl	80054d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e054      	b.n	8003bdc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b38:	2314      	movs	r3, #20
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 ff2b 	bl	8004998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b46:	f001 fcc5 	bl	80054d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b4a:	f000 fcd1 	bl	80044f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b4e:	f001 fcaf 	bl	80054b0 <vPortEnterCritical>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2244      	movs	r2, #68	; 0x44
 8003b56:	5c9b      	ldrb	r3, [r3, r2]
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	d103      	bne.n	8003b66 <xQueueGenericSend+0x10a>
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2244      	movs	r2, #68	; 0x44
 8003b62:	2100      	movs	r1, #0
 8003b64:	5499      	strb	r1, [r3, r2]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2245      	movs	r2, #69	; 0x45
 8003b6a:	5c9b      	ldrb	r3, [r3, r2]
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x11e>
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2245      	movs	r2, #69	; 0x45
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	f001 fcab 	bl	80054d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7e:	1d3a      	adds	r2, r7, #4
 8003b80:	2314      	movs	r3, #20
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	0011      	movs	r1, r2
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 ff1a 	bl	80049c0 <xTaskCheckForTimeOut>
 8003b8c:	1e03      	subs	r3, r0, #0
 8003b8e:	d11e      	bne.n	8003bce <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 fa51 	bl	800403a <prvIsQueueFull>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d011      	beq.n	8003bc0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	3310      	adds	r3, #16
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fe57 	bl	8004858 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f9d0 	bl	8003f52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bb2:	f000 fca9 	bl	8004508 <xTaskResumeAll>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d18a      	bne.n	8003ad0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003bba:	f001 fc69 	bl	8005490 <vPortYield>
 8003bbe:	e787      	b.n	8003ad0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 f9c5 	bl	8003f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bc8:	f000 fc9e 	bl	8004508 <xTaskResumeAll>
 8003bcc:	e780      	b.n	8003ad0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 f9be 	bl	8003f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bd6:	f000 fc97 	bl	8004508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bda:	2300      	movs	r3, #0
		}
	}
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b00a      	add	sp, #40	; 0x28
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <xQueueGenericSendFromISR+0x1c>
 8003bfc:	b672      	cpsid	i
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSendFromISR+0x2a>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xQueueGenericSendFromISR+0x2e>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericSendFromISR+0x30>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xQueueGenericSendFromISR+0x38>
 8003c18:	b672      	cpsid	i
 8003c1a:	e7fe      	b.n	8003c1a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d103      	bne.n	8003c2a <xQueueGenericSendFromISR+0x46>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <xQueueGenericSendFromISR+0x4a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <xQueueGenericSendFromISR+0x4c>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueGenericSendFromISR+0x54>
 8003c34:	b672      	cpsid	i
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c38:	f001 fc64 	bl	8005504 <ulSetInterruptMaskFromISR>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <xQueueGenericSendFromISR+0x6e>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d12e      	bne.n	8003cb0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c52:	2413      	movs	r4, #19
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	2145      	movs	r1, #69	; 0x45
 8003c5a:	5c52      	ldrb	r2, [r2, r1]
 8003c5c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 f8e3 	bl	8003e30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	d111      	bne.n	8003c98 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d016      	beq.n	8003caa <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 fe2d 	bl	80048e0 <xTaskRemoveFromEventList>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d00f      	beq.n	8003caa <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e008      	b.n	8003caa <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c98:	2313      	movs	r3, #19
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	b259      	sxtb	r1, r3
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2245      	movs	r2, #69	; 0x45
 8003ca8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
		{
 8003cae:	e001      	b.n	8003cb4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f001 fc2a 	bl	8005510 <vClearInterruptMaskFromISR>

	return xReturn;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b009      	add	sp, #36	; 0x24
 8003cc4:	bd90      	pop	{r4, r7, pc}

08003cc6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueReceive+0x1e>
 8003ce0:	b672      	cpsid	i
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <xQueueReceive+0x2c>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <xQueueReceive+0x30>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <xQueueReceive+0x32>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <xQueueReceive+0x3a>
 8003cfc:	b672      	cpsid	i
 8003cfe:	e7fe      	b.n	8003cfe <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d00:	f000 ff74 	bl	8004bec <xTaskGetSchedulerState>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d102      	bne.n	8003d0e <xQueueReceive+0x48>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xQueueReceive+0x4c>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueReceive+0x4e>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <xQueueReceive+0x56>
 8003d18:	b672      	cpsid	i
 8003d1a:	e7fe      	b.n	8003d1a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d1c:	f001 fbc8 	bl	80054b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01a      	beq.n	8003d62 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 f8e7 	bl	8003f06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fdc7 	bl	80048e0 <xTaskRemoveFromEventList>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d001      	beq.n	8003d5a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d56:	f001 fb9b 	bl	8005490 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d5a:	f001 fbbb 	bl	80054d4 <vPortExitCritical>
				return pdPASS;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e062      	b.n	8003e28 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d68:	f001 fbb4 	bl	80054d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e05b      	b.n	8003e28 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d76:	2314      	movs	r3, #20
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 fe0c 	bl	8004998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d84:	f001 fba6 	bl	80054d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d88:	f000 fbb2 	bl	80044f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d8c:	f001 fb90 	bl	80054b0 <vPortEnterCritical>
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	2244      	movs	r2, #68	; 0x44
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	b25b      	sxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d103      	bne.n	8003da4 <xQueueReceive+0xde>
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2244      	movs	r2, #68	; 0x44
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2245      	movs	r2, #69	; 0x45
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	d103      	bne.n	8003db8 <xQueueReceive+0xf2>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2245      	movs	r2, #69	; 0x45
 8003db4:	2100      	movs	r1, #0
 8003db6:	5499      	strb	r1, [r3, r2]
 8003db8:	f001 fb8c 	bl	80054d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dbc:	1d3a      	adds	r2, r7, #4
 8003dbe:	2314      	movs	r3, #20
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fdfb 	bl	80049c0 <xTaskCheckForTimeOut>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d11e      	bne.n	8003e0c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 f91c 	bl	800400e <prvIsQueueEmpty>
 8003dd6:	1e03      	subs	r3, r0, #0
 8003dd8:	d011      	beq.n	8003dfe <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	3324      	adds	r3, #36	; 0x24
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fd38 	bl	8004858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 f8b1 	bl	8003f52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003df0:	f000 fb8a 	bl	8004508 <xTaskResumeAll>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d191      	bne.n	8003d1c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003df8:	f001 fb4a 	bl	8005490 <vPortYield>
 8003dfc:	e78e      	b.n	8003d1c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f8a6 	bl	8003f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e06:	f000 fb7f 	bl	8004508 <xTaskResumeAll>
 8003e0a:	e787      	b.n	8003d1c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 f89f 	bl	8003f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e14:	f000 fb78 	bl	8004508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f8f7 	bl	800400e <prvIsQueueEmpty>
 8003e20:	1e03      	subs	r3, r0, #0
 8003e22:	d100      	bne.n	8003e26 <xQueueReceive+0x160>
 8003e24:	e77a      	b.n	8003d1c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b00a      	add	sp, #40	; 0x28
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10e      	bne.n	8003e6c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d14e      	bne.n	8003ef4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 fee2 	bl	8004c24 <xTaskPriorityDisinherit>
 8003e60:	0003      	movs	r3, r0
 8003e62:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	e043      	b.n	8003ef4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d119      	bne.n	8003ea6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6898      	ldr	r0, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	f001 fec9 	bl	8005c14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d32b      	bcc.n	8003ef4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e026      	b.n	8003ef4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68d8      	ldr	r0, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	f001 feaf 	bl	8005c14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	18d2      	adds	r2, r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d207      	bcs.n	8003ee2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	425b      	negs	r3, r3
 8003edc:	18d2      	adds	r2, r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d105      	bne.n	8003ef4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003efc:	697b      	ldr	r3, [r7, #20]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b006      	add	sp, #24
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d018      	beq.n	8003f4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	18d2      	adds	r2, r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d303      	bcc.n	8003f3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f001 fe65 	bl	8005c14 <memcpy>
	}
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f5a:	f001 faa9 	bl	80054b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f5e:	230f      	movs	r3, #15
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2145      	movs	r1, #69	; 0x45
 8003f66:	5c52      	ldrb	r2, [r2, r1]
 8003f68:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f6a:	e013      	b.n	8003f94 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d016      	beq.n	8003fa2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3324      	adds	r3, #36	; 0x24
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 fcb1 	bl	80048e0 <xTaskRemoveFromEventList>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f82:	f000 fd6d 	bl	8004a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f86:	210f      	movs	r1, #15
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f94:	230f      	movs	r3, #15
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	dce5      	bgt.n	8003f6c <prvUnlockQueue+0x1a>
 8003fa0:	e000      	b.n	8003fa4 <prvUnlockQueue+0x52>
					break;
 8003fa2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2245      	movs	r2, #69	; 0x45
 8003fa8:	21ff      	movs	r1, #255	; 0xff
 8003faa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003fac:	f001 fa92 	bl	80054d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fb0:	f001 fa7e 	bl	80054b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fb4:	230e      	movs	r3, #14
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	2144      	movs	r1, #68	; 0x44
 8003fbc:	5c52      	ldrb	r2, [r2, r1]
 8003fbe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc0:	e013      	b.n	8003fea <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3310      	adds	r3, #16
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 fc86 	bl	80048e0 <xTaskRemoveFromEventList>
 8003fd4:	1e03      	subs	r3, r0, #0
 8003fd6:	d001      	beq.n	8003fdc <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003fd8:	f000 fd42 	bl	8004a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fdc:	210e      	movs	r1, #14
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fea:	230e      	movs	r3, #14
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dce5      	bgt.n	8003fc2 <prvUnlockQueue+0x70>
 8003ff6:	e000      	b.n	8003ffa <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003ff8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2244      	movs	r2, #68	; 0x44
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004002:	f001 fa67 	bl	80054d4 <vPortExitCritical>
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}

0800400e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004016:	f001 fa4b 	bl	80054b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e001      	b.n	800402c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800402c:	f001 fa52 	bl	80054d4 <vPortExitCritical>

	return xReturn;
 8004030:	68fb      	ldr	r3, [r7, #12]
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}

0800403a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004042:	f001 fa35 	bl	80054b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	429a      	cmp	r2, r3
 8004050:	d102      	bne.n	8004058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e001      	b.n	800405c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800405c:	f001 fa3a 	bl	80054d4 <vPortExitCritical>

	return xReturn;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	e015      	b.n	80040a8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <vQueueAddToRegistry+0x4c>)
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	00d2      	lsls	r2, r2, #3
 8004082:	58d3      	ldr	r3, [r2, r3]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10c      	bne.n	80040a2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <vQueueAddToRegistry+0x4c>)
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	00d2      	lsls	r2, r2, #3
 800408e:	6839      	ldr	r1, [r7, #0]
 8004090:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <vQueueAddToRegistry+0x4c>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	18d3      	adds	r3, r2, r3
 800409a:	3304      	adds	r3, #4
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040a0:	e006      	b.n	80040b0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	d9e6      	bls.n	800407c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b004      	add	sp, #16
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000220 	.word	0x20000220

080040bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040cc:	f001 f9f0 	bl	80054b0 <vPortEnterCritical>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2244      	movs	r2, #68	; 0x44
 80040d4:	5c9b      	ldrb	r3, [r3, r2]
 80040d6:	b25b      	sxtb	r3, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	d103      	bne.n	80040e4 <vQueueWaitForMessageRestricted+0x28>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2244      	movs	r2, #68	; 0x44
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2245      	movs	r2, #69	; 0x45
 80040e8:	5c9b      	ldrb	r3, [r3, r2]
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	d103      	bne.n	80040f8 <vQueueWaitForMessageRestricted+0x3c>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2245      	movs	r2, #69	; 0x45
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]
 80040f8:	f001 f9ec 	bl	80054d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3324      	adds	r3, #36	; 0x24
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fbc1 	bl	8004894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff ff1c 	bl	8003f52 <prvUnlockQueue>
	}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b006      	add	sp, #24
 8004120:	bd80      	pop	{r7, pc}

08004122 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004122:	b590      	push	{r4, r7, lr}
 8004124:	b08d      	sub	sp, #52	; 0x34
 8004126:	af04      	add	r7, sp, #16
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	1dbb      	adds	r3, r7, #6
 8004130:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004132:	1dbb      	adds	r3, r7, #6
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	0018      	movs	r0, r3
 800413a:	f001 fa51 	bl	80055e0 <pvPortMalloc>
 800413e:	0003      	movs	r3, r0
 8004140:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004148:	20a0      	movs	r0, #160	; 0xa0
 800414a:	f001 fa49 	bl	80055e0 <pvPortMalloc>
 800414e:	0003      	movs	r3, r0
 8004150:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
 800415e:	e006      	b.n	800416e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	0018      	movs	r0, r3
 8004164:	f001 fae2 	bl	800572c <vPortFree>
 8004168:	e001      	b.n	800416e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d016      	beq.n	80041a2 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	683c      	ldr	r4, [r7, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	2300      	movs	r3, #0
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0023      	movs	r3, r4
 8004190:	f000 f810 	bl	80041b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f89c 	bl	80042d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800419c:	2301      	movs	r3, #1
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e002      	b.n	80041a8 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	425b      	negs	r3, r3
 80041a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041a8:	69bb      	ldr	r3, [r7, #24]
	}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b009      	add	sp, #36	; 0x24
 80041b0:	bd90      	pop	{r4, r7, pc}
	...

080041b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	493e      	ldr	r1, [pc, #248]	; (80042c4 <prvInitialiseNewTask+0x110>)
 80041ca:	468c      	mov	ip, r1
 80041cc:	4463      	add	r3, ip
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2207      	movs	r2, #7
 80041d8:	4393      	bics	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	d001      	beq.n	80041e8 <prvInitialiseNewTask+0x34>
 80041e4:	b672      	cpsid	i
 80041e6:	e7fe      	b.n	80041e6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e013      	b.n	8004216 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	18d3      	adds	r3, r2, r3
 80041f4:	7818      	ldrb	r0, [r3, #0]
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	2134      	movs	r1, #52	; 0x34
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	185b      	adds	r3, r3, r1
 8004200:	1c02      	adds	r2, r0, #0
 8004202:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	18d3      	adds	r3, r2, r3
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d9e8      	bls.n	80041ee <prvInitialiseNewTask+0x3a>
 800421c:	e000      	b.n	8004220 <prvInitialiseNewTask+0x6c>
		{
			break;
 800421e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2243      	movs	r2, #67	; 0x43
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d901      	bls.n	8004232 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800422e:	2306      	movs	r3, #6
 8004230:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	2200      	movs	r2, #0
 8004242:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	3304      	adds	r3, #4
 8004248:	0018      	movs	r0, r3
 800424a:	f7ff fad4 	bl	80037f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	3318      	adds	r3, #24
 8004252:	0018      	movs	r0, r3
 8004254:	f7ff facf 	bl	80037f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800425c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2207      	movs	r2, #7
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	2298      	movs	r2, #152	; 0x98
 8004272:	2100      	movs	r1, #0
 8004274:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	229c      	movs	r2, #156	; 0x9c
 800427a:	2100      	movs	r1, #0
 800427c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	334c      	adds	r3, #76	; 0x4c
 8004282:	224c      	movs	r2, #76	; 0x4c
 8004284:	2100      	movs	r1, #0
 8004286:	0018      	movs	r0, r3
 8004288:	f001 fc38 	bl	8005afc <memset>
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	4a0e      	ldr	r2, [pc, #56]	; (80042c8 <prvInitialiseNewTask+0x114>)
 8004290:	651a      	str	r2, [r3, #80]	; 0x50
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <prvInitialiseNewTask+0x118>)
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <prvInitialiseNewTask+0x11c>)
 800429c:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	68f9      	ldr	r1, [r7, #12]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f001 f867 	bl	8005378 <pxPortInitialiseStack>
 80042aa:	0002      	movs	r2, r0
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b006      	add	sp, #24
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	3fffffff 	.word	0x3fffffff
 80042c8:	200043f4 	.word	0x200043f4
 80042cc:	2000445c 	.word	0x2000445c
 80042d0:	200044c4 	.word	0x200044c4

080042d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f001 f8e8 	bl	80054b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <prvAddNewTaskToReadyList+0xb0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <prvAddNewTaskToReadyList+0xb0>)
 80042e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80042ea:	4b27      	ldr	r3, [pc, #156]	; (8004388 <prvAddNewTaskToReadyList+0xb4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042f2:	4b25      	ldr	r3, [pc, #148]	; (8004388 <prvAddNewTaskToReadyList+0xb4>)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <prvAddNewTaskToReadyList+0xb0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d110      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004300:	f000 fbc8 	bl	8004a94 <prvInitialiseTaskLists>
 8004304:	e00d      	b.n	8004322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <prvAddNewTaskToReadyList+0xb8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <prvAddNewTaskToReadyList+0xb4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d802      	bhi.n	8004322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <prvAddNewTaskToReadyList+0xb4>)
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 800432a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <prvAddNewTaskToReadyList+0xc0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d903      	bls.n	8004340 <prvAddNewTaskToReadyList+0x6c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <prvAddNewTaskToReadyList+0xc0>)
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	0013      	movs	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	189b      	adds	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 800434e:	189a      	adds	r2, r3, r2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	0019      	movs	r1, r3
 8004356:	0010      	movs	r0, r2
 8004358:	f7ff fa58 	bl	800380c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800435c:	f001 f8ba 	bl	80054d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvAddNewTaskToReadyList+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <prvAddNewTaskToReadyList+0xb4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	429a      	cmp	r2, r3
 8004374:	d201      	bcs.n	800437a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004376:	f001 f88b 	bl	8005490 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20000360 	.word	0x20000360
 8004388:	20000260 	.word	0x20000260
 800438c:	2000036c 	.word	0x2000036c
 8004390:	2000037c 	.word	0x2000037c
 8004394:	20000368 	.word	0x20000368
 8004398:	20000264 	.word	0x20000264

0800439c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80043a4:	f001 f884 	bl	80054b0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <vTaskDelete+0x18>
 80043ae:	4b26      	ldr	r3, [pc, #152]	; (8004448 <vTaskDelete+0xac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e000      	b.n	80043b6 <vTaskDelete+0x1a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3304      	adds	r3, #4
 80043bc:	0018      	movs	r0, r3
 80043be:	f7ff fa7d 	bl	80038bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3318      	adds	r3, #24
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff fa74 	bl	80038bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <vTaskDelete+0xb0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <vTaskDelete+0xb0>)
 80043dc:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 80043de:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <vTaskDelete+0xac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d10c      	bne.n	8004402 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <vTaskDelete+0xb4>)
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fa0b 	bl	800380c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <vTaskDelete+0xb8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <vTaskDelete+0xb8>)
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e00a      	b.n	8004418 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <vTaskDelete+0xbc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <vTaskDelete+0xbc>)
 800440a:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 fbb2 	bl	8004b78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004414:	f000 fbc6 	bl	8004ba4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004418:	f001 f85c 	bl	80054d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <vTaskDelete+0xc0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00c      	beq.n	800443e <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <vTaskDelete+0xac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d107      	bne.n	800443e <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <vTaskDelete+0xc4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <vTaskDelete+0x9e>
 8004436:	b672      	cpsid	i
 8004438:	e7fe      	b.n	8004438 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800443a:	f001 f829 	bl	8005490 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b004      	add	sp, #16
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	20000260 	.word	0x20000260
 800444c:	2000037c 	.word	0x2000037c
 8004450:	20000334 	.word	0x20000334
 8004454:	20000348 	.word	0x20000348
 8004458:	20000360 	.word	0x20000360
 800445c:	2000036c 	.word	0x2000036c
 8004460:	20000388 	.word	0x20000388

08004464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800446a:	4919      	ldr	r1, [pc, #100]	; (80044d0 <vTaskStartScheduler+0x6c>)
 800446c:	4819      	ldr	r0, [pc, #100]	; (80044d4 <vTaskStartScheduler+0x70>)
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <vTaskStartScheduler+0x74>)
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	2300      	movs	r3, #0
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	2300      	movs	r3, #0
 8004478:	2280      	movs	r2, #128	; 0x80
 800447a:	f7ff fe52 	bl	8004122 <xTaskCreate>
 800447e:	0003      	movs	r3, r0
 8004480:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d103      	bne.n	8004490 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8004488:	f000 fc7c 	bl	8004d84 <xTimerCreateTimerTask>
 800448c:	0003      	movs	r3, r0
 800448e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d113      	bne.n	80044be <vTaskStartScheduler+0x5a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004496:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <vTaskStartScheduler+0x78>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	334c      	adds	r3, #76	; 0x4c
 800449e:	001a      	movs	r2, r3
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <vTaskStartScheduler+0x7c>)
 80044a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <vTaskStartScheduler+0x80>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	4252      	negs	r2, r2
 80044aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <vTaskStartScheduler+0x84>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <vTaskStartScheduler+0x88>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044b8:	f000 ffc6 	bl	8005448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044bc:	e004      	b.n	80044c8 <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3301      	adds	r3, #1
 80044c2:	d101      	bne.n	80044c8 <vTaskStartScheduler+0x64>
 80044c4:	b672      	cpsid	i
 80044c6:	e7fe      	b.n	80044c6 <vTaskStartScheduler+0x62>
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	08005d14 	.word	0x08005d14
 80044d4:	08004a75 	.word	0x08004a75
 80044d8:	20000384 	.word	0x20000384
 80044dc:	20000260 	.word	0x20000260
 80044e0:	20000058 	.word	0x20000058
 80044e4:	20000380 	.word	0x20000380
 80044e8:	2000036c 	.word	0x2000036c
 80044ec:	20000364 	.word	0x20000364

080044f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <vTaskSuspendAll+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	4b02      	ldr	r3, [pc, #8]	; (8004504 <vTaskSuspendAll+0x14>)
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000388 	.word	0x20000388

08004508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <xTaskResumeAll+0xf8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <xTaskResumeAll+0x1a>
 800451e:	b672      	cpsid	i
 8004520:	e7fe      	b.n	8004520 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004522:	f000 ffc5 	bl	80054b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004526:	4b36      	ldr	r3, [pc, #216]	; (8004600 <xTaskResumeAll+0xf8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1e5a      	subs	r2, r3, #1
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <xTaskResumeAll+0xf8>)
 800452e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <xTaskResumeAll+0xf8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d15b      	bne.n	80045f0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <xTaskResumeAll+0xfc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d057      	beq.n	80045f0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004540:	e02f      	b.n	80045a2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <xTaskResumeAll+0x100>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3318      	adds	r3, #24
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff f9b4 	bl	80038bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3304      	adds	r3, #4
 8004558:	0018      	movs	r0, r3
 800455a:	f7ff f9af 	bl	80038bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <xTaskResumeAll+0x104>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <xTaskResumeAll+0x6a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <xTaskResumeAll+0x104>)
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	0013      	movs	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	189b      	adds	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a24      	ldr	r2, [pc, #144]	; (8004610 <xTaskResumeAll+0x108>)
 8004580:	189a      	adds	r2, r3, r2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3304      	adds	r3, #4
 8004586:	0019      	movs	r1, r3
 8004588:	0010      	movs	r0, r2
 800458a:	f7ff f93f 	bl	800380c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <xTaskResumeAll+0x10c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <xTaskResumeAll+0x110>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <xTaskResumeAll+0x100>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1cb      	bne.n	8004542 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b0:	f000 faf8 	bl	8004ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <xTaskResumeAll+0x114>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c0:	f000 f83c 	bl	800463c <xTaskIncrementTick>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d002      	beq.n	80045ce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <xTaskResumeAll+0x110>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <xTaskResumeAll+0x114>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <xTaskResumeAll+0x110>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ec:	f000 ff50 	bl	8005490 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f0:	f000 ff70 	bl	80054d4 <vPortExitCritical>

	return xAlreadyYielded;
 80045f4:	68bb      	ldr	r3, [r7, #8]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20000388 	.word	0x20000388
 8004604:	20000360 	.word	0x20000360
 8004608:	20000320 	.word	0x20000320
 800460c:	20000368 	.word	0x20000368
 8004610:	20000264 	.word	0x20000264
 8004614:	20000260 	.word	0x20000260
 8004618:	20000374 	.word	0x20000374
 800461c:	20000370 	.word	0x20000370

08004620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <xTaskGetTickCount+0x18>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800462c:	687b      	ldr	r3, [r7, #4]
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	20000364 	.word	0x20000364

0800463c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004646:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <xTaskIncrementTick+0x13c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d000      	beq.n	8004650 <xTaskIncrementTick+0x14>
 800464e:	e083      	b.n	8004758 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004650:	4b4a      	ldr	r3, [pc, #296]	; (800477c <xTaskIncrementTick+0x140>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004658:	4b48      	ldr	r3, [pc, #288]	; (800477c <xTaskIncrementTick+0x140>)
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d117      	bne.n	8004694 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <xTaskIncrementTick+0x144>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <xTaskIncrementTick+0x36>
 800466e:	b672      	cpsid	i
 8004670:	e7fe      	b.n	8004670 <xTaskIncrementTick+0x34>
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <xTaskIncrementTick+0x144>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <xTaskIncrementTick+0x148>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <xTaskIncrementTick+0x144>)
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	4b40      	ldr	r3, [pc, #256]	; (8004784 <xTaskIncrementTick+0x148>)
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	4b40      	ldr	r3, [pc, #256]	; (8004788 <xTaskIncrementTick+0x14c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	4b3e      	ldr	r3, [pc, #248]	; (8004788 <xTaskIncrementTick+0x14c>)
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f000 fa88 	bl	8004ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004694:	4b3d      	ldr	r3, [pc, #244]	; (800478c <xTaskIncrementTick+0x150>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d34e      	bcc.n	800473c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800469e:	4b38      	ldr	r3, [pc, #224]	; (8004780 <xTaskIncrementTick+0x144>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xTaskIncrementTick+0x70>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xTaskIncrementTick+0x72>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <xTaskIncrementTick+0x150>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	4252      	negs	r2, r2
 80046b8:	601a      	str	r2, [r3, #0]
					break;
 80046ba:	e03f      	b.n	800473c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046bc:	4b30      	ldr	r3, [pc, #192]	; (8004780 <xTaskIncrementTick+0x144>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d203      	bcs.n	80046dc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <xTaskIncrementTick+0x150>)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
						break;
 80046da:	e02f      	b.n	800473c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3304      	adds	r3, #4
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff f8eb 	bl	80038bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3318      	adds	r3, #24
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7ff f8e2 	bl	80038bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <xTaskIncrementTick+0x154>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <xTaskIncrementTick+0xd0>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <xTaskIncrementTick+0x154>)
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	0013      	movs	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	189b      	adds	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <xTaskIncrementTick+0x158>)
 800471a:	189a      	adds	r2, r3, r2
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3304      	adds	r3, #4
 8004720:	0019      	movs	r1, r3
 8004722:	0010      	movs	r0, r2
 8004724:	f7ff f872 	bl	800380c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <xTaskIncrementTick+0x15c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d3b3      	bcc.n	800469e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473a:	e7b0      	b.n	800469e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <xTaskIncrementTick+0x15c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4914      	ldr	r1, [pc, #80]	; (8004794 <xTaskIncrementTick+0x158>)
 8004744:	0013      	movs	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	189b      	adds	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	585b      	ldr	r3, [r3, r1]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d907      	bls.n	8004762 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e004      	b.n	8004762 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <xTaskIncrementTick+0x160>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xTaskIncrementTick+0x160>)
 8004760:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <xTaskIncrementTick+0x164>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800476e:	697b      	ldr	r3, [r7, #20]
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b006      	add	sp, #24
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000388 	.word	0x20000388
 800477c:	20000364 	.word	0x20000364
 8004780:	20000318 	.word	0x20000318
 8004784:	2000031c 	.word	0x2000031c
 8004788:	20000378 	.word	0x20000378
 800478c:	20000380 	.word	0x20000380
 8004790:	20000368 	.word	0x20000368
 8004794:	20000264 	.word	0x20000264
 8004798:	20000260 	.word	0x20000260
 800479c:	20000370 	.word	0x20000370
 80047a0:	20000374 	.word	0x20000374

080047a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047aa:	4b25      	ldr	r3, [pc, #148]	; (8004840 <vTaskSwitchContext+0x9c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <vTaskSwitchContext+0xa0>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047b8:	e03d      	b.n	8004836 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <vTaskSwitchContext+0xa0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <vTaskSwitchContext+0xa4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	e007      	b.n	80047d8 <vTaskSwitchContext+0x34>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <vTaskSwitchContext+0x2e>
 80047ce:	b672      	cpsid	i
 80047d0:	e7fe      	b.n	80047d0 <vTaskSwitchContext+0x2c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	491c      	ldr	r1, [pc, #112]	; (800484c <vTaskSwitchContext+0xa8>)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	0013      	movs	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	585b      	ldr	r3, [r3, r1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ee      	beq.n	80047c8 <vTaskSwitchContext+0x24>
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	0013      	movs	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <vTaskSwitchContext+0xa8>)
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	429a      	cmp	r2, r3
 800480e:	d104      	bne.n	800481a <vTaskSwitchContext+0x76>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vTaskSwitchContext+0xac>)
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <vTaskSwitchContext+0xa4>)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <vTaskSwitchContext+0xac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	334c      	adds	r3, #76	; 0x4c
 8004830:	001a      	movs	r2, r3
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <vTaskSwitchContext+0xb0>)
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000388 	.word	0x20000388
 8004844:	20000374 	.word	0x20000374
 8004848:	20000368 	.word	0x20000368
 800484c:	20000264 	.word	0x20000264
 8004850:	20000260 	.word	0x20000260
 8004854:	20000058 	.word	0x20000058

08004858 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <vTaskPlaceOnEventList+0x14>
 8004868:	b672      	cpsid	i
 800486a:	e7fe      	b.n	800486a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <vTaskPlaceOnEventList+0x38>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3318      	adds	r3, #24
 8004872:	001a      	movs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0011      	movs	r1, r2
 8004878:	0018      	movs	r0, r3
 800487a:	f7fe ffe9 	bl	8003850 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2101      	movs	r1, #1
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fa2a 	bl	8004cdc <prvAddCurrentTaskToDelayedList>
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000260 	.word	0x20000260

08004894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <vTaskPlaceOnEventListRestricted+0x16>
 80048a6:	b672      	cpsid	i
 80048a8:	e7fe      	b.n	80048a8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <vTaskPlaceOnEventListRestricted+0x48>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3318      	adds	r3, #24
 80048b0:	001a      	movs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0011      	movs	r1, r2
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7fe ffa8 	bl	800380c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80048c2:	2301      	movs	r3, #1
 80048c4:	425b      	negs	r3, r3
 80048c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fa04 	bl	8004cdc <prvAddCurrentTaskToDelayedList>
	}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b004      	add	sp, #16
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000260 	.word	0x20000260

080048e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <xTaskRemoveFromEventList+0x1a>
 80048f6:	b672      	cpsid	i
 80048f8:	e7fe      	b.n	80048f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3318      	adds	r3, #24
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fe ffdc 	bl	80038bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <xTaskRemoveFromEventList+0xa0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11d      	bne.n	8004948 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3304      	adds	r3, #4
 8004910:	0018      	movs	r0, r3
 8004912:	f7fe ffd3 	bl	80038bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <xTaskRemoveFromEventList+0xa4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d903      	bls.n	800492a <xTaskRemoveFromEventList+0x4a>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4b17      	ldr	r3, [pc, #92]	; (8004984 <xTaskRemoveFromEventList+0xa4>)
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492e:	0013      	movs	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	189b      	adds	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <xTaskRemoveFromEventList+0xa8>)
 8004938:	189a      	adds	r2, r3, r2
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3304      	adds	r3, #4
 800493e:	0019      	movs	r1, r3
 8004940:	0010      	movs	r0, r2
 8004942:	f7fe ff63 	bl	800380c <vListInsertEnd>
 8004946:	e007      	b.n	8004958 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3318      	adds	r3, #24
 800494c:	001a      	movs	r2, r3
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <xTaskRemoveFromEventList+0xac>)
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f7fe ff5a 	bl	800380c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <xTaskRemoveFromEventList+0xb0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	429a      	cmp	r2, r3
 8004964:	d905      	bls.n	8004972 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004966:	2301      	movs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <xTaskRemoveFromEventList+0xb4>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e001      	b.n	8004976 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004976:	68fb      	ldr	r3, [r7, #12]
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b004      	add	sp, #16
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000388 	.word	0x20000388
 8004984:	20000368 	.word	0x20000368
 8004988:	20000264 	.word	0x20000264
 800498c:	20000320 	.word	0x20000320
 8004990:	20000260 	.word	0x20000260
 8004994:	20000374 	.word	0x20000374

08004998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <vTaskInternalSetTimeOutState+0x20>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <vTaskInternalSetTimeOutState+0x24>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000378 	.word	0x20000378
 80049bc:	20000364 	.word	0x20000364

080049c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <xTaskCheckForTimeOut+0x14>
 80049d0:	b672      	cpsid	i
 80049d2:	e7fe      	b.n	80049d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xTaskCheckForTimeOut+0x1e>
 80049da:	b672      	cpsid	i
 80049dc:	e7fe      	b.n	80049dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80049de:	f000 fd67 	bl	80054b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <xTaskCheckForTimeOut+0x98>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	d102      	bne.n	8004a00 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e024      	b.n	8004a4a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <xTaskCheckForTimeOut+0x9c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d007      	beq.n	8004a1c <xTaskCheckForTimeOut+0x5c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a16:	2301      	movs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e016      	b.n	8004a4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d20c      	bcs.n	8004a40 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad2      	subs	r2, r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff ffaf 	bl	8004998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e004      	b.n	8004a4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004a4a:	f000 fd43 	bl	80054d4 <vPortExitCritical>

	return xReturn;
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b006      	add	sp, #24
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000364 	.word	0x20000364
 8004a5c:	20000378 	.word	0x20000378

08004a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a64:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <vTaskMissedYield+0x10>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000374 	.word	0x20000374

08004a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a7c:	f000 f84e 	bl	8004b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <prvIdleTask+0x1c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d9f9      	bls.n	8004a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a88:	f000 fd02 	bl	8005490 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a8c:	e7f6      	b.n	8004a7c <prvIdleTask+0x8>
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	20000264 	.word	0x20000264

08004a94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	e00c      	b.n	8004aba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <prvInitialiseTaskLists+0x68>)
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fe fe83 	bl	80037ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d9ef      	bls.n	8004aa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <prvInitialiseTaskLists+0x6c>)
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7fe fe79 	bl	80037ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <prvInitialiseTaskLists+0x70>)
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7fe fe75 	bl	80037ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <prvInitialiseTaskLists+0x74>)
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fe fe71 	bl	80037ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvInitialiseTaskLists+0x78>)
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fe fe6d 	bl	80037ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <prvInitialiseTaskLists+0x7c>)
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7fe fe69 	bl	80037ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <prvInitialiseTaskLists+0x80>)
 8004aea:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <prvInitialiseTaskLists+0x6c>)
 8004aec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <prvInitialiseTaskLists+0x84>)
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <prvInitialiseTaskLists+0x70>)
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000264 	.word	0x20000264
 8004b00:	200002f0 	.word	0x200002f0
 8004b04:	20000304 	.word	0x20000304
 8004b08:	20000320 	.word	0x20000320
 8004b0c:	20000334 	.word	0x20000334
 8004b10:	2000034c 	.word	0x2000034c
 8004b14:	20000318 	.word	0x20000318
 8004b18:	2000031c 	.word	0x2000031c

08004b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b22:	e01a      	b.n	8004b5a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004b24:	f000 fcc4 	bl	80054b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <prvCheckTasksWaitingTermination+0x50>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7fe fec1 	bl	80038bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <prvCheckTasksWaitingTermination+0x54>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <prvCheckTasksWaitingTermination+0x54>)
 8004b42:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <prvCheckTasksWaitingTermination+0x58>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <prvCheckTasksWaitingTermination+0x58>)
 8004b4c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004b4e:	f000 fcc1 	bl	80054d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 f80f 	bl	8004b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <prvCheckTasksWaitingTermination+0x58>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e0      	bne.n	8004b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000334 	.word	0x20000334
 8004b70:	20000360 	.word	0x20000360
 8004b74:	20000348 	.word	0x20000348

08004b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	334c      	adds	r3, #76	; 0x4c
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 ffc1 	bl	8005b0c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 fdcc 	bl	800572c <vPortFree>
			vPortFree( pxTCB );
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 fdc8 	bl	800572c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <prvResetNextTaskUnblockTime+0x40>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <prvResetNextTaskUnblockTime+0x14>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <prvResetNextTaskUnblockTime+0x16>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <prvResetNextTaskUnblockTime+0x44>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4252      	negs	r2, r2
 8004bc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc6:	e008      	b.n	8004bda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <prvResetNextTaskUnblockTime+0x40>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <prvResetNextTaskUnblockTime+0x44>)
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	20000318 	.word	0x20000318
 8004be8:	20000380 	.word	0x20000380

08004bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <xTaskGetSchedulerState+0x30>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	e008      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <xTaskGetSchedulerState+0x34>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e001      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c12:	687b      	ldr	r3, [r7, #4]
	}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	2000036c 	.word	0x2000036c
 8004c20:	20000388 	.word	0x20000388

08004c24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d044      	beq.n	8004cc4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c3a:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <xTaskPriorityDisinherit+0xac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <xTaskPriorityDisinherit+0x24>
 8004c44:	b672      	cpsid	i
 8004c46:	e7fe      	b.n	8004c46 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <xTaskPriorityDisinherit+0x30>
 8004c50:	b672      	cpsid	i
 8004c52:	e7fe      	b.n	8004c52 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	1e5a      	subs	r2, r3, #1
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d02c      	beq.n	8004cc4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d128      	bne.n	8004cc4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3304      	adds	r3, #4
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fe fe20 	bl	80038bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	2207      	movs	r2, #7
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <xTaskPriorityDisinherit+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d903      	bls.n	8004ca4 <xTaskPriorityDisinherit+0x80>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <xTaskPriorityDisinherit+0xb0>)
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	0013      	movs	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <xTaskPriorityDisinherit+0xb4>)
 8004cb2:	189a      	adds	r2, r3, r2
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	0019      	movs	r1, r3
 8004cba:	0010      	movs	r0, r2
 8004cbc:	f7fe fda6 	bl	800380c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b004      	add	sp, #16
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	20000260 	.word	0x20000260
 8004cd4:	20000368 	.word	0x20000368
 8004cd8:	20000264 	.word	0x20000264

08004cdc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7fe fde2 	bl	80038bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	d10b      	bne.n	8004d16 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7fe fd7c 	bl	800380c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d14:	e026      	b.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	18d3      	adds	r3, r2, r3
 8004d1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d209      	bcs.n	8004d42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	0019      	movs	r1, r3
 8004d3a:	0010      	movs	r0, r2
 8004d3c:	f7fe fd88 	bl	8003850 <vListInsert>
}
 8004d40:	e010      	b.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	0010      	movs	r0, r2
 8004d50:	f7fe fd7e 	bl	8003850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d202      	bcs.n	8004d64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b004      	add	sp, #16
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000364 	.word	0x20000364
 8004d70:	20000260 	.word	0x20000260
 8004d74:	2000034c 	.word	0x2000034c
 8004d78:	2000031c 	.word	0x2000031c
 8004d7c:	20000318 	.word	0x20000318
 8004d80:	20000380 	.word	0x20000380

08004d84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d8e:	f000 faa1 	bl	80052d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d92:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <xTimerCreateTimerTask+0x44>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	005a      	lsls	r2, r3, #1
 8004d9e:	490b      	ldr	r1, [pc, #44]	; (8004dcc <xTimerCreateTimerTask+0x48>)
 8004da0:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <xTimerCreateTimerTask+0x4c>)
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <xTimerCreateTimerTask+0x50>)
 8004da4:	9301      	str	r3, [sp, #4]
 8004da6:	2303      	movs	r3, #3
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2300      	movs	r3, #0
 8004dac:	f7ff f9b9 	bl	8004122 <xTaskCreate>
 8004db0:	0003      	movs	r3, r0
 8004db2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xTimerCreateTimerTask+0x3a>
 8004dba:	b672      	cpsid	i
 8004dbc:	e7fe      	b.n	8004dbc <xTimerCreateTimerTask+0x38>
	return xReturn;
 8004dbe:	687b      	ldr	r3, [r7, #4]
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b002      	add	sp, #8
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200003bc 	.word	0x200003bc
 8004dcc:	08005d1c 	.word	0x08005d1c
 8004dd0:	08004f6d 	.word	0x08004f6d
 8004dd4:	200003c0 	.word	0x200003c0

08004dd8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004de6:	2028      	movs	r0, #40	; 0x28
 8004de8:	f000 fbfa 	bl	80055e0 <pvPortMalloc>
 8004dec:	0003      	movs	r3, r0
 8004dee:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004df6:	683c      	ldr	r4, [r7, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	0023      	movs	r3, r4
 8004e08:	f000 f805 	bl	8004e16 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004e0c:	697b      	ldr	r3, [r7, #20]
	}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b007      	add	sp, #28
 8004e14:	bd90      	pop	{r4, r7, pc}

08004e16 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <prvInitialiseNewTimer+0x18>
 8004e2a:	b672      	cpsid	i
 8004e2c:	e7fe      	b.n	8004e2c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004e34:	f000 fa4e 	bl	80052d4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7fe fccb 	bl	80037f6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b004      	add	sp, #16
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <xTimerGenericCommand+0x1c>
 8004e80:	b672      	cpsid	i
 8004e82:	e7fe      	b.n	8004e82 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <xTimerGenericCommand+0x90>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d030      	beq.n	8004eee <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e8c:	2410      	movs	r4, #16
 8004e8e:	193b      	adds	r3, r7, r4
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e94:	193b      	adds	r3, r7, r4
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	dc19      	bgt.n	8004eda <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ea6:	f7ff fea1 	bl	8004bec <xTaskGetSchedulerState>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d109      	bne.n	8004ec4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <xTimerGenericCommand+0x90>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb6:	1939      	adds	r1, r7, r4
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f7fe fdcf 	bl	8003a5c <xQueueGenericSend>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e014      	b.n	8004eee <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <xTimerGenericCommand+0x90>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	2310      	movs	r3, #16
 8004eca:	18f9      	adds	r1, r7, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f7fe fdc4 	bl	8003a5c <xQueueGenericSend>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	e009      	b.n	8004eee <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <xTimerGenericCommand+0x90>)
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	18f9      	adds	r1, r7, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f7fe fe7d 	bl	8003be4 <xQueueGenericSendFromISR>
 8004eea:	0003      	movs	r3, r0
 8004eec:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004eee:	69fb      	ldr	r3, [r7, #28]
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b009      	add	sp, #36	; 0x24
 8004ef6:	bd90      	pop	{r4, r7, pc}
 8004ef8:	200003bc 	.word	0x200003bc

08004efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <prvProcessExpiredTimer+0x6c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3304      	adds	r3, #4
 8004f14:	0018      	movs	r0, r3
 8004f16:	f7fe fcd1 	bl	80038bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	18d1      	adds	r1, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f8b6 	bl	80050a0 <prvInsertTimerInActiveList>
 8004f34:	1e03      	subs	r3, r0, #0
 8004f36:	d00e      	beq.n	8004f56 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2300      	movs	r3, #0
 8004f42:	2100      	movs	r1, #0
 8004f44:	f7ff ff90 	bl	8004e68 <xTimerGenericCommand>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <prvProcessExpiredTimer+0x5a>
 8004f52:	b672      	cpsid	i
 8004f54:	e7fe      	b.n	8004f54 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	0010      	movs	r0, r2
 8004f5e:	4798      	blx	r3
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200003b4 	.word	0x200003b4

08004f6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f74:	2308      	movs	r3, #8
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 f851 	bl	8005020 <prvGetNextExpireTime>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0011      	movs	r1, r2
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f803 	bl	8004f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f8e:	f000 f8c9 	bl	8005124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f92:	e7ef      	b.n	8004f74 <prvTimerTask+0x8>

08004f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f9e:	f7ff faa7 	bl	80044f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 f85a 	bl	8005060 <prvSampleTimeNow>
 8004fac:	0003      	movs	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d129      	bne.n	800500a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <prvProcessTimerOrBlockTask+0x42>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d808      	bhi.n	8004fd6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004fc4:	f7ff faa0 	bl	8004508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0011      	movs	r1, r2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7ff ff94 	bl	8004efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fd4:	e01b      	b.n	800500e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d006      	beq.n	8004fea <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <prvProcessTimerOrBlockTask+0x84>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	425a      	negs	r2, r3
 8004fe4:	4153      	adcs	r3, r2
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <prvProcessTimerOrBlockTask+0x88>)
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	f7ff f860 	bl	80040bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ffc:	f7ff fa84 	bl	8004508 <xTaskResumeAll>
 8005000:	1e03      	subs	r3, r0, #0
 8005002:	d104      	bne.n	800500e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005004:	f000 fa44 	bl	8005490 <vPortYield>
}
 8005008:	e001      	b.n	800500e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800500a:	f7ff fa7d 	bl	8004508 <xTaskResumeAll>
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	200003b8 	.word	0x200003b8
 800501c:	200003bc 	.word	0x200003bc

08005020 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <prvGetNextExpireTime+0x3c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	425a      	negs	r2, r3
 8005030:	4153      	adcs	r3, r2
 8005032:	b2db      	uxtb	r3, r3
 8005034:	001a      	movs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <prvGetNextExpireTime+0x3c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b004      	add	sp, #16
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200003b4 	.word	0x200003b4

08005060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005068:	f7ff fada 	bl	8004620 <xTaskGetTickCount>
 800506c:	0003      	movs	r3, r0
 800506e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <prvSampleTimeNow+0x3c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d205      	bcs.n	8005086 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800507a:	f000 f8d1 	bl	8005220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e002      	b.n	800508c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <prvSampleTimeNow+0x3c>)
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005092:	68fb      	ldr	r3, [r7, #12]
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b004      	add	sp, #16
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200003c4 	.word	0x200003c4

080050a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d812      	bhi.n	80050ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e01b      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <prvInsertTimerInActiveList+0x7c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3304      	adds	r3, #4
 80050e2:	0019      	movs	r1, r3
 80050e4:	0010      	movs	r0, r2
 80050e6:	f7fe fbb3 	bl	8003850 <vListInsert>
 80050ea:	e012      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d206      	bcs.n	8005102 <prvInsertTimerInActiveList+0x62>
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e007      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <prvInsertTimerInActiveList+0x80>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3304      	adds	r3, #4
 800510a:	0019      	movs	r1, r3
 800510c:	0010      	movs	r0, r2
 800510e:	f7fe fb9f 	bl	8003850 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b006      	add	sp, #24
 800511a:	bd80      	pop	{r7, pc}
 800511c:	200003b8 	.word	0x200003b8
 8005120:	200003b4 	.word	0x200003b4

08005124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b08b      	sub	sp, #44	; 0x2c
 8005128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512a:	e065      	b.n	80051f8 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800512c:	2208      	movs	r2, #8
 800512e:	18bb      	adds	r3, r7, r2
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	db60      	blt.n	80051f8 <prvProcessReceivedCommands+0xd4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005136:	18bb      	adds	r3, r7, r2
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3304      	adds	r3, #4
 8005148:	0018      	movs	r0, r3
 800514a:	f7fe fbb7 	bl	80038bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff ff85 	bl	8005060 <prvSampleTimeNow>
 8005156:	0003      	movs	r3, r0
 8005158:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 800515a:	2308      	movs	r3, #8
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b09      	cmp	r3, #9
 8005162:	d848      	bhi.n	80051f6 <prvProcessReceivedCommands+0xd2>
 8005164:	009a      	lsls	r2, r3, #2
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <prvProcessReceivedCommands+0xf4>)
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800516e:	2408      	movs	r4, #8
 8005170:	193b      	adds	r3, r7, r4
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	18d1      	adds	r1, r2, r3
 800517a:	193b      	adds	r3, r7, r4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	69f8      	ldr	r0, [r7, #28]
 8005182:	f7ff ff8d 	bl	80050a0 <prvInsertTimerInActiveList>
 8005186:	1e03      	subs	r3, r0, #0
 8005188:	d036      	beq.n	80051f8 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	0010      	movs	r0, r2
 8005192:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d12d      	bne.n	80051f8 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800519c:	193b      	adds	r3, r7, r4
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	18d2      	adds	r2, r2, r3
 80051a6:	69f8      	ldr	r0, [r7, #28]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	f7ff fe5a 	bl	8004e68 <xTimerGenericCommand>
 80051b4:	0003      	movs	r3, r0
 80051b6:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11c      	bne.n	80051f8 <prvProcessReceivedCommands+0xd4>
 80051be:	b672      	cpsid	i
 80051c0:	e7fe      	b.n	80051c0 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051c2:	2308      	movs	r3, #8
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <prvProcessReceivedCommands+0xb4>
 80051d4:	b672      	cpsid	i
 80051d6:	e7fe      	b.n	80051d6 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	18d1      	adds	r1, r2, r3
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	69f8      	ldr	r0, [r7, #28]
 80051e6:	f7ff ff5b 	bl	80050a0 <prvInsertTimerInActiveList>
					break;
 80051ea:	e005      	b.n	80051f8 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fa9c 	bl	800572c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051f4:	e000      	b.n	80051f8 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
 80051f6:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <prvProcessReceivedCommands+0xf8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2208      	movs	r2, #8
 80051fe:	18b9      	adds	r1, r7, r2
 8005200:	2200      	movs	r2, #0
 8005202:	0018      	movs	r0, r3
 8005204:	f7fe fd5f 	bl	8003cc6 <xQueueReceive>
 8005208:	1e03      	subs	r3, r0, #0
 800520a:	d18f      	bne.n	800512c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	b009      	add	sp, #36	; 0x24
 8005214:	bd90      	pop	{r4, r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	08005da0 	.word	0x08005da0
 800521c:	200003bc 	.word	0x200003bc

08005220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005226:	e03e      	b.n	80052a6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <prvSwitchTimerLists+0xac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <prvSwitchTimerLists+0xac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	0018      	movs	r0, r3
 8005242:	f7fe fb3b 	bl	80038bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	0010      	movs	r0, r2
 800524e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d126      	bne.n	80052a6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	18d3      	adds	r3, r2, r3
 8005260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d90e      	bls.n	8005288 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <prvSwitchTimerLists+0xac>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3304      	adds	r3, #4
 800527e:	0019      	movs	r1, r3
 8005280:	0010      	movs	r0, r2
 8005282:	f7fe fae5 	bl	8003850 <vListInsert>
 8005286:	e00e      	b.n	80052a6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	2300      	movs	r3, #0
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2300      	movs	r3, #0
 8005292:	2100      	movs	r1, #0
 8005294:	f7ff fde8 	bl	8004e68 <xTimerGenericCommand>
 8005298:	0003      	movs	r3, r0
 800529a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <prvSwitchTimerLists+0x86>
 80052a2:	b672      	cpsid	i
 80052a4:	e7fe      	b.n	80052a4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a6:	4b09      	ldr	r3, [pc, #36]	; (80052cc <prvSwitchTimerLists+0xac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1bb      	bne.n	8005228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <prvSwitchTimerLists+0xac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <prvSwitchTimerLists+0xb0>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b04      	ldr	r3, [pc, #16]	; (80052cc <prvSwitchTimerLists+0xac>)
 80052bc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <prvSwitchTimerLists+0xb0>)
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b006      	add	sp, #24
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	200003b4 	.word	0x200003b4
 80052d0:	200003b8 	.word	0x200003b8

080052d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052d8:	f000 f8ea 	bl	80054b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <prvCheckForValidListAndQueue+0x5c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d120      	bne.n	8005326 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80052e4:	4b13      	ldr	r3, [pc, #76]	; (8005334 <prvCheckForValidListAndQueue+0x60>)
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fe fa67 	bl	80037ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052ec:	4b12      	ldr	r3, [pc, #72]	; (8005338 <prvCheckForValidListAndQueue+0x64>)
 80052ee:	0018      	movs	r0, r3
 80052f0:	f7fe fa63 	bl	80037ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <prvCheckForValidListAndQueue+0x68>)
 80052f6:	4a0f      	ldr	r2, [pc, #60]	; (8005334 <prvCheckForValidListAndQueue+0x60>)
 80052f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <prvCheckForValidListAndQueue+0x6c>)
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <prvCheckForValidListAndQueue+0x64>)
 80052fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005300:	2200      	movs	r2, #0
 8005302:	210c      	movs	r1, #12
 8005304:	2004      	movs	r0, #4
 8005306:	f7fe fb55 	bl	80039b4 <xQueueGenericCreate>
 800530a:	0002      	movs	r2, r0
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <prvCheckForValidListAndQueue+0x5c>)
 800530e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <prvCheckForValidListAndQueue+0x5c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <prvCheckForValidListAndQueue+0x5c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a09      	ldr	r2, [pc, #36]	; (8005344 <prvCheckForValidListAndQueue+0x70>)
 800531e:	0011      	movs	r1, r2
 8005320:	0018      	movs	r0, r3
 8005322:	f7fe fea3 	bl	800406c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005326:	f000 f8d5 	bl	80054d4 <vPortExitCritical>
}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200003bc 	.word	0x200003bc
 8005334:	2000038c 	.word	0x2000038c
 8005338:	200003a0 	.word	0x200003a0
 800533c:	200003b4 	.word	0x200003b4
 8005340:	200003b8 	.word	0x200003b8
 8005344:	08005d24 	.word	0x08005d24

08005348 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <pvTimerGetTimerID+0x16>
 800535a:	b672      	cpsid	i
 800535c:	e7fe      	b.n	800535c <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800535e:	f000 f8a7 	bl	80054b0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8005368:	f000 f8b4 	bl	80054d4 <vPortExitCritical>

	return pvReturn;
 800536c:	68bb      	ldr	r3, [r7, #8]
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b004      	add	sp, #16
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b04      	subs	r3, #4
 8005388:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	0452      	lsls	r2, r2, #17
 8005390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3b04      	subs	r3, #4
 8005396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b04      	subs	r3, #4
 80053a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053a4:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <pxPortInitialiseStack+0x50>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b14      	subs	r3, #20
 80053ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b20      	subs	r3, #32
 80053ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b004      	add	sp, #16
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	080053cd 	.word	0x080053cd

080053cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <prvTaskExitError+0x2c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	d001      	beq.n	80053e2 <prvTaskExitError+0x16>
 80053de:	b672      	cpsid	i
 80053e0:	e7fe      	b.n	80053e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80053e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0fc      	beq.n	80053e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b002      	add	sp, #8
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	20000008 	.word	0x20000008

080053fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005410 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <pxCurrentTCBConst2>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	3020      	adds	r0, #32
 8005418:	f380 8809 	msr	PSP, r0
 800541c:	2002      	movs	r0, #2
 800541e:	f380 8814 	msr	CONTROL, r0
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005428:	46ae      	mov	lr, r5
 800542a:	bc08      	pop	{r3}
 800542c:	bc04      	pop	{r2}
 800542e:	b662      	cpsie	i
 8005430:	4718      	bx	r3
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46c0      	nop			; (mov r8, r8)

08005440 <pxCurrentTCBConst2>:
 8005440:	20000260 	.word	0x20000260
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46c0      	nop			; (mov r8, r8)

08005448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <xPortStartScheduler+0x40>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <xPortStartScheduler+0x40>)
 8005452:	21ff      	movs	r1, #255	; 0xff
 8005454:	0409      	lsls	r1, r1, #16
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <xPortStartScheduler+0x40>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <xPortStartScheduler+0x40>)
 8005460:	21ff      	movs	r1, #255	; 0xff
 8005462:	0609      	lsls	r1, r1, #24
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005468:	f000 f898 	bl	800559c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <xPortStartScheduler+0x44>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005472:	f7ff ffcd 	bl	8005410 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005476:	f7ff f995 	bl	80047a4 <vTaskSwitchContext>
	prvTaskExitError();
 800547a:	f7ff ffa7 	bl	80053cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800547e:	2300      	movs	r3, #0
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	e000ed20 	.word	0xe000ed20
 800548c:	20000008 	.word	0x20000008

08005490 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <vPortYield+0x1c>)
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	0552      	lsls	r2, r2, #21
 800549a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800549c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80054a0:	f3bf 8f6f 	isb	sy
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80054b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <vPortEnterCritical+0x20>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <vPortEnterCritical+0x20>)
 80054be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80054c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80054c4:	f3bf 8f6f 	isb	sy
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	20000008 	.word	0x20000008

080054d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <vPortExitCritical+0x2c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <vPortExitCritical+0x10>
 80054e0:	b672      	cpsid	i
 80054e2:	e7fe      	b.n	80054e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <vPortExitCritical+0x2c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1e5a      	subs	r2, r3, #1
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <vPortExitCritical+0x2c>)
 80054ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <vPortExitCritical+0x2c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d100      	bne.n	80054f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80054f6:	b662      	cpsie	i
    }
}
 80054f8:	46c0      	nop			; (mov r8, r8)
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000008 	.word	0x20000008

08005504 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005504:	f3ef 8010 	mrs	r0, PRIMASK
 8005508:	b672      	cpsid	i
 800550a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	0018      	movs	r0, r3

08005510 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005510:	f380 8810 	msr	PRIMASK, r0
 8005514:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005516:	46c0      	nop			; (mov r8, r8)
	...

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <pxCurrentTCBConst>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	3820      	subs	r0, #32
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800552e:	4644      	mov	r4, r8
 8005530:	464d      	mov	r5, r9
 8005532:	4656      	mov	r6, sl
 8005534:	465f      	mov	r7, fp
 8005536:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005538:	b508      	push	{r3, lr}
 800553a:	b672      	cpsid	i
 800553c:	f7ff f932 	bl	80047a4 <vTaskSwitchContext>
 8005540:	b662      	cpsie	i
 8005542:	bc0c      	pop	{r2, r3}
 8005544:	6811      	ldr	r1, [r2, #0]
 8005546:	6808      	ldr	r0, [r1, #0]
 8005548:	3010      	adds	r0, #16
 800554a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800554c:	46a0      	mov	r8, r4
 800554e:	46a9      	mov	r9, r5
 8005550:	46b2      	mov	sl, r6
 8005552:	46bb      	mov	fp, r7
 8005554:	f380 8809 	msr	PSP, r0
 8005558:	3820      	subs	r0, #32
 800555a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800555c:	4718      	bx	r3
 800555e:	46c0      	nop			; (mov r8, r8)

08005560 <pxCurrentTCBConst>:
 8005560:	20000260 	.word	0x20000260
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46c0      	nop			; (mov r8, r8)

08005568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800556e:	f7ff ffc9 	bl	8005504 <ulSetInterruptMaskFromISR>
 8005572:	0003      	movs	r3, r0
 8005574:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005576:	f7ff f861 	bl	800463c <xTaskIncrementTick>
 800557a:	1e03      	subs	r3, r0, #0
 800557c:	d003      	beq.n	8005586 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SysTick_Handler+0x30>)
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	0552      	lsls	r2, r2, #21
 8005584:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f7ff ffc1 	bl	8005510 <vClearInterruptMaskFromISR>
}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	b002      	add	sp, #8
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <prvSetupTimerInterrupt+0x34>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <prvSetupTimerInterrupt+0x38>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <prvSetupTimerInterrupt+0x3c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	22fa      	movs	r2, #250	; 0xfa
 80055b2:	0091      	lsls	r1, r2, #2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fa fda7 	bl	8000108 <__udivsi3>
 80055ba:	0003      	movs	r3, r0
 80055bc:	001a      	movs	r2, r3
 80055be:	4b07      	ldr	r3, [pc, #28]	; (80055dc <prvSetupTimerInterrupt+0x40>)
 80055c0:	3a01      	subs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <prvSetupTimerInterrupt+0x34>)
 80055c6:	2207      	movs	r2, #7
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	e000e010 	.word	0xe000e010
 80055d4:	e000e018 	.word	0xe000e018
 80055d8:	20000000 	.word	0x20000000
 80055dc:	e000e014 	.word	0xe000e014

080055e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80055ec:	f7fe ff80 	bl	80044f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <pvPortMalloc+0x138>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055f8:	f000 f8e0 	bl	80057bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055fc:	4b47      	ldr	r3, [pc, #284]	; (800571c <pvPortMalloc+0x13c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4013      	ands	r3, r2
 8005604:	d000      	beq.n	8005608 <pvPortMalloc+0x28>
 8005606:	e079      	b.n	80056fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800560e:	2208      	movs	r2, #8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	189b      	adds	r3, r3, r2
 8005614:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2207      	movs	r2, #7
 800561a:	4013      	ands	r3, r2
 800561c:	d00a      	beq.n	8005634 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2207      	movs	r2, #7
 8005622:	4393      	bics	r3, r2
 8005624:	3308      	adds	r3, #8
 8005626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2207      	movs	r2, #7
 800562c:	4013      	ands	r3, r2
 800562e:	d001      	beq.n	8005634 <pvPortMalloc+0x54>
 8005630:	b672      	cpsid	i
 8005632:	e7fe      	b.n	8005632 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d060      	beq.n	80056fc <pvPortMalloc+0x11c>
 800563a:	4b39      	ldr	r3, [pc, #228]	; (8005720 <pvPortMalloc+0x140>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d85b      	bhi.n	80056fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005644:	4b37      	ldr	r3, [pc, #220]	; (8005724 <pvPortMalloc+0x144>)
 8005646:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005648:	4b36      	ldr	r3, [pc, #216]	; (8005724 <pvPortMalloc+0x144>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564e:	e004      	b.n	800565a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <pvPortMalloc+0x8c>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f1      	bne.n	8005650 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <pvPortMalloc+0x138>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d042      	beq.n	80056fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2208      	movs	r2, #8
 800567c:	189b      	adds	r3, r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	2308      	movs	r3, #8
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	429a      	cmp	r2, r3
 8005696:	d916      	bls.n	80056c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2207      	movs	r2, #7
 80056a4:	4013      	ands	r3, r2
 80056a6:	d001      	beq.n	80056ac <pvPortMalloc+0xcc>
 80056a8:	b672      	cpsid	i
 80056aa:	e7fe      	b.n	80056aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f000 f8db 	bl	800587c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <pvPortMalloc+0x140>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <pvPortMalloc+0x140>)
 80056d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <pvPortMalloc+0x140>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <pvPortMalloc+0x148>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <pvPortMalloc+0x140>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <pvPortMalloc+0x148>)
 80056e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <pvPortMalloc+0x13c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056fc:	f7fe ff04 	bl	8004508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2207      	movs	r2, #7
 8005704:	4013      	ands	r3, r2
 8005706:	d001      	beq.n	800570c <pvPortMalloc+0x12c>
 8005708:	b672      	cpsid	i
 800570a:	e7fe      	b.n	800570a <pvPortMalloc+0x12a>
	return pvReturn;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	0018      	movs	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	b006      	add	sp, #24
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	200043d0 	.word	0x200043d0
 800571c:	200043dc 	.word	0x200043dc
 8005720:	200043d4 	.word	0x200043d4
 8005724:	200043c8 	.word	0x200043c8
 8005728:	200043d8 	.word	0x200043d8

0800572c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d035      	beq.n	80057aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800573e:	2308      	movs	r3, #8
 8005740:	425b      	negs	r3, r3
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <vPortFree+0x88>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	d101      	bne.n	800575c <vPortFree+0x30>
 8005758:	b672      	cpsid	i
 800575a:	e7fe      	b.n	800575a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <vPortFree+0x3c>
 8005764:	b672      	cpsid	i
 8005766:	e7fe      	b.n	8005766 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <vPortFree+0x88>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4013      	ands	r3, r2
 8005772:	d01a      	beq.n	80057aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <vPortFree+0x88>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800578c:	f7fe feb0 	bl	80044f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <vPortFree+0x8c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	18d2      	adds	r2, r2, r3
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <vPortFree+0x8c>)
 800579c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f000 f86b 	bl	800587c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057a6:	f7fe feaf 	bl	8004508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b004      	add	sp, #16
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	200043dc 	.word	0x200043dc
 80057b8:	200043d4 	.word	0x200043d4

080057bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057c8:	4b26      	ldr	r3, [pc, #152]	; (8005864 <prvHeapInit+0xa8>)
 80057ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2207      	movs	r2, #7
 80057d0:	4013      	ands	r3, r2
 80057d2:	d00c      	beq.n	80057ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3307      	adds	r3, #7
 80057d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2207      	movs	r2, #7
 80057de:	4393      	bics	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <prvHeapInit+0xa8>)
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <prvHeapInit+0xac>)
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <prvHeapInit+0xac>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	18d3      	adds	r3, r2, r3
 8005804:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005806:	2208      	movs	r2, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2207      	movs	r2, #7
 8005812:	4393      	bics	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <prvHeapInit+0xb0>)
 800581a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <prvHeapInit+0xb0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <prvHeapInit+0xb0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	1ad2      	subs	r2, r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <prvHeapInit+0xb0>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <prvHeapInit+0xb4>)
 8005848:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <prvHeapInit+0xb8>)
 8005850:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <prvHeapInit+0xbc>)
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	0612      	lsls	r2, r2, #24
 8005858:	601a      	str	r2, [r3, #0]
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b004      	add	sp, #16
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	200003c8 	.word	0x200003c8
 8005868:	200043c8 	.word	0x200043c8
 800586c:	200043d0 	.word	0x200043d0
 8005870:	200043d8 	.word	0x200043d8
 8005874:	200043d4 	.word	0x200043d4
 8005878:	200043dc 	.word	0x200043dc

0800587c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <prvInsertBlockIntoFreeList+0xa8>)
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e002      	b.n	8005890 <prvInsertBlockIntoFreeList+0x14>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d8f7      	bhi.n	800588a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	18d3      	adds	r3, r2, r3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d108      	bne.n	80058be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	18d2      	adds	r2, r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	18d2      	adds	r2, r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d118      	bne.n	8005904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <prvInsertBlockIntoFreeList+0xac>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d00d      	beq.n	80058fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	18d2      	adds	r2, r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e008      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <prvInsertBlockIntoFreeList+0xac>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e003      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d002      	beq.n	800591a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	b004      	add	sp, #16
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	200043c8 	.word	0x200043c8
 8005928:	200043d0 	.word	0x200043d0

0800592c <MessagingTask>:
/*
 * @brief: Task for handling messaging.
 * @param: argument - pointer to the task argument.
 * @retval: None
 */
void MessagingTask(void const *argument) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

	vTaskDelete(NULL);
 8005934:	2000      	movs	r0, #0
 8005936:	f7fe fd31 	bl	800439c <vTaskDelete>
}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	46bd      	mov	sp, r7
 800593e:	b002      	add	sp, #8
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <TMOUT_HandleTimer>:
/*
 * @brief: Handles the TimeOut software timer.
 * @param: sTimer - handle to the software timer.
 * @retval: None
 */
static void TMOUT_HandleTimer(TimerHandle_t sTimer) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

	Timer_ID = (uint32_t) pvTimerGetTimerID(sTimer);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff fcf8 	bl	8005348 <pvTimerGetTimerID>
 8005958:	0003      	movs	r3, r0
 800595a:	60fb      	str	r3, [r7, #12]
	if (TIMERID_TMOUT_TIMER == Timer_ID) {
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2bfd      	cmp	r3, #253	; 0xfd
 8005960:	d114      	bne.n	800598c <TMOUT_HandleTimer+0x48>
		TMOUT_Counter++;
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <TMOUT_HandleTimer+0x50>)
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <TMOUT_HandleTimer+0x50>)
 800596c:	801a      	strh	r2, [r3, #0]
		if (TMOUT_Counter == 1000) {
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <TMOUT_HandleTimer+0x50>)
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	23fa      	movs	r3, #250	; 0xfa
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	429a      	cmp	r2, r3
 8005978:	d108      	bne.n	800598c <TMOUT_HandleTimer+0x48>
			wmTimeOut++;
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <TMOUT_HandleTimer+0x54>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <TMOUT_HandleTimer+0x54>)
 8005984:	701a      	strb	r2, [r3, #0]
			TMOUT_Counter = 0;
 8005986:	4b03      	ldr	r3, [pc, #12]	; (8005994 <TMOUT_HandleTimer+0x50>)
 8005988:	2200      	movs	r2, #0
 800598a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200043e6 	.word	0x200043e6
 8005998:	200043e3 	.word	0x200043e3

0800599c <RTC_HandleTimer>:
/*
 * @brief: Handles the RTC software timer.
 * @param: zTimer - handle to the software timer.
 * @retval: None
 */
static void RTC_HandleTimer(TimerHandle_t zTimer) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

	Timer_ID = (uint32_t) pvTimerGetTimerID(zTimer);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7ff fccc 	bl	8005348 <pvTimerGetTimerID>
 80059b0:	0003      	movs	r3, r0
 80059b2:	60fb      	str	r3, [r7, #12]
	if (TIMERID_RTC_TIMER == Timer_ID) {
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2bfe      	cmp	r3, #254	; 0xfe
 80059b8:	d135      	bne.n	8005a26 <RTC_HandleTimer+0x8a>
		msCounter++;
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <RTC_HandleTimer+0x94>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <RTC_HandleTimer+0x94>)
 80059c4:	801a      	strh	r2, [r3, #0]
		if (msCounter == 1000) {
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <RTC_HandleTimer+0x94>)
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	23fa      	movs	r3, #250	; 0xfa
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d108      	bne.n	80059e4 <RTC_HandleTimer+0x48>
			Second++;
 80059d2:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <RTC_HandleTimer+0x98>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <RTC_HandleTimer+0x98>)
 80059dc:	701a      	strb	r2, [r3, #0]
			msCounter = 0;
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <RTC_HandleTimer+0x94>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	801a      	strh	r2, [r3, #0]
		}
		if (Second == 60) {
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <RTC_HandleTimer+0x98>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b3c      	cmp	r3, #60	; 0x3c
 80059ea:	d108      	bne.n	80059fe <RTC_HandleTimer+0x62>
			Second = 0;
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <RTC_HandleTimer+0x98>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
			Minute++;
 80059f2:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <RTC_HandleTimer+0x9c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <RTC_HandleTimer+0x9c>)
 80059fc:	701a      	strb	r2, [r3, #0]
		}
		if (Minute == 60) {
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <RTC_HandleTimer+0x9c>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b3c      	cmp	r3, #60	; 0x3c
 8005a04:	d108      	bne.n	8005a18 <RTC_HandleTimer+0x7c>
			Minute = 0;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <RTC_HandleTimer+0x9c>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
			Hour++;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <RTC_HandleTimer+0xa0>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <RTC_HandleTimer+0xa0>)
 8005a16:	701a      	strb	r2, [r3, #0]
		}
		if (Hour == 24) {
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <RTC_HandleTimer+0xa0>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b18      	cmp	r3, #24
 8005a1e:	d102      	bne.n	8005a26 <RTC_HandleTimer+0x8a>
			Hour = 0;
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <RTC_HandleTimer+0xa0>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b004      	add	sp, #16
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	200043e4 	.word	0x200043e4
 8005a34:	200043e2 	.word	0x200043e2
 8005a38:	200043e1 	.word	0x200043e1
 8005a3c:	200043e0 	.word	0x200043e0

08005a40 <Modbus_task_Init>:
/*
 * @brief: Initializes the Modbus module.
 * @param: None
 * @retval: None
 */
void Modbus_task_Init(void) {
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af02      	add	r7, sp, #8

	/* RS485 port */
	RS485_RECEIVER_EN();
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	0159      	lsls	r1, r3, #5
 8005a4a:	2390      	movs	r3, #144	; 0x90
 8005a4c:	05db      	lsls	r3, r3, #23
 8005a4e:	2200      	movs	r2, #0
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7fb fdc5 	bl	80015e0 <HAL_GPIO_WritePin>
	/* Definition and creation of software timers */
	zTimer = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(1), pdTRUE,
 8005a56:	4821      	ldr	r0, [pc, #132]	; (8005adc <Modbus_task_Init+0x9c>)
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <Modbus_task_Init+0xa0>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	23fe      	movs	r3, #254	; 0xfe
 8005a5e:	2201      	movs	r2, #1
 8005a60:	2101      	movs	r1, #1
 8005a62:	f7ff f9b9 	bl	8004dd8 <xTimerCreate>
 8005a66:	0002      	movs	r2, r0
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <Modbus_task_Init+0xa4>)
 8005a6a:	601a      	str	r2, [r3, #0]
			(void*) TIMERID_RTC_TIMER, RTC_HandleTimer);
	xTimerStart(zTimer, portMAX_DELAY);
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <Modbus_task_Init+0xa4>)
 8005a6e:	681c      	ldr	r4, [r3, #0]
 8005a70:	f7fe fdd6 	bl	8004620 <xTaskGetTickCount>
 8005a74:	0002      	movs	r2, r0
 8005a76:	2301      	movs	r3, #1
 8005a78:	425b      	negs	r3, r3
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2101      	movs	r1, #1
 8005a80:	0020      	movs	r0, r4
 8005a82:	f7ff f9f1 	bl	8004e68 <xTimerGenericCommand>

	sTimer = xTimerCreate("TimeOut_Timer", pdMS_TO_TICKS(1), pdTRUE,
 8005a86:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <Modbus_task_Init+0xa8>)
 8005a88:	4b18      	ldr	r3, [pc, #96]	; (8005aec <Modbus_task_Init+0xac>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	23fd      	movs	r3, #253	; 0xfd
 8005a8e:	2201      	movs	r2, #1
 8005a90:	2101      	movs	r1, #1
 8005a92:	f7ff f9a1 	bl	8004dd8 <xTimerCreate>
 8005a96:	0002      	movs	r2, r0
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <Modbus_task_Init+0xb0>)
 8005a9a:	601a      	str	r2, [r3, #0]
			(void*) TIMERID_TMOUT_TIMER, TMOUT_HandleTimer);
	xTimerStart(sTimer, portMAX_DELAY);
 8005a9c:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <Modbus_task_Init+0xb0>)
 8005a9e:	681c      	ldr	r4, [r3, #0]
 8005aa0:	f7fe fdbe 	bl	8004620 <xTaskGetTickCount>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	2101      	movs	r1, #1
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	f7ff f9d9 	bl	8004e68 <xTimerGenericCommand>

	osThreadDef(defaultTask, MessagingTask, osPriorityNormal, 0, 8 * 128);
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <Modbus_task_Init+0xb4>)
 8005aba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005abc:	c313      	stmia	r3!, {r0, r1, r4}
 8005abe:	ca03      	ldmia	r2!, {r0, r1}
 8005ac0:	c303      	stmia	r3!, {r0, r1}
	MessagingTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7fd fe4f 	bl	800376a <osThreadCreate>
 8005acc:	0002      	movs	r2, r0
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <Modbus_task_Init+0xb8>)
 8005ad0:	601a      	str	r2, [r3, #0]

}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b007      	add	sp, #28
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	08005d2c 	.word	0x08005d2c
 8005ae0:	0800599d 	.word	0x0800599d
 8005ae4:	200043e8 	.word	0x200043e8
 8005ae8:	08005d38 	.word	0x08005d38
 8005aec:	08005945 	.word	0x08005945
 8005af0:	200043ec 	.word	0x200043ec
 8005af4:	08005d54 	.word	0x08005d54
 8005af8:	200043f0 	.word	0x200043f0

08005afc <memset>:
 8005afc:	0003      	movs	r3, r0
 8005afe:	1882      	adds	r2, r0, r2
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d100      	bne.n	8005b06 <memset+0xa>
 8005b04:	4770      	bx	lr
 8005b06:	7019      	strb	r1, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	e7f9      	b.n	8005b00 <memset+0x4>

08005b0c <_reclaim_reent>:
 8005b0c:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <_reclaim_reent+0xb8>)
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	0004      	movs	r4, r0
 8005b14:	4283      	cmp	r3, r0
 8005b16:	d042      	beq.n	8005b9e <_reclaim_reent+0x92>
 8005b18:	69c3      	ldr	r3, [r0, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <_reclaim_reent+0x28>
 8005b1e:	2500      	movs	r5, #0
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	42ab      	cmp	r3, r5
 8005b24:	d140      	bne.n	8005ba8 <_reclaim_reent+0x9c>
 8005b26:	69e3      	ldr	r3, [r4, #28]
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	d002      	beq.n	8005b34 <_reclaim_reent+0x28>
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f000 f87a 	bl	8005c28 <_free_r>
 8005b34:	6961      	ldr	r1, [r4, #20]
 8005b36:	2900      	cmp	r1, #0
 8005b38:	d002      	beq.n	8005b40 <_reclaim_reent+0x34>
 8005b3a:	0020      	movs	r0, r4
 8005b3c:	f000 f874 	bl	8005c28 <_free_r>
 8005b40:	69e1      	ldr	r1, [r4, #28]
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d002      	beq.n	8005b4c <_reclaim_reent+0x40>
 8005b46:	0020      	movs	r0, r4
 8005b48:	f000 f86e 	bl	8005c28 <_free_r>
 8005b4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d002      	beq.n	8005b58 <_reclaim_reent+0x4c>
 8005b52:	0020      	movs	r0, r4
 8005b54:	f000 f868 	bl	8005c28 <_free_r>
 8005b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d002      	beq.n	8005b64 <_reclaim_reent+0x58>
 8005b5e:	0020      	movs	r0, r4
 8005b60:	f000 f862 	bl	8005c28 <_free_r>
 8005b64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d002      	beq.n	8005b70 <_reclaim_reent+0x64>
 8005b6a:	0020      	movs	r0, r4
 8005b6c:	f000 f85c 	bl	8005c28 <_free_r>
 8005b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d002      	beq.n	8005b7c <_reclaim_reent+0x70>
 8005b76:	0020      	movs	r0, r4
 8005b78:	f000 f856 	bl	8005c28 <_free_r>
 8005b7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	d002      	beq.n	8005b88 <_reclaim_reent+0x7c>
 8005b82:	0020      	movs	r0, r4
 8005b84:	f000 f850 	bl	8005c28 <_free_r>
 8005b88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	d002      	beq.n	8005b94 <_reclaim_reent+0x88>
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f000 f84a 	bl	8005c28 <_free_r>
 8005b94:	6a23      	ldr	r3, [r4, #32]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <_reclaim_reent+0x92>
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	4798      	blx	r3
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	5949      	ldr	r1, [r1, r5]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d108      	bne.n	8005bb8 <_reclaim_reent+0xac>
 8005ba6:	3504      	adds	r5, #4
 8005ba8:	69e3      	ldr	r3, [r4, #28]
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	2d80      	cmp	r5, #128	; 0x80
 8005bae:	d1f7      	bne.n	8005ba0 <_reclaim_reent+0x94>
 8005bb0:	0020      	movs	r0, r4
 8005bb2:	f000 f839 	bl	8005c28 <_free_r>
 8005bb6:	e7b6      	b.n	8005b26 <_reclaim_reent+0x1a>
 8005bb8:	680e      	ldr	r6, [r1, #0]
 8005bba:	0020      	movs	r0, r4
 8005bbc:	f000 f834 	bl	8005c28 <_free_r>
 8005bc0:	0031      	movs	r1, r6
 8005bc2:	e7ee      	b.n	8005ba2 <_reclaim_reent+0x96>
 8005bc4:	20000058 	.word	0x20000058

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4c0c      	ldr	r4, [pc, #48]	; (8005c00 <__libc_init_array+0x38>)
 8005bce:	4d0d      	ldr	r5, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	2600      	movs	r6, #0
 8005bda:	f000 f87f 	bl	8005cdc <_init>
 8005bde:	4c0a      	ldr	r4, [pc, #40]	; (8005c08 <__libc_init_array+0x40>)
 8005be0:	4d0a      	ldr	r5, [pc, #40]	; (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	00b3      	lsls	r3, r6, #2
 8005bee:	58eb      	ldr	r3, [r5, r3]
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	00b3      	lsls	r3, r6, #2
 8005bf8:	58eb      	ldr	r3, [r5, r3]
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08005dc8 	.word	0x08005dc8
 8005c04:	08005dc8 	.word	0x08005dc8
 8005c08:	08005dcc 	.word	0x08005dcc
 8005c0c:	08005dc8 	.word	0x08005dc8

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <memcpy>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d100      	bne.n	8005c1e <memcpy+0xa>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	5ccc      	ldrb	r4, [r1, r3]
 8005c20:	54c4      	strb	r4, [r0, r3]
 8005c22:	3301      	adds	r3, #1
 8005c24:	e7f8      	b.n	8005c18 <memcpy+0x4>
	...

08005c28 <_free_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	0005      	movs	r5, r0
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d010      	beq.n	8005c52 <_free_r+0x2a>
 8005c30:	1f0c      	subs	r4, r1, #4
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da00      	bge.n	8005c3a <_free_r+0x12>
 8005c38:	18e4      	adds	r4, r4, r3
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f83e 	bl	8005cbc <__malloc_lock>
 8005c40:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <_free_r+0x90>)
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <_free_r+0x2c>
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	6014      	str	r4, [r2, #0]
 8005c4c:	0028      	movs	r0, r5
 8005c4e:	f000 f83d 	bl	8005ccc <__malloc_unlock>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d908      	bls.n	8005c6a <_free_r+0x42>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	1821      	adds	r1, r4, r0
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	d1f3      	bne.n	8005c48 <_free_r+0x20>
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	1809      	adds	r1, r1, r0
 8005c66:	6021      	str	r1, [r4, #0]
 8005c68:	e7ee      	b.n	8005c48 <_free_r+0x20>
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <_free_r+0x4e>
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	d9f9      	bls.n	8005c6a <_free_r+0x42>
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	1850      	adds	r0, r2, r1
 8005c7a:	42a0      	cmp	r0, r4
 8005c7c:	d10b      	bne.n	8005c96 <_free_r+0x6e>
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	1809      	adds	r1, r1, r0
 8005c82:	1850      	adds	r0, r2, r1
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	4283      	cmp	r3, r0
 8005c88:	d1e0      	bne.n	8005c4c <_free_r+0x24>
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	1841      	adds	r1, r0, r1
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	6053      	str	r3, [r2, #4]
 8005c94:	e7da      	b.n	8005c4c <_free_r+0x24>
 8005c96:	42a0      	cmp	r0, r4
 8005c98:	d902      	bls.n	8005ca0 <_free_r+0x78>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	e7d5      	b.n	8005c4c <_free_r+0x24>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	d103      	bne.n	8005cb0 <_free_r+0x88>
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1809      	adds	r1, r1, r0
 8005cae:	6021      	str	r1, [r4, #0]
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6054      	str	r4, [r2, #4]
 8005cb4:	e7ca      	b.n	8005c4c <_free_r+0x24>
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	20004530 	.word	0x20004530

08005cbc <__malloc_lock>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	4802      	ldr	r0, [pc, #8]	; (8005cc8 <__malloc_lock+0xc>)
 8005cc0:	f7ff ffa6 	bl	8005c10 <__retarget_lock_acquire_recursive>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	2000452c 	.word	0x2000452c

08005ccc <__malloc_unlock>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4802      	ldr	r0, [pc, #8]	; (8005cd8 <__malloc_unlock+0xc>)
 8005cd0:	f7ff ff9f 	bl	8005c12 <__retarget_lock_release_recursive>
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	2000452c 	.word	0x2000452c

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
