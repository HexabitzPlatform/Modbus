
Modbus_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc8  08009cc8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08009cc8  08009cc8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cc8  08009cc8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ccc  08009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a4c  20000060  08009d2c  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004aac  08009d2c  00024aac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a56a  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ea  00000000  00000000  0003a631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  0003f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001327  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f1f  00000000  00000000  00042557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027199  00000000  00000000  00064476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b57c1  00000000  00000000  0008b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058a4  00000000  00000000  00140dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00146674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009984 	.word	0x08009984

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08009984 	.word	0x08009984

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2203      	movs	r2, #3
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fd18 	bl	8000c80 <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 f97c 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	2000007c 	.word	0x2000007c
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MX_DMA_Init+0x70>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MX_DMA_Init+0x70>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_DMA_Init+0x70>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_DMA_Init+0x70>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_DMA_Init+0x70>)
 80002c8:	2102      	movs	r1, #2
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_DMA_Init+0x70>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	2202      	movs	r2, #2
 80002d4:	4013      	ands	r3, r2
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	2009      	movs	r0, #9
 80002e0:	f000 fc98 	bl	8000c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002e4:	2009      	movs	r0, #9
 80002e6:	f000 fcaa 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2103      	movs	r1, #3
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fc90 	bl	8000c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 fca2 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	200b      	movs	r0, #11
 8000300:	f000 fc88 	bl	8000c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000304:	200b      	movs	r0, #11
 8000306:	f000 fc9a 	bl	8000c3e <HAL_NVIC_EnableIRQ>

}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_FREERTOS_Init+0x2c>)
 8000322:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000324:	c313      	stmia	r3!, {r0, r1, r4}
 8000326:	ca03      	ldmia	r2!, {r0, r1}
 8000328:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f004 f823 	bl	800437a <osThreadCreate>
 8000334:	0002      	movs	r2, r0
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <MX_FREERTOS_Init+0x30>)
 8000338:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b007      	add	sp, #28
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	080099a8 	.word	0x080099a8
 8000348:	200000a0 	.word	0x200000a0

0800034c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	240c      	movs	r4, #12
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	2314      	movs	r3, #20
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f009 fa21 	bl	80097a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0289      	lsls	r1, r1, #10
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	029b      	lsls	r3, r3, #10
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	02c9      	lsls	r1, r1, #11
 8000388:	430a      	orrs	r2, r1
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x8c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	02db      	lsls	r3, r3, #11
 8000394:	4013      	ands	r3, r2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <MX_GPIO_Init+0x90>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	0019      	movs	r1, r3
 80003a4:	f001 fae4 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	01d2      	lsls	r2, r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2201      	movs	r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <MX_GPIO_Init+0x90>)
 80003c6:	0019      	movs	r1, r3
 80003c8:	0010      	movs	r0, r2
 80003ca:	f001 f881 	bl	80014d0 <HAL_GPIO_Init>

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b009      	add	sp, #36	; 0x24
 80003d4:	bd90      	pop	{r4, r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000400 	.word	0x48000400

080003e0 <main>:
 * @retval int
 */
uint16_t aa=0x44;

unsigned short ee[12];
int main(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80003e4:	f000 fb18 	bl	8000a18 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 80003e8:	f000 f838 	bl	800045c <SystemClock_Config>

	  /* USER CODE BEGIN SysInit */
/* Peripherals Init */
	MX_GPIO_Init();
 80003ec:	f7ff ffae 	bl	800034c <MX_GPIO_Init>
	MX_DMA_Init();
 80003f0:	f7ff ff58 	bl	80002a4 <MX_DMA_Init>
	MX_CRC_Init();
 80003f4:	f7ff ff14 	bl	8000220 <MX_CRC_Init>

	/* Array ports */
	MX_USART1_UART_Init();
 80003f8:	f000 f9b0 	bl	800075c <MX_USART1_UART_Init>


	/* RS485 port */

	RS485_RECEIVER_EN();
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	0159      	lsls	r1, r3, #5
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2200      	movs	r2, #0
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fab2 	bl	8001970 <HAL_GPIO_WritePin>

	Modbus_task_Init();
 800040c:	f009 f82e 	bl	800946c <Modbus_task_Init>
	  /* USER CODE BEGIN 2 */

	  /* USER CODE END 2 */

	  /* Call init function for freertos objects (in freertos.c) */
	  MX_FREERTOS_Init();
 8000410:	f7ff ff82 	bl	8000318 <MX_FREERTOS_Init>

	  /* Start scheduler */
	  osKernelStart();
 8000414:	f003 ffa9 	bl	800436a <osKernelStart>

	  /* We should never get here as control is now taken by the scheduler */
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	while (1) {
 8000418:	e7fe      	b.n	8000418 <main+0x38>
	...

0800041c <StartDefaultTask>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void StartDefaultTask(void const *argument) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

	SetupModbusRTU(BAUD_RATE, MB_PAR_NONE);
 8000424:	2396      	movs	r3, #150	; 0x96
 8000426:	019b      	lsls	r3, r3, #6
 8000428:	2102      	movs	r1, #2
 800042a:	0018      	movs	r0, r3
 800042c:	f009 f880 	bl	8009530 <SetupModbusRTU>
	SetTimeOut(200);
 8000430:	20c8      	movs	r0, #200	; 0xc8
 8000432:	f009 f8ef 	bl	8009614 <SetTimeOut>
	/* Infinite loop */
	for (;;) {
		d++;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <StartDefaultTask+0x38>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <StartDefaultTask+0x38>)
 800043e:	601a      	str	r2, [r3, #0]
		HAL_Delay(200);
 8000440:	20c8      	movs	r0, #200	; 0xc8
 8000442:	f000 fb19 	bl	8000a78 <HAL_Delay>
		ReadModbusRegister(1, 0,6, ee);
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <StartDefaultTask+0x3c>)
 8000448:	2206      	movs	r2, #6
 800044a:	2100      	movs	r1, #0
 800044c:	2001      	movs	r0, #1
 800044e:	f009 f8a3 	bl	8009598 <ReadModbusRegister>
		d++;
 8000452:	e7f0      	b.n	8000436 <StartDefaultTask+0x1a>
 8000454:	200000a4 	.word	0x200000a4
 8000458:	200000a8 	.word	0x200000a8

0800045c <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b099      	sub	sp, #100	; 0x64
 8000460:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000462:	242c      	movs	r4, #44	; 0x2c
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2334      	movs	r3, #52	; 0x34
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f009 f999 	bl	80097a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000472:	231c      	movs	r3, #28
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	0018      	movs	r0, r3
 8000478:	2310      	movs	r3, #16
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f009 f991 	bl	80097a4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000482:	003b      	movs	r3, r7
 8000484:	0018      	movs	r0, r3
 8000486:	231c      	movs	r3, #28
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f009 f98a 	bl	80097a4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000490:	0021      	movs	r1, r4
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2220      	movs	r2, #32
 8000496:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2201      	movs	r2, #1
 800049c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2202      	movs	r2, #2
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	22c0      	movs	r2, #192	; 0xc0
 80004a8:	0252      	lsls	r2, r2, #9
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	22e0      	movs	r2, #224	; 0xe0
 80004b0:	0392      	lsls	r2, r2, #14
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	220f      	movs	r2, #15
 80004b8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 faa7 	bl	8001a10 <HAL_RCC_OscConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x6e>
		Error_Handler();
 80004c6:	f000 f843 	bl	8000550 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ca:	211c      	movs	r1, #28
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2101      	movs	r1, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fe17 	bl	800211c <HAL_RCC_ClockConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x9a>
		Error_Handler();
 80004f2:	f000 f82d 	bl	8000550 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80004f6:	003b      	movs	r3, r7
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <SystemClock_Config+0xcc>)
 80004fa:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	f001 ff99 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xc2>
		Error_Handler();
 800051a:	f000 f819 	bl	8000550 <Error_Handler>
	}
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b019      	add	sp, #100	; 0x64
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	00040003 	.word	0x00040003

0800052c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d101      	bne.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800053e:	f000 fa7f 	bl	8000a40 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40014400 	.word	0x40014400

08000550 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <HAL_MspInit+0x80>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_MspInit+0x80>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <HAL_MspInit+0x80>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_MspInit+0x80>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_MspInit+0x80>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_MspInit+0x80>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000596:	2302      	movs	r3, #2
 8000598:	425b      	negs	r3, r3
 800059a:	2200      	movs	r2, #0
 800059c:	2103      	movs	r1, #3
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fb38 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2103      	movs	r1, #3
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fb33 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fb45 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2103      	movs	r1, #3
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fb2b 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 fb3d 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2103      	movs	r1, #3
 80005c8:	2004      	movs	r0, #4
 80005ca:	f000 fb23 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80005ce:	2004      	movs	r0, #4
 80005d0:	f000 fb35 	bl	8000c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b002      	add	sp, #8
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	0019      	movs	r1, r3
 80005f6:	2015      	movs	r0, #21
 80005f8:	f000 fb0c 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005fc:	2015      	movs	r0, #21
 80005fe:	f000 fb1e 	bl	8000c3e <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <HAL_InitTick+0xa8>)
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <HAL_InitTick+0xa8>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0289      	lsls	r1, r1, #10
 800060c:	430a      	orrs	r2, r1
 800060e:	619a      	str	r2, [r3, #24]
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <HAL_InitTick+0xa8>)
 8000612:	699a      	ldr	r2, [r3, #24]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	029b      	lsls	r3, r3, #10
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800061e:	230c      	movs	r3, #12
 8000620:	18fa      	adds	r2, r7, r3
 8000622:	2310      	movs	r3, #16
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fee3 	bl	80023f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800062e:	f001 fecb 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8000632:	0003      	movs	r3, r0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	4914      	ldr	r1, [pc, #80]	; (800068c <HAL_InitTick+0xac>)
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fd64 	bl	8000108 <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	3b01      	subs	r3, #1
 8000644:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0xb0>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <HAL_InitTick+0xb4>)
 800064a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_InitTick+0xb0>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <HAL_InitTick+0xb8>)
 8000650:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_InitTick+0xb0>)
 8000654:	6a3a      	ldr	r2, [r7, #32]
 8000656:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_InitTick+0xb0>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_InitTick+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_InitTick+0xb0>)
 8000666:	0018      	movs	r0, r3
 8000668:	f001 ffee 	bl	8002648 <HAL_TIM_Base_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d105      	bne.n	800067c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_InitTick+0xb0>)
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f840 	bl	80026f8 <HAL_TIM_Base_Start_IT>
 8000678:	0003      	movs	r3, r0
 800067a:	e000      	b.n	800067e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b00a      	add	sp, #40	; 0x28
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000
 800068c:	000f4240 	.word	0x000f4240
 8000690:	200000c0 	.word	0x200000c0
 8000694:	40014400 	.word	0x40014400
 8000698:	000003e7 	.word	0x000003e7

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <PVD_VDDIO2_IRQHandler>:

/**
  * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
  */
void PVD_VDDIO2_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

  /* USER CODE END PVD_VDDIO2_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80006b0:	f001 f97c 	bl	80019ac <HAL_PWR_PVD_IRQHandler>
  HAL_PWREx_Vddio2Monitor_IRQHandler();
 80006b4:	f001 f994 	bl	80019e0 <HAL_PWREx_Vddio2Monitor_IRQHandler>
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

  /* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80006c2:	f000 fda3 	bl	800120c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <DMA1_Ch1_IRQHandler+0x14>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fcb8 	bl	8001054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000190 	.word	0x20000190

080006f0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fcac 	bl	8001054 <HAL_DMA_IRQHandler>
//  HAL_DMA_IRQHandler(&hdma_usart4_tx);
//  HAL_DMA_IRQHandler(&hdma_usart5_rx);
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	200001d4 	.word	0x200001d4

08000708 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <TIM16_IRQHandler+0x14>)
 800070e:	0018      	movs	r0, r3
 8000710:	f002 f844 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200000c0 	.word	0x200000c0

08000720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <USART1_IRQHandler+0x28>)
 800072c:	0018      	movs	r0, r3
 800072e:	f002 fb01 	bl	8002d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <USART1_IRQHandler+0x20>
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <USART1_IRQHandler+0x2c>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0552      	lsls	r2, r2, #21
 800073e:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000108 	.word	0x20000108
 800074c:	e000ed04 	.word	0xe000ed04

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_USART1_UART_Init>:
//DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_USART1_UART_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000768:	2296      	movs	r2, #150	; 0x96
 800076a:	0192      	lsls	r2, r2, #6
 800076c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 800079a:	2210      	movs	r2, #16
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0152      	lsls	r2, r2, #5
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_USART1_UART_Init+0x64>)
 80007a8:	2300      	movs	r3, #0
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 fd4b 	bl	8004248 <HAL_RS485Ex_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f7ff fecb 	bl	8000550 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000108 	.word	0x20000108
 80007c4:	40013800 	.word	0x40013800

080007c8 <HAL_UART_MspInit>:
//  /* USER CODE END USART6_Init 2 */
//
//}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b08b      	sub	sp, #44	; 0x2c
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	2414      	movs	r4, #20
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f008 ffe2 	bl	80097a4 <memset>
  if(uartHandle->Instance==USART1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a59      	ldr	r2, [pc, #356]	; (800094c <HAL_UART_MspInit+0x184>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d000      	beq.n	80007ec <HAL_UART_MspInit+0x24>
 80007ea:	e0ab      	b.n	8000944 <HAL_UART_MspInit+0x17c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ec:	4b58      	ldr	r3, [pc, #352]	; (8000950 <HAL_UART_MspInit+0x188>)
 80007ee:	699a      	ldr	r2, [r3, #24]
 80007f0:	4b57      	ldr	r3, [pc, #348]	; (8000950 <HAL_UART_MspInit+0x188>)
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	01c9      	lsls	r1, r1, #7
 80007f6:	430a      	orrs	r2, r1
 80007f8:	619a      	str	r2, [r3, #24]
 80007fa:	4b55      	ldr	r3, [pc, #340]	; (8000950 <HAL_UART_MspInit+0x188>)
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	01db      	lsls	r3, r3, #7
 8000802:	4013      	ands	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b51      	ldr	r3, [pc, #324]	; (8000950 <HAL_UART_MspInit+0x188>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	4b50      	ldr	r3, [pc, #320]	; (8000950 <HAL_UART_MspInit+0x188>)
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0289      	lsls	r1, r1, #10
 8000812:	430a      	orrs	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	4b4e      	ldr	r3, [pc, #312]	; (8000950 <HAL_UART_MspInit+0x188>)
 8000818:	695a      	ldr	r2, [r3, #20]
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	029b      	lsls	r3, r3, #10
 800081e:	4013      	ands	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	22b0      	movs	r2, #176	; 0xb0
 8000828:	0152      	lsls	r2, r2, #5
 800082a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2202      	movs	r2, #2
 8000832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2203      	movs	r2, #3
 800083e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	187a      	adds	r2, r7, r1
 8000848:	2390      	movs	r3, #144	; 0x90
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fe3e 	bl	80014d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000854:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <HAL_UART_MspInit+0x18c>)
 8000856:	4a40      	ldr	r2, [pc, #256]	; (8000958 <HAL_UART_MspInit+0x190>)
 8000858:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <HAL_UART_MspInit+0x18c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <HAL_UART_MspInit+0x18c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <HAL_UART_MspInit+0x18c>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <HAL_UART_MspInit+0x18c>)
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000874:	4b37      	ldr	r3, [pc, #220]	; (8000954 <HAL_UART_MspInit+0x18c>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800087c:	4b35      	ldr	r3, [pc, #212]	; (8000954 <HAL_UART_MspInit+0x18c>)
 800087e:	2220      	movs	r2, #32
 8000880:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <HAL_UART_MspInit+0x18c>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000888:	4b32      	ldr	r3, [pc, #200]	; (8000954 <HAL_UART_MspInit+0x18c>)
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fad4 	bl	8000e38 <HAL_DMA_Init>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000894:	f7ff fe5c 	bl	8000550 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000898:	4a30      	ldr	r2, [pc, #192]	; (800095c <HAL_UART_MspInit+0x194>)
 800089a:	23a8      	movs	r3, #168	; 0xa8
 800089c:	58d3      	ldr	r3, [r2, r3]
 800089e:	492f      	ldr	r1, [pc, #188]	; (800095c <HAL_UART_MspInit+0x194>)
 80008a0:	220f      	movs	r2, #15
 80008a2:	4393      	bics	r3, r2
 80008a4:	22a8      	movs	r2, #168	; 0xa8
 80008a6:	508b      	str	r3, [r1, r2]
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <HAL_UART_MspInit+0x194>)
 80008aa:	23a8      	movs	r3, #168	; 0xa8
 80008ac:	58d3      	ldr	r3, [r2, r3]
 80008ae:	492b      	ldr	r1, [pc, #172]	; (800095c <HAL_UART_MspInit+0x194>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	4313      	orrs	r3, r2
 80008b4:	22a8      	movs	r2, #168	; 0xa8
 80008b6:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <HAL_UART_MspInit+0x18c>)
 80008bc:	675a      	str	r2, [r3, #116]	; 0x74
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <HAL_UART_MspInit+0x18c>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008c6:	4a27      	ldr	r2, [pc, #156]	; (8000964 <HAL_UART_MspInit+0x19c>)
 80008c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008cc:	2210      	movs	r2, #16
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008ee:	2220      	movs	r2, #32
 80008f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_UART_MspInit+0x198>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fa9c 	bl	8000e38 <HAL_DMA_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8000904:	f7ff fe24 	bl	8000550 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_UART_MspInit+0x194>)
 800090a:	23a8      	movs	r3, #168	; 0xa8
 800090c:	58d3      	ldr	r3, [r2, r3]
 800090e:	4913      	ldr	r1, [pc, #76]	; (800095c <HAL_UART_MspInit+0x194>)
 8000910:	22f0      	movs	r2, #240	; 0xf0
 8000912:	4393      	bics	r3, r2
 8000914:	22a8      	movs	r2, #168	; 0xa8
 8000916:	508b      	str	r3, [r1, r2]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x194>)
 800091a:	23a8      	movs	r3, #168	; 0xa8
 800091c:	58d3      	ldr	r3, [r2, r3]
 800091e:	490f      	ldr	r1, [pc, #60]	; (800095c <HAL_UART_MspInit+0x194>)
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	4313      	orrs	r3, r2
 8000924:	22a8      	movs	r2, #168	; 0xa8
 8000926:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_UART_MspInit+0x198>)
 800092c:	671a      	str	r2, [r3, #112]	; 0x70
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_UART_MspInit+0x198>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2103      	movs	r1, #3
 8000938:	201b      	movs	r0, #27
 800093a:	f000 f96b 	bl	8000c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093e:	201b      	movs	r0, #27
 8000940:	f000 f97d 	bl	8000c3e <HAL_NVIC_EnableIRQ>
//    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
//    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b00b      	add	sp, #44	; 0x2c
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	20000190 	.word	0x20000190
 8000958:	40020008 	.word	0x40020008
 800095c:	40020000 	.word	0x40020000
 8000960:	200001d4 	.word	0x200001d4
 8000964:	4002001c 	.word	0x4002001c

08000968 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_UART_MspDeInit+0x50>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d11a      	bne.n	80009b0 <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_UART_MspDeInit+0x54>)
 800097c:	699a      	ldr	r2, [r3, #24]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_UART_MspDeInit+0x54>)
 8000980:	490f      	ldr	r1, [pc, #60]	; (80009c0 <HAL_UART_MspDeInit+0x58>)
 8000982:	400a      	ands	r2, r1
 8000984:	619a      	str	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12);
 8000986:	23b0      	movs	r3, #176	; 0xb0
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f000 ff15 	bl	80017c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fa94 	bl	8000ec8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fa8f 	bl	8000ec8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80009aa:	201b      	movs	r0, #27
 80009ac:	f000 f957 	bl	8000c5e <HAL_NVIC_DisableIRQ>
  /* USER CODE END USART6:USART3_8_IRQn disable */

  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	ffffbfff 	.word	0xffffbfff

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c8:	f7ff fec2 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f2:	f008 ff3d 	bl	8009870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fcf3 	bl	80003e0 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a08:	08009cd0 	.word	0x08009cd0
  ldr r2, =_sbss
 8000a0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a10:	20004aac 	.word	0x20004aac

08000a14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_COMP_IRQHandler>
	...

08000a18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_Init+0x24>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_Init+0x24>)
 8000a22:	2110      	movs	r1, #16
 8000a24:	430a      	orrs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fdd9 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2e:	f7ff fd95 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	18d2      	adds	r2, r2, r3
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000218 	.word	0x20000218

08000a64 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000218 	.word	0x20000218

08000a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff fff0 	bl	8000a64 <HAL_GetTick>
 8000a84:	0003      	movs	r3, r0
 8000a86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	d005      	beq.n	8000a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Delay+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	001a      	movs	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  }
  
    while((HAL_GetTick() - tickstart) < wait)
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	f7ff ffe0 	bl	8000a64 <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f7      	bhi.n	8000aa0 <HAL_Delay+0x28>
  {
  }
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000004 	.word	0x20000004

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad2:	d809      	bhi.n	8000ae8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	231f      	movs	r3, #31
 8000adc:	401a      	ands	r2, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_EnableIRQ+0x30>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	601a      	str	r2, [r3, #0]
  }
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d810      	bhi.n	8000b2a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	231f      	movs	r3, #31
 8000b10:	4013      	ands	r3, r2
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_DisableIRQ+0x40>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1e:	f3bf 8f4f 	dsb	sy
}
 8000b22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000b24:	f3bf 8f6f 	isb	sy
}
 8000b28:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	0002      	movs	r2, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	d828      	bhi.n	8000ba0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	33c0      	adds	r3, #192	; 0xc0
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	589b      	ldr	r3, [r3, r2]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <__NVIC_SetPriority+0xd4>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	33c0      	adds	r3, #192	; 0xc0
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9e:	e031      	b.n	8000c04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	400b      	ands	r3, r1
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3306      	adds	r3, #6
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <__NVIC_SetPriority+0xd8>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001c      	movs	r4, r3
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	3b08      	subs	r3, #8
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	3306      	adds	r3, #6
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	18c3      	adds	r3, r0, r3
 8000c00:	3304      	adds	r3, #4
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	210f      	movs	r1, #15
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff81 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	0002      	movs	r2, r0
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff35 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	0002      	movs	r2, r0
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff3f 	bl	8000af4 <__NVIC_DisableIRQ>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e056      	b.n	8000d40 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7f5b      	ldrb	r3, [r3, #29]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d106      	bne.n	8000caa <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fadf 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2202      	movs	r2, #2
 8000cae:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <HAL_CRC_Init+0xc8>)
 8000cbe:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2118      	movs	r1, #24
 8000ccc:	438a      	bics	r2, r1
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	e00b      	b.n	8000cea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6899      	ldr	r1, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 f835 	bl	8000d4c <HAL_CRCEx_Polynomial_Set>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e02a      	b.n	8000d40 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	795b      	ldrb	r3, [r3, #5]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	e004      	b.n	8000d08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6912      	ldr	r2, [r2, #16]
 8000d06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2260      	movs	r2, #96	; 0x60
 8000d10:	4393      	bics	r3, r2
 8000d12:	0019      	movs	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	4393      	bics	r3, r2
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	04c11db7 	.word	0x04c11db7

08000d4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d58:	2117      	movs	r1, #23
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d60:	231f      	movs	r3, #31
 8000d62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d103      	bne.n	8000d74 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e045      	b.n	8000e00 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	613a      	str	r2, [r7, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d008      	beq.n	8000d92 <HAL_CRCEx_Polynomial_Set+0x46>
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	221f      	movs	r2, #31
 8000d84:	4013      	ands	r3, r2
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	40da      	lsrs	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d0f1      	beq.n	8000d76 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b18      	cmp	r3, #24
 8000d96:	d00f      	beq.n	8000db8 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b18      	cmp	r3, #24
 8000d9c:	d824      	bhi.n	8000de8 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	d011      	beq.n	8000dc8 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b10      	cmp	r3, #16
 8000da8:	d81e      	bhi.n	8000de8 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d020      	beq.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xa6>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d010      	beq.n	8000dd8 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000db6:	e017      	b.n	8000de8 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d91b      	bls.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8000dbe:	2317      	movs	r3, #23
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000dc6:	e016      	b.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d915      	bls.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8000dce:	2317      	movs	r3, #23
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000dd6:	e010      	b.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d90f      	bls.n	8000dfe <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8000dde:	2317      	movs	r3, #23
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000de6:	e00a      	b.n	8000dfe <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000de8:	2317      	movs	r3, #23
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
        break;
 8000df0:	e006      	b.n	8000e00 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	e004      	b.n	8000e00 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	e002      	b.n	8000e00 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	e000      	b.n	8000e00 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000dfe:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8000e00:	2317      	movs	r3, #23
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2218      	movs	r2, #24
 8000e1a:	4393      	bics	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e28:	2317      	movs	r3, #23
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b006      	add	sp, #24
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e036      	b.n	8000ebc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2221      	movs	r2, #33	; 0x21
 8000e52:	2102      	movs	r1, #2
 8000e54:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_DMA_Init+0x8c>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f97a 	bl	8001198 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2221      	movs	r2, #33	; 0x21
 8000eae:	2101      	movs	r1, #1
 8000eb0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	ffffc00f 	.word	0xffffc00f

08000ec8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e03b      	b.n	8000f52 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	438a      	bics	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 f943 	bl	8001198 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2221      	movs	r2, #33	; 0x21
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2221      	movs	r2, #33	; 0x21
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d008      	beq.n	8000f80 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2220      	movs	r2, #32
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e020      	b.n	8000fc2 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	210e      	movs	r1, #14
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4091      	lsls	r1, r2
 8000fac:	000a      	movs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2221      	movs	r2, #33	; 0x21
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2221      	movs	r2, #33	; 0x21
 8000fde:	5c9b      	ldrb	r3, [r3, r2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d006      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2204      	movs	r2, #4
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e028      	b.n	8001046 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	210e      	movs	r1, #14
 8001000:	438a      	bics	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2101      	movs	r1, #1
 800101e:	4091      	lsls	r1, r2
 8001020:	000a      	movs	r2, r1
 8001022:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2221      	movs	r2, #33	; 0x21
 8001028:	2101      	movs	r1, #1
 800102a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	2100      	movs	r1, #0
 8001032:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	0010      	movs	r0, r2
 8001044:	4798      	blx	r3
    }
  }
  return status;
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b004      	add	sp, #16
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2204      	movs	r2, #4
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	d024      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x72>
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2204      	movs	r2, #4
 8001080:	4013      	ands	r3, r2
 8001082:	d020      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2220      	movs	r2, #32
 800108c:	4013      	ands	r3, r2
 800108e:	d107      	bne.n	80010a0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2104      	movs	r1, #4
 800109c:	438a      	bics	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a8:	2104      	movs	r1, #4
 80010aa:	4091      	lsls	r1, r2
 80010ac:	000a      	movs	r2, r1
 80010ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d100      	bne.n	80010ba <HAL_DMA_IRQHandler+0x66>
 80010b8:	e06a      	b.n	8001190 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	0010      	movs	r0, r2
 80010c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010c4:	e064      	b.n	8001190 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2202      	movs	r2, #2
 80010cc:	409a      	lsls	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	d02b      	beq.n	800112e <HAL_DMA_IRQHandler+0xda>
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d027      	beq.n	800112e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2220      	movs	r2, #32
 80010e6:	4013      	ands	r3, r2
 80010e8:	d10b      	bne.n	8001102 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	210a      	movs	r1, #10
 80010f6:	438a      	bics	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2221      	movs	r2, #33	; 0x21
 80010fe:	2101      	movs	r1, #1
 8001100:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110a:	2102      	movs	r1, #2
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	2b00      	cmp	r3, #0
 8001120:	d036      	beq.n	8001190 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	0010      	movs	r0, r2
 800112a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800112c:	e030      	b.n	8001190 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2208      	movs	r2, #8
 8001134:	409a      	lsls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	d028      	beq.n	8001190 <HAL_DMA_IRQHandler+0x13c>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2208      	movs	r2, #8
 8001142:	4013      	ands	r3, r2
 8001144:	d024      	beq.n	8001190 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	210e      	movs	r1, #14
 8001152:	438a      	bics	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115e:	2101      	movs	r1, #1
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2221      	movs	r2, #33	; 0x21
 8001170:	2101      	movs	r1, #1
 8001172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2220      	movs	r2, #32
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	0010      	movs	r0, r2
 800118c:	4798      	blx	r3
    }
  }
}
 800118e:	e7ff      	b.n	8001190 <HAL_DMA_IRQHandler+0x13c>
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b004      	add	sp, #16
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	001a      	movs	r2, r3
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <DMA_CalcBaseAndBitshift+0x60>)
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d810      	bhi.n	80011ce <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <DMA_CalcBaseAndBitshift+0x64>)
 80011b2:	4694      	mov	ip, r2
 80011b4:	4463      	add	r3, ip
 80011b6:	2114      	movs	r1, #20
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7fe ffa5 	bl	8000108 <__udivsi3>
 80011be:	0003      	movs	r3, r0
 80011c0:	009a      	lsls	r2, r3, #2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <DMA_CalcBaseAndBitshift+0x68>)
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80011cc:	e00f      	b.n	80011ee <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <DMA_CalcBaseAndBitshift+0x6c>)
 80011d4:	4694      	mov	ip, r2
 80011d6:	4463      	add	r3, ip
 80011d8:	2114      	movs	r1, #20
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ff94 	bl	8000108 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	009a      	lsls	r2, r3, #2
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <DMA_CalcBaseAndBitshift+0x70>)
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40020407 	.word	0x40020407
 80011fc:	bffdfff8 	.word	0xbffdfff8
 8001200:	40020000 	.word	0x40020000
 8001204:	bffdfbf8 	.word	0xbffdfbf8
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001216:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2210      	movs	r2, #16
 800121c:	4013      	ands	r3, r2
 800121e:	2b10      	cmp	r3, #16
 8001220:	d005      	beq.n	800122e <HAL_FLASH_IRQHandler+0x22>
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	2b04      	cmp	r3, #4
 800122c:	d10f      	bne.n	800124e <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800122e:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001236:	2201      	movs	r2, #1
 8001238:	4252      	negs	r2, r2
 800123a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800123c:	f000 f8fa 	bl	8001434 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0018      	movs	r0, r3
 8001244:	f000 f8d2 	bl	80013ec <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001248:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	4013      	ands	r3, r2
 8001256:	2b20      	cmp	r3, #32
 8001258:	d000      	beq.n	800125c <HAL_FLASH_IRQHandler+0x50>
 800125a:	e0a1      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800125c:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 800125e:	2220      	movs	r2, #32
 8001260:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d100      	bne.n	800126e <HAL_FLASH_IRQHandler+0x62>
 800126c:	e098      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800126e:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d132      	bne.n	80012de <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001278:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001280:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001282:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d01b      	beq.n	80012c2 <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 800128a:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	0018      	movs	r0, r3
 8001294:	f000 f8a2 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	4694      	mov	ip, r2
 80012a2:	4463      	add	r3, ip
 80012a4:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80012a6:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012ac:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012b2:	2102      	movs	r1, #2
 80012b4:	438a      	bics	r2, r1
 80012b6:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f8ea 	bl	8001494 <FLASH_PageErase>
 80012c0:	e06e      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80012c2:	2301      	movs	r3, #1
 80012c4:	425b      	negs	r3, r3
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f880 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>
 80012dc:	e060      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d10c      	bne.n	8001302 <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ee:	2104      	movs	r1, #4
 80012f0:	438a      	bics	r2, r1
 80012f2:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f871 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e04e      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800130a:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d021      	beq.n	8001358 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	1c9a      	adds	r2, r3, #2
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800131c:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	0419      	lsls	r1, r3, #16
 800132c:	0c14      	lsrs	r4, r2, #16
 800132e:	430c      	orrs	r4, r1
 8001330:	0c1d      	lsrs	r5, r3, #16
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001334:	611c      	str	r4, [r3, #16]
 8001336:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	b292      	uxth	r2, r2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f000 f853 	bl	80013fc <FLASH_Program_HalfWord>
 8001356:	e023      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b03      	cmp	r3, #3
 8001360:	d105      	bne.n	800136e <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f838 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>
 800136c:	e011      	b.n	8001392 <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b04      	cmp	r3, #4
 8001376:	d106      	bne.n	8001386 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	3b02      	subs	r3, #2
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f82c 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>
 8001384:	e005      	b.n	8001392 <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	3b06      	subs	r3, #6
 800138c:	0018      	movs	r0, r3
 800138e:	f000 f825 	bl	80013dc <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001394:	2201      	movs	r2, #1
 8001396:	4252      	negs	r2, r2
 8001398:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10e      	bne.n	80013c8 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013b0:	2107      	movs	r1, #7
 80013b2:	438a      	bics	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <HAL_FLASH_IRQHandler+0x1cc>)
 80013be:	400a      	ands	r2, r1
 80013c0:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	761a      	strb	r2, [r3, #24]
  }
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	40022000 	.word	0x40022000
 80013d4:	20000220 	.word	0x20000220
 80013d8:	ffffebff 	.word	0xffffebff

080013dc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <FLASH_Program_HalfWord+0x30>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <FLASH_Program_HalfWord+0x34>)
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <FLASH_Program_HalfWord+0x34>)
 8001416:	2101      	movs	r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1cba      	adds	r2, r7, #2
 8001420:	8812      	ldrh	r2, [r2, #0]
 8001422:	801a      	strh	r2, [r3, #0]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000220 	.word	0x20000220
 8001430:	40022000 	.word	0x40022000

08001434 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <FLASH_SetErrorCode+0x58>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2210      	movs	r2, #16
 8001444:	4013      	ands	r3, r2
 8001446:	2b10      	cmp	r3, #16
 8001448:	d109      	bne.n	800145e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <FLASH_SetErrorCode+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2202      	movs	r2, #2
 8001450:	431a      	orrs	r2, r3
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <FLASH_SetErrorCode+0x5c>)
 8001454:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2210      	movs	r2, #16
 800145a:	4313      	orrs	r3, r2
 800145c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <FLASH_SetErrorCode+0x58>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2204      	movs	r2, #4
 8001464:	4013      	ands	r3, r2
 8001466:	2b04      	cmp	r3, #4
 8001468:	d109      	bne.n	800147e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <FLASH_SetErrorCode+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	2201      	movs	r2, #1
 8001470:	431a      	orrs	r2, r3
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <FLASH_SetErrorCode+0x5c>)
 8001474:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2204      	movs	r2, #4
 800147a:	4313      	orrs	r3, r2
 800147c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <FLASH_SetErrorCode+0x58>)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	60da      	str	r2, [r3, #12]
}  
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40022000 	.word	0x40022000
 8001490:	20000220 	.word	0x20000220

08001494 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <FLASH_PageErase+0x34>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <FLASH_PageErase+0x38>)
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <FLASH_PageErase+0x38>)
 80014a8:	2102      	movs	r1, #2
 80014aa:	430a      	orrs	r2, r1
 80014ac:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <FLASH_PageErase+0x38>)
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <FLASH_PageErase+0x38>)
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <FLASH_PageErase+0x38>)
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	430a      	orrs	r2, r1
 80014be:	611a      	str	r2, [r3, #16]
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000220 	.word	0x20000220
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e155      	b.n	800178c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4091      	lsls	r1, r2
 80014ea:	000a      	movs	r2, r1
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_GPIO_Init+0x28>
 80014f6:	e146      	b.n	8001786 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	2b01      	cmp	r3, #1
 8001502:	d005      	beq.n	8001510 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800150c:	2b02      	cmp	r3, #2
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	2201      	movs	r2, #1
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	4013      	ands	r3, r2
 800157a:	2b03      	cmp	r3, #3
 800157c:	d017      	beq.n	80015ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d123      	bne.n	8001602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	58d3      	ldr	r3, [r2, r3]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2107      	movs	r1, #7
 80015e6:	400b      	ands	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	401a      	ands	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_GPIO_Init+0x174>
 8001642:	e0a0      	b.n	8001786 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	589b      	ldr	r3, [r3, r2]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	2390      	movs	r3, #144	; 0x90
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	429a      	cmp	r2, r3
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x1ee>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x1ea>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x1e6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x1de>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x1f0>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x1f0>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x1f0>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x1f0>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x1f0>
 80016be:	2300      	movs	r3, #0
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	2103      	movs	r1, #3
 80016c4:	400a      	ands	r2, r1
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d0:	4935      	ldr	r1, [pc, #212]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43da      	mvns	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	035b      	lsls	r3, r3, #13
 80016f6:	4013      	ands	r3, r2
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43da      	mvns	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	039b      	lsls	r3, r3, #14
 8001720:	4013      	ands	r3, r2
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43da      	mvns	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	4013      	ands	r3, r2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	40da      	lsrs	r2, r3
 8001794:	1e13      	subs	r3, r2, #0
 8001796:	d000      	beq.n	800179a <HAL_GPIO_Init+0x2ca>
 8001798:	e6a2      	b.n	80014e0 <HAL_GPIO_Init+0x10>
  } 
}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	48001000 	.word	0x48001000
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017ce:	e0b7      	b.n	8001940 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	409a      	lsls	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d100      	bne.n	80017e4 <HAL_GPIO_DeInit+0x24>
 80017e2:	e0aa      	b.n	800193a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017e4:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <HAL_GPIO_DeInit+0x198>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	589b      	ldr	r3, [r3, r2]
 80017f0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	409a      	lsls	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	2390      	movs	r3, #144	; 0x90
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	429a      	cmp	r2, r3
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_DeInit+0x82>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_GPIO_DeInit+0x19c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_DeInit+0x7e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_GPIO_DeInit+0x1a0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_DeInit+0x7a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_GPIO_DeInit+0x1a4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_DeInit+0x76>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_GPIO_DeInit+0x1a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_DeInit+0x72>
 800182e:	2304      	movs	r3, #4
 8001830:	e008      	b.n	8001844 <HAL_GPIO_DeInit+0x84>
 8001832:	2305      	movs	r3, #5
 8001834:	e006      	b.n	8001844 <HAL_GPIO_DeInit+0x84>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_DeInit+0x84>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_DeInit+0x84>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_DeInit+0x84>
 8001842:	2300      	movs	r3, #0
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	2103      	movs	r1, #3
 8001848:	400a      	ands	r2, r1
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d132      	bne.n	80018ba <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43d9      	mvns	r1, r3
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 800185e:	400a      	ands	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001862:	4b42      	ldr	r3, [pc, #264]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43d9      	mvns	r1, r3
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 800186c:	400a      	ands	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43d9      	mvns	r1, r3
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 800187a:	400a      	ands	r2, r1
 800187c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43d9      	mvns	r1, r3
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_GPIO_DeInit+0x1ac>)
 8001888:	400a      	ands	r2, r1
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2203      	movs	r2, #3
 8001890:	4013      	ands	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_GPIO_DeInit+0x198>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	589a      	ldr	r2, [r3, r2]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	482a      	ldr	r0, [pc, #168]	; (8001958 <HAL_GPIO_DeInit+0x198>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	400a      	ands	r2, r1
 80018b4:	3302      	adds	r3, #2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	0052      	lsls	r2, r2, #1
 80018c2:	2103      	movs	r1, #3
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	58d3      	ldr	r3, [r2, r3]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	2107      	movs	r1, #7
 80018e0:	400a      	ands	r2, r1
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	210f      	movs	r1, #15
 80018e6:	4091      	lsls	r1, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	43d1      	mvns	r1, r2
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	08d2      	lsrs	r2, r2, #3
 80018f0:	4019      	ands	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	0052      	lsls	r2, r2, #1
 8001902:	2103      	movs	r1, #3
 8001904:	4091      	lsls	r1, r2
 8001906:	000a      	movs	r2, r1
 8001908:	43d2      	mvns	r2, r2
 800190a:	401a      	ands	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2101      	movs	r1, #1
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4091      	lsls	r1, r2
 800191a:	000a      	movs	r2, r1
 800191c:	43d2      	mvns	r2, r2
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	2103      	movs	r1, #3
 800192e:	4091      	lsls	r1, r2
 8001930:	000a      	movs	r2, r1
 8001932:	43d2      	mvns	r2, r2
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]

    }

    position++;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	40da      	lsrs	r2, r3
 8001946:	1e13      	subs	r3, r2, #0
 8001948:	d000      	beq.n	800194c <HAL_GPIO_DeInit+0x18c>
 800194a:	e741      	b.n	80017d0 <HAL_GPIO_DeInit+0x10>
  }
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	40010000 	.word	0x40010000
 800195c:	48000400 	.word	0x48000400
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00
 8001968:	48001000 	.word	0x48001000
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	0008      	movs	r0, r1
 800197a:	0011      	movs	r1, r2
 800197c:	1cbb      	adds	r3, r7, #2
 800197e:	1c02      	adds	r2, r0, #0
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	1c7b      	adds	r3, r7, #1
 8001984:	1c0a      	adds	r2, r1, #0
 8001986:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001988:	1c7b      	adds	r3, r7, #1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001990:	1cbb      	adds	r3, r7, #2
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	1cbb      	adds	r3, r7, #2
 800199c:	881a      	ldrh	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_PWR_PVD_IRQHandler+0x24>)
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	4013      	ands	r3, r2
 80019ba:	d005      	beq.n	80019c8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80019bc:	f000 f80a 	bl	80019d4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_PWR_PVD_IRQHandler+0x24>)
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	0252      	lsls	r2, r2, #9
 80019c6:	615a      	str	r2, [r3, #20]
  }
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da05      	bge.n	80019f8 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 80019ec:	f000 f80a 	bl	8001a04 <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	0612      	lsls	r2, r2, #24
 80019f6:	615a      	str	r2, [r3, #20]
  }
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f000 fb76 	bl	8002110 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_RCC_OscConfig+0x20>
 8001a2e:	e08e      	b.n	8001b4e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a30:	4bc5      	ldr	r3, [pc, #788]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	220c      	movs	r2, #12
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d00e      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a3c:	4bc2      	ldr	r3, [pc, #776]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	220c      	movs	r2, #12
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d117      	bne.n	8001a78 <HAL_RCC_OscConfig+0x68>
 8001a48:	4bbf      	ldr	r3, [pc, #764]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	23c0      	movs	r3, #192	; 0xc0
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	401a      	ands	r2, r3
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	025b      	lsls	r3, r3, #9
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d10e      	bne.n	8001a78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5a:	4bbb      	ldr	r3, [pc, #748]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	4013      	ands	r3, r2
 8001a64:	d100      	bne.n	8001a68 <HAL_RCC_OscConfig+0x58>
 8001a66:	e071      	b.n	8001b4c <HAL_RCC_OscConfig+0x13c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d000      	beq.n	8001a72 <HAL_RCC_OscConfig+0x62>
 8001a70:	e06c      	b.n	8001b4c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 fb4c 	bl	8002110 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x80>
 8001a80:	4bb1      	ldr	r3, [pc, #708]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4bb0      	ldr	r3, [pc, #704]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0249      	lsls	r1, r1, #9
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e02f      	b.n	8001af0 <HAL_RCC_OscConfig+0xe0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0xa2>
 8001a98:	4bab      	ldr	r3, [pc, #684]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4baa      	ldr	r3, [pc, #680]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	49ab      	ldr	r1, [pc, #684]	; (8001d4c <HAL_RCC_OscConfig+0x33c>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4ba8      	ldr	r3, [pc, #672]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4ba7      	ldr	r3, [pc, #668]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	49a9      	ldr	r1, [pc, #676]	; (8001d50 <HAL_RCC_OscConfig+0x340>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e01e      	b.n	8001af0 <HAL_RCC_OscConfig+0xe0>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xc8>
 8001aba:	4ba3      	ldr	r3, [pc, #652]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4ba2      	ldr	r3, [pc, #648]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	02c9      	lsls	r1, r1, #11
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	4b9f      	ldr	r3, [pc, #636]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0249      	lsls	r1, r1, #9
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xe0>
 8001ad8:	4b9b      	ldr	r3, [pc, #620]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b9a      	ldr	r3, [pc, #616]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ade:	499b      	ldr	r1, [pc, #620]	; (8001d4c <HAL_RCC_OscConfig+0x33c>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	4b98      	ldr	r3, [pc, #608]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001aea:	4999      	ldr	r1, [pc, #612]	; (8001d50 <HAL_RCC_OscConfig+0x340>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d014      	beq.n	8001b22 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe ffb4 	bl	8000a64 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b02:	f7fe ffaf 	bl	8000a64 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e2fd      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b14:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0xf2>
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7fe ff9f 	bl	8000a64 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7fe ff9a 	bl	8000a64 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e2e8      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4013      	ands	r3, r2
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x11c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d100      	bne.n	8001b5a <HAL_RCC_OscConfig+0x14a>
 8001b58:	e06c      	b.n	8001c34 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	220c      	movs	r2, #12
 8001b60:	4013      	ands	r3, r2
 8001b62:	d00e      	beq.n	8001b82 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b64:	4b78      	ldr	r3, [pc, #480]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	220c      	movs	r2, #12
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d11f      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1a0>
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	401a      	ands	r2, r3
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d116      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x188>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e2bb      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	22f8      	movs	r2, #248	; 0xf8
 8001b9e:	4393      	bics	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00da      	lsls	r2, r3, #3
 8001ba8:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	e041      	b.n	8001c34 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d024      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb8:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff4e 	bl	8000a64 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7fe ff49 	bl	8000a64 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e297      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f1      	beq.n	8001bce <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	22f8      	movs	r2, #248	; 0xf8
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	00da      	lsls	r2, r3, #3
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e018      	b.n	8001c34 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	438a      	bics	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ff29 	bl	8000a64 <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7fe ff24 	bl	8000a64 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e272      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d1f1      	bne.n	8001c18 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d036      	beq.n	8001cac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d019      	beq.n	8001c7a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7fe ff07 	bl	8000a64 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7fe ff02 	bl	8000a64 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e250      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f1      	beq.n	8001c5c <HAL_RCC_OscConfig+0x24c>
 8001c78:	e018      	b.n	8001cac <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	438a      	bics	r2, r1
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7fe feed 	bl	8000a64 <HAL_GetTick>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c90:	f7fe fee8 	bl	8000a64 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e236      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f1      	bne.n	8001c90 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2a8>
 8001cb6:	e0b5      	b.n	8001e24 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb8:	201f      	movs	r0, #31
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	055b      	lsls	r3, r3, #21
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d110      	bne.n	8001cee <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0549      	lsls	r1, r1, #21
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	61da      	str	r2, [r3, #28]
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ce8:	183b      	adds	r3, r7, r0
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x344>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d11a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_RCC_OscConfig+0x344>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_RCC_OscConfig+0x344>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0049      	lsls	r1, r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d08:	f7fe feac 	bl	8000a64 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7fe fea7 	bl	8000a64 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b64      	cmp	r3, #100	; 0x64
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1f5      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x344>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10f      	bne.n	8001d58 <HAL_RCC_OscConfig+0x348>
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]
 8001d44:	e036      	b.n	8001db4 <HAL_RCC_OscConfig+0x3a4>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	fffeffff 	.word	0xfffeffff
 8001d50:	fffbffff 	.word	0xfffbffff
 8001d54:	40007000 	.word	0x40007000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x36a>
 8001d60:	4bca      	ldr	r3, [pc, #808]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	4bc9      	ldr	r3, [pc, #804]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	621a      	str	r2, [r3, #32]
 8001d6c:	4bc7      	ldr	r3, [pc, #796]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	4bc6      	ldr	r3, [pc, #792]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d72:	2104      	movs	r1, #4
 8001d74:	438a      	bics	r2, r1
 8001d76:	621a      	str	r2, [r3, #32]
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x3a4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x38c>
 8001d82:	4bc2      	ldr	r3, [pc, #776]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	4bc1      	ldr	r3, [pc, #772]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d88:	2104      	movs	r1, #4
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	4bbf      	ldr	r3, [pc, #764]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d90:	6a1a      	ldr	r2, [r3, #32]
 8001d92:	4bbe      	ldr	r3, [pc, #760]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	621a      	str	r2, [r3, #32]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0x3a4>
 8001d9c:	4bbb      	ldr	r3, [pc, #748]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4bba      	ldr	r3, [pc, #744]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	438a      	bics	r2, r1
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	4bb8      	ldr	r3, [pc, #736]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	4bb7      	ldr	r3, [pc, #732]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001dae:	2104      	movs	r1, #4
 8001db0:	438a      	bics	r2, r1
 8001db2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d014      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7fe fe52 	bl	8000a64 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7fe fe4d 	bl	8000a64 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4aaf      	ldr	r2, [pc, #700]	; (8002090 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e19a      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4bac      	ldr	r3, [pc, #688]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3b6>
 8001de4:	e013      	b.n	8001e0e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe fe3d 	bl	8000a64 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	e009      	b.n	8001e04 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7fe fe38 	bl	8000a64 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	4aa5      	ldr	r2, [pc, #660]	; (8002090 <HAL_RCC_OscConfig+0x680>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e185      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4ba1      	ldr	r3, [pc, #644]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e0e:	231f      	movs	r3, #31
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b9c      	ldr	r3, [pc, #624]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	4b9b      	ldr	r3, [pc, #620]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e1e:	499d      	ldr	r1, [pc, #628]	; (8002094 <HAL_RCC_OscConfig+0x684>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d12a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e36:	4b95      	ldr	r3, [pc, #596]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e42:	4b92      	ldr	r3, [pc, #584]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e46:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fe09 	bl	8000a64 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e58:	f7fe fe04 	bl	8000a64 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e152      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d0f1      	beq.n	8001e58 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e74:	4b85      	ldr	r3, [pc, #532]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e78:	22f8      	movs	r2, #248	; 0xf8
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	00da      	lsls	r2, r3, #3
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8a:	e034      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	3305      	adds	r3, #5
 8001e92:	d111      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ea0:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	22f8      	movs	r2, #248	; 0xf8
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	00da      	lsls	r2, r3, #3
 8001eb0:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb6:	e01e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eb8:	4b74      	ldr	r3, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ec4:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec8:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fdc8 	bl	8000a64 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eda:	f7fe fdc3 	bl	8000a64 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e111      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f1      	bne.n	8001eda <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	d05c      	beq.n	8001fba <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	220c      	movs	r2, #12
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d00e      	beq.n	8001f2a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d114      	bne.n	8001f42 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f18:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	401a      	ands	r2, r3
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f2a:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	d040      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x5a8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d03c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0e6      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0249      	lsls	r1, r1, #9
 8001f54:	430a      	orrs	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd84 	bl	8000a64 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f62:	f7fe fd7f 	bl	8000a64 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0cd      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x552>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001f88:	4943      	ldr	r1, [pc, #268]	; (8002098 <HAL_RCC_OscConfig+0x688>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fd69 	bl	8000a64 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f98:	f7fe fd64 	bl	8000a64 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0b2      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x588>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fb8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d100      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5b4>
 8001fc2:	e0a4      	b.n	800210e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	220c      	movs	r2, #12
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5c2>
 8001fd0:	e078      	b.n	80020c4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d14c      	bne.n	8002074 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	492e      	ldr	r1, [pc, #184]	; (800209c <HAL_RCC_OscConfig+0x68c>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fd3d 	bl	8000a64 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fd38 	bl	8000a64 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e086      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	049b      	lsls	r3, r3, #18
 800200a:	4013      	ands	r3, r2
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	220f      	movs	r2, #15
 8002014:	4393      	bics	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x690>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	431a      	orrs	r2, r3
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0449      	lsls	r1, r1, #17
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fd0b 	bl	8000a64 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fd06 	bl	8000a64 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e054      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	049b      	lsls	r3, r3, #18
 800206e:	4013      	ands	r3, r2
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x644>
 8002072:	e04c      	b.n	800210e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_OscConfig+0x67c>)
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <HAL_RCC_OscConfig+0x68c>)
 800207c:	400a      	ands	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fcf0 	bl	8000a64 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x6a6>
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40021000 	.word	0x40021000
 8002090:	00001388 	.word	0x00001388
 8002094:	efffffff 	.word	0xefffffff
 8002098:	fffeffff 	.word	0xfffeffff
 800209c:	feffffff 	.word	0xfeffffff
 80020a0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fcde 	bl	8000a64 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e02c      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_RCC_OscConfig+0x708>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	049b      	lsls	r3, r3, #18
 80020be:	4013      	ands	r3, r2
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x694>
 80020c2:	e024      	b.n	800210e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01f      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_OscConfig+0x708>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCC_OscConfig+0x708>)
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d10e      	bne.n	800210a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	220f      	movs	r2, #15
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d107      	bne.n	800210a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	23f0      	movs	r3, #240	; 0xf0
 80020fe:	039b      	lsls	r3, r3, #14
 8002100:	401a      	ands	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b008      	add	sp, #32
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0bf      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	4013      	ands	r3, r2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d911      	bls.n	8002162 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4393      	bics	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002150:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	4013      	ands	r3, r2
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0a6      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d015      	beq.n	8002198 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d006      	beq.n	8002184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002176:	4b51      	ldr	r3, [pc, #324]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 800217c:	21e0      	movs	r1, #224	; 0xe0
 800217e:	00c9      	lsls	r1, r1, #3
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	22f0      	movs	r2, #240	; 0xf0
 800218a:	4393      	bics	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d04c      	beq.n	800223c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	d120      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07a      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	049b      	lsls	r3, r3, #18
 80021ca:	4013      	ands	r3, r2
 80021cc:	d114      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06e      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	4013      	ands	r3, r2
 80021e4:	d108      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e062      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e05b      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	4393      	bics	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800220c:	f7fe fc2a 	bl	8000a64 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002214:	e009      	b.n	800222a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f7fe fc25 	bl	8000a64 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_RCC_ClockConfig+0x1a4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e042      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	220c      	movs	r2, #12
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	429a      	cmp	r2, r3
 800223a:	d1ec      	bne.n	8002216 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d211      	bcs.n	800226e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4393      	bics	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_RCC_ClockConfig+0x19c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e020      	b.n	80022b0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2204      	movs	r2, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_RCC_ClockConfig+0x1a8>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800228c:	f000 f820 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002290:	0001      	movs	r1, r0
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x1a0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	220f      	movs	r2, #15
 800229a:	4013      	ands	r3, r2
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1ac>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	000a      	movs	r2, r1
 80022a2:	40da      	lsrs	r2, r3
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1b0>)
 80022a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f7fe f999 	bl	80005e0 <HAL_InitTick>
  
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00001388 	.word	0x00001388
 80022c4:	fffff8ff 	.word	0xfffff8ff
 80022c8:	08009a1c 	.word	0x08009a1c
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	220c      	movs	r2, #12
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d046      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xb8>
 80022fa:	d848      	bhi.n	800238e <HAL_RCC_GetSysClockFreq+0xbe>
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d002      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x36>
 8002300:	2b08      	cmp	r3, #8
 8002302:	d003      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x3c>
 8002304:	e043      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e043      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	220f      	movs	r2, #15
 8002312:	4013      	ands	r3, r2
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	220f      	movs	r2, #15
 8002320:	4013      	ands	r3, r2
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_RCC_GetSysClockFreq+0xdc>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	401a      	ands	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	429a      	cmp	r2, r3
 8002336:	d109      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	481a      	ldr	r0, [pc, #104]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800233c:	f7fd fee4 	bl	8000108 <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	001a      	movs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4353      	muls	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e01a      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	23c0      	movs	r3, #192	; 0xc0
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	401a      	ands	r2, r3
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	429a      	cmp	r2, r3
 800235a:	d109      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002360:	f7fd fed2 	bl	8000108 <__udivsi3>
 8002364:	0003      	movs	r3, r0
 8002366:	001a      	movs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4353      	muls	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e008      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002374:	f7fd fec8 	bl	8000108 <__udivsi3>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4353      	muls	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	613b      	str	r3, [r7, #16]
      break;
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800238a:	613b      	str	r3, [r7, #16]
      break;
 800238c:	e002      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002390:	613b      	str	r3, [r7, #16]
      break;
 8002392:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002394:	693b      	ldr	r3, [r7, #16]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	007a1200 	.word	0x007a1200
 80023a8:	08009a34 	.word	0x08009a34
 80023ac:	08009a44 	.word	0x08009a44
 80023b0:	02dc6c00 	.word	0x02dc6c00

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023cc:	f7ff fff2 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d0:	0001      	movs	r1, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	2207      	movs	r2, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	40d9      	lsrs	r1, r3
 80023e2:	000b      	movs	r3, r1
}    
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08009a2c 	.word	0x08009a2c

080023f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	22f0      	movs	r2, #240	; 0xf0
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_GetClockConfig+0x4c>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	23e0      	movs	r3, #224	; 0xe0
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	401a      	ands	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_GetClockConfig+0x50>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	401a      	ands	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	601a      	str	r2, [r3, #0]
}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b002      	add	sp, #8
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	40021000 	.word	0x40021000
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	025b      	lsls	r3, r3, #9
 8002460:	4013      	ands	r3, r2
 8002462:	d100      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002464:	e08e      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2017      	movs	r0, #23
 8002468:	183b      	adds	r3, r7, r0
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002470:	69da      	ldr	r2, [r3, #28]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	055b      	lsls	r3, r3, #21
 8002476:	4013      	ands	r3, r2
 8002478:	d110      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0549      	lsls	r1, r1, #21
 8002484:	430a      	orrs	r2, r1
 8002486:	61da      	str	r2, [r3, #28]
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	183b      	adds	r3, r7, r0
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d11a      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a8:	4b60      	ldr	r3, [pc, #384]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	0049      	lsls	r1, r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fad5 	bl	8000a64 <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	e008      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe fad0 	bl	8000a64 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0a6      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024de:	4b52      	ldr	r3, [pc, #328]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	23c0      	movs	r3, #192	; 0xc0
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d034      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	23c0      	movs	r3, #192	; 0xc0
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d02c      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002500:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002506:	4013      	ands	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	0249      	lsls	r1, r1, #9
 8002514:	430a      	orrs	r2, r1
 8002516:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800251e:	4945      	ldr	r1, [pc, #276]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002520:	400a      	ands	r2, r1
 8002522:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fa97 	bl	8000a64 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fa92 	bl	8000a64 <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	4a3c      	ldr	r2, [pc, #240]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e067      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d0f0      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002560:	4013      	ands	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800256a:	430a      	orrs	r2, r1
 800256c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800256e:	2317      	movs	r3, #23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800257e:	492f      	ldr	r1, [pc, #188]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002580:	400a      	ands	r2, r1
 8002582:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	2203      	movs	r2, #3
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2202      	movs	r2, #2
 80025a8:	4013      	ands	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	0019      	movs	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	02db      	lsls	r3, r3, #11
 80025c8:	4013      	ands	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2220      	movs	r2, #32
 80025e6:	4013      	ands	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	2210      	movs	r2, #16
 80025f0:	4393      	bics	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4013      	ands	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261a:	430a      	orrs	r2, r1
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b006      	add	sp, #24
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	fffffcff 	.word	0xfffffcff
 8002634:	fffeffff 	.word	0xfffeffff
 8002638:	00001388 	.word	0x00001388
 800263c:	efffffff 	.word	0xefffffff
 8002640:	fffcffff 	.word	0xfffcffff
 8002644:	fff3ffff 	.word	0xfff3ffff

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e042      	b.n	80026e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223d      	movs	r2, #61	; 0x3d
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223c      	movs	r2, #60	; 0x3c
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f839 	bl	80026e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223d      	movs	r2, #61	; 0x3d
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	0019      	movs	r1, r3
 8002688:	0010      	movs	r0, r2
 800268a:	f000 f9bd 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2246      	movs	r2, #70	; 0x46
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223e      	movs	r2, #62	; 0x3e
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223f      	movs	r2, #63	; 0x3f
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2241      	movs	r2, #65	; 0x41
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2242      	movs	r2, #66	; 0x42
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2243      	movs	r2, #67	; 0x43
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2244      	movs	r2, #68	; 0x44
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2245      	movs	r2, #69	; 0x45
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	; 0x3d
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	223d      	movs	r2, #61	; 0x3d
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e03b      	b.n	8002788 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	2102      	movs	r1, #2
 8002716:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_Base_Start_IT+0x98>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00f      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x5a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	05db      	lsls	r3, r3, #23
 800273a:	429a      	cmp	r2, r3
 800273c:	d009      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x5a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_TIM_Base_Start_IT+0x9c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x5a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_TIM_Base_Start_IT+0xa0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2207      	movs	r2, #7
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d010      	beq.n	8002786 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e007      	b.n	8002786 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400
 8002798:	40014000 	.word	0x40014000

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d124      	bne.n	80027fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11d      	bne.n	80027fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2203      	movs	r2, #3
 80027c6:	4252      	negs	r2, r2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2203      	movs	r2, #3
 80027d8:	4013      	ands	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f8fa 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e007      	b.n	80027f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 f8ed 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f8f9 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2204      	movs	r2, #4
 8002804:	4013      	ands	r3, r2
 8002806:	2b04      	cmp	r3, #4
 8002808:	d125      	bne.n	8002856 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2204      	movs	r2, #4
 8002812:	4013      	ands	r3, r2
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11e      	bne.n	8002856 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2205      	movs	r2, #5
 800281e:	4252      	negs	r2, r2
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 f8cd 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 800283e:	e007      	b.n	8002850 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f8c0 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f8cc 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2208      	movs	r2, #8
 800285e:	4013      	ands	r3, r2
 8002860:	2b08      	cmp	r3, #8
 8002862:	d124      	bne.n	80028ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2208      	movs	r2, #8
 800286c:	4013      	ands	r3, r2
 800286e:	2b08      	cmp	r3, #8
 8002870:	d11d      	bne.n	80028ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2209      	movs	r2, #9
 8002878:	4252      	negs	r2, r2
 800287a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2203      	movs	r2, #3
 800288a:	4013      	ands	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f000 f8a1 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002896:	e007      	b.n	80028a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f894 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f8a0 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d125      	bne.n	8002908 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2210      	movs	r2, #16
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d11e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2211      	movs	r2, #17
 80028d0:	4252      	negs	r2, r2
 80028d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2208      	movs	r2, #8
 80028d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	23c0      	movs	r3, #192	; 0xc0
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f874 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e007      	b.n	8002902 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 f867 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f873 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10f      	bne.n	8002936 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	2b01      	cmp	r3, #1
 8002922:	d108      	bne.n	8002936 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2202      	movs	r2, #2
 800292a:	4252      	negs	r2, r2
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f7fd fdfb 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	4013      	ands	r3, r2
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d10f      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	4013      	ands	r3, r2
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d108      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2281      	movs	r2, #129	; 0x81
 8002958:	4252      	negs	r2, r2
 800295a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f8da 	bl	8002b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	4013      	ands	r3, r2
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d10f      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d108      	bne.n	8002992 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2241      	movs	r2, #65	; 0x41
 8002986:	4252      	negs	r2, r2
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f833 	bl	80029f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2220      	movs	r2, #32
 800299a:	4013      	ands	r3, r2
 800299c:	2b20      	cmp	r3, #32
 800299e:	d10f      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d108      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	4252      	negs	r2, r2
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f8a4 	bl	8002b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	46c0      	nop			; (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d008      	beq.n	8002a32 <TIM_Base_SetConfig+0x2a>
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d003      	beq.n	8002a32 <TIM_Base_SetConfig+0x2a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d108      	bne.n	8002a44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2270      	movs	r2, #112	; 0x70
 8002a36:	4393      	bics	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	05db      	lsls	r3, r3, #23
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d013      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <TIM_Base_SetConfig+0xec>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <TIM_Base_SetConfig+0xf0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <TIM_Base_SetConfig+0xf4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0x76>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <TIM_Base_SetConfig+0xf8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <TIM_Base_SetConfig+0xfc>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	4393      	bics	r3, r2
 8002a96:	001a      	movs	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <TIM_Base_SetConfig+0xce>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <TIM_Base_SetConfig+0xf0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_Base_SetConfig+0xce>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <TIM_Base_SetConfig+0xf4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_Base_SetConfig+0xce>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <TIM_Base_SetConfig+0xf8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d103      	bne.n	8002ade <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	615a      	str	r2, [r3, #20]
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40002000 	.word	0x40002000
 8002af8:	40014000 	.word	0x40014000
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800
 8002b04:	fffffcff 	.word	0xfffffcff

08002b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e030      	b.n	8002b9c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2224      	movs	r2, #36	; 0x24
 8002b3e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	438a      	bics	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd fefc 	bl	8000968 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2284      	movs	r2, #132	; 0x84
 8002b74:	2100      	movs	r1, #0
 8002b76:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	2100      	movs	r1, #0
 8002b84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2278      	movs	r2, #120	; 0x78
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	1dbb      	adds	r3, r7, #6
 8002bb0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d15b      	bne.n	8002c72 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_UART_Transmit_IT+0x24>
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e053      	b.n	8002c74 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d109      	bne.n	8002bec <HAL_UART_Transmit_IT+0x48>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e043      	b.n	8002c74 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1dba      	adds	r2, r7, #6
 8002bf6:	2150      	movs	r1, #80	; 0x50
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	2152      	movs	r1, #82	; 0x52
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2284      	movs	r2, #132	; 0x84
 8002c10:	2100      	movs	r1, #0
 8002c12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	015b      	lsls	r3, r3, #5
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d107      	bne.n	8002c36 <HAL_UART_Transmit_IT+0x92>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_UART_Transmit_IT+0xd8>)
 8002c32:	66da      	str	r2, [r3, #108]	; 0x6c
 8002c34:	e002      	b.n	8002c3c <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_UART_Transmit_IT+0xdc>)
 8002c3a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c40:	613b      	str	r3, [r7, #16]
  return(result);
 8002c42:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	2301      	movs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b008      	add	sp, #32
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	08003dc7 	.word	0x08003dc7
 8002c80:	08003d13 	.word	0x08003d13

08002c84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d145      	bne.n	8002d28 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_Receive_IT+0x26>
 8002ca2:	1dbb      	adds	r3, r7, #6
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e03d      	b.n	8002d2a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d109      	bne.n	8002cce <HAL_UART_Receive_IT+0x4a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d001      	beq.n	8002cce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e02d      	b.n	8002d2a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f383 8810 	msr	PRIMASK, r3
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	04c9      	lsls	r1, r1, #19
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f383 8810 	msr	PRIMASK, r3
}
 8002d14:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d16:	1dbb      	adds	r3, r7, #6
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 feb2 	bl	8003a88 <UART_Start_Receive_IT>
 8002d24:	0003      	movs	r3, r0
 8002d26:	e000      	b.n	8002d2a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b008      	add	sp, #32
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b0ab      	sub	sp, #172	; 0xac
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	22a4      	movs	r2, #164	; 0xa4
 8002d44:	18b9      	adds	r1, r7, r2
 8002d46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	20a0      	movs	r0, #160	; 0xa0
 8002d50:	1839      	adds	r1, r7, r0
 8002d52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	219c      	movs	r1, #156	; 0x9c
 8002d5c:	1879      	adds	r1, r7, r1
 8002d5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d60:	0011      	movs	r1, r2
 8002d62:	18bb      	adds	r3, r7, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a99      	ldr	r2, [pc, #612]	; (8002fcc <HAL_UART_IRQHandler+0x298>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2298      	movs	r2, #152	; 0x98
 8002d6c:	18bc      	adds	r4, r7, r2
 8002d6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d70:	18bb      	adds	r3, r7, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d114      	bne.n	8002da2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d00f      	beq.n	8002da2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d82:	183b      	adds	r3, r7, r0
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d00a      	beq.n	8002da2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d100      	bne.n	8002d96 <HAL_UART_IRQHandler+0x62>
 8002d94:	e29e      	b.n	80032d4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	4798      	blx	r3
      }
      return;
 8002da0:	e298      	b.n	80032d4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002da2:	2398      	movs	r3, #152	; 0x98
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d100      	bne.n	8002dae <HAL_UART_IRQHandler+0x7a>
 8002dac:	e114      	b.n	8002fd8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dae:	239c      	movs	r3, #156	; 0x9c
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	; (8002fd0 <HAL_UART_IRQHandler+0x29c>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x94>
 8002dc6:	e107      	b.n	8002fd8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dc8:	23a4      	movs	r3, #164	; 0xa4
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_UART_IRQHandler+0xc6>
 8002dd4:	23a0      	movs	r3, #160	; 0xa0
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2201      	movs	r2, #1
 8002de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2284      	movs	r2, #132	; 0x84
 8002dee:	589b      	ldr	r3, [r3, r2]
 8002df0:	2201      	movs	r2, #1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2184      	movs	r1, #132	; 0x84
 8002df8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dfa:	23a4      	movs	r3, #164	; 0xa4
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2202      	movs	r2, #2
 8002e02:	4013      	ands	r3, r2
 8002e04:	d011      	beq.n	8002e2a <HAL_UART_IRQHandler+0xf6>
 8002e06:	239c      	movs	r3, #156	; 0x9c
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2284      	movs	r2, #132	; 0x84
 8002e1e:	589b      	ldr	r3, [r3, r2]
 8002e20:	2204      	movs	r2, #4
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2184      	movs	r1, #132	; 0x84
 8002e28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e2a:	23a4      	movs	r3, #164	; 0xa4
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	d011      	beq.n	8002e5a <HAL_UART_IRQHandler+0x126>
 8002e36:	239c      	movs	r3, #156	; 0x9c
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2284      	movs	r2, #132	; 0x84
 8002e4e:	589b      	ldr	r3, [r3, r2]
 8002e50:	2202      	movs	r2, #2
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2184      	movs	r1, #132	; 0x84
 8002e58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e5a:	23a4      	movs	r3, #164	; 0xa4
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	4013      	ands	r3, r2
 8002e64:	d017      	beq.n	8002e96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e66:	23a0      	movs	r3, #160	; 0xa0
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d105      	bne.n	8002e7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e72:	239c      	movs	r3, #156	; 0x9c
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e7c:	d00b      	beq.n	8002e96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2208      	movs	r2, #8
 8002e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2284      	movs	r2, #132	; 0x84
 8002e8a:	589b      	ldr	r3, [r3, r2]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2184      	movs	r1, #132	; 0x84
 8002e94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e96:	23a4      	movs	r3, #164	; 0xa4
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_UART_IRQHandler+0x198>
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	04db      	lsls	r3, r3, #19
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00c      	beq.n	8002ecc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2284      	movs	r2, #132	; 0x84
 8002ec0:	589b      	ldr	r3, [r3, r2]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2184      	movs	r1, #132	; 0x84
 8002eca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2284      	movs	r2, #132	; 0x84
 8002ed0:	589b      	ldr	r3, [r3, r2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d100      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x1a4>
 8002ed6:	e1ff      	b.n	80032d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ed8:	23a4      	movs	r3, #164	; 0xa4
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ee4:	23a0      	movs	r3, #160	; 0xa0
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	4013      	ands	r3, r2
 8002eee:	d008      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	0010      	movs	r0, r2
 8002f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2284      	movs	r2, #132	; 0x84
 8002f06:	589b      	ldr	r3, [r3, r2]
 8002f08:	2194      	movs	r1, #148	; 0x94
 8002f0a:	187a      	adds	r2, r7, r1
 8002f0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d004      	beq.n	8002f26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2228      	movs	r2, #40	; 0x28
 8002f22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f24:	d047      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 fe77 	bl	8003c1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d137      	bne.n	8002fac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f44:	2090      	movs	r0, #144	; 0x90
 8002f46:	183a      	adds	r2, r7, r0
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	438a      	bics	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	183b      	adds	r3, r7, r0
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <HAL_UART_IRQHandler+0x2a0>)
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fe f81e 	bl	8000fca <HAL_DMA_Abort_IT>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d01a      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e012      	b.n	8002fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f9ad 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002faa:	e00d      	b.n	8002fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f9a8 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	e008      	b.n	8002fc8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f9a3 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2284      	movs	r2, #132	; 0x84
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002fc6:	e187      	b.n	80032d8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	46c0      	nop			; (mov r8, r8)
    return;
 8002fca:	e185      	b.n	80032d8 <HAL_UART_IRQHandler+0x5a4>
 8002fcc:	0000080f 	.word	0x0000080f
 8002fd0:	04000120 	.word	0x04000120
 8002fd4:	08003ce5 	.word	0x08003ce5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d000      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x2ae>
 8002fe0:	e139      	b.n	8003256 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fe2:	23a4      	movs	r3, #164	; 0xa4
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	4013      	ands	r3, r2
 8002fec:	d100      	bne.n	8002ff0 <HAL_UART_IRQHandler+0x2bc>
 8002fee:	e132      	b.n	8003256 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ff0:	23a0      	movs	r3, #160	; 0xa0
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <HAL_UART_IRQHandler+0x2ca>
 8002ffc:	e12b      	b.n	8003256 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	4013      	ands	r3, r2
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d000      	beq.n	8003016 <HAL_UART_IRQHandler+0x2e2>
 8003014:	e09f      	b.n	8003156 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	217e      	movs	r1, #126	; 0x7e
 8003020:	187b      	adds	r3, r7, r1
 8003022:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003024:	187b      	adds	r3, r7, r1
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d100      	bne.n	800302e <HAL_UART_IRQHandler+0x2fa>
 800302c:	e156      	b.n	80032dc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2258      	movs	r2, #88	; 0x58
 8003032:	5a9b      	ldrh	r3, [r3, r2]
 8003034:	187a      	adds	r2, r7, r1
 8003036:	8812      	ldrh	r2, [r2, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d300      	bcc.n	800303e <HAL_UART_IRQHandler+0x30a>
 800303c:	e14e      	b.n	80032dc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	187a      	adds	r2, r7, r1
 8003042:	215a      	movs	r1, #90	; 0x5a
 8003044:	8812      	ldrh	r2, [r2, #0]
 8003046:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b20      	cmp	r3, #32
 8003050:	d06f      	beq.n	8003132 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305a:	67bb      	str	r3, [r7, #120]	; 0x78
 800305c:	2301      	movs	r3, #1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	499e      	ldr	r1, [pc, #632]	; (80032ec <HAL_UART_IRQHandler+0x5b8>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003084:	f3ef 8310 	mrs	r3, PRIMASK
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308c:	677b      	str	r3, [r7, #116]	; 0x74
 800308e:	2301      	movs	r3, #1
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	438a      	bics	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030be:	673b      	str	r3, [r7, #112]	; 0x70
 80030c0:	2301      	movs	r3, #1
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	438a      	bics	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	2120      	movs	r1, #32
 80030ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f6:	f3ef 8310 	mrs	r3, PRIMASK
 80030fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80030fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003100:	2301      	movs	r3, #1
 8003102:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003106:	f383 8810 	msr	PRIMASK, r3
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2110      	movs	r1, #16
 8003118:	438a      	bics	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	0018      	movs	r0, r3
 800312e:	f7fd ff14 	bl	8000f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2258      	movs	r2, #88	; 0x58
 800313c:	5a9a      	ldrh	r2, [r3, r2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	215a      	movs	r1, #90	; 0x5a
 8003142:	5a5b      	ldrh	r3, [r3, r1]
 8003144:	b29b      	uxth	r3, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f8e0 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003154:	e0c2      	b.n	80032dc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2258      	movs	r2, #88	; 0x58
 800315a:	5a99      	ldrh	r1, [r3, r2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	225a      	movs	r2, #90	; 0x5a
 8003160:	5a9b      	ldrh	r3, [r3, r2]
 8003162:	b29a      	uxth	r2, r3
 8003164:	208e      	movs	r0, #142	; 0x8e
 8003166:	183b      	adds	r3, r7, r0
 8003168:	1a8a      	subs	r2, r1, r2
 800316a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	225a      	movs	r2, #90	; 0x5a
 8003170:	5a9b      	ldrh	r3, [r3, r2]
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d100      	bne.n	800317a <HAL_UART_IRQHandler+0x446>
 8003178:	e0b2      	b.n	80032e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800317a:	183b      	adds	r3, r7, r0
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d100      	bne.n	8003184 <HAL_UART_IRQHandler+0x450>
 8003182:	e0ad      	b.n	80032e0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	60fb      	str	r3, [r7, #12]
  return(result);
 800318a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318c:	2488      	movs	r4, #136	; 0x88
 800318e:	193a      	adds	r2, r7, r4
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	2301      	movs	r3, #1
 8003194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4951      	ldr	r1, [pc, #324]	; (80032f0 <HAL_UART_IRQHandler+0x5bc>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f383 8810 	msr	PRIMASK, r3
}
 80031ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031bc:	f3ef 8310 	mrs	r3, PRIMASK
 80031c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80031c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	2484      	movs	r4, #132	; 0x84
 80031c6:	193a      	adds	r2, r7, r4
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f383 8810 	msr	PRIMASK, r3
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	2120      	movs	r1, #32
 80031fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003208:	f3ef 8310 	mrs	r3, PRIMASK
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003210:	2480      	movs	r4, #128	; 0x80
 8003212:	193a      	adds	r2, r7, r4
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	2301      	movs	r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2110      	movs	r1, #16
 800322e:	438a      	bics	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	193b      	adds	r3, r7, r4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003246:	183b      	adds	r3, r7, r0
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f000 f860 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003254:	e044      	b.n	80032e0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003256:	23a4      	movs	r3, #164	; 0xa4
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	035b      	lsls	r3, r3, #13
 8003260:	4013      	ands	r3, r2
 8003262:	d010      	beq.n	8003286 <HAL_UART_IRQHandler+0x552>
 8003264:	239c      	movs	r3, #156	; 0x9c
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	03db      	lsls	r3, r3, #15
 800326e:	4013      	ands	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	0352      	lsls	r2, r2, #13
 800327a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f001 f852 	bl	8004328 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003284:	e02f      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003286:	23a4      	movs	r3, #164	; 0xa4
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	4013      	ands	r3, r2
 8003290:	d00f      	beq.n	80032b2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003292:	23a0      	movs	r3, #160	; 0xa0
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	4013      	ands	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01e      	beq.n	80032e4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	0010      	movs	r0, r2
 80032ae:	4798      	blx	r3
    }
    return;
 80032b0:	e018      	b.n	80032e4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032b2:	23a4      	movs	r3, #164	; 0xa4
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	4013      	ands	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
 80032be:	23a0      	movs	r3, #160	; 0xa0
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2240      	movs	r2, #64	; 0x40
 80032c6:	4013      	ands	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 fdd8 	bl	8003e82 <UART_EndTransmit_IT>
    return;
 80032d2:	e008      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	e006      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	e004      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	e002      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	e000      	b.n	80032e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80032e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b02b      	add	sp, #172	; 0xac
 80032ea:	bd90      	pop	{r4, r7, pc}
 80032ec:	fffffeff 	.word	0xfffffeff
 80032f0:	fffffedf 	.word	0xfffffedf

080032f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	000a      	movs	r2, r1
 800331e:	1cbb      	adds	r3, r7, #2
 8003320:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003334:	231e      	movs	r3, #30
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4abe      	ldr	r2, [pc, #760]	; (8003654 <UART_SetConfig+0x328>)
 800335c:	4013      	ands	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4ab9      	ldr	r2, [pc, #740]	; (8003658 <UART_SetConfig+0x32c>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4ab0      	ldr	r2, [pc, #704]	; (800365c <UART_SetConfig+0x330>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4aac      	ldr	r2, [pc, #688]	; (8003660 <UART_SetConfig+0x334>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d127      	bne.n	8003402 <UART_SetConfig+0xd6>
 80033b2:	4bac      	ldr	r3, [pc, #688]	; (8003664 <UART_SetConfig+0x338>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	2203      	movs	r2, #3
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d00d      	beq.n	80033da <UART_SetConfig+0xae>
 80033be:	d81b      	bhi.n	80033f8 <UART_SetConfig+0xcc>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d014      	beq.n	80033ee <UART_SetConfig+0xc2>
 80033c4:	d818      	bhi.n	80033f8 <UART_SetConfig+0xcc>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <UART_SetConfig+0xa4>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d00a      	beq.n	80033e4 <UART_SetConfig+0xb8>
 80033ce:	e013      	b.n	80033f8 <UART_SetConfig+0xcc>
 80033d0:	231f      	movs	r3, #31
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e0bd      	b.n	8003556 <UART_SetConfig+0x22a>
 80033da:	231f      	movs	r3, #31
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e0b8      	b.n	8003556 <UART_SetConfig+0x22a>
 80033e4:	231f      	movs	r3, #31
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	2204      	movs	r2, #4
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e0b3      	b.n	8003556 <UART_SetConfig+0x22a>
 80033ee:	231f      	movs	r3, #31
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2208      	movs	r2, #8
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0ae      	b.n	8003556 <UART_SetConfig+0x22a>
 80033f8:	231f      	movs	r3, #31
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2210      	movs	r2, #16
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e0a9      	b.n	8003556 <UART_SetConfig+0x22a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a98      	ldr	r2, [pc, #608]	; (8003668 <UART_SetConfig+0x33c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d134      	bne.n	8003476 <UART_SetConfig+0x14a>
 800340c:	4b95      	ldr	r3, [pc, #596]	; (8003664 <UART_SetConfig+0x338>)
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	4013      	ands	r3, r2
 8003416:	22c0      	movs	r2, #192	; 0xc0
 8003418:	0292      	lsls	r2, r2, #10
 800341a:	4293      	cmp	r3, r2
 800341c:	d017      	beq.n	800344e <UART_SetConfig+0x122>
 800341e:	22c0      	movs	r2, #192	; 0xc0
 8003420:	0292      	lsls	r2, r2, #10
 8003422:	4293      	cmp	r3, r2
 8003424:	d822      	bhi.n	800346c <UART_SetConfig+0x140>
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	0292      	lsls	r2, r2, #10
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <UART_SetConfig+0x136>
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0292      	lsls	r2, r2, #10
 8003432:	4293      	cmp	r3, r2
 8003434:	d81a      	bhi.n	800346c <UART_SetConfig+0x140>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <UART_SetConfig+0x118>
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0252      	lsls	r2, r2, #9
 800343e:	4293      	cmp	r3, r2
 8003440:	d00a      	beq.n	8003458 <UART_SetConfig+0x12c>
 8003442:	e013      	b.n	800346c <UART_SetConfig+0x140>
 8003444:	231f      	movs	r3, #31
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e083      	b.n	8003556 <UART_SetConfig+0x22a>
 800344e:	231f      	movs	r3, #31
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e07e      	b.n	8003556 <UART_SetConfig+0x22a>
 8003458:	231f      	movs	r3, #31
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e079      	b.n	8003556 <UART_SetConfig+0x22a>
 8003462:	231f      	movs	r3, #31
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	2208      	movs	r2, #8
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e074      	b.n	8003556 <UART_SetConfig+0x22a>
 800346c:	231f      	movs	r3, #31
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2210      	movs	r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e06f      	b.n	8003556 <UART_SetConfig+0x22a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <UART_SetConfig+0x340>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d134      	bne.n	80034ea <UART_SetConfig+0x1be>
 8003480:	4b78      	ldr	r3, [pc, #480]	; (8003664 <UART_SetConfig+0x338>)
 8003482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003484:	23c0      	movs	r3, #192	; 0xc0
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	4013      	ands	r3, r2
 800348a:	22c0      	movs	r2, #192	; 0xc0
 800348c:	0312      	lsls	r2, r2, #12
 800348e:	4293      	cmp	r3, r2
 8003490:	d017      	beq.n	80034c2 <UART_SetConfig+0x196>
 8003492:	22c0      	movs	r2, #192	; 0xc0
 8003494:	0312      	lsls	r2, r2, #12
 8003496:	4293      	cmp	r3, r2
 8003498:	d822      	bhi.n	80034e0 <UART_SetConfig+0x1b4>
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	0312      	lsls	r2, r2, #12
 800349e:	4293      	cmp	r3, r2
 80034a0:	d019      	beq.n	80034d6 <UART_SetConfig+0x1aa>
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	0312      	lsls	r2, r2, #12
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d81a      	bhi.n	80034e0 <UART_SetConfig+0x1b4>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <UART_SetConfig+0x18c>
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	02d2      	lsls	r2, r2, #11
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00a      	beq.n	80034cc <UART_SetConfig+0x1a0>
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0x1b4>
 80034b8:	231f      	movs	r3, #31
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e049      	b.n	8003556 <UART_SetConfig+0x22a>
 80034c2:	231f      	movs	r3, #31
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e044      	b.n	8003556 <UART_SetConfig+0x22a>
 80034cc:	231f      	movs	r3, #31
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2204      	movs	r2, #4
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e03f      	b.n	8003556 <UART_SetConfig+0x22a>
 80034d6:	231f      	movs	r3, #31
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2208      	movs	r2, #8
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e03a      	b.n	8003556 <UART_SetConfig+0x22a>
 80034e0:	231f      	movs	r3, #31
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2210      	movs	r2, #16
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e035      	b.n	8003556 <UART_SetConfig+0x22a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <UART_SetConfig+0x344>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d104      	bne.n	80034fe <UART_SetConfig+0x1d2>
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e02b      	b.n	8003556 <UART_SetConfig+0x22a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5c      	ldr	r2, [pc, #368]	; (8003674 <UART_SetConfig+0x348>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d104      	bne.n	8003512 <UART_SetConfig+0x1e6>
 8003508:	231f      	movs	r3, #31
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e021      	b.n	8003556 <UART_SetConfig+0x22a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <UART_SetConfig+0x34c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d104      	bne.n	8003526 <UART_SetConfig+0x1fa>
 800351c:	231f      	movs	r3, #31
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	e017      	b.n	8003556 <UART_SetConfig+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a54      	ldr	r2, [pc, #336]	; (800367c <UART_SetConfig+0x350>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d104      	bne.n	800353a <UART_SetConfig+0x20e>
 8003530:	231f      	movs	r3, #31
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e00d      	b.n	8003556 <UART_SetConfig+0x22a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a50      	ldr	r2, [pc, #320]	; (8003680 <UART_SetConfig+0x354>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d104      	bne.n	800354e <UART_SetConfig+0x222>
 8003544:	231f      	movs	r3, #31
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e003      	b.n	8003556 <UART_SetConfig+0x22a>
 800354e:	231f      	movs	r3, #31
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2210      	movs	r2, #16
 8003554:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	429a      	cmp	r2, r3
 8003560:	d15c      	bne.n	800361c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003562:	231f      	movs	r3, #31
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d015      	beq.n	8003598 <UART_SetConfig+0x26c>
 800356c:	dc18      	bgt.n	80035a0 <UART_SetConfig+0x274>
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00d      	beq.n	800358e <UART_SetConfig+0x262>
 8003572:	dc15      	bgt.n	80035a0 <UART_SetConfig+0x274>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <UART_SetConfig+0x252>
 8003578:	2b02      	cmp	r3, #2
 800357a:	d005      	beq.n	8003588 <UART_SetConfig+0x25c>
 800357c:	e010      	b.n	80035a0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357e:	f7fe ff23 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8003582:	0003      	movs	r3, r0
 8003584:	61bb      	str	r3, [r7, #24]
        break;
 8003586:	e012      	b.n	80035ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <UART_SetConfig+0x358>)
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e00f      	b.n	80035ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe fe9f 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8003592:	0003      	movs	r3, r0
 8003594:	61bb      	str	r3, [r7, #24]
        break;
 8003596:	e00a      	b.n	80035ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	61bb      	str	r3, [r7, #24]
        break;
 800359e:	e006      	b.n	80035ae <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035a4:	231e      	movs	r3, #30
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
        break;
 80035ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d100      	bne.n	80035b6 <UART_SetConfig+0x28a>
 80035b4:	e095      	b.n	80036e2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	005a      	lsls	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0019      	movs	r1, r3
 80035c8:	0010      	movs	r0, r2
 80035ca:	f7fc fd9d 	bl	8000108 <__udivsi3>
 80035ce:	0003      	movs	r3, r0
 80035d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d91c      	bls.n	8003612 <UART_SetConfig+0x2e6>
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	429a      	cmp	r2, r3
 80035e0:	d217      	bcs.n	8003612 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	200e      	movs	r0, #14
 80035e8:	183b      	adds	r3, r7, r0
 80035ea:	210f      	movs	r1, #15
 80035ec:	438a      	bics	r2, r1
 80035ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2207      	movs	r2, #7
 80035f8:	4013      	ands	r3, r2
 80035fa:	b299      	uxth	r1, r3
 80035fc:	183b      	adds	r3, r7, r0
 80035fe:	183a      	adds	r2, r7, r0
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	183a      	adds	r2, r7, r0
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e067      	b.n	80036e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003612:	231e      	movs	r3, #30
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e062      	b.n	80036e2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800361c:	231f      	movs	r3, #31
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d030      	beq.n	8003688 <UART_SetConfig+0x35c>
 8003626:	dc33      	bgt.n	8003690 <UART_SetConfig+0x364>
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00d      	beq.n	8003648 <UART_SetConfig+0x31c>
 800362c:	dc30      	bgt.n	8003690 <UART_SetConfig+0x364>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <UART_SetConfig+0x30c>
 8003632:	2b02      	cmp	r3, #2
 8003634:	d005      	beq.n	8003642 <UART_SetConfig+0x316>
 8003636:	e02b      	b.n	8003690 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe fec6 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e02d      	b.n	800369e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <UART_SetConfig+0x358>)
 8003644:	61bb      	str	r3, [r7, #24]
        break;
 8003646:	e02a      	b.n	800369e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003648:	f7fe fe42 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800364c:	0003      	movs	r3, r0
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e025      	b.n	800369e <UART_SetConfig+0x372>
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	efff69f3 	.word	0xefff69f3
 8003658:	ffffcfff 	.word	0xffffcfff
 800365c:	fffff4ff 	.word	0xfffff4ff
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	40004800 	.word	0x40004800
 8003670:	40004c00 	.word	0x40004c00
 8003674:	40005000 	.word	0x40005000
 8003678:	40011400 	.word	0x40011400
 800367c:	40011800 	.word	0x40011800
 8003680:	40011c00 	.word	0x40011c00
 8003684:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	61bb      	str	r3, [r7, #24]
        break;
 800368e:	e006      	b.n	800369e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003694:	231e      	movs	r3, #30
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
        break;
 800369c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01e      	beq.n	80036e2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	085a      	lsrs	r2, r3, #1
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	18d2      	adds	r2, r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f7fc fd27 	bl	8000108 <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d90a      	bls.n	80036da <UART_SetConfig+0x3ae>
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	025b      	lsls	r3, r3, #9
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d205      	bcs.n	80036da <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	e003      	b.n	80036e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80036da:	231e      	movs	r3, #30
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036ee:	231e      	movs	r3, #30
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b008      	add	sp, #32
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2201      	movs	r2, #1
 800370a:	4013      	ands	r3, r2
 800370c:	d00b      	beq.n	8003726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a4a      	ldr	r2, [pc, #296]	; (8003840 <UART_AdvFeatureConfig+0x144>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d00b      	beq.n	8003748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a43      	ldr	r2, [pc, #268]	; (8003844 <UART_AdvFeatureConfig+0x148>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2204      	movs	r2, #4
 800374e:	4013      	ands	r3, r2
 8003750:	d00b      	beq.n	800376a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <UART_AdvFeatureConfig+0x14c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2208      	movs	r2, #8
 8003770:	4013      	ands	r3, r2
 8003772:	d00b      	beq.n	800378c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <UART_AdvFeatureConfig+0x150>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2210      	movs	r2, #16
 8003792:	4013      	ands	r3, r2
 8003794:	d00b      	beq.n	80037ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <UART_AdvFeatureConfig+0x154>)
 800379e:	4013      	ands	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2220      	movs	r2, #32
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a25      	ldr	r2, [pc, #148]	; (8003854 <UART_AdvFeatureConfig+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2240      	movs	r2, #64	; 0x40
 80037d6:	4013      	ands	r3, r2
 80037d8:	d01d      	beq.n	8003816 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <UART_AdvFeatureConfig+0x15c>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	035b      	lsls	r3, r3, #13
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d10b      	bne.n	8003816 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <UART_AdvFeatureConfig+0x160>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	4013      	ands	r3, r2
 800381e:	d00b      	beq.n	8003838 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <UART_AdvFeatureConfig+0x164>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	fffdffff 	.word	0xfffdffff
 8003844:	fffeffff 	.word	0xfffeffff
 8003848:	fffbffff 	.word	0xfffbffff
 800384c:	ffff7fff 	.word	0xffff7fff
 8003850:	ffffefff 	.word	0xffffefff
 8003854:	ffffdfff 	.word	0xffffdfff
 8003858:	ffefffff 	.word	0xffefffff
 800385c:	ff9fffff 	.word	0xff9fffff
 8003860:	fff7ffff 	.word	0xfff7ffff

08003864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b092      	sub	sp, #72	; 0x48
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2284      	movs	r2, #132	; 0x84
 8003870:	2100      	movs	r1, #0
 8003872:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003874:	f7fd f8f6 	bl	8000a64 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	4013      	ands	r3, r2
 8003886:	2b08      	cmp	r3, #8
 8003888:	d12c      	bne.n	80038e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	0391      	lsls	r1, r2, #14
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4a46      	ldr	r2, [pc, #280]	; (80039ac <UART_CheckIdleState+0x148>)
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	f000 f88c 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d021      	beq.n	80038e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038aa:	2301      	movs	r3, #1
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2278      	movs	r2, #120	; 0x78
 80038dc:	2100      	movs	r1, #0
 80038de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e05f      	b.n	80039a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d146      	bne.n	8003980 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	03d1      	lsls	r1, r2, #15
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <UART_CheckIdleState+0x148>)
 80038fc:	9200      	str	r2, [sp, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	f000 f858 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d03b      	beq.n	8003980 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	60fb      	str	r3, [r7, #12]
  return(result);
 800390e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
 8003912:	2301      	movs	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4921      	ldr	r1, [pc, #132]	; (80039b0 <UART_CheckIdleState+0x14c>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003940:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	2120      	movs	r1, #32
 8003972:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2278      	movs	r2, #120	; 0x78
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e011      	b.n	80039a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	2120      	movs	r1, #32
 800398c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2278      	movs	r2, #120	; 0x78
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b010      	add	sp, #64	; 0x40
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	01ffffff 	.word	0x01ffffff
 80039b0:	fffffedf 	.word	0xfffffedf

080039b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	e04b      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	3301      	adds	r3, #1
 80039ca:	d048      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039cc:	f7fd f84a 	bl	8000a64 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d302      	bcc.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04b      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2204      	movs	r2, #4
 80039ee:	4013      	ands	r3, r2
 80039f0:	d035      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2208      	movs	r2, #8
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d111      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f906 	bl	8003c1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	2108      	movs	r1, #8
 8003a16:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2278      	movs	r2, #120	; 0x78
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02c      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	401a      	ands	r2, r3
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d112      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f8e9 	bl	8003c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2284      	movs	r2, #132	; 0x84
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2278      	movs	r2, #120	; 0x78
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e00f      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	425a      	negs	r2, r3
 8003a6e:	4153      	adcs	r3, r2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d0a4      	beq.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b090      	sub	sp, #64	; 0x40
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1dba      	adds	r2, r7, #6
 8003aa0:	2158      	movs	r1, #88	; 0x58
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1dba      	adds	r2, r7, #6
 8003aaa:	215a      	movs	r1, #90	; 0x5a
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d10d      	bne.n	8003ade <UART_Start_Receive_IT+0x56>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <UART_Start_Receive_IT+0x4c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	225c      	movs	r2, #92	; 0x5c
 8003ace:	4950      	ldr	r1, [pc, #320]	; (8003c10 <UART_Start_Receive_IT+0x188>)
 8003ad0:	5299      	strh	r1, [r3, r2]
 8003ad2:	e02e      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	225c      	movs	r2, #92	; 0x5c
 8003ad8:	21ff      	movs	r1, #255	; 0xff
 8003ada:	5299      	strh	r1, [r3, r2]
 8003adc:	e029      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <UART_Start_Receive_IT+0x7a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <UART_Start_Receive_IT+0x70>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	225c      	movs	r2, #92	; 0x5c
 8003af2:	21ff      	movs	r1, #255	; 0xff
 8003af4:	5299      	strh	r1, [r3, r2]
 8003af6:	e01c      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	225c      	movs	r2, #92	; 0x5c
 8003afc:	217f      	movs	r1, #127	; 0x7f
 8003afe:	5299      	strh	r1, [r3, r2]
 8003b00:	e017      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	055b      	lsls	r3, r3, #21
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10d      	bne.n	8003b2a <UART_Start_Receive_IT+0xa2>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <UART_Start_Receive_IT+0x98>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	225c      	movs	r2, #92	; 0x5c
 8003b1a:	217f      	movs	r1, #127	; 0x7f
 8003b1c:	5299      	strh	r1, [r3, r2]
 8003b1e:	e008      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	225c      	movs	r2, #92	; 0x5c
 8003b24:	213f      	movs	r1, #63	; 0x3f
 8003b26:	5299      	strh	r1, [r3, r2]
 8003b28:	e003      	b.n	8003b32 <UART_Start_Receive_IT+0xaa>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	225c      	movs	r2, #92	; 0x5c
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2284      	movs	r2, #132	; 0x84
 8003b36:	2100      	movs	r1, #0
 8003b38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	2122      	movs	r1, #34	; 0x22
 8003b40:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	015b      	lsls	r3, r3, #5
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d107      	bne.n	8003b90 <UART_Start_Receive_IT+0x108>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <UART_Start_Receive_IT+0x18c>)
 8003b8c:	669a      	str	r2, [r3, #104]	; 0x68
 8003b8e:	e002      	b.n	8003b96 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <UART_Start_Receive_IT+0x190>)
 8003b94:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d019      	beq.n	8003bd2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba8:	2301      	movs	r3, #1
 8003baa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2190      	movs	r1, #144	; 0x90
 8003bc0:	0049      	lsls	r1, r1, #1
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	e018      	b.n	8003c04 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd6:	613b      	str	r3, [r7, #16]
  return(result);
 8003bd8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b010      	add	sp, #64	; 0x40
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	000001ff 	.word	0x000001ff
 8003c14:	08004091 	.word	0x08004091
 8003c18:	08003ed9 	.word	0x08003ed9

08003c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08e      	sub	sp, #56	; 0x38
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	617b      	str	r3, [r7, #20]
  return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4926      	ldr	r1, [pc, #152]	; (8003ce0 <UART_EndRxTransfer+0xc4>)
 8003c46:	400a      	ands	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c56:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c60:	2301      	movs	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2101      	movs	r1, #1
 8003c78:	438a      	bics	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	f383 8810 	msr	PRIMASK, r3
}
 8003c86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d118      	bne.n	8003cc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b00e      	add	sp, #56	; 0x38
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	fffffedf 	.word	0xfffffedf

08003ce4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	225a      	movs	r2, #90	; 0x5a
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2252      	movs	r2, #82	; 0x52
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff fafd 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b08a      	sub	sp, #40	; 0x28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1e:	2b21      	cmp	r3, #33	; 0x21
 8003d20:	d14d      	bne.n	8003dbe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2252      	movs	r2, #82	; 0x52
 8003d26:	5a9b      	ldrh	r3, [r3, r2]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d132      	bne.n	8003d94 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d32:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d34:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	438a      	bics	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d60:	f3ef 8310 	mrs	r3, PRIMASK
 8003d64:	617b      	str	r3, [r7, #20]
  return(result);
 8003d66:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d92:	e014      	b.n	8003dbe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2252      	movs	r2, #82	; 0x52
 8003db0:	5a9b      	ldrh	r3, [r3, r2]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b299      	uxth	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2252      	movs	r2, #82	; 0x52
 8003dbc:	5299      	strh	r1, [r3, r2]
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b00a      	add	sp, #40	; 0x28
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08c      	sub	sp, #48	; 0x30
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd2:	2b21      	cmp	r3, #33	; 0x21
 8003dd4:	d151      	bne.n	8003e7a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2252      	movs	r2, #82	; 0x52
 8003dda:	5a9b      	ldrh	r3, [r3, r2]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d132      	bne.n	8003e48 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de2:	f3ef 8310 	mrs	r3, PRIMASK
 8003de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003de8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8310 	mrs	r3, PRIMASK
 8003e18:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e1a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f383 8810 	msr	PRIMASK, r3
}
 8003e44:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e46:	e018      	b.n	8003e7a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	05d2      	lsls	r2, r2, #23
 8003e58:	0dd2      	lsrs	r2, r2, #23
 8003e5a:	b292      	uxth	r2, r2
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2252      	movs	r2, #82	; 0x52
 8003e6c:	5a9b      	ldrh	r3, [r3, r2]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b299      	uxth	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2252      	movs	r2, #82	; 0x52
 8003e78:	5299      	strh	r1, [r3, r2]
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b00c      	add	sp, #48	; 0x30
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	438a      	bics	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff fa12 	bl	80032f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b006      	add	sp, #24
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b094      	sub	sp, #80	; 0x50
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ee0:	204e      	movs	r0, #78	; 0x4e
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	215c      	movs	r1, #92	; 0x5c
 8003ee8:	5a52      	ldrh	r2, [r2, r1]
 8003eea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	589b      	ldr	r3, [r3, r2]
 8003ef2:	2b22      	cmp	r3, #34	; 0x22
 8003ef4:	d000      	beq.n	8003ef8 <UART_RxISR_8BIT+0x20>
 8003ef6:	e0ba      	b.n	800406e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	214c      	movs	r1, #76	; 0x4c
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003f02:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b2d9      	uxtb	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	400a      	ands	r2, r1
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	225a      	movs	r2, #90	; 0x5a
 8003f28:	5a9b      	ldrh	r3, [r3, r2]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b299      	uxth	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	225a      	movs	r2, #90	; 0x5a
 8003f34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	225a      	movs	r2, #90	; 0x5a
 8003f3a:	5a9b      	ldrh	r3, [r3, r2]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d000      	beq.n	8003f44 <UART_RxISR_8BIT+0x6c>
 8003f42:	e09c      	b.n	800407e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4948      	ldr	r1, [pc, #288]	; (8004088 <UART_RxISR_8BIT+0x1b0>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f76:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f80:	2301      	movs	r3, #1
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	f383 8810 	msr	PRIMASK, r3
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2101      	movs	r1, #1
 8003f98:	438a      	bics	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	2120      	movs	r1, #32
 8003fae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fca:	f3ef 8310 	mrs	r3, PRIMASK
 8003fce:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4928      	ldr	r1, [pc, #160]	; (800408c <UART_RxISR_8BIT+0x1b4>)
 8003fec:	400a      	ands	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f383 8810 	msr	PRIMASK, r3
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004000:	2b01      	cmp	r3, #1
 8004002:	d12f      	bne.n	8004064 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004010:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2110      	movs	r1, #16
 800402c:	438a      	bics	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	2210      	movs	r2, #16
 8004044:	4013      	ands	r3, r2
 8004046:	2b10      	cmp	r3, #16
 8004048:	d103      	bne.n	8004052 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2210      	movs	r2, #16
 8004050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2258      	movs	r2, #88	; 0x58
 8004056:	5a9a      	ldrh	r2, [r3, r2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff f959 	bl	8003314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004062:	e00c      	b.n	800407e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f005 fb86 	bl	8009778 <HAL_UART_RxCpltCallback>
}
 800406c:	e007      	b.n	800407e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2108      	movs	r1, #8
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b014      	add	sp, #80	; 0x50
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	fffffedf 	.word	0xfffffedf
 800408c:	fbffffff 	.word	0xfbffffff

08004090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b094      	sub	sp, #80	; 0x50
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004098:	204e      	movs	r0, #78	; 0x4e
 800409a:	183b      	adds	r3, r7, r0
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	215c      	movs	r1, #92	; 0x5c
 80040a0:	5a52      	ldrh	r2, [r2, r1]
 80040a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	589b      	ldr	r3, [r3, r2]
 80040aa:	2b22      	cmp	r3, #34	; 0x22
 80040ac:	d000      	beq.n	80040b0 <UART_RxISR_16BIT+0x20>
 80040ae:	e0ba      	b.n	8004226 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	214c      	movs	r1, #76	; 0x4c
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80040c2:	187b      	adds	r3, r7, r1
 80040c4:	183a      	adds	r2, r7, r0
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	4013      	ands	r3, r2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	225a      	movs	r2, #90	; 0x5a
 80040e0:	5a9b      	ldrh	r3, [r3, r2]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b299      	uxth	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	225a      	movs	r2, #90	; 0x5a
 80040ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	225a      	movs	r2, #90	; 0x5a
 80040f2:	5a9b      	ldrh	r3, [r3, r2]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d000      	beq.n	80040fc <UART_RxISR_16BIT+0x6c>
 80040fa:	e09c      	b.n	8004236 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	623b      	str	r3, [r7, #32]
  return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
 8004106:	2301      	movs	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4948      	ldr	r1, [pc, #288]	; (8004240 <UART_RxISR_16BIT+0x1b0>)
 800411e:	400a      	ands	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
 8004138:	2301      	movs	r3, #1
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	2120      	movs	r1, #32
 8004166:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	4013      	ands	r3, r2
 8004180:	d018      	beq.n	80041b4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004182:	f3ef 8310 	mrs	r3, PRIMASK
 8004186:	617b      	str	r3, [r7, #20]
  return(result);
 8004188:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418c:	2301      	movs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4928      	ldr	r1, [pc, #160]	; (8004244 <UART_RxISR_16BIT+0x1b4>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f383 8810 	msr	PRIMASK, r3
}
 80041b2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d12f      	bne.n	800421c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2110      	movs	r1, #16
 80041e4:	438a      	bics	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2210      	movs	r2, #16
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d103      	bne.n	800420a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2258      	movs	r2, #88	; 0x58
 800420e:	5a9a      	ldrh	r2, [r3, r2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff f87d 	bl	8003314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800421a:	e00c      	b.n	8004236 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	f005 faaa 	bl	8009778 <HAL_UART_RxCpltCallback>
}
 8004224:	e007      	b.n	8004236 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2108      	movs	r1, #8
 8004232:	430a      	orrs	r2, r1
 8004234:	619a      	str	r2, [r3, #24]
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b014      	add	sp, #80	; 0x50
 800423c:	bd80      	pop	{r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	fffffedf 	.word	0xfffffedf
 8004244:	fbffffff 	.word	0xfbffffff

08004248 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e05b      	b.n	8004318 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2278      	movs	r2, #120	; 0x78
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0018      	movs	r0, r3
 8004274:	f7fc faa8 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	438a      	bics	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff f84b 	bl	800332c <UART_SetConfig>
 8004296:	0003      	movs	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e03b      	b.n	8004318 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7ff fa26 	bl	80036fc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	01c9      	lsls	r1, r1, #7
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_RS485Ex_Init+0xd8>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	055b      	lsls	r3, r3, #21
 80042dc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <HAL_RS485Ex_Init+0xdc>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	0018      	movs	r0, r3
 8004312:	f7ff faa7 	bl	8003864 <UART_CheckIdleState>
 8004316:	0003      	movs	r3, r0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	ffff7fff 	.word	0xffff7fff
 8004324:	fc00ffff 	.word	0xfc00ffff

08004328 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	0002      	movs	r2, r0
 8004340:	1dbb      	adds	r3, r7, #6
 8004342:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	2200      	movs	r2, #0
 800434c:	5e9b      	ldrsh	r3, [r3, r2]
 800434e:	2b84      	cmp	r3, #132	; 0x84
 8004350:	d006      	beq.n	8004360 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004352:	1dbb      	adds	r3, r7, #6
 8004354:	2200      	movs	r2, #0
 8004356:	5e9a      	ldrsh	r2, [r3, r2]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	18d3      	adds	r3, r2, r3
 800435c:	3303      	adds	r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}

0800436a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800436e:	f000 fe81 	bl	8005074 <vTaskStartScheduler>
  
  return osOK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800437a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437c:	b087      	sub	sp, #28
 800437e:	af02      	add	r7, sp, #8
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004390:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff ffcd 	bl	8004338 <makeFreeRtosPriority>
 800439e:	0001      	movs	r1, r0
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	230c      	movs	r3, #12
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	9100      	str	r1, [sp, #0]
 80043aa:	0013      	movs	r3, r2
 80043ac:	0032      	movs	r2, r6
 80043ae:	0029      	movs	r1, r5
 80043b0:	0020      	movs	r0, r4
 80043b2:	f000 fcbe 	bl	8004d32 <xTaskCreate>
 80043b6:	0003      	movs	r3, r0
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80043c0:	68fb      	ldr	r3, [r7, #12]
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b005      	add	sp, #20
 80043c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3308      	adds	r3, #8
 80043d6:	001a      	movs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	4252      	negs	r2, r2
 80043e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3308      	adds	r3, #8
 80043e8:	001a      	movs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3308      	adds	r3, #8
 80043f2:	001a      	movs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}

08004406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}

08004460 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	d103      	bne.n	800447e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	e00c      	b.n	8004498 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3308      	adds	r3, #8
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e002      	b.n	800448c <vListInsert+0x2c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d2f6      	bcs.n	8004486 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}

080044cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d103      	bne.n	8004500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}

0800451c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <xQueueGenericReset+0x18>
 8004530:	b672      	cpsid	i
 8004532:	e7fe      	b.n	8004532 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004534:	f001 fdc4 	bl	80060c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	434b      	muls	r3, r1
 8004546:	18d2      	adds	r2, r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	1e59      	subs	r1, r3, #1
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	434b      	muls	r3, r1
 800456a:	18d2      	adds	r2, r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2244      	movs	r2, #68	; 0x44
 8004574:	21ff      	movs	r1, #255	; 0xff
 8004576:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2245      	movs	r2, #69	; 0x45
 800457c:	21ff      	movs	r1, #255	; 0xff
 800457e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d013      	beq.n	80045b6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3310      	adds	r3, #16
 8004592:	0018      	movs	r0, r3
 8004594:	f000 ffac 	bl	80054f0 <xTaskRemoveFromEventList>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d00c      	beq.n	80045b6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800459c:	f001 fd80 	bl	80060a0 <vPortYield>
 80045a0:	e009      	b.n	80045b6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3310      	adds	r3, #16
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7ff ff0f 	bl	80043ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3324      	adds	r3, #36	; 0x24
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff ff0a 	bl	80043ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045b6:	f001 fd95 	bl	80060e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ba:	2301      	movs	r3, #1
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b08b      	sub	sp, #44	; 0x2c
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <xQueueGenericCreate+0x18>
 80045d8:	b672      	cpsid	i
 80045da:	e7fe      	b.n	80045da <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	e003      	b.n	80045f0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4353      	muls	r3, r2
 80045ee:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3348      	adds	r3, #72	; 0x48
 80045f4:	0018      	movs	r0, r3
 80045f6:	f001 fdfb 	bl	80061f0 <pvPortMalloc>
 80045fa:	0003      	movs	r3, r0
 80045fc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3348      	adds	r3, #72	; 0x48
 8004608:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	781c      	ldrb	r4, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	0023      	movs	r3, r4
 800461a:	f000 f805 	bl	8004628 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800461e:	69bb      	ldr	r3, [r7, #24]
	}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b009      	add	sp, #36	; 0x24
 8004626:	bd90      	pop	{r4, r7, pc}

08004628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	001a      	movs	r2, r3
 8004636:	1cfb      	adds	r3, r7, #3
 8004638:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e002      	b.n	800464e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2101      	movs	r1, #1
 800465e:	0018      	movs	r0, r3
 8004660:	f7ff ff5c 	bl	800451c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b004      	add	sp, #16
 800466a:	bd80      	pop	{r7, pc}

0800466c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800467a:	2300      	movs	r3, #0
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <xQueueGenericSend+0x20>
 8004688:	b672      	cpsid	i
 800468a:	e7fe      	b.n	800468a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <xQueueGenericSend+0x2e>
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <xQueueGenericSend+0x32>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <xQueueGenericSend+0x34>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <xQueueGenericSend+0x3c>
 80046a4:	b672      	cpsid	i
 80046a6:	e7fe      	b.n	80046a6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d103      	bne.n	80046b6 <xQueueGenericSend+0x4a>
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <xQueueGenericSend+0x4e>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueGenericSend+0x50>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <xQueueGenericSend+0x58>
 80046c0:	b672      	cpsid	i
 80046c2:	e7fe      	b.n	80046c2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c4:	f001 f89a 	bl	80057fc <xTaskGetSchedulerState>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d102      	bne.n	80046d2 <xQueueGenericSend+0x66>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <xQueueGenericSend+0x6a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <xQueueGenericSend+0x6c>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <xQueueGenericSend+0x74>
 80046dc:	b672      	cpsid	i
 80046de:	e7fe      	b.n	80046de <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046e0:	f001 fcee 	bl	80060c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <xQueueGenericSend+0x8a>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d11e      	bne.n	8004734 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 f99f 	bl	8004a40 <prvCopyDataToQueue>
 8004702:	0003      	movs	r3, r0
 8004704:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	0018      	movs	r0, r3
 8004714:	f000 feec 	bl	80054f0 <xTaskRemoveFromEventList>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d007      	beq.n	800472c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800471c:	f001 fcc0 	bl	80060a0 <vPortYield>
 8004720:	e004      	b.n	800472c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004728:	f001 fcba 	bl	80060a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800472c:	f001 fcda 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	e05b      	b.n	80047ec <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800473a:	f001 fcd3 	bl	80060e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800473e:	2300      	movs	r3, #0
 8004740:	e054      	b.n	80047ec <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004748:	2314      	movs	r3, #20
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	0018      	movs	r0, r3
 800474e:	f000 ff2b 	bl	80055a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004756:	f001 fcc5 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800475a:	f000 fcd1 	bl	8005100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475e:	f001 fcaf 	bl	80060c0 <vPortEnterCritical>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2244      	movs	r2, #68	; 0x44
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b25b      	sxtb	r3, r3
 800476a:	3301      	adds	r3, #1
 800476c:	d103      	bne.n	8004776 <xQueueGenericSend+0x10a>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2244      	movs	r2, #68	; 0x44
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2245      	movs	r2, #69	; 0x45
 800477a:	5c9b      	ldrb	r3, [r3, r2]
 800477c:	b25b      	sxtb	r3, r3
 800477e:	3301      	adds	r3, #1
 8004780:	d103      	bne.n	800478a <xQueueGenericSend+0x11e>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2245      	movs	r2, #69	; 0x45
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	f001 fcab 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800478e:	1d3a      	adds	r2, r7, #4
 8004790:	2314      	movs	r3, #20
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f000 ff1a 	bl	80055d0 <xTaskCheckForTimeOut>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d11e      	bne.n	80047de <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 fa51 	bl	8004c4a <prvIsQueueFull>
 80047a8:	1e03      	subs	r3, r0, #0
 80047aa:	d011      	beq.n	80047d0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	3310      	adds	r3, #16
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	0011      	movs	r1, r2
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fe57 	bl	8005468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f9d0 	bl	8004b62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047c2:	f000 fca9 	bl	8005118 <xTaskResumeAll>
 80047c6:	1e03      	subs	r3, r0, #0
 80047c8:	d18a      	bne.n	80046e0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80047ca:	f001 fc69 	bl	80060a0 <vPortYield>
 80047ce:	e787      	b.n	80046e0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f9c5 	bl	8004b62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d8:	f000 fc9e 	bl	8005118 <xTaskResumeAll>
 80047dc:	e780      	b.n	80046e0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 f9be 	bl	8004b62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e6:	f000 fc97 	bl	8005118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ea:	2300      	movs	r3, #0
		}
	}
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b00a      	add	sp, #40	; 0x28
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <xQueueGenericSendFromISR+0x1c>
 800480c:	b672      	cpsid	i
 800480e:	e7fe      	b.n	800480e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <xQueueGenericSendFromISR+0x2a>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <xQueueGenericSendFromISR+0x2e>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <xQueueGenericSendFromISR+0x30>
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xQueueGenericSendFromISR+0x38>
 8004828:	b672      	cpsid	i
 800482a:	e7fe      	b.n	800482a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d103      	bne.n	800483a <xQueueGenericSendFromISR+0x46>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <xQueueGenericSendFromISR+0x4a>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <xQueueGenericSendFromISR+0x4c>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericSendFromISR+0x54>
 8004844:	b672      	cpsid	i
 8004846:	e7fe      	b.n	8004846 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004848:	f001 fc64 	bl	8006114 <ulSetInterruptMaskFromISR>
 800484c:	0003      	movs	r3, r0
 800484e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <xQueueGenericSendFromISR+0x6e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d12e      	bne.n	80048c0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004862:	2413      	movs	r4, #19
 8004864:	193b      	adds	r3, r7, r4
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	2145      	movs	r1, #69	; 0x45
 800486a:	5c52      	ldrb	r2, [r2, r1]
 800486c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f8e3 	bl	8004a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800487a:	193b      	adds	r3, r7, r4
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b25b      	sxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	d111      	bne.n	80048a8 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d016      	beq.n	80048ba <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fe2d 	bl	80054f0 <xTaskRemoveFromEventList>
 8004896:	1e03      	subs	r3, r0, #0
 8004898:	d00f      	beq.n	80048ba <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e008      	b.n	80048ba <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048a8:	2313      	movs	r3, #19
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	b259      	sxtb	r1, r3
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2245      	movs	r2, #69	; 0x45
 80048b8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
		{
 80048be:	e001      	b.n	80048c4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 fc2a 	bl	8006120 <vClearInterruptMaskFromISR>

	return xReturn;
 80048cc:	69fb      	ldr	r3, [r7, #28]
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b009      	add	sp, #36	; 0x24
 80048d4:	bd90      	pop	{r4, r7, pc}

080048d6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b08a      	sub	sp, #40	; 0x28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <xQueueReceive+0x1e>
 80048f0:	b672      	cpsid	i
 80048f2:	e7fe      	b.n	80048f2 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <xQueueReceive+0x2c>
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <xQueueReceive+0x30>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <xQueueReceive+0x32>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <xQueueReceive+0x3a>
 800490c:	b672      	cpsid	i
 800490e:	e7fe      	b.n	800490e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004910:	f000 ff74 	bl	80057fc <xTaskGetSchedulerState>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d102      	bne.n	800491e <xQueueReceive+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <xQueueReceive+0x4c>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <xQueueReceive+0x4e>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <xQueueReceive+0x56>
 8004928:	b672      	cpsid	i
 800492a:	e7fe      	b.n	800492a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800492c:	f001 fbc8 	bl	80060c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	0011      	movs	r1, r2
 8004942:	0018      	movs	r0, r3
 8004944:	f000 f8e7 	bl	8004b16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1e5a      	subs	r2, r3, #1
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	3310      	adds	r3, #16
 800495c:	0018      	movs	r0, r3
 800495e:	f000 fdc7 	bl	80054f0 <xTaskRemoveFromEventList>
 8004962:	1e03      	subs	r3, r0, #0
 8004964:	d001      	beq.n	800496a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004966:	f001 fb9b 	bl	80060a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800496a:	f001 fbbb 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 800496e:	2301      	movs	r3, #1
 8004970:	e062      	b.n	8004a38 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004978:	f001 fbb4 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800497c:	2300      	movs	r3, #0
 800497e:	e05b      	b.n	8004a38 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004986:	2314      	movs	r3, #20
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	0018      	movs	r0, r3
 800498c:	f000 fe0c 	bl	80055a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004994:	f001 fba6 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004998:	f000 fbb2 	bl	8005100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800499c:	f001 fb90 	bl	80060c0 <vPortEnterCritical>
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2244      	movs	r2, #68	; 0x44
 80049a4:	5c9b      	ldrb	r3, [r3, r2]
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	3301      	adds	r3, #1
 80049aa:	d103      	bne.n	80049b4 <xQueueReceive+0xde>
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2244      	movs	r2, #68	; 0x44
 80049b0:	2100      	movs	r1, #0
 80049b2:	5499      	strb	r1, [r3, r2]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2245      	movs	r2, #69	; 0x45
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	d103      	bne.n	80049c8 <xQueueReceive+0xf2>
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	2245      	movs	r2, #69	; 0x45
 80049c4:	2100      	movs	r1, #0
 80049c6:	5499      	strb	r1, [r3, r2]
 80049c8:	f001 fb8c 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049cc:	1d3a      	adds	r2, r7, #4
 80049ce:	2314      	movs	r3, #20
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	0011      	movs	r1, r2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 fdfb 	bl	80055d0 <xTaskCheckForTimeOut>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d11e      	bne.n	8004a1c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 f91c 	bl	8004c1e <prvIsQueueEmpty>
 80049e6:	1e03      	subs	r3, r0, #0
 80049e8:	d011      	beq.n	8004a0e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	3324      	adds	r3, #36	; 0x24
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fd38 	bl	8005468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 f8b1 	bl	8004b62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a00:	f000 fb8a 	bl	8005118 <xTaskResumeAll>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d191      	bne.n	800492c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004a08:	f001 fb4a 	bl	80060a0 <vPortYield>
 8004a0c:	e78e      	b.n	800492c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 f8a6 	bl	8004b62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a16:	f000 fb7f 	bl	8005118 <xTaskResumeAll>
 8004a1a:	e787      	b.n	800492c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f000 f89f 	bl	8004b62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a24:	f000 fb78 	bl	8005118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 f8f7 	bl	8004c1e <prvIsQueueEmpty>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d100      	bne.n	8004a36 <xQueueReceive+0x160>
 8004a34:	e77a      	b.n	800492c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b00a      	add	sp, #40	; 0x28
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10e      	bne.n	8004a7c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d14e      	bne.n	8004b04 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 fee2 	bl	8005834 <xTaskPriorityDisinherit>
 8004a70:	0003      	movs	r3, r0
 8004a72:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	e043      	b.n	8004b04 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d119      	bne.n	8004ab6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6898      	ldr	r0, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	f004 ff15 	bl	80098bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	18d2      	adds	r2, r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d32b      	bcc.n	8004b04 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	e026      	b.n	8004b04 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68d8      	ldr	r0, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	f004 fefb 	bl	80098bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	425b      	negs	r3, r3
 8004ad0:	18d2      	adds	r2, r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d207      	bcs.n	8004af2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	425b      	negs	r3, r3
 8004aec:	18d2      	adds	r2, r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d105      	bne.n	8004b04 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b006      	add	sp, #24
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d018      	beq.n	8004b5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	18d2      	adds	r2, r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d303      	bcc.n	8004b4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68d9      	ldr	r1, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f004 feb1 	bl	80098bc <memcpy>
	}
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b6a:	f001 faa9 	bl	80060c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b6e:	230f      	movs	r3, #15
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	2145      	movs	r1, #69	; 0x45
 8004b76:	5c52      	ldrb	r2, [r2, r1]
 8004b78:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b7a:	e013      	b.n	8004ba4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fcb1 	bl	80054f0 <xTaskRemoveFromEventList>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d001      	beq.n	8004b96 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b92:	f000 fd6d 	bl	8005670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b96:	210f      	movs	r1, #15
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba4:	230f      	movs	r3, #15
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b25b      	sxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dce5      	bgt.n	8004b7c <prvUnlockQueue+0x1a>
 8004bb0:	e000      	b.n	8004bb4 <prvUnlockQueue+0x52>
					break;
 8004bb2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2245      	movs	r2, #69	; 0x45
 8004bb8:	21ff      	movs	r1, #255	; 0xff
 8004bba:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004bbc:	f001 fa92 	bl	80060e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bc0:	f001 fa7e 	bl	80060c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bc4:	230e      	movs	r3, #14
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	2144      	movs	r1, #68	; 0x44
 8004bcc:	5c52      	ldrb	r2, [r2, r1]
 8004bce:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd0:	e013      	b.n	8004bfa <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3310      	adds	r3, #16
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fc86 	bl	80054f0 <xTaskRemoveFromEventList>
 8004be4:	1e03      	subs	r3, r0, #0
 8004be6:	d001      	beq.n	8004bec <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004be8:	f000 fd42 	bl	8005670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bec:	210e      	movs	r1, #14
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfa:	230e      	movs	r3, #14
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	dce5      	bgt.n	8004bd2 <prvUnlockQueue+0x70>
 8004c06:	e000      	b.n	8004c0a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004c08:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2244      	movs	r2, #68	; 0x44
 8004c0e:	21ff      	movs	r1, #255	; 0xff
 8004c10:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004c12:	f001 fa67 	bl	80060e4 <vPortExitCritical>
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c26:	f001 fa4b 	bl	80060c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e001      	b.n	8004c3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c3c:	f001 fa52 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c52:	f001 fa35 	bl	80060c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d102      	bne.n	8004c68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e001      	b.n	8004c6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6c:	f001 fa3a 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 8004c70:	68fb      	ldr	r3, [r7, #12]
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e015      	b.n	8004cb8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	00d2      	lsls	r2, r2, #3
 8004c92:	58d3      	ldr	r3, [r2, r3]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	00d2      	lsls	r2, r2, #3
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	3304      	adds	r3, #4
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cb0:	e006      	b.n	8004cc0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b07      	cmp	r3, #7
 8004cbc:	d9e6      	bls.n	8004c8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000240 	.word	0x20000240

08004ccc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cdc:	f001 f9f0 	bl	80060c0 <vPortEnterCritical>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2244      	movs	r2, #68	; 0x44
 8004ce4:	5c9b      	ldrb	r3, [r3, r2]
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d103      	bne.n	8004cf4 <vQueueWaitForMessageRestricted+0x28>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2244      	movs	r2, #68	; 0x44
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2245      	movs	r2, #69	; 0x45
 8004cf8:	5c9b      	ldrb	r3, [r3, r2]
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	d103      	bne.n	8004d08 <vQueueWaitForMessageRestricted+0x3c>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2245      	movs	r2, #69	; 0x45
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]
 8004d08:	f001 f9ec 	bl	80060e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 fbc1 	bl	80054a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7ff ff1c 	bl	8004b62 <prvUnlockQueue>
	}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b006      	add	sp, #24
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d32:	b590      	push	{r4, r7, lr}
 8004d34:	b08d      	sub	sp, #52	; 0x34
 8004d36:	af04      	add	r7, sp, #16
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d42:	1dbb      	adds	r3, r7, #6
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f001 fa51 	bl	80061f0 <pvPortMalloc>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d58:	20a0      	movs	r0, #160	; 0xa0
 8004d5a:	f001 fa49 	bl	80061f0 <pvPortMalloc>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6e:	e006      	b.n	8004d7e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f001 fae2 	bl	800633c <vPortFree>
 8004d78:	e001      	b.n	8004d7e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d016      	beq.n	8004db2 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	881a      	ldrh	r2, [r3, #0]
 8004d88:	683c      	ldr	r4, [r7, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	0023      	movs	r3, r4
 8004da0:	f000 f810 	bl	8004dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 f89c 	bl	8004ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dac:	2301      	movs	r3, #1
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e002      	b.n	8004db8 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004db2:	2301      	movs	r3, #1
 8004db4:	425b      	negs	r3, r3
 8004db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004db8:	69bb      	ldr	r3, [r7, #24]
	}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b009      	add	sp, #36	; 0x24
 8004dc0:	bd90      	pop	{r4, r7, pc}
	...

08004dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	493e      	ldr	r1, [pc, #248]	; (8004ed4 <prvInitialiseNewTask+0x110>)
 8004dda:	468c      	mov	ip, r1
 8004ddc:	4463      	add	r3, ip
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2207      	movs	r2, #7
 8004de8:	4393      	bics	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2207      	movs	r2, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	d001      	beq.n	8004df8 <prvInitialiseNewTask+0x34>
 8004df4:	b672      	cpsid	i
 8004df6:	e7fe      	b.n	8004df6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e013      	b.n	8004e26 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	18d3      	adds	r3, r2, r3
 8004e04:	7818      	ldrb	r0, [r3, #0]
 8004e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e08:	2134      	movs	r1, #52	; 0x34
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	18d3      	adds	r3, r2, r3
 8004e0e:	185b      	adds	r3, r3, r1
 8004e10:	1c02      	adds	r2, r0, #0
 8004e12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	18d3      	adds	r3, r2, r3
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	3301      	adds	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d9e8      	bls.n	8004dfe <prvInitialiseNewTask+0x3a>
 8004e2c:	e000      	b.n	8004e30 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004e2e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2243      	movs	r2, #67	; 0x43
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d901      	bls.n	8004e42 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e3e:	2306      	movs	r3, #6
 8004e40:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2200      	movs	r2, #0
 8004e52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	3304      	adds	r3, #4
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff fad4 	bl	8004406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	3318      	adds	r3, #24
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff facf 	bl	8004406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	2207      	movs	r2, #7
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2298      	movs	r2, #152	; 0x98
 8004e82:	2100      	movs	r1, #0
 8004e84:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	229c      	movs	r2, #156	; 0x9c
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	334c      	adds	r3, #76	; 0x4c
 8004e92:	224c      	movs	r2, #76	; 0x4c
 8004e94:	2100      	movs	r1, #0
 8004e96:	0018      	movs	r0, r3
 8004e98:	f004 fc84 	bl	80097a4 <memset>
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <prvInitialiseNewTask+0x114>)
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	; (8004edc <prvInitialiseNewTask+0x118>)
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <prvInitialiseNewTask+0x11c>)
 8004eac:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f001 f867 	bl	8005f88 <pxPortInitialiseStack>
 8004eba:	0002      	movs	r2, r0
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b006      	add	sp, #24
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	3fffffff 	.word	0x3fffffff
 8004ed8:	2000496c 	.word	0x2000496c
 8004edc:	200049d4 	.word	0x200049d4
 8004ee0:	20004a3c 	.word	0x20004a3c

08004ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eec:	f001 f8e8 	bl	80060c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <prvAddNewTaskToReadyList+0xb0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <prvAddNewTaskToReadyList+0xb0>)
 8004ef8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004efa:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <prvAddNewTaskToReadyList+0xb4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f02:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <prvAddNewTaskToReadyList+0xb4>)
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f08:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <prvAddNewTaskToReadyList+0xb0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d110      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f10:	f000 fbc8 	bl	80056a4 <prvInitialiseTaskLists>
 8004f14:	e00d      	b.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <prvAddNewTaskToReadyList+0xb8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <prvAddNewTaskToReadyList+0xb4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d802      	bhi.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <prvAddNewTaskToReadyList+0xb4>)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <prvAddNewTaskToReadyList+0xbc>)
 8004f3a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <prvAddNewTaskToReadyList+0xc0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d903      	bls.n	8004f50 <prvAddNewTaskToReadyList+0x6c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <prvAddNewTaskToReadyList+0xc0>)
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	0013      	movs	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004f5e:	189a      	adds	r2, r3, r2
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	0019      	movs	r1, r3
 8004f66:	0010      	movs	r0, r2
 8004f68:	f7ff fa58 	bl	800441c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f6c:	f001 f8ba 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <prvAddNewTaskToReadyList+0xb8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <prvAddNewTaskToReadyList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d201      	bcs.n	8004f8a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f86:	f001 f88b 	bl	80060a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	20000380 	.word	0x20000380
 8004f98:	20000280 	.word	0x20000280
 8004f9c:	2000038c 	.word	0x2000038c
 8004fa0:	2000039c 	.word	0x2000039c
 8004fa4:	20000388 	.word	0x20000388
 8004fa8:	20000284 	.word	0x20000284

08004fac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004fb4:	f001 f884 	bl	80060c0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <vTaskDelete+0x18>
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <vTaskDelete+0xac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	e000      	b.n	8004fc6 <vTaskDelete+0x1a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f7ff fa7d 	bl	80044cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3318      	adds	r3, #24
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fa74 	bl	80044cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <vTaskDelete+0xb0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	4b1c      	ldr	r3, [pc, #112]	; (800505c <vTaskDelete+0xb0>)
 8004fec:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <vTaskDelete+0xac>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d10c      	bne.n	8005012 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <vTaskDelete+0xb4>)
 8004ffe:	0011      	movs	r1, r2
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fa0b 	bl	800441c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <vTaskDelete+0xb8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <vTaskDelete+0xb8>)
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e00a      	b.n	8005028 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <vTaskDelete+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <vTaskDelete+0xbc>)
 800501a:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fbb2 	bl	8005788 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005024:	f000 fbc6 	bl	80057b4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005028:	f001 f85c 	bl	80060e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <vTaskDelete+0xc0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <vTaskDelete+0xac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	429a      	cmp	r2, r3
 800503c:	d107      	bne.n	800504e <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <vTaskDelete+0xc4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <vTaskDelete+0x9e>
 8005046:	b672      	cpsid	i
 8005048:	e7fe      	b.n	8005048 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800504a:	f001 f829 	bl	80060a0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	b004      	add	sp, #16
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	20000280 	.word	0x20000280
 800505c:	2000039c 	.word	0x2000039c
 8005060:	20000354 	.word	0x20000354
 8005064:	20000368 	.word	0x20000368
 8005068:	20000380 	.word	0x20000380
 800506c:	2000038c 	.word	0x2000038c
 8005070:	200003a8 	.word	0x200003a8

08005074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800507a:	4919      	ldr	r1, [pc, #100]	; (80050e0 <vTaskStartScheduler+0x6c>)
 800507c:	4819      	ldr	r0, [pc, #100]	; (80050e4 <vTaskStartScheduler+0x70>)
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <vTaskStartScheduler+0x74>)
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	f7ff fe52 	bl	8004d32 <xTaskCreate>
 800508e:	0003      	movs	r3, r0
 8005090:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d103      	bne.n	80050a0 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8005098:	f000 fc7c 	bl	8005994 <xTimerCreateTimerTask>
 800509c:	0003      	movs	r3, r0
 800509e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d113      	bne.n	80050ce <vTaskStartScheduler+0x5a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80050a6:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050a8:	4b10      	ldr	r3, [pc, #64]	; (80050ec <vTaskStartScheduler+0x78>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	334c      	adds	r3, #76	; 0x4c
 80050ae:	001a      	movs	r2, r3
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <vTaskStartScheduler+0x7c>)
 80050b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <vTaskStartScheduler+0x80>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	4252      	negs	r2, r2
 80050ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <vTaskStartScheduler+0x84>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <vTaskStartScheduler+0x88>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050c8:	f000 ffc6 	bl	8006058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050cc:	e004      	b.n	80050d8 <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3301      	adds	r3, #1
 80050d2:	d101      	bne.n	80050d8 <vTaskStartScheduler+0x64>
 80050d4:	b672      	cpsid	i
 80050d6:	e7fe      	b.n	80050d6 <vTaskStartScheduler+0x62>
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	080099bc 	.word	0x080099bc
 80050e4:	08005685 	.word	0x08005685
 80050e8:	200003a4 	.word	0x200003a4
 80050ec:	20000280 	.word	0x20000280
 80050f0:	20000058 	.word	0x20000058
 80050f4:	200003a0 	.word	0x200003a0
 80050f8:	2000038c 	.word	0x2000038c
 80050fc:	20000384 	.word	0x20000384

08005100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <vTaskSuspendAll+0x14>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	4b02      	ldr	r3, [pc, #8]	; (8005114 <vTaskSuspendAll+0x14>)
 800510c:	601a      	str	r2, [r3, #0]
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200003a8 	.word	0x200003a8

08005118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <xTaskResumeAll+0xf8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <xTaskResumeAll+0x1a>
 800512e:	b672      	cpsid	i
 8005130:	e7fe      	b.n	8005130 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005132:	f000 ffc5 	bl	80060c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005136:	4b36      	ldr	r3, [pc, #216]	; (8005210 <xTaskResumeAll+0xf8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	4b34      	ldr	r3, [pc, #208]	; (8005210 <xTaskResumeAll+0xf8>)
 800513e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005140:	4b33      	ldr	r3, [pc, #204]	; (8005210 <xTaskResumeAll+0xf8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d15b      	bne.n	8005200 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <xTaskResumeAll+0xfc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d057      	beq.n	8005200 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005150:	e02f      	b.n	80051b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005152:	4b31      	ldr	r3, [pc, #196]	; (8005218 <xTaskResumeAll+0x100>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3318      	adds	r3, #24
 800515e:	0018      	movs	r0, r3
 8005160:	f7ff f9b4 	bl	80044cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff f9af 	bl	80044cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <xTaskResumeAll+0x104>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d903      	bls.n	8005182 <xTaskResumeAll+0x6a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <xTaskResumeAll+0x104>)
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	0013      	movs	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	189b      	adds	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4a24      	ldr	r2, [pc, #144]	; (8005220 <xTaskResumeAll+0x108>)
 8005190:	189a      	adds	r2, r3, r2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3304      	adds	r3, #4
 8005196:	0019      	movs	r1, r3
 8005198:	0010      	movs	r0, r2
 800519a:	f7ff f93f 	bl	800441c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <xTaskResumeAll+0x10c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <xTaskResumeAll+0x110>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <xTaskResumeAll+0x100>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1cb      	bne.n	8005152 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051c0:	f000 faf8 	bl	80057b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <xTaskResumeAll+0x114>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051d0:	f000 f83c 	bl	800524c <xTaskIncrementTick>
 80051d4:	1e03      	subs	r3, r0, #0
 80051d6:	d002      	beq.n	80051de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80051d8:	4b13      	ldr	r3, [pc, #76]	; (8005228 <xTaskResumeAll+0x110>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f2      	bne.n	80051d0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <xTaskResumeAll+0x114>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <xTaskResumeAll+0x110>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051fc:	f000 ff50 	bl	80060a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005200:	f000 ff70 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005204:	68bb      	ldr	r3, [r7, #8]
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	200003a8 	.word	0x200003a8
 8005214:	20000380 	.word	0x20000380
 8005218:	20000340 	.word	0x20000340
 800521c:	20000388 	.word	0x20000388
 8005220:	20000284 	.word	0x20000284
 8005224:	20000280 	.word	0x20000280
 8005228:	20000394 	.word	0x20000394
 800522c:	20000390 	.word	0x20000390

08005230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005236:	4b04      	ldr	r3, [pc, #16]	; (8005248 <xTaskGetTickCount+0x18>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b002      	add	sp, #8
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	20000384 	.word	0x20000384

0800524c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005256:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <xTaskIncrementTick+0x13c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d000      	beq.n	8005260 <xTaskIncrementTick+0x14>
 800525e:	e083      	b.n	8005368 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005260:	4b4a      	ldr	r3, [pc, #296]	; (800538c <xTaskIncrementTick+0x140>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005268:	4b48      	ldr	r3, [pc, #288]	; (800538c <xTaskIncrementTick+0x140>)
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d117      	bne.n	80052a4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005274:	4b46      	ldr	r3, [pc, #280]	; (8005390 <xTaskIncrementTick+0x144>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <xTaskIncrementTick+0x36>
 800527e:	b672      	cpsid	i
 8005280:	e7fe      	b.n	8005280 <xTaskIncrementTick+0x34>
 8005282:	4b43      	ldr	r3, [pc, #268]	; (8005390 <xTaskIncrementTick+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <xTaskIncrementTick+0x148>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b40      	ldr	r3, [pc, #256]	; (8005390 <xTaskIncrementTick+0x144>)
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	4b40      	ldr	r3, [pc, #256]	; (8005394 <xTaskIncrementTick+0x148>)
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	4b40      	ldr	r3, [pc, #256]	; (8005398 <xTaskIncrementTick+0x14c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <xTaskIncrementTick+0x14c>)
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f000 fa88 	bl	80057b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052a4:	4b3d      	ldr	r3, [pc, #244]	; (800539c <xTaskIncrementTick+0x150>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d34e      	bcc.n	800534c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ae:	4b38      	ldr	r3, [pc, #224]	; (8005390 <xTaskIncrementTick+0x144>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <xTaskIncrementTick+0x70>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <xTaskIncrementTick+0x72>
 80052bc:	2300      	movs	r3, #0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c2:	4b36      	ldr	r3, [pc, #216]	; (800539c <xTaskIncrementTick+0x150>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	4252      	negs	r2, r2
 80052c8:	601a      	str	r2, [r3, #0]
					break;
 80052ca:	e03f      	b.n	800534c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052cc:	4b30      	ldr	r3, [pc, #192]	; (8005390 <xTaskIncrementTick+0x144>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d203      	bcs.n	80052ec <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052e4:	4b2d      	ldr	r3, [pc, #180]	; (800539c <xTaskIncrementTick+0x150>)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
						break;
 80052ea:	e02f      	b.n	800534c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	3304      	adds	r3, #4
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7ff f8eb 	bl	80044cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3318      	adds	r3, #24
 8005302:	0018      	movs	r0, r3
 8005304:	f7ff f8e2 	bl	80044cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <xTaskIncrementTick+0x154>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <xTaskIncrementTick+0xd0>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <xTaskIncrementTick+0x154>)
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	0013      	movs	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	189b      	adds	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <xTaskIncrementTick+0x158>)
 800532a:	189a      	adds	r2, r3, r2
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3304      	adds	r3, #4
 8005330:	0019      	movs	r1, r3
 8005332:	0010      	movs	r0, r2
 8005334:	f7ff f872 	bl	800441c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <xTaskIncrementTick+0x15c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	429a      	cmp	r2, r3
 8005344:	d3b3      	bcc.n	80052ae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534a:	e7b0      	b.n	80052ae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <xTaskIncrementTick+0x15c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	4914      	ldr	r1, [pc, #80]	; (80053a4 <xTaskIncrementTick+0x158>)
 8005354:	0013      	movs	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	189b      	adds	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	585b      	ldr	r3, [r3, r1]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d907      	bls.n	8005372 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e004      	b.n	8005372 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <xTaskIncrementTick+0x160>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <xTaskIncrementTick+0x160>)
 8005370:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <xTaskIncrementTick+0x164>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800537e:	697b      	ldr	r3, [r7, #20]
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}
 8005388:	200003a8 	.word	0x200003a8
 800538c:	20000384 	.word	0x20000384
 8005390:	20000338 	.word	0x20000338
 8005394:	2000033c 	.word	0x2000033c
 8005398:	20000398 	.word	0x20000398
 800539c:	200003a0 	.word	0x200003a0
 80053a0:	20000388 	.word	0x20000388
 80053a4:	20000284 	.word	0x20000284
 80053a8:	20000280 	.word	0x20000280
 80053ac:	20000390 	.word	0x20000390
 80053b0:	20000394 	.word	0x20000394

080053b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <vTaskSwitchContext+0x9c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c2:	4b24      	ldr	r3, [pc, #144]	; (8005454 <vTaskSwitchContext+0xa0>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053c8:	e03d      	b.n	8005446 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80053ca:	4b22      	ldr	r3, [pc, #136]	; (8005454 <vTaskSwitchContext+0xa0>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <vTaskSwitchContext+0xa4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e007      	b.n	80053e8 <vTaskSwitchContext+0x34>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <vTaskSwitchContext+0x2e>
 80053de:	b672      	cpsid	i
 80053e0:	e7fe      	b.n	80053e0 <vTaskSwitchContext+0x2c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	491c      	ldr	r1, [pc, #112]	; (800545c <vTaskSwitchContext+0xa8>)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	0013      	movs	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	585b      	ldr	r3, [r3, r1]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0ee      	beq.n	80053d8 <vTaskSwitchContext+0x24>
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	0013      	movs	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	189b      	adds	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <vTaskSwitchContext+0xa8>)
 8005406:	189b      	adds	r3, r3, r2
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	429a      	cmp	r2, r3
 800541e:	d104      	bne.n	800542a <vTaskSwitchContext+0x76>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <vTaskSwitchContext+0xac>)
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	4b08      	ldr	r3, [pc, #32]	; (8005458 <vTaskSwitchContext+0xa4>)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <vTaskSwitchContext+0xac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	334c      	adds	r3, #76	; 0x4c
 8005440:	001a      	movs	r2, r3
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <vTaskSwitchContext+0xb0>)
 8005444:	601a      	str	r2, [r3, #0]
}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b002      	add	sp, #8
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	200003a8 	.word	0x200003a8
 8005454:	20000394 	.word	0x20000394
 8005458:	20000388 	.word	0x20000388
 800545c:	20000284 	.word	0x20000284
 8005460:	20000280 	.word	0x20000280
 8005464:	20000058 	.word	0x20000058

08005468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <vTaskPlaceOnEventList+0x14>
 8005478:	b672      	cpsid	i
 800547a:	e7fe      	b.n	800547a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <vTaskPlaceOnEventList+0x38>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3318      	adds	r3, #24
 8005482:	001a      	movs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f7fe ffe9 	bl	8004460 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fa2a 	bl	80058ec <prvAddCurrentTaskToDelayedList>
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000280 	.word	0x20000280

080054a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <vTaskPlaceOnEventListRestricted+0x16>
 80054b6:	b672      	cpsid	i
 80054b8:	e7fe      	b.n	80054b8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <vTaskPlaceOnEventListRestricted+0x48>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3318      	adds	r3, #24
 80054c0:	001a      	movs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	0011      	movs	r1, r2
 80054c6:	0018      	movs	r0, r3
 80054c8:	f7fe ffa8 	bl	800441c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80054d2:	2301      	movs	r3, #1
 80054d4:	425b      	negs	r3, r3
 80054d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	0011      	movs	r1, r2
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 fa04 	bl	80058ec <prvAddCurrentTaskToDelayedList>
	}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b004      	add	sp, #16
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000280 	.word	0x20000280

080054f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <xTaskRemoveFromEventList+0x1a>
 8005506:	b672      	cpsid	i
 8005508:	e7fe      	b.n	8005508 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3318      	adds	r3, #24
 800550e:	0018      	movs	r0, r3
 8005510:	f7fe ffdc 	bl	80044cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <xTaskRemoveFromEventList+0xa0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11d      	bne.n	8005558 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3304      	adds	r3, #4
 8005520:	0018      	movs	r0, r3
 8005522:	f7fe ffd3 	bl	80044cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <xTaskRemoveFromEventList+0xa4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d903      	bls.n	800553a <xTaskRemoveFromEventList+0x4a>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	4b17      	ldr	r3, [pc, #92]	; (8005594 <xTaskRemoveFromEventList+0xa4>)
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	0013      	movs	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	189b      	adds	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a14      	ldr	r2, [pc, #80]	; (8005598 <xTaskRemoveFromEventList+0xa8>)
 8005548:	189a      	adds	r2, r3, r2
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	0019      	movs	r1, r3
 8005550:	0010      	movs	r0, r2
 8005552:	f7fe ff63 	bl	800441c <vListInsertEnd>
 8005556:	e007      	b.n	8005568 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3318      	adds	r3, #24
 800555c:	001a      	movs	r2, r3
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <xTaskRemoveFromEventList+0xac>)
 8005560:	0011      	movs	r1, r2
 8005562:	0018      	movs	r0, r3
 8005564:	f7fe ff5a 	bl	800441c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <xTaskRemoveFromEventList+0xb0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	429a      	cmp	r2, r3
 8005574:	d905      	bls.n	8005582 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <xTaskRemoveFromEventList+0xb4>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e001      	b.n	8005586 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b004      	add	sp, #16
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200003a8 	.word	0x200003a8
 8005594:	20000388 	.word	0x20000388
 8005598:	20000284 	.word	0x20000284
 800559c:	20000340 	.word	0x20000340
 80055a0:	20000280 	.word	0x20000280
 80055a4:	20000394 	.word	0x20000394

080055a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <vTaskInternalSetTimeOutState+0x20>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055b8:	4b04      	ldr	r3, [pc, #16]	; (80055cc <vTaskInternalSetTimeOutState+0x24>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	605a      	str	r2, [r3, #4]
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000398 	.word	0x20000398
 80055cc:	20000384 	.word	0x20000384

080055d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <xTaskCheckForTimeOut+0x14>
 80055e0:	b672      	cpsid	i
 80055e2:	e7fe      	b.n	80055e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xTaskCheckForTimeOut+0x1e>
 80055ea:	b672      	cpsid	i
 80055ec:	e7fe      	b.n	80055ec <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80055ee:	f000 fd67 	bl	80060c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <xTaskCheckForTimeOut+0x98>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	d102      	bne.n	8005610 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e024      	b.n	800565a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <xTaskCheckForTimeOut+0x9c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d007      	beq.n	800562c <xTaskCheckForTimeOut+0x5c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e016      	b.n	800565a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20c      	bcs.n	8005650 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad2      	subs	r2, r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0018      	movs	r0, r3
 8005646:	f7ff ffaf 	bl	80055a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e004      	b.n	800565a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005656:	2301      	movs	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800565a:	f000 fd43 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 800565e:	697b      	ldr	r3, [r7, #20]
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b006      	add	sp, #24
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000384 	.word	0x20000384
 800566c:	20000398 	.word	0x20000398

08005670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <vTaskMissedYield+0x10>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000394 	.word	0x20000394

08005684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800568c:	f000 f84e 	bl	800572c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005690:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <prvIdleTask+0x1c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d9f9      	bls.n	800568c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005698:	f000 fd02 	bl	80060a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800569c:	e7f6      	b.n	800568c <prvIdleTask+0x8>
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	20000284 	.word	0x20000284

080056a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	e00c      	b.n	80056ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	0013      	movs	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a14      	ldr	r2, [pc, #80]	; (800570c <prvInitialiseTaskLists+0x68>)
 80056bc:	189b      	adds	r3, r3, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f7fe fe83 	bl	80043ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3301      	adds	r3, #1
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b06      	cmp	r3, #6
 80056ce:	d9ef      	bls.n	80056b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <prvInitialiseTaskLists+0x6c>)
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7fe fe79 	bl	80043ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <prvInitialiseTaskLists+0x70>)
 80056da:	0018      	movs	r0, r3
 80056dc:	f7fe fe75 	bl	80043ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <prvInitialiseTaskLists+0x74>)
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7fe fe71 	bl	80043ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <prvInitialiseTaskLists+0x78>)
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fe fe6d 	bl	80043ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <prvInitialiseTaskLists+0x7c>)
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7fe fe69 	bl	80043ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <prvInitialiseTaskLists+0x80>)
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <prvInitialiseTaskLists+0x6c>)
 80056fc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvInitialiseTaskLists+0x84>)
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <prvInitialiseTaskLists+0x70>)
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000284 	.word	0x20000284
 8005710:	20000310 	.word	0x20000310
 8005714:	20000324 	.word	0x20000324
 8005718:	20000340 	.word	0x20000340
 800571c:	20000354 	.word	0x20000354
 8005720:	2000036c 	.word	0x2000036c
 8005724:	20000338 	.word	0x20000338
 8005728:	2000033c 	.word	0x2000033c

0800572c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005732:	e01a      	b.n	800576a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005734:	f000 fcc4 	bl	80060c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005738:	4b10      	ldr	r3, [pc, #64]	; (800577c <prvCheckTasksWaitingTermination+0x50>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	0018      	movs	r0, r3
 8005746:	f7fe fec1 	bl	80044cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <prvCheckTasksWaitingTermination+0x54>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <prvCheckTasksWaitingTermination+0x54>)
 8005752:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <prvCheckTasksWaitingTermination+0x58>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1e5a      	subs	r2, r3, #1
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <prvCheckTasksWaitingTermination+0x58>)
 800575c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800575e:	f000 fcc1 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f80f 	bl	8005788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <prvCheckTasksWaitingTermination+0x58>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e0      	bne.n	8005734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000354 	.word	0x20000354
 8005780:	20000380 	.word	0x20000380
 8005784:	20000368 	.word	0x20000368

08005788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	334c      	adds	r3, #76	; 0x4c
 8005794:	0018      	movs	r0, r3
 8005796:	f004 f80d 	bl	80097b4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	0018      	movs	r0, r3
 80057a0:	f000 fdcc 	bl	800633c <vPortFree>
			vPortFree( pxTCB );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 fdc8 	bl	800633c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b002      	add	sp, #8
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <prvResetNextTaskUnblockTime+0x40>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <prvResetNextTaskUnblockTime+0x14>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <prvResetNextTaskUnblockTime+0x16>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <prvResetNextTaskUnblockTime+0x44>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	4252      	negs	r2, r2
 80057d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057d6:	e008      	b.n	80057ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <prvResetNextTaskUnblockTime+0x40>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <prvResetNextTaskUnblockTime+0x44>)
 80057e8:	601a      	str	r2, [r3, #0]
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b002      	add	sp, #8
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	20000338 	.word	0x20000338
 80057f8:	200003a0 	.word	0x200003a0

080057fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <xTaskGetSchedulerState+0x30>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800580a:	2301      	movs	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	e008      	b.n	8005822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <xTaskGetSchedulerState+0x34>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005818:	2302      	movs	r3, #2
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e001      	b.n	8005822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005822:	687b      	ldr	r3, [r7, #4]
	}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b002      	add	sp, #8
 800582a:	bd80      	pop	{r7, pc}
 800582c:	2000038c 	.word	0x2000038c
 8005830:	200003a8 	.word	0x200003a8

08005834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <xTaskPriorityDisinherit+0xac>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <xTaskPriorityDisinherit+0x24>
 8005854:	b672      	cpsid	i
 8005856:	e7fe      	b.n	8005856 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <xTaskPriorityDisinherit+0x30>
 8005860:	b672      	cpsid	i
 8005862:	e7fe      	b.n	8005862 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	429a      	cmp	r2, r3
 8005878:	d02c      	beq.n	80058d4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d128      	bne.n	80058d4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3304      	adds	r3, #4
 8005886:	0018      	movs	r0, r3
 8005888:	f7fe fe20 	bl	80044cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	2207      	movs	r2, #7
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <xTaskPriorityDisinherit+0xb0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d903      	bls.n	80058b4 <xTaskPriorityDisinherit+0x80>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <xTaskPriorityDisinherit+0xb0>)
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	0013      	movs	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <xTaskPriorityDisinherit+0xb4>)
 80058c2:	189a      	adds	r2, r3, r2
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	3304      	adds	r3, #4
 80058c8:	0019      	movs	r1, r3
 80058ca:	0010      	movs	r0, r2
 80058cc:	f7fe fda6 	bl	800441c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058d4:	68fb      	ldr	r3, [r7, #12]
	}
 80058d6:	0018      	movs	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	b004      	add	sp, #16
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	20000280 	.word	0x20000280
 80058e4:	20000388 	.word	0x20000388
 80058e8:	20000284 	.word	0x20000284

080058ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <prvAddCurrentTaskToDelayedList+0x90>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058fc:	4b20      	ldr	r3, [pc, #128]	; (8005980 <prvAddCurrentTaskToDelayedList+0x94>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3304      	adds	r3, #4
 8005902:	0018      	movs	r0, r3
 8005904:	f7fe fde2 	bl	80044cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3301      	adds	r3, #1
 800590c:	d10b      	bne.n	8005926 <prvAddCurrentTaskToDelayedList+0x3a>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005914:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <prvAddCurrentTaskToDelayedList+0x94>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <prvAddCurrentTaskToDelayedList+0x98>)
 800591c:	0011      	movs	r1, r2
 800591e:	0018      	movs	r0, r3
 8005920:	f7fe fd7c 	bl	800441c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005924:	e026      	b.n	8005974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <prvAddCurrentTaskToDelayedList+0x94>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	429a      	cmp	r2, r3
 800593c:	d209      	bcs.n	8005952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <prvAddCurrentTaskToDelayedList+0x94>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3304      	adds	r3, #4
 8005948:	0019      	movs	r1, r3
 800594a:	0010      	movs	r0, r2
 800594c:	f7fe fd88 	bl	8004460 <vListInsert>
}
 8005950:	e010      	b.n	8005974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvAddCurrentTaskToDelayedList+0x94>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	0019      	movs	r1, r3
 800595e:	0010      	movs	r0, r2
 8005960:	f7fe fd7e 	bl	8004460 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	d202      	bcs.n	8005974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800596e:	4b08      	ldr	r3, [pc, #32]	; (8005990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b004      	add	sp, #16
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000384 	.word	0x20000384
 8005980:	20000280 	.word	0x20000280
 8005984:	2000036c 	.word	0x2000036c
 8005988:	2000033c 	.word	0x2000033c
 800598c:	20000338 	.word	0x20000338
 8005990:	200003a0 	.word	0x200003a0

08005994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800599a:	2300      	movs	r3, #0
 800599c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800599e:	f000 faa1 	bl	8005ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <xTimerCreateTimerTask+0x44>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00c      	beq.n	80059c4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	005a      	lsls	r2, r3, #1
 80059ae:	490b      	ldr	r1, [pc, #44]	; (80059dc <xTimerCreateTimerTask+0x48>)
 80059b0:	480b      	ldr	r0, [pc, #44]	; (80059e0 <xTimerCreateTimerTask+0x4c>)
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <xTimerCreateTimerTask+0x50>)
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	2303      	movs	r3, #3
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7ff f9b9 	bl	8004d32 <xTaskCreate>
 80059c0:	0003      	movs	r3, r0
 80059c2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xTimerCreateTimerTask+0x3a>
 80059ca:	b672      	cpsid	i
 80059cc:	e7fe      	b.n	80059cc <xTimerCreateTimerTask+0x38>
	return xReturn;
 80059ce:	687b      	ldr	r3, [r7, #4]
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200003dc 	.word	0x200003dc
 80059dc:	080099c4 	.word	0x080099c4
 80059e0:	08005b7d 	.word	0x08005b7d
 80059e4:	200003e0 	.word	0x200003e0

080059e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80059f6:	2028      	movs	r0, #40	; 0x28
 80059f8:	f000 fbfa 	bl	80061f0 <pvPortMalloc>
 80059fc:	0003      	movs	r3, r0
 80059fe:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005a06:	683c      	ldr	r4, [r7, #0]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	0023      	movs	r3, r4
 8005a18:	f000 f805 	bl	8005a26 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005a1c:	697b      	ldr	r3, [r7, #20]
	}
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b007      	add	sp, #28
 8005a24:	bd90      	pop	{r4, r7, pc}

08005a26 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <prvInitialiseNewTimer+0x18>
 8005a3a:	b672      	cpsid	i
 8005a3c:	e7fe      	b.n	8005a3c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005a44:	f000 fa4e 	bl	8005ee4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fe fccb 	bl	8004406 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b004      	add	sp, #16
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <xTimerGenericCommand+0x1c>
 8005a90:	b672      	cpsid	i
 8005a92:	e7fe      	b.n	8005a92 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <xTimerGenericCommand+0x90>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d030      	beq.n	8005afe <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a9c:	2410      	movs	r4, #16
 8005a9e:	193b      	adds	r3, r7, r4
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005aa4:	193b      	adds	r3, r7, r4
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005aaa:	193b      	adds	r3, r7, r4
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	dc19      	bgt.n	8005aea <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ab6:	f7ff fea1 	bl	80057fc <xTaskGetSchedulerState>
 8005aba:	0003      	movs	r3, r0
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d109      	bne.n	8005ad4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <xTimerGenericCommand+0x90>)
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	1939      	adds	r1, r7, r4
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f7fe fdcf 	bl	800466c <xQueueGenericSend>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e014      	b.n	8005afe <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xTimerGenericCommand+0x90>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	2310      	movs	r3, #16
 8005ada:	18f9      	adds	r1, r7, r3
 8005adc:	2300      	movs	r3, #0
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f7fe fdc4 	bl	800466c <xQueueGenericSend>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e009      	b.n	8005afe <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <xTimerGenericCommand+0x90>)
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	2310      	movs	r3, #16
 8005af2:	18f9      	adds	r1, r7, r3
 8005af4:	2300      	movs	r3, #0
 8005af6:	f7fe fe7d 	bl	80047f4 <xQueueGenericSendFromISR>
 8005afa:	0003      	movs	r3, r0
 8005afc:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005afe:	69fb      	ldr	r3, [r7, #28]
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b009      	add	sp, #36	; 0x24
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	200003dc 	.word	0x200003dc

08005b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <prvProcessExpiredTimer+0x6c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3304      	adds	r3, #4
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7fe fcd1 	bl	80044cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d119      	bne.n	8005b66 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	18d1      	adds	r1, r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f8b6 	bl	8005cb0 <prvInsertTimerInActiveList>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d00e      	beq.n	8005b66 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	f7ff ff90 	bl	8005a78 <xTimerGenericCommand>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <prvProcessExpiredTimer+0x5a>
 8005b62:	b672      	cpsid	i
 8005b64:	e7fe      	b.n	8005b64 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	0010      	movs	r0, r2
 8005b6e:	4798      	blx	r3
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b004      	add	sp, #16
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200003d4 	.word	0x200003d4

08005b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b84:	2308      	movs	r3, #8
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 f851 	bl	8005c30 <prvGetNextExpireTime>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0011      	movs	r1, r2
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 f803 	bl	8005ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b9e:	f000 f8c9 	bl	8005d34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ba2:	e7ef      	b.n	8005b84 <prvTimerTask+0x8>

08005ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005bae:	f7ff faa7 	bl	8005100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f000 f85a 	bl	8005c70 <prvSampleTimeNow>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d129      	bne.n	8005c1a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10c      	bne.n	8005be6 <prvProcessTimerOrBlockTask+0x42>
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d808      	bhi.n	8005be6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005bd4:	f7ff faa0 	bl	8005118 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0011      	movs	r1, r2
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7ff ff94 	bl	8005b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005be4:	e01b      	b.n	8005c1e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <prvProcessTimerOrBlockTask+0x84>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	425a      	negs	r2, r3
 8005bf4:	4153      	adcs	r3, r2
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <prvProcessTimerOrBlockTask+0x88>)
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	0019      	movs	r1, r3
 8005c08:	f7ff f860 	bl	8004ccc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c0c:	f7ff fa84 	bl	8005118 <xTaskResumeAll>
 8005c10:	1e03      	subs	r3, r0, #0
 8005c12:	d104      	bne.n	8005c1e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005c14:	f000 fa44 	bl	80060a0 <vPortYield>
}
 8005c18:	e001      	b.n	8005c1e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005c1a:	f7ff fa7d 	bl	8005118 <xTaskResumeAll>
}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b004      	add	sp, #16
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	200003d8 	.word	0x200003d8
 8005c2c:	200003dc 	.word	0x200003dc

08005c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <prvGetNextExpireTime+0x3c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	425a      	negs	r2, r3
 8005c40:	4153      	adcs	r3, r2
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	001a      	movs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <prvGetNextExpireTime+0x3c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e001      	b.n	8005c62 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c62:	68fb      	ldr	r3, [r7, #12]
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b004      	add	sp, #16
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	200003d4 	.word	0x200003d4

08005c70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c78:	f7ff fada 	bl	8005230 <xTaskGetTickCount>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvSampleTimeNow+0x3c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d205      	bcs.n	8005c96 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005c8a:	f000 f8d1 	bl	8005e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e002      	b.n	8005c9c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <prvSampleTimeNow+0x3c>)
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b004      	add	sp, #16
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200003e4 	.word	0x200003e4

08005cb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d812      	bhi.n	8005cfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e01b      	b.n	8005d22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cea:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <prvInsertTimerInActiveList+0x7c>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	0019      	movs	r1, r3
 8005cf4:	0010      	movs	r0, r2
 8005cf6:	f7fe fbb3 	bl	8004460 <vListInsert>
 8005cfa:	e012      	b.n	8005d22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d206      	bcs.n	8005d12 <prvInsertTimerInActiveList+0x62>
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e007      	b.n	8005d22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d12:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <prvInsertTimerInActiveList+0x80>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	0010      	movs	r0, r2
 8005d1e:	f7fe fb9f 	bl	8004460 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d22:	697b      	ldr	r3, [r7, #20]
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b006      	add	sp, #24
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200003d8 	.word	0x200003d8
 8005d30:	200003d4 	.word	0x200003d4

08005d34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b08b      	sub	sp, #44	; 0x2c
 8005d38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d3a:	e065      	b.n	8005e08 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	18bb      	adds	r3, r7, r2
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db60      	blt.n	8005e08 <prvProcessReceivedCommands+0xd4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d46:	18bb      	adds	r3, r7, r2
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	3304      	adds	r3, #4
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7fe fbb7 	bl	80044cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d5e:	1d3b      	adds	r3, r7, #4
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff ff85 	bl	8005c70 <prvSampleTimeNow>
 8005d66:	0003      	movs	r3, r0
 8005d68:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	d848      	bhi.n	8005e06 <prvProcessReceivedCommands+0xd2>
 8005d74:	009a      	lsls	r2, r3, #2
 8005d76:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <prvProcessReceivedCommands+0xf4>)
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d7e:	2408      	movs	r4, #8
 8005d80:	193b      	adds	r3, r7, r4
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	18d1      	adds	r1, r2, r3
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	69f8      	ldr	r0, [r7, #28]
 8005d92:	f7ff ff8d 	bl	8005cb0 <prvInsertTimerInActiveList>
 8005d96:	1e03      	subs	r3, r0, #0
 8005d98:	d036      	beq.n	8005e08 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	0010      	movs	r0, r2
 8005da2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d12d      	bne.n	8005e08 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dac:	193b      	adds	r3, r7, r4
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	18d2      	adds	r2, r2, r3
 8005db6:	69f8      	ldr	r0, [r7, #28]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	f7ff fe5a 	bl	8005a78 <xTimerGenericCommand>
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d11c      	bne.n	8005e08 <prvProcessReceivedCommands+0xd4>
 8005dce:	b672      	cpsid	i
 8005dd0:	e7fe      	b.n	8005dd0 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <prvProcessReceivedCommands+0xb4>
 8005de4:	b672      	cpsid	i
 8005de6:	e7fe      	b.n	8005de6 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	18d1      	adds	r1, r2, r3
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	69f8      	ldr	r0, [r7, #28]
 8005df6:	f7ff ff5b 	bl	8005cb0 <prvInsertTimerInActiveList>
					break;
 8005dfa:	e005      	b.n	8005e08 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f000 fa9c 	bl	800633c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e04:	e000      	b.n	8005e08 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
 8005e06:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <prvProcessReceivedCommands+0xf8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	18b9      	adds	r1, r7, r2
 8005e10:	2200      	movs	r2, #0
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7fe fd5f 	bl	80048d6 <xQueueReceive>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d18f      	bne.n	8005d3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b009      	add	sp, #36	; 0x24
 8005e24:	bd90      	pop	{r4, r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	08009a54 	.word	0x08009a54
 8005e2c:	200003dc 	.word	0x200003dc

08005e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e36:	e03e      	b.n	8005eb6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e38:	4b28      	ldr	r3, [pc, #160]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e42:	4b26      	ldr	r3, [pc, #152]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7fe fb3b 	bl	80044cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	0010      	movs	r0, r2
 8005e5e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d126      	bne.n	8005eb6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d90e      	bls.n	8005e98 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	0019      	movs	r1, r3
 8005e90:	0010      	movs	r0, r2
 8005e92:	f7fe fae5 	bl	8004460 <vListInsert>
 8005e96:	e00e      	b.n	8005eb6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f7ff fde8 	bl	8005a78 <xTimerGenericCommand>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <prvSwitchTimerLists+0x86>
 8005eb2:	b672      	cpsid	i
 8005eb4:	e7fe      	b.n	8005eb4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1bb      	bne.n	8005e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvSwitchTimerLists+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <prvSwitchTimerLists+0xac>)
 8005ecc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <prvSwitchTimerLists+0xb0>)
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b006      	add	sp, #24
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	200003d4 	.word	0x200003d4
 8005ee0:	200003d8 	.word	0x200003d8

08005ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ee8:	f000 f8ea 	bl	80060c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d120      	bne.n	8005f36 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fe fa67 	bl	80043ca <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005efc:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <prvCheckForValidListAndQueue+0x64>)
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7fe fa63 	bl	80043ca <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <prvCheckForValidListAndQueue+0x68>)
 8005f06:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005f08:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f0a:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <prvCheckForValidListAndQueue+0x6c>)
 8005f0c:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <prvCheckForValidListAndQueue+0x64>)
 8005f0e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f10:	2200      	movs	r2, #0
 8005f12:	210c      	movs	r1, #12
 8005f14:	2004      	movs	r0, #4
 8005f16:	f7fe fb55 	bl	80045c4 <xQueueGenericCreate>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005f1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d006      	beq.n	8005f36 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <prvCheckForValidListAndQueue+0x70>)
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7fe fea3 	bl	8004c7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f36:	f000 f8d5 	bl	80060e4 <vPortExitCritical>
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200003dc 	.word	0x200003dc
 8005f44:	200003ac 	.word	0x200003ac
 8005f48:	200003c0 	.word	0x200003c0
 8005f4c:	200003d4 	.word	0x200003d4
 8005f50:	200003d8 	.word	0x200003d8
 8005f54:	080099cc 	.word	0x080099cc

08005f58 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <pvTimerGetTimerID+0x16>
 8005f6a:	b672      	cpsid	i
 8005f6c:	e7fe      	b.n	8005f6c <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8005f6e:	f000 f8a7 	bl	80060c0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8005f78:	f000 f8b4 	bl	80060e4 <vPortExitCritical>

	return pvReturn;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b004      	add	sp, #16
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3b04      	subs	r3, #4
 8005f98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	0452      	lsls	r2, r2, #17
 8005fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fb4:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <pxPortInitialiseStack+0x50>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b14      	subs	r3, #20
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b20      	subs	r3, #32
 8005fca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	0018      	movs	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b004      	add	sp, #16
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	08005fdd 	.word	0x08005fdd

08005fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <prvTaskExitError+0x2c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <prvTaskExitError+0x16>
 8005fee:	b672      	cpsid	i
 8005ff0:	e7fe      	b.n	8005ff0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005ff2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0fc      	beq.n	8005ff6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b002      	add	sp, #8
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	20000008 	.word	0x20000008

0800600c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006020 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006020:	4a0b      	ldr	r2, [pc, #44]	; (8006050 <pxCurrentTCBConst2>)
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	3020      	adds	r0, #32
 8006028:	f380 8809 	msr	PSP, r0
 800602c:	2002      	movs	r0, #2
 800602e:	f380 8814 	msr	CONTROL, r0
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006038:	46ae      	mov	lr, r5
 800603a:	bc08      	pop	{r3}
 800603c:	bc04      	pop	{r2}
 800603e:	b662      	cpsie	i
 8006040:	4718      	bx	r3
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	46c0      	nop			; (mov r8, r8)

08006050 <pxCurrentTCBConst2>:
 8006050:	20000280 	.word	0x20000280
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006054:	46c0      	nop			; (mov r8, r8)
 8006056:	46c0      	nop			; (mov r8, r8)

08006058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <xPortStartScheduler+0x40>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <xPortStartScheduler+0x40>)
 8006062:	21ff      	movs	r1, #255	; 0xff
 8006064:	0409      	lsls	r1, r1, #16
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <xPortStartScheduler+0x40>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <xPortStartScheduler+0x40>)
 8006070:	21ff      	movs	r1, #255	; 0xff
 8006072:	0609      	lsls	r1, r1, #24
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006078:	f000 f898 	bl	80061ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800607c:	4b07      	ldr	r3, [pc, #28]	; (800609c <xPortStartScheduler+0x44>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006082:	f7ff ffcd 	bl	8006020 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006086:	f7ff f995 	bl	80053b4 <vTaskSwitchContext>
	prvTaskExitError();
 800608a:	f7ff ffa7 	bl	8005fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800608e:	2300      	movs	r3, #0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	e000ed20 	.word	0xe000ed20
 800609c:	20000008 	.word	0x20000008

080060a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <vPortYield+0x1c>)
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	0552      	lsls	r2, r2, #21
 80060aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80060ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80060b0:	f3bf 8f6f 	isb	sy
}
 80060b4:	46c0      	nop			; (mov r8, r8)
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80060c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <vPortEnterCritical+0x20>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <vPortEnterCritical+0x20>)
 80060ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80060d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80060d4:	f3bf 8f6f 	isb	sy
}
 80060d8:	46c0      	nop			; (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	20000008 	.word	0x20000008

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <vPortExitCritical+0x2c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <vPortExitCritical+0x10>
 80060f0:	b672      	cpsid	i
 80060f2:	e7fe      	b.n	80060f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <vPortExitCritical+0x2c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <vPortExitCritical+0x2c>)
 80060fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <vPortExitCritical+0x2c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d100      	bne.n	8006108 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006106:	b662      	cpsie	i
    }
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	20000008 	.word	0x20000008

08006114 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006114:	f3ef 8010 	mrs	r0, PRIMASK
 8006118:	b672      	cpsid	i
 800611a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	0018      	movs	r0, r3

08006120 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006120:	f380 8810 	msr	PRIMASK, r0
 8006124:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006126:	46c0      	nop			; (mov r8, r8)
	...

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <pxCurrentTCBConst>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	3820      	subs	r0, #32
 800613a:	6010      	str	r0, [r2, #0]
 800613c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800613e:	4644      	mov	r4, r8
 8006140:	464d      	mov	r5, r9
 8006142:	4656      	mov	r6, sl
 8006144:	465f      	mov	r7, fp
 8006146:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006148:	b508      	push	{r3, lr}
 800614a:	b672      	cpsid	i
 800614c:	f7ff f932 	bl	80053b4 <vTaskSwitchContext>
 8006150:	b662      	cpsie	i
 8006152:	bc0c      	pop	{r2, r3}
 8006154:	6811      	ldr	r1, [r2, #0]
 8006156:	6808      	ldr	r0, [r1, #0]
 8006158:	3010      	adds	r0, #16
 800615a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800615c:	46a0      	mov	r8, r4
 800615e:	46a9      	mov	r9, r5
 8006160:	46b2      	mov	sl, r6
 8006162:	46bb      	mov	fp, r7
 8006164:	f380 8809 	msr	PSP, r0
 8006168:	3820      	subs	r0, #32
 800616a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800616c:	4718      	bx	r3
 800616e:	46c0      	nop			; (mov r8, r8)

08006170 <pxCurrentTCBConst>:
 8006170:	20000280 	.word	0x20000280
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	46c0      	nop			; (mov r8, r8)

08006178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800617e:	f7ff ffc9 	bl	8006114 <ulSetInterruptMaskFromISR>
 8006182:	0003      	movs	r3, r0
 8006184:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006186:	f7ff f861 	bl	800524c <xTaskIncrementTick>
 800618a:	1e03      	subs	r3, r0, #0
 800618c:	d003      	beq.n	8006196 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <SysTick_Handler+0x30>)
 8006190:	2280      	movs	r2, #128	; 0x80
 8006192:	0552      	lsls	r2, r2, #21
 8006194:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff ffc1 	bl	8006120 <vClearInterruptMaskFromISR>
}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b002      	add	sp, #8
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <prvSetupTimerInterrupt+0x34>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <prvSetupTimerInterrupt+0x38>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <prvSetupTimerInterrupt+0x3c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	22fa      	movs	r2, #250	; 0xfa
 80061c2:	0091      	lsls	r1, r2, #2
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7f9 ff9f 	bl	8000108 <__udivsi3>
 80061ca:	0003      	movs	r3, r0
 80061cc:	001a      	movs	r2, r3
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <prvSetupTimerInterrupt+0x40>)
 80061d0:	3a01      	subs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80061d4:	4b02      	ldr	r3, [pc, #8]	; (80061e0 <prvSetupTimerInterrupt+0x34>)
 80061d6:	2207      	movs	r2, #7
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	e000e010 	.word	0xe000e010
 80061e4:	e000e018 	.word	0xe000e018
 80061e8:	20000000 	.word	0x20000000
 80061ec:	e000e014 	.word	0xe000e014

080061f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80061fc:	f7fe ff80 	bl	8005100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006200:	4b49      	ldr	r3, [pc, #292]	; (8006328 <pvPortMalloc+0x138>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006208:	f000 f8e0 	bl	80063cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800620c:	4b47      	ldr	r3, [pc, #284]	; (800632c <pvPortMalloc+0x13c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4013      	ands	r3, r2
 8006214:	d000      	beq.n	8006218 <pvPortMalloc+0x28>
 8006216:	e079      	b.n	800630c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800621e:	2208      	movs	r2, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	189b      	adds	r3, r3, r2
 8006224:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2207      	movs	r2, #7
 800622a:	4013      	ands	r3, r2
 800622c:	d00a      	beq.n	8006244 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2207      	movs	r2, #7
 8006232:	4393      	bics	r3, r2
 8006234:	3308      	adds	r3, #8
 8006236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2207      	movs	r2, #7
 800623c:	4013      	ands	r3, r2
 800623e:	d001      	beq.n	8006244 <pvPortMalloc+0x54>
 8006240:	b672      	cpsid	i
 8006242:	e7fe      	b.n	8006242 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d060      	beq.n	800630c <pvPortMalloc+0x11c>
 800624a:	4b39      	ldr	r3, [pc, #228]	; (8006330 <pvPortMalloc+0x140>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d85b      	bhi.n	800630c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006254:	4b37      	ldr	r3, [pc, #220]	; (8006334 <pvPortMalloc+0x144>)
 8006256:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006258:	4b36      	ldr	r3, [pc, #216]	; (8006334 <pvPortMalloc+0x144>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625e:	e004      	b.n	800626a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d903      	bls.n	800627c <pvPortMalloc+0x8c>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800627c:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <pvPortMalloc+0x138>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	429a      	cmp	r2, r3
 8006284:	d042      	beq.n	800630c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	189b      	adds	r3, r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	2308      	movs	r3, #8
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d916      	bls.n	80062d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	18d3      	adds	r3, r2, r3
 80062ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2207      	movs	r2, #7
 80062b4:	4013      	ands	r3, r2
 80062b6:	d001      	beq.n	80062bc <pvPortMalloc+0xcc>
 80062b8:	b672      	cpsid	i
 80062ba:	e7fe      	b.n	80062ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f000 f8db 	bl	800648c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <pvPortMalloc+0x140>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	4b13      	ldr	r3, [pc, #76]	; (8006330 <pvPortMalloc+0x140>)
 80062e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062e4:	4b12      	ldr	r3, [pc, #72]	; (8006330 <pvPortMalloc+0x140>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <pvPortMalloc+0x148>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d203      	bcs.n	80062f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <pvPortMalloc+0x140>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b10      	ldr	r3, [pc, #64]	; (8006338 <pvPortMalloc+0x148>)
 80062f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <pvPortMalloc+0x13c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	431a      	orrs	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800630c:	f7fe ff04 	bl	8005118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2207      	movs	r2, #7
 8006314:	4013      	ands	r3, r2
 8006316:	d001      	beq.n	800631c <pvPortMalloc+0x12c>
 8006318:	b672      	cpsid	i
 800631a:	e7fe      	b.n	800631a <pvPortMalloc+0x12a>
	return pvReturn;
 800631c:	68fb      	ldr	r3, [r7, #12]
}
 800631e:	0018      	movs	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	b006      	add	sp, #24
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	200043f0 	.word	0x200043f0
 800632c:	200043fc 	.word	0x200043fc
 8006330:	200043f4 	.word	0x200043f4
 8006334:	200043e8 	.word	0x200043e8
 8006338:	200043f8 	.word	0x200043f8

0800633c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d035      	beq.n	80063ba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800634e:	2308      	movs	r3, #8
 8006350:	425b      	negs	r3, r3
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	18d3      	adds	r3, r2, r3
 8006356:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <vPortFree+0x88>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4013      	ands	r3, r2
 8006366:	d101      	bne.n	800636c <vPortFree+0x30>
 8006368:	b672      	cpsid	i
 800636a:	e7fe      	b.n	800636a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <vPortFree+0x3c>
 8006374:	b672      	cpsid	i
 8006376:	e7fe      	b.n	8006376 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <vPortFree+0x88>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4013      	ands	r3, r2
 8006382:	d01a      	beq.n	80063ba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d116      	bne.n	80063ba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <vPortFree+0x88>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800639c:	f7fe feb0 	bl	8005100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <vPortFree+0x8c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	18d2      	adds	r2, r2, r3
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <vPortFree+0x8c>)
 80063ac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	0018      	movs	r0, r3
 80063b2:	f000 f86b 	bl	800648c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063b6:	f7fe feaf 	bl	8005118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	46bd      	mov	sp, r7
 80063be:	b004      	add	sp, #16
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	200043fc 	.word	0x200043fc
 80063c8:	200043f4 	.word	0x200043f4

080063cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d8:	4b26      	ldr	r3, [pc, #152]	; (8006474 <prvHeapInit+0xa8>)
 80063da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2207      	movs	r2, #7
 80063e0:	4013      	ands	r3, r2
 80063e2:	d00c      	beq.n	80063fe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3307      	adds	r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2207      	movs	r2, #7
 80063ee:	4393      	bics	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <prvHeapInit+0xa8>)
 80063fa:	18d3      	adds	r3, r2, r3
 80063fc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006402:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <prvHeapInit+0xac>)
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006408:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <prvHeapInit+0xac>)
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	18d3      	adds	r3, r2, r3
 8006414:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006416:	2208      	movs	r2, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2207      	movs	r2, #7
 8006422:	4393      	bics	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <prvHeapInit+0xb0>)
 800642a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <prvHeapInit+0xb0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <prvHeapInit+0xb0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	1ad2      	subs	r2, r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <prvHeapInit+0xb0>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <prvHeapInit+0xb4>)
 8006458:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <prvHeapInit+0xb8>)
 8006460:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <prvHeapInit+0xbc>)
 8006464:	2280      	movs	r2, #128	; 0x80
 8006466:	0612      	lsls	r2, r2, #24
 8006468:	601a      	str	r2, [r3, #0]
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	200003e8 	.word	0x200003e8
 8006478:	200043e8 	.word	0x200043e8
 800647c:	200043f0 	.word	0x200043f0
 8006480:	200043f8 	.word	0x200043f8
 8006484:	200043f4 	.word	0x200043f4
 8006488:	200043fc 	.word	0x200043fc

0800648c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <prvInsertBlockIntoFreeList+0xa8>)
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e002      	b.n	80064a0 <prvInsertBlockIntoFreeList+0x14>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d8f7      	bhi.n	800649a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	18d3      	adds	r3, r2, r3
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d108      	bne.n	80064ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	18d2      	adds	r2, r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	18d2      	adds	r2, r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d118      	bne.n	8006514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <prvInsertBlockIntoFreeList+0xac>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d00d      	beq.n	800650a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	18d2      	adds	r2, r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e008      	b.n	800651c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <prvInsertBlockIntoFreeList+0xac>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e003      	b.n	800651c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d002      	beq.n	800652a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	46bd      	mov	sp, r7
 800652e:	b004      	add	sp, #16
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	200043e8 	.word	0x200043e8
 8006538:	200043f0 	.word	0x200043f0

0800653c <pxMBMGetNewHdl>:

#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    xMBMInternalHandle * pxMBMGetNewHdl( void )
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENORES, eStatus2;
 8006542:	230f      	movs	r3, #15
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	2204      	movs	r2, #4
 8006548:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
    UBYTE           ubIdx;

    MBP_ENTER_CRITICAL_SECTION(  );
 800654e:	f002 fa38 	bl	80089c2 <vMBPEnterCritical>
    if( !bIsInitalized )
 8006552:	4b5e      	ldr	r3, [pc, #376]	; (80066cc <pxMBMGetNewHdl+0x190>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d155      	bne.n	8006606 <pxMBMGetNewHdl+0xca>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 800655a:	1dfb      	adds	r3, r7, #7
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e04a      	b.n	80065f8 <pxMBMGetNewHdl+0xbc>
        {
            MBM_RESET_HDL( &xMBMInternalHdl[ubIdx] );
 8006562:	1dfb      	adds	r3, r7, #7
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006568:	0152      	lsls	r2, r2, #5
 800656a:	2100      	movs	r1, #0
 800656c:	50d1      	str	r1, [r2, r3]
 800656e:	1dfb      	adds	r3, r7, #7
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	4a57      	ldr	r2, [pc, #348]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006574:	015b      	lsls	r3, r3, #5
 8006576:	18d3      	adds	r3, r2, r3
 8006578:	3304      	adds	r3, #4
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	1dfb      	adds	r3, r7, #7
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4a53      	ldr	r2, [pc, #332]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006584:	015b      	lsls	r3, r3, #5
 8006586:	18d3      	adds	r3, r2, r3
 8006588:	3308      	adds	r3, #8
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	1dfb      	adds	r3, r7, #7
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	4a4f      	ldr	r2, [pc, #316]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006594:	015b      	lsls	r3, r3, #5
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	330c      	adds	r3, #12
 800659a:	22ff      	movs	r2, #255	; 0xff
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	1dfb      	adds	r3, r7, #7
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 80065a4:	015b      	lsls	r3, r3, #5
 80065a6:	18d3      	adds	r3, r2, r3
 80065a8:	3310      	adds	r3, #16
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	1dfb      	adds	r3, r7, #7
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	4a47      	ldr	r2, [pc, #284]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 80065b4:	015b      	lsls	r3, r3, #5
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	330e      	adds	r3, #14
 80065ba:	2200      	movs	r2, #0
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	1dfb      	adds	r3, r7, #7
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	4a43      	ldr	r2, [pc, #268]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 80065c4:	015b      	lsls	r3, r3, #5
 80065c6:	18d3      	adds	r3, r2, r3
 80065c8:	3314      	adds	r3, #20
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	1dfb      	adds	r3, r7, #7
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	4a3f      	ldr	r2, [pc, #252]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 80065d4:	015b      	lsls	r3, r3, #5
 80065d6:	18d3      	adds	r3, r2, r3
 80065d8:	3318      	adds	r3, #24
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4a3b      	ldr	r2, [pc, #236]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 80065e4:	015b      	lsls	r3, r3, #5
 80065e6:	18d3      	adds	r3, r2, r3
 80065e8:	331c      	adds	r3, #28
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 80065ee:	1dfb      	adds	r3, r7, #7
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	1dfb      	adds	r3, r7, #7
 80065f4:	3201      	adds	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	1dfb      	adds	r3, r7, #7
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d9b0      	bls.n	8006562 <pxMBMGetNewHdl+0x26>
        }
        bIsInitalized = TRUE;
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <pxMBMGetNewHdl+0x190>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
    }
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 8006606:	1dfb      	adds	r3, r7, #7
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e042      	b.n	8006694 <pxMBMGetNewHdl+0x158>
    {
        if( IDX_INVALID == xMBMInternalHdl[ubIdx].ubIdx )
 800660e:	1dfb      	adds	r3, r7, #7
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006614:	015b      	lsls	r3, r3, #5
 8006616:	18d3      	adds	r3, r2, r3
 8006618:	330c      	adds	r3, #12
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2bff      	cmp	r3, #255	; 0xff
 800661e:	d134      	bne.n	800668a <pxMBMGetNewHdl+0x14e>
        {
            pxIntHdl = &xMBMInternalHdl[ubIdx];
 8006620:	1dfb      	adds	r3, r7, #7
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <pxMBMGetNewHdl+0x194>)
 8006628:	18d3      	adds	r3, r2, r3
 800662a:	60bb      	str	r3, [r7, #8]
            pxIntHdl->ubIdx = ubIdx;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	1dfa      	adds	r2, r7, #7
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	731a      	strb	r2, [r3, #12]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
            pxIntHdl->usSlaveTimeoutMS = MBM_DEFAULT_RESPONSE_TIMEOUT;
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_TIMEOUT_RESOLUTION_MS, bMBMResponseTimeoutCB, pxIntHdl ) ) )
#else
            if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxIntHdl->xRespTimeoutHdl ), MBM_DEFAULT_RESPONSE_TIMEOUT, bMBMResponseTimeoutCB, pxIntHdl ) ) )
 8006634:	68b8      	ldr	r0, [r7, #8]
 8006636:	1dbc      	adds	r4, r7, #6
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4a26      	ldr	r2, [pc, #152]	; (80066d4 <pxMBMGetNewHdl+0x198>)
 800663c:	21fa      	movs	r1, #250	; 0xfa
 800663e:	0049      	lsls	r1, r1, #1
 8006640:	f002 fcba 	bl	8008fb8 <eMBPTimerInit>
 8006644:	0003      	movs	r3, r0
 8006646:	7023      	strb	r3, [r4, #0]
 8006648:	1dbb      	adds	r3, r7, #6
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <pxMBMGetNewHdl+0x120>
#endif
            {
                eStatus = eStatus2;
 8006650:	230f      	movs	r3, #15
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	1dba      	adds	r2, r7, #6
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_ENOERR;
            }
            break;
 800665a:	e01f      	b.n	800669c <pxMBMGetNewHdl+0x160>
            else if( MB_ENOERR != ( eStatus2 = eMBPEventCreate( &( pxIntHdl->xFrameEventHdl ) ) ) )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3304      	adds	r3, #4
 8006660:	1dbc      	adds	r4, r7, #6
 8006662:	0018      	movs	r0, r3
 8006664:	f002 f8a4 	bl	80087b0 <eMBPEventCreate>
 8006668:	0003      	movs	r3, r0
 800666a:	7023      	strb	r3, [r4, #0]
 800666c:	1dbb      	adds	r3, r7, #6
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <pxMBMGetNewHdl+0x144>
                eStatus = eStatus2;
 8006674:	230f      	movs	r3, #15
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	1dba      	adds	r2, r7, #6
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
            break;
 800667e:	e00d      	b.n	800669c <pxMBMGetNewHdl+0x160>
                eStatus = MB_ENOERR;
 8006680:	230f      	movs	r3, #15
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
            break;
 8006688:	e008      	b.n	800669c <pxMBMGetNewHdl+0x160>
    for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xMBMInternalHdl ); ubIdx++ )
 800668a:	1dfb      	adds	r3, r7, #7
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	1dfb      	adds	r3, r7, #7
 8006690:	3201      	adds	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	1dfb      	adds	r3, r7, #7
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b03      	cmp	r3, #3
 800669a:	d9b8      	bls.n	800660e <pxMBMGetNewHdl+0xd2>
        }
    }
    if( MB_ENOERR != eStatus )
 800669c:	230f      	movs	r3, #15
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <pxMBMGetNewHdl+0x172>
    {
        ( void )eMBMReleaseHdl( pxIntHdl );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 f815 	bl	80066d8 <eMBMReleaseHdl>
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80066ae:	f002 f98f 	bl	80089d0 <vMBPExitCritical>
    return MB_ENOERR == eStatus ? pxIntHdl : NULL;      /*lint !e826 ~ suspicious ptr-to-ptr conversion */
 80066b2:	230f      	movs	r3, #15
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <pxMBMGetNewHdl+0x184>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	e000      	b.n	80066c2 <pxMBMGetNewHdl+0x186>
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b005      	add	sp, #20
 80066c8:	bd90      	pop	{r4, r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	20004400 	.word	0x20004400
 80066d0:	20004404 	.word	0x20004404
 80066d4:	08006805 	.word	0x08006805

080066d8 <eMBMReleaseHdl>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    eMBErrorCode
eMBMReleaseHdl( xMBMInternalHandle * pxIntHdl )
{
 80066d8:	b5b0      	push	{r4, r5, r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80066e0:	240f      	movs	r4, #15
 80066e2:	193b      	adds	r3, r7, r4
 80066e4:	2202      	movs	r2, #2
 80066e6:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 80066e8:	f002 f96b 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBMInternalHdl ) )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d100      	bne.n	80066f4 <eMBMReleaseHdl+0x1c>
 80066f2:	e07c      	b.n	80067ee <eMBMReleaseHdl+0x116>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7b1b      	ldrb	r3, [r3, #12]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	4b41      	ldr	r3, [pc, #260]	; (8006800 <eMBMReleaseHdl+0x128>)
 80066fc:	18d3      	adds	r3, r2, r3
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d000      	beq.n	8006706 <eMBMReleaseHdl+0x2e>
 8006704:	e073      	b.n	80067ee <eMBMReleaseHdl+0x116>
    {

        /* we are now sure that this was really a handle returned by create. */
        if( NULL != pxIntHdl->pFrameCloseFN )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d03e      	beq.n	800678c <eMBMReleaseHdl+0xb4>
        {
            if( MB_ENOERR != ( eStatus = pxIntHdl->pFrameCloseFN( pxIntHdl ) ) )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	0025      	movs	r5, r4
 8006714:	193c      	adds	r4, r7, r4
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	0010      	movs	r0, r2
 800671a:	4798      	blx	r3
 800671c:	0003      	movs	r3, r0
 800671e:	7023      	strb	r3, [r4, #0]
 8006720:	197b      	adds	r3, r7, r5
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d162      	bne.n	80067ee <eMBMReleaseHdl+0x116>
            {
            }
            else
            {
                if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <eMBMReleaseHdl+0x62>
                {
                    vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	0018      	movs	r0, r3
 8006736:	f002 f90f 	bl	8008958 <vMBPEventDelete>
                }
                if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <eMBMReleaseHdl+0x74>
                {
                    vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	0018      	movs	r0, r3
 8006748:	f002 fd0e 	bl	8009168 <vMBPTimerClose>
                }
                MBM_RESET_HDL( pxIntHdl );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	731a      	strb	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	611a      	str	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	81da      	strh	r2, [r3, #14]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	615a      	str	r2, [r3, #20]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
                eStatus = MB_ENOERR;
 8006782:	230f      	movs	r3, #15
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e030      	b.n	80067ee <eMBMReleaseHdl+0x116>
            }
        }
        else
        {
            if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <eMBMReleaseHdl+0xc6>
            {
                vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f002 f8dd 	bl	8008958 <vMBPEventDelete>
            }
            if( MBP_TIMERHDL_INVALID != pxIntHdl->xRespTimeoutHdl )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <eMBMReleaseHdl+0xd8>
            {
                vMBPTimerClose( pxIntHdl->xRespTimeoutHdl );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f002 fcdc 	bl	8009168 <vMBPTimerClose>
            }
            MBM_RESET_HDL( pxIntHdl );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	731a      	strb	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	81da      	strh	r2, [r3, #14]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	615a      	str	r2, [r3, #20]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	619a      	str	r2, [r3, #24]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
            eStatus = MB_ENOERR;
 80067e6:	230f      	movs	r3, #15
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80067ee:	f002 f8ef 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 80067f2:	230f      	movs	r3, #15
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b004      	add	sp, #16
 80067fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006800:	20004404 	.word	0x20004404

08006804 <bMBMResponseTimeoutCB>:

STATIC          BOOL
bMBMResponseTimeoutCB( xMBMHandle xHdl )
{
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = FALSE;
 800680c:	2517      	movs	r5, #23
 800680e:	197b      	adds	r3, r7, r5
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	613b      	str	r3, [r7, #16]
    BOOL            bTimeout = FALSE;
 8006818:	210f      	movs	r1, #15
 800681a:	187b      	adds	r3, r7, r1
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
    {
        eStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl );
        MBP_ASSERT( MB_ENOERR == eStatus );
    }
#else
    bTimeout = TRUE;
 8006820:	187b      	adds	r3, r7, r1
 8006822:	2201      	movs	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
#endif
    if( bTimeout )
 8006826:	187b      	adds	r3, r7, r1
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d017      	beq.n	800685e <bMBMResponseTimeoutCB+0x5a>
    {
        if( MB_ENOERR == ( eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_TIMEDOUT ) ) )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	260e      	movs	r6, #14
 8006834:	19bc      	adds	r4, r7, r6
 8006836:	2102      	movs	r1, #2
 8006838:	0018      	movs	r0, r3
 800683a:	f002 f82f 	bl	800889c <eMBPEventPost>
 800683e:	0003      	movs	r3, r0
 8006840:	7023      	strb	r3, [r4, #0]
 8006842:	19bb      	adds	r3, r7, r6
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <bMBMResponseTimeoutCB+0x4c>
        {
            bNeedCtxSwitch = TRUE;
 800684a:	197b      	adds	r3, r7, r5
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
        }
        MBP_ASSERT( MB_ENOERR == eStatus );
 8006850:	230e      	movs	r3, #14
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <bMBMResponseTimeoutCB+0x5a>
 800685a:	f002 f89f 	bl	800899c <vMBPAssert>
    }
    return bNeedCtxSwitch;
 800685e:	2317      	movs	r3, #23
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	781b      	ldrb	r3, [r3, #0]
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b007      	add	sp, #28
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800686c <eMBMSetSlaveTimeout>:

eMBErrorCode
eMBMSetSlaveTimeout( xMBMHandle xHdl, USHORT usNMilliSeconds )
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	000a      	movs	r2, r1
 8006876:	1cbb      	adds	r3, r7, #2
 8006878:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800687a:	240f      	movs	r4, #15
 800687c:	193b      	adds	r3, r7, r4
 800687e:	2202      	movs	r2, #2
 8006880:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8006886:	f002 f89c 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBMInternalHdl ) )
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <eMBMSetSlaveTimeout+0x4a>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	7b1b      	ldrb	r3, [r3, #12]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <eMBMSetSlaveTimeout+0x5c>)
 8006898:	18d3      	adds	r3, r2, r3
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	d10a      	bne.n	80068b6 <eMBMSetSlaveTimeout+0x4a>
    {
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
        pxIntHdl->usSlaveTimeoutMS = usNMilliSeconds;
        eStatus = eMBPTimerSetTimeout( pxIntHdl->xRespTimeoutHdl, MBM_TIMEOUT_RESOLUTION_MS );
#else
        eStatus = eMBPTimerSetTimeout( pxIntHdl->xRespTimeoutHdl, usNMilliSeconds );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	193c      	adds	r4, r7, r4
 80068a6:	1cbb      	adds	r3, r7, #2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	0019      	movs	r1, r3
 80068ac:	0010      	movs	r0, r2
 80068ae:	f002 fc83 	bl	80091b8 <eMBPTimerSetTimeout>
 80068b2:	0003      	movs	r3, r0
 80068b4:	7023      	strb	r3, [r4, #0]
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80068b6:	f002 f88b 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 80068ba:	230f      	movs	r3, #15
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	781b      	ldrb	r3, [r3, #0]
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b005      	add	sp, #20
 80068c6:	bd90      	pop	{r4, r7, pc}
 80068c8:	20004404 	.word	0x20004404

080068cc <vMBMMasterTransactionPolled>:
    return eStatus;
}

void
vMBMMasterTransactionPolled( xMBMInternalHandle * pxIntHdl, UCHAR ucSlaveAddress, eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	230b      	movs	r3, #11
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	1c0a      	adds	r2, r1, #0
 80068de:	701a      	strb	r2, [r3, #0]
    xMBPEventType   xFrameEvent;

    switch ( *peState )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d002      	beq.n	80068ee <vMBMMasterTransactionPolled+0x22>
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d02b      	beq.n	8006944 <vMBMMasterTransactionPolled+0x78>
 80068ec:	e091      	b.n	8006a12 <vMBMMasterTransactionPolled+0x146>
         */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
        pxIntHdl->usSlaveTimeoutLeftMS = pxIntHdl->usSlaveTimeoutMS;
#endif
        if( ( MB_ENOERR != ( *peStatus = eMBPTimerStart( pxIntHdl->xRespTimeoutHdl ) ) ) )
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	0018      	movs	r0, r3
 80068f4:	f002 fc98 	bl	8009228 <eMBPTimerStart>
 80068f8:	0003      	movs	r3, r0
 80068fa:	001a      	movs	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <vMBMMasterTransactionPolled+0x44>
        {
            *peState = MBM_STATE_ERROR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2204      	movs	r2, #4
 800690c:	701a      	strb	r2, [r3, #0]
            /* Frame transmission has started. We now switch to the state where we
             * wait for an event.
             */
            *peState = MBM_STATE_WAITING;
        }
        break;
 800690e:	e088      	b.n	8006a22 <vMBMMasterTransactionPolled+0x156>
        else if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameSendFN( pxIntHdl, ucSlaveAddress, pxIntHdl->usFrameMBPDULength ) ) )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	89d4      	ldrh	r4, [r2, #14]
 8006918:	220b      	movs	r2, #11
 800691a:	18ba      	adds	r2, r7, r2
 800691c:	7811      	ldrb	r1, [r2, #0]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	0022      	movs	r2, r4
 8006922:	4798      	blx	r3
 8006924:	0003      	movs	r3, r0
 8006926:	001a      	movs	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <vMBMMasterTransactionPolled+0x70>
            *peState = MBM_STATE_ERROR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2204      	movs	r2, #4
 8006938:	701a      	strb	r2, [r3, #0]
        break;
 800693a:	e072      	b.n	8006a22 <vMBMMasterTransactionPolled+0x156>
            *peState = MBM_STATE_WAITING;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	701a      	strb	r2, [r3, #0]
        break;
 8006942:	e06e      	b.n	8006a22 <vMBMMasterTransactionPolled+0x156>
        /* Wait for an event. Possible events are either a timeout when no slave has
         * responded (MBM_EV_TIMEDOUT), the reception of a frame(MBM_EV_RECEIVED)
         * or in case of a broadcast message the end of the transmission(MBM_EV_SENT).
         */
    case MBM_STATE_WAITING:
        if( bMBPEventGet( pxIntHdl->xFrameEventHdl, &xFrameEvent ) )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2417      	movs	r4, #23
 800694a:	193a      	adds	r2, r7, r4
 800694c:	0011      	movs	r1, r2
 800694e:	0018      	movs	r0, r3
 8006950:	f001 ffd0 	bl	80088f4 <bMBPEventGet>
 8006954:	1e03      	subs	r3, r0, #0
 8006956:	d063      	beq.n	8006a20 <vMBMMasterTransactionPolled+0x154>
        {
            /* In any case stop the timeout. */
#if MBM_TEST_DISABLE_TIMEOUTS == 0
            ( void )eMBPTimerStop( pxIntHdl->xRespTimeoutHdl );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0018      	movs	r0, r3
 800695e:	f002 fc9b 	bl	8009298 <eMBPTimerStop>
#endif
            switch ( ( eMBMEvent ) xFrameEvent )
 8006962:	193b      	adds	r3, r7, r4
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b06      	cmp	r3, #6
 8006968:	d84b      	bhi.n	8006a02 <vMBMMasterTransactionPolled+0x136>
 800696a:	009a      	lsls	r2, r3, #2
 800696c:	4b2f      	ldr	r3, [pc, #188]	; (8006a2c <vMBMMasterTransactionPolled+0x160>)
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	469f      	mov	pc, r3
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Request timeout. Reseting state.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	220b      	movs	r2, #11
 800697a:	18ba      	adds	r2, r7, r2
 800697c:	7811      	ldrb	r1, [r2, #0]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	4798      	blx	r3
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
                pxIntHdl->xFrameStat.ulNTimeouts++;
#endif
                *peState = MBM_STATE_DONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2205      	movs	r2, #5
 8006988:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ETIMEDOUT;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2208      	movs	r2, #8
 800698e:	701a      	strb	r2, [r3, #0]
               // *peStatus = MB_ENOERR;

                break;
 8006990:	e03e      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Response frame received.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                if( MB_ENOERR != ( *peStatus = pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, &( pxIntHdl->usFrameMBPDULength ) ) ) )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	320e      	adds	r2, #14
 800699a:	0014      	movs	r4, r2
 800699c:	220b      	movs	r2, #11
 800699e:	18ba      	adds	r2, r7, r2
 80069a0:	7811      	ldrb	r1, [r2, #0]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	0022      	movs	r2, r4
 80069a6:	4798      	blx	r3
 80069a8:	0003      	movs	r3, r0
 80069aa:	001a      	movs	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <vMBMMasterTransactionPolled+0xf4>
                {
                    /* Error receiving frame. Abort this transmission. */
                    *peState = MBM_STATE_ERROR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2204      	movs	r2, #4
 80069bc:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    *peState = MBM_STATE_DISASSEMBLE;
                }
                break;
 80069be:	e027      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                    *peState = MBM_STATE_DISASSEMBLE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2203      	movs	r2, #3
 80069c4:	701a      	strb	r2, [r3, #0]
                break;
 80069c6:	e023      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Receiver error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                /* Call the receiver to reset its state. */
                ( void )pxIntHdl->pFrameRecvFN( pxIntHdl, ucSlaveAddress, NULL );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	220b      	movs	r2, #11
 80069ce:	18ba      	adds	r2, r7, r2
 80069d0:	7811      	ldrb	r1, [r2, #0]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	4798      	blx	r3
                *peState = MBM_STATE_ERROR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2204      	movs	r2, #4
 80069dc:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2205      	movs	r2, #5
 80069e2:	701a      	strb	r2, [r3, #0]
                break;
 80069e4:	e014      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_DEBUG, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Frame sent.\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_DONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2205      	movs	r2, #5
 80069ea:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_ENOERR;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
                break;
 80069f2:	e00d      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Transmitter error!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2204      	movs	r2, #4
 80069f8:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EIO;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2205      	movs	r2, #5
 80069fe:	701a      	strb	r2, [r3, #0]
                break;
 8006a00:	e006      	b.n	8006a10 <vMBMMasterTransactionPolled+0x144>
                if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
                {
                    vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal event received!\n", ( USHORT ) pxIntHdl->ubIdx );
                }
#endif
                *peState = MBM_STATE_ERROR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2204      	movs	r2, #4
 8006a06:	701a      	strb	r2, [r3, #0]
                *peStatus = MB_EILLSTATE;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	701a      	strb	r2, [r3, #0]
                break;
 8006a0e:	46c0      	nop			; (mov r8, r8)
            }
        }
        break;
 8006a10:	e006      	b.n	8006a20 <vMBMMasterTransactionPolled+0x154>
        if( bMBPPortLogIsEnabled( MB_LOG_ERROR, MB_LOG_CORE ) )
        {
            vMBPPortLog( MB_LOG_ERROR, MB_LOG_CORE, "[IDX=" MBP_FORMAT_USHORT "] Illegal state!\n", ( USHORT ) pxIntHdl->ubIdx );
        }
#endif
        *peState = MBM_STATE_ERROR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2204      	movs	r2, #4
 8006a16:	701a      	strb	r2, [r3, #0]
        *peStatus = MB_EILLSTATE;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2206      	movs	r2, #6
 8006a1c:	701a      	strb	r2, [r3, #0]
        break;
 8006a1e:	e000      	b.n	8006a22 <vMBMMasterTransactionPolled+0x156>
        break;
 8006a20:	46c0      	nop			; (mov r8, r8)
    }
}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b007      	add	sp, #28
 8006a28:	bd90      	pop	{r4, r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	08009a7c 	.word	0x08009a7c

08006a30 <eMBMSerialInit>:

#if MBM_ASCII_ENABLED == 1 || MBM_RTU_ENABLED == 1
eMBErrorCode
eMBMSerialInit( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity )
{
 8006a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	0008      	movs	r0, r1
 8006a3a:	0011      	movs	r1, r2
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	230b      	movs	r3, #11
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	1c02      	adds	r2, r0, #0
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	230a      	movs	r3, #10
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	1c0a      	adds	r2, r1, #0
 8006a4c:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    UCHAR           ucStopBits;
    ucStopBits = MB_PAR_NONE == eParity ? ( UCHAR ) 2 : ( UCHAR ) 1;
 8006a4e:	2328      	movs	r3, #40	; 0x28
 8006a50:	2208      	movs	r2, #8
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	19db      	adds	r3, r3, r7
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d101      	bne.n	8006a60 <eMBMSerialInit+0x30>
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	e000      	b.n	8006a62 <eMBMSerialInit+0x32>
 8006a60:	2201      	movs	r2, #1
 8006a62:	2617      	movs	r6, #23
 8006a64:	19bb      	adds	r3, r7, r6
 8006a66:	701a      	strb	r2, [r3, #0]
    eStatus = eMBMSerialInitExt( pxHdl, eMode, ucPort, ulBaudRate, eParity, ucStopBits );
 8006a68:	2316      	movs	r3, #22
 8006a6a:	18fc      	adds	r4, r7, r3
 8006a6c:	687d      	ldr	r5, [r7, #4]
 8006a6e:	220a      	movs	r2, #10
 8006a70:	18bb      	adds	r3, r7, r2
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	210b      	movs	r1, #11
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	19bb      	adds	r3, r7, r6
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	2628      	movs	r6, #40	; 0x28
 8006a84:	2308      	movs	r3, #8
 8006a86:	18f3      	adds	r3, r6, r3
 8006a88:	19db      	adds	r3, r3, r7
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	002b      	movs	r3, r5
 8006a90:	f000 f809 	bl	8006aa6 <eMBMSerialInitExt>
 8006a94:	0003      	movs	r3, r0
 8006a96:	7023      	strb	r3, [r4, #0]
    return eStatus;
 8006a98:	2316      	movs	r3, #22
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	781b      	ldrb	r3, [r3, #0]
}
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b007      	add	sp, #28
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006aa6 <eMBMSerialInitExt>:

eMBErrorCode
eMBMSerialInitExt( xMBMHandle * pxHdl, eMBSerialMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8006aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aa8:	b08b      	sub	sp, #44	; 0x2c
 8006aaa:	af02      	add	r7, sp, #8
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	0008      	movs	r0, r1
 8006ab0:	0011      	movs	r1, r2
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	230b      	movs	r3, #11
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	1c02      	adds	r2, r0, #0
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	230a      	movs	r3, #10
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	1c0a      	adds	r2, r1, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxMBMNewIntHdl;
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8006ac4:	241f      	movs	r4, #31
 8006ac6:	193b      	adds	r3, r7, r4
 8006ac8:	2202      	movs	r2, #2
 8006aca:	701a      	strb	r2, [r3, #0]
    {
        vMBPLibraryLoad(  );
    }
#endif

    if( NULL != pxHdl )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d064      	beq.n	8006b9c <eMBMSerialInitExt+0xf6>
    {
        if( NULL == ( pxMBMNewIntHdl = pxMBMGetNewHdl(  ) ) )
 8006ad2:	f7ff fd33 	bl	800653c <pxMBMGetNewHdl>
 8006ad6:	0003      	movs	r3, r0
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <eMBMSerialInitExt+0x42>
        {
            eStatus = MB_ENORES;
 8006ae0:	193b      	adds	r3, r7, r4
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e039      	b.n	8006b5c <eMBMSerialInitExt+0xb6>
        }
        else
        {
            switch ( eMode )
 8006ae8:	230b      	movs	r3, #11
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d018      	beq.n	8006b24 <eMBMSerialInitExt+0x7e>
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d12d      	bne.n	8006b52 <eMBMSerialInitExt+0xac>
            {
#if MBM_ASCII_ENABLED == 1
            case MB_ASCII:
                eStatus = eMBMSerialASCIIInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 8006af6:	231f      	movs	r3, #31
 8006af8:	18fc      	adds	r4, r7, r3
 8006afa:	2330      	movs	r3, #48	; 0x30
 8006afc:	2608      	movs	r6, #8
 8006afe:	199b      	adds	r3, r3, r6
 8006b00:	19db      	adds	r3, r3, r7
 8006b02:	781d      	ldrb	r5, [r3, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	230a      	movs	r3, #10
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	7819      	ldrb	r1, [r3, #0]
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	2334      	movs	r3, #52	; 0x34
 8006b10:	199b      	adds	r3, r3, r6
 8006b12:	19db      	adds	r3, r3, r7
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	002b      	movs	r3, r5
 8006b1a:	f000 f847 	bl	8006bac <eMBMSerialASCIIInit>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	7023      	strb	r3, [r4, #0]
                break;
 8006b22:	e01b      	b.n	8006b5c <eMBMSerialInitExt+0xb6>
#endif

#if MBM_RTU_ENABLED == 1
            case MB_RTU:
                eStatus = eMBMSerialRTUInit( pxMBMNewIntHdl, ucPort, ulBaudRate, eParity, ucStopBits );
 8006b24:	231f      	movs	r3, #31
 8006b26:	18fc      	adds	r4, r7, r3
 8006b28:	2330      	movs	r3, #48	; 0x30
 8006b2a:	2608      	movs	r6, #8
 8006b2c:	199b      	adds	r3, r3, r6
 8006b2e:	19db      	adds	r3, r3, r7
 8006b30:	781d      	ldrb	r5, [r3, #0]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	230a      	movs	r3, #10
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	7819      	ldrb	r1, [r3, #0]
 8006b3a:	69b8      	ldr	r0, [r7, #24]
 8006b3c:	2334      	movs	r3, #52	; 0x34
 8006b3e:	199b      	adds	r3, r3, r6
 8006b40:	19db      	adds	r3, r3, r7
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	002b      	movs	r3, r5
 8006b48:	f001 f886 	bl	8007c58 <eMBMSerialRTUInit>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	7023      	strb	r3, [r4, #0]
                break;
 8006b50:	e004      	b.n	8006b5c <eMBMSerialInitExt+0xb6>
#endif

            default:
                eStatus = MB_EINVAL;
 8006b52:	231f      	movs	r3, #31
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	2202      	movs	r2, #2
 8006b58:	701a      	strb	r2, [r3, #0]
                break;
 8006b5a:	46c0      	nop			; (mov r8, r8)
            }
        }

        if( eStatus != MB_ENOERR )
 8006b5c:	261f      	movs	r6, #31
 8006b5e:	19bb      	adds	r3, r7, r6
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <eMBMSerialInitExt+0xf0>
        {
            if( NULL != pxMBMNewIntHdl )
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <eMBMSerialInitExt+0xe8>
            {
                if( MB_ENOERR != ( eStatus2 = eMBMReleaseHdl( pxMBMNewIntHdl ) ) )
 8006b6c:	2517      	movs	r5, #23
 8006b6e:	197c      	adds	r4, r7, r5
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7ff fdb0 	bl	80066d8 <eMBMReleaseHdl>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	7023      	strb	r3, [r4, #0]
 8006b7c:	002a      	movs	r2, r5
 8006b7e:	18bb      	adds	r3, r7, r2
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <eMBMSerialInitExt+0xe8>
                {
                    eStatus = eStatus2;
 8006b86:	19bb      	adds	r3, r7, r6
 8006b88:	18ba      	adds	r2, r7, r2
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	701a      	strb	r2, [r3, #0]
                }
            }
            *pxHdl = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e002      	b.n	8006b9c <eMBMSerialInitExt+0xf6>
        }
        else
        {
            *pxHdl = pxMBMNewIntHdl;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	601a      	str	r2, [r3, #0]
        vMBPLibraryUnload(  );
    }
    MBP_EXIT_CRITICAL_INIT(  );
#endif

    return eStatus;
 8006b9c:	231f      	movs	r3, #31
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	781b      	ldrb	r3, [r3, #0]
}
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b009      	add	sp, #36	; 0x24
 8006ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006bac <eMBMSerialASCIIInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialASCIIInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	b08d      	sub	sp, #52	; 0x34
 8006bb0:	af04      	add	r7, sp, #16
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	0008      	movs	r0, r1
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	0019      	movs	r1, r3
 8006bba:	230b      	movs	r3, #11
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	1c02      	adds	r2, r0, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	230a      	movs	r3, #10
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	1c0a      	adds	r2, r1, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 8006bca:	231f      	movs	r3, #31
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
    xMBMASCIIFrameHandle *pxFrameHdl = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 8006bd6:	f001 fef4 	bl	80089c2 <vMBPEnterCritical>
        if( !bIsInitialized )
 8006bda:	4bae      	ldr	r3, [pc, #696]	; (8006e94 <eMBMSerialASCIIInit+0x2e8>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d000      	beq.n	8006be4 <eMBMSerialASCIIInit+0x38>
 8006be2:	e0b6      	b.n	8006d52 <eMBMSerialASCIIInit+0x1a6>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006be4:	2317      	movs	r3, #23
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e0a8      	b.n	8006d40 <eMBMSerialASCIIInit+0x194>
            {
                HDL_RESET( &xMBMASCIIFrameHdl[ubIdx] );
 8006bee:	2417      	movs	r4, #23
 8006bf0:	193b      	adds	r3, r7, r4
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	49a8      	ldr	r1, [pc, #672]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006bf6:	0013      	movs	r3, r2
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	189b      	adds	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	545a      	strb	r2, [r3, r1]
 8006c06:	193b      	adds	r3, r7, r4
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	48a3      	ldr	r0, [pc, #652]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	33ff      	adds	r3, #255	; 0xff
 8006c10:	0019      	movs	r1, r3
 8006c12:	0013      	movs	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	189b      	adds	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	18c3      	adds	r3, r0, r3
 8006c20:	185b      	adds	r3, r3, r1
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	193b      	adds	r3, r7, r4
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	489b      	ldr	r0, [pc, #620]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006c2c:	2381      	movs	r3, #129	; 0x81
 8006c2e:	0059      	lsls	r1, r3, #1
 8006c30:	0013      	movs	r3, r2
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	189b      	adds	r3, r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	189b      	adds	r3, r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	18c3      	adds	r3, r0, r3
 8006c3e:	185b      	adds	r3, r3, r1
 8006c40:	2200      	movs	r2, #0
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	4893      	ldr	r0, [pc, #588]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	0059      	lsls	r1, r3, #1
 8006c4e:	0013      	movs	r3, r2
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	189b      	adds	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	18c3      	adds	r3, r0, r3
 8006c5c:	185b      	adds	r3, r3, r1
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	488c      	ldr	r0, [pc, #560]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006c68:	2382      	movs	r3, #130	; 0x82
 8006c6a:	0059      	lsls	r1, r3, #1
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	18c3      	adds	r3, r0, r3
 8006c7a:	185b      	adds	r3, r3, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	193b      	adds	r3, r7, r4
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	4884      	ldr	r0, [pc, #528]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006c86:	2383      	movs	r3, #131	; 0x83
 8006c88:	0059      	lsls	r1, r3, #1
 8006c8a:	0013      	movs	r3, r2
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	18c3      	adds	r3, r0, r3
 8006c98:	185b      	adds	r3, r3, r1
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	487d      	ldr	r0, [pc, #500]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	0059      	lsls	r1, r3, #1
 8006ca8:	0013      	movs	r3, r2
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	189b      	adds	r3, r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	18c3      	adds	r3, r0, r3
 8006cb6:	185b      	adds	r3, r3, r1
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	193b      	adds	r3, r7, r4
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	4875      	ldr	r0, [pc, #468]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006cc2:	2384      	movs	r3, #132	; 0x84
 8006cc4:	0059      	lsls	r1, r3, #1
 8006cc6:	0013      	movs	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	18c3      	adds	r3, r0, r3
 8006cd4:	185b      	adds	r3, r3, r1
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	193b      	adds	r3, r7, r4
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	486e      	ldr	r0, [pc, #440]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006ce0:	2386      	movs	r3, #134	; 0x86
 8006ce2:	0059      	lsls	r1, r3, #1
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	189b      	adds	r3, r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	18c3      	adds	r3, r0, r3
 8006cf2:	185b      	adds	r3, r3, r1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	193b      	adds	r3, r7, r4
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	4866      	ldr	r0, [pc, #408]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006cfe:	2388      	movs	r3, #136	; 0x88
 8006d00:	0059      	lsls	r1, r3, #1
 8006d02:	0013      	movs	r3, r2
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	18c3      	adds	r3, r0, r3
 8006d10:	185b      	adds	r3, r3, r1
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	0013      	movs	r3, r2
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	189b      	adds	r3, r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4a5c      	ldr	r2, [pc, #368]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006d28:	189b      	adds	r3, r3, r2
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	22ff      	movs	r2, #255	; 0xff
 8006d2e:	2100      	movs	r1, #0
 8006d30:	0018      	movs	r0, r3
 8006d32:	f002 fd37 	bl	80097a4 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006d36:	193b      	adds	r3, r7, r4
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	193b      	adds	r3, r7, r4
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	2317      	movs	r3, #23
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d800      	bhi.n	8006d4c <eMBMSerialASCIIInit+0x1a0>
 8006d4a:	e750      	b.n	8006bee <eMBMSerialASCIIInit+0x42>
            }
            bIsInitialized = TRUE;
 8006d4c:	4b51      	ldr	r3, [pc, #324]	; (8006e94 <eMBMSerialASCIIInit+0x2e8>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006d52:	2317      	movs	r3, #23
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e023      	b.n	8006da4 <eMBMSerialASCIIInit+0x1f8>
        {
            if( IDX_INVALID == xMBMASCIIFrameHdl[ubIdx].ubIdx )
 8006d5c:	2017      	movs	r0, #23
 8006d5e:	183b      	adds	r3, r7, r0
 8006d60:	781a      	ldrb	r2, [r3, #0]
 8006d62:	494d      	ldr	r1, [pc, #308]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006d64:	0013      	movs	r3, r2
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	189b      	adds	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	189b      	adds	r3, r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	5c5b      	ldrb	r3, [r3, r1]
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d110      	bne.n	8006d98 <eMBMSerialASCIIInit+0x1ec>
            {
                pxFrameHdl = &xMBMASCIIFrameHdl[ubIdx];
 8006d76:	0001      	movs	r1, r0
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	189b      	adds	r3, r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4a43      	ldr	r2, [pc, #268]	; (8006e98 <eMBMSerialASCIIInit+0x2ec>)
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	187a      	adds	r2, r7, r1
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	701a      	strb	r2, [r3, #0]
                break;
 8006d96:	e00a      	b.n	8006dae <eMBMSerialASCIIInit+0x202>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMASCIIFrameHdl ); ubIdx++ )
 8006d98:	2117      	movs	r1, #23
 8006d9a:	187b      	adds	r3, r7, r1
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	187b      	adds	r3, r7, r1
 8006da0:	3201      	adds	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	2317      	movs	r3, #23
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d9d6      	bls.n	8006d5c <eMBMSerialASCIIInit+0x1b0>
            }
        }

        if( NULL != pxFrameHdl )
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d061      	beq.n	8006e78 <eMBMSerialASCIIInit+0x2cc>
        {
            usTimeoutMS = ( USHORT ) ( MBM_ASCII_TIMEOUT_SEC * 1000U );
 8006db4:	2314      	movs	r3, #20
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	22fa      	movs	r2, #250	; 0xfa
 8006dba:	0092      	lsls	r2, r2, #2
 8006dbc:	801a      	strh	r2, [r3, #0]

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 7, eParity, ucStopBits, pxIntHdl
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	3311      	adds	r3, #17
 8006dc2:	33ff      	adds	r3, #255	; 0xff
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	2513      	movs	r5, #19
 8006dc8:	197c      	adds	r4, r7, r5
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	230b      	movs	r3, #11
 8006dce:	18fb      	adds	r3, r7, r3
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	2330      	movs	r3, #48	; 0x30
 8006dd8:	2608      	movs	r6, #8
 8006dda:	199b      	adds	r3, r3, r6
 8006ddc:	19db      	adds	r3, r3, r7
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	230a      	movs	r3, #10
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2307      	movs	r3, #7
 8006dec:	f001 fdf8 	bl	80089e0 <eMBPSerialInit>
 8006df0:	0003      	movs	r3, r0
 8006df2:	7023      	strb	r3, [r4, #0]
 8006df4:	197b      	adds	r3, r7, r5
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <eMBMSerialASCIIInit+0x25c>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , NULL, MB_ASCII 
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 8006dfc:	231f      	movs	r3, #31
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	197a      	adds	r2, r7, r5
 8006e02:	7812      	ldrb	r2, [r2, #0]
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e02d      	b.n	8006e64 <eMBMSerialASCIIInit+0x2b8>
            }
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialASCIITimerCB, pxIntHdl ) ) )
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	330d      	adds	r3, #13
 8006e0c:	33ff      	adds	r3, #255	; 0xff
 8006e0e:	0018      	movs	r0, r3
 8006e10:	2613      	movs	r6, #19
 8006e12:	19bc      	adds	r4, r7, r6
 8006e14:	68fd      	ldr	r5, [r7, #12]
 8006e16:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <eMBMSerialASCIIInit+0x2f0>)
 8006e18:	2314      	movs	r3, #20
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	8819      	ldrh	r1, [r3, #0]
 8006e1e:	002b      	movs	r3, r5
 8006e20:	f002 f8ca 	bl	8008fb8 <eMBPTimerInit>
 8006e24:	0003      	movs	r3, r0
 8006e26:	7023      	strb	r3, [r4, #0]
 8006e28:	19bb      	adds	r3, r7, r6
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <eMBMSerialASCIIInit+0x290>
            {
                eStatus = eStatus2;
 8006e30:	231f      	movs	r3, #31
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	19ba      	adds	r2, r7, r6
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e013      	b.n	8006e64 <eMBMSerialASCIIInit+0x2b8>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_PDU_OFF];
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	1c9a      	adds	r2, r3, #2
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialASCIIFrameSend;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a14      	ldr	r2, [pc, #80]	; (8006ea0 <eMBMSerialASCIIInit+0x2f4>)
 8006e4e:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialASCIIFrameReceive;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <eMBMSerialASCIIInit+0x2f8>)
 8006e54:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialASCIIFrameClose;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <eMBMSerialASCIIInit+0x2fc>)
 8006e5a:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialASCIIFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 8006e5c:	231f      	movs	r3, #31
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
                             ", baudrate=%lu, parity=" MBP_FORMAT_USHORT "): %s.\n", ( USHORT ) pxFrameHdl->ubIdx,
                             ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif

            if( MB_ENOERR != eStatus )
 8006e64:	231f      	movs	r3, #31
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <eMBMSerialASCIIInit+0x2d4>
            {
                ( void )eMBMSerialASCIIFrameCloseInternal( pxFrameHdl );
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f9b0 	bl	80071d6 <eMBMSerialASCIIFrameCloseInternal>
 8006e76:	e003      	b.n	8006e80 <eMBMSerialASCIIInit+0x2d4>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 8006e78:	231f      	movs	r3, #31
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 8006e80:	f001 fda6 	bl	80089d0 <vMBPExitCritical>
    else
    {
        eStatus = MB_EINVAL;
    }
#endif
    return eStatus;
 8006e84:	231f      	movs	r3, #31
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	781b      	ldrb	r3, [r3, #0]
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b009      	add	sp, #36	; 0x24
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	20004484 	.word	0x20004484
 8006e98:	20004488 	.word	0x20004488
 8006e9c:	080077fd 	.word	0x080077fd
 8006ea0:	08006ead 	.word	0x08006ead
 8006ea4:	08007031 	.word	0x08007031
 8006ea8:	080071a5 	.word	0x080071a5

08006eac <eMBMSerialASCIIFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialASCIIFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	0008      	movs	r0, r1
 8006eb6:	0011      	movs	r1, r2
 8006eb8:	1cfb      	adds	r3, r7, #3
 8006eba:	1c02      	adds	r2, r0, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	003b      	movs	r3, r7
 8006ec0:	1c0a      	adds	r2, r1, #0
 8006ec2:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8006ec4:	2317      	movs	r3, #23
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	2202      	movs	r2, #2
 8006eca:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_ASCII,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) ucSlaveAddress, ( USHORT ) usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) &&
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d100      	bne.n	8006ede <eMBMSerialASCIIFrameSend+0x32>
 8006edc:	e09c      	b.n	8007018 <eMBMSerialASCIIFrameSend+0x16c>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	0013      	movs	r3, r2
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	189b      	adds	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a4d      	ldr	r2, [pc, #308]	; (8007028 <eMBMSerialASCIIFrameSend+0x17c>)
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d000      	beq.n	8006efc <eMBMSerialASCIIFrameSend+0x50>
 8006efa:	e08d      	b.n	8007018 <eMBMSerialASCIIFrameSend+0x16c>
 8006efc:	1cfb      	adds	r3, r7, #3
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d009      	beq.n	8006f18 <eMBMSerialASCIIFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 1 /* LRC */  ) ) ) )
 8006f04:	1cfb      	adds	r3, r7, #3
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d100      	bne.n	8006f0e <eMBMSerialASCIIFrameSend+0x62>
 8006f0c:	e084      	b.n	8007018 <eMBMSerialASCIIFrameSend+0x16c>
 8006f0e:	1cfb      	adds	r3, r7, #3
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2bf7      	cmp	r3, #247	; 0xf7
 8006f14:	d900      	bls.n	8006f18 <eMBMSerialASCIIFrameSend+0x6c>
 8006f16:	e07f      	b.n	8007018 <eMBMSerialASCIIFrameSend+0x16c>
 8006f18:	003b      	movs	r3, r7
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	2bfd      	cmp	r3, #253	; 0xfd
 8006f1e:	d900      	bls.n	8006f22 <eMBMSerialASCIIFrameSend+0x76>
 8006f20:	e07a      	b.n	8007018 <eMBMSerialASCIIFrameSend+0x16c>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 8006f22:	f001 fd4e 	bl	80089c2 <vMBPEnterCritical>
            MBP_ASSERT( STATE_TX_IDLE == pxASCIIHdl->eSndState );
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	2382      	movs	r3, #130	; 0x82
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	5cd3      	ldrb	r3, [r2, r3]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <eMBMSerialASCIIFrameSend+0x8c>
 8006f34:	f001 fd32 	bl	800899c <vMBPAssert>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxASCIIHdl->ubIdx, ( USHORT ) pxASCIIHdl->eRcvState,
                             pxASCIIHdl->usRcvBufferPos, ( USHORT ) pxASCIIHdl->eSndState, pxASCIIHdl->usSndBufferCnt );
            }
#endif
            MBP_EXIT_CRITICAL_SECTION(  );
 8006f38:	f001 fd4a 	bl	80089d0 <vMBPExitCritical>

            /* Added the MODBUS ASCII header (= slave address) */
            pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1cfa      	adds	r2, r7, #3
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt = 1;
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	2383      	movs	r3, #131	; 0x83
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxASCIIHdl->usSndBufferCnt += usMBPDULength;
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	2383      	movs	r3, #131	; 0x83
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	5ad3      	ldrh	r3, [r2, r3]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	003b      	movs	r3, r7
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	18d3      	adds	r3, r2, r3
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	2383      	movs	r3, #131	; 0x83
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	52d1      	strh	r1, [r2, r3]

            ubLRC = ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usSndBufferCnt );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1c58      	adds	r0, r3, #1
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	2383      	movs	r3, #131	; 0x83
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	5ad3      	ldrh	r3, [r2, r3]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	250b      	movs	r5, #11
 8006f78:	197c      	adds	r4, r7, r5
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	f000 fcb3 	bl	80078e6 <ubMBMSerialASCIILRC>
 8006f80:	0003      	movs	r3, r0
 8006f82:	7023      	strb	r3, [r4, #0]
            pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usSndBufferCnt] = ubLRC;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	2383      	movs	r3, #131	; 0x83
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	5ad3      	ldrh	r3, [r2, r3]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	001a      	movs	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	197a      	adds	r2, r7, r5
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	705a      	strb	r2, [r3, #1]
            pxASCIIHdl->usSndBufferCnt++;
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	2383      	movs	r3, #131	; 0x83
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	5ad3      	ldrh	r3, [r2, r3]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	b299      	uxth	r1, r3
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	2383      	movs	r3, #131	; 0x83
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 8006fb0:	f001 fd07 	bl	80089c2 <vMBPEnterCritical>
            pxASCIIHdl->eSndState = STATE_TX_START;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	2382      	movs	r3, #130	; 0x82
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	2101      	movs	r1, #1
 8006fbc:	54d1      	strb	r1, [r2, r3]
            pxASCIIHdl->pubSndBufferCur = ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	2384      	movs	r3, #132	; 0x84
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	50d1      	str	r1, [r2, r3]
#if MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialASCIITransmitterEmptyAPIV1CB ) ) )
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	2388      	movs	r3, #136	; 0x88
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	58d3      	ldr	r3, [r2, r3]
 8006fd2:	2517      	movs	r5, #23
 8006fd4:	197c      	adds	r4, r7, r5
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <eMBMSerialASCIIFrameSend+0x180>)
 8006fd8:	0011      	movs	r1, r2
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f001 fe68 	bl	8008cb0 <eMBPSerialTxEnable>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	7023      	strb	r3, [r4, #0]
 8006fe4:	197b      	adds	r3, r7, r5
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <eMBMSerialASCIIFrameSend+0x168>
            {
                HDL_RESET_TX( pxASCIIHdl );
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	2382      	movs	r3, #130	; 0x82
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	54d1      	strb	r1, [r2, r3]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	2383      	movs	r3, #131	; 0x83
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	52d1      	strh	r1, [r2, r3]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	2100      	movs	r1, #0
 8007008:	54d1      	strb	r1, [r2, r3]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	2384      	movs	r3, #132	; 0x84
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	2100      	movs	r1, #0
 8007012:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 8007014:	f001 fcdc 	bl	80089d0 <vMBPExitCritical>
        }
    }
    return eStatus;
 8007018:	2317      	movs	r3, #23
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	781b      	ldrb	r3, [r3, #0]
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b006      	add	sp, #24
 8007024:	bdb0      	pop	{r4, r5, r7, pc}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	20004488 	.word	0x20004488
 800702c:	080075bd 	.word	0x080075bd

08007030 <eMBMSerialASCIIFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 8007030:	b5b0      	push	{r4, r5, r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	607a      	str	r2, [r7, #4]
 800703a:	200b      	movs	r0, #11
 800703c:	183b      	adds	r3, r7, r0
 800703e:	1c0a      	adds	r2, r1, #0
 8007040:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8007042:	241f      	movs	r4, #31
 8007044:	193b      	adds	r3, r7, r4
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBMASCIIFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d100      	bne.n	800705c <eMBMSerialASCIIFrameReceive+0x2c>
 800705a:	e099      	b.n	8007190 <eMBMSerialASCIIFrameReceive+0x160>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	001a      	movs	r2, r3
 8007062:	0013      	movs	r3, r2
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	189b      	adds	r3, r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	189b      	adds	r3, r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a4c      	ldr	r2, [pc, #304]	; (80071a0 <eMBMSerialASCIIFrameReceive+0x170>)
 8007070:	189b      	adds	r3, r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	429a      	cmp	r2, r3
 8007076:	d000      	beq.n	800707a <eMBMSerialASCIIFrameReceive+0x4a>
 8007078:	e08a      	b.n	8007190 <eMBMSerialASCIIFrameReceive+0x160>
 800707a:	183b      	adds	r3, r7, r0
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d100      	bne.n	8007084 <eMBMSerialASCIIFrameReceive+0x54>
 8007082:	e085      	b.n	8007190 <eMBMSerialASCIIFrameReceive+0x160>
 8007084:	183b      	adds	r3, r7, r0
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2bf7      	cmp	r3, #247	; 0xf7
 800708a:	d900      	bls.n	800708e <eMBMSerialASCIIFrameReceive+0x5e>
 800708c:	e080      	b.n	8007190 <eMBMSerialASCIIFrameReceive+0x160>
        {

            if( NULL == pusMBPDULength )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02a      	beq.n	80070ea <eMBMSerialASCIIFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	2381      	movs	r3, #129	; 0x81
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	5ad3      	ldrh	r3, [r2, r3]
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d91f      	bls.n	80070e2 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	b2db      	uxtb	r3, r3
            else if( ( pxASCIIHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 80070a8:	183a      	adds	r2, r7, r0
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d118      	bne.n	80070e2 <eMBMSerialASCIIFrameReceive+0xb2>
                     ( ubMBMSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usRcvBufferPos ) == 0 ) )
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1c58      	adds	r0, r3, #1
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	2381      	movs	r3, #129	; 0x81
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	5ad3      	ldrh	r3, [r2, r3]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	0019      	movs	r1, r3
 80070c0:	f000 fc11 	bl	80078e6 <ubMBMSerialASCIILRC>
 80070c4:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxASCIIHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 80070c6:	d10c      	bne.n	80070e2 <eMBMSerialASCIIFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxASCIIHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_LRC ) );
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	2381      	movs	r3, #129	; 0x81
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	5ad3      	ldrh	r3, [r2, r3]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b02      	subs	r3, #2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	801a      	strh	r2, [r3, #0]
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_ASCII;
                xAnalyzerFrame.x.xASCIIHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xASCIIHeader.ubLRC = pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usRcvBufferPos - 1];
#endif
                eStatus = MB_ENOERR;
 80070da:	193b      	adds	r3, r7, r4
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	e003      	b.n	80070ea <eMBMSerialASCIIFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 80070e2:	231f      	movs	r3, #31
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	2205      	movs	r2, #5
 80070e8:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 80070ea:	f001 fc6a 	bl	80089c2 <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	2388      	movs	r3, #136	; 0x88
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	58d3      	ldr	r3, [r2, r3]
 80070f6:	2513      	movs	r5, #19
 80070f8:	197c      	adds	r4, r7, r5
 80070fa:	2100      	movs	r1, #0
 80070fc:	0018      	movs	r0, r3
 80070fe:	f001 fdd7 	bl	8008cb0 <eMBPSerialTxEnable>
 8007102:	0003      	movs	r3, r0
 8007104:	7023      	strb	r3, [r4, #0]
 8007106:	002a      	movs	r2, r5
 8007108:	18bb      	adds	r3, r7, r2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <eMBMSerialASCIIFrameReceive+0xea>
            {
                eStatus = eStatus2;
 8007110:	231f      	movs	r3, #31
 8007112:	18fb      	adds	r3, r7, r3
 8007114:	18ba      	adds	r2, r7, r2
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxASCIIHdl->xSerHdl, NULL ) ) )
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	2388      	movs	r3, #136	; 0x88
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	58d3      	ldr	r3, [r2, r3]
 8007122:	2513      	movs	r5, #19
 8007124:	197c      	adds	r4, r7, r5
 8007126:	2100      	movs	r1, #0
 8007128:	0018      	movs	r0, r3
 800712a:	f001 fe87 	bl	8008e3c <eMBPSerialRxEnable>
 800712e:	0003      	movs	r3, r0
 8007130:	7023      	strb	r3, [r4, #0]
 8007132:	002a      	movs	r2, r5
 8007134:	18bb      	adds	r3, r7, r2
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <eMBMSerialASCIIFrameReceive+0x116>
            {
                eStatus = eStatus2;
 800713c:	231f      	movs	r3, #31
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	18ba      	adds	r2, r7, r2
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxASCIIHdl->xWaitTmrHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxASCIIHdl );
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	2382      	movs	r3, #130	; 0x82
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	2100      	movs	r1, #0
 800714e:	54d1      	strb	r1, [r2, r3]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	2383      	movs	r3, #131	; 0x83
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	2100      	movs	r1, #0
 8007158:	52d1      	strh	r1, [r2, r3]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	2100      	movs	r1, #0
 8007162:	54d1      	strb	r1, [r2, r3]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	2384      	movs	r3, #132	; 0x84
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	2100      	movs	r1, #0
 800716c:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxASCIIHdl );
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	2302      	movs	r3, #2
 8007172:	33ff      	adds	r3, #255	; 0xff
 8007174:	2100      	movs	r1, #0
 8007176:	54d1      	strb	r1, [r2, r3]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	2381      	movs	r3, #129	; 0x81
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	2100      	movs	r1, #0
 8007180:	52d1      	strh	r1, [r2, r3]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	2100      	movs	r1, #0
 800718a:	54d1      	strb	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 800718c:	f001 fc20 	bl	80089d0 <vMBPExitCritical>
        }
    }

    return eStatus;
 8007190:	231f      	movs	r3, #31
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	781b      	ldrb	r3, [r3, #0]
}
 8007196:	0018      	movs	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	b008      	add	sp, #32
 800719c:	bdb0      	pop	{r4, r5, r7, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	20004488 	.word	0x20004488

080071a4 <eMBMSerialASCIIFrameClose>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameClose( xMBHandle xHdl )
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80071ac:	210f      	movs	r1, #15
 80071ae:	187b      	adds	r3, r7, r1
 80071b0:	2202      	movs	r2, #2
 80071b2:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialASCIIFrameCloseInternal( ( xMBMASCIIFrameHandle * ) pxIntHdl->xFrameHdl );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	000d      	movs	r5, r1
 80071be:	187c      	adds	r4, r7, r1
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 f808 	bl	80071d6 <eMBMSerialASCIIFrameCloseInternal>
 80071c6:	0003      	movs	r3, r0
 80071c8:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 80071ca:	197b      	adds	r3, r7, r5
 80071cc:	781b      	ldrb	r3, [r3, #0]
}
 80071ce:	0018      	movs	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b004      	add	sp, #16
 80071d4:	bdb0      	pop	{r4, r5, r7, pc}

080071d6 <eMBMSerialASCIIFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialASCIIFrameCloseInternal( xMBMASCIIFrameHandle * pxASCIIHdl )
{
 80071d6:	b590      	push	{r4, r7, lr}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80071de:	240f      	movs	r4, #15
 80071e0:	193b      	adds	r3, r7, r4
 80071e2:	2202      	movs	r2, #2
 80071e4:	701a      	strb	r2, [r3, #0]
#if defined( MBM_ENABLE_DEBUG_FACILITY ) && ( MBM_ENABLE_DEBUG_FACILITY == 1 )
    UBYTE           ubIdx;
#endif

    MBP_ENTER_CRITICAL_SECTION(  );
 80071e6:	f001 fbec 	bl	80089c2 <vMBPEnterCritical>
        if( bMBPPortLogIsEnabled( MB_LOG_DEBUG, MB_LOG_ASCII ) )
        {
            ubIdx = pxASCIIHdl->ubIdx;
        }
#endif
        if( MBP_SERIALHDL_INVALID != pxASCIIHdl->xSerHdl )
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	2388      	movs	r3, #136	; 0x88
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	58d3      	ldr	r3, [r2, r3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d055      	beq.n	80072a2 <eMBMSerialASCIIFrameCloseInternal+0xcc>
        {
            if( MB_ENOERR != eMBPSerialClose( pxASCIIHdl->xSerHdl ) )
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	2388      	movs	r3, #136	; 0x88
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	58d3      	ldr	r3, [r2, r3]
 80071fe:	0018      	movs	r0, r3
 8007200:	f001 fd02 	bl	8008c08 <eMBPSerialClose>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d003      	beq.n	8007210 <eMBMSerialASCIIFrameCloseInternal+0x3a>
            {
                eStatus = MB_EPORTERR;
 8007208:	193b      	adds	r3, r7, r4
 800720a:	2203      	movs	r2, #3
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e08b      	b.n	8007328 <eMBMSerialASCIIFrameCloseInternal+0x152>
            }
            else
            {
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xTmrHdl )
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	2386      	movs	r3, #134	; 0x86
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	58d3      	ldr	r3, [r2, r3]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <eMBMSerialASCIIFrameCloseInternal+0x54>
                {
                    vMBPTimerClose( pxASCIIHdl->xTmrHdl );
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	2386      	movs	r3, #134	; 0x86
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	58d3      	ldr	r3, [r2, r3]
 8007224:	0018      	movs	r0, r3
 8007226:	f001 ff9f 	bl	8009168 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xWaitTmrHdl )
                {
                    vMBPTimerClose( pxASCIIHdl->xWaitTmrHdl );
                }
#endif
                HDL_RESET( pxASCIIHdl );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	2302      	movs	r3, #2
 8007234:	33ff      	adds	r3, #255	; 0xff
 8007236:	2100      	movs	r1, #0
 8007238:	54d1      	strb	r1, [r2, r3]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	2381      	movs	r3, #129	; 0x81
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	2100      	movs	r1, #0
 8007242:	52d1      	strh	r1, [r2, r3]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	2100      	movs	r1, #0
 800724c:	54d1      	strb	r1, [r2, r3]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	2382      	movs	r3, #130	; 0x82
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	2100      	movs	r1, #0
 8007256:	54d1      	strb	r1, [r2, r3]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	2383      	movs	r3, #131	; 0x83
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	2100      	movs	r1, #0
 8007260:	52d1      	strh	r1, [r2, r3]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	2380      	movs	r3, #128	; 0x80
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	2100      	movs	r1, #0
 800726a:	54d1      	strb	r1, [r2, r3]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	2384      	movs	r3, #132	; 0x84
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	2100      	movs	r1, #0
 8007274:	50d1      	str	r1, [r2, r3]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	2386      	movs	r3, #134	; 0x86
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	2100      	movs	r1, #0
 800727e:	50d1      	str	r1, [r2, r3]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	2388      	movs	r3, #136	; 0x88
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	2100      	movs	r1, #0
 8007288:	50d1      	str	r1, [r2, r3]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3301      	adds	r3, #1
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	2100      	movs	r1, #0
 8007292:	0018      	movs	r0, r3
 8007294:	f002 fa86 	bl	80097a4 <memset>
                eStatus = MB_ENOERR;
 8007298:	230f      	movs	r3, #15
 800729a:	18fb      	adds	r3, r7, r3
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e042      	b.n	8007328 <eMBMSerialASCIIFrameCloseInternal+0x152>

            }
        }
        else
        {
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xTmrHdl );
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	2386      	movs	r3, #134	; 0x86
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	58d3      	ldr	r3, [r2, r3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <eMBMSerialASCIIFrameCloseInternal+0xdc>
 80072ae:	f001 fb75 	bl	800899c <vMBPAssert>
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xBackOffTmrHdl );
#endif
#if MBM_ASCII_WAITAFTERSEND_ENABLED > 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xWaitTmrHdl );
#endif
            HDL_RESET( pxASCIIHdl );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	2302      	movs	r3, #2
 80072bc:	33ff      	adds	r3, #255	; 0xff
 80072be:	2100      	movs	r1, #0
 80072c0:	54d1      	strb	r1, [r2, r3]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	2381      	movs	r3, #129	; 0x81
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2100      	movs	r1, #0
 80072ca:	52d1      	strh	r1, [r2, r3]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	2380      	movs	r3, #128	; 0x80
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	2100      	movs	r1, #0
 80072d4:	54d1      	strb	r1, [r2, r3]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	2382      	movs	r3, #130	; 0x82
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	2100      	movs	r1, #0
 80072de:	54d1      	strb	r1, [r2, r3]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	2383      	movs	r3, #131	; 0x83
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	2100      	movs	r1, #0
 80072e8:	52d1      	strh	r1, [r2, r3]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	2100      	movs	r1, #0
 80072f2:	54d1      	strb	r1, [r2, r3]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	2384      	movs	r3, #132	; 0x84
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	2100      	movs	r1, #0
 80072fc:	50d1      	str	r1, [r2, r3]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	2386      	movs	r3, #134	; 0x86
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	2100      	movs	r1, #0
 8007306:	50d1      	str	r1, [r2, r3]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	2388      	movs	r3, #136	; 0x88
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	2100      	movs	r1, #0
 8007310:	50d1      	str	r1, [r2, r3]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3301      	adds	r3, #1
 8007316:	22ff      	movs	r2, #255	; 0xff
 8007318:	2100      	movs	r1, #0
 800731a:	0018      	movs	r0, r3
 800731c:	f002 fa42 	bl	80097a4 <memset>
            eStatus = MB_ENOERR;
 8007320:	230f      	movs	r3, #15
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
                         ( USHORT ) ubIdx, eStatus == MB_ENOERR ? "okay" : "failed" );
        }
#endif

    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8007328:	f001 fb52 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 800732c:	230f      	movs	r3, #15
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	781b      	ldrb	r3, [r3, #0]
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b005      	add	sp, #20
 8007338:	bd90      	pop	{r4, r7, pc}

0800733a <vMBMSerialASCIIReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
vMBMSerialASCIIReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 800733a:	b5b0      	push	{r4, r5, r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	000a      	movs	r2, r1
 8007344:	1cfb      	adds	r3, r7, #3
 8007346:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    BOOL            bEnableTimer = TRUE;
 8007348:	2317      	movs	r3, #23
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
    UBYTE           ubBinValue;
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	2382      	movs	r3, #130	; 0x82
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	5cd3      	ldrb	r3, [r2, r3]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <vMBMSerialASCIIReceiverAPIV1CB+0x32>
 8007368:	f001 fb18 	bl	800899c <vMBPAssert>

    switch ( pxASCIIFrameHdl->eRcvState )
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	2302      	movs	r3, #2
 8007370:	33ff      	adds	r3, #255	; 0xff
 8007372:	5cd3      	ldrb	r3, [r2, r3]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d100      	bne.n	800737c <vMBMSerialASCIIReceiverAPIV1CB+0x42>
 800737a:	e077      	b.n	800746c <vMBMSerialASCIIReceiverAPIV1CB+0x132>
 800737c:	dd00      	ble.n	8007380 <vMBMSerialASCIIReceiverAPIV1CB+0x46>
 800737e:	e0da      	b.n	8007536 <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d100      	bne.n	8007386 <vMBMSerialASCIIReceiverAPIV1CB+0x4c>
 8007384:	e0cd      	b.n	8007522 <vMBMSerialASCIIReceiverAPIV1CB+0x1e8>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d000      	beq.n	800738c <vMBMSerialASCIIReceiverAPIV1CB+0x52>
 800738a:	e0d4      	b.n	8007536 <vMBMSerialASCIIReceiverAPIV1CB+0x1fc>
        /* A new character is received. If the character is a ':' the
         * input buffers are cleared. A CR character signals the end of the 
         * data block. Other characters are real data bytes.
         */
    case STATE_RX_RCV:
        if( MBM_ASCII_START == ubValue )
 800738c:	1cfb      	adds	r3, r7, #3
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b3a      	cmp	r3, #58	; 0x3a
 8007392:	d10a      	bne.n	80073aa <vMBMSerialASCIIReceiverAPIV1CB+0x70>
        {
            /* Empty receive buffer. */
            pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	2380      	movs	r3, #128	; 0x80
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	2100      	movs	r1, #0
 800739c:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->usRcvBufferPos = 0;
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	2381      	movs	r3, #129	; 0x81
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	2100      	movs	r1, #0
 80073a6:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->usRcvBufferPos++;
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
                break;
            }
        }
        break;
 80073a8:	e0ce      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        else if( MBM_ASCII_DEFAULT_CR == ubValue )
 80073aa:	1cfb      	adds	r3, r7, #3
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b0d      	cmp	r3, #13
 80073b0:	d105      	bne.n	80073be <vMBMSerialASCIIReceiverAPIV1CB+0x84>
            pxASCIIFrameHdl->eRcvState = STATE_RX_WAIT_EOF;
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	2302      	movs	r3, #2
 80073b6:	33ff      	adds	r3, #255	; 0xff
 80073b8:	2102      	movs	r1, #2
 80073ba:	54d1      	strb	r1, [r2, r3]
        break;
 80073bc:	e0c4      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
            ubBinValue = ubMBMSerialASCIICHAR2BIN( ubValue );
 80073be:	230a      	movs	r3, #10
 80073c0:	18fc      	adds	r4, r7, r3
 80073c2:	1cfb      	adds	r3, r7, #3
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	0018      	movs	r0, r3
 80073c8:	f000 fa45 	bl	8007856 <ubMBMSerialASCIICHAR2BIN>
 80073cc:	0003      	movs	r3, r0
 80073ce:	7023      	strb	r3, [r4, #0]
            switch ( pxASCIIFrameHdl->eBytePos )
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	2380      	movs	r3, #128	; 0x80
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	5cd3      	ldrb	r3, [r2, r3]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <vMBMSerialASCIIReceiverAPIV1CB+0xa8>
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d021      	beq.n	8007424 <vMBMSerialASCIIReceiverAPIV1CB+0xea>
        break;
 80073e0:	e0b2      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
                if( pxASCIIFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	2381      	movs	r3, #129	; 0x81
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	5ad3      	ldrh	r3, [r2, r3]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2bfe      	cmp	r3, #254	; 0xfe
 80073ee:	d813      	bhi.n	8007418 <vMBMSerialASCIIReceiverAPIV1CB+0xde>
                    pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] = ( UBYTE ) ( ubBinValue << 4 );
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	2381      	movs	r3, #129	; 0x81
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	5ad3      	ldrh	r3, [r2, r3]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	0019      	movs	r1, r3
 80073fc:	230a      	movs	r3, #10
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	b2da      	uxtb	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	185b      	adds	r3, r3, r1
 800740a:	705a      	strb	r2, [r3, #1]
                    pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	2380      	movs	r3, #128	; 0x80
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	2101      	movs	r1, #1
 8007414:	54d1      	strb	r1, [r2, r3]
                break;
 8007416:	e028      	b.n	800746a <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                    pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	2302      	movs	r3, #2
 800741c:	33ff      	adds	r3, #255	; 0xff
 800741e:	2103      	movs	r1, #3
 8007420:	54d1      	strb	r1, [r2, r3]
                break;
 8007422:	e022      	b.n	800746a <vMBMSerialASCIIReceiverAPIV1CB+0x130>
                pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] |= ubBinValue;
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	2381      	movs	r3, #129	; 0x81
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	5ad3      	ldrh	r3, [r2, r3]
 800742c:	b299      	uxth	r1, r3
 800742e:	000a      	movs	r2, r1
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	189b      	adds	r3, r3, r2
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	230a      	movs	r3, #10
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4313      	orrs	r3, r2
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	185b      	adds	r3, r3, r1
 8007446:	705a      	strb	r2, [r3, #1]
                pxASCIIFrameHdl->usRcvBufferPos++;
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	2381      	movs	r3, #129	; 0x81
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	5ad3      	ldrh	r3, [r2, r3]
 8007450:	b29b      	uxth	r3, r3
 8007452:	3301      	adds	r3, #1
 8007454:	b299      	uxth	r1, r3
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	2381      	movs	r3, #129	; 0x81
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	2100      	movs	r1, #0
 8007466:	54d1      	strb	r1, [r2, r3]
                break;
 8007468:	46c0      	nop			; (mov r8, r8)
        break;
 800746a:	e06d      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>

    case STATE_RX_WAIT_EOF:
        if( MBM_ASCII_DEFAULT_LF == ubValue )
 800746c:	1cfb      	adds	r3, r7, #3
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b0a      	cmp	r3, #10
 8007472:	d137      	bne.n	80074e4 <vMBMSerialASCIIReceiverAPIV1CB+0x1aa>
        {
            bEnableTimer = FALSE;
 8007474:	2317      	movs	r3, #23
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	2388      	movs	r3, #136	; 0x88
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	58d3      	ldr	r3, [r2, r3]
 8007484:	250b      	movs	r5, #11
 8007486:	197c      	adds	r4, r7, r5
 8007488:	2100      	movs	r1, #0
 800748a:	0018      	movs	r0, r3
 800748c:	f001 fcd6 	bl	8008e3c <eMBPSerialRxEnable>
 8007490:	0003      	movs	r3, r0
 8007492:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 8007494:	197b      	adds	r3, r7, r5
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <vMBMSerialASCIIReceiverAPIV1CB+0x166>
 800749c:	f001 fa7e 	bl	800899c <vMBPAssert>
            eStatus = eMBPTimerStop( pxASCIIFrameHdl->xTmrHdl );
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	2386      	movs	r3, #134	; 0x86
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	58d3      	ldr	r3, [r2, r3]
 80074a8:	250b      	movs	r5, #11
 80074aa:	197c      	adds	r4, r7, r5
 80074ac:	0018      	movs	r0, r3
 80074ae:	f001 fef3 	bl	8009298 <eMBPTimerStop>
 80074b2:	0003      	movs	r3, r0
 80074b4:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80074b6:	197b      	adds	r3, r7, r5
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <vMBMSerialASCIIReceiverAPIV1CB+0x188>
 80074be:	f001 fa6d 	bl	800899c <vMBPAssert>

#if MBM_ASCII_BACKOF_TIME_MS > 0
            eStatus = eMBPTimerStart( pxASCIIFrameHdl->xBackOffTmrHdl );
            MBP_ASSERT( MB_ENOERR == eStatus );
#else
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	250b      	movs	r5, #11
 80074c8:	197c      	adds	r4, r7, r5
 80074ca:	2103      	movs	r1, #3
 80074cc:	0018      	movs	r0, r3
 80074ce:	f001 f9e5 	bl	800889c <eMBPEventPost>
 80074d2:	0003      	movs	r3, r0
 80074d4:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80074d6:	197b      	adds	r3, r7, r5
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d031      	beq.n	8007542 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
 80074de:	f001 fa5d 	bl	800899c <vMBPAssert>
        }
        else
        {
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
        }
        break;
 80074e2:	e02e      	b.n	8007542 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
        else if( MBM_ASCII_START == ubValue )
 80074e4:	1cfb      	adds	r3, r7, #3
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b3a      	cmp	r3, #58	; 0x3a
 80074ea:	d114      	bne.n	8007516 <vMBMSerialASCIIReceiverAPIV1CB+0x1dc>
            HDL_RESET_RX( pxASCIIFrameHdl );
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	2302      	movs	r3, #2
 80074f0:	33ff      	adds	r3, #255	; 0xff
 80074f2:	2100      	movs	r1, #0
 80074f4:	54d1      	strb	r1, [r2, r3]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	2381      	movs	r3, #129	; 0x81
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	2100      	movs	r1, #0
 80074fe:	52d1      	strh	r1, [r2, r3]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	2380      	movs	r3, #128	; 0x80
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	2100      	movs	r1, #0
 8007508:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	2302      	movs	r3, #2
 800750e:	33ff      	adds	r3, #255	; 0xff
 8007510:	2101      	movs	r1, #1
 8007512:	54d1      	strb	r1, [r2, r3]
        break;
 8007514:	e015      	b.n	8007542 <vMBMSerialASCIIReceiverAPIV1CB+0x208>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	2302      	movs	r3, #2
 800751a:	33ff      	adds	r3, #255	; 0xff
 800751c:	2103      	movs	r1, #3
 800751e:	54d1      	strb	r1, [r2, r3]
        break;
 8007520:	e00f      	b.n	8007542 <vMBMSerialASCIIReceiverAPIV1CB+0x208>

    case STATE_RX_IDLE:
        if( MBM_ASCII_START == ubValue )
 8007522:	1cfb      	adds	r3, r7, #3
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b3a      	cmp	r3, #58	; 0x3a
 8007528:	d10d      	bne.n	8007546 <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        {
            /* Others settings initialized on the transistion from TX to RX. */
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	2302      	movs	r3, #2
 800752e:	33ff      	adds	r3, #255	; 0xff
 8007530:	2101      	movs	r1, #1
 8007532:	54d1      	strb	r1, [r2, r3]
        }
        break;
 8007534:	e007      	b.n	8007546 <vMBMSerialASCIIReceiverAPIV1CB+0x20c>
        /* Receiver stays in error. The timeout from the MODBUS stack will 
         * abort this instruction.
         */
    case STATE_RX_ERROR:
    default:
        pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	2302      	movs	r3, #2
 800753a:	33ff      	adds	r3, #255	; 0xff
 800753c:	2103      	movs	r1, #3
 800753e:	54d1      	strb	r1, [r2, r3]
        break;
 8007540:	e002      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	e000      	b.n	8007548 <vMBMSerialASCIIReceiverAPIV1CB+0x20e>
        break;
 8007546:	46c0      	nop			; (mov r8, r8)
    }
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif
    if( bEnableTimer )
 8007548:	2317      	movs	r3, #23
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02f      	beq.n	80075b2 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
    {
        if( MB_ENOERR != eMBPTimerStart( pxASCIIFrameHdl->xTmrHdl ) )
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	2386      	movs	r3, #134	; 0x86
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	58d3      	ldr	r3, [r2, r3]
 800755a:	0018      	movs	r0, r3
 800755c:	f001 fe64 	bl	8009228 <eMBPTimerStart>
 8007560:	1e03      	subs	r3, r0, #0
 8007562:	d026      	beq.n	80075b2 <vMBMSerialASCIIReceiverAPIV1CB+0x278>
        {
            /* We can only abort here because or timers failed. */
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	2388      	movs	r3, #136	; 0x88
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	58d3      	ldr	r3, [r2, r3]
 800756c:	250b      	movs	r5, #11
 800756e:	197c      	adds	r4, r7, r5
 8007570:	2100      	movs	r1, #0
 8007572:	0018      	movs	r0, r3
 8007574:	f001 fc62 	bl	8008e3c <eMBPSerialRxEnable>
 8007578:	0003      	movs	r3, r0
 800757a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800757c:	197b      	adds	r3, r7, r5
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <vMBMSerialASCIIReceiverAPIV1CB+0x24e>
 8007584:	f001 fa0a 	bl	800899c <vMBPAssert>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_RECV_ERROR );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	250b      	movs	r5, #11
 800758e:	197c      	adds	r4, r7, r5
 8007590:	2104      	movs	r1, #4
 8007592:	0018      	movs	r0, r3
 8007594:	f001 f982 	bl	800889c <eMBPEventPost>
 8007598:	0003      	movs	r3, r0
 800759a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800759c:	197b      	adds	r3, r7, r5
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <vMBMSerialASCIIReceiverAPIV1CB+0x26e>
 80075a4:	f001 f9fa 	bl	800899c <vMBPAssert>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	2302      	movs	r3, #2
 80075ac:	33ff      	adds	r3, #255	; 0xff
 80075ae:	2103      	movs	r1, #3
 80075b0:	54d1      	strb	r1, [r2, r3]
        }
    }
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b006      	add	sp, #24
 80075b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080075bc <bMBMSerialASCIITransmitterEmptyAPIV1CB>:

STATIC          BOOL
bMBMSerialASCIITransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 80075bc:	b5b0      	push	{r4, r5, r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 80075c6:	2317      	movs	r3, #23
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 80075ce:	2316      	movs	r3, #22
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eRcvState == STATE_RX_IDLE );
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	2302      	movs	r3, #2
 80075e4:	33ff      	adds	r3, #255	; 0xff
 80075e6:	5cd3      	ldrb	r3, [r2, r3]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x36>
 80075ee:	f001 f9d5 	bl	800899c <vMBPAssert>

    switch ( pxASCIIFrameHdl->eSndState )
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	2382      	movs	r3, #130	; 0x82
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d100      	bne.n	8007602 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x46>
 8007600:	e084      	b.n	800770c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x150>
 8007602:	dd00      	ble.n	8007606 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x4a>
 8007604:	e0a6      	b.n	8007754 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 8007606:	2b03      	cmp	r3, #3
 8007608:	d100      	bne.n	800760c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x50>
 800760a:	e072      	b.n	80076f2 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x136>
 800760c:	dd00      	ble.n	8007610 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x54>
 800760e:	e0a1      	b.n	8007754 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
 8007610:	2b01      	cmp	r3, #1
 8007612:	d002      	beq.n	800761a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x5e>
 8007614:	2b02      	cmp	r3, #2
 8007616:	d012      	beq.n	800763e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x82>
        break;

        /* In this case the transmitter is disabled. */
    case STATE_TX_IDLE:
    default:
        break;
 8007618:	e09c      	b.n	8007754 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x198>
        *pubValue = MBM_ASCII_START;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	223a      	movs	r2, #58	; 0x3a
 800761e:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_DATA;
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	2382      	movs	r3, #130	; 0x82
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	2102      	movs	r1, #2
 8007628:	54d1      	strb	r1, [r2, r3]
        pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	2100      	movs	r1, #0
 8007632:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 8007634:	2317      	movs	r3, #23
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
        break;
 800763c:	e08d      	b.n	800775a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        if( pxASCIIFrameHdl->usSndBufferCnt > 0 )
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	2383      	movs	r3, #131	; 0x83
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	5ad3      	ldrh	r3, [r2, r3]
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d045      	beq.n	80076d8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x11c>
            switch ( pxASCIIFrameHdl->eBytePos )
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	2380      	movs	r3, #128	; 0x80
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	5cd3      	ldrb	r3, [r2, r3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xa2>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d014      	beq.n	8007686 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0xca>
 800765c:	e044      	b.n	80076e8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) >> 4 ) );
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	2384      	movs	r3, #132	; 0x84
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	58d3      	ldr	r3, [r2, r3]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	b2db      	uxtb	r3, r3
 800766c:	0018      	movs	r0, r3
 800766e:	f000 f917 	bl	80078a0 <ubMBMSerialASCIIBIN2CHAR>
 8007672:	0003      	movs	r3, r0
 8007674:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	2101      	movs	r1, #1
 8007682:	54d1      	strb	r1, [r2, r3]
                break;
 8007684:	e030      	b.n	80076e8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
                    ubMBMSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) & 0x0F ) );
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	2384      	movs	r3, #132	; 0x84
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	58d3      	ldr	r3, [r2, r3]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	220f      	movs	r2, #15
 8007692:	4013      	ands	r3, r2
 8007694:	b2db      	uxtb	r3, r3
 8007696:	0018      	movs	r0, r3
 8007698:	f000 f902 	bl	80078a0 <ubMBMSerialASCIIBIN2CHAR>
 800769c:	0003      	movs	r3, r0
 800769e:	001a      	movs	r2, r3
                /*@i2@ */ *pubValue =
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	2100      	movs	r1, #0
 80076ac:	54d1      	strb	r1, [r2, r3]
                pxASCIIFrameHdl->pubSndBufferCur++;
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	2384      	movs	r3, #132	; 0x84
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	58d3      	ldr	r3, [r2, r3]
 80076b6:	1c59      	adds	r1, r3, #1
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	2384      	movs	r3, #132	; 0x84
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	50d1      	str	r1, [r2, r3]
                pxASCIIFrameHdl->usSndBufferCnt--;
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	2383      	movs	r3, #131	; 0x83
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	5ad3      	ldrh	r3, [r2, r3]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b299      	uxth	r1, r3
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	2383      	movs	r3, #131	; 0x83
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	52d1      	strh	r1, [r2, r3]
                break;
 80076d6:	e007      	b.n	80076e8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x12c>
            *pubValue = MBM_ASCII_DEFAULT_CR;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	220d      	movs	r2, #13
 80076dc:	701a      	strb	r2, [r3, #0]
            pxASCIIFrameHdl->eSndState = STATE_TX_END;
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	2382      	movs	r3, #130	; 0x82
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	2103      	movs	r1, #3
 80076e6:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 80076e8:	2317      	movs	r3, #23
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	2201      	movs	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
        break;
 80076f0:	e033      	b.n	800775a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        *pubValue = MBM_ASCII_DEFAULT_LF;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	220a      	movs	r2, #10
 80076f6:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_NOTIFY;
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	2382      	movs	r3, #130	; 0x82
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	2104      	movs	r1, #4
 8007700:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = TRUE;
 8007702:	2317      	movs	r3, #23
 8007704:	18fb      	adds	r3, r7, r3
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
        break;
 800770a:	e026      	b.n	800775a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        pxASCIIFrameHdl->eSndState = STATE_TX_IDLE;
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	2382      	movs	r3, #130	; 0x82
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	2100      	movs	r1, #0
 8007714:	54d1      	strb	r1, [r2, r3]
        bMoreTXData = FALSE;
 8007716:	2317      	movs	r3, #23
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
        if( MB_SER_BROADCAST_ADDR == pxASCIIFrameHdl->ubASCIIFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d110      	bne.n	800774a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x18e>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SENT );
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	250b      	movs	r5, #11
 800772e:	197c      	adds	r4, r7, r5
 8007730:	2105      	movs	r1, #5
 8007732:	0018      	movs	r0, r3
 8007734:	f001 f8b2 	bl	800889c <eMBPEventPost>
 8007738:	0003      	movs	r3, r0
 800773a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800773c:	197b      	adds	r3, r7, r5
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
 8007744:	f001 f92a 	bl	800899c <vMBPAssert>
        break;
 8007748:	e006      	b.n	8007758 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
            bEnableRx = TRUE;
 800774a:	2316      	movs	r3, #22
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	2201      	movs	r2, #1
 8007750:	701a      	strb	r2, [r3, #0]
        break;
 8007752:	e001      	b.n	8007758 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19c>
        break;
 8007754:	46c0      	nop			; (mov r8, r8)
 8007756:	e000      	b.n	800775a <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x19e>
        break;
 8007758:	46c0      	nop			; (mov r8, r8)
    }

    if( !bMoreTXData )
 800775a:	2317      	movs	r3, #23
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d113      	bne.n	800778c <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x1d0>
    {
        HDL_RESET_TX( pxASCIIFrameHdl );
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	2382      	movs	r3, #130	; 0x82
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	2100      	movs	r1, #0
 800776c:	54d1      	strb	r1, [r2, r3]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	2383      	movs	r3, #131	; 0x83
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	2100      	movs	r1, #0
 8007776:	52d1      	strh	r1, [r2, r3]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	2100      	movs	r1, #0
 8007780:	54d1      	strb	r1, [r2, r3]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	2384      	movs	r3, #132	; 0x84
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	2100      	movs	r1, #0
 800778a:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 800778c:	2316      	movs	r3, #22
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d029      	beq.n	80077ea <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
    {
        HDL_RESET_RX( pxASCIIFrameHdl );
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	2302      	movs	r3, #2
 800779a:	33ff      	adds	r3, #255	; 0xff
 800779c:	2100      	movs	r1, #0
 800779e:	54d1      	strb	r1, [r2, r3]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	2381      	movs	r3, #129	; 0x81
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	2100      	movs	r1, #0
 80077a8:	52d1      	strh	r1, [r2, r3]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	2380      	movs	r3, #128	; 0x80
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	2100      	movs	r1, #0
 80077b2:	54d1      	strb	r1, [r2, r3]
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else

        if( MB_ENOERR != eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBMSerialASCIIReceiverAPIV1CB ) )
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	2388      	movs	r3, #136	; 0x88
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	58d3      	ldr	r3, [r2, r3]
 80077bc:	4a0e      	ldr	r2, [pc, #56]	; (80077f8 <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x23c>)
 80077be:	0011      	movs	r1, r2
 80077c0:	0018      	movs	r0, r3
 80077c2:	f001 fb3b 	bl	8008e3c <eMBPSerialRxEnable>
 80077c6:	1e03      	subs	r3, r0, #0
 80077c8:	d00f      	beq.n	80077ea <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, MBM_EV_SEND_ERROR );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	250b      	movs	r5, #11
 80077d0:	197c      	adds	r4, r7, r5
 80077d2:	2106      	movs	r1, #6
 80077d4:	0018      	movs	r0, r3
 80077d6:	f001 f861 	bl	800889c <eMBPEventPost>
 80077da:	0003      	movs	r3, r0
 80077dc:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80077de:	197b      	adds	r3, r7, r5
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <bMBMSerialASCIITransmitterEmptyAPIV1CB+0x22e>
 80077e6:	f001 f8d9 	bl	800899c <vMBPAssert>
        }
#endif
    }
    return bMoreTXData;
 80077ea:	2317      	movs	r3, #23
 80077ec:	18fb      	adds	r3, r7, r3
 80077ee:	781b      	ldrb	r3, [r3, #0]
}
 80077f0:	0018      	movs	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b006      	add	sp, #24
 80077f6:	bdb0      	pop	{r4, r5, r7, pc}
 80077f8:	0800733b 	.word	0x0800733b

080077fc <bMBMSerialASCIITimerCB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialASCIITimerCB( xMBHandle xHdl )
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 8007804:	2317      	movs	r3, #23
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	2201      	movs	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	613b      	str	r3, [r7, #16]
    xMBMASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	2382      	movs	r3, #130	; 0x82
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	5cd3      	ldrb	r3, [r2, r3]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <bMBMSerialASCIITimerCB+0x2c>
 8007824:	f001 f8ba 	bl	800899c <vMBPAssert>

    eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	250b      	movs	r5, #11
 800782e:	197c      	adds	r4, r7, r5
 8007830:	2104      	movs	r1, #4
 8007832:	0018      	movs	r0, r3
 8007834:	f001 f832 	bl	800889c <eMBPEventPost>
 8007838:	0003      	movs	r3, r0
 800783a:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 800783c:	197b      	adds	r3, r7, r5
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <bMBMSerialASCIITimerCB+0x4c>
 8007844:	f001 f8aa 	bl	800899c <vMBPAssert>

    return bNeedCtxSwitch;
 8007848:	2317      	movs	r3, #23
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	781b      	ldrb	r3, [r3, #0]
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	b006      	add	sp, #24
 8007854:	bdb0      	pop	{r4, r5, r7, pc}

08007856 <ubMBMSerialASCIICHAR2BIN>:

STATIC          UBYTE
ubMBMSerialASCIICHAR2BIN( UBYTE ubCharacter )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	0002      	movs	r2, r0
 800785e:	1dfb      	adds	r3, r7, #7
 8007860:	701a      	strb	r2, [r3, #0]
    if( ( ubCharacter >= 0x30 /* ASCII '0' */  ) && ( ubCharacter <= 0x39 /* ASCII '9' */  ) )
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b2f      	cmp	r3, #47	; 0x2f
 8007868:	d908      	bls.n	800787c <ubMBMSerialASCIICHAR2BIN+0x26>
 800786a:	1dfb      	adds	r3, r7, #7
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b39      	cmp	r3, #57	; 0x39
 8007870:	d804      	bhi.n	800787c <ubMBMSerialASCIICHAR2BIN+0x26>
    {
        return ( UBYTE ) ( ubCharacter - 0x30 /* ASCII '0' */  );
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	3b30      	subs	r3, #48	; 0x30
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e00d      	b.n	8007898 <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else if( ( ubCharacter >= 0x41 /* ASCII 'A' */  ) && ( ubCharacter <= 0x46 /* ASCII 'F' */  ) )
 800787c:	1dfb      	adds	r3, r7, #7
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d908      	bls.n	8007896 <ubMBMSerialASCIICHAR2BIN+0x40>
 8007884:	1dfb      	adds	r3, r7, #7
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b46      	cmp	r3, #70	; 0x46
 800788a:	d804      	bhi.n	8007896 <ubMBMSerialASCIICHAR2BIN+0x40>
    {
        return ( UBYTE ) ( ( ubCharacter - 0x41 ) /* ASCII 'A' */  + 0x0A );
 800788c:	1dfb      	adds	r3, r7, #7
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	3b37      	subs	r3, #55	; 0x37
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e000      	b.n	8007898 <ubMBMSerialASCIICHAR2BIN+0x42>
    }
    else
    {
        return 0xFF;
 8007896:	23ff      	movs	r3, #255	; 0xff
    }
}
 8007898:	0018      	movs	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	b002      	add	sp, #8
 800789e:	bd80      	pop	{r7, pc}

080078a0 <ubMBMSerialASCIIBIN2CHAR>:

STATIC          UBYTE
ubMBMSerialASCIIBIN2CHAR( UBYTE ubByte )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	0002      	movs	r2, r0
 80078a8:	1dfb      	adds	r3, r7, #7
 80078aa:	701a      	strb	r2, [r3, #0]
    if( ubByte <= 0x09 )
 80078ac:	1dfb      	adds	r3, r7, #7
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b09      	cmp	r3, #9
 80078b2:	d804      	bhi.n	80078be <ubMBMSerialASCIIBIN2CHAR+0x1e>
    {
        return ( UBYTE ) ( 0x30 + ubByte );
 80078b4:	1dfb      	adds	r3, r7, #7
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	3330      	adds	r3, #48	; 0x30
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	e00f      	b.n	80078de <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    else if( ( ubByte >= 0x0A ) && ( ubByte <= 0x0F ) )
 80078be:	1dfb      	adds	r3, r7, #7
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d908      	bls.n	80078d8 <ubMBMSerialASCIIBIN2CHAR+0x38>
 80078c6:	1dfb      	adds	r3, r7, #7
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d804      	bhi.n	80078d8 <ubMBMSerialASCIIBIN2CHAR+0x38>
    {
        return ( UBYTE ) ( ( ubByte - 0x0A ) + 0x41 /* ASCII 'A' */  );
 80078ce:	1dfb      	adds	r3, r7, #7
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	3337      	adds	r3, #55	; 0x37
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e002      	b.n	80078de <ubMBMSerialASCIIBIN2CHAR+0x3e>
    }
    MBP_ASSERT( 0 );
 80078d8:	f001 f860 	bl	800899c <vMBPAssert>
    /*lint -e(527) */ return 0xFF;
 80078dc:	23ff      	movs	r3, #255	; 0xff
}
 80078de:	0018      	movs	r0, r3
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b002      	add	sp, #8
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <ubMBMSerialASCIILRC>:


STATIC          UBYTE
ubMBMSerialASCIILRC( const UBYTE * pubFrame, USHORT usLen )
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	000a      	movs	r2, r1
 80078f0:	1cbb      	adds	r3, r7, #2
 80078f2:	801a      	strh	r2, [r3, #0]
    UBYTE           ubLRC = 0;  /* LRC char initialized */
 80078f4:	230f      	movs	r3, #15
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]

    while( usLen-- > 0 )
 80078fc:	e009      	b.n	8007912 <ubMBMSerialASCIILRC+0x2c>
    {
        ubLRC += *pubFrame++;   /* Add buffer byte without carry */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	220f      	movs	r2, #15
 8007908:	18bb      	adds	r3, r7, r2
 800790a:	18ba      	adds	r2, r7, r2
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	188a      	adds	r2, r1, r2
 8007910:	701a      	strb	r2, [r3, #0]
    while( usLen-- > 0 )
 8007912:	1cbb      	adds	r3, r7, #2
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	1cba      	adds	r2, r7, #2
 8007918:	1e59      	subs	r1, r3, #1
 800791a:	8011      	strh	r1, [r2, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1ee      	bne.n	80078fe <ubMBMSerialASCIILRC+0x18>
    }

    /* Return twos complement */
    ubLRC = ( UBYTE ) ( -( ( UBYTE ) ubLRC ) );
 8007920:	210f      	movs	r1, #15
 8007922:	187b      	adds	r3, r7, r1
 8007924:	187a      	adds	r2, r7, r1
 8007926:	7812      	ldrb	r2, [r2, #0]
 8007928:	4252      	negs	r2, r2
 800792a:	701a      	strb	r2, [r3, #0]
    return ubLRC;
 800792c:	187b      	adds	r3, r7, r1
 800792e:	781b      	ldrb	r3, [r3, #0]
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}

08007938 <usMBMCRC16>:
}
#endif

USHORT
usMBMCRC16( const UBYTE * pucFrame, USHORT usLen )
{
 8007938:	b590      	push	{r4, r7, lr}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	000a      	movs	r2, r1
 8007942:	1cbb      	adds	r3, r7, #2
 8007944:	801a      	strh	r2, [r3, #0]
    UBYTE           ubCRCHi = 0xFF;
 8007946:	230f      	movs	r3, #15
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	22ff      	movs	r2, #255	; 0xff
 800794c:	701a      	strb	r2, [r3, #0]
    UBYTE           ubCRCLo = 0xFF;
 800794e:	230e      	movs	r3, #14
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	22ff      	movs	r2, #255	; 0xff
 8007954:	701a      	strb	r2, [r3, #0]

#if CRC16_USETABLE == 0
    USHORT          usCRCTableValue;
#endif

    while( usLen-- )
 8007956:	e01a      	b.n	800798e <usMBMCRC16+0x56>
    {

        ubIndex = ubCRCLo ^ *( pucFrame++ );
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	7819      	ldrb	r1, [r3, #0]
 8007960:	200d      	movs	r0, #13
 8007962:	183b      	adds	r3, r7, r0
 8007964:	240e      	movs	r4, #14
 8007966:	193a      	adds	r2, r7, r4
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	404a      	eors	r2, r1
 800796c:	701a      	strb	r2, [r3, #0]
#if CRC16_USETABLE == 1
        ubCRCLo = ubCRCHi ^ ( UBYTE ) aucCRCHi[ubIndex];
 800796e:	183b      	adds	r3, r7, r0
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	4a12      	ldr	r2, [pc, #72]	; (80079bc <usMBMCRC16+0x84>)
 8007974:	5cd1      	ldrb	r1, [r2, r3]
 8007976:	193b      	adds	r3, r7, r4
 8007978:	240f      	movs	r4, #15
 800797a:	193a      	adds	r2, r7, r4
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	404a      	eors	r2, r1
 8007980:	701a      	strb	r2, [r3, #0]
        ubCRCHi = ( UBYTE ) aucCRCLo[ubIndex];
 8007982:	183b      	adds	r3, r7, r0
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	193b      	adds	r3, r7, r4
 8007988:	490d      	ldr	r1, [pc, #52]	; (80079c0 <usMBMCRC16+0x88>)
 800798a:	5c8a      	ldrb	r2, [r1, r2]
 800798c:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 800798e:	1cbb      	adds	r3, r7, #2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	1cba      	adds	r2, r7, #2
 8007994:	1e59      	subs	r1, r3, #1
 8007996:	8011      	strh	r1, [r2, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1dd      	bne.n	8007958 <usMBMCRC16+0x20>
    }
    /* Additional casts a for PIC MCC18 compiler to fix a bug when -Oi is not used. 
     * This is required because it does not enforce ANSI c integer promotion
     * rules.
     */
    return ( USHORT )( ( USHORT )ubCRCHi << 8 | ( USHORT )ubCRCLo );
 800799c:	230f      	movs	r3, #15
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	b21a      	sxth	r2, r3
 80079a6:	230e      	movs	r3, #14
 80079a8:	18fb      	adds	r3, r7, r3
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b21b      	sxth	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b21b      	sxth	r3, r3
 80079b2:	b29b      	uxth	r3, r3
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b005      	add	sp, #20
 80079ba:	bd90      	pop	{r4, r7, pc}
 80079bc:	08009a98 	.word	0x08009a98
 80079c0:	08009b98 	.word	0x08009b98

080079c4 <vMBMReadHoldingRegistersPolled>:

#if MBM_FUNC_RD_HOLDING_ENABLED == 1
void
vMBMReadHoldingRegistersPolled( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usRegStartAddress, UBYTE ubNRegs,
                                USHORT arusBufferOut[], eMBMQueryState * peState, eMBErrorCode * peStatus )
{
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	000c      	movs	r4, r1
 80079ce:	0010      	movs	r0, r2
 80079d0:	0019      	movs	r1, r3
 80079d2:	1cfb      	adds	r3, r7, #3
 80079d4:	1c22      	adds	r2, r4, #0
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	003b      	movs	r3, r7
 80079da:	1c02      	adds	r2, r0, #0
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	1cbb      	adds	r3, r7, #2
 80079e0:	1c0a      	adds	r2, r1, #0
 80079e2:	701a      	strb	r2, [r3, #0]
    
	UBYTE           ubNRegCnt;
    xMBMInternalHandle *pxIntHdl = ( xMBMInternalHandle * ) xHdl;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
    if( bMBMIsHdlValid( pxIntHdl ) && ( peState != NULL ) && ( peStatus != NULL ) && ( NULL != arusBufferOut ) )
#else
    if( TRUE )
#endif
    {
        switch ( *peState )
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d100      	bne.n	80079f2 <vMBMReadHoldingRegistersPolled+0x2e>
 80079f0:	e0f3      	b.n	8007bda <vMBMReadHoldingRegistersPolled+0x216>
 80079f2:	dd00      	ble.n	80079f6 <vMBMReadHoldingRegistersPolled+0x32>
 80079f4:	e0f5      	b.n	8007be2 <vMBMReadHoldingRegistersPolled+0x21e>
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d100      	bne.n	80079fc <vMBMReadHoldingRegistersPolled+0x38>
 80079fa:	e07d      	b.n	8007af8 <vMBMReadHoldingRegistersPolled+0x134>
 80079fc:	dd00      	ble.n	8007a00 <vMBMReadHoldingRegistersPolled+0x3c>
 80079fe:	e0f0      	b.n	8007be2 <vMBMReadHoldingRegistersPolled+0x21e>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <vMBMReadHoldingRegistersPolled+0x4e>
 8007a04:	da00      	bge.n	8007a08 <vMBMReadHoldingRegistersPolled+0x44>
 8007a06:	e0ec      	b.n	8007be2 <vMBMReadHoldingRegistersPolled+0x21e>
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d900      	bls.n	8007a10 <vMBMReadHoldingRegistersPolled+0x4c>
 8007a0e:	e0e8      	b.n	8007be2 <vMBMReadHoldingRegistersPolled+0x21e>
 8007a10:	e069      	b.n	8007ae6 <vMBMReadHoldingRegistersPolled+0x122>
        {
            /* In this state we prepare the frame and send it. */
        case MBM_STATE_NONE:
            if( ( ( ( ULONG ) usRegStartAddress + ( ULONG ) ubNRegs ) < ( ULONG ) 0x10000 ) &&
 8007a12:	003b      	movs	r3, r7
 8007a14:	881a      	ldrh	r2, [r3, #0]
 8007a16:	1cbb      	adds	r3, r7, #2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	18d2      	adds	r2, r2, r3
 8007a1c:	2380      	movs	r3, #128	; 0x80
 8007a1e:	025b      	lsls	r3, r3, #9
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d259      	bcs.n	8007ad8 <vMBMReadHoldingRegistersPolled+0x114>
 8007a24:	1cbb      	adds	r3, r7, #2
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d055      	beq.n	8007ad8 <vMBMReadHoldingRegistersPolled+0x114>
                ( ubNRegs > 0 ) && ( ubNRegs <= MBM_FUNC_RD_REGS_REGCNT_MAX ) )
 8007a2c:	1cbb      	adds	r3, r7, #2
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b7d      	cmp	r3, #125	; 0x7d
 8007a32:	d851      	bhi.n	8007ad8 <vMBMReadHoldingRegistersPolled+0x114>
                                 "[IDX=" MBP_FORMAT_USHORT "] Read holding registers request (start=" MBP_FORMAT_USHORT
                                 ", length=" MBP_FORMAT_USHORT ").\n", ( USHORT ) pxIntHdl->ubIdx, usRegStartAddress,
                                 ( USHORT ) ubNRegs );
                }
#endif
                pxIntHdl->usFrameMBPDULength = 0;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = MBM_FUNC_RD_REGS;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	89d2      	ldrh	r2, [r2, #14]
 8007a42:	189b      	adds	r3, r3, r2
 8007a44:	2203      	movs	r2, #3
 8007a46:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	89db      	ldrh	r3, [r3, #14]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( usRegStartAddress >> 8U );
 8007a54:	003b      	movs	r3, r7
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	89d2      	ldrh	r2, [r2, #14]
 8007a64:	189b      	adds	r3, r3, r2
 8007a66:	b2ca      	uxtb	r2, r1
 8007a68:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	89db      	ldrh	r3, [r3, #14]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	89d2      	ldrh	r2, [r2, #14]
 8007a7e:	189b      	adds	r3, r3, r2
                    ( UBYTE ) ( usRegStartAddress & 0x00FFU );
 8007a80:	003a      	movs	r2, r7
 8007a82:	8812      	ldrh	r2, [r2, #0]
 8007a84:	b2d2      	uxtb	r2, r2
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] =
 8007a86:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	89db      	ldrh	r3, [r3, #14]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = 0;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	89d2      	ldrh	r2, [r2, #14]
 8007a9c:	189b      	adds	r3, r3, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	89db      	ldrh	r3, [r3, #14]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	81da      	strh	r2, [r3, #14]
                pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ubNRegs;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	89d2      	ldrh	r2, [r2, #14]
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	1cba      	adds	r2, r7, #2
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	701a      	strb	r2, [r3, #0]
				pxIntHdl->usFrameMBPDULength++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	89db      	ldrh	r3, [r3, #14]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	81da      	strh	r2, [r3, #14]

                /* Frame is assembled. Now send it. */
                *peStatus = MB_EAGAIN;
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2207      	movs	r2, #7
 8007ace:	701a      	strb	r2, [r3, #0]
                *peState = MBM_STATE_SEND;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	701a      	strb	r2, [r3, #0]
            else
            {
                *peStatus = MB_EINVAL;
                *peState = MBM_STATE_DONE;
            }
            break;
 8007ad6:	e08b      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>
                *peStatus = MB_EINVAL;
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
                *peState = MBM_STATE_DONE;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	2205      	movs	r2, #5
 8007ae2:	701a      	strb	r2, [r3, #0]
            break;
 8007ae4:	e084      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>

            /* These states are handled by the common state machine. */
        case MBM_STATE_SEND:
        case MBM_STATE_WAITING:
            vMBMMasterTransactionPolled( pxIntHdl, ucSlaveAddress, peState, peStatus );
 8007ae6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8007ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aea:	1cfb      	adds	r3, r7, #3
 8007aec:	7819      	ldrb	r1, [r3, #0]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	0023      	movs	r3, r4
 8007af2:	f7fe feeb 	bl	80068cc <vMBMMasterTransactionPolled>
            break;
 8007af6:	e07b      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>

            /* We need to disassemble the response here. */
        case MBM_STATE_DISASSEMBLE:
            *peState = MBM_STATE_DONE;
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2205      	movs	r2, #5
 8007afc:	701a      	strb	r2, [r3, #0]
            if( ( MBM_FUNC_RD_REGS_RESP_SIZE( ubNRegs ) == pxIntHdl->usFrameMBPDULength ) &&
 8007afe:	1cbb      	adds	r3, r7, #2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3301      	adds	r3, #1
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	18db      	adds	r3, r3, r3
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	89db      	ldrh	r3, [r3, #14]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d148      	bne.n	8007ba6 <vMBMReadHoldingRegistersPolled+0x1e2>
                ( MBM_FUNC_RD_REGS == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) &&
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	781b      	ldrb	r3, [r3, #0]
            if( ( MBM_FUNC_RD_REGS_RESP_SIZE( ubNRegs ) == pxIntHdl->usFrameMBPDULength ) &&
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d143      	bne.n	8007ba6 <vMBMReadHoldingRegistersPolled+0x1e2>
                ( ( 2 * ubNRegs ) == pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_RD_REGS_RESP_BYTECNT_OFF] ) )
 8007b1e:	1cbb      	adds	r3, r7, #2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	005a      	lsls	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	781b      	ldrb	r3, [r3, #0]
                ( MBM_FUNC_RD_REGS == pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF] ) &&
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d13a      	bne.n	8007ba6 <vMBMReadHoldingRegistersPolled+0x1e2>
            {

                /* A pointer pointing to the first register value in the stream. */
                pubCurPtr = &( pxIntHdl->pubFrameMBPDUBuffer[MBM_FUNC_RD_REGS_RESP_REGS_OFF] );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	3302      	adds	r3, #2
 8007b36:	613b      	str	r3, [r7, #16]
                for( ubNRegCnt = 0; ubNRegCnt < ubNRegs; ubNRegCnt++ )
 8007b38:	2317      	movs	r3, #23
 8007b3a:	18fb      	adds	r3, r7, r3
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e026      	b.n	8007b90 <vMBMReadHoldingRegistersPolled+0x1cc>
                {
                    arusBufferOut[ubNRegCnt] = ( USHORT ) ( ( USHORT ) * pubCurPtr++ << 8U );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	613a      	str	r2, [r7, #16]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	2017      	movs	r0, #23
 8007b4e:	183b      	adds	r3, r7, r0
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b56:	18cb      	adds	r3, r1, r3
 8007b58:	0212      	lsls	r2, r2, #8
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	801a      	strh	r2, [r3, #0]
                    arusBufferOut[ubNRegCnt] |= ( USHORT ) * pubCurPtr++;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	613a      	str	r2, [r7, #16]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b299      	uxth	r1, r3
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b70:	18d3      	adds	r3, r2, r3
 8007b72:	881a      	ldrh	r2, [r3, #0]
 8007b74:	0004      	movs	r4, r0
 8007b76:	183b      	adds	r3, r7, r0
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7e:	18c3      	adds	r3, r0, r3
 8007b80:	430a      	orrs	r2, r1
 8007b82:	b292      	uxth	r2, r2
 8007b84:	801a      	strh	r2, [r3, #0]
                for( ubNRegCnt = 0; ubNRegCnt < ubNRegs; ubNRegCnt++ )
 8007b86:	193b      	adds	r3, r7, r4
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	193b      	adds	r3, r7, r4
 8007b8c:	3201      	adds	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	2317      	movs	r3, #23
 8007b92:	18fa      	adds	r2, r7, r3
 8007b94:	1cbb      	adds	r3, r7, #2
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d3d1      	bcc.n	8007b42 <vMBMReadHoldingRegistersPolled+0x17e>
                }
                *peStatus = MB_ENOERR;
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	e018      	b.n	8007bd8 <vMBMReadHoldingRegistersPolled+0x214>
            }
            /* Check for exception frame. */
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	89db      	ldrh	r3, [r3, #14]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d110      	bne.n	8007bd0 <vMBMReadHoldingRegistersPolled+0x20c>
                     MB_PDU_FUNC_ISEXCEPTION_FOR( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF], MBM_FUNC_RD_REGS ) )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
            else if( ( MB_PDU_EX_RESP_SIZE == pxIntHdl->usFrameMBPDULength ) &&
 8007bb4:	2b83      	cmp	r3, #131	; 0x83
 8007bb6:	d10b      	bne.n	8007bd0 <vMBMReadHoldingRegistersPolled+0x20c>
            {
                *peStatus = eMBExceptionToErrorcode( pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_EX_CODE_OFF] );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f001 fc09 	bl	80093d8 <eMBExceptionToErrorcode>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	001a      	movs	r2, r3
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e003      	b.n	8007bd8 <vMBMReadHoldingRegistersPolled+0x214>
            }
            else
            {
                *peStatus = MB_EIO;
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007bd6:	e00b      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>
 8007bd8:	e00a      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>

        case MBM_STATE_ERROR:
            /* No cleanup required. */
            *peState = MBM_STATE_DONE;
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	2205      	movs	r2, #5
 8007bde:	701a      	strb	r2, [r3, #0]
            break;
 8007be0:	e006      	b.n	8007bf0 <vMBMReadHoldingRegistersPolled+0x22c>

        default:
            *peState = MBM_STATE_DONE;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	2205      	movs	r2, #5
 8007be6:	701a      	strb	r2, [r3, #0]
            *peStatus = MB_EILLSTATE;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	2206      	movs	r2, #6
 8007bec:	701a      	strb	r2, [r3, #0]
        {
            *peStatus = MB_EINVAL;
        }
    }
#endif
}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	46c0      	nop			; (mov r8, r8)
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b007      	add	sp, #28
 8007bf6:	bd90      	pop	{r4, r7, pc}

08007bf8 <eMBMReadHoldingRegisters>:

#if MBM_FUNC_RD_HOLDING_ENABLED == 1
eMBErrorCode
eMBMReadHoldingRegisters( xMBHandle xHdl, UCHAR ucSlaveAddress,
                          USHORT usRegStartAddress, UBYTE ubNRegs, USHORT arusBufferOut[] )
{
 8007bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bfa:	b089      	sub	sp, #36	; 0x24
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	000c      	movs	r4, r1
 8007c02:	0010      	movs	r0, r2
 8007c04:	0019      	movs	r1, r3
 8007c06:	1cfb      	adds	r3, r7, #3
 8007c08:	1c22      	adds	r2, r4, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
 8007c0c:	003b      	movs	r3, r7
 8007c0e:	1c02      	adds	r2, r0, #0
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	1cbb      	adds	r3, r7, #2
 8007c14:	1c0a      	adds	r2, r1, #0
 8007c16:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    eMBMQueryState  eState = MBM_STATE_NONE;
 8007c18:	230e      	movs	r3, #14
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]

    do
    {
        vMBMReadHoldingRegistersPolled( xHdl, ucSlaveAddress, usRegStartAddress, ubNRegs, arusBufferOut, &eState,
 8007c20:	1cbb      	adds	r3, r7, #2
 8007c22:	781c      	ldrb	r4, [r3, #0]
 8007c24:	003b      	movs	r3, r7
 8007c26:	881a      	ldrh	r2, [r3, #0]
 8007c28:	1cfb      	adds	r3, r7, #3
 8007c2a:	7819      	ldrb	r1, [r3, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	250f      	movs	r5, #15
 8007c30:	197b      	adds	r3, r7, r5
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	260e      	movs	r6, #14
 8007c36:	19bb      	adds	r3, r7, r6
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	0023      	movs	r3, r4
 8007c40:	f7ff fec0 	bl	80079c4 <vMBMReadHoldingRegistersPolled>
                                        &eStatus );
    }
    while( eState != MBM_STATE_DONE );
 8007c44:	19bb      	adds	r3, r7, r6
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b05      	cmp	r3, #5
 8007c4a:	d1e9      	bne.n	8007c20 <eMBMReadHoldingRegisters+0x28>
//    eState = MBM_STATE_DONE;
    return eStatus;
 8007c4c:	197b      	adds	r3, r7, r5
 8007c4e:	781b      	ldrb	r3, [r3, #0]
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b005      	add	sp, #20
 8007c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c58 <eMBMSerialRTUInit>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBMSerialRTUInit( xMBMInternalHandle * pxIntHdl, UCHAR ucPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8007c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5a:	b08d      	sub	sp, #52	; 0x34
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	0008      	movs	r0, r1
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	0019      	movs	r1, r3
 8007c66:	230b      	movs	r3, #11
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	1c02      	adds	r2, r0, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	230a      	movs	r3, #10
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	1c0a      	adds	r2, r1, #0
 8007c74:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 8007c76:	231f      	movs	r3, #31
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
    xMBMRTUFrameHandle *pxFrameHdl = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 8007c82:	f000 fe9e 	bl	80089c2 <vMBPEnterCritical>
        if( !bIsInitialized )
 8007c86:	4ba7      	ldr	r3, [pc, #668]	; (8007f24 <eMBMSerialRTUInit+0x2cc>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d000      	beq.n	8007c90 <eMBMSerialRTUInit+0x38>
 8007c8e:	e099      	b.n	8007dc4 <eMBMSerialRTUInit+0x16c>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007c90:	2317      	movs	r3, #23
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e08b      	b.n	8007db2 <eMBMSerialRTUInit+0x15a>
            {
                HDL_RESET( &xMBMRTUFrameHdl[ubIdx] );
 8007c9a:	2417      	movs	r4, #23
 8007c9c:	193b      	adds	r3, r7, r4
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	49a1      	ldr	r1, [pc, #644]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007ca2:	0013      	movs	r3, r2
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	189b      	adds	r3, r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	545a      	strb	r2, [r3, r1]
 8007cb2:	193b      	adds	r3, r7, r4
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	489c      	ldr	r0, [pc, #624]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007cb8:	2302      	movs	r3, #2
 8007cba:	33ff      	adds	r3, #255	; 0xff
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	0013      	movs	r3, r2
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	18c3      	adds	r3, r0, r3
 8007ccc:	185b      	adds	r3, r3, r1
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	193b      	adds	r3, r7, r4
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	4894      	ldr	r0, [pc, #592]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007cd8:	2381      	movs	r3, #129	; 0x81
 8007cda:	0059      	lsls	r1, r3, #1
 8007cdc:	0013      	movs	r3, r2
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	189b      	adds	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	189b      	adds	r3, r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	18c3      	adds	r3, r0, r3
 8007cea:	185b      	adds	r3, r3, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	193b      	adds	r3, r7, r4
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	488c      	ldr	r0, [pc, #560]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007cf6:	2382      	movs	r3, #130	; 0x82
 8007cf8:	0059      	lsls	r1, r3, #1
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	18c3      	adds	r3, r0, r3
 8007d08:	185b      	adds	r3, r3, r1
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	193b      	adds	r3, r7, r4
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	4885      	ldr	r0, [pc, #532]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007d14:	2383      	movs	r3, #131	; 0x83
 8007d16:	0059      	lsls	r1, r3, #1
 8007d18:	0013      	movs	r3, r2
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	189b      	adds	r3, r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	189b      	adds	r3, r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	18c3      	adds	r3, r0, r3
 8007d26:	185b      	adds	r3, r3, r1
 8007d28:	2200      	movs	r2, #0
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	193b      	adds	r3, r7, r4
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	487d      	ldr	r0, [pc, #500]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007d32:	2384      	movs	r3, #132	; 0x84
 8007d34:	0059      	lsls	r1, r3, #1
 8007d36:	0013      	movs	r3, r2
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	189b      	adds	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	18c3      	adds	r3, r0, r3
 8007d44:	185b      	adds	r3, r3, r1
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	193b      	adds	r3, r7, r4
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	4876      	ldr	r0, [pc, #472]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007d50:	2386      	movs	r3, #134	; 0x86
 8007d52:	0059      	lsls	r1, r3, #1
 8007d54:	0013      	movs	r3, r2
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	189b      	adds	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	189b      	adds	r3, r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	18c3      	adds	r3, r0, r3
 8007d62:	185b      	adds	r3, r3, r1
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	193b      	adds	r3, r7, r4
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	486e      	ldr	r0, [pc, #440]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007d6e:	2388      	movs	r3, #136	; 0x88
 8007d70:	0059      	lsls	r1, r3, #1
 8007d72:	0013      	movs	r3, r2
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	189b      	adds	r3, r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	189b      	adds	r3, r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	18c3      	adds	r3, r0, r3
 8007d80:	185b      	adds	r3, r3, r1
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	193b      	adds	r3, r7, r4
 8007d88:	781a      	ldrb	r2, [r3, #0]
 8007d8a:	0013      	movs	r3, r2
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4a64      	ldr	r2, [pc, #400]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007d98:	189b      	adds	r3, r3, r2
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	0052      	lsls	r2, r2, #1
 8007da0:	2100      	movs	r1, #0
 8007da2:	0018      	movs	r0, r3
 8007da4:	f001 fcfe 	bl	80097a4 <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007da8:	193b      	adds	r3, r7, r4
 8007daa:	781a      	ldrb	r2, [r3, #0]
 8007dac:	193b      	adds	r3, r7, r4
 8007dae:	3201      	adds	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	2317      	movs	r3, #23
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d800      	bhi.n	8007dbe <eMBMSerialRTUInit+0x166>
 8007dbc:	e76d      	b.n	8007c9a <eMBMSerialRTUInit+0x42>
            }
            bIsInitialized = TRUE;
 8007dbe:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <eMBMSerialRTUInit+0x2cc>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007dc4:	2317      	movs	r3, #23
 8007dc6:	18fb      	adds	r3, r7, r3
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	e023      	b.n	8007e16 <eMBMSerialRTUInit+0x1be>
        {
            if( IDX_INVALID == xMBMRTUFrameHdl[ubIdx].ubIdx )
 8007dce:	2017      	movs	r0, #23
 8007dd0:	183b      	adds	r3, r7, r0
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	4954      	ldr	r1, [pc, #336]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007dd6:	0013      	movs	r3, r2
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	5c5b      	ldrb	r3, [r3, r1]
 8007de4:	2bff      	cmp	r3, #255	; 0xff
 8007de6:	d110      	bne.n	8007e0a <eMBMSerialRTUInit+0x1b2>
            {
                pxFrameHdl = &xMBMRTUFrameHdl[ubIdx];
 8007de8:	0001      	movs	r1, r0
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	0013      	movs	r3, r2
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	189b      	adds	r3, r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a4b      	ldr	r2, [pc, #300]	; (8007f28 <eMBMSerialRTUInit+0x2d0>)
 8007dfc:	189b      	adds	r3, r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	187a      	adds	r2, r7, r1
 8007e04:	7812      	ldrb	r2, [r2, #0]
 8007e06:	701a      	strb	r2, [r3, #0]
                break;
 8007e08:	e00a      	b.n	8007e20 <eMBMSerialRTUInit+0x1c8>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBMRTUFrameHdl ); ubIdx++ )
 8007e0a:	2117      	movs	r1, #23
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	3201      	adds	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	2317      	movs	r3, #23
 8007e18:	18fb      	adds	r3, r7, r3
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d9d6      	bls.n	8007dce <eMBMSerialRTUInit+0x176>
            }
        }

        if( NULL != pxFrameHdl )
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d071      	beq.n	8007f0a <eMBMSerialRTUInit+0x2b2>
            usTimeoutMS = ( USHORT ) MBM_SERIAL_APIV2_RTU_DYNAMIC_TIMEOUT_MS( ulBaudRate );
#else
            /* If baudrate > 19200 then we should use the fixed timer value 1750us. 
             * We can't match this exactly so we use 2000us. Otherwise use 3.5 timers
             * the character timeout. */
            if( ulBaudRate > 19200 )
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	2396      	movs	r3, #150	; 0x96
 8007e2a:	01db      	lsls	r3, r3, #7
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d904      	bls.n	8007e3a <eMBMSerialRTUInit+0x1e2>
            {
                usTimeoutMS = 2;
 8007e30:	2314      	movs	r3, #20
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	2202      	movs	r2, #2
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	e00a      	b.n	8007e50 <eMBMSerialRTUInit+0x1f8>
            {
                /* The number of ticks required for a character is given by 
                 * xTicksCh = TIMER_TICKS_PER_SECOND * 11 / BAUDRATE
                 * The total timeout is given by xTicksCh * 3.5 = xTicksCh * 7/2.
                 */
                usTimeoutMS = ( USHORT ) ( ( 1000UL * 11UL * 7UL ) / ( 2 * ulBaudRate ) );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	0019      	movs	r1, r3
 8007e40:	483a      	ldr	r0, [pc, #232]	; (8007f2c <eMBMSerialRTUInit+0x2d4>)
 8007e42:	f7f8 f961 	bl	8000108 <__udivsi3>
 8007e46:	0003      	movs	r3, r0
 8007e48:	001a      	movs	r2, r3
 8007e4a:	2314      	movs	r3, #20
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	801a      	strh	r2, [r3, #0]

#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            usTimeoutMSWaitAfterSend = MBM_SERIAL_RTU_DYNAMIC_WAITAFTERSEND_TIMEOUT_MS( ulBaudRate );
#endif

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ucPort, ulBaudRate, 8, eParity, ucStopBits, pxIntHdl
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	3311      	adds	r3, #17
 8007e54:	33ff      	adds	r3, #255	; 0xff
 8007e56:	0018      	movs	r0, r3
 8007e58:	2513      	movs	r5, #19
 8007e5a:	197c      	adds	r4, r7, r5
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	230b      	movs	r3, #11
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	7819      	ldrb	r1, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	2330      	movs	r3, #48	; 0x30
 8007e6a:	2608      	movs	r6, #8
 8007e6c:	199b      	adds	r3, r3, r6
 8007e6e:	19db      	adds	r3, r3, r7
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	230a      	movs	r3, #10
 8007e76:	18fb      	adds	r3, r7, r3
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f000 fdaf 	bl	80089e0 <eMBPSerialInit>
 8007e82:	0003      	movs	r3, r0
 8007e84:	7023      	strb	r3, [r4, #0]
 8007e86:	197b      	adds	r3, r7, r5
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <eMBMSerialRTUInit+0x242>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 1
                , bMBMSerialRTUT35CB, MB_RTU
#endif                
                ) ) )
            {
                eStatus = eStatus2;
 8007e8e:	231f      	movs	r3, #31
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	197a      	adds	r2, r7, r5
 8007e94:	7812      	ldrb	r2, [r2, #0]
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e02d      	b.n	8007ef6 <eMBMSerialRTUInit+0x29e>
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBMSerialRTUT35CB, pxIntHdl ) ) )
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	330d      	adds	r3, #13
 8007e9e:	33ff      	adds	r3, #255	; 0xff
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	2613      	movs	r6, #19
 8007ea4:	19bc      	adds	r4, r7, r6
 8007ea6:	68fd      	ldr	r5, [r7, #12]
 8007ea8:	4a21      	ldr	r2, [pc, #132]	; (8007f30 <eMBMSerialRTUInit+0x2d8>)
 8007eaa:	2314      	movs	r3, #20
 8007eac:	18fb      	adds	r3, r7, r3
 8007eae:	8819      	ldrh	r1, [r3, #0]
 8007eb0:	002b      	movs	r3, r5
 8007eb2:	f001 f881 	bl	8008fb8 <eMBPTimerInit>
 8007eb6:	0003      	movs	r3, r0
 8007eb8:	7023      	strb	r3, [r4, #0]
 8007eba:	19bb      	adds	r3, r7, r6
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <eMBMSerialRTUInit+0x276>
            {
                eStatus = eStatus2;
 8007ec2:	231f      	movs	r3, #31
 8007ec4:	18fb      	adds	r3, r7, r3
 8007ec6:	19ba      	adds	r2, r7, r6
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e013      	b.n	8007ef6 <eMBMSerialRTUInit+0x29e>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_PDU_OFF];
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	1c9a      	adds	r2, r3, #2
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	611a      	str	r2, [r3, #16]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	609a      	str	r2, [r3, #8]
                pxIntHdl->pFrameSendFN = eMBMSerialRTUFrameSend;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a15      	ldr	r2, [pc, #84]	; (8007f34 <eMBMSerialRTUInit+0x2dc>)
 8007ee0:	615a      	str	r2, [r3, #20]
                pxIntHdl->pFrameRecvFN = eMBMSerialRTUFrameReceive;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4a14      	ldr	r2, [pc, #80]	; (8007f38 <eMBMSerialRTUInit+0x2e0>)
 8007ee6:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameCloseFN = eMBMSerialRTUFrameClose;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <eMBMSerialRTUInit+0x2e4>)
 8007eec:	61da      	str	r2, [r3, #28]
#if MBM_TIMEOUT_MODE_AFTER_TRANSMIT == 1
                pxIntHdl->pFrameIsTransmittingFN = eMBMSerialRTUFrameIsTransmitting;
#endif
                eStatus = MB_ENOERR;
 8007eee:	231f      	movs	r3, #31
 8007ef0:	18fb      	adds	r3, r7, r3
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]
                             "[IDX=" MBP_FORMAT_USHORT "] Creation of new RTU instance (port=" MBP_FORMAT_USHORT
                             ", baudrate=" MBP_FORMAT_ULONG ", parity=" MBP_FORMAT_USHORT "): %s.\n",
                             ( USHORT ) pxFrameHdl->ubIdx, ( USHORT ) ucPort, ulBaudRate, ( USHORT ) eParity, eStatus == MB_ENOERR ? "okay" : "failed" );
            }
#endif
            if( MB_ENOERR != eStatus )
 8007ef6:	231f      	movs	r3, #31
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <eMBMSerialRTUInit+0x2ba>
            {
                ( void )eMBMSerialRTUFrameCloseInternal( pxFrameHdl );
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	0018      	movs	r0, r3
 8007f04:	f000 f9d1 	bl	80082aa <eMBMSerialRTUFrameCloseInternal>
 8007f08:	e003      	b.n	8007f12 <eMBMSerialRTUInit+0x2ba>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 8007f0a:	231f      	movs	r3, #31
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	2204      	movs	r2, #4
 8007f10:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 8007f12:	f000 fd5d 	bl	80089d0 <vMBPExitCritical>
        eStatus = MB_EINVAL;
    }
#endif


    return eStatus;
 8007f16:	231f      	movs	r3, #31
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	781b      	ldrb	r3, [r3, #0]
}
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	b009      	add	sp, #36	; 0x24
 8007f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f24:	200046b0 	.word	0x200046b0
 8007f28:	200046b4 	.word	0x200046b4
 8007f2c:	00012cc8 	.word	0x00012cc8
 8007f30:	080086c9 	.word	0x080086c9
 8007f34:	08007f41 	.word	0x08007f41
 8007f38:	080080f1 	.word	0x080080f1
 8007f3c:	08008279 	.word	0x08008279

08007f40 <eMBMSerialRTUFrameSend>:
    return bIsTransmitting;
}

STATIC          eMBErrorCode
eMBMSerialRTUFrameSend( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT usMBPDULength )
{
 8007f40:	b5b0      	push	{r4, r5, r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	0008      	movs	r0, r1
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	1cfb      	adds	r3, r7, #3
 8007f4e:	1c02      	adds	r2, r0, #0
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	003b      	movs	r3, r7
 8007f54:	1c0a      	adds	r2, r1, #0
 8007f56:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8007f58:	2317      	movs	r3, #23
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	701a      	strb	r2, [r3, #0]
    USHORT          usCRC16;
    xMBMInternalHandle *pxIntHdl = xHdl;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	613b      	str	r3, [r7, #16]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	60fb      	str	r3, [r7, #12]
            vMBPPortLog( MB_LOG_DEBUG, MB_LOG_RTU,
                         "[IDX=" MBP_FORMAT_USHORT "] Sending new frame for slave=" MBP_FORMAT_USHORT " with length="
                         MBP_FORMAT_USHORT ".\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) ucSlaveAddress, usMBPDULength );
        }
#endif
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) &&
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d100      	bne.n	8007f72 <eMBMSerialRTUFrameSend+0x32>
 8007f70:	e0b2      	b.n	80080d8 <eMBMSerialRTUFrameSend+0x198>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	001a      	movs	r2, r3
 8007f78:	0013      	movs	r3, r2
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	189b      	adds	r3, r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	189b      	adds	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4a58      	ldr	r2, [pc, #352]	; (80080e8 <eMBMSerialRTUFrameSend+0x1a8>)
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d000      	beq.n	8007f90 <eMBMSerialRTUFrameSend+0x50>
 8007f8e:	e0a3      	b.n	80080d8 <eMBMSerialRTUFrameSend+0x198>
 8007f90:	1cfb      	adds	r3, r7, #3
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <eMBMSerialRTUFrameSend+0x6c>
            MB_IS_VALID_WRITE_ADDR( ucSlaveAddress ) && ( usMBPDULength <= ( MBM_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 2 /* CRC16 */  ) ) ) )
 8007f98:	1cfb      	adds	r3, r7, #3
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d100      	bne.n	8007fa2 <eMBMSerialRTUFrameSend+0x62>
 8007fa0:	e09a      	b.n	80080d8 <eMBMSerialRTUFrameSend+0x198>
 8007fa2:	1cfb      	adds	r3, r7, #3
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2bf7      	cmp	r3, #247	; 0xf7
 8007fa8:	d900      	bls.n	8007fac <eMBMSerialRTUFrameSend+0x6c>
 8007faa:	e095      	b.n	80080d8 <eMBMSerialRTUFrameSend+0x198>
 8007fac:	003b      	movs	r3, r7
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	2bfd      	cmp	r3, #253	; 0xfd
 8007fb2:	d900      	bls.n	8007fb6 <eMBMSerialRTUFrameSend+0x76>
 8007fb4:	e090      	b.n	80080d8 <eMBMSerialRTUFrameSend+0x198>
        {
            MBP_ENTER_CRITICAL_SECTION(  );
 8007fb6:	f000 fd04 	bl	80089c2 <vMBPEnterCritical>
                             ", pos = " MBP_FORMAT_USHORT " ), sender ( state = " MBP_FORMAT_USHORT ", cnt = "
                             MBP_FORMAT_USHORT " ).\n", ( USHORT ) pxRTUHdl->ubIdx, ( USHORT ) pxRTUHdl->eRcvState,
                             pxRTUHdl->usRcvBufferPos, ( USHORT ) pxRTUHdl->eSndState, pxRTUHdl->usSndBufferCnt );
            }
#endif
            MBP_ASSERT( MBM_STATE_TX_IDLE == pxRTUHdl->eSndState );
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	2382      	movs	r3, #130	; 0x82
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	5cd3      	ldrb	r3, [r2, r3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <eMBMSerialRTUFrameSend+0x8c>
 8007fc8:	f000 fce8 	bl	800899c <vMBPAssert>
            MBP_EXIT_CRITICAL_SECTION(  );
 8007fcc:	f000 fd00 	bl	80089d0 <vMBPExitCritical>

            /* Added the MODBUS RTU header (= slave address) */
            pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] = ( UBYTE ) ucSlaveAddress;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1cfa      	adds	r2, r7, #3
 8007fd4:	7812      	ldrb	r2, [r2, #0]
 8007fd6:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt = 1;
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	2383      	movs	r3, #131	; 0x83
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	2101      	movs	r1, #1
 8007fe0:	52d1      	strh	r1, [r2, r3]

            /* MODBUS PDU is already embedded in the frame. */
            pxRTUHdl->usSndBufferCnt += usMBPDULength;
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	2383      	movs	r3, #131	; 0x83
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	5ad3      	ldrh	r3, [r2, r3]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	003b      	movs	r3, r7
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	18d3      	adds	r3, r2, r3
 8007ff2:	b299      	uxth	r1, r3
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	2383      	movs	r3, #131	; 0x83
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	52d1      	strh	r1, [r2, r3]

            usCRC16 = usMBMCRC16( ( const UBYTE * )&pxRTUHdl->ubRTUFrameBuffer[0], pxRTUHdl->usSndBufferCnt );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	1c58      	adds	r0, r3, #1
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	2383      	movs	r3, #131	; 0x83
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	5ad3      	ldrh	r3, [r2, r3]
 8008008:	b29b      	uxth	r3, r3
 800800a:	250a      	movs	r5, #10
 800800c:	197c      	adds	r4, r7, r5
 800800e:	0019      	movs	r1, r3
 8008010:	f7ff fc92 	bl	8007938 <usMBMCRC16>
 8008014:	0003      	movs	r3, r0
 8008016:	8023      	strh	r3, [r4, #0]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 & 0xFFU );
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	2383      	movs	r3, #131	; 0x83
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	5ad3      	ldrh	r3, [r2, r3]
 8008020:	b29b      	uxth	r3, r3
 8008022:	0019      	movs	r1, r3
 8008024:	0028      	movs	r0, r5
 8008026:	183b      	adds	r3, r7, r0
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	185b      	adds	r3, r3, r1
 8008030:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	2383      	movs	r3, #131	; 0x83
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	5ad3      	ldrh	r3, [r2, r3]
 800803a:	b29b      	uxth	r3, r3
 800803c:	3301      	adds	r3, #1
 800803e:	b299      	uxth	r1, r3
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	2383      	movs	r3, #131	; 0x83
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	52d1      	strh	r1, [r2, r3]
            pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 >> 8U );
 8008048:	183b      	adds	r3, r7, r0
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	b298      	uxth	r0, r3
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	2383      	movs	r3, #131	; 0x83
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	5ad3      	ldrh	r3, [r2, r3]
 8008058:	b29b      	uxth	r3, r3
 800805a:	0019      	movs	r1, r3
 800805c:	b2c2      	uxtb	r2, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	185b      	adds	r3, r3, r1
 8008062:	705a      	strb	r2, [r3, #1]
            pxRTUHdl->usSndBufferCnt++;
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	2383      	movs	r3, #131	; 0x83
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	5ad3      	ldrh	r3, [r2, r3]
 800806c:	b29b      	uxth	r3, r3
 800806e:	3301      	adds	r3, #1
 8008070:	b299      	uxth	r1, r3
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	2383      	movs	r3, #131	; 0x83
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	52d1      	strh	r1, [r2, r3]

            /* Enable transmitter */
            MBP_ENTER_CRITICAL_SECTION(  );
 800807a:	f000 fca2 	bl	80089c2 <vMBPEnterCritical>
            pxRTUHdl->eSndState = MBM_STATE_TX_XMIT;
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	2382      	movs	r3, #130	; 0x82
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	2101      	movs	r1, #1
 8008086:	54d1      	strb	r1, [r2, r3]
            pxRTUHdl->pubSndBufferCur = ( UBYTE * ) & pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF];
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	2384      	movs	r3, #132	; 0x84
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	50d1      	str	r1, [r2, r3]
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV2CB ) ) )
            {
                HDL_RESET_TX( pxRTUHdl );
            }
#elif MBM_SERIAL_API_VERSION == 1
            if( MB_ENOERR != ( eStatus = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBMSerialRTUTransmitterEmptyAPIV1CB ) ) )
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	2388      	movs	r3, #136	; 0x88
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	58d3      	ldr	r3, [r2, r3]
 800809c:	2517      	movs	r5, #23
 800809e:	197c      	adds	r4, r7, r5
 80080a0:	4a12      	ldr	r2, [pc, #72]	; (80080ec <eMBMSerialRTUFrameSend+0x1ac>)
 80080a2:	0011      	movs	r1, r2
 80080a4:	0018      	movs	r0, r3
 80080a6:	f000 fe03 	bl	8008cb0 <eMBPSerialTxEnable>
 80080aa:	0003      	movs	r3, r0
 80080ac:	7023      	strb	r3, [r4, #0]
 80080ae:	197b      	adds	r3, r7, r5
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00e      	beq.n	80080d4 <eMBMSerialRTUFrameSend+0x194>
            {
                HDL_RESET_TX( pxRTUHdl );
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	2382      	movs	r3, #130	; 0x82
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	2100      	movs	r1, #0
 80080be:	54d1      	strb	r1, [r2, r3]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	2383      	movs	r3, #131	; 0x83
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	2100      	movs	r1, #0
 80080c8:	52d1      	strh	r1, [r2, r3]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	2384      	movs	r3, #132	; 0x84
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	2100      	movs	r1, #0
 80080d2:	50d1      	str	r1, [r2, r3]
                    vMBPGetTimeStamp( &xTimeStamp );
                    pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                }
#endif
            }
            MBP_EXIT_CRITICAL_SECTION(  );
 80080d4:	f000 fc7c 	bl	80089d0 <vMBPExitCritical>
        }
    }
    return eStatus;
 80080d8:	2317      	movs	r3, #23
 80080da:	18fb      	adds	r3, r7, r3
 80080dc:	781b      	ldrb	r3, [r3, #0]
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b006      	add	sp, #24
 80080e4:	bdb0      	pop	{r4, r5, r7, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	200046b4 	.word	0x200046b4
 80080ec:	08008535 	.word	0x08008535

080080f0 <eMBMSerialRTUFrameReceive>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameReceive( xMBHandle xHdl, UCHAR ucSlaveAddress, USHORT * pusMBPDULength )
{
 80080f0:	b5b0      	push	{r4, r5, r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	200b      	movs	r0, #11
 80080fc:	183b      	adds	r3, r7, r0
 80080fe:	1c0a      	adds	r2, r1, #0
 8008100:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8008102:	241f      	movs	r4, #31
 8008104:	193b      	adds	r3, r7, r4
 8008106:	2202      	movs	r2, #2
 8008108:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	61bb      	str	r3, [r7, #24]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) && MB_IS_VALID_READ_ADDR( ucSlaveAddress ) )
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d100      	bne.n	800811c <eMBMSerialRTUFrameReceive+0x2c>
 800811a:	e0a4      	b.n	8008266 <eMBMSerialRTUFrameReceive+0x176>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	001a      	movs	r2, r3
 8008122:	0013      	movs	r3, r2
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	189b      	adds	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	189b      	adds	r3, r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4a51      	ldr	r2, [pc, #324]	; (8008274 <eMBMSerialRTUFrameReceive+0x184>)
 8008130:	189b      	adds	r3, r3, r2
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	429a      	cmp	r2, r3
 8008136:	d000      	beq.n	800813a <eMBMSerialRTUFrameReceive+0x4a>
 8008138:	e095      	b.n	8008266 <eMBMSerialRTUFrameReceive+0x176>
 800813a:	183b      	adds	r3, r7, r0
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d100      	bne.n	8008144 <eMBMSerialRTUFrameReceive+0x54>
 8008142:	e090      	b.n	8008266 <eMBMSerialRTUFrameReceive+0x176>
 8008144:	183b      	adds	r3, r7, r0
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2bf7      	cmp	r3, #247	; 0xf7
 800814a:	d900      	bls.n	800814e <eMBMSerialRTUFrameReceive+0x5e>
 800814c:	e08b      	b.n	8008266 <eMBMSerialRTUFrameReceive+0x176>
        {

            if( NULL == pusMBPDULength )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02a      	beq.n	80081aa <eMBMSerialRTUFrameReceive+0xba>
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
            }
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	2381      	movs	r3, #129	; 0x81
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	5ad3      	ldrh	r3, [r2, r3]
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d91f      	bls.n	80081a2 <eMBMSerialRTUFrameReceive+0xb2>
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	b2db      	uxtb	r3, r3
            else if( ( pxRTUHdl->usRcvBufferPos >= MBM_SER_PDU_SIZE_MIN ) &&
 8008168:	183a      	adds	r2, r7, r0
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d118      	bne.n	80081a2 <eMBMSerialRTUFrameReceive+0xb2>
                     ( usMBMCRC16( ( UBYTE * ) & ( pxRTUHdl->ubRTUFrameBuffer[0] ), pxRTUHdl->usRcvBufferPos ) == 0 ) )
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1c58      	adds	r0, r3, #1
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	2381      	movs	r3, #129	; 0x81
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	5ad3      	ldrh	r3, [r2, r3]
 800817c:	b29b      	uxth	r3, r3
 800817e:	0019      	movs	r1, r3
 8008180:	f7ff fbda 	bl	8007938 <usMBMCRC16>
 8008184:	1e03      	subs	r3, r0, #0
                     ( ucSlaveAddress == pxRTUHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] ) &&
 8008186:	d10c      	bne.n	80081a2 <eMBMSerialRTUFrameReceive+0xb2>
            {
                *pusMBPDULength = ( USHORT ) ( pxRTUHdl->usRcvBufferPos - ( MBM_SER_PDU_PDU_OFF + MBM_SER_PDU_SIZE_CRC ) );
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	2381      	movs	r3, #129	; 0x81
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	5ad3      	ldrh	r3, [r2, r3]
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b03      	subs	r3, #3
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	801a      	strh	r2, [r3, #0]
                xAnalyzerFrame.eFrameType = MB_FRAME_RTU;
                xAnalyzerFrame.x.xRTUHeader.ubSlaveAddress = ucSlaveAddress;
                xAnalyzerFrame.x.xRTUHeader.usCRC16 = pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 1];
                xAnalyzerFrame.x.xRTUHeader.usCRC16 |= ( USHORT ) ( pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usRcvBufferPos - 2] << 8U );
#endif
                eStatus = MB_ENOERR;
 800819a:	193b      	adds	r3, r7, r4
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	e003      	b.n	80081aa <eMBMSerialRTUFrameReceive+0xba>
                pxIntHdl->xFrameStat.ulNChecksumErrors += 1;
#endif
#if MBM_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 80081a2:	231f      	movs	r3, #31
 80081a4:	18fb      	adds	r3, r7, r3
 80081a6:	2205      	movs	r2, #5
 80081a8:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            MBP_ENTER_CRITICAL_SECTION(  );
 80081aa:	f000 fc0a 	bl	80089c2 <vMBPEnterCritical>
            if( MB_ENOERR != ( eStatus2 = eMBPSerialTxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	2388      	movs	r3, #136	; 0x88
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	58d3      	ldr	r3, [r2, r3]
 80081b6:	2513      	movs	r5, #19
 80081b8:	197c      	adds	r4, r7, r5
 80081ba:	2100      	movs	r1, #0
 80081bc:	0018      	movs	r0, r3
 80081be:	f000 fd77 	bl	8008cb0 <eMBPSerialTxEnable>
 80081c2:	0003      	movs	r3, r0
 80081c4:	7023      	strb	r3, [r4, #0]
 80081c6:	002a      	movs	r2, r5
 80081c8:	18bb      	adds	r3, r7, r2
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <eMBMSerialRTUFrameReceive+0xea>
            {
                eStatus = eStatus2;
 80081d0:	231f      	movs	r3, #31
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	18ba      	adds	r2, r7, r2
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
            }
            if( MB_ENOERR != ( eStatus2 = eMBPSerialRxEnable( pxRTUHdl->xSerHdl, NULL ) ) )
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	2388      	movs	r3, #136	; 0x88
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	58d3      	ldr	r3, [r2, r3]
 80081e2:	2513      	movs	r5, #19
 80081e4:	197c      	adds	r4, r7, r5
 80081e6:	2100      	movs	r1, #0
 80081e8:	0018      	movs	r0, r3
 80081ea:	f000 fe27 	bl	8008e3c <eMBPSerialRxEnable>
 80081ee:	0003      	movs	r3, r0
 80081f0:	7023      	strb	r3, [r4, #0]
 80081f2:	002a      	movs	r2, r5
 80081f4:	18bb      	adds	r3, r7, r2
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d004      	beq.n	8008206 <eMBMSerialRTUFrameReceive+0x116>
            {
                eStatus = eStatus2;
 80081fc:	231f      	movs	r3, #31
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	18ba      	adds	r2, r7, r2
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	701a      	strb	r2, [r3, #0]
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrHdl ) ) )
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	2386      	movs	r3, #134	; 0x86
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	58d3      	ldr	r3, [r2, r3]
 800820e:	2513      	movs	r5, #19
 8008210:	197c      	adds	r4, r7, r5
 8008212:	0018      	movs	r0, r3
 8008214:	f001 f840 	bl	8009298 <eMBPTimerStop>
 8008218:	0003      	movs	r3, r0
 800821a:	7023      	strb	r3, [r4, #0]
 800821c:	002a      	movs	r2, r5
 800821e:	18bb      	adds	r3, r7, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <eMBMSerialRTUFrameReceive+0x140>
            {
                eStatus = eStatus2;
 8008226:	231f      	movs	r3, #31
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	18ba      	adds	r2, r7, r2
 800822c:	7812      	ldrb	r2, [r2, #0]
 800822e:	701a      	strb	r2, [r3, #0]
            if( MB_ENOERR != ( eStatus2 = eMBPTimerStop( pxRTUHdl->xTmrWaitHdl ) ) )
            {
                eStatus = eStatus2;
            }
#endif
            HDL_RESET_TX( pxRTUHdl );
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	2382      	movs	r3, #130	; 0x82
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	2100      	movs	r1, #0
 8008238:	54d1      	strb	r1, [r2, r3]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	2383      	movs	r3, #131	; 0x83
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	2100      	movs	r1, #0
 8008242:	52d1      	strh	r1, [r2, r3]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	2384      	movs	r3, #132	; 0x84
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	2100      	movs	r1, #0
 800824c:	50d1      	str	r1, [r2, r3]
            HDL_RESET_RX( pxRTUHdl );
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	2302      	movs	r3, #2
 8008252:	33ff      	adds	r3, #255	; 0xff
 8008254:	2100      	movs	r1, #0
 8008256:	54d1      	strb	r1, [r2, r3]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	2381      	movs	r3, #129	; 0x81
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	2100      	movs	r1, #0
 8008260:	52d1      	strh	r1, [r2, r3]
            MBP_EXIT_CRITICAL_SECTION(  );
 8008262:	f000 fbb5 	bl	80089d0 <vMBPExitCritical>
        }
    }

    return eStatus;
 8008266:	231f      	movs	r3, #31
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	781b      	ldrb	r3, [r3, #0]
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b008      	add	sp, #32
 8008272:	bdb0      	pop	{r4, r5, r7, pc}
 8008274:	200046b4 	.word	0x200046b4

08008278 <eMBMSerialRTUFrameClose>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameClose( xMBHandle xHdl )
{
 8008278:	b5b0      	push	{r4, r5, r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008280:	210f      	movs	r1, #15
 8008282:	187b      	adds	r3, r7, r1
 8008284:	2202      	movs	r2, #2
 8008286:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	60bb      	str	r3, [r7, #8]
    if( bMBMIsHdlValid( pxIntHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = eMBMSerialRTUFrameCloseInternal( ( xMBMRTUFrameHandle * ) pxIntHdl->xFrameHdl );
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	000d      	movs	r5, r1
 8008292:	187c      	adds	r4, r7, r1
 8008294:	0018      	movs	r0, r3
 8008296:	f000 f808 	bl	80082aa <eMBMSerialRTUFrameCloseInternal>
 800829a:	0003      	movs	r3, r0
 800829c:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 800829e:	197b      	adds	r3, r7, r5
 80082a0:	781b      	ldrb	r3, [r3, #0]
}
 80082a2:	0018      	movs	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	b004      	add	sp, #16
 80082a8:	bdb0      	pop	{r4, r5, r7, pc}

080082aa <eMBMSerialRTUFrameCloseInternal>:

STATIC          eMBErrorCode
eMBMSerialRTUFrameCloseInternal( xMBMRTUFrameHandle * pxRTUHdl )
{
 80082aa:	b590      	push	{r4, r7, lr}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80082b2:	240f      	movs	r4, #15
 80082b4:	193b      	adds	r3, r7, r4
 80082b6:	2202      	movs	r2, #2
 80082b8:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 80082ba:	f000 fb82 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxRTUHdl, xMBMRTUFrameHdl ) )
#else
    if( TRUE )
#endif
    {
        eStatus = MB_ENOERR;
 80082be:	193b      	adds	r3, r7, r4
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
        if( MBP_SERIALHDL_INVALID != pxRTUHdl->xSerHdl )
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	2388      	movs	r3, #136	; 0x88
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	58d3      	ldr	r3, [r2, r3]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d04c      	beq.n	800836a <eMBMSerialRTUFrameCloseInternal+0xc0>
        {
            if( MB_ENOERR != eMBPSerialClose( pxRTUHdl->xSerHdl ) )
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	2388      	movs	r3, #136	; 0x88
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	58d3      	ldr	r3, [r2, r3]
 80082d8:	0018      	movs	r0, r3
 80082da:	f000 fc95 	bl	8008c08 <eMBPSerialClose>
 80082de:	1e03      	subs	r3, r0, #0
 80082e0:	d003      	beq.n	80082ea <eMBMSerialRTUFrameCloseInternal+0x40>
            {
                eStatus = MB_EPORTERR;
 80082e2:	193b      	adds	r3, r7, r4
 80082e4:	2203      	movs	r2, #3
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e079      	b.n	80083de <eMBMSerialRTUFrameCloseInternal+0x134>
            }
            else
            {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrHdl )
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	2386      	movs	r3, #134	; 0x86
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	58d3      	ldr	r3, [r2, r3]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d006      	beq.n	8008304 <eMBMSerialRTUFrameCloseInternal+0x5a>
                {
                    vMBPTimerClose( pxRTUHdl->xTmrHdl );
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	2386      	movs	r3, #134	; 0x86
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	58d3      	ldr	r3, [r2, r3]
 80082fe:	0018      	movs	r0, r3
 8008300:	f000 ff32 	bl	8009168 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrWaitHdl )
                {
                    vMBPTimerClose( pxRTUHdl->xTmrWaitHdl );
                }
#endif
                HDL_RESET( pxRTUHdl );
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	22ff      	movs	r2, #255	; 0xff
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	2302      	movs	r3, #2
 800830e:	33ff      	adds	r3, #255	; 0xff
 8008310:	2100      	movs	r1, #0
 8008312:	54d1      	strb	r1, [r2, r3]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	2381      	movs	r3, #129	; 0x81
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	2100      	movs	r1, #0
 800831c:	52d1      	strh	r1, [r2, r3]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	2382      	movs	r3, #130	; 0x82
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	2100      	movs	r1, #0
 8008326:	54d1      	strb	r1, [r2, r3]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	2383      	movs	r3, #131	; 0x83
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	2100      	movs	r1, #0
 8008330:	52d1      	strh	r1, [r2, r3]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	2384      	movs	r3, #132	; 0x84
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	2100      	movs	r1, #0
 800833a:	50d1      	str	r1, [r2, r3]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	2386      	movs	r3, #134	; 0x86
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	2100      	movs	r1, #0
 8008344:	50d1      	str	r1, [r2, r3]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	2388      	movs	r3, #136	; 0x88
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	2100      	movs	r1, #0
 800834e:	50d1      	str	r1, [r2, r3]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3301      	adds	r3, #1
 8008354:	2280      	movs	r2, #128	; 0x80
 8008356:	0052      	lsls	r2, r2, #1
 8008358:	2100      	movs	r1, #0
 800835a:	0018      	movs	r0, r3
 800835c:	f001 fa22 	bl	80097a4 <memset>
                eStatus = MB_ENOERR;
 8008360:	230f      	movs	r3, #15
 8008362:	18fb      	adds	r3, r7, r3
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e039      	b.n	80083de <eMBMSerialRTUFrameCloseInternal+0x134>
            }
        }
        else
        {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrHdl );
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	2386      	movs	r3, #134	; 0x86
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	58d3      	ldr	r3, [r2, r3]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <eMBMSerialRTUFrameCloseInternal+0xd0>
 8008376:	f000 fb11 	bl	800899c <vMBPAssert>
#endif
#if MBM_RTU_WAITAFTERSEND_ENABLED == 1
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrWaitHdl );
#endif
            HDL_RESET( pxRTUHdl );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	22ff      	movs	r2, #255	; 0xff
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	2302      	movs	r3, #2
 8008384:	33ff      	adds	r3, #255	; 0xff
 8008386:	2100      	movs	r1, #0
 8008388:	54d1      	strb	r1, [r2, r3]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	2381      	movs	r3, #129	; 0x81
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	2100      	movs	r1, #0
 8008392:	52d1      	strh	r1, [r2, r3]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	2382      	movs	r3, #130	; 0x82
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	2100      	movs	r1, #0
 800839c:	54d1      	strb	r1, [r2, r3]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	2383      	movs	r3, #131	; 0x83
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	2100      	movs	r1, #0
 80083a6:	52d1      	strh	r1, [r2, r3]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	2384      	movs	r3, #132	; 0x84
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	2100      	movs	r1, #0
 80083b0:	50d1      	str	r1, [r2, r3]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	2386      	movs	r3, #134	; 0x86
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	2100      	movs	r1, #0
 80083ba:	50d1      	str	r1, [r2, r3]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	2388      	movs	r3, #136	; 0x88
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	2100      	movs	r1, #0
 80083c4:	50d1      	str	r1, [r2, r3]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3301      	adds	r3, #1
 80083ca:	2280      	movs	r2, #128	; 0x80
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	2100      	movs	r1, #0
 80083d0:	0018      	movs	r0, r3
 80083d2:	f001 f9e7 	bl	80097a4 <memset>
            eStatus = MB_ENOERR;
 80083d6:	230f      	movs	r3, #15
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80083de:	f000 faf7 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 80083e2:	230f      	movs	r3, #15
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	781b      	ldrb	r3, [r3, #0]
}
 80083e8:	0018      	movs	r0, r3
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b005      	add	sp, #20
 80083ee:	bd90      	pop	{r4, r7, pc}

080083f0 <bMBMSerialRTUReceiverAPIV1CB>:

#if MBM_SERIAL_API_VERSION == 1
STATIC void
bMBMSerialRTUReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	000a      	movs	r2, r1
 80083fa:	1cfb      	adds	r3, r7, #3
 80083fc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    xMBMInternalHandle *pxIntHdl = xHdl;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	617b      	str	r3, [r7, #20]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    ( void )eStatus;
    MBP_ENTER_CRITICAL_SECTION(  );
 8008402:	f000 fade 	bl	80089c2 <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	613b      	str	r3, [r7, #16]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	2382      	movs	r3, #130	; 0x82
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	5cd3      	ldrb	r3, [r2, r3]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <bMBMSerialRTUReceiverAPIV1CB+0x2e>
 800841a:	f000 fabf 	bl	800899c <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	2302      	movs	r3, #2
 8008422:	33ff      	adds	r3, #255	; 0xff
 8008424:	5cd3      	ldrb	r3, [r2, r3]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <bMBMSerialRTUReceiverAPIV1CB+0x42>
 800842c:	2b01      	cmp	r3, #1
 800842e:	d021      	beq.n	8008474 <bMBMSerialRTUReceiverAPIV1CB+0x84>
 8008430:	e044      	b.n	80084bc <bMBMSerialRTUReceiverAPIV1CB+0xcc>
    {
    case MBM_STATE_RX_IDLE:
#if defined(__18CXX)
        pxRTUFrameHdl->usRcvBufferPos &= 0;
#else
        pxRTUFrameHdl->usRcvBufferPos = 0;
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	2381      	movs	r3, #129	; 0x81
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	2100      	movs	r1, #0
 800843a:	52d1      	strh	r1, [r2, r3]
#endif
        pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	2381      	movs	r3, #129	; 0x81
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	5ad3      	ldrh	r3, [r2, r3]
 8008444:	b29b      	uxth	r3, r3
 8008446:	001a      	movs	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	189b      	adds	r3, r3, r2
 800844c:	1cfa      	adds	r2, r7, #3
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	705a      	strb	r2, [r3, #1]
        pxRTUFrameHdl->usRcvBufferPos++;
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	2381      	movs	r3, #129	; 0x81
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	5ad3      	ldrh	r3, [r2, r3]
 800845a:	b29b      	uxth	r3, r3
 800845c:	3301      	adds	r3, #1
 800845e:	b299      	uxth	r1, r3
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	2381      	movs	r3, #129	; 0x81
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	52d1      	strh	r1, [r2, r3]
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_RCV;
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	2302      	movs	r3, #2
 800846c:	33ff      	adds	r3, #255	; 0xff
 800846e:	2101      	movs	r1, #1
 8008470:	54d1      	strb	r1, [r2, r3]

        break;
 8008472:	e029      	b.n	80084c8 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    case MBM_STATE_RX_RCV:
        if( pxRTUFrameHdl->usRcvBufferPos < MBM_SER_PDU_SIZE_MAX )
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	2381      	movs	r3, #129	; 0x81
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	5ad3      	ldrh	r3, [r2, r3]
 800847c:	b29b      	uxth	r3, r3
 800847e:	2bff      	cmp	r3, #255	; 0xff
 8008480:	d816      	bhi.n	80084b0 <bMBMSerialRTUReceiverAPIV1CB+0xc0>
        {
            pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	2381      	movs	r3, #129	; 0x81
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	5ad3      	ldrh	r3, [r2, r3]
 800848a:	b29b      	uxth	r3, r3
 800848c:	001a      	movs	r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	189b      	adds	r3, r3, r2
 8008492:	1cfa      	adds	r2, r7, #3
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	705a      	strb	r2, [r3, #1]
            pxRTUFrameHdl->usRcvBufferPos++;
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	2381      	movs	r3, #129	; 0x81
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	5ad3      	ldrh	r3, [r2, r3]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3301      	adds	r3, #1
 80084a4:	b299      	uxth	r1, r3
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	2381      	movs	r3, #129	; 0x81
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	52d1      	strh	r1, [r2, r3]
        }
        else
        {
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
        }
        break;
 80084ae:	e00b      	b.n	80084c8 <bMBMSerialRTUReceiverAPIV1CB+0xd8>
            pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	2302      	movs	r3, #2
 80084b4:	33ff      	adds	r3, #255	; 0xff
 80084b6:	2102      	movs	r1, #2
 80084b8:	54d1      	strb	r1, [r2, r3]
        break;
 80084ba:	e005      	b.n	80084c8 <bMBMSerialRTUReceiverAPIV1CB+0xd8>

    default:
    case MBM_STATE_RX_ERROR:
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	2302      	movs	r3, #2
 80084c0:	33ff      	adds	r3, #255	; 0xff
 80084c2:	2102      	movs	r1, #2
 80084c4:	54d1      	strb	r1, [r2, r3]
        break;
 80084c6:	46c0      	nop			; (mov r8, r8)
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif

#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
#if MBM_TEST_DISABLE_RTU_TIMEOUTS != 1
    if( MB_ENOERR != eMBPTimerStart( pxRTUFrameHdl->xTmrHdl ) )
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	2386      	movs	r3, #134	; 0x86
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	58d3      	ldr	r3, [r2, r3]
 80084d0:	0018      	movs	r0, r3
 80084d2:	f000 fea9 	bl	8009228 <eMBPTimerStart>
 80084d6:	1e03      	subs	r3, r0, #0
 80084d8:	d026      	beq.n	8008528 <bMBMSerialRTUReceiverAPIV1CB+0x138>
    {
        /* We can only abort here because or timers failed. */
        eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	2388      	movs	r3, #136	; 0x88
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	58d3      	ldr	r3, [r2, r3]
 80084e2:	250f      	movs	r5, #15
 80084e4:	197c      	adds	r4, r7, r5
 80084e6:	2100      	movs	r1, #0
 80084e8:	0018      	movs	r0, r3
 80084ea:	f000 fca7 	bl	8008e3c <eMBPSerialRxEnable>
 80084ee:	0003      	movs	r3, r0
 80084f0:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 80084f2:	197b      	adds	r3, r7, r5
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <bMBMSerialRTUReceiverAPIV1CB+0x10e>
 80084fa:	f000 fa4f 	bl	800899c <vMBPAssert>
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	250f      	movs	r5, #15
 8008504:	197c      	adds	r4, r7, r5
 8008506:	2104      	movs	r1, #4
 8008508:	0018      	movs	r0, r3
 800850a:	f000 f9c7 	bl	800889c <eMBPEventPost>
 800850e:	0003      	movs	r3, r0
 8008510:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8008512:	197b      	adds	r3, r7, r5
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <bMBMSerialRTUReceiverAPIV1CB+0x12e>
 800851a:	f000 fa3f 	bl	800899c <vMBPAssert>
        pxRTUFrameHdl->eRcvState = MBM_STATE_RX_ERROR;
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	2302      	movs	r3, #2
 8008522:	33ff      	adds	r3, #255	; 0xff
 8008524:	2102      	movs	r1, #2
 8008526:	54d1      	strb	r1, [r2, r3]
    }
#endif
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 8008528:	f000 fa52 	bl	80089d0 <vMBPExitCritical>
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b006      	add	sp, #24
 8008532:	bdb0      	pop	{r4, r5, r7, pc}

08008534 <bMBMSerialRTUTransmitterEmptyAPIV1CB>:


STATIC          BOOL
bMBMSerialRTUTransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
{
 8008534:	b5b0      	push	{r4, r5, r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus;
    BOOL            bMoreTXData = FALSE;
 800853e:	2317      	movs	r3, #23
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 8008546:	2316      	movs	r3, #22
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 8008552:	f000 fa36 	bl	80089c2 <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eRcvState == MBM_STATE_RX_IDLE );
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	2302      	movs	r3, #2
 8008560:	33ff      	adds	r3, #255	; 0xff
 8008562:	5cd3      	ldrb	r3, [r2, r3]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x3a>
 800856a:	f000 fa17 	bl	800899c <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_XMIT );
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	2382      	movs	r3, #130	; 0x82
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	5cd3      	ldrb	r3, [r2, r3]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d001      	beq.n	8008580 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x4c>
 800857c:	f000 fa0e 	bl	800899c <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->pubSndBufferCur != NULL );
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	2384      	movs	r3, #132	; 0x84
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	58d3      	ldr	r3, [r2, r3]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x5c>
 800858c:	f000 fa06 	bl	800899c <vMBPAssert>

    switch ( pxRTUFrameHdl->eSndState )
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	2382      	movs	r3, #130	; 0x82
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	5cd3      	ldrb	r3, [r2, r3]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b01      	cmp	r3, #1
 800859c:	d141      	bne.n	8008622 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xee>
         * to a broadcast we are done. This is handled by delivering an
         * MBM_EV_SENT event to the main state machine. Otherwise we enable
         * the receiver or abort using an error.
         */
    case MBM_STATE_TX_XMIT:
        if( pxRTUFrameHdl->usSndBufferCnt > 0 )
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	2383      	movs	r3, #131	; 0x83
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	5ad3      	ldrh	r3, [r2, r3]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01f      	beq.n	80085ec <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xb8>
        {
            *pubValue = *( pxRTUFrameHdl->pubSndBufferCur );
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	2384      	movs	r3, #132	; 0x84
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	58d3      	ldr	r3, [r2, r3]
 80085b4:	781a      	ldrb	r2, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	701a      	strb	r2, [r3, #0]
            pxRTUFrameHdl->pubSndBufferCur++;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	2384      	movs	r3, #132	; 0x84
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	58d3      	ldr	r3, [r2, r3]
 80085c2:	1c59      	adds	r1, r3, #1
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	2384      	movs	r3, #132	; 0x84
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	50d1      	str	r1, [r2, r3]
            pxRTUFrameHdl->usSndBufferCnt--;
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	2383      	movs	r3, #131	; 0x83
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	5ad3      	ldrh	r3, [r2, r3]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b299      	uxth	r1, r3
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	2383      	movs	r3, #131	; 0x83
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	52d1      	strh	r1, [r2, r3]
            bMoreTXData = TRUE;
 80085e2:	2317      	movs	r3, #23
 80085e4:	18fb      	adds	r3, r7, r3
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
            else
            {
                bEnableRx = TRUE;
            }
        }
        break;
 80085ea:	e02b      	b.n	8008644 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
            if( MB_SER_BROADCAST_ADDR == pxRTUFrameHdl->ubRTUFrameBuffer[MBM_SER_PDU_ADDR_OFF] )
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d110      	bne.n	8008618 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0xe4>
                eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SENT );
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	250b      	movs	r5, #11
 80085fc:	197c      	adds	r4, r7, r5
 80085fe:	2105      	movs	r1, #5
 8008600:	0018      	movs	r0, r3
 8008602:	f000 f94b 	bl	800889c <eMBPEventPost>
 8008606:	0003      	movs	r3, r0
 8008608:	7023      	strb	r3, [r4, #0]
                MBP_ASSERT( MB_ENOERR == eStatus );
 800860a:	197b      	adds	r3, r7, r5
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d018      	beq.n	8008644 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
 8008612:	f000 f9c3 	bl	800899c <vMBPAssert>
        break;
 8008616:	e015      	b.n	8008644 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>
                bEnableRx = TRUE;
 8008618:	2316      	movs	r3, #22
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
        break;
 8008620:	e010      	b.n	8008644 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x110>

        /* Default case which aborts the transmitter. */
    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	250b      	movs	r5, #11
 8008628:	197c      	adds	r4, r7, r5
 800862a:	2106      	movs	r1, #6
 800862c:	0018      	movs	r0, r3
 800862e:	f000 f935 	bl	800889c <eMBPEventPost>
 8008632:	0003      	movs	r3, r0
 8008634:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 8008636:	197b      	adds	r3, r7, r5
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
 800863e:	f000 f9ad 	bl	800899c <vMBPAssert>
        break;
 8008642:	e001      	b.n	8008648 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x114>
        break;
 8008644:	46c0      	nop			; (mov r8, r8)
 8008646:	e000      	b.n	800864a <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x116>
        break;
 8008648:	46c0      	nop			; (mov r8, r8)
    }
    if( !bMoreTXData )
 800864a:	2317      	movs	r3, #23
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10e      	bne.n	8008672 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x13e>
    {
        HDL_RESET_TX( pxRTUFrameHdl );
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	2382      	movs	r3, #130	; 0x82
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	2100      	movs	r1, #0
 800865c:	54d1      	strb	r1, [r2, r3]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	2383      	movs	r3, #131	; 0x83
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	2100      	movs	r1, #0
 8008666:	52d1      	strh	r1, [r2, r3]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	2384      	movs	r3, #132	; 0x84
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	2100      	movs	r1, #0
 8008670:	50d1      	str	r1, [r2, r3]
    {
#if MBM_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 8008672:	2316      	movs	r3, #22
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01a      	beq.n	80086b2 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else
        if( MB_ENOERR != eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) bMBMSerialRTUReceiverAPIV1CB ) )
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	2388      	movs	r3, #136	; 0x88
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	58d3      	ldr	r3, [r2, r3]
 8008684:	4a0f      	ldr	r2, [pc, #60]	; (80086c4 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x190>)
 8008686:	0011      	movs	r1, r2
 8008688:	0018      	movs	r0, r3
 800868a:	f000 fbd7 	bl	8008e3c <eMBPSerialRxEnable>
 800868e:	1e03      	subs	r3, r0, #0
 8008690:	d00f      	beq.n	80086b2 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_SEND_ERROR );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	250b      	movs	r5, #11
 8008698:	197c      	adds	r4, r7, r5
 800869a:	2106      	movs	r1, #6
 800869c:	0018      	movs	r0, r3
 800869e:	f000 f8fd 	bl	800889c <eMBPEventPost>
 80086a2:	0003      	movs	r3, r0
 80086a4:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80086a6:	197b      	adds	r3, r7, r5
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <bMBMSerialRTUTransmitterEmptyAPIV1CB+0x17e>
 80086ae:	f000 f975 	bl	800899c <vMBPAssert>
        }
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80086b2:	f000 f98d 	bl	80089d0 <vMBPExitCritical>
    return bMoreTXData;
 80086b6:	2317      	movs	r3, #23
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	781b      	ldrb	r3, [r3, #0]
}
 80086bc:	0018      	movs	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	b006      	add	sp, #24
 80086c2:	bdb0      	pop	{r4, r5, r7, pc}
 80086c4:	080083f1 	.word	0x080083f1

080086c8 <bMBMSerialRTUT35CB>:
#if MBM_TEST_INSTANCES == 0
STATIC
#endif
    BOOL
bMBMSerialRTUT35CB( xMBHandle xHdl )
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus;
    BOOL            bNeedCtxSwitch = TRUE;
 80086d0:	2317      	movs	r3, #23
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
    xMBMInternalHandle *pxIntHdl = xHdl;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	613b      	str	r3, [r7, #16]
    xMBMRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 80086dc:	f000 f971 	bl	80089c2 <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == MBM_STATE_TX_IDLE );
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	2382      	movs	r3, #130	; 0x82
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	5cd3      	ldrb	r3, [r2, r3]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <bMBMSerialRTUT35CB+0x30>
 80086f4:	f000 f952 	bl	800899c <vMBPAssert>

    switch ( pxRTUFrameHdl->eRcvState )
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	2302      	movs	r3, #2
 80086fc:	33ff      	adds	r3, #255	; 0xff
 80086fe:	5cd3      	ldrb	r3, [r2, r3]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b01      	cmp	r3, #1
 8008704:	d110      	bne.n	8008728 <bMBMSerialRTUT35CB+0x60>
    {
    case MBM_STATE_RX_RCV:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECEIVED );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	250b      	movs	r5, #11
 800870c:	197c      	adds	r4, r7, r5
 800870e:	2103      	movs	r1, #3
 8008710:	0018      	movs	r0, r3
 8008712:	f000 f8c3 	bl	800889c <eMBPEventPost>
 8008716:	0003      	movs	r3, r0
 8008718:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800871a:	197b      	adds	r3, r7, r5
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d013      	beq.n	800874a <bMBMSerialRTUT35CB+0x82>
 8008722:	f000 f93b 	bl	800899c <vMBPAssert>
        break;
 8008726:	e010      	b.n	800874a <bMBMSerialRTUT35CB+0x82>

    default:
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBM_EV_RECV_ERROR );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	250b      	movs	r5, #11
 800872e:	197c      	adds	r4, r7, r5
 8008730:	2104      	movs	r1, #4
 8008732:	0018      	movs	r0, r3
 8008734:	f000 f8b2 	bl	800889c <eMBPEventPost>
 8008738:	0003      	movs	r3, r0
 800873a:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800873c:	197b      	adds	r3, r7, r5
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <bMBMSerialRTUT35CB+0x84>
 8008744:	f000 f92a 	bl	800899c <vMBPAssert>
 8008748:	e000      	b.n	800874c <bMBMSerialRTUT35CB+0x84>
        break;
 800874a:	46c0      	nop			; (mov r8, r8)
    }
    pxRTUFrameHdl->eRcvState = MBM_STATE_RX_IDLE;
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	2302      	movs	r3, #2
 8008750:	33ff      	adds	r3, #255	; 0xff
 8008752:	2100      	movs	r1, #0
 8008754:	54d1      	strb	r1, [r2, r3]
    /* Disable the receive and the timers after a timeout. */
    eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	2388      	movs	r3, #136	; 0x88
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	58d3      	ldr	r3, [r2, r3]
 800875e:	250b      	movs	r5, #11
 8008760:	197c      	adds	r4, r7, r5
 8008762:	2100      	movs	r1, #0
 8008764:	0018      	movs	r0, r3
 8008766:	f000 fb69 	bl	8008e3c <eMBPSerialRxEnable>
 800876a:	0003      	movs	r3, r0
 800876c:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 800876e:	197b      	adds	r3, r7, r5
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <bMBMSerialRTUT35CB+0xb2>
 8008776:	f000 f911 	bl	800899c <vMBPAssert>
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
    eStatus = eMBPTimerStop( pxRTUFrameHdl->xTmrHdl );
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	2386      	movs	r3, #134	; 0x86
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	58d3      	ldr	r3, [r2, r3]
 8008782:	250b      	movs	r5, #11
 8008784:	197c      	adds	r4, r7, r5
 8008786:	0018      	movs	r0, r3
 8008788:	f000 fd86 	bl	8009298 <eMBPTimerStop>
 800878c:	0003      	movs	r3, r0
 800878e:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 8008790:	197b      	adds	r3, r7, r5
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <bMBMSerialRTUT35CB+0xd4>
 8008798:	f000 f900 	bl	800899c <vMBPAssert>
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 800879c:	f000 f918 	bl	80089d0 <vMBPExitCritical>
    return bNeedCtxSwitch;
 80087a0:	2317      	movs	r3, #23
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	781b      	ldrb	r3, [r3, #0]
}
 80087a6:	0018      	movs	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b006      	add	sp, #24
 80087ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087b0 <eMBPEventCreate>:
/* ----------------------- Start implementation -----------------------------*/


eMBErrorCode
eMBPEventCreate( xMBPEventHandle * pxEventHdl )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80087b8:	230f      	movs	r3, #15
 80087ba:	18fb      	adds	r3, r7, r3
 80087bc:	2202      	movs	r2, #2
 80087be:	701a      	strb	r2, [r3, #0]
    UBYTE           i;

    if( NULL != pxEventHdl )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d05e      	beq.n	8008884 <eMBPEventCreate+0xd4>
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 80087c6:	f000 f8fc 	bl	80089c2 <vMBPEnterCritical>
        if( !bIsInitialized )
 80087ca:	4b32      	ldr	r3, [pc, #200]	; (8008894 <eMBPEventCreate+0xe4>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d121      	bne.n	8008816 <eMBPEventCreate+0x66>
        {
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 80087d2:	230e      	movs	r3, #14
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e014      	b.n	8008806 <eMBPEventCreate+0x56>
            {
                HDL_RESET( &arxEventHdls[i] );
 80087dc:	200e      	movs	r0, #14
 80087de:	183b      	adds	r3, r7, r0
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <eMBPEventCreate+0xe8>)
 80087e4:	0052      	lsls	r2, r2, #1
 80087e6:	21ff      	movs	r1, #255	; 0xff
 80087e8:	54d1      	strb	r1, [r2, r3]
 80087ea:	0001      	movs	r1, r0
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4a29      	ldr	r2, [pc, #164]	; (8008898 <eMBPEventCreate+0xe8>)
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	18d3      	adds	r3, r2, r3
 80087f6:	3301      	adds	r3, #1
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	187b      	adds	r3, r7, r1
 8008802:	3201      	adds	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	230e      	movs	r3, #14
 8008808:	18fb      	adds	r3, r7, r3
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d9e5      	bls.n	80087dc <eMBPEventCreate+0x2c>
            }
            bIsInitialized = TRUE;
 8008810:	4b20      	ldr	r3, [pc, #128]	; (8008894 <eMBPEventCreate+0xe4>)
 8008812:	2201      	movs	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
        }
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 8008816:	230e      	movs	r3, #14
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e02a      	b.n	8008876 <eMBPEventCreate+0xc6>
        {
            if( IDX_INVALID == arxEventHdls[i].ubIdx )
 8008820:	210e      	movs	r1, #14
 8008822:	187b      	adds	r3, r7, r1
 8008824:	781a      	ldrb	r2, [r3, #0]
 8008826:	4b1c      	ldr	r3, [pc, #112]	; (8008898 <eMBPEventCreate+0xe8>)
 8008828:	0052      	lsls	r2, r2, #1
 800882a:	5cd3      	ldrb	r3, [r2, r3]
 800882c:	2bff      	cmp	r3, #255	; 0xff
 800882e:	d11c      	bne.n	800886a <eMBPEventCreate+0xba>
            {
                arxEventHdls[i].ubIdx = i;
 8008830:	187b      	adds	r3, r7, r1
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	4b18      	ldr	r3, [pc, #96]	; (8008898 <eMBPEventCreate+0xe8>)
 8008836:	0052      	lsls	r2, r2, #1
 8008838:	0008      	movs	r0, r1
 800883a:	1879      	adds	r1, r7, r1
 800883c:	7809      	ldrb	r1, [r1, #0]
 800883e:	54d1      	strb	r1, [r2, r3]
                arxEventHdls[i].xType = EV_NONE;
 8008840:	0001      	movs	r1, r0
 8008842:	187b      	adds	r3, r7, r1
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <eMBPEventCreate+0xe8>)
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	18d3      	adds	r3, r2, r3
 800884c:	3301      	adds	r3, #1
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
                *pxEventHdl = &arxEventHdls[i];
 8008852:	187b      	adds	r3, r7, r1
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	005a      	lsls	r2, r3, #1
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <eMBPEventCreate+0xe8>)
 800885a:	18d2      	adds	r2, r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	601a      	str	r2, [r3, #0]
                eStatus = MB_ENOERR;
 8008860:	230f      	movs	r3, #15
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
                break;
 8008868:	e00a      	b.n	8008880 <eMBPEventCreate+0xd0>
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800886a:	210e      	movs	r1, #14
 800886c:	187b      	adds	r3, r7, r1
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	187b      	adds	r3, r7, r1
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	230e      	movs	r3, #14
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d9cf      	bls.n	8008820 <eMBPEventCreate+0x70>
            }
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 8008880:	f000 f8a6 	bl	80089d0 <vMBPExitCritical>
    }
    return eStatus;
 8008884:	230f      	movs	r3, #15
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	781b      	ldrb	r3, [r3, #0]
}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b004      	add	sp, #16
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	200048dc 	.word	0x200048dc
 8008898:	200048e0 	.word	0x200048e0

0800889c <eMBPEventPost>:

eMBErrorCode
eMBPEventPost( const xMBPEventHandle xEventHdl, xMBPEventType xEvent )
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	000a      	movs	r2, r1
 80088a6:	1cfb      	adds	r3, r7, #3
 80088a8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 80088aa:	240f      	movs	r4, #15
 80088ac:	193b      	adds	r3, r7, r4
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 80088b6:	f000 f884 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00e      	beq.n	80088de <eMBPEventPost+0x42>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	005a      	lsls	r2, r3, #1
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <eMBPEventPost+0x54>)
 80088c8:	18d3      	adds	r3, r2, r3
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d106      	bne.n	80088de <eMBPEventPost+0x42>
    {
        pxEventHdl->xType = xEvent;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	1cfa      	adds	r2, r7, #3
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	705a      	strb	r2, [r3, #1]
        eStatus = MB_ENOERR;
 80088d8:	193b      	adds	r3, r7, r4
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80088de:	f000 f877 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 80088e2:	230f      	movs	r3, #15
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	781b      	ldrb	r3, [r3, #0]
}
 80088e8:	0018      	movs	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b005      	add	sp, #20
 80088ee:	bd90      	pop	{r4, r7, pc}
 80088f0:	200048e0 	.word	0x200048e0

080088f4 <bMBPEventGet>:

BOOL
bMBPEventGet( const xMBPEventHandle xEventHdl, xMBPEventType * pxEvent )
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
    BOOL            bEventInQueue = FALSE;
 80088fe:	240f      	movs	r4, #15
 8008900:	193b      	adds	r3, r7, r4
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800890a:	f000 f85a 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d015      	beq.n	8008940 <bMBPEventGet+0x4c>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	005a      	lsls	r2, r3, #1
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <bMBPEventGet+0x60>)
 800891c:	18d3      	adds	r3, r2, r3
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d10d      	bne.n	8008940 <bMBPEventGet+0x4c>
    {
        if( EV_NONE != pxEventHdl->xType )
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <bMBPEventGet+0x4c>
        {
            bEventInQueue = TRUE;
 800892c:	193b      	adds	r3, r7, r4
 800892e:	2201      	movs	r2, #1
 8008930:	701a      	strb	r2, [r3, #0]
            *pxEvent = pxEventHdl->xType;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	785a      	ldrb	r2, [r3, #1]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	701a      	strb	r2, [r3, #0]
            pxEventHdl->xType = EV_NONE;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2200      	movs	r2, #0
 800893e:	705a      	strb	r2, [r3, #1]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008940:	f000 f846 	bl	80089d0 <vMBPExitCritical>
    return bEventInQueue;
 8008944:	230f      	movs	r3, #15
 8008946:	18fb      	adds	r3, r7, r3
 8008948:	781b      	ldrb	r3, [r3, #0]
}
 800894a:	0018      	movs	r0, r3
 800894c:	46bd      	mov	sp, r7
 800894e:	b005      	add	sp, #20
 8008950:	bd90      	pop	{r4, r7, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	200048e0 	.word	0x200048e0

08008958 <vMBPEventDelete>:

void
vMBPEventDelete( xMBPEventHandle xEventHdl )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
    xEventInternalHandle *pxEventIntHdl = xEventHdl;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008964:	f000 f82d 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventIntHdl, arxEventHdls ) )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00d      	beq.n	800898a <vMBPEventDelete+0x32>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	005a      	lsls	r2, r3, #1
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <vMBPEventDelete+0x40>)
 8008976:	18d3      	adds	r3, r2, r3
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	429a      	cmp	r2, r3
 800897c:	d105      	bne.n	800898a <vMBPEventDelete+0x32>
    {
        HDL_RESET( pxEventIntHdl );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	22ff      	movs	r2, #255	; 0xff
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	705a      	strb	r2, [r3, #1]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800898a:	f000 f821 	bl	80089d0 <vMBPExitCritical>
}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	46bd      	mov	sp, r7
 8008992:	b004      	add	sp, #16
 8008994:	bd80      	pop	{r7, pc}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	200048e0 	.word	0x200048e0

0800899c <vMBPAssert>:
    vMBPAssert(  );
}

void
vMBPAssert( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
    volatile BOOL   bBreakOut = FALSE;
 80089a2:	1dfb      	adds	r3, r7, #7
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]

    vMBPEnterCritical(  );
 80089a8:	f000 f80b 	bl	80089c2 <vMBPEnterCritical>
    while( !bBreakOut );
 80089ac:	46c0      	nop			; (mov r8, r8)
 80089ae:	1dfb      	adds	r3, r7, #7
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0fa      	beq.n	80089ae <vMBPAssert+0x12>
}
 80089b8:	46c0      	nop			; (mov r8, r8)
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	46bd      	mov	sp, r7
 80089be:	b002      	add	sp, #8
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <vMBPEnterCritical>:

void
vMBPEnterCritical( void )
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	af00      	add	r7, sp, #0
	portENTER_CRITICAL(  );
 80089c6:	f7fd fb7b 	bl	80060c0 <vPortEnterCritical>
	
}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <vMBPExitCritical>:

void
vMBPExitCritical( void )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
	portEXIT_CRITICAL(  );
 80089d4:	f7fd fb86 	bl	80060e4 <vPortExitCritical>
 
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <eMBPSerialInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPSerialInit( xMBPSerialHandle * pxSerialHdl, UCHAR ucPort, ULONG ulBaudRate,
                UCHAR ucDataBits, eMBSerialParity eParity, UCHAR ucStopBits, xMBHandle xMBMHdl)
{
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b08b      	sub	sp, #44	; 0x2c
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	0008      	movs	r0, r1
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	0019      	movs	r1, r3
 80089ee:	230b      	movs	r3, #11
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	1c02      	adds	r2, r0, #0
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	230a      	movs	r3, #10
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	1c0a      	adds	r2, r1, #0
 80089fc:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80089fe:	2327      	movs	r3, #39	; 0x27
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
		UNUSED(BaudRate);
		UNUSED(DataBits);
		UNUSED(Parity);
		UNUSED(StopBit);
		UBYTE           ubUDR;
		ubUDR =0xFF;
 8008a06:	2313      	movs	r3, #19
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	22ff      	movs	r2, #255	; 0xff
 8008a0c:	701a      	strb	r2, [r3, #0]
		/* End of addition */

    MBP_ENTER_CRITICAL_SECTION(  );
 8008a0e:	f7ff ffd8 	bl	80089c2 <vMBPEnterCritical>
    if( !bIsInitalized )
 8008a12:	4b7a      	ldr	r3, [pc, #488]	; (8008bfc <eMBPSerialInit+0x21c>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d139      	bne.n	8008a8e <eMBPSerialInit+0xae>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 8008a1a:	2326      	movs	r3, #38	; 0x26
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	e024      	b.n	8008a6e <eMBPSerialInit+0x8e>
        {
            HDL_RESET( &xSerialHdls[ubIdx] );
 8008a24:	2026      	movs	r0, #38	; 0x26
 8008a26:	183b      	adds	r3, r7, r0
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	4b75      	ldr	r3, [pc, #468]	; (8008c00 <eMBPSerialInit+0x220>)
 8008a2c:	0112      	lsls	r2, r2, #4
 8008a2e:	21ff      	movs	r1, #255	; 0xff
 8008a30:	54d1      	strb	r1, [r2, r3]
 8008a32:	0001      	movs	r1, r0
 8008a34:	187b      	adds	r3, r7, r1
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4a71      	ldr	r2, [pc, #452]	; (8008c00 <eMBPSerialInit+0x220>)
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	18d3      	adds	r3, r2, r3
 8008a3e:	3304      	adds	r3, #4
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	4a6d      	ldr	r2, [pc, #436]	; (8008c00 <eMBPSerialInit+0x220>)
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	18d3      	adds	r3, r2, r3
 8008a4e:	3308      	adds	r3, #8
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	187b      	adds	r3, r7, r1
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	4a69      	ldr	r2, [pc, #420]	; (8008c00 <eMBPSerialInit+0x220>)
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	18d3      	adds	r3, r2, r3
 8008a5e:	330c      	adds	r3, #12
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 8008a64:	187b      	adds	r3, r7, r1
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	187b      	adds	r3, r7, r1
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	2326      	movs	r3, #38	; 0x26
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0d5      	beq.n	8008a24 <eMBPSerialInit+0x44>
        }
#if UART_1_ENABLED == 1
        RS_485_UART_1_INIT(  );
        RS_485_UART_1_DISABLE_TX(  );
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	0159      	lsls	r1, r3, #5
 8008a7c:	2390      	movs	r3, #144	; 0x90
 8008a7e:	05db      	lsls	r3, r3, #23
 8008a80:	2200      	movs	r2, #0
 8008a82:	0018      	movs	r0, r3
 8008a84:	f7f8 ff74 	bl	8001970 <HAL_GPIO_WritePin>
#endif
        bIsInitalized = TRUE;
 8008a88:	4b5c      	ldr	r3, [pc, #368]	; (8008bfc <eMBPSerialInit+0x21c>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	701a      	strb	r2, [r3, #0]
    }

    if( ( MB_HDL_INVALID == xMBMHdl ) || ( NULL == pxSerialHdl ) )
 8008a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <eMBPSerialInit+0xba>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <eMBPSerialInit+0xc4>
    {
        eStatus = MB_EINVAL;
 8008a9a:	2327      	movs	r3, #39	; 0x27
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e0a1      	b.n	8008be8 <eMBPSerialInit+0x208>
    }
    else
    {
        eStatus = MB_ENORES;
 8008aa4:	2327      	movs	r3, #39	; 0x27
 8008aa6:	18fb      	adds	r3, r7, r3
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	701a      	strb	r2, [r3, #0]

        /* Setup baudrate */
        if( ( ulBaudRate > UART_BAUDRATE_MIN ) && ( ulBaudRate < UART_BAUDRATE_MAX ) )
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	2396      	movs	r3, #150	; 0x96
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d904      	bls.n	8008ac0 <eMBPSerialInit+0xe0>
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	23e1      	movs	r3, #225	; 0xe1
 8008aba:	025b      	lsls	r3, r3, #9
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d303      	bcc.n	8008ac8 <eMBPSerialInit+0xe8>
        {
            //BaudRate = ulBaudRate;
        }
        else
        {
            eStatus = MB_EINVAL;
 8008ac0:	2327      	movs	r3, #39	; 0x27
 8008ac2:	18fb      	adds	r3, r7, r3
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	701a      	strb	r2, [r3, #0]
        }

        /* Setup stopbits */
        switch ( ucStopBits )
 8008ac8:	2334      	movs	r3, #52	; 0x34
 8008aca:	2208      	movs	r2, #8
 8008acc:	189b      	adds	r3, r3, r2
 8008ace:	19db      	adds	r3, r3, r7
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d002      	beq.n	8008adc <eMBPSerialInit+0xfc>
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d003      	beq.n	8008ae2 <eMBPSerialInit+0x102>
 8008ada:	e006      	b.n	8008aea <eMBPSerialInit+0x10a>
        {
        case 1:
            StopBit = UART_STOPBITS_1;
 8008adc:	2300      	movs	r3, #0
 8008ade:	623b      	str	r3, [r7, #32]
            break;
 8008ae0:	e008      	b.n	8008af4 <eMBPSerialInit+0x114>
        case 2:
            StopBit = UART_STOPBITS_2;
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	019b      	lsls	r3, r3, #6
 8008ae6:	623b      	str	r3, [r7, #32]
            break;
 8008ae8:	e004      	b.n	8008af4 <eMBPSerialInit+0x114>
        default:
            eStatus = MB_EINVAL;
 8008aea:	2327      	movs	r3, #39	; 0x27
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	2202      	movs	r2, #2
 8008af0:	701a      	strb	r2, [r3, #0]
            break;
 8008af2:	46c0      	nop			; (mov r8, r8)
        }

        /* For STM32 parity is placed on bit 9 (MSB)
         * Select correct number of databits */
        if( ucDataBits == 8 )
 8008af4:	230a      	movs	r3, #10
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d10d      	bne.n	8008b1a <eMBPSerialInit+0x13a>
        {
            if( eParity != MB_PAR_NONE )
 8008afe:	2330      	movs	r3, #48	; 0x30
 8008b00:	2208      	movs	r2, #8
 8008b02:	189b      	adds	r3, r3, r2
 8008b04:	19db      	adds	r3, r3, r7
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d003      	beq.n	8008b14 <eMBPSerialInit+0x134>
            {
                DataBits = UART_WORDLENGTH_9B;
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	015b      	lsls	r3, r3, #5
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	e010      	b.n	8008b36 <eMBPSerialInit+0x156>
            }
            else
            {
                DataBits = UART_WORDLENGTH_8B;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	e00d      	b.n	8008b36 <eMBPSerialInit+0x156>
            }
        }
        else
        {
            if( eParity != MB_PAR_NONE )
 8008b1a:	2330      	movs	r3, #48	; 0x30
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	19db      	adds	r3, r3, r7
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d002      	beq.n	8008b2e <eMBPSerialInit+0x14e>
            {
                DataBits = UART_WORDLENGTH_8B;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	e003      	b.n	8008b36 <eMBPSerialInit+0x156>
            }
            else
            {
                eStatus = MB_EINVAL;
 8008b2e:	2327      	movs	r3, #39	; 0x27
 8008b30:	18fb      	adds	r3, r7, r3
 8008b32:	2202      	movs	r2, #2
 8008b34:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Setup parity */
        switch ( eParity )
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	2208      	movs	r2, #8
 8008b3a:	189b      	adds	r3, r3, r2
 8008b3c:	19db      	adds	r3, r3, r7
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d005      	beq.n	8008b50 <eMBPSerialInit+0x170>
 8008b44:	dc0f      	bgt.n	8008b66 <eMBPSerialInit+0x186>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <eMBPSerialInit+0x176>
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d007      	beq.n	8008b5e <eMBPSerialInit+0x17e>
 8008b4e:	e00a      	b.n	8008b66 <eMBPSerialInit+0x186>
        {
        case MB_PAR_NONE:
            Parity = UART_PARITY_NONE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61bb      	str	r3, [r7, #24]
            break;
 8008b54:	e00c      	b.n	8008b70 <eMBPSerialInit+0x190>
        case MB_PAR_ODD:
            Parity = UART_PARITY_ODD;
 8008b56:	23c0      	movs	r3, #192	; 0xc0
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	61bb      	str	r3, [r7, #24]
            break;
 8008b5c:	e008      	b.n	8008b70 <eMBPSerialInit+0x190>
        case MB_PAR_EVEN:
            Parity = UART_PARITY_EVEN;
 8008b5e:	2380      	movs	r3, #128	; 0x80
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	61bb      	str	r3, [r7, #24]
            break;
 8008b64:	e004      	b.n	8008b70 <eMBPSerialInit+0x190>
        default:
            eStatus = MB_EINVAL;
 8008b66:	2327      	movs	r3, #39	; 0x27
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	701a      	strb	r2, [r3, #0]
            break;
 8008b6e:	46c0      	nop			; (mov r8, r8)
        }

        if( eStatus != MB_EINVAL )
 8008b70:	2427      	movs	r4, #39	; 0x27
 8008b72:	193b      	adds	r3, r7, r4
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d036      	beq.n	8008be8 <eMBPSerialInit+0x208>
        {
            switch ( ucPort )
 8008b7a:	230b      	movs	r3, #11
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d130      	bne.n	8008be6 <eMBPSerialInit+0x206>
            {
#if UART_1_ENABLED == 1
            case UART_1_PORT:
                if( IDX_INVALID == xSerialHdls[UART_1_IDX].ubIdx )
 8008b84:	4b1e      	ldr	r3, [pc, #120]	; (8008c00 <eMBPSerialInit+0x220>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2bff      	cmp	r3, #255	; 0xff
 8008b8a:	d127      	bne.n	8008bdc <eMBPSerialInit+0x1fc>
                {
                    /* Configure  USART1 */
                    //MB_PORT_Init(BaudRate, DataBits, Parity, StopBit);
										MX_USART1_UART_Init();
 8008b8c:	f7f7 fde6 	bl	800075c <MX_USART1_UART_Init>
									
                    /* Disable receive and transmit interrupts from the beginning */
                    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8008b90:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <eMBPSerialInit+0x224>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <eMBPSerialInit+0x224>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2120      	movs	r1, #32
 8008b9c:	438a      	bics	r2, r1
 8008b9e:	601a      	str	r2, [r3, #0]
										__HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8008ba0:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <eMBPSerialInit+0x224>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <eMBPSerialInit+0x224>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2140      	movs	r1, #64	; 0x40
 8008bac:	438a      	bics	r2, r1
 8008bae:	601a      	str	r2, [r3, #0]
									x=sizeof(ubUDR);
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]
										HAL_UART_Receive_IT(&huart1, &ubUDR, sizeof(ubUDR));
 8008bb4:	2313      	movs	r3, #19
 8008bb6:	18f9      	adds	r1, r7, r3
 8008bb8:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <eMBPSerialInit+0x224>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7fa f861 	bl	8002c84 <HAL_UART_Receive_IT>
//									HAL_StatusTypeDef	 wq=HAL_UART_Receive_DMA(&huart1, &ubUDR, x);
                    /* Setup handle to uart */
                    *pxSerialHdl = &xSerialHdls[UART_1_IDX];
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a0e      	ldr	r2, [pc, #56]	; (8008c00 <eMBPSerialInit+0x220>)
 8008bc6:	601a      	str	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].ubIdx = UART_1_IDX;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <eMBPSerialInit+0x220>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].xMBMHdl = xMBMHdl;
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <eMBPSerialInit+0x220>)
 8008bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bd2:	60da      	str	r2, [r3, #12]

                    /* Everything is ok */
                    eStatus = MB_ENOERR;
 8008bd4:	193b      	adds	r3, r7, r4
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    eStatus = MB_ENORES;
                }
                break;
 8008bda:	e005      	b.n	8008be8 <eMBPSerialInit+0x208>
                    eStatus = MB_ENORES;
 8008bdc:	2327      	movs	r3, #39	; 0x27
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	2204      	movs	r2, #4
 8008be2:	701a      	strb	r2, [r3, #0]
                break;
 8008be4:	e000      	b.n	8008be8 <eMBPSerialInit+0x208>
#endif
            default:
                break;
 8008be6:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008be8:	f7ff fef2 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8008bec:	2327      	movs	r3, #39	; 0x27
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	781b      	ldrb	r3, [r3, #0]
}
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b00b      	add	sp, #44	; 0x2c
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	200048f4 	.word	0x200048f4
 8008c00:	200048e4 	.word	0x200048e4
 8008c04:	20000108 	.word	0x20000108

08008c08 <eMBPSerialClose>:

eMBErrorCode
eMBPSerialClose( xMBPSerialHandle xSerialHdl )
{
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008c10:	240f      	movs	r4, #15
 8008c12:	193b      	adds	r3, r7, r4
 8008c14:	2202      	movs	r2, #2
 8008c16:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008c1c:	f7ff fed1 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d037      	beq.n	8008c96 <eMBPSerialClose+0x8e>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	011a      	lsls	r2, r3, #4
 8008c2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ca8 <eMBPSerialClose+0xa0>)
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d12f      	bne.n	8008c96 <eMBPSerialClose+0x8e>
    {
        switch ( pxSerialIntHdl->ubIdx )
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d128      	bne.n	8008c90 <eMBPSerialClose+0x88>
        {
#if UART_1_ENABLED == 1
        case UART_1_IDX:
            if( ( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN ) && ( NULL == pxSerialIntHdl->pvMBMReceiveFN ) )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d11f      	bne.n	8008c86 <eMBPSerialClose+0x7e>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d11b      	bne.n	8008c86 <eMBPSerialClose+0x7e>
            {
                /* Close USART 1 */
                HAL_UART_DeInit(&huart1);
 8008c4e:	4b17      	ldr	r3, [pc, #92]	; (8008cac <eMBPSerialClose+0xa4>)
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7f9 ff69 	bl	8002b28 <HAL_UART_DeInit>
                /* Force RS485 back to receive mode */
                RS_485_UART_1_DISABLE_TX(  );
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	0159      	lsls	r1, r3, #5
 8008c5a:	2390      	movs	r3, #144	; 0x90
 8008c5c:	05db      	lsls	r3, r3, #23
 8008c5e:	2200      	movs	r2, #0
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7f8 fe85 	bl	8001970 <HAL_GPIO_WritePin>
                /* Reset handle */
                HDL_RESET( pxSerialIntHdl );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	22ff      	movs	r2, #255	; 0xff
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2200      	movs	r2, #0
 8008c76:	609a      	str	r2, [r3, #8]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	60da      	str	r2, [r3, #12]
                /* No error */
                eStatus = MB_ENOERR;
 8008c7e:	193b      	adds	r3, r7, r4
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_EIO;
            }
            break;
 8008c84:	e007      	b.n	8008c96 <eMBPSerialClose+0x8e>
                eStatus = MB_EIO;
 8008c86:	230f      	movs	r3, #15
 8008c88:	18fb      	adds	r3, r7, r3
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	701a      	strb	r2, [r3, #0]
            break;
 8008c8e:	e002      	b.n	8008c96 <eMBPSerialClose+0x8e>
#endif
        default:
            MBP_ASSERT( 0 );
 8008c90:	f7ff fe84 	bl	800899c <vMBPAssert>
            break;
 8008c94:	46c0      	nop			; (mov r8, r8)
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008c96:	f7ff fe9b 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8008c9a:	230f      	movs	r3, #15
 8008c9c:	18fb      	adds	r3, r7, r3
 8008c9e:	781b      	ldrb	r3, [r3, #0]
}
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b005      	add	sp, #20
 8008ca6:	bd90      	pop	{r4, r7, pc}
 8008ca8:	200048e4 	.word	0x200048e4
 8008cac:	20000108 	.word	0x20000108

08008cb0 <eMBPSerialTxEnable>:

eMBErrorCode
eMBPSerialTxEnable( xMBPSerialHandle xSerialHdl, pbMBPSerialTransmitterEmptyCB pbMBMTransmitterEmptyFN )
{
 8008cb0:	b5b0      	push	{r4, r5, r7, lr}
 8008cb2:	b0c4      	sub	sp, #272	; 0x110
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008cba:	2310      	movs	r3, #16
 8008cbc:	33ff      	adds	r3, #255	; 0xff
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2284      	movs	r2, #132	; 0x84
 8008cc8:	0052      	lsls	r2, r2, #1
 8008cca:	18ba      	adds	r2, r7, r2
 8008ccc:	6013      	str	r3, [r2, #0]
	
		/* Next lines added for copying frame packet to buffer */
		MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 8008cce:	4b58      	ldr	r3, [pc, #352]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2bff      	cmp	r3, #255	; 0xff
 8008cd4:	d101      	bne.n	8008cda <eMBPSerialTxEnable+0x2a>
 8008cd6:	f7ff fe61 	bl	800899c <vMBPAssert>
    BOOL      bHasMoreData = TRUE;      
 8008cda:	2387      	movs	r3, #135	; 0x87
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	701a      	strb	r2, [r3, #0]
    UBYTE     ubTxByte[MBM_SER_PDU_SIZE_MAX]={0};
 8008ce4:	4b53      	ldr	r3, [pc, #332]	; (8008e34 <eMBPSerialTxEnable+0x184>)
 8008ce6:	2288      	movs	r2, #136	; 0x88
 8008ce8:	0052      	lsls	r2, r2, #1
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	19db      	adds	r3, r3, r7
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	22fc      	movs	r2, #252	; 0xfc
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f000 fd53 	bl	80097a4 <memset>
		UBYTE 		FrameCnt=0;
 8008cfe:	230e      	movs	r3, #14
 8008d00:	33ff      	adds	r3, #255	; 0xff
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008d08:	f7ff fe5b 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 8008d0c:	2184      	movs	r1, #132	; 0x84
 8008d0e:	0049      	lsls	r1, r1, #1
 8008d10:	187b      	adds	r3, r7, r1
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d100      	bne.n	8008d1a <eMBPSerialTxEnable+0x6a>
 8008d18:	e080      	b.n	8008e1c <eMBPSerialTxEnable+0x16c>
 8008d1a:	187b      	adds	r3, r7, r1
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	011a      	lsls	r2, r3, #4
 8008d22:	4b43      	ldr	r3, [pc, #268]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008d24:	18d3      	adds	r3, r2, r3
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d000      	beq.n	8008d30 <eMBPSerialTxEnable+0x80>
 8008d2e:	e075      	b.n	8008e1c <eMBPSerialTxEnable+0x16c>
    {
        eStatus = MB_ENOERR;
 8008d30:	2310      	movs	r3, #16
 8008d32:	33ff      	adds	r3, #255	; 0xff
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
        if( NULL != pbMBMTransmitterEmptyFN )
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d04f      	beq.n	8008de0 <eMBPSerialTxEnable+0x130>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN );
 8008d40:	187b      	adds	r3, r7, r1
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <eMBPSerialTxEnable+0x9e>
 8008d4a:	f7ff fe27 	bl	800899c <vMBPAssert>
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = pbMBMTransmitterEmptyFN;
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	2184      	movs	r1, #132	; 0x84
 8008d52:	0049      	lsls	r1, r1, #1
 8008d54:	187b      	adds	r3, r7, r1
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
            switch ( pxSerialIntHdl->ubIdx )
 8008d5a:	187b      	adds	r3, r7, r1
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d13a      	bne.n	8008dda <eMBPSerialTxEnable+0x12a>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* RS485 transmit mode */
                RS_485_UART_1_ENABLE_TX(  );
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	0159      	lsls	r1, r3, #5
 8008d68:	2390      	movs	r3, #144	; 0x90
 8008d6a:	05db      	lsls	r3, r3, #23
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7f8 fdfe 	bl	8001970 <HAL_GPIO_WritePin>
                /* Copy the frame to buffer */
								if( NULL != xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN )
 8008d74:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d020      	beq.n	8008dbe <eMBPSerialTxEnable+0x10e>
									{
										while (bHasMoreData){
 8008d7c:	e016      	b.n	8008dac <eMBPSerialTxEnable+0xfc>
											bHasMoreData = xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN( xSerialHdls[UART_1_IDX].xMBMHdl, &ubTxByte[FrameCnt] );
 8008d7e:	4b2c      	ldr	r3, [pc, #176]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	4b2b      	ldr	r3, [pc, #172]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008d84:	68d8      	ldr	r0, [r3, #12]
 8008d86:	250e      	movs	r5, #14
 8008d88:	35ff      	adds	r5, #255	; 0xff
 8008d8a:	197b      	adds	r3, r7, r5
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2108      	movs	r1, #8
 8008d90:	1879      	adds	r1, r7, r1
 8008d92:	18cb      	adds	r3, r1, r3
 8008d94:	2187      	movs	r1, #135	; 0x87
 8008d96:	0049      	lsls	r1, r1, #1
 8008d98:	187c      	adds	r4, r7, r1
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	4790      	blx	r2
 8008d9e:	0003      	movs	r3, r0
 8008da0:	7023      	strb	r3, [r4, #0]
											FrameCnt++;
 8008da2:	197b      	adds	r3, r7, r5
 8008da4:	781a      	ldrb	r2, [r3, #0]
 8008da6:	197b      	adds	r3, r7, r5
 8008da8:	3201      	adds	r2, #1
 8008daa:	701a      	strb	r2, [r3, #0]
										while (bHasMoreData){
 8008dac:	2387      	movs	r3, #135	; 0x87
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e2      	bne.n	8008d7e <eMBPSerialTxEnable+0xce>
										}
										xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN = NULL;
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <eMBPSerialTxEnable+0x180>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
									}
								/* Send the buffer once */
					HAL_UART_Transmit_IT( &huart1, ubTxByte, FrameCnt-1 );
 8008dbe:	230e      	movs	r3, #14
 8008dc0:	33ff      	adds	r3, #255	; 0xff
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	2308      	movs	r3, #8
 8008dce:	18f9      	adds	r1, r7, r3
 8008dd0:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <eMBPSerialTxEnable+0x188>)
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7f9 fee6 	bl	8002ba4 <HAL_UART_Transmit_IT>
							//	HAL_UART_Transmit_DMA(&huart1, ubTxByte, FrameCnt-1);
                break;
 8008dd8:	e020      	b.n	8008e1c <eMBPSerialTxEnable+0x16c>
#endif
            default:
                MBP_ASSERT( 0 );
 8008dda:	f7ff fddf 	bl	800899c <vMBPAssert>
 8008dde:	e01d      	b.n	8008e1c <eMBPSerialTxEnable+0x16c>
            }

        }
        else
        {
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = NULL;
 8008de0:	2184      	movs	r1, #132	; 0x84
 8008de2:	0049      	lsls	r1, r1, #1
 8008de4:	187b      	adds	r3, r7, r1
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2200      	movs	r2, #0
 8008dea:	605a      	str	r2, [r3, #4]
            /* The transmitter is disable when the last frame has been sent.
             * This is necessary for RS485 with a half-duplex bus.
             */
            switch ( pxSerialIntHdl->ubIdx )
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d110      	bne.n	8008e18 <eMBPSerialTxEnable+0x168>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Disable transmit register empty interrupt */
								__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <eMBPSerialTxEnable+0x188>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <eMBPSerialTxEnable+0x188>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2180      	movs	r1, #128	; 0x80
 8008e02:	438a      	bics	r2, r1
 8008e04:	601a      	str	r2, [r3, #0]
                /* Enable transmit complete interrupt */
								__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <eMBPSerialTxEnable+0x188>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <eMBPSerialTxEnable+0x188>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2140      	movs	r1, #64	; 0x40
 8008e12:	430a      	orrs	r2, r1
 8008e14:	601a      	str	r2, [r3, #0]
                break;
 8008e16:	e001      	b.n	8008e1c <eMBPSerialTxEnable+0x16c>
#endif
            default:
                MBP_ASSERT( 0 );
 8008e18:	f7ff fdc0 	bl	800899c <vMBPAssert>
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008e1c:	f7ff fdd8 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8008e20:	2310      	movs	r3, #16
 8008e22:	33ff      	adds	r3, #255	; 0xff
 8008e24:	18fb      	adds	r3, r7, r3
 8008e26:	781b      	ldrb	r3, [r3, #0]
}
 8008e28:	0018      	movs	r0, r3
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b044      	add	sp, #272	; 0x110
 8008e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e30:	200048e4 	.word	0x200048e4
 8008e34:	fffffef8 	.word	0xfffffef8
 8008e38:	20000108 	.word	0x20000108

08008e3c <eMBPSerialRxEnable>:

eMBErrorCode
eMBPSerialRxEnable( xMBPSerialHandle xSerialHdl, pvMBPSerialReceiverCB pvMBMReceiveFN )
{
 8008e3c:	b590      	push	{r4, r7, lr}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008e46:	240f      	movs	r4, #15
 8008e48:	193b      	adds	r3, r7, r4
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 8008e52:	f7ff fdb6 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d031      	beq.n	8008ec0 <eMBPSerialRxEnable+0x84>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	011a      	lsls	r2, r3, #4
 8008e62:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <eMBPSerialRxEnable+0x98>)
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d129      	bne.n	8008ec0 <eMBPSerialRxEnable+0x84>
    {
        eStatus = MB_ENOERR;
 8008e6c:	193b      	adds	r3, r7, r4
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
        if( NULL != pvMBMReceiveFN )
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d018      	beq.n	8008eaa <eMBPSerialRxEnable+0x6e>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pvMBMReceiveFN );
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <eMBPSerialRxEnable+0x48>
 8008e80:	f7ff fd8c 	bl	800899c <vMBPAssert>
            pxSerialIntHdl->pvMBMReceiveFN = pvMBMReceiveFN;
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d108      	bne.n	8008ea4 <eMBPSerialRxEnable+0x68>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Enable USART 1 receive interrupt */
                __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8008e92:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <eMBPSerialRxEnable+0x9c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <eMBPSerialRxEnable+0x9c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2120      	movs	r1, #32
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
                break;
 8008ea2:	e00d      	b.n	8008ec0 <eMBPSerialRxEnable+0x84>
#endif
            default:
                MBP_ASSERT( 0 );
 8008ea4:	f7ff fd7a 	bl	800899c <vMBPAssert>
 8008ea8:	e00a      	b.n	8008ec0 <eMBPSerialRxEnable+0x84>
            }
        }
        else
        {
            pxSerialIntHdl->pvMBMReceiveFN = NULL;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <eMBPSerialRxEnable+0x82>
                //__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
								
                break;
#endif
            default:
                MBP_ASSERT( 0 );
 8008eb8:	f7ff fd70 	bl	800899c <vMBPAssert>
 8008ebc:	e000      	b.n	8008ec0 <eMBPSerialRxEnable+0x84>
                break;
 8008ebe:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008ec0:	f7ff fd86 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8008ec4:	230f      	movs	r3, #15
 8008ec6:	18fb      	adds	r3, r7, r3
 8008ec8:	781b      	ldrb	r3, [r3, #0]
}
 8008eca:	0018      	movs	r0, r3
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	b005      	add	sp, #20
 8008ed0:	bd90      	pop	{r4, r7, pc}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	200048e4 	.word	0x200048e4
 8008ed8:	20000108 	.word	0x20000108

08008edc <prvvMBPUSART1_RXNE_ISR>:
}

/* USART 1 Receive interrupt */
void
prvvMBPUSART1_RXNE_ISR( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
    UBYTE           ubUDR;
    FlagStatus      fs;
	int x;
	UNUSED(x);
    /* Read current flagstatus */
    fs = RESET;
 8008ee2:	210f      	movs	r1, #15
 8008ee4:	187b      	adds	r3, r7, r1
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	701a      	strb	r2, [r3, #0]
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE) )
 8008eea:	4b30      	ldr	r3, [pc, #192]	; (8008fac <prvvMBPUSART1_RXNE_ISR+0xd0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d105      	bne.n	8008f04 <prvvMBPUSART1_RXNE_ISR+0x28>
    {
        fs |= 1;
 8008ef8:	187b      	adds	r3, r7, r1
 8008efa:	187a      	adds	r2, r7, r1
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	2101      	movs	r1, #1
 8008f00:	430a      	orrs	r2, r1
 8008f02:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_NE) )
 8008f04:	4b29      	ldr	r3, [pc, #164]	; (8008fac <prvvMBPUSART1_RXNE_ISR+0xd0>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	2204      	movs	r2, #4
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d106      	bne.n	8008f20 <prvvMBPUSART1_RXNE_ISR+0x44>
    {
        fs |= 2;
 8008f12:	220f      	movs	r2, #15
 8008f14:	18bb      	adds	r3, r7, r2
 8008f16:	18ba      	adds	r2, r7, r2
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE) )
 8008f20:	4b22      	ldr	r3, [pc, #136]	; (8008fac <prvvMBPUSART1_RXNE_ISR+0xd0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	2202      	movs	r2, #2
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d106      	bne.n	8008f3c <prvvMBPUSART1_RXNE_ISR+0x60>
    {
        fs |= 4;
 8008f2e:	220f      	movs	r2, #15
 8008f30:	18bb      	adds	r3, r7, r2
 8008f32:	18ba      	adds	r2, r7, r2
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	2104      	movs	r1, #4
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_PE) )
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <prvvMBPUSART1_RXNE_ISR+0xd0>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	2201      	movs	r2, #1
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d106      	bne.n	8008f58 <prvvMBPUSART1_RXNE_ISR+0x7c>
    {
        fs |= 8;
 8008f4a:	220f      	movs	r2, #15
 8008f4c:	18bb      	adds	r3, r7, r2
 8008f4e:	18ba      	adds	r2, r7, r2
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	2108      	movs	r1, #8
 8008f54:	430a      	orrs	r2, r1
 8008f56:	701a      	strb	r2, [r3, #0]
    }

    /* Receive byte from USART1 */
		
		ubUDR = (0xFF & (USART1->RDR));
 8008f58:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <prvvMBPUSART1_RXNE_ISR+0xd4>)
 8008f5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	1dfb      	adds	r3, r7, #7
 8008f62:	701a      	strb	r2, [r3, #0]

    /* Send data to modbus functions
     * if no error */
    if( fs == RESET )
 8008f64:	230f      	movs	r3, #15
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d111      	bne.n	8008f92 <prvvMBPUSART1_RXNE_ISR+0xb6>
    {
        /* Pass received data on to modbuslib */
        MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 8008f6e:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <prvvMBPUSART1_RXNE_ISR+0xd8>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2bff      	cmp	r3, #255	; 0xff
 8008f74:	d101      	bne.n	8008f7a <prvvMBPUSART1_RXNE_ISR+0x9e>
 8008f76:	f7ff fd11 	bl	800899c <vMBPAssert>
        if( NULL != xSerialHdls[UART_1_IDX].pvMBMReceiveFN )
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <prvvMBPUSART1_RXNE_ISR+0xd8>)
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <prvvMBPUSART1_RXNE_ISR+0xb6>
        {
            xSerialHdls[UART_1_IDX].pvMBMReceiveFN( xSerialHdls[UART_1_IDX].xMBMHdl, ubUDR );
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <prvvMBPUSART1_RXNE_ISR+0xd8>)
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <prvvMBPUSART1_RXNE_ISR+0xd8>)
 8008f88:	68d8      	ldr	r0, [r3, #12]
 8008f8a:	1dfb      	adds	r3, r7, #7
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	0019      	movs	r1, r3
 8008f90:	4790      	blx	r2
        }
    }
	x=sizeof(ubUDR);
 8008f92:	2301      	movs	r3, #1
 8008f94:	60bb      	str	r3, [r7, #8]
HAL_UART_Receive_IT(&huart1, &ubUDR,sizeof(ubUDR));
 8008f96:	1df9      	adds	r1, r7, #7
 8008f98:	4b04      	ldr	r3, [pc, #16]	; (8008fac <prvvMBPUSART1_RXNE_ISR+0xd0>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7f9 fe71 	bl	8002c84 <HAL_UART_Receive_IT>
		//	HAL_UART_Receive_DMA(&huart1, &ubUDR, 5);
		//__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
		
}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	b004      	add	sp, #16
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	20000108 	.word	0x20000108
 8008fb0:	40013800 	.word	0x40013800
 8008fb4:	200048e4 	.word	0x200048e4

08008fb8 <eMBPTimerInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPTimerInit( xMBPTimerHandle * xTimerHdl, USHORT usTimeOut1ms,
               pbMBPTimerExpiredCB pbMBPTimerExpiredFN, xMBHandle xHdl )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	230a      	movs	r3, #10
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	1c0a      	adds	r2, r1, #0
 8008fca:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EPORTERR;
 8008fcc:	2317      	movs	r3, #23
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	701a      	strb	r2, [r3, #0]
    UBYTE           ubIdx;


    MBP_ENTER_CRITICAL_SECTION(  );
 8008fd4:	f7ff fcf5 	bl	80089c2 <vMBPEnterCritical>
    if( ( NULL != xTimerHdl ) && ( NULL != pbMBPTimerExpiredFN ) && ( MB_HDL_INVALID != xHdl ) )
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d100      	bne.n	8008fe0 <eMBPTimerInit+0x28>
 8008fde:	e0ac      	b.n	800913a <eMBPTimerInit+0x182>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d100      	bne.n	8008fe8 <eMBPTimerInit+0x30>
 8008fe6:	e0a8      	b.n	800913a <eMBPTimerInit+0x182>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d100      	bne.n	8008ff0 <eMBPTimerInit+0x38>
 8008fee:	e0a4      	b.n	800913a <eMBPTimerInit+0x182>
    {
        if( !bIsInitalized )
 8008ff0:	4b58      	ldr	r3, [pc, #352]	; (8009154 <eMBPTimerInit+0x19c>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d145      	bne.n	8009084 <eMBPTimerInit+0xcc>
        {
            /* Initialize a hardware timer for 1 millisecond. */
						//MX_TIM16_Init();
						xTimer = xTimerCreate( "MB1msTimer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_MB_TIMER, HandleTimer );
 8008ff8:	4857      	ldr	r0, [pc, #348]	; (8009158 <eMBPTimerInit+0x1a0>)
 8008ffa:	4b58      	ldr	r3, [pc, #352]	; (800915c <eMBPTimerInit+0x1a4>)
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	23ff      	movs	r3, #255	; 0xff
 8009000:	2201      	movs	r2, #1
 8009002:	2101      	movs	r1, #1
 8009004:	f7fc fcf0 	bl	80059e8 <xTimerCreate>
 8009008:	0002      	movs	r2, r0
 800900a:	4b55      	ldr	r3, [pc, #340]	; (8009160 <eMBPTimerInit+0x1a8>)
 800900c:	601a      	str	r2, [r3, #0]

            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800900e:	2316      	movs	r3, #22
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	e02d      	b.n	8009074 <eMBPTimerInit+0xbc>
            {
                RESET_HDL( &arxTimerHdls[ubIdx] );
 8009018:	2016      	movs	r0, #22
 800901a:	183b      	adds	r3, r7, r0
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	4b51      	ldr	r3, [pc, #324]	; (8009164 <eMBPTimerInit+0x1ac>)
 8009020:	0112      	lsls	r2, r2, #4
 8009022:	21ff      	movs	r1, #255	; 0xff
 8009024:	54d1      	strb	r1, [r2, r3]
 8009026:	0001      	movs	r1, r0
 8009028:	187b      	adds	r3, r7, r1
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	4a4d      	ldr	r2, [pc, #308]	; (8009164 <eMBPTimerInit+0x1ac>)
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	3302      	adds	r3, #2
 8009034:	2200      	movs	r2, #0
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	187b      	adds	r3, r7, r1
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	4a49      	ldr	r2, [pc, #292]	; (8009164 <eMBPTimerInit+0x1ac>)
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	3304      	adds	r3, #4
 8009044:	2201      	movs	r2, #1
 8009046:	4252      	negs	r2, r2
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	187b      	adds	r3, r7, r1
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	4a45      	ldr	r2, [pc, #276]	; (8009164 <eMBPTimerInit+0x1ac>)
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	18d3      	adds	r3, r2, r3
 8009054:	3308      	adds	r3, #8
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	187b      	adds	r3, r7, r1
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	4a41      	ldr	r2, [pc, #260]	; (8009164 <eMBPTimerInit+0x1ac>)
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	18d3      	adds	r3, r2, r3
 8009064:	330c      	adds	r3, #12
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
            for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800906a:	187b      	adds	r3, r7, r1
 800906c:	781a      	ldrb	r2, [r3, #0]
 800906e:	187b      	adds	r3, r7, r1
 8009070:	3201      	adds	r2, #1
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	2316      	movs	r3, #22
 8009076:	18fb      	adds	r3, r7, r3
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b04      	cmp	r3, #4
 800907c:	d9cc      	bls.n	8009018 <eMBPTimerInit+0x60>
            }

            bIsInitalized = TRUE;
 800907e:	4b35      	ldr	r3, [pc, #212]	; (8009154 <eMBPTimerInit+0x19c>)
 8009080:	2201      	movs	r2, #1
 8009082:	701a      	strb	r2, [r3, #0]

        }
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 8009084:	2316      	movs	r3, #22
 8009086:	18fb      	adds	r3, r7, r3
 8009088:	2200      	movs	r2, #0
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	e00c      	b.n	80090a8 <eMBPTimerInit+0xf0>
        {
            if( IDX_INVALID == arxTimerHdls[ubIdx].ubIdx )
 800908e:	2116      	movs	r1, #22
 8009090:	187b      	adds	r3, r7, r1
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	4b33      	ldr	r3, [pc, #204]	; (8009164 <eMBPTimerInit+0x1ac>)
 8009096:	0112      	lsls	r2, r2, #4
 8009098:	5cd3      	ldrb	r3, [r2, r3]
 800909a:	2bff      	cmp	r3, #255	; 0xff
 800909c:	d00a      	beq.n	80090b4 <eMBPTimerInit+0xfc>
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800909e:	187b      	adds	r3, r7, r1
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	187b      	adds	r3, r7, r1
 80090a4:	3201      	adds	r2, #1
 80090a6:	701a      	strb	r2, [r3, #0]
 80090a8:	2316      	movs	r3, #22
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d9ed      	bls.n	800908e <eMBPTimerInit+0xd6>
 80090b2:	e000      	b.n	80090b6 <eMBPTimerInit+0xfe>
            {
                break;
 80090b4:	46c0      	nop			; (mov r8, r8)
            }
        }
        if( MAX_TIMER_HDLS != ubIdx )
 80090b6:	2116      	movs	r1, #22
 80090b8:	187b      	adds	r3, r7, r1
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d037      	beq.n	8009130 <eMBPTimerInit+0x178>
        {
            arxTimerHdls[ubIdx].ubIdx = ubIdx;
 80090c0:	187b      	adds	r3, r7, r1
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	4b27      	ldr	r3, [pc, #156]	; (8009164 <eMBPTimerInit+0x1ac>)
 80090c6:	0112      	lsls	r2, r2, #4
 80090c8:	0008      	movs	r0, r1
 80090ca:	1879      	adds	r1, r7, r1
 80090cc:	7809      	ldrb	r1, [r1, #0]
 80090ce:	54d1      	strb	r1, [r2, r3]
            arxTimerHdls[ubIdx].usNTimeOutMS = usTimeOut1ms;
 80090d0:	0001      	movs	r1, r0
 80090d2:	187b      	adds	r3, r7, r1
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	4a23      	ldr	r2, [pc, #140]	; (8009164 <eMBPTimerInit+0x1ac>)
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	18d3      	adds	r3, r2, r3
 80090dc:	3302      	adds	r3, #2
 80090de:	220a      	movs	r2, #10
 80090e0:	18ba      	adds	r2, r7, r2
 80090e2:	8812      	ldrh	r2, [r2, #0]
 80090e4:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 80090e6:	187b      	adds	r3, r7, r1
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <eMBPTimerInit+0x1ac>)
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	18d3      	adds	r3, r2, r3
 80090f0:	3304      	adds	r3, #4
 80090f2:	2201      	movs	r2, #1
 80090f4:	4252      	negs	r2, r2
 80090f6:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].xMBMHdl = xHdl;
 80090f8:	187b      	adds	r3, r7, r1
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	4a19      	ldr	r2, [pc, #100]	; (8009164 <eMBPTimerInit+0x1ac>)
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	3308      	adds	r3, #8
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	601a      	str	r2, [r3, #0]
            arxTimerHdls[ubIdx].pbMBPTimerExpiredFN = pbMBPTimerExpiredFN;
 8009108:	187b      	adds	r3, r7, r1
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	4a15      	ldr	r2, [pc, #84]	; (8009164 <eMBPTimerInit+0x1ac>)
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	330c      	adds	r3, #12
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

            *xTimerHdl = &arxTimerHdls[ubIdx];
 8009118:	187b      	adds	r3, r7, r1
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	4b11      	ldr	r3, [pc, #68]	; (8009164 <eMBPTimerInit+0x1ac>)
 8009120:	18d2      	adds	r2, r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]

            eStatus = MB_ENOERR;
 8009126:	2317      	movs	r3, #23
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 800912e:	e008      	b.n	8009142 <eMBPTimerInit+0x18a>
        }
        else
        {
            eStatus = MB_ENORES;
 8009130:	2317      	movs	r3, #23
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	2204      	movs	r2, #4
 8009136:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 8009138:	e003      	b.n	8009142 <eMBPTimerInit+0x18a>
        }
    }
    else
    {
        eStatus = MB_EINVAL;
 800913a:	2317      	movs	r3, #23
 800913c:	18fb      	adds	r3, r7, r3
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009142:	f7ff fc45 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8009146:	2317      	movs	r3, #23
 8009148:	18fb      	adds	r3, r7, r3
 800914a:	781b      	ldrb	r3, [r3, #0]
}
 800914c:	0018      	movs	r0, r3
 800914e:	46bd      	mov	sp, r7
 8009150:	b006      	add	sp, #24
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20004948 	.word	0x20004948
 8009158:	080099d4 	.word	0x080099d4
 800915c:	08009305 	.word	0x08009305
 8009160:	2000494c 	.word	0x2000494c
 8009164:	200048f8 	.word	0x200048f8

08009168 <vMBPTimerClose>:

void
vMBPTimerClose( xMBPTimerHandle xTimerHdl )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]

    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <vMBPTimerClose+0x42>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	011a      	lsls	r2, r3, #4
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <vMBPTimerClose+0x4c>)
 8009182:	18d3      	adds	r3, r2, r3
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d10f      	bne.n	80091aa <vMBPTimerClose+0x42>
    {
        RESET_HDL( pxTimerIntHdl );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	805a      	strh	r2, [r3, #2]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	4252      	negs	r2, r2
 800919c:	809a      	strh	r2, [r3, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	60da      	str	r2, [r3, #12]
    }
}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b004      	add	sp, #16
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	200048f8 	.word	0x200048f8

080091b8 <eMBPTimerSetTimeout>:

eMBErrorCode
eMBPTimerSetTimeout( xMBPTimerHandle xTimerHdl, USHORT usTimeOut1ms )
{
 80091b8:	b590      	push	{r4, r7, lr}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	000a      	movs	r2, r1
 80091c2:	1cbb      	adds	r3, r7, #2
 80091c4:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 80091c6:	240f      	movs	r4, #15
 80091c8:	193b      	adds	r3, r7, r4
 80091ca:	2202      	movs	r2, #2
 80091cc:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 80091d2:	f7ff fbf6 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) &&
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <eMBPTimerSetTimeout+0x54>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	011a      	lsls	r2, r3, #4
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <eMBPTimerSetTimeout+0x68>)
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d10f      	bne.n	800920c <eMBPTimerSetTimeout+0x54>
 80091ec:	1cbb      	adds	r3, r7, #2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <eMBPTimerSetTimeout+0x54>
        ( usTimeOut1ms > 0 ) && ( usTimeOut1ms != TIMER_TIMEOUT_INVALID ) )
 80091f4:	1cbb      	adds	r3, r7, #2
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <eMBPTimerSetTimeout+0x6c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d006      	beq.n	800920c <eMBPTimerSetTimeout+0x54>
    {

        pxTimerIntHdl->usNTimeOutMS = usTimeOut1ms;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	1cba      	adds	r2, r7, #2
 8009202:	8812      	ldrh	r2, [r2, #0]
 8009204:	805a      	strh	r2, [r3, #2]
        eStatus = MB_ENOERR;
 8009206:	193b      	adds	r3, r7, r4
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800920c:	f7ff fbe0 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8009210:	230f      	movs	r3, #15
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	781b      	ldrb	r3, [r3, #0]
}
 8009216:	0018      	movs	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	b005      	add	sp, #20
 800921c:	bd90      	pop	{r4, r7, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	200048f8 	.word	0x200048f8
 8009224:	0000ffff 	.word	0x0000ffff

08009228 <eMBPTimerStart>:

eMBErrorCode
eMBPTimerStart( xMBPTimerHandle xTimerHdl )
{
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af02      	add	r7, sp, #8
 800922e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8009230:	250f      	movs	r5, #15
 8009232:	197b      	adds	r3, r7, r5
 8009234:	2202      	movs	r2, #2
 8009236:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800923c:	f7ff fbc1 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01b      	beq.n	800927e <eMBPTimerStart+0x56>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	011a      	lsls	r2, r3, #4
 800924c:	4b10      	ldr	r3, [pc, #64]	; (8009290 <eMBPTimerStart+0x68>)
 800924e:	18d3      	adds	r3, r2, r3
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	429a      	cmp	r2, r3
 8009254:	d113      	bne.n	800927e <eMBPTimerStart+0x56>
    {
				xTimerStart( xTimer, portMAX_DELAY );
 8009256:	4b0f      	ldr	r3, [pc, #60]	; (8009294 <eMBPTimerStart+0x6c>)
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	f7fb ffe9 	bl	8005230 <xTaskGetTickCount>
 800925e:	0002      	movs	r2, r0
 8009260:	2301      	movs	r3, #1
 8009262:	425b      	negs	r3, r3
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	2101      	movs	r1, #1
 800926a:	0020      	movs	r0, r4
 800926c:	f7fc fc04 	bl	8005a78 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = pxTimerIntHdl->usNTimeOutMS;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	885a      	ldrh	r2, [r3, #2]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 8009278:	197b      	adds	r3, r7, r5
 800927a:	2200      	movs	r2, #0
 800927c:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800927e:	f7ff fba7 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 8009282:	230f      	movs	r3, #15
 8009284:	18fb      	adds	r3, r7, r3
 8009286:	781b      	ldrb	r3, [r3, #0]
}
 8009288:	0018      	movs	r0, r3
 800928a:	46bd      	mov	sp, r7
 800928c:	b004      	add	sp, #16
 800928e:	bdb0      	pop	{r4, r5, r7, pc}
 8009290:	200048f8 	.word	0x200048f8
 8009294:	2000494c 	.word	0x2000494c

08009298 <eMBPTimerStop>:

eMBErrorCode
eMBPTimerStop( xMBPTimerHandle xTimerHdl )
{
 8009298:	b590      	push	{r4, r7, lr}
 800929a:	b087      	sub	sp, #28
 800929c:	af02      	add	r7, sp, #8
 800929e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80092a0:	240f      	movs	r4, #15
 80092a2:	193b      	adds	r3, r7, r4
 80092a4:	2202      	movs	r2, #2
 80092a6:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 80092ac:	f7ff fb89 	bl	80089c2 <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d018      	beq.n	80092e8 <eMBPTimerStop+0x50>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	011a      	lsls	r2, r3, #4
 80092bc:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <eMBPTimerStop+0x64>)
 80092be:	18d3      	adds	r3, r2, r3
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d110      	bne.n	80092e8 <eMBPTimerStop+0x50>
    {
				xTimerStop( xTimer, portMAX_DELAY );
 80092c6:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <eMBPTimerStop+0x68>)
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	2301      	movs	r3, #1
 80092cc:	425b      	negs	r3, r3
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2300      	movs	r3, #0
 80092d2:	2200      	movs	r2, #0
 80092d4:	2103      	movs	r1, #3
 80092d6:	f7fc fbcf 	bl	8005a78 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = TIMER_TIMEOUT_INVALID;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2201      	movs	r2, #1
 80092de:	4252      	negs	r2, r2
 80092e0:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	2200      	movs	r2, #0
 80092e6:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80092e8:	f7ff fb72 	bl	80089d0 <vMBPExitCritical>
    return eStatus;
 80092ec:	230f      	movs	r3, #15
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	781b      	ldrb	r3, [r3, #0]
}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b005      	add	sp, #20
 80092f8:	bd90      	pop	{r4, r7, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	200048f8 	.word	0x200048f8
 8009300:	2000494c 	.word	0x2000494c

08009304 <HandleTimer>:

/*timer callback function
*/
static void HandleTimer(TimerHandle_t xTimer)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
		UBYTE           ubIdx;
	uint32_t Timer_ID = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	60bb      	str	r3, [r7, #8]

#if MBP_DEBUG_TIMER_PERFORMANCE == 1
    STATIC BOOL     bLastState = FALSE;
#endif
  /* Get Timer ID */
  Timer_ID = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	0018      	movs	r0, r3
 8009314:	f7fc fe20 	bl	8005f58 <pvTimerGetTimerID>
 8009318:	0003      	movs	r3, r0
 800931a:	60bb      	str	r3, [r7, #8]
  if (TIMERID_MB_TIMER == Timer_ID)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2bff      	cmp	r3, #255	; 0xff
 8009320:	d152      	bne.n	80093c8 <HandleTimer+0xc4>
  {
#if MBP_DEBUG_TIMER_PERFORMANCE == 1
        vMBPSetDebugPin( MBP_DEBUGPIN_0, bLastState );
        bLastState = !bLastState;
#endif
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 8009322:	230f      	movs	r3, #15
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e048      	b.n	80093be <HandleTimer+0xba>
        {
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800932c:	200f      	movs	r0, #15
 800932e:	183b      	adds	r3, r7, r0
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	4b27      	ldr	r3, [pc, #156]	; (80093d0 <HandleTimer+0xcc>)
 8009334:	0112      	lsls	r2, r2, #4
 8009336:	5cd3      	ldrb	r3, [r2, r3]
 8009338:	2bff      	cmp	r3, #255	; 0xff
 800933a:	d03a      	beq.n	80093b2 <HandleTimer+0xae>
                ( TIMER_TIMEOUT_INVALID != arxTimerHdls[ubIdx].usNTimeLeft ) )
 800933c:	183b      	adds	r3, r7, r0
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	4a23      	ldr	r2, [pc, #140]	; (80093d0 <HandleTimer+0xcc>)
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	18d3      	adds	r3, r2, r3
 8009346:	3304      	adds	r3, #4
 8009348:	881b      	ldrh	r3, [r3, #0]
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800934a:	4a22      	ldr	r2, [pc, #136]	; (80093d4 <HandleTimer+0xd0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d030      	beq.n	80093b2 <HandleTimer+0xae>
            {
                arxTimerHdls[ubIdx].usNTimeLeft--;
 8009350:	183b      	adds	r3, r7, r0
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	491e      	ldr	r1, [pc, #120]	; (80093d0 <HandleTimer+0xcc>)
 8009356:	011a      	lsls	r2, r3, #4
 8009358:	188a      	adds	r2, r1, r2
 800935a:	3204      	adds	r2, #4
 800935c:	8812      	ldrh	r2, [r2, #0]
 800935e:	3a01      	subs	r2, #1
 8009360:	b291      	uxth	r1, r2
 8009362:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <HandleTimer+0xcc>)
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	18d3      	adds	r3, r2, r3
 8009368:	3304      	adds	r3, #4
 800936a:	1c0a      	adds	r2, r1, #0
 800936c:	801a      	strh	r2, [r3, #0]
                if( 0 == arxTimerHdls[ubIdx].usNTimeLeft )
 800936e:	183b      	adds	r3, r7, r0
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <HandleTimer+0xcc>)
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	18d3      	adds	r3, r2, r3
 8009378:	3304      	adds	r3, #4
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d118      	bne.n	80093b2 <HandleTimer+0xae>
                {
                    arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 8009380:	183b      	adds	r3, r7, r0
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	4a12      	ldr	r2, [pc, #72]	; (80093d0 <HandleTimer+0xcc>)
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	18d3      	adds	r3, r2, r3
 800938a:	3304      	adds	r3, #4
 800938c:	2201      	movs	r2, #1
 800938e:	4252      	negs	r2, r2
 8009390:	801a      	strh	r2, [r3, #0]
                    ( void )arxTimerHdls[ubIdx].pbMBPTimerExpiredFN( arxTimerHdls[ubIdx].xMBMHdl );
 8009392:	183b      	adds	r3, r7, r0
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	4a0e      	ldr	r2, [pc, #56]	; (80093d0 <HandleTimer+0xcc>)
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	18d3      	adds	r3, r2, r3
 800939c:	330c      	adds	r3, #12
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	183b      	adds	r3, r7, r0
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	490a      	ldr	r1, [pc, #40]	; (80093d0 <HandleTimer+0xcc>)
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	18cb      	adds	r3, r1, r3
 80093aa:	3308      	adds	r3, #8
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	0018      	movs	r0, r3
 80093b0:	4790      	blx	r2
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 80093b2:	210f      	movs	r1, #15
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	3201      	adds	r2, #1
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	230f      	movs	r3, #15
 80093c0:	18fb      	adds	r3, r7, r3
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d9b1      	bls.n	800932c <HandleTimer+0x28>
                }
            }
        }
  }
}
 80093c8:	46c0      	nop			; (mov r8, r8)
 80093ca:	46bd      	mov	sp, r7
 80093cc:	b004      	add	sp, #16
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	200048f8 	.word	0x200048f8
 80093d4:	0000ffff 	.word	0x0000ffff

080093d8 <eMBExceptionToErrorcode>:
    return eException;
}

eMBErrorCode
eMBExceptionToErrorcode( UBYTE eMBPDUException )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	0002      	movs	r2, r0
 80093e0:	1dfb      	adds	r3, r7, #7
 80093e2:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EIO;
 80093e4:	230f      	movs	r3, #15
 80093e6:	18fb      	adds	r3, r7, r3
 80093e8:	2205      	movs	r2, #5
 80093ea:	701a      	strb	r2, [r3, #0]

    switch ( eMBPDUException )
 80093ec:	1dfb      	adds	r3, r7, #7
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b0b      	cmp	r3, #11
 80093f2:	d831      	bhi.n	8009458 <eMBExceptionToErrorcode+0x80>
 80093f4:	009a      	lsls	r2, r3, #2
 80093f6:	4b1c      	ldr	r3, [pc, #112]	; (8009468 <eMBExceptionToErrorcode+0x90>)
 80093f8:	18d3      	adds	r3, r2, r3
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	469f      	mov	pc, r3
    {
    case MB_PDU_EX_ILLEGAL_FUNCTION:
        eStatus = MB_EX_ILLEGAL_FUNCTION;
 80093fe:	230f      	movs	r3, #15
 8009400:	18fb      	adds	r3, r7, r3
 8009402:	220a      	movs	r2, #10
 8009404:	701a      	strb	r2, [r3, #0]
        break;
 8009406:	e028      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_ADDRESS:
        eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8009408:	230f      	movs	r3, #15
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	220b      	movs	r2, #11
 800940e:	701a      	strb	r2, [r3, #0]
        break;
 8009410:	e023      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ILLEGAL_DATA_VALUE:
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009412:	230f      	movs	r3, #15
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	220c      	movs	r2, #12
 8009418:	701a      	strb	r2, [r3, #0]
        break;
 800941a:	e01e      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_DEVICE_FAILURE:
        eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800941c:	230f      	movs	r3, #15
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	220d      	movs	r2, #13
 8009422:	701a      	strb	r2, [r3, #0]
        break;
 8009424:	e019      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_ACKNOWLEDGE:
        eStatus = MB_EX_ACKNOWLEDGE;
 8009426:	230f      	movs	r3, #15
 8009428:	18fb      	adds	r3, r7, r3
 800942a:	220e      	movs	r2, #14
 800942c:	701a      	strb	r2, [r3, #0]
        break;
 800942e:	e014      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_SLAVE_BUSY:
        eStatus = MB_EX_SLAVE_BUSY;
 8009430:	230f      	movs	r3, #15
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	220f      	movs	r2, #15
 8009436:	701a      	strb	r2, [r3, #0]
        break;
 8009438:	e00f      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_MEMORY_PARITY_ERROR:
        eStatus = MB_EX_MEMORY_PARITY_ERROR;
 800943a:	230f      	movs	r3, #15
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2210      	movs	r2, #16
 8009440:	701a      	strb	r2, [r3, #0]
        break;
 8009442:	e00a      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_PATH_UNAVAILABLE:
        eStatus = MB_EX_GATEWAY_PATH_UNAVAILABLE;
 8009444:	230f      	movs	r3, #15
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	2211      	movs	r2, #17
 800944a:	701a      	strb	r2, [r3, #0]
        break;
 800944c:	e005      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    case MB_PDU_EX_GATEWAY_TARGET_FAILED:
        eStatus = MB_EX_GATEWAY_TARGET_FAILED;
 800944e:	230f      	movs	r3, #15
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	2212      	movs	r2, #18
 8009454:	701a      	strb	r2, [r3, #0]
        break;
 8009456:	e000      	b.n	800945a <eMBExceptionToErrorcode+0x82>
    default:
        break;
 8009458:	46c0      	nop			; (mov r8, r8)
    }
    return eStatus;
 800945a:	230f      	movs	r3, #15
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	781b      	ldrb	r3, [r3, #0]
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b004      	add	sp, #16
 8009466:	bd80      	pop	{r7, pc}
 8009468:	08009c98 	.word	0x08009c98

0800946c <Modbus_task_Init>:
*/

/* --- Modbus module initialization.
*/
void Modbus_task_Init(void)
{
 800946c:	b590      	push	{r4, r7, lr}
 800946e:	b089      	sub	sp, #36	; 0x24
 8009470:	af02      	add	r7, sp, #8

	/* Definition and creation of software timers */
	zTimer = xTimerCreate( "RTC_Timer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_RTC_TIMER, RTC_HandleTimer );
 8009472:	4821      	ldr	r0, [pc, #132]	; (80094f8 <Modbus_task_Init+0x8c>)
 8009474:	4b21      	ldr	r3, [pc, #132]	; (80094fc <Modbus_task_Init+0x90>)
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	23fe      	movs	r3, #254	; 0xfe
 800947a:	2201      	movs	r2, #1
 800947c:	2101      	movs	r1, #1
 800947e:	f7fc fab3 	bl	80059e8 <xTimerCreate>
 8009482:	0002      	movs	r2, r0
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <Modbus_task_Init+0x94>)
 8009486:	601a      	str	r2, [r3, #0]
	xTimerStart( zTimer, portMAX_DELAY );
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <Modbus_task_Init+0x94>)
 800948a:	681c      	ldr	r4, [r3, #0]
 800948c:	f7fb fed0 	bl	8005230 <xTaskGetTickCount>
 8009490:	0002      	movs	r2, r0
 8009492:	2301      	movs	r3, #1
 8009494:	425b      	negs	r3, r3
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	2101      	movs	r1, #1
 800949c:	0020      	movs	r0, r4
 800949e:	f7fc faeb 	bl	8005a78 <xTimerGenericCommand>

	sTimer = xTimerCreate( "TimeOut_Timer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_TMOUT_TIMER, TMOUT_HandleTimer );
 80094a2:	4818      	ldr	r0, [pc, #96]	; (8009504 <Modbus_task_Init+0x98>)
 80094a4:	4b18      	ldr	r3, [pc, #96]	; (8009508 <Modbus_task_Init+0x9c>)
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	23fd      	movs	r3, #253	; 0xfd
 80094aa:	2201      	movs	r2, #1
 80094ac:	2101      	movs	r1, #1
 80094ae:	f7fc fa9b 	bl	80059e8 <xTimerCreate>
 80094b2:	0002      	movs	r2, r0
 80094b4:	4b15      	ldr	r3, [pc, #84]	; (800950c <Modbus_task_Init+0xa0>)
 80094b6:	601a      	str	r2, [r3, #0]
	xTimerStart( sTimer, portMAX_DELAY );
 80094b8:	4b14      	ldr	r3, [pc, #80]	; (800950c <Modbus_task_Init+0xa0>)
 80094ba:	681c      	ldr	r4, [r3, #0]
 80094bc:	f7fb feb8 	bl	8005230 <xTaskGetTickCount>
 80094c0:	0002      	movs	r2, r0
 80094c2:	2301      	movs	r3, #1
 80094c4:	425b      	negs	r3, r3
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	2300      	movs	r3, #0
 80094ca:	2101      	movs	r1, #1
 80094cc:	0020      	movs	r0, r4
 80094ce:	f7fc fad3 	bl	8005a78 <xTimerGenericCommand>

	osThreadDef(defaultTask, MessagingTask, osPriorityNormal, 0, 8*128);
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	4a0e      	ldr	r2, [pc, #56]	; (8009510 <Modbus_task_Init+0xa4>)
 80094d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80094d8:	c313      	stmia	r3!, {r0, r1, r4}
 80094da:	ca03      	ldmia	r2!, {r0, r1}
 80094dc:	c303      	stmia	r3!, {r0, r1}
	MessagingTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	2100      	movs	r1, #0
 80094e2:	0018      	movs	r0, r3
 80094e4:	f7fa ff49 	bl	800437a <osThreadCreate>
 80094e8:	0002      	movs	r2, r0
 80094ea:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <Modbus_task_Init+0xa8>)
 80094ec:	601a      	str	r2, [r3, #0]

	/* Initializing DMA recieve */
//	HAL_UART_Receive_DMA(P1uart, &RcvMessage[0][0], RcvMessageMaxSize);


}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	46bd      	mov	sp, r7
 80094f2:	b007      	add	sp, #28
 80094f4:	bd90      	pop	{r4, r7, pc}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	080099e0 	.word	0x080099e0
 80094fc:	080096d5 	.word	0x080096d5
 8009500:	20004960 	.word	0x20004960
 8009504:	080099ec 	.word	0x080099ec
 8009508:	0800967d 	.word	0x0800967d
 800950c:	20004964 	.word	0x20004964
 8009510:	08009a08 	.word	0x08009a08
 8009514:	20004968 	.word	0x20004968

08009518 <MessagingTask>:

void MessagingTask(void const * argument)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]

	vTaskDelete(NULL);
 8009520:	2000      	movs	r0, #0
 8009522:	f7fb fd43 	bl	8004fac <vTaskDelete>
}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <SetupModbusRTU>:

Module_Status SetupModbusRTU(uint32_t BaudRate, uint32_t ParityBit)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af02      	add	r7, sp, #8
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
	Module_Status Status;
	ULONG Pbit = (ULONG) ParityBit;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	613b      	str	r3, [r7, #16]
	ULONG ulBaudRate = (ULONG) BaudRate;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60fb      	str	r3, [r7, #12]
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8009542:	200a      	movs	r0, #10
 8009544:	f7f7 fb8b 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8009548:	200b      	movs	r0, #11
 800954a:	f7f7 fb88 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	/* Initialize Modbus port as RTU */
	if ( MB_ENOERR != eMBMSerialInit( &xMBMaster,  MB_RTU, 1, ulBaudRate, Pbit ) ) {
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	480f      	ldr	r0, [pc, #60]	; (8009594 <SetupModbusRTU+0x64>)
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	0013      	movs	r3, r2
 800955a:	2201      	movs	r2, #1
 800955c:	2100      	movs	r1, #0
 800955e:	f7fd fa67 	bl	8006a30 <eMBMSerialInit>
 8009562:	1e03      	subs	r3, r0, #0
 8009564:	d004      	beq.n	8009570 <SetupModbusRTU+0x40>
		Status = Modbus_ERROR;}
 8009566:	2317      	movs	r3, #23
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	22ff      	movs	r2, #255	; 0xff
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	e003      	b.n	8009578 <SetupModbusRTU+0x48>
	else
		Status = Modbus_OK;
 8009570:	2317      	movs	r3, #23
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8009578:	200b      	movs	r0, #11
 800957a:	f7f7 fb60 	bl	8000c3e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 800957e:	200a      	movs	r0, #10
 8009580:	f7f7 fb5d 	bl	8000c3e <HAL_NVIC_EnableIRQ>
 return Status;
 8009584:	2317      	movs	r3, #23
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	781b      	ldrb	r3, [r3, #0]
}
 800958a:	0018      	movs	r0, r3
 800958c:	46bd      	mov	sp, r7
 800958e:	b006      	add	sp, #24
 8009590:	bd80      	pop	{r7, pc}
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	20004950 	.word	0x20004950

08009598 <ReadModbusRegister>:
/*-----------------------------------------------------------*/

/* --- read data from a slave on Modbus port FC: 0x03
*/
Module_Status ReadModbusRegister(uint8_t SlaveAdd, uint32_t RegAdd, uint8_t NofReg, unsigned short * DataBuffer )
{
 8009598:	b5b0      	push	{r4, r5, r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	0011      	movs	r1, r2
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	250f      	movs	r5, #15
 80095a6:	197b      	adds	r3, r7, r5
 80095a8:	1c02      	adds	r2, r0, #0
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	240e      	movs	r4, #14
 80095ae:	193b      	adds	r3, r7, r4
 80095b0:	1c0a      	adds	r2, r1, #0
 80095b2:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	unsigned short *Buffer=DataBuffer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	613b      	str	r3, [r7, #16]

	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80095b8:	200a      	movs	r0, #10
 80095ba:	f7f7 fb50 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80095be:	200b      	movs	r0, #11
 80095c0:	f7f7 fb4d 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMReadHoldingRegisters(xMBMaster, SlaveAdd, RegAdd, NofReg, Buffer)) {
 80095c4:	4b12      	ldr	r3, [pc, #72]	; (8009610 <ReadModbusRegister+0x78>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	193b      	adds	r3, r7, r4
 80095ce:	781c      	ldrb	r4, [r3, #0]
 80095d0:	197b      	adds	r3, r7, r5
 80095d2:	7819      	ldrb	r1, [r3, #0]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	0023      	movs	r3, r4
 80095da:	f7fe fb0d 	bl	8007bf8 <eMBMReadHoldingRegisters>
 80095de:	1e03      	subs	r3, r0, #0
 80095e0:	d004      	beq.n	80095ec <ReadModbusRegister+0x54>
		Status = Modbus_ERROR;}
 80095e2:	2317      	movs	r3, #23
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	22ff      	movs	r2, #255	; 0xff
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e003      	b.n	80095f4 <ReadModbusRegister+0x5c>
	else {
		Status = Modbus_OK;
 80095ec:	2317      	movs	r3, #23
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
	}
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80095f4:	200b      	movs	r0, #11
 80095f6:	f7f7 fb22 	bl	8000c3e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80095fa:	200a      	movs	r0, #10
 80095fc:	f7f7 fb1f 	bl	8000c3e <HAL_NVIC_EnableIRQ>

	return Status;
 8009600:	2317      	movs	r3, #23
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	781b      	ldrb	r3, [r3, #0]
}
 8009606:	0018      	movs	r0, r3
 8009608:	46bd      	mov	sp, r7
 800960a:	b006      	add	sp, #24
 800960c:	bdb0      	pop	{r4, r5, r7, pc}
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	20004950 	.word	0x20004950

08009614 <SetTimeOut>:
/*-----------------------------------------------------------*/

/* --- set timeout to a slave on Modbus port
*/
Module_Status SetTimeOut(uint16_t MiliSeconds)
{
 8009614:	b590      	push	{r4, r7, lr}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	0002      	movs	r2, r0
 800961c:	1dbb      	adds	r3, r7, #6
 800961e:	801a      	strh	r2, [r3, #0]
	Module_Status Status;
	USHORT timeout = (USHORT) MiliSeconds;
 8009620:	240c      	movs	r4, #12
 8009622:	193b      	adds	r3, r7, r4
 8009624:	1dba      	adds	r2, r7, #6
 8009626:	8812      	ldrh	r2, [r2, #0]
 8009628:	801a      	strh	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 800962a:	200a      	movs	r0, #10
 800962c:	f7f7 fb17 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8009630:	200b      	movs	r0, #11
 8009632:	f7f7 fb14 	bl	8000c5e <HAL_NVIC_DisableIRQ>
	if (MB_ENOERR != eMBMSetSlaveTimeout( xMBMaster, timeout )) {
 8009636:	4b10      	ldr	r3, [pc, #64]	; (8009678 <SetTimeOut+0x64>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	193b      	adds	r3, r7, r4
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	0019      	movs	r1, r3
 8009640:	0010      	movs	r0, r2
 8009642:	f7fd f913 	bl	800686c <eMBMSetSlaveTimeout>
 8009646:	1e03      	subs	r3, r0, #0
 8009648:	d004      	beq.n	8009654 <SetTimeOut+0x40>
		Status = Modbus_ERROR;}
 800964a:	230f      	movs	r3, #15
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	22ff      	movs	r2, #255	; 0xff
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	e003      	b.n	800965c <SetTimeOut+0x48>
	else
		Status = Modbus_OK;
 8009654:	230f      	movs	r3, #15
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 800965c:	200b      	movs	r0, #11
 800965e:	f7f7 faee 	bl	8000c3e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8009662:	200a      	movs	r0, #10
 8009664:	f7f7 faeb 	bl	8000c3e <HAL_NVIC_EnableIRQ>
	return Status;
 8009668:	230f      	movs	r3, #15
 800966a:	18fb      	adds	r3, r7, r3
 800966c:	781b      	ldrb	r3, [r3, #0]
}
 800966e:	0018      	movs	r0, r3
 8009670:	46bd      	mov	sp, r7
 8009672:	b005      	add	sp, #20
 8009674:	bd90      	pop	{r4, r7, pc}
 8009676:	46c0      	nop			; (mov r8, r8)
 8009678:	20004950 	.word	0x20004950

0800967c <TMOUT_HandleTimer>:


/* --- TimeOut software timer*/

static void TMOUT_HandleTimer(TimerHandle_t sTimer)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

	Timer_ID = ( uint32_t ) pvTimerGetTimerID( sTimer );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	0018      	movs	r0, r3
 800968c:	f7fc fc64 	bl	8005f58 <pvTimerGetTimerID>
 8009690:	0003      	movs	r3, r0
 8009692:	60fb      	str	r3, [r7, #12]
  if (TIMERID_TMOUT_TIMER == Timer_ID)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2bfd      	cmp	r3, #253	; 0xfd
 8009698:	d114      	bne.n	80096c4 <TMOUT_HandleTimer+0x48>
  {
		TMOUT_Counter++;
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <TMOUT_HandleTimer+0x50>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	3301      	adds	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <TMOUT_HandleTimer+0x50>)
 80096a4:	801a      	strh	r2, [r3, #0]
		if (TMOUT_Counter==1000){
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <TMOUT_HandleTimer+0x50>)
 80096a8:	881a      	ldrh	r2, [r3, #0]
 80096aa:	23fa      	movs	r3, #250	; 0xfa
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d108      	bne.n	80096c4 <TMOUT_HandleTimer+0x48>
			wmTimeOut++;
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <TMOUT_HandleTimer+0x54>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <TMOUT_HandleTimer+0x54>)
 80096bc:	701a      	strb	r2, [r3, #0]
			TMOUT_Counter=0;
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <TMOUT_HandleTimer+0x50>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80096c4:	46c0      	nop			; (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b004      	add	sp, #16
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	2000495a 	.word	0x2000495a
 80096d0:	20004957 	.word	0x20004957

080096d4 <RTC_HandleTimer>:
/*-----------------------------------------------------------*/

/* --- RTC software timer*/

static void RTC_HandleTimer(TimerHandle_t zTimer)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]

	Timer_ID = ( uint32_t ) pvTimerGetTimerID( zTimer );
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0018      	movs	r0, r3
 80096e4:	f7fc fc38 	bl	8005f58 <pvTimerGetTimerID>
 80096e8:	0003      	movs	r3, r0
 80096ea:	60fb      	str	r3, [r7, #12]
  if (TIMERID_RTC_TIMER == Timer_ID)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2bfe      	cmp	r3, #254	; 0xfe
 80096f0:	d135      	bne.n	800975e <RTC_HandleTimer+0x8a>
  {
		msCounter++;
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <RTC_HandleTimer+0x94>)
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <RTC_HandleTimer+0x94>)
 80096fc:	801a      	strh	r2, [r3, #0]
		if (msCounter==1000)
 80096fe:	4b1a      	ldr	r3, [pc, #104]	; (8009768 <RTC_HandleTimer+0x94>)
 8009700:	881a      	ldrh	r2, [r3, #0]
 8009702:	23fa      	movs	r3, #250	; 0xfa
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	429a      	cmp	r2, r3
 8009708:	d108      	bne.n	800971c <RTC_HandleTimer+0x48>
		{
			Second++;
 800970a:	4b18      	ldr	r3, [pc, #96]	; (800976c <RTC_HandleTimer+0x98>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	3301      	adds	r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <RTC_HandleTimer+0x98>)
 8009714:	701a      	strb	r2, [r3, #0]
			msCounter=0;
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <RTC_HandleTimer+0x94>)
 8009718:	2200      	movs	r2, #0
 800971a:	801a      	strh	r2, [r3, #0]
		}
		if (Second==60)
 800971c:	4b13      	ldr	r3, [pc, #76]	; (800976c <RTC_HandleTimer+0x98>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b3c      	cmp	r3, #60	; 0x3c
 8009722:	d108      	bne.n	8009736 <RTC_HandleTimer+0x62>
		{
			Second=0;
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <RTC_HandleTimer+0x98>)
 8009726:	2200      	movs	r2, #0
 8009728:	701a      	strb	r2, [r3, #0]
			Minute++;
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <RTC_HandleTimer+0x9c>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	b2da      	uxtb	r2, r3
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <RTC_HandleTimer+0x9c>)
 8009734:	701a      	strb	r2, [r3, #0]
		}
		if (Minute==60)
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <RTC_HandleTimer+0x9c>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b3c      	cmp	r3, #60	; 0x3c
 800973c:	d108      	bne.n	8009750 <RTC_HandleTimer+0x7c>
		{
			Minute=0;
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <RTC_HandleTimer+0x9c>)
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
			Hour++;
 8009744:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <RTC_HandleTimer+0xa0>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	3301      	adds	r3, #1
 800974a:	b2da      	uxtb	r2, r3
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <RTC_HandleTimer+0xa0>)
 800974e:	701a      	strb	r2, [r3, #0]
		}
		if (Hour==24)
 8009750:	4b08      	ldr	r3, [pc, #32]	; (8009774 <RTC_HandleTimer+0xa0>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b18      	cmp	r3, #24
 8009756:	d102      	bne.n	800975e <RTC_HandleTimer+0x8a>
		{
			Hour=0;
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <RTC_HandleTimer+0xa0>)
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	46bd      	mov	sp, r7
 8009762:	b004      	add	sp, #16
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	20004958 	.word	0x20004958
 800976c:	20004956 	.word	0x20004956
 8009770:	20004955 	.word	0x20004955
 8009774:	20004954 	.word	0x20004954

08009778 <HAL_UART_RxCpltCallback>:

	Hour = hour;
	Minute = min;
	Second = sec;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]

		rxMessaging.Flag = 1;
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_UART_RxCpltCallback+0x24>)
 8009782:	2201      	movs	r2, #1
 8009784:	701a      	strb	r2, [r3, #0]

	if (huart == P_RS485uart) {
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <HAL_UART_RxCpltCallback+0x28>)
 800978a:	429a      	cmp	r2, r3
 800978c:	d101      	bne.n	8009792 <HAL_UART_RxCpltCallback+0x1a>
		prvvMBPUSART1_RXNE_ISR(); /* Call Modbus protocol port ISR */
 800978e:	f7ff fba5 	bl	8008edc <prvvMBPUSART1_RXNE_ISR>
	}

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback can be implemented in the user file.
	 */
}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	46bd      	mov	sp, r7
 8009796:	b002      	add	sp, #8
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	2000495c 	.word	0x2000495c
 80097a0:	20000108 	.word	0x20000108

080097a4 <memset>:
 80097a4:	0003      	movs	r3, r0
 80097a6:	1882      	adds	r2, r0, r2
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d100      	bne.n	80097ae <memset+0xa>
 80097ac:	4770      	bx	lr
 80097ae:	7019      	strb	r1, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	e7f9      	b.n	80097a8 <memset+0x4>

080097b4 <_reclaim_reent>:
 80097b4:	4b2d      	ldr	r3, [pc, #180]	; (800986c <_reclaim_reent+0xb8>)
 80097b6:	b570      	push	{r4, r5, r6, lr}
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	0004      	movs	r4, r0
 80097bc:	4283      	cmp	r3, r0
 80097be:	d042      	beq.n	8009846 <_reclaim_reent+0x92>
 80097c0:	69c3      	ldr	r3, [r0, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <_reclaim_reent+0x28>
 80097c6:	2500      	movs	r5, #0
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	42ab      	cmp	r3, r5
 80097cc:	d140      	bne.n	8009850 <_reclaim_reent+0x9c>
 80097ce:	69e3      	ldr	r3, [r4, #28]
 80097d0:	6819      	ldr	r1, [r3, #0]
 80097d2:	2900      	cmp	r1, #0
 80097d4:	d002      	beq.n	80097dc <_reclaim_reent+0x28>
 80097d6:	0020      	movs	r0, r4
 80097d8:	f000 f87a 	bl	80098d0 <_free_r>
 80097dc:	6961      	ldr	r1, [r4, #20]
 80097de:	2900      	cmp	r1, #0
 80097e0:	d002      	beq.n	80097e8 <_reclaim_reent+0x34>
 80097e2:	0020      	movs	r0, r4
 80097e4:	f000 f874 	bl	80098d0 <_free_r>
 80097e8:	69e1      	ldr	r1, [r4, #28]
 80097ea:	2900      	cmp	r1, #0
 80097ec:	d002      	beq.n	80097f4 <_reclaim_reent+0x40>
 80097ee:	0020      	movs	r0, r4
 80097f0:	f000 f86e 	bl	80098d0 <_free_r>
 80097f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d002      	beq.n	8009800 <_reclaim_reent+0x4c>
 80097fa:	0020      	movs	r0, r4
 80097fc:	f000 f868 	bl	80098d0 <_free_r>
 8009800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009802:	2900      	cmp	r1, #0
 8009804:	d002      	beq.n	800980c <_reclaim_reent+0x58>
 8009806:	0020      	movs	r0, r4
 8009808:	f000 f862 	bl	80098d0 <_free_r>
 800980c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800980e:	2900      	cmp	r1, #0
 8009810:	d002      	beq.n	8009818 <_reclaim_reent+0x64>
 8009812:	0020      	movs	r0, r4
 8009814:	f000 f85c 	bl	80098d0 <_free_r>
 8009818:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800981a:	2900      	cmp	r1, #0
 800981c:	d002      	beq.n	8009824 <_reclaim_reent+0x70>
 800981e:	0020      	movs	r0, r4
 8009820:	f000 f856 	bl	80098d0 <_free_r>
 8009824:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009826:	2900      	cmp	r1, #0
 8009828:	d002      	beq.n	8009830 <_reclaim_reent+0x7c>
 800982a:	0020      	movs	r0, r4
 800982c:	f000 f850 	bl	80098d0 <_free_r>
 8009830:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009832:	2900      	cmp	r1, #0
 8009834:	d002      	beq.n	800983c <_reclaim_reent+0x88>
 8009836:	0020      	movs	r0, r4
 8009838:	f000 f84a 	bl	80098d0 <_free_r>
 800983c:	6a23      	ldr	r3, [r4, #32]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <_reclaim_reent+0x92>
 8009842:	0020      	movs	r0, r4
 8009844:	4798      	blx	r3
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	5949      	ldr	r1, [r1, r5]
 800984a:	2900      	cmp	r1, #0
 800984c:	d108      	bne.n	8009860 <_reclaim_reent+0xac>
 800984e:	3504      	adds	r5, #4
 8009850:	69e3      	ldr	r3, [r4, #28]
 8009852:	68d9      	ldr	r1, [r3, #12]
 8009854:	2d80      	cmp	r5, #128	; 0x80
 8009856:	d1f7      	bne.n	8009848 <_reclaim_reent+0x94>
 8009858:	0020      	movs	r0, r4
 800985a:	f000 f839 	bl	80098d0 <_free_r>
 800985e:	e7b6      	b.n	80097ce <_reclaim_reent+0x1a>
 8009860:	680e      	ldr	r6, [r1, #0]
 8009862:	0020      	movs	r0, r4
 8009864:	f000 f834 	bl	80098d0 <_free_r>
 8009868:	0031      	movs	r1, r6
 800986a:	e7ee      	b.n	800984a <_reclaim_reent+0x96>
 800986c:	20000058 	.word	0x20000058

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	2600      	movs	r6, #0
 8009874:	4c0c      	ldr	r4, [pc, #48]	; (80098a8 <__libc_init_array+0x38>)
 8009876:	4d0d      	ldr	r5, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009878:	1b64      	subs	r4, r4, r5
 800987a:	10a4      	asrs	r4, r4, #2
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	2600      	movs	r6, #0
 8009882:	f000 f87f 	bl	8009984 <_init>
 8009886:	4c0a      	ldr	r4, [pc, #40]	; (80098b0 <__libc_init_array+0x40>)
 8009888:	4d0a      	ldr	r5, [pc, #40]	; (80098b4 <__libc_init_array+0x44>)
 800988a:	1b64      	subs	r4, r4, r5
 800988c:	10a4      	asrs	r4, r4, #2
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	00b3      	lsls	r3, r6, #2
 8009896:	58eb      	ldr	r3, [r5, r3]
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	00b3      	lsls	r3, r6, #2
 80098a0:	58eb      	ldr	r3, [r5, r3]
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	08009cc8 	.word	0x08009cc8
 80098ac:	08009cc8 	.word	0x08009cc8
 80098b0:	08009ccc 	.word	0x08009ccc
 80098b4:	08009cc8 	.word	0x08009cc8

080098b8 <__retarget_lock_acquire_recursive>:
 80098b8:	4770      	bx	lr

080098ba <__retarget_lock_release_recursive>:
 80098ba:	4770      	bx	lr

080098bc <memcpy>:
 80098bc:	2300      	movs	r3, #0
 80098be:	b510      	push	{r4, lr}
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d100      	bne.n	80098c6 <memcpy+0xa>
 80098c4:	bd10      	pop	{r4, pc}
 80098c6:	5ccc      	ldrb	r4, [r1, r3]
 80098c8:	54c4      	strb	r4, [r0, r3]
 80098ca:	3301      	adds	r3, #1
 80098cc:	e7f8      	b.n	80098c0 <memcpy+0x4>
	...

080098d0 <_free_r>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	0005      	movs	r5, r0
 80098d4:	2900      	cmp	r1, #0
 80098d6:	d010      	beq.n	80098fa <_free_r+0x2a>
 80098d8:	1f0c      	subs	r4, r1, #4
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da00      	bge.n	80098e2 <_free_r+0x12>
 80098e0:	18e4      	adds	r4, r4, r3
 80098e2:	0028      	movs	r0, r5
 80098e4:	f000 f83e 	bl	8009964 <__malloc_lock>
 80098e8:	4a1d      	ldr	r2, [pc, #116]	; (8009960 <_free_r+0x90>)
 80098ea:	6813      	ldr	r3, [r2, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d105      	bne.n	80098fc <_free_r+0x2c>
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	6014      	str	r4, [r2, #0]
 80098f4:	0028      	movs	r0, r5
 80098f6:	f000 f83d 	bl	8009974 <__malloc_unlock>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d908      	bls.n	8009912 <_free_r+0x42>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	1821      	adds	r1, r4, r0
 8009904:	428b      	cmp	r3, r1
 8009906:	d1f3      	bne.n	80098f0 <_free_r+0x20>
 8009908:	6819      	ldr	r1, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	1809      	adds	r1, r1, r0
 800990e:	6021      	str	r1, [r4, #0]
 8009910:	e7ee      	b.n	80098f0 <_free_r+0x20>
 8009912:	001a      	movs	r2, r3
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <_free_r+0x4e>
 800991a:	42a3      	cmp	r3, r4
 800991c:	d9f9      	bls.n	8009912 <_free_r+0x42>
 800991e:	6811      	ldr	r1, [r2, #0]
 8009920:	1850      	adds	r0, r2, r1
 8009922:	42a0      	cmp	r0, r4
 8009924:	d10b      	bne.n	800993e <_free_r+0x6e>
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	1809      	adds	r1, r1, r0
 800992a:	1850      	adds	r0, r2, r1
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	4283      	cmp	r3, r0
 8009930:	d1e0      	bne.n	80098f4 <_free_r+0x24>
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	1841      	adds	r1, r0, r1
 8009938:	6011      	str	r1, [r2, #0]
 800993a:	6053      	str	r3, [r2, #4]
 800993c:	e7da      	b.n	80098f4 <_free_r+0x24>
 800993e:	42a0      	cmp	r0, r4
 8009940:	d902      	bls.n	8009948 <_free_r+0x78>
 8009942:	230c      	movs	r3, #12
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	e7d5      	b.n	80098f4 <_free_r+0x24>
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	1821      	adds	r1, r4, r0
 800994c:	428b      	cmp	r3, r1
 800994e:	d103      	bne.n	8009958 <_free_r+0x88>
 8009950:	6819      	ldr	r1, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	1809      	adds	r1, r1, r0
 8009956:	6021      	str	r1, [r4, #0]
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	6054      	str	r4, [r2, #4]
 800995c:	e7ca      	b.n	80098f4 <_free_r+0x24>
 800995e:	46c0      	nop			; (mov r8, r8)
 8009960:	20004aa8 	.word	0x20004aa8

08009964 <__malloc_lock>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4802      	ldr	r0, [pc, #8]	; (8009970 <__malloc_lock+0xc>)
 8009968:	f7ff ffa6 	bl	80098b8 <__retarget_lock_acquire_recursive>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	46c0      	nop			; (mov r8, r8)
 8009970:	20004aa4 	.word	0x20004aa4

08009974 <__malloc_unlock>:
 8009974:	b510      	push	{r4, lr}
 8009976:	4802      	ldr	r0, [pc, #8]	; (8009980 <__malloc_unlock+0xc>)
 8009978:	f7ff ff9f 	bl	80098ba <__retarget_lock_release_recursive>
 800997c:	bd10      	pop	{r4, pc}
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	20004aa4 	.word	0x20004aa4

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
