
Modbus_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800680c  0800680c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800680c  0800680c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f10  20000060  08006870  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004f70  08006870  00024f70  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015bc8  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040ae  00000000  00000000  00035c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d0  00000000  00000000  0003b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2ea  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da6c  00000000  00000000  0005b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2927  00000000  00000000  0007913e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004eb0  00000000  00000000  0012ba68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00130918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800675c 	.word	0x0800675c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800675c 	.word	0x0800675c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2203      	movs	r2, #3
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 f8a4 	bl	8001398 <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 f962 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	2000007c 	.word	0x2000007c
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MX_DMA_Init+0x70>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MX_DMA_Init+0x70>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <MX_DMA_Init+0x70>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_DMA_Init+0x70>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_DMA_Init+0x70>)
 80002c8:	2102      	movs	r1, #2
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_DMA_Init+0x70>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	2202      	movs	r2, #2
 80002d4:	4013      	ands	r3, r2
 80002d6:	603b      	str	r3, [r7, #0]
 80002d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2103      	movs	r1, #3
 80002de:	2009      	movs	r0, #9
 80002e0:	f001 f834 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002e4:	2009      	movs	r0, #9
 80002e6:	f001 f846 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2103      	movs	r1, #3
 80002ee:	200a      	movs	r0, #10
 80002f0:	f001 f82c 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f001 f83e 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 3, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2103      	movs	r1, #3
 80002fe:	200b      	movs	r0, #11
 8000300:	f001 f824 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000304:	200b      	movs	r0, #11
 8000306:	f001 f836 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40021000 	.word	0x40021000

08000318 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_FREERTOS_Init+0x2c>)
 8000322:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000324:	c313      	stmia	r3!, {r0, r1, r4}
 8000326:	ca03      	ldmia	r2!, {r0, r1}
 8000328:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f004 f907 	bl	8004542 <osThreadCreate>
 8000334:	0002      	movs	r2, r0
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <MX_FREERTOS_Init+0x30>)
 8000338:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b007      	add	sp, #28
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	08006780 	.word	0x08006780
 8000348:	200000a0 	.word	0x200000a0

0800034c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	240c      	movs	r4, #12
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	2314      	movs	r3, #20
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f006 f90d 	bl	800657c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0289      	lsls	r1, r1, #10
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	029b      	lsls	r3, r3, #10
 8000378:	4013      	ands	r3, r2
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x8c>)
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	02c9      	lsls	r1, r1, #11
 8000388:	430a      	orrs	r2, r1
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x8c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	02db      	lsls	r3, r3, #11
 8000394:	4013      	ands	r3, r2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <MX_GPIO_Init+0x90>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	0019      	movs	r1, r3
 80003a4:	f001 fde2 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	01d2      	lsls	r2, r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2201      	movs	r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <MX_GPIO_Init+0x90>)
 80003c6:	0019      	movs	r1, r3
 80003c8:	0010      	movs	r0, r2
 80003ca:	f001 fc57 	bl	8001c7c <HAL_GPIO_Init>

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b009      	add	sp, #36	; 0x24
 80003d4:	bd90      	pop	{r4, r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000400 	.word	0x48000400

080003e0 <main>:
/* USER CODE END 0 */
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003e4:	f000 fefa 	bl	80011dc <HAL_Init>

	/* USER CODE BEGIN Init */
	/* Peripherals Init */
	MX_GPIO_Init();
 80003e8:	f7ff ffb0 	bl	800034c <MX_GPIO_Init>
	MX_DMA_Init();
 80003ec:	f7ff ff5a 	bl	80002a4 <MX_DMA_Init>
	MX_CRC_Init();
 80003f0:	f7ff ff16 	bl	8000220 <MX_CRC_Init>

	/* USER CODE END Init */
	/* Array ports */
	MX_USART1_UART_Init();
 80003f4:	f000 fa04 	bl	8000800 <MX_USART1_UART_Init>
//		RS485_RECEIVER_EN();
	HAL_UART_Receive_DMA(&huart1, &RcvMessage[0][0], RcvMessageMaxSize);
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	005a      	lsls	r2, r3, #1
 80003fc:	4905      	ldr	r1, [pc, #20]	; (8000414 <main+0x34>)
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <main+0x38>)
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fe8f 	bl	8003124 <HAL_UART_Receive_DMA>
	/* Configure the system clock */
	SystemClock_Config();
 8000406:	f000 f80f 	bl	8000428 <SystemClock_Config>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800040a:	f7ff ff85 	bl	8000318 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800040e:	f004 f890 	bl	8004532 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000412:	e7fe      	b.n	8000412 <main+0x32>
 8000414:	200000a4 	.word	0x200000a4
 8000418:	200005ec 	.word	0x200005ec

0800041c <StartDefaultTask>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void StartDefaultTask(void const *argument) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for (;;) {
 8000424:	e7fe      	b.n	8000424 <StartDefaultTask+0x8>
	...

08000428 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b099      	sub	sp, #100	; 0x64
 800042c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800042e:	242c      	movs	r4, #44	; 0x2c
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	2334      	movs	r3, #52	; 0x34
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f006 f89f 	bl	800657c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800043e:	231c      	movs	r3, #28
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	0018      	movs	r0, r3
 8000444:	2310      	movs	r3, #16
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f006 f897 	bl	800657c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800044e:	003b      	movs	r3, r7
 8000450:	0018      	movs	r0, r3
 8000452:	231c      	movs	r3, #28
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f006 f890 	bl	800657c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800045c:	0021      	movs	r1, r4
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2220      	movs	r2, #32
 8000462:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2201      	movs	r2, #1
 8000468:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2202      	movs	r2, #2
 800046e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	22c0      	movs	r2, #192	; 0xc0
 8000474:	0252      	lsls	r2, r2, #9
 8000476:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	22e0      	movs	r2, #224	; 0xe0
 800047c:	0392      	lsls	r2, r2, #14
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	220f      	movs	r2, #15
 8000484:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000486:	187b      	adds	r3, r7, r1
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fdbf 	bl	800200c <HAL_RCC_OscConfig>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6e>
		Error_Handler();
 8000492:	f000 f843 	bl	800051c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000496:	211c      	movs	r1, #28
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2207      	movs	r2, #7
 800049c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2202      	movs	r2, #2
 80004a2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2101      	movs	r1, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f92f 	bl	8002718 <HAL_RCC_ClockConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x9a>
		Error_Handler();
 80004be:	f000 f82d 	bl	800051c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80004c2:	003b      	movs	r3, r7
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <SystemClock_Config+0xcc>)
 80004c6:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004da:	003b      	movs	r3, r7
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fab1 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xc2>
		Error_Handler();
 80004e6:	f000 f819 	bl	800051c <Error_Handler>
	}
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b019      	add	sp, #100	; 0x64
 80004f0:	bd90      	pop	{r4, r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	00040003 	.word	0x00040003

080004f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800050a:	f000 fe7b 	bl	8001204 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40014400 	.word	0x40014400

0800051c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <HAL_MspInit+0x80>)
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <HAL_MspInit+0x80>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_MspInit+0x80>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	2201      	movs	r2, #1
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_MspInit+0x80>)
 8000548:	69da      	ldr	r2, [r3, #28]
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_MspInit+0x80>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0549      	lsls	r1, r1, #21
 8000550:	430a      	orrs	r2, r1
 8000552:	61da      	str	r2, [r3, #28]
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <HAL_MspInit+0x80>)
 8000556:	69da      	ldr	r2, [r3, #28]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	055b      	lsls	r3, r3, #21
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000562:	2302      	movs	r3, #2
 8000564:	425b      	negs	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	2103      	movs	r1, #3
 800056a:	0018      	movs	r0, r3
 800056c:	f000 feee 	bl	800134c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2103      	movs	r1, #3
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fee9 	bl	800134c <HAL_NVIC_SetPriority>
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 800057a:	2001      	movs	r0, #1
 800057c:	f000 fefb 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2103      	movs	r1, #3
 8000584:	2003      	movs	r0, #3
 8000586:	f000 fee1 	bl	800134c <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 fef3 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2103      	movs	r1, #3
 8000594:	2004      	movs	r0, #4
 8000596:	f000 fed9 	bl	800134c <HAL_NVIC_SetPriority>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800059a:	2004      	movs	r0, #4
 800059c:	f000 feeb 	bl	8001376 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	0019      	movs	r1, r3
 80005c2:	2015      	movs	r0, #21
 80005c4:	f000 fec2 	bl	800134c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005c8:	2015      	movs	r0, #21
 80005ca:	f000 fed4 	bl	8001376 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <HAL_InitTick+0xa8>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <HAL_InitTick+0xa8>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0289      	lsls	r1, r1, #10
 80005d8:	430a      	orrs	r2, r1
 80005da:	619a      	str	r2, [r3, #24]
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <HAL_InitTick+0xa8>)
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	029b      	lsls	r3, r3, #10
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ea:	230c      	movs	r3, #12
 80005ec:	18fa      	adds	r2, r7, r3
 80005ee:	2310      	movs	r3, #16
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 f9fb 	bl	80029f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005fa:	f002 f9e3 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 80005fe:	0003      	movs	r3, r0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	4914      	ldr	r1, [pc, #80]	; (8000658 <HAL_InitTick+0xac>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff fd7e 	bl	8000108 <__udivsi3>
 800060c:	0003      	movs	r3, r0
 800060e:	3b01      	subs	r3, #1
 8000610:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0xb0>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_InitTick+0xb4>)
 8000616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_InitTick+0xb0>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <HAL_InitTick+0xb8>)
 800061c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_InitTick+0xb0>)
 8000620:	6a3a      	ldr	r2, [r7, #32]
 8000622:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_InitTick+0xb0>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_InitTick+0xb0>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_InitTick+0xb0>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fb06 	bl	8002c44 <HAL_TIM_Base_Init>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d105      	bne.n	8000648 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_InitTick+0xb0>)
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fb58 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000644:	0003      	movs	r3, r0
 8000646:	e000      	b.n	800064a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000648:	2301      	movs	r3, #1
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b00a      	add	sp, #40	; 0x28
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000
 8000658:	000f4240 	.word	0x000f4240
 800065c:	200005a4 	.word	0x200005a4
 8000660:	40014400 	.word	0x40014400
 8000664:	000003e7 	.word	0x000003e7

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <PVD_VDDIO2_IRQHandler>:

/**
  * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
  */
void PVD_VDDIO2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

  /* USER CODE END PVD_VDDIO2_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800067c:	f001 fc94 	bl	8001fa8 <HAL_PWR_PVD_IRQHandler>
  HAL_PWREx_Vddio2Monitor_IRQHandler();
 8000680:	f001 fcac 	bl	8001fdc <HAL_PWREx_Vddio2Monitor_IRQHandler>
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

  /* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800068e:	f001 f993 	bl	80019b8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <DMA1_Ch1_IRQHandler+0x14>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 f87b 	bl	80017a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	2000091c 	.word	0x2000091c

080006bc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f86f 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x30>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f86b 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f867 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f863 	bl	80017a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000960 	.word	0x20000960
 80006ec:	200009a4 	.word	0x200009a4
 80006f0:	20000af8 	.word	0x20000af8
 80006f4:	20000b3c 	.word	0x20000b3c

080006f8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 f851 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x48>)
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f84d 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
 800070e:	0018      	movs	r0, r3
 8000710:	f001 f849 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f845 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800071e:	0018      	movs	r0, r3
 8000720:	f001 f841 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart5_tx);
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 f83d 	bl	80017a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800072e:	0018      	movs	r0, r3
 8000730:	f001 f839 	bl	80017a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	200009e8 	.word	0x200009e8
 8000740:	20000a2c 	.word	0x20000a2c
 8000744:	20000ab4 	.word	0x20000ab4
 8000748:	20000a70 	.word	0x20000a70
 800074c:	20000bc4 	.word	0x20000bc4
 8000750:	20000b80 	.word	0x20000b80
 8000754:	20000c08 	.word	0x20000c08

08000758 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <TIM16_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f002 fb1a 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200005a4 	.word	0x200005a4

08000770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <USART1_IRQHandler+0x28>)
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fd29 	bl	80031d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <USART1_IRQHandler+0x20>
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <USART1_IRQHandler+0x2c>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0552      	lsls	r2, r2, #21
 800078e:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200005ec 	.word	0x200005ec
 800079c:	e000ed04 	.word	0xe000ed04

080007a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <USART2_IRQHandler+0x14>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fd14 	bl	80031d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000674 	.word	0x20000674

080007b8 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <USART3_8_IRQHandler+0x2c>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fd08 	bl	80031d4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <USART3_8_IRQHandler+0x30>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fd04 	bl	80031d4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <USART3_8_IRQHandler+0x34>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fd00 	bl	80031d4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <USART3_8_IRQHandler+0x38>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fcfc 	bl	80031d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	200006fc 	.word	0x200006fc
 80007e8:	20000784 	.word	0x20000784
 80007ec:	2000080c 	.word	0x2000080c
 80007f0:	20000894 	.word	0x20000894

080007f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_USART1_UART_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_USART1_UART_Init+0x64>)
 800080c:	2296      	movs	r2, #150	; 0x96
 800080e:	0192      	lsls	r2, r2, #6
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_USART1_UART_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART1_UART_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART1_UART_Init+0x64>)
 800083e:	2210      	movs	r2, #16
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART1_UART_Init+0x64>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0152      	lsls	r2, r2, #5
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_USART1_UART_Init+0x64>)
 800084c:	2300      	movs	r3, #0
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	f003 fddd 	bl	8004410 <HAL_RS485Ex_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800085a:	f7ff fe5f 	bl	800051c <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200005ec 	.word	0x200005ec
 8000868:	40013800 	.word	0x40013800

0800086c <HAL_UART_MspInit>:
  /* USER CODE END USART6_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b095      	sub	sp, #84	; 0x54
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	243c      	movs	r4, #60	; 0x3c
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f005 fe7c 	bl	800657c <memset>
  if(uartHandle->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4ab0      	ldr	r2, [pc, #704]	; (8000b4c <HAL_UART_MspInit+0x2e0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d000      	beq.n	8000890 <HAL_UART_MspInit+0x24>
 800088e:	e0ac      	b.n	80009ea <HAL_UART_MspInit+0x17e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000890:	4baf      	ldr	r3, [pc, #700]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	4bae      	ldr	r3, [pc, #696]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	01c9      	lsls	r1, r1, #7
 800089a:	430a      	orrs	r2, r1
 800089c:	619a      	str	r2, [r3, #24]
 800089e:	4bac      	ldr	r3, [pc, #688]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4013      	ands	r3, r2
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80008aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4ba8      	ldr	r3, [pc, #672]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	4ba7      	ldr	r3, [pc, #668]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	0289      	lsls	r1, r1, #10
 80008b6:	430a      	orrs	r2, r1
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	4ba5      	ldr	r3, [pc, #660]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	029b      	lsls	r3, r3, #10
 80008c2:	4013      	ands	r3, r2
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
 80008c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	22b0      	movs	r2, #176	; 0xb0
 80008cc:	0152      	lsls	r2, r2, #5
 80008ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	0021      	movs	r1, r4
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2202      	movs	r2, #2
 80008d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2203      	movs	r2, #3
 80008e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	2390      	movs	r3, #144	; 0x90
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 f9c2 	bl	8001c7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80008f8:	4b96      	ldr	r3, [pc, #600]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 80008fa:	4a97      	ldr	r2, [pc, #604]	; (8000b58 <HAL_UART_MspInit+0x2ec>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fe:	4b95      	ldr	r3, [pc, #596]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000904:	4b93      	ldr	r3, [pc, #588]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800090a:	4b92      	ldr	r3, [pc, #584]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000910:	4b90      	ldr	r3, [pc, #576]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000918:	4b8e      	ldr	r3, [pc, #568]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000920:	4b8c      	ldr	r3, [pc, #560]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000922:	2220      	movs	r2, #32
 8000924:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000926:	4b8b      	ldr	r3, [pc, #556]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800092c:	4b89      	ldr	r3, [pc, #548]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe0e 	bl	8001550 <HAL_DMA_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000938:	f7ff fdf0 	bl	800051c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800093c:	4a87      	ldr	r2, [pc, #540]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 800093e:	23a8      	movs	r3, #168	; 0xa8
 8000940:	58d3      	ldr	r3, [r2, r3]
 8000942:	4986      	ldr	r1, [pc, #536]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000944:	220f      	movs	r2, #15
 8000946:	4393      	bics	r3, r2
 8000948:	22a8      	movs	r2, #168	; 0xa8
 800094a:	508b      	str	r3, [r1, r2]
 800094c:	4a83      	ldr	r2, [pc, #524]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 800094e:	23a8      	movs	r3, #168	; 0xa8
 8000950:	58d3      	ldr	r3, [r2, r3]
 8000952:	4982      	ldr	r1, [pc, #520]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000954:	2208      	movs	r2, #8
 8000956:	4313      	orrs	r3, r2
 8000958:	22a8      	movs	r2, #168	; 0xa8
 800095a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a7d      	ldr	r2, [pc, #500]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000960:	675a      	str	r2, [r3, #116]	; 0x74
 8000962:	4b7c      	ldr	r3, [pc, #496]	; (8000b54 <HAL_UART_MspInit+0x2e8>)
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000968:	4b7d      	ldr	r3, [pc, #500]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 800096a:	4a7e      	ldr	r2, [pc, #504]	; (8000b64 <HAL_UART_MspInit+0x2f8>)
 800096c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 8000970:	2210      	movs	r2, #16
 8000972:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000974:	4b7a      	ldr	r3, [pc, #488]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000980:	4b77      	ldr	r3, [pc, #476]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000988:	4b75      	ldr	r3, [pc, #468]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000990:	4b73      	ldr	r3, [pc, #460]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 8000992:	2220      	movs	r2, #32
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000996:	4b72      	ldr	r3, [pc, #456]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800099c:	4b70      	ldr	r3, [pc, #448]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fdd6 	bl	8001550 <HAL_DMA_Init>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80009a8:	f7ff fdb8 	bl	800051c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 80009ac:	4a6b      	ldr	r2, [pc, #428]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 80009ae:	23a8      	movs	r3, #168	; 0xa8
 80009b0:	58d3      	ldr	r3, [r2, r3]
 80009b2:	496a      	ldr	r1, [pc, #424]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 80009b4:	22f0      	movs	r2, #240	; 0xf0
 80009b6:	4393      	bics	r3, r2
 80009b8:	22a8      	movs	r2, #168	; 0xa8
 80009ba:	508b      	str	r3, [r1, r2]
 80009bc:	4a67      	ldr	r2, [pc, #412]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 80009be:	23a8      	movs	r3, #168	; 0xa8
 80009c0:	58d3      	ldr	r3, [r2, r3]
 80009c2:	4966      	ldr	r1, [pc, #408]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	4313      	orrs	r3, r2
 80009c8:	22a8      	movs	r2, #168	; 0xa8
 80009ca:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a64      	ldr	r2, [pc, #400]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 80009d0:	671a      	str	r2, [r3, #112]	; 0x70
 80009d2:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <HAL_UART_MspInit+0x2f4>)
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2103      	movs	r1, #3
 80009dc:	201b      	movs	r0, #27
 80009de:	f000 fcb5 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e2:	201b      	movs	r0, #27
 80009e4:	f000 fcc7 	bl	8001376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80009e8:	e3a9      	b.n	800113e <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a5e      	ldr	r2, [pc, #376]	; (8000b68 <HAL_UART_MspInit+0x2fc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d000      	beq.n	80009f6 <HAL_UART_MspInit+0x18a>
 80009f4:	e0c6      	b.n	8000b84 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80009f8:	69da      	ldr	r2, [r3, #28]
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0289      	lsls	r1, r1, #10
 8000a00:	430a      	orrs	r2, r1
 8000a02:	61da      	str	r2, [r3, #28]
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <HAL_UART_MspInit+0x2e4>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	213c      	movs	r1, #60	; 0x3c
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2203      	movs	r2, #3
 8000a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	2390      	movs	r3, #144	; 0x90
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	0011      	movs	r1, r2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 f910 	bl	8001c7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000a5c:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a5e:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_UART_MspInit+0x304>)
 8000a60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a62:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7a:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a86:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a8c:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fd5e 	bl	8001550 <HAL_DMA_Init>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x230>
      Error_Handler();
 8000a98:	f7ff fd40 	bl	800051c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 8000a9c:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000a9e:	23a8      	movs	r3, #168	; 0xa8
 8000aa0:	58d3      	ldr	r3, [r2, r3]
 8000aa2:	492e      	ldr	r1, [pc, #184]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000aa4:	4a33      	ldr	r2, [pc, #204]	; (8000b74 <HAL_UART_MspInit+0x308>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	22a8      	movs	r2, #168	; 0xa8
 8000aaa:	508b      	str	r3, [r1, r2]
 8000aac:	4a2b      	ldr	r2, [pc, #172]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000aae:	23a8      	movs	r3, #168	; 0xa8
 8000ab0:	58d3      	ldr	r3, [r2, r3]
 8000ab2:	492a      	ldr	r1, [pc, #168]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000ab4:	2290      	movs	r2, #144	; 0x90
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	22a8      	movs	r2, #168	; 0xa8
 8000abc:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000ac2:	675a      	str	r2, [r3, #116]	; 0x74
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <HAL_UART_MspInit+0x300>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000acc:	4a2b      	ldr	r2, [pc, #172]	; (8000b7c <HAL_UART_MspInit+0x310>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fd27 	bl	8001550 <HAL_DMA_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x29e>
      Error_Handler();
 8000b06:	f7ff fd09 	bl	800051c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000b0c:	23a8      	movs	r3, #168	; 0xa8
 8000b0e:	58d3      	ldr	r3, [r2, r3]
 8000b10:	4912      	ldr	r1, [pc, #72]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <HAL_UART_MspInit+0x314>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	22a8      	movs	r2, #168	; 0xa8
 8000b18:	508b      	str	r3, [r1, r2]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000b1c:	23a8      	movs	r3, #168	; 0xa8
 8000b1e:	58d3      	ldr	r3, [r2, r3]
 8000b20:	490e      	ldr	r1, [pc, #56]	; (8000b5c <HAL_UART_MspInit+0x2f0>)
 8000b22:	2290      	movs	r2, #144	; 0x90
 8000b24:	0212      	lsls	r2, r2, #8
 8000b26:	4313      	orrs	r3, r2
 8000b28:	22a8      	movs	r2, #168	; 0xa8
 8000b2a:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000b30:	671a      	str	r2, [r3, #112]	; 0x70
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x30c>)
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	201c      	movs	r0, #28
 8000b3e:	f000 fc05 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b42:	201c      	movs	r0, #28
 8000b44:	f000 fc17 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000b48:	e2f9      	b.n	800113e <HAL_UART_MspInit+0x8d2>
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	2000091c 	.word	0x2000091c
 8000b58:	40020008 	.word	0x40020008
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	20000960 	.word	0x20000960
 8000b64:	4002001c 	.word	0x4002001c
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	200009a4 	.word	0x200009a4
 8000b70:	40020030 	.word	0x40020030
 8000b74:	fffff0ff 	.word	0xfffff0ff
 8000b78:	200009e8 	.word	0x200009e8
 8000b7c:	40020044 	.word	0x40020044
 8000b80:	ffff0fff 	.word	0xffff0fff
  else if(uartHandle->Instance==USART3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4aae      	ldr	r2, [pc, #696]	; (8000e44 <HAL_UART_MspInit+0x5d8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d000      	beq.n	8000b90 <HAL_UART_MspInit+0x324>
 8000b8e:	e0a9      	b.n	8000ce4 <HAL_UART_MspInit+0x478>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b90:	4bad      	ldr	r3, [pc, #692]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	4bac      	ldr	r3, [pc, #688]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	02c9      	lsls	r1, r1, #11
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	61da      	str	r2, [r3, #28]
 8000b9e:	4baa      	ldr	r3, [pc, #680]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	02db      	lsls	r3, r3, #11
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4ba6      	ldr	r3, [pc, #664]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	4ba5      	ldr	r3, [pc, #660]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	02c9      	lsls	r1, r1, #11
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	4ba3      	ldr	r3, [pc, #652]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	02db      	lsls	r3, r3, #11
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bc8:	213c      	movs	r1, #60	; 0x3c
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	22c0      	movs	r2, #192	; 0xc0
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2203      	movs	r2, #3
 8000be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2204      	movs	r2, #4
 8000be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	4a97      	ldr	r2, [pc, #604]	; (8000e4c <HAL_UART_MspInit+0x5e0>)
 8000bee:	0019      	movs	r1, r3
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	f001 f843 	bl	8001c7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel5;
 8000bf6:	4b96      	ldr	r3, [pc, #600]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000bf8:	4a96      	ldr	r2, [pc, #600]	; (8000e54 <HAL_UART_MspInit+0x5e8>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfc:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c02:	4b93      	ldr	r3, [pc, #588]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c08:	4b91      	ldr	r3, [pc, #580]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0e:	4b90      	ldr	r3, [pc, #576]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c14:	4b8e      	ldr	r3, [pc, #568]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c1a:	4b8d      	ldr	r3, [pc, #564]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	4b8b      	ldr	r3, [pc, #556]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c26:	4b8a      	ldr	r3, [pc, #552]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fc91 	bl	8001550 <HAL_DMA_Init>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_UART_MspInit+0x3ca>
      Error_Handler();
 8000c32:	f7ff fc73 	bl	800051c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);
 8000c36:	4a88      	ldr	r2, [pc, #544]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000c38:	23a8      	movs	r3, #168	; 0xa8
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	4986      	ldr	r1, [pc, #536]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000c3e:	4a87      	ldr	r2, [pc, #540]	; (8000e5c <HAL_UART_MspInit+0x5f0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	22a8      	movs	r2, #168	; 0xa8
 8000c44:	508b      	str	r3, [r1, r2]
 8000c46:	4a84      	ldr	r2, [pc, #528]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000c48:	23a8      	movs	r3, #168	; 0xa8
 8000c4a:	58d3      	ldr	r3, [r2, r3]
 8000c4c:	4982      	ldr	r1, [pc, #520]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000c4e:	22a0      	movs	r2, #160	; 0xa0
 8000c50:	0312      	lsls	r2, r2, #12
 8000c52:	4313      	orrs	r3, r2
 8000c54:	22a8      	movs	r2, #168	; 0xa8
 8000c56:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a7d      	ldr	r2, [pc, #500]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c5c:	675a      	str	r2, [r3, #116]	; 0x74
 8000c5e:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <HAL_UART_MspInit+0x5e4>)
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel7;
 8000c64:	4b7e      	ldr	r3, [pc, #504]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c66:	4a7f      	ldr	r2, [pc, #508]	; (8000e64 <HAL_UART_MspInit+0x5f8>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6a:	4b7d      	ldr	r3, [pc, #500]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c76:	4b7a      	ldr	r3, [pc, #488]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7c:	4b78      	ldr	r3, [pc, #480]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c82:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b74      	ldr	r3, [pc, #464]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c94:	4b72      	ldr	r3, [pc, #456]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 fc5a 	bl	8001550 <HAL_DMA_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_UART_MspInit+0x438>
      Error_Handler();
 8000ca0:	f7ff fc3c 	bl	800051c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);
 8000ca4:	4a6c      	ldr	r2, [pc, #432]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000ca6:	23a8      	movs	r3, #168	; 0xa8
 8000ca8:	58d3      	ldr	r3, [r2, r3]
 8000caa:	496b      	ldr	r1, [pc, #428]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000cac:	4a6e      	ldr	r2, [pc, #440]	; (8000e68 <HAL_UART_MspInit+0x5fc>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	22a8      	movs	r2, #168	; 0xa8
 8000cb2:	508b      	str	r3, [r1, r2]
 8000cb4:	4a68      	ldr	r2, [pc, #416]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000cb6:	23a8      	movs	r3, #168	; 0xa8
 8000cb8:	58d3      	ldr	r3, [r2, r3]
 8000cba:	4967      	ldr	r1, [pc, #412]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000cbc:	22a0      	movs	r2, #160	; 0xa0
 8000cbe:	0512      	lsls	r2, r2, #20
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	22a8      	movs	r2, #168	; 0xa8
 8000cc4:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a65      	ldr	r2, [pc, #404]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000cca:	671a      	str	r2, [r3, #112]	; 0x70
 8000ccc:	4b64      	ldr	r3, [pc, #400]	; (8000e60 <HAL_UART_MspInit+0x5f4>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	201d      	movs	r0, #29
 8000cd8:	f000 fb38 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000cdc:	201d      	movs	r0, #29
 8000cde:	f000 fb4a 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000ce2:	e22c      	b.n	800113e <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART4)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a60      	ldr	r2, [pc, #384]	; (8000e6c <HAL_UART_MspInit+0x600>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d000      	beq.n	8000cf0 <HAL_UART_MspInit+0x484>
 8000cee:	e0cb      	b.n	8000e88 <HAL_UART_MspInit+0x61c>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000cf2:	69da      	ldr	r2, [r3, #28]
 8000cf4:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0309      	lsls	r1, r1, #12
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	61da      	str	r2, [r3, #28]
 8000cfe:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	031b      	lsls	r3, r3, #12
 8000d06:	4013      	ands	r3, r2
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0289      	lsls	r1, r1, #10
 8000d16:	430a      	orrs	r2, r1
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <HAL_UART_MspInit+0x5dc>)
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d28:	213c      	movs	r1, #60	; 0x3c
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2202      	movs	r2, #2
 8000d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2204      	movs	r2, #4
 8000d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	187a      	adds	r2, r7, r1
 8000d4a:	2390      	movs	r3, #144	; 0x90
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 ff93 	bl	8001c7c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_UART_MspInit+0x608>)
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8000d86:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 fbe1 	bl	8001550 <HAL_DMA_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x52a>
      Error_Handler();
 8000d92:	f7ff fbc3 	bl	800051c <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);
 8000d96:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000d98:	23a8      	movs	r3, #168	; 0xa8
 8000d9a:	58d3      	ldr	r3, [r2, r3]
 8000d9c:	492e      	ldr	r1, [pc, #184]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <HAL_UART_MspInit+0x60c>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	22a8      	movs	r2, #168	; 0xa8
 8000da4:	508b      	str	r3, [r1, r2]
 8000da6:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000da8:	23a8      	movs	r3, #168	; 0xa8
 8000daa:	58d3      	ldr	r3, [r2, r3]
 8000dac:	492a      	ldr	r1, [pc, #168]	; (8000e58 <HAL_UART_MspInit+0x5ec>)
 8000dae:	22b0      	movs	r2, #176	; 0xb0
 8000db0:	0412      	lsls	r2, r2, #16
 8000db2:	4313      	orrs	r3, r2
 8000db4:	22a8      	movs	r2, #168	; 0xa8
 8000db6:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000dbc:	675a      	str	r2, [r3, #116]	; 0x74
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_UART_MspInit+0x604>)
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart4_tx.Instance = DMA2_Channel1;
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <HAL_UART_MspInit+0x614>)
 8000dc8:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dcc:	2210      	movs	r2, #16
 8000dce:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fbaa 	bl	8001550 <HAL_DMA_Init>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x598>
      Error_Handler();
 8000e00:	f7ff fb8c 	bl	800051c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_UART_MspInit+0x618>)
 8000e06:	23a8      	movs	r3, #168	; 0xa8
 8000e08:	58d3      	ldr	r3, [r2, r3]
 8000e0a:	491e      	ldr	r1, [pc, #120]	; (8000e84 <HAL_UART_MspInit+0x618>)
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	4393      	bics	r3, r2
 8000e10:	22a8      	movs	r2, #168	; 0xa8
 8000e12:	508b      	str	r3, [r1, r2]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0x618>)
 8000e16:	23a8      	movs	r3, #168	; 0xa8
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	491a      	ldr	r1, [pc, #104]	; (8000e84 <HAL_UART_MspInit+0x618>)
 8000e1c:	220b      	movs	r2, #11
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	22a8      	movs	r2, #168	; 0xa8
 8000e22:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000e28:	671a      	str	r2, [r3, #112]	; 0x70
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x610>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2103      	movs	r1, #3
 8000e34:	201d      	movs	r0, #29
 8000e36:	f000 fa89 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000e3a:	201d      	movs	r0, #29
 8000e3c:	f000 fa9b 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000e40:	e17d      	b.n	800113e <HAL_UART_MspInit+0x8d2>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40004800 	.word	0x40004800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	20000a2c 	.word	0x20000a2c
 8000e54:	40020058 	.word	0x40020058
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	fff0ffff 	.word	0xfff0ffff
 8000e60:	20000a70 	.word	0x20000a70
 8000e64:	40020080 	.word	0x40020080
 8000e68:	f0ffffff 	.word	0xf0ffffff
 8000e6c:	40004c00 	.word	0x40004c00
 8000e70:	20000ab4 	.word	0x20000ab4
 8000e74:	4002006c 	.word	0x4002006c
 8000e78:	ff0fffff 	.word	0xff0fffff
 8000e7c:	20000af8 	.word	0x20000af8
 8000e80:	40020408 	.word	0x40020408
 8000e84:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART5)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4aae      	ldr	r2, [pc, #696]	; (8001148 <HAL_UART_MspInit+0x8dc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d000      	beq.n	8000e94 <HAL_UART_MspInit+0x628>
 8000e92:	e0a7      	b.n	8000fe4 <HAL_UART_MspInit+0x778>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000e94:	4bad      	ldr	r3, [pc, #692]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	4bac      	ldr	r3, [pc, #688]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0349      	lsls	r1, r1, #13
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	61da      	str	r2, [r3, #28]
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	035b      	lsls	r3, r3, #13
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4ba6      	ldr	r3, [pc, #664]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	4ba5      	ldr	r3, [pc, #660]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	02c9      	lsls	r1, r1, #11
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	4ba3      	ldr	r3, [pc, #652]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	02db      	lsls	r3, r3, #11
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ecc:	213c      	movs	r1, #60	; 0x3c
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2218      	movs	r2, #24
 8000ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2204      	movs	r2, #4
 8000eea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	4a98      	ldr	r2, [pc, #608]	; (8001150 <HAL_UART_MspInit+0x8e4>)
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	0010      	movs	r0, r2
 8000ef4:	f000 fec2 	bl	8001c7c <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA2_Channel2;
 8000ef8:	4b96      	ldr	r3, [pc, #600]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000efa:	4a97      	ldr	r2, [pc, #604]	; (8001158 <HAL_UART_MspInit+0x8ec>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b95      	ldr	r3, [pc, #596]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b93      	ldr	r3, [pc, #588]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f10:	4b90      	ldr	r3, [pc, #576]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 8000f1c:	4b8d      	ldr	r3, [pc, #564]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 8000f28:	4b8a      	ldr	r3, [pc, #552]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 fb10 	bl	8001550 <HAL_DMA_Init>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x6cc>
      Error_Handler();
 8000f34:	f7ff faf2 	bl	800051c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);
 8000f38:	4a88      	ldr	r2, [pc, #544]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000f3a:	23a8      	movs	r3, #168	; 0xa8
 8000f3c:	58d3      	ldr	r3, [r2, r3]
 8000f3e:	4987      	ldr	r1, [pc, #540]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000f40:	22f0      	movs	r2, #240	; 0xf0
 8000f42:	4393      	bics	r3, r2
 8000f44:	22a8      	movs	r2, #168	; 0xa8
 8000f46:	508b      	str	r3, [r1, r2]
 8000f48:	4a84      	ldr	r2, [pc, #528]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000f4a:	23a8      	movs	r3, #168	; 0xa8
 8000f4c:	58d3      	ldr	r3, [r2, r3]
 8000f4e:	4983      	ldr	r1, [pc, #524]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000f50:	22c0      	movs	r2, #192	; 0xc0
 8000f52:	4313      	orrs	r3, r2
 8000f54:	22a8      	movs	r2, #168	; 0xa8
 8000f56:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart5_rx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a7e      	ldr	r2, [pc, #504]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f5c:	675a      	str	r2, [r3, #116]	; 0x74
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <HAL_UART_MspInit+0x8e8>)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart5_tx.Instance = DMA2_Channel4;
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f66:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_UART_MspInit+0x8f8>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_usart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6a:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b7a      	ldr	r3, [pc, #488]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7c:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_usart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f82:	4b77      	ldr	r3, [pc, #476]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_usart5_tx.Init.Mode = DMA_NORMAL;
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_usart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart5_tx) != HAL_OK)
 8000f94:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 fada 	bl	8001550 <HAL_DMA_Init>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_UART_MspInit+0x738>
      Error_Handler();
 8000fa0:	f7ff fabc 	bl	800051c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);
 8000fa4:	4a6d      	ldr	r2, [pc, #436]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000fa6:	23a8      	movs	r3, #168	; 0xa8
 8000fa8:	58d3      	ldr	r3, [r2, r3]
 8000faa:	496c      	ldr	r1, [pc, #432]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000fac:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_UART_MspInit+0x8fc>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	22a8      	movs	r2, #168	; 0xa8
 8000fb2:	508b      	str	r3, [r1, r2]
 8000fb4:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000fb6:	23a8      	movs	r3, #168	; 0xa8
 8000fb8:	58d3      	ldr	r3, [r2, r3]
 8000fba:	4968      	ldr	r1, [pc, #416]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8000fbc:	22c0      	movs	r2, #192	; 0xc0
 8000fbe:	0212      	lsls	r2, r2, #8
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	22a8      	movs	r2, #168	; 0xa8
 8000fc4:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart5_tx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a65      	ldr	r2, [pc, #404]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000fca:	671a      	str	r2, [r3, #112]	; 0x70
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <HAL_UART_MspInit+0x8f4>)
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f000 f9b8 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000fdc:	201d      	movs	r0, #29
 8000fde:	f000 f9ca 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	e0ac      	b.n	800113e <HAL_UART_MspInit+0x8d2>
  else if(uartHandle->Instance==USART6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a60      	ldr	r2, [pc, #384]	; (800116c <HAL_UART_MspInit+0x900>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d000      	beq.n	8000ff0 <HAL_UART_MspInit+0x784>
 8000fee:	e0a6      	b.n	800113e <HAL_UART_MspInit+0x8d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ff0:	4b56      	ldr	r3, [pc, #344]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	4b55      	ldr	r3, [pc, #340]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2220      	movs	r2, #32
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b50      	ldr	r3, [pc, #320]	; (800114c <HAL_UART_MspInit+0x8e0>)
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <HAL_UART_MspInit+0x8e0>)
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0289      	lsls	r1, r1, #10
 8001012:	430a      	orrs	r2, r1
 8001014:	615a      	str	r2, [r3, #20]
 8001016:	4b4d      	ldr	r3, [pc, #308]	; (800114c <HAL_UART_MspInit+0x8e0>)
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001024:	213c      	movs	r1, #60	; 0x3c
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2230      	movs	r2, #48	; 0x30
 800102a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2202      	movs	r2, #2
 8001030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2203      	movs	r2, #3
 800103c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2205      	movs	r2, #5
 8001042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	187a      	adds	r2, r7, r1
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fe15 	bl	8001c7c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Channel3;
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001054:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_UART_MspInit+0x908>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001058:	4b45      	ldr	r3, [pc, #276]	; (8001170 <HAL_UART_MspInit+0x904>)
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_UART_MspInit+0x904>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <HAL_UART_MspInit+0x904>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_UART_MspInit+0x904>)
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fa63 	bl	8001550 <HAL_DMA_Init>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x826>
      Error_Handler();
 800108e:	f7ff fa45 	bl	800051c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8001094:	23a8      	movs	r3, #168	; 0xa8
 8001096:	58d3      	ldr	r3, [r2, r3]
 8001098:	4930      	ldr	r1, [pc, #192]	; (800115c <HAL_UART_MspInit+0x8f0>)
 800109a:	4a37      	ldr	r2, [pc, #220]	; (8001178 <HAL_UART_MspInit+0x90c>)
 800109c:	4013      	ands	r3, r2
 800109e:	22a8      	movs	r2, #168	; 0xa8
 80010a0:	508b      	str	r3, [r1, r2]
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <HAL_UART_MspInit+0x8f0>)
 80010a4:	23a8      	movs	r3, #168	; 0xa8
 80010a6:	58d3      	ldr	r3, [r2, r3]
 80010a8:	492c      	ldr	r1, [pc, #176]	; (800115c <HAL_UART_MspInit+0x8f0>)
 80010aa:	22d0      	movs	r2, #208	; 0xd0
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	4313      	orrs	r3, r2
 80010b0:	22a8      	movs	r2, #168	; 0xa8
 80010b2:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <HAL_UART_MspInit+0x904>)
 80010b8:	675a      	str	r2, [r3, #116]	; 0x74
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_UART_MspInit+0x904>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Instance = DMA2_Channel5;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_UART_MspInit+0x910>)
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_UART_MspInit+0x914>)
 80010c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_UART_MspInit+0x910>)
 80010c8:	2210      	movs	r2, #16
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_UART_MspInit+0x910>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_UART_MspInit+0x910>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_UART_MspInit+0x910>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_UART_MspInit+0x910>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_UART_MspInit+0x910>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_UART_MspInit+0x910>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_UART_MspInit+0x910>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fa2c 	bl	8001550 <HAL_DMA_Init>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x894>
      Error_Handler();
 80010fc:	f7ff fa0e 	bl	800051c <Error_Handler>
    __HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);
 8001100:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8001102:	23a8      	movs	r3, #168	; 0xa8
 8001104:	58d3      	ldr	r3, [r2, r3]
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_UART_MspInit+0x918>)
 800110a:	4013      	ands	r3, r2
 800110c:	22a8      	movs	r2, #168	; 0xa8
 800110e:	508b      	str	r3, [r1, r2]
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8001112:	23a8      	movs	r3, #168	; 0xa8
 8001114:	58d3      	ldr	r3, [r2, r3]
 8001116:	4911      	ldr	r1, [pc, #68]	; (800115c <HAL_UART_MspInit+0x8f0>)
 8001118:	22d0      	movs	r2, #208	; 0xd0
 800111a:	0312      	lsls	r2, r2, #12
 800111c:	4313      	orrs	r3, r2
 800111e:	22a8      	movs	r2, #168	; 0xa8
 8001120:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <HAL_UART_MspInit+0x910>)
 8001126:	671a      	str	r2, [r3, #112]	; 0x70
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x910>)
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2103      	movs	r1, #3
 8001132:	201d      	movs	r0, #29
 8001134:	f000 f90a 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001138:	201d      	movs	r0, #29
 800113a:	f000 f91c 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b015      	add	sp, #84	; 0x54
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40005000 	.word	0x40005000
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400
 8001154:	20000b3c 	.word	0x20000b3c
 8001158:	4002041c 	.word	0x4002041c
 800115c:	40020400 	.word	0x40020400
 8001160:	20000b80 	.word	0x20000b80
 8001164:	40020444 	.word	0x40020444
 8001168:	ffff0fff 	.word	0xffff0fff
 800116c:	40011400 	.word	0x40011400
 8001170:	20000bc4 	.word	0x20000bc4
 8001174:	40020430 	.word	0x40020430
 8001178:	fffff0ff 	.word	0xfffff0ff
 800117c:	20000c08 	.word	0x20000c08
 8001180:	40020458 	.word	0x40020458
 8001184:	fff0ffff 	.word	0xfff0ffff

08001188 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff fb32 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	; (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011b6:	f005 fa47 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff f911 	bl	80003e0 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011cc:	08006814 	.word	0x08006814
  ldr r2, =_sbss
 80011d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011d4:	20004f70 	.word	0x20004f70

080011d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_COMP_IRQHandler>
	...

080011dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_Init+0x24>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_Init+0x24>)
 80011e6:	2110      	movs	r1, #16
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff f9dd 	bl	80005ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff f999 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	001a      	movs	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	18d2      	adds	r2, r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_IncTick+0x20>)
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	20000004 	.word	0x20000004
 8001224:	20000c4c 	.word	0x20000c4c

08001228 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000c4c 	.word	0x20000c4c

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b7f      	cmp	r3, #127	; 0x7f
 800124e:	d809      	bhi.n	8001264 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	001a      	movs	r2, r3
 8001256:	231f      	movs	r3, #31
 8001258:	401a      	ands	r2, r3
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_EnableIRQ+0x30>)
 800125c:	2101      	movs	r1, #1
 800125e:	4091      	lsls	r1, r2
 8001260:	000a      	movs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b7f      	cmp	r3, #127	; 0x7f
 8001284:	d828      	bhi.n	80012d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <__NVIC_SetPriority+0xd4>)
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	33c0      	adds	r3, #192	; 0xc0
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	589b      	ldr	r3, [r3, r2]
 8001296:	1dfa      	adds	r2, r7, #7
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	0011      	movs	r1, r2
 800129c:	2203      	movs	r2, #3
 800129e:	400a      	ands	r2, r1
 80012a0:	00d2      	lsls	r2, r2, #3
 80012a2:	21ff      	movs	r1, #255	; 0xff
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	401a      	ands	r2, r3
 80012ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	22ff      	movs	r2, #255	; 0xff
 80012b4:	401a      	ands	r2, r3
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	0018      	movs	r0, r3
 80012bc:	2303      	movs	r3, #3
 80012be:	4003      	ands	r3, r0
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <__NVIC_SetPriority+0xd4>)
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	33c0      	adds	r3, #192	; 0xc0
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012d6:	e031      	b.n	800133c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <__NVIC_SetPriority+0xd8>)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	0019      	movs	r1, r3
 80012e0:	230f      	movs	r3, #15
 80012e2:	400b      	ands	r3, r1
 80012e4:	3b08      	subs	r3, #8
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3306      	adds	r3, #6
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1dfa      	adds	r2, r7, #7
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	0011      	movs	r1, r2
 80012f8:	2203      	movs	r2, #3
 80012fa:	400a      	ands	r2, r1
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	21ff      	movs	r1, #255	; 0xff
 8001300:	4091      	lsls	r1, r2
 8001302:	000a      	movs	r2, r1
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	401a      	ands	r2, r3
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	2303      	movs	r3, #3
 800131a:	4003      	ands	r3, r0
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <__NVIC_SetPriority+0xd8>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	001c      	movs	r4, r3
 8001328:	230f      	movs	r3, #15
 800132a:	4023      	ands	r3, r4
 800132c:	3b08      	subs	r3, #8
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	430a      	orrs	r2, r1
 8001332:	3306      	adds	r3, #6
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	18c3      	adds	r3, r0, r3
 8001338:	3304      	adds	r3, #4
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b003      	add	sp, #12
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	210f      	movs	r1, #15
 8001358:	187b      	adds	r3, r7, r1
 800135a:	1c02      	adds	r2, r0, #0
 800135c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	187b      	adds	r3, r7, r1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ff81 	bl	8001270 <__NVIC_SetPriority>
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	0002      	movs	r2, r0
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff57 	bl	800123c <__NVIC_EnableIRQ>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e056      	b.n	8001458 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7f5b      	ldrb	r3, [r3, #29]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7fe ff53 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	791b      	ldrb	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10c      	bne.n	80013ea <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a22      	ldr	r2, [pc, #136]	; (8001460 <HAL_CRC_Init+0xc8>)
 80013d6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2118      	movs	r1, #24
 80013e4:	438a      	bics	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00b      	b.n	8001402 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f000 f835 	bl	8001464 <HAL_CRCEx_Polynomial_Set>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d001      	beq.n	8001402 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e02a      	b.n	8001458 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4252      	negs	r2, r2
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	e004      	b.n	8001420 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6912      	ldr	r2, [r2, #16]
 800141e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2260      	movs	r2, #96	; 0x60
 8001428:	4393      	bics	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	4393      	bics	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	04c11db7 	.word	0x04c11db7

08001464 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	2117      	movs	r1, #23
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001478:	231f      	movs	r3, #31
 800147a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2201      	movs	r2, #1
 8001480:	4013      	ands	r3, r2
 8001482:	d103      	bne.n	800148c <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e045      	b.n	8001518 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	613a      	str	r2, [r7, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <HAL_CRCEx_Polynomial_Set+0x46>
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	221f      	movs	r2, #31
 800149c:	4013      	ands	r3, r2
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	40da      	lsrs	r2, r3
 80014a2:	0013      	movs	r3, r2
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f1      	beq.n	800148e <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d00f      	beq.n	80014d0 <HAL_CRCEx_Polynomial_Set+0x6c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b18      	cmp	r3, #24
 80014b4:	d824      	bhi.n	8001500 <HAL_CRCEx_Polynomial_Set+0x9c>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b10      	cmp	r3, #16
 80014ba:	d011      	beq.n	80014e0 <HAL_CRCEx_Polynomial_Set+0x7c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d81e      	bhi.n	8001500 <HAL_CRCEx_Polynomial_Set+0x9c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_CRCEx_Polynomial_Set+0xa6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d010      	beq.n	80014f0 <HAL_CRCEx_Polynomial_Set+0x8c>
 80014ce:	e017      	b.n	8001500 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d91b      	bls.n	800150e <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 80014d6:	2317      	movs	r3, #23
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80014de:	e016      	b.n	800150e <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	d915      	bls.n	8001512 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 80014e6:	2317      	movs	r3, #23
 80014e8:	18fb      	adds	r3, r7, r3
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80014ee:	e010      	b.n	8001512 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d90f      	bls.n	8001516 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80014f6:	2317      	movs	r3, #23
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80014fe:	e00a      	b.n	8001516 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
        break;
 8001508:	e006      	b.n	8001518 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	e004      	b.n	8001518 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	e002      	b.n	8001518 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	e000      	b.n	8001518 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001516:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8001518:	2317      	movs	r3, #23
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2218      	movs	r2, #24
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001540:	2317      	movs	r3, #23
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	781b      	ldrb	r3, [r3, #0]
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b006      	add	sp, #24
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e036      	b.n	80015d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2221      	movs	r2, #33	; 0x21
 800156a:	2102      	movs	r1, #2
 800156c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_DMA_Init+0x8c>)
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f9c4 	bl	8001944 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2221      	movs	r2, #33	; 0x21
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	ffffc00f 	.word	0xffffc00f

080015e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2317      	movs	r3, #23
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	5c9b      	ldrb	r3, [r3, r2]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_DMA_Start_IT+0x24>
 8001600:	2302      	movs	r3, #2
 8001602:	e04f      	b.n	80016a4 <HAL_DMA_Start_IT+0xc4>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	2101      	movs	r1, #1
 800160a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2221      	movs	r2, #33	; 0x21
 8001610:	5c9b      	ldrb	r3, [r3, r2]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d13a      	bne.n	800168e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2221      	movs	r2, #33	; 0x21
 800161c:	2102      	movs	r1, #2
 800161e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 f954 	bl	80018ea <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	210e      	movs	r1, #14
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e00f      	b.n	800167c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	210a      	movs	r1, #10
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2220      	movs	r2, #32
 8001692:	2100      	movs	r1, #0
 8001694:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800169e:	2317      	movs	r3, #23
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b006      	add	sp, #24
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2221      	movs	r2, #33	; 0x21
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2204      	movs	r2, #4
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e020      	b.n	8001714 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	210e      	movs	r1, #14
 80016de:	438a      	bics	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	4091      	lsls	r1, r2
 80016fe:	000a      	movs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2221      	movs	r2, #33	; 0x21
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	210f      	movs	r1, #15
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2221      	movs	r2, #33	; 0x21
 8001730:	5c9b      	ldrb	r3, [r3, r2]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d006      	beq.n	8001746 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2204      	movs	r2, #4
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e028      	b.n	8001798 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	210e      	movs	r1, #14
 8001752:	438a      	bics	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	438a      	bics	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	4091      	lsls	r1, r2
 8001772:	000a      	movs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2221      	movs	r2, #33	; 0x21
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	0010      	movs	r0, r2
 8001796:	4798      	blx	r3
    }
  }
  return status;
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b004      	add	sp, #16
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	d024      	beq.n	8001818 <HAL_DMA_IRQHandler+0x72>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2204      	movs	r2, #4
 80017d2:	4013      	ands	r3, r2
 80017d4:	d020      	beq.n	8001818 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2220      	movs	r2, #32
 80017de:	4013      	ands	r3, r2
 80017e0:	d107      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2104      	movs	r1, #4
 80017ee:	438a      	bics	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	2104      	movs	r1, #4
 80017fc:	4091      	lsls	r1, r2
 80017fe:	000a      	movs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <HAL_DMA_IRQHandler+0x66>
 800180a:	e06a      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	0010      	movs	r0, r2
 8001814:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001816:	e064      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	2202      	movs	r2, #2
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	d02b      	beq.n	8001880 <HAL_DMA_IRQHandler+0xda>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d027      	beq.n	8001880 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2220      	movs	r2, #32
 8001838:	4013      	ands	r3, r2
 800183a:	d10b      	bne.n	8001854 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	210a      	movs	r1, #10
 8001848:	438a      	bics	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2221      	movs	r2, #33	; 0x21
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	2102      	movs	r1, #2
 800185e:	4091      	lsls	r1, r2
 8001860:	000a      	movs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d036      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	0010      	movs	r0, r2
 800187c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800187e:	e030      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2208      	movs	r2, #8
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	d028      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2208      	movs	r2, #8
 8001894:	4013      	ands	r3, r2
 8001896:	d024      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	210e      	movs	r1, #14
 80018a4:	438a      	bics	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	2101      	movs	r1, #1
 80018b2:	4091      	lsls	r1, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2221      	movs	r2, #33	; 0x21
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2220      	movs	r2, #32
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	0010      	movs	r0, r2
 80018de:	4798      	blx	r3
    }
  }
}
 80018e0:	e7ff      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13c>
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}

080018ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	2101      	movs	r1, #1
 8001902:	4091      	lsls	r1, r2
 8001904:	000a      	movs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b10      	cmp	r3, #16
 8001916:	d108      	bne.n	800192a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001928:	e007      	b.n	800193a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	60da      	str	r2, [r3, #12]
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	001a      	movs	r2, r3
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <DMA_CalcBaseAndBitshift+0x60>)
 8001954:	429a      	cmp	r2, r3
 8001956:	d810      	bhi.n	800197a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <DMA_CalcBaseAndBitshift+0x64>)
 800195e:	4694      	mov	ip, r2
 8001960:	4463      	add	r3, ip
 8001962:	2114      	movs	r1, #20
 8001964:	0018      	movs	r0, r3
 8001966:	f7fe fbcf 	bl	8000108 <__udivsi3>
 800196a:	0003      	movs	r3, r0
 800196c:	009a      	lsls	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <DMA_CalcBaseAndBitshift+0x68>)
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001978:	e00f      	b.n	800199a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <DMA_CalcBaseAndBitshift+0x6c>)
 8001980:	4694      	mov	ip, r2
 8001982:	4463      	add	r3, ip
 8001984:	2114      	movs	r1, #20
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	009a      	lsls	r2, r3, #2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <DMA_CalcBaseAndBitshift+0x70>)
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	40020407 	.word	0x40020407
 80019a8:	bffdfff8 	.word	0xbffdfff8
 80019ac:	40020000 	.word	0x40020000
 80019b0:	bffdfbf8 	.word	0xbffdfbf8
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019c2:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2210      	movs	r2, #16
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d005      	beq.n	80019da <HAL_FLASH_IRQHandler+0x22>
 80019ce:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2204      	movs	r2, #4
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d10f      	bne.n	80019fa <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	4252      	negs	r2, r2
 80019e6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80019e8:	f000 f8fa 	bl	8001be0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f8d2 	bl	8001b98 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80019fa:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d000      	beq.n	8001a08 <HAL_FLASH_IRQHandler+0x50>
 8001a06:	e0a1      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a08:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d100      	bne.n	8001a1a <HAL_FLASH_IRQHandler+0x62>
 8001a18:	e098      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d132      	bne.n	8001a8a <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a2c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01b      	beq.n	8001a6e <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8001a36:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f8a2 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	4463      	add	r3, ip
 8001a50:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a5e:	2102      	movs	r1, #2
 8001a60:	438a      	bics	r2, r1
 8001a62:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f8ea 	bl	8001c40 <FLASH_PageErase>
 8001a6c:	e06e      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	425b      	negs	r3, r3
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f880 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>
 8001a88:	e060      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d10c      	bne.n	8001aae <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f871 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e04e      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ab6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8001ab8:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d021      	beq.n	8001b04 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	1c9a      	adds	r2, r3, #2
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ac8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	0419      	lsls	r1, r3, #16
 8001ad8:	0c14      	lsrs	r4, r2, #16
 8001ada:	430c      	orrs	r4, r1
 8001adc:	0c1d      	lsrs	r5, r3, #16
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ae0:	611c      	str	r4, [r3, #16]
 8001ae2:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	b292      	uxth	r2, r2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f853 	bl	8001ba8 <FLASH_Program_HalfWord>
 8001b02:	e023      	b.n	8001b4c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d105      	bne.n	8001b1a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f838 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>
 8001b18:	e011      	b.n	8001b3e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d106      	bne.n	8001b32 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 f82c 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>
 8001b30:	e005      	b.n	8001b3e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	3b06      	subs	r3, #6
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 f825 	bl	8001b88 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	4252      	negs	r2, r2
 8001b44:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10e      	bne.n	8001b74 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	438a      	bics	r2, r1
 8001b60:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_FLASH_IRQHandler+0x1c4>)
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <HAL_FLASH_IRQHandler+0x1cc>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	761a      	strb	r2, [r3, #24]
  }
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	20000c50 	.word	0x20000c50
 8001b84:	ffffebff 	.word	0xffffebff

08001b88 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	1cbb      	adds	r3, r7, #2
 8001bb4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <FLASH_Program_HalfWord+0x30>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <FLASH_Program_HalfWord+0x34>)
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <FLASH_Program_HalfWord+0x34>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1cba      	adds	r2, r7, #2
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	801a      	strh	r2, [r3, #0]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000c50 	.word	0x20000c50
 8001bdc:	40022000 	.word	0x40022000

08001be0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <FLASH_SetErrorCode+0x58>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2210      	movs	r2, #16
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d109      	bne.n	8001c0a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <FLASH_SetErrorCode+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <FLASH_SetErrorCode+0x5c>)
 8001c00:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2210      	movs	r2, #16
 8001c06:	4313      	orrs	r3, r2
 8001c08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <FLASH_SetErrorCode+0x58>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d109      	bne.n	8001c2a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <FLASH_SetErrorCode+0x5c>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <FLASH_SetErrorCode+0x5c>)
 8001c20:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2204      	movs	r2, #4
 8001c26:	4313      	orrs	r3, r2
 8001c28:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c2a:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <FLASH_SetErrorCode+0x58>)
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
}  
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	20000c50 	.word	0x20000c50

08001c40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <FLASH_PageErase+0x34>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <FLASH_PageErase+0x38>)
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <FLASH_PageErase+0x38>)
 8001c54:	2102      	movs	r1, #2
 8001c56:	430a      	orrs	r2, r1
 8001c58:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FLASH_PageErase+0x38>)
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <FLASH_PageErase+0x38>)
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <FLASH_PageErase+0x38>)
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000c50 	.word	0x20000c50
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	e155      	b.n	8001f38 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4091      	lsls	r1, r2
 8001c96:	000a      	movs	r2, r1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <HAL_GPIO_Init+0x28>
 8001ca2:	e146      	b.n	8001f32 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d130      	bne.n	8001d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	2201      	movs	r2, #1
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	0013      	movs	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2203      	movs	r2, #3
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d017      	beq.n	8001d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d123      	bne.n	8001dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	58d3      	ldr	r3, [r2, r3]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2207      	movs	r2, #7
 8001d78:	4013      	ands	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2107      	movs	r1, #7
 8001d92:	400b      	ands	r3, r1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_GPIO_Init+0x174>
 8001dee:	e0a0      	b.n	8001f32 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df0:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_GPIO_Init+0x2d4>)
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x2d4>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	619a      	str	r2, [r3, #24]
 8001dfc:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x2d4>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_GPIO_Init+0x2d8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	589b      	ldr	r3, [r3, r2]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	409a      	lsls	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	2390      	movs	r3, #144	; 0x90
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d019      	beq.n	8001e6a <HAL_GPIO_Init+0x1ee>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x1ea>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a46      	ldr	r2, [pc, #280]	; (8001f5c <HAL_GPIO_Init+0x2e0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x1e6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a45      	ldr	r2, [pc, #276]	; (8001f60 <HAL_GPIO_Init+0x2e4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x1e2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x1de>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x1f0>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	400a      	ands	r2, r1
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x2d8>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	035b      	lsls	r3, r3, #13
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed8:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	025b      	lsls	r3, r3, #9
 8001f20:	4013      	ands	r3, r2
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	40da      	lsrs	r2, r3
 8001f40:	1e13      	subs	r3, r2, #0
 8001f42:	d000      	beq.n	8001f46 <HAL_GPIO_Init+0x2ca>
 8001f44:	e6a2      	b.n	8001c8c <HAL_GPIO_Init+0x10>
  } 
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b006      	add	sp, #24
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	48001000 	.word	0x48001000
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	0008      	movs	r0, r1
 8001f76:	0011      	movs	r1, r2
 8001f78:	1cbb      	adds	r3, r7, #2
 8001f7a:	1c02      	adds	r2, r0, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	1c7b      	adds	r3, r7, #1
 8001f80:	1c0a      	adds	r2, r1, #0
 8001f82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f84:	1c7b      	adds	r3, r7, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	881a      	ldrh	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f96:	1cbb      	adds	r3, r7, #2
 8001f98:	881a      	ldrh	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PWR_PVD_IRQHandler+0x24>)
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001fb8:	f000 f80a 	bl	8001fd0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_PWR_PVD_IRQHandler+0x24>)
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	0252      	lsls	r2, r2, #9
 8001fc2:	615a      	str	r2, [r3, #20]
  }
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	da05      	bge.n	8001ff4 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 8001fe8:	f000 f80a 	bl	8002000 <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	0612      	lsls	r2, r2, #24
 8001ff2:	615a      	str	r2, [r3, #20]
  }
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 fb76 	bl	800270c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	d100      	bne.n	800202c <HAL_RCC_OscConfig+0x20>
 800202a:	e08e      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800202c:	4bc5      	ldr	r3, [pc, #788]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	220c      	movs	r2, #12
 8002032:	4013      	ands	r3, r2
 8002034:	2b04      	cmp	r3, #4
 8002036:	d00e      	beq.n	8002056 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002038:	4bc2      	ldr	r3, [pc, #776]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	2b08      	cmp	r3, #8
 8002042:	d117      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
 8002044:	4bbf      	ldr	r3, [pc, #764]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	23c0      	movs	r3, #192	; 0xc0
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	401a      	ands	r2, r3
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	429a      	cmp	r2, r3
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4bbb      	ldr	r3, [pc, #748]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	029b      	lsls	r3, r3, #10
 800205e:	4013      	ands	r3, r2
 8002060:	d100      	bne.n	8002064 <HAL_RCC_OscConfig+0x58>
 8002062:	e071      	b.n	8002148 <HAL_RCC_OscConfig+0x13c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d000      	beq.n	800206e <HAL_RCC_OscConfig+0x62>
 800206c:	e06c      	b.n	8002148 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 fb4c 	bl	800270c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x80>
 800207c:	4bb1      	ldr	r3, [pc, #708]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4bb0      	ldr	r3, [pc, #704]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0249      	lsls	r1, r1, #9
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e02f      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0xa2>
 8002094:	4bab      	ldr	r3, [pc, #684]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4baa      	ldr	r3, [pc, #680]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800209a:	49ab      	ldr	r1, [pc, #684]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	4ba8      	ldr	r3, [pc, #672]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4ba7      	ldr	r3, [pc, #668]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020a6:	49a9      	ldr	r1, [pc, #676]	; (800234c <HAL_RCC_OscConfig+0x340>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e01e      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10e      	bne.n	80020d4 <HAL_RCC_OscConfig+0xc8>
 80020b6:	4ba3      	ldr	r3, [pc, #652]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4ba2      	ldr	r3, [pc, #648]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	02c9      	lsls	r1, r1, #11
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	4b9f      	ldr	r3, [pc, #636]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0249      	lsls	r1, r1, #9
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xe0>
 80020d4:	4b9b      	ldr	r3, [pc, #620]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b9a      	ldr	r3, [pc, #616]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020da:	499b      	ldr	r1, [pc, #620]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	4b98      	ldr	r3, [pc, #608]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b97      	ldr	r3, [pc, #604]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020e6:	4999      	ldr	r1, [pc, #612]	; (800234c <HAL_RCC_OscConfig+0x340>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff f898 	bl	8001228 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fe:	f7ff f893 	bl	8001228 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e2fd      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002110:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	4013      	ands	r3, r2
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0xf2>
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff f883 	bl	8001228 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff f87e 	bl	8001228 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e2e8      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x11c>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x14a>
 8002154:	e06c      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002156:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	220c      	movs	r2, #12
 800215c:	4013      	ands	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002160:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
 8002168:	2b08      	cmp	r3, #8
 800216a:	d11f      	bne.n	80021ac <HAL_RCC_OscConfig+0x1a0>
 800216c:	4b75      	ldr	r3, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23c0      	movs	r3, #192	; 0xc0
 8002172:	025b      	lsls	r3, r3, #9
 8002174:	401a      	ands	r2, r3
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	429a      	cmp	r2, r3
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b71      	ldr	r3, [pc, #452]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x188>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e2bb      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	22f8      	movs	r2, #248	; 0xf8
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00da      	lsls	r2, r3, #3
 80021a4:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e041      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d024      	beq.n	80021fe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f832 	bl	8001228 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff f82d 	bl	8001228 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e297      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d0f1      	beq.n	80021ca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	22f8      	movs	r2, #248	; 0xf8
 80021ec:	4393      	bics	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00da      	lsls	r2, r3, #3
 80021f6:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e018      	b.n	8002230 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002204:	2101      	movs	r1, #1
 8002206:	438a      	bics	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f80d 	bl	8001228 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff f808 	bl	8001228 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e272      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d1f1      	bne.n	8002214 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002248:	2101      	movs	r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe ffeb 	bl	8001228 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7fe ffe6 	bl	8001228 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e250      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d0f1      	beq.n	8002258 <HAL_RCC_OscConfig+0x24c>
 8002274:	e018      	b.n	80022a8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800227c:	2101      	movs	r1, #1
 800227e:	438a      	bics	r2, r1
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe ffd1 	bl	8001228 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe ffcc 	bl	8001228 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e236      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d1f1      	bne.n	800228c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d100      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2a8>
 80022b2:	e0b5      	b.n	8002420 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b4:	201f      	movs	r0, #31
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022bc:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	d110      	bne.n	80022ea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0549      	lsls	r1, r1, #21
 80022d2:	430a      	orrs	r2, r1
 80022d4:	61da      	str	r2, [r3, #28]
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	055b      	lsls	r3, r3, #21
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002304:	f7fe ff90 	bl	8001228 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe ff8b 	bl	8001228 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1f5      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10f      	bne.n	8002354 <HAL_RCC_OscConfig+0x348>
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	e036      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40021000 	.word	0x40021000
 8002348:	fffeffff 	.word	0xfffeffff
 800234c:	fffbffff 	.word	0xfffbffff
 8002350:	40007000 	.word	0x40007000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x36a>
 800235c:	4bca      	ldr	r3, [pc, #808]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4bc9      	ldr	r3, [pc, #804]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002362:	2101      	movs	r1, #1
 8002364:	438a      	bics	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	4bc7      	ldr	r3, [pc, #796]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	4bc6      	ldr	r3, [pc, #792]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800236e:	2104      	movs	r1, #4
 8002370:	438a      	bics	r2, r1
 8002372:	621a      	str	r2, [r3, #32]
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x38c>
 800237e:	4bc2      	ldr	r3, [pc, #776]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4bc1      	ldr	r3, [pc, #772]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002384:	2104      	movs	r1, #4
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	4bbf      	ldr	r3, [pc, #764]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	4bbe      	ldr	r3, [pc, #760]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x3a4>
 8002398:	4bbb      	ldr	r3, [pc, #748]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	4bba      	ldr	r3, [pc, #744]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	4bb8      	ldr	r3, [pc, #736]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bb7      	ldr	r3, [pc, #732]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2104      	movs	r1, #4
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d014      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7fe ff36 	bl	8001228 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe ff31 	bl	8001228 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4aaf      	ldr	r2, [pc, #700]	; (800268c <HAL_RCC_OscConfig+0x680>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e19a      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4bac      	ldr	r3, [pc, #688]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3b6>
 80023e0:	e013      	b.n	800240a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe ff21 	bl	8001228 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	e009      	b.n	8002400 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff1c 	bl	8001228 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	4aa5      	ldr	r2, [pc, #660]	; (800268c <HAL_RCC_OscConfig+0x680>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e185      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4ba1      	ldr	r3, [pc, #644]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b9c      	ldr	r3, [pc, #624]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	4b9b      	ldr	r3, [pc, #620]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800241a:	499d      	ldr	r1, [pc, #628]	; (8002690 <HAL_RCC_OscConfig+0x684>)
 800241c:	400a      	ands	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	4013      	ands	r3, r2
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d12a      	bne.n	8002488 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002432:	4b95      	ldr	r3, [pc, #596]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002436:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002438:	2104      	movs	r1, #4
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800243e:	4b92      	ldr	r3, [pc, #584]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002442:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002444:	2101      	movs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe feed 	bl	8001228 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002454:	f7fe fee8 	bl	8001228 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e152      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d0f1      	beq.n	8002454 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002470:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	22f8      	movs	r2, #248	; 0xf8
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	00da      	lsls	r2, r3, #3
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
 8002486:	e034      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	3305      	adds	r3, #5
 800248e:	d111      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002490:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002494:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800249c:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	22f8      	movs	r2, #248	; 0xf8
 80024a2:	4393      	bics	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	4b76      	ldr	r3, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
 80024b2:	e01e      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b8:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ba:	2104      	movs	r1, #4
 80024bc:	430a      	orrs	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024c0:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c4:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe feac 	bl	8001228 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024d6:	f7fe fea7 	bl	8001228 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e111      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024e8:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f1      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	4013      	ands	r3, r2
 80024fa:	d05c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024fc:	4b62      	ldr	r3, [pc, #392]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	220c      	movs	r2, #12
 8002502:	4013      	ands	r3, r2
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d00e      	beq.n	8002526 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002508:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	220c      	movs	r2, #12
 800250e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002510:	2b08      	cmp	r3, #8
 8002512:	d114      	bne.n	800253e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002514:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	401a      	ands	r2, r3
 800251e:	23c0      	movs	r3, #192	; 0xc0
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	429a      	cmp	r2, r3
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5a8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d03c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0e6      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01b      	beq.n	800257e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002546:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254a:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0249      	lsls	r1, r1, #9
 8002550:	430a      	orrs	r2, r1
 8002552:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fe68 	bl	8001228 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255e:	f7fe fe63 	bl	8001228 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0cd      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002570:	4b45      	ldr	r3, [pc, #276]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	4013      	ands	r3, r2
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x552>
 800257c:	e01b      	b.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002584:	4943      	ldr	r1, [pc, #268]	; (8002694 <HAL_RCC_OscConfig+0x688>)
 8002586:	400a      	ands	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fe4d 	bl	8001228 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002594:	f7fe fe48 	bl	8001228 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b2      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x588>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025b4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d100      	bne.n	80025c0 <HAL_RCC_OscConfig+0x5b4>
 80025be:	e0a4      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	220c      	movs	r2, #12
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x5c2>
 80025cc:	e078      	b.n	80026c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d14c      	bne.n	8002670 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025dc:	492e      	ldr	r1, [pc, #184]	; (8002698 <HAL_RCC_OscConfig+0x68c>)
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fe21 	bl	8001228 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fe1c 	bl	8001228 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e086      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	220f      	movs	r2, #15
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800261a:	430a      	orrs	r2, r1
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x690>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	431a      	orrs	r2, r3
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0449      	lsls	r1, r1, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fdef 	bl	8001228 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fdea 	bl	8001228 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e054      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	049b      	lsls	r3, r3, #18
 800266a:	4013      	ands	r3, r2
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x644>
 800266e:	e04c      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <HAL_RCC_OscConfig+0x68c>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fdd4 	bl	8001228 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e015      	b.n	80026b2 <HAL_RCC_OscConfig+0x6a6>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	00001388 	.word	0x00001388
 8002690:	efffffff 	.word	0xefffffff
 8002694:	fffeffff 	.word	0xfffeffff
 8002698:	feffffff 	.word	0xfeffffff
 800269c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fdc2 	bl	8001228 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e02c      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCC_OscConfig+0x708>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	049b      	lsls	r3, r3, #18
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x694>
 80026be:	e024      	b.n	800270a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01f      	b.n	800270c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x708>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x708>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	23c0      	movs	r3, #192	; 0xc0
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	401a      	ands	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10e      	bne.n	8002706 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	220f      	movs	r2, #15
 80026ec:	401a      	ands	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	23f0      	movs	r3, #240	; 0xf0
 80026fa:	039b      	lsls	r3, r3, #14
 80026fc:	401a      	ands	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b008      	add	sp, #32
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0bf      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d911      	bls.n	800275e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0a6      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d015      	beq.n	8002794 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d006      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002778:	21e0      	movs	r1, #224	; 0xe0
 800277a:	00c9      	lsls	r1, r1, #3
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	22f0      	movs	r2, #240	; 0xf0
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d04c      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d120      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07a      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d114      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06e      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e062      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e05b      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7fe fd0e 	bl	8001228 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002810:	e009      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002812:	f7fe fd09 	bl	8001228 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e042      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	220c      	movs	r2, #12
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1ec      	bne.n	8002812 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d211      	bcs.n	800286a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	4393      	bics	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x19c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e020      	b.n	80028ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_ClockConfig+0x1a8>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002888:	f000 f820 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288c:	0001      	movs	r1, r0
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	220f      	movs	r2, #15
 8002896:	4013      	ands	r3, r2
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1ac>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1b0>)
 80028a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f7fd fe81 	bl	80005ac <HAL_InitTick>
  
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	00001388 	.word	0x00001388
 80028c0:	fffff8ff 	.word	0xfffff8ff
 80028c4:	080067ac 	.word	0x080067ac
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	220c      	movs	r2, #12
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d046      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xb8>
 80028f6:	d848      	bhi.n	800298a <HAL_RCC_GetSysClockFreq+0xbe>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d002      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x36>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d003      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x3c>
 8002900:	e043      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002904:	613b      	str	r3, [r7, #16]
      break;
 8002906:	e043      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	220f      	movs	r2, #15
 800290e:	4013      	ands	r3, r2
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	220f      	movs	r2, #15
 800291c:	4013      	ands	r3, r2
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	025b      	lsls	r3, r3, #9
 800292a:	401a      	ands	r2, r3
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	025b      	lsls	r3, r3, #9
 8002930:	429a      	cmp	r2, r3
 8002932:	d109      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	481a      	ldr	r0, [pc, #104]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002938:	f7fd fbe6 	bl	8000108 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	001a      	movs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4353      	muls	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e01a      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	401a      	ands	r2, r3
 8002950:	23c0      	movs	r3, #192	; 0xc0
 8002952:	025b      	lsls	r3, r3, #9
 8002954:	429a      	cmp	r2, r3
 8002956:	d109      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4814      	ldr	r0, [pc, #80]	; (80029ac <HAL_RCC_GetSysClockFreq+0xe0>)
 800295c:	f7fd fbd4 	bl	8000108 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	001a      	movs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4353      	muls	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e008      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002970:	f7fd fbca 	bl	8000108 <__udivsi3>
 8002974:	0003      	movs	r3, r0
 8002976:	001a      	movs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4353      	muls	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_GetSysClockFreq+0xe0>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800298c:	613b      	str	r3, [r7, #16]
      break;
 800298e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002990:	693b      	ldr	r3, [r7, #16]
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b006      	add	sp, #24
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	080067c4 	.word	0x080067c4
 80029a8:	080067d4 	.word	0x080067d4
 80029ac:	02dc6c00 	.word	0x02dc6c00

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	20000000 	.word	0x20000000

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029c8:	f7ff fff2 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029cc:	0001      	movs	r1, r0
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	2207      	movs	r2, #7
 80029d6:	4013      	ands	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	40d9      	lsrs	r1, r3
 80029de:	000b      	movs	r3, r1
}    
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080067bc 	.word	0x080067bc

080029f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCC_GetClockConfig+0x4c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_GetClockConfig+0x4c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	22f0      	movs	r2, #240	; 0xf0
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCC_GetClockConfig+0x4c>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	23e0      	movs	r3, #224	; 0xe0
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetClockConfig+0x50>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40022000 	.word	0x40022000

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a60:	e08e      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2017      	movs	r0, #23
 8002a64:	183b      	adds	r3, r7, r0
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	055b      	lsls	r3, r3, #21
 8002a72:	4013      	ands	r3, r2
 8002a74:	d110      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	4b6b      	ldr	r3, [pc, #428]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	0549      	lsls	r1, r1, #21
 8002a80:	430a      	orrs	r2, r1
 8002a82:	61da      	str	r2, [r3, #28]
 8002a84:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	055b      	lsls	r3, r3, #21
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	183b      	adds	r3, r7, r0
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d11a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa4:	4b60      	ldr	r3, [pc, #384]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0049      	lsls	r1, r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fbb9 	bl	8001228 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	e008      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fbb4 	bl	8001228 <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0a6      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ada:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	23c0      	movs	r3, #192	; 0xc0
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d034      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d02c      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	430a      	orrs	r2, r1
 8002b12:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b14:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b1a:	4945      	ldr	r1, [pc, #276]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fb7b 	bl	8001228 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e009      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fb76 	bl	8001228 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	4a3c      	ldr	r2, [pc, #240]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e067      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6a:	2317      	movs	r3, #23
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b7a:	492f      	ldr	r1, [pc, #188]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	2203      	movs	r2, #3
 8002b90:	4393      	bics	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	02db      	lsls	r3, r3, #11
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2220      	movs	r2, #32
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	2210      	movs	r2, #16
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4013      	ands	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	2240      	movs	r2, #64	; 0x40
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b006      	add	sp, #24
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	fffffcff 	.word	0xfffffcff
 8002c30:	fffeffff 	.word	0xfffeffff
 8002c34:	00001388 	.word	0x00001388
 8002c38:	efffffff 	.word	0xefffffff
 8002c3c:	fffcffff 	.word	0xfffcffff
 8002c40:	fff3ffff 	.word	0xfff3ffff

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e042      	b.n	8002cdc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	223d      	movs	r2, #61	; 0x3d
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223c      	movs	r2, #60	; 0x3c
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f839 	bl	8002ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223d      	movs	r2, #61	; 0x3d
 8002c76:	2102      	movs	r1, #2
 8002c78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f000 f9bd 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2246      	movs	r2, #70	; 0x46
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223e      	movs	r2, #62	; 0x3e
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2241      	movs	r2, #65	; 0x41
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2242      	movs	r2, #66	; 0x42
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2243      	movs	r2, #67	; 0x43
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2244      	movs	r2, #68	; 0x44
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2245      	movs	r2, #69	; 0x45
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223d      	movs	r2, #61	; 0x3d
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	223d      	movs	r2, #61	; 0x3d
 8002d00:	5c9b      	ldrb	r3, [r3, r2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e03b      	b.n	8002d84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	223d      	movs	r2, #61	; 0x3d
 8002d10:	2102      	movs	r1, #2
 8002d12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_TIM_Base_Start_IT+0x98>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x5a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x5a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x5a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2207      	movs	r2, #7
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d010      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	e007      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b004      	add	sp, #16
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40014000 	.word	0x40014000

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2202      	movs	r2, #2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d124      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11d      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	4252      	negs	r2, r2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f8fa 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e007      	b.n	8002df2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f8ed 	bl	8002fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f8f9 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d125      	bne.n	8002e52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11e      	bne.n	8002e52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2205      	movs	r2, #5
 8002e1a:	4252      	negs	r2, r2
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f8cd 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f8c0 	bl	8002fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f8cc 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d124      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d11d      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2209      	movs	r2, #9
 8002e74:	4252      	negs	r2, r2
 8002e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2203      	movs	r2, #3
 8002e86:	4013      	ands	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f8a1 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002e92:	e007      	b.n	8002ea4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f894 	bl	8002fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f8a0 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d125      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d11e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2211      	movs	r2, #17
 8002ecc:	4252      	negs	r2, r2
 8002ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	23c0      	movs	r3, #192	; 0xc0
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f874 	bl	8002fd4 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e007      	b.n	8002efe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 f867 	bl	8002fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 f873 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10f      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	4252      	negs	r2, r2
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd fae3 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d10f      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b80      	cmp	r3, #128	; 0x80
 8002f4c:	d108      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2281      	movs	r2, #129	; 0x81
 8002f54:	4252      	negs	r2, r2
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f8da 	bl	8003114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d10f      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2240      	movs	r2, #64	; 0x40
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d108      	bne.n	8002f8e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2241      	movs	r2, #65	; 0x41
 8002f82:	4252      	negs	r2, r2
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f833 	bl	8002ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2220      	movs	r2, #32
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d10f      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d108      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2221      	movs	r2, #33	; 0x21
 8002fb0:	4252      	negs	r2, r2
 8002fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f8a4 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d008      	beq.n	800302e <TIM_Base_SetConfig+0x2a>
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	429a      	cmp	r2, r3
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x2a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a30      	ldr	r2, [pc, #192]	; (80030ec <TIM_Base_SetConfig+0xe8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2270      	movs	r2, #112	; 0x70
 8003032:	4393      	bics	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	05db      	lsls	r3, r3, #23
 800304e:	429a      	cmp	r2, r3
 8003050:	d013      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a25      	ldr	r2, [pc, #148]	; (80030ec <TIM_Base_SetConfig+0xe8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <TIM_Base_SetConfig+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <TIM_Base_SetConfig+0xf0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <TIM_Base_SetConfig+0xf4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0x76>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a21      	ldr	r2, [pc, #132]	; (80030fc <TIM_Base_SetConfig+0xf8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <TIM_Base_SetConfig+0xfc>)
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	4393      	bics	r3, r2
 8003092:	001a      	movs	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0xce>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <TIM_Base_SetConfig+0xf0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0xce>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <TIM_Base_SetConfig+0xf4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0xce>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <TIM_Base_SetConfig+0xf8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d103      	bne.n	80030da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	615a      	str	r2, [r3, #20]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40002000 	.word	0x40002000
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	fffffcff 	.word	0xfffffcff

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	1dbb      	adds	r3, r7, #6
 8003130:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	589b      	ldr	r3, [r3, r2]
 8003138:	2b20      	cmp	r3, #32
 800313a:	d145      	bne.n	80031c8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_Receive_DMA+0x26>
 8003142:	1dbb      	adds	r3, r7, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e03d      	b.n	80031ca <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	429a      	cmp	r2, r3
 8003158:	d109      	bne.n	800316e <HAL_UART_Receive_DMA+0x4a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d001      	beq.n	800316e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e02d      	b.n	80031ca <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	4013      	ands	r3, r2
 8003180:	d019      	beq.n	80031b6 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003182:	f3ef 8310 	mrs	r3, PRIMASK
 8003186:	613b      	str	r3, [r7, #16]
  return(result);
 8003188:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	2301      	movs	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	04c9      	lsls	r1, r1, #19
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	881a      	ldrh	r2, [r3, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fec2 	bl	8003f48 <UART_Start_Receive_DMA>
 80031c4:	0003      	movs	r3, r0
 80031c6:	e000      	b.n	80031ca <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b008      	add	sp, #32
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b0ab      	sub	sp, #172	; 0xac
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	22a4      	movs	r2, #164	; 0xa4
 80031e4:	18b9      	adds	r1, r7, r2
 80031e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	20a0      	movs	r0, #160	; 0xa0
 80031f0:	1839      	adds	r1, r7, r0
 80031f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	219c      	movs	r1, #156	; 0x9c
 80031fc:	1879      	adds	r1, r7, r1
 80031fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003200:	0011      	movs	r1, r2
 8003202:	18bb      	adds	r3, r7, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a99      	ldr	r2, [pc, #612]	; (800346c <HAL_UART_IRQHandler+0x298>)
 8003208:	4013      	ands	r3, r2
 800320a:	2298      	movs	r2, #152	; 0x98
 800320c:	18bc      	adds	r4, r7, r2
 800320e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003210:	18bb      	adds	r3, r7, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d114      	bne.n	8003242 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003218:	187b      	adds	r3, r7, r1
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2220      	movs	r2, #32
 800321e:	4013      	ands	r3, r2
 8003220:	d00f      	beq.n	8003242 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003222:	183b      	adds	r3, r7, r0
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2220      	movs	r2, #32
 8003228:	4013      	ands	r3, r2
 800322a:	d00a      	beq.n	8003242 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003230:	2b00      	cmp	r3, #0
 8003232:	d100      	bne.n	8003236 <HAL_UART_IRQHandler+0x62>
 8003234:	e29e      	b.n	8003774 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	0010      	movs	r0, r2
 800323e:	4798      	blx	r3
      }
      return;
 8003240:	e298      	b.n	8003774 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003242:	2398      	movs	r3, #152	; 0x98
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d100      	bne.n	800324e <HAL_UART_IRQHandler+0x7a>
 800324c:	e114      	b.n	8003478 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800324e:	239c      	movs	r3, #156	; 0x9c
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d106      	bne.n	8003268 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800325a:	23a0      	movs	r3, #160	; 0xa0
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_UART_IRQHandler+0x29c>)
 8003262:	4013      	ands	r3, r2
 8003264:	d100      	bne.n	8003268 <HAL_UART_IRQHandler+0x94>
 8003266:	e107      	b.n	8003478 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003268:	23a4      	movs	r3, #164	; 0xa4
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	d012      	beq.n	800329a <HAL_UART_IRQHandler+0xc6>
 8003274:	23a0      	movs	r3, #160	; 0xa0
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4013      	ands	r3, r2
 8003280:	d00b      	beq.n	800329a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2284      	movs	r2, #132	; 0x84
 800328e:	589b      	ldr	r3, [r3, r2]
 8003290:	2201      	movs	r2, #1
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2184      	movs	r1, #132	; 0x84
 8003298:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800329a:	23a4      	movs	r3, #164	; 0xa4
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d011      	beq.n	80032ca <HAL_UART_IRQHandler+0xf6>
 80032a6:	239c      	movs	r3, #156	; 0x9c
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	4013      	ands	r3, r2
 80032b0:	d00b      	beq.n	80032ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2202      	movs	r2, #2
 80032b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2284      	movs	r2, #132	; 0x84
 80032be:	589b      	ldr	r3, [r3, r2]
 80032c0:	2204      	movs	r2, #4
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2184      	movs	r1, #132	; 0x84
 80032c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ca:	23a4      	movs	r3, #164	; 0xa4
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d011      	beq.n	80032fa <HAL_UART_IRQHandler+0x126>
 80032d6:	239c      	movs	r3, #156	; 0x9c
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	4013      	ands	r3, r2
 80032e0:	d00b      	beq.n	80032fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2204      	movs	r2, #4
 80032e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2284      	movs	r2, #132	; 0x84
 80032ee:	589b      	ldr	r3, [r3, r2]
 80032f0:	2202      	movs	r2, #2
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2184      	movs	r1, #132	; 0x84
 80032f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032fa:	23a4      	movs	r3, #164	; 0xa4
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	4013      	ands	r3, r2
 8003304:	d017      	beq.n	8003336 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003306:	23a0      	movs	r3, #160	; 0xa0
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2220      	movs	r2, #32
 800330e:	4013      	ands	r3, r2
 8003310:	d105      	bne.n	800331e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003312:	239c      	movs	r3, #156	; 0x9c
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800331c:	d00b      	beq.n	8003336 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2284      	movs	r2, #132	; 0x84
 800332a:	589b      	ldr	r3, [r3, r2]
 800332c:	2208      	movs	r2, #8
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2184      	movs	r1, #132	; 0x84
 8003334:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003336:	23a4      	movs	r3, #164	; 0xa4
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_UART_IRQHandler+0x198>
 8003344:	23a0      	movs	r3, #160	; 0xa0
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	04db      	lsls	r3, r3, #19
 800334e:	4013      	ands	r3, r2
 8003350:	d00c      	beq.n	800336c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2284      	movs	r2, #132	; 0x84
 8003360:	589b      	ldr	r3, [r3, r2]
 8003362:	2220      	movs	r2, #32
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2184      	movs	r1, #132	; 0x84
 800336a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2284      	movs	r2, #132	; 0x84
 8003370:	589b      	ldr	r3, [r3, r2]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d100      	bne.n	8003378 <HAL_UART_IRQHandler+0x1a4>
 8003376:	e1ff      	b.n	8003778 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003378:	23a4      	movs	r3, #164	; 0xa4
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2220      	movs	r2, #32
 8003380:	4013      	ands	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2220      	movs	r2, #32
 800338c:	4013      	ands	r3, r2
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	0010      	movs	r0, r2
 80033a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2284      	movs	r2, #132	; 0x84
 80033a6:	589b      	ldr	r3, [r3, r2]
 80033a8:	2194      	movs	r1, #148	; 0x94
 80033aa:	187a      	adds	r2, r7, r1
 80033ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d004      	beq.n	80033c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2228      	movs	r2, #40	; 0x28
 80033c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c4:	d047      	beq.n	8003456 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fe81 	bl	80040d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2240      	movs	r2, #64	; 0x40
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d137      	bne.n	800344c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e4:	2090      	movs	r0, #144	; 0x90
 80033e6:	183a      	adds	r2, r7, r0
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	2301      	movs	r3, #1
 80033ec:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	438a      	bics	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	183b      	adds	r3, r7, r0
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	2b00      	cmp	r3, #0
 800341a:	d012      	beq.n	8003442 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_UART_IRQHandler+0x2a0>)
 8003422:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	0018      	movs	r0, r3
 800342a:	f7fe f977 	bl	800171c <HAL_DMA_Abort_IT>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d01a      	beq.n	8003468 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	0018      	movs	r0, r3
 800343e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e012      	b.n	8003468 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f9bd 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344a:	e00d      	b.n	8003468 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 f9b8 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	e008      	b.n	8003468 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f9b3 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2284      	movs	r2, #132	; 0x84
 8003462:	2100      	movs	r1, #0
 8003464:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003466:	e187      	b.n	8003778 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	46c0      	nop			; (mov r8, r8)
    return;
 800346a:	e185      	b.n	8003778 <HAL_UART_IRQHandler+0x5a4>
 800346c:	0000080f 	.word	0x0000080f
 8003470:	04000120 	.word	0x04000120
 8003474:	0800438b 	.word	0x0800438b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	2b01      	cmp	r3, #1
 800347e:	d000      	beq.n	8003482 <HAL_UART_IRQHandler+0x2ae>
 8003480:	e139      	b.n	80036f6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003482:	23a4      	movs	r3, #164	; 0xa4
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2210      	movs	r2, #16
 800348a:	4013      	ands	r3, r2
 800348c:	d100      	bne.n	8003490 <HAL_UART_IRQHandler+0x2bc>
 800348e:	e132      	b.n	80036f6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003490:	23a0      	movs	r3, #160	; 0xa0
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2210      	movs	r2, #16
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_UART_IRQHandler+0x2ca>
 800349c:	e12b      	b.n	80036f6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d000      	beq.n	80034b6 <HAL_UART_IRQHandler+0x2e2>
 80034b4:	e09f      	b.n	80035f6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	217e      	movs	r1, #126	; 0x7e
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034c4:	187b      	adds	r3, r7, r1
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d100      	bne.n	80034ce <HAL_UART_IRQHandler+0x2fa>
 80034cc:	e156      	b.n	800377c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2258      	movs	r2, #88	; 0x58
 80034d2:	5a9b      	ldrh	r3, [r3, r2]
 80034d4:	187a      	adds	r2, r7, r1
 80034d6:	8812      	ldrh	r2, [r2, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d300      	bcc.n	80034de <HAL_UART_IRQHandler+0x30a>
 80034dc:	e14e      	b.n	800377c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	187a      	adds	r2, r7, r1
 80034e2:	215a      	movs	r1, #90	; 0x5a
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d06f      	beq.n	80035d2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f2:	f3ef 8310 	mrs	r3, PRIMASK
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80034fc:	2301      	movs	r3, #1
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	f383 8810 	msr	PRIMASK, r3
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	499e      	ldr	r1, [pc, #632]	; (800378c <HAL_UART_IRQHandler+0x5b8>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8310 	mrs	r3, PRIMASK
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352c:	677b      	str	r3, [r7, #116]	; 0x74
 800352e:	2301      	movs	r3, #1
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	438a      	bics	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800355c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355e:	673b      	str	r3, [r7, #112]	; 0x70
 8003560:	2301      	movs	r3, #1
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2280      	movs	r2, #128	; 0x80
 800358c:	2120      	movs	r1, #32
 800358e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800359c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a0:	2301      	movs	r3, #1
 80035a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2110      	movs	r1, #16
 80035b8:	438a      	bics	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fe f86d 	bl	80016ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2258      	movs	r2, #88	; 0x58
 80035dc:	5a9a      	ldrh	r2, [r3, r2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	215a      	movs	r1, #90	; 0x5a
 80035e2:	5a5b      	ldrh	r3, [r3, r1]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0011      	movs	r1, r2
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f8f0 	bl	80037d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035f4:	e0c2      	b.n	800377c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2258      	movs	r2, #88	; 0x58
 80035fa:	5a99      	ldrh	r1, [r3, r2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	225a      	movs	r2, #90	; 0x5a
 8003600:	5a9b      	ldrh	r3, [r3, r2]
 8003602:	b29a      	uxth	r2, r3
 8003604:	208e      	movs	r0, #142	; 0x8e
 8003606:	183b      	adds	r3, r7, r0
 8003608:	1a8a      	subs	r2, r1, r2
 800360a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	225a      	movs	r2, #90	; 0x5a
 8003610:	5a9b      	ldrh	r3, [r3, r2]
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d100      	bne.n	800361a <HAL_UART_IRQHandler+0x446>
 8003618:	e0b2      	b.n	8003780 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d100      	bne.n	8003624 <HAL_UART_IRQHandler+0x450>
 8003622:	e0ad      	b.n	8003780 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003624:	f3ef 8310 	mrs	r3, PRIMASK
 8003628:	60fb      	str	r3, [r7, #12]
  return(result);
 800362a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362c:	2488      	movs	r4, #136	; 0x88
 800362e:	193a      	adds	r2, r7, r4
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	2301      	movs	r3, #1
 8003634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4951      	ldr	r1, [pc, #324]	; (8003790 <HAL_UART_IRQHandler+0x5bc>)
 800364a:	400a      	ands	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	193b      	adds	r3, r7, r4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	61bb      	str	r3, [r7, #24]
  return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	2484      	movs	r4, #132	; 0x84
 8003666:	193a      	adds	r2, r7, r4
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	438a      	bics	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	193b      	adds	r3, r7, r4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	2120      	movs	r1, #32
 800369a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	2480      	movs	r4, #128	; 0x80
 80036b2:	193a      	adds	r2, r7, r4
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2110      	movs	r1, #16
 80036ce:	438a      	bics	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f870 	bl	80037d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f4:	e044      	b.n	8003780 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036f6:	23a4      	movs	r3, #164	; 0xa4
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	035b      	lsls	r3, r3, #13
 8003700:	4013      	ands	r3, r2
 8003702:	d010      	beq.n	8003726 <HAL_UART_IRQHandler+0x552>
 8003704:	239c      	movs	r3, #156	; 0x9c
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	03db      	lsls	r3, r3, #15
 800370e:	4013      	ands	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	0352      	lsls	r2, r2, #13
 800371a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0018      	movs	r0, r3
 8003720:	f000 fee6 	bl	80044f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003724:	e02f      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003726:	23a4      	movs	r3, #164	; 0xa4
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	4013      	ands	r3, r2
 8003730:	d00f      	beq.n	8003752 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003732:	23a0      	movs	r3, #160	; 0xa0
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	4013      	ands	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01e      	beq.n	8003784 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	0010      	movs	r0, r2
 800374e:	4798      	blx	r3
    }
    return;
 8003750:	e018      	b.n	8003784 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003752:	23a4      	movs	r3, #164	; 0xa4
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_UART_IRQHandler+0x5b2>
 800375e:	23a0      	movs	r3, #160	; 0xa0
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	4013      	ands	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 fe23 	bl	80043b8 <UART_EndTransmit_IT>
    return;
 8003772:	e008      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	e006      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	e004      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
      return;
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	e002      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	e000      	b.n	8003786 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003784:	46c0      	nop			; (mov r8, r8)
  }

}
 8003786:	46bd      	mov	sp, r7
 8003788:	b02b      	add	sp, #172	; 0xac
 800378a:	bd90      	pop	{r4, r7, pc}
 800378c:	fffffeff 	.word	0xfffffeff
 8003790:	fffffedf 	.word	0xfffffedf

08003794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	000a      	movs	r2, r1
 80037de:	1cbb      	adds	r3, r7, #2
 80037e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f4:	231e      	movs	r3, #30
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4abe      	ldr	r2, [pc, #760]	; (8003b14 <UART_SetConfig+0x328>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4ab9      	ldr	r2, [pc, #740]	; (8003b18 <UART_SetConfig+0x32c>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4ab0      	ldr	r2, [pc, #704]	; (8003b1c <UART_SetConfig+0x330>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4aac      	ldr	r2, [pc, #688]	; (8003b20 <UART_SetConfig+0x334>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d127      	bne.n	80038c2 <UART_SetConfig+0xd6>
 8003872:	4bac      	ldr	r3, [pc, #688]	; (8003b24 <UART_SetConfig+0x338>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	2203      	movs	r2, #3
 8003878:	4013      	ands	r3, r2
 800387a:	2b03      	cmp	r3, #3
 800387c:	d00d      	beq.n	800389a <UART_SetConfig+0xae>
 800387e:	d81b      	bhi.n	80038b8 <UART_SetConfig+0xcc>
 8003880:	2b02      	cmp	r3, #2
 8003882:	d014      	beq.n	80038ae <UART_SetConfig+0xc2>
 8003884:	d818      	bhi.n	80038b8 <UART_SetConfig+0xcc>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <UART_SetConfig+0xa4>
 800388a:	2b01      	cmp	r3, #1
 800388c:	d00a      	beq.n	80038a4 <UART_SetConfig+0xb8>
 800388e:	e013      	b.n	80038b8 <UART_SetConfig+0xcc>
 8003890:	231f      	movs	r3, #31
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e0bd      	b.n	8003a16 <UART_SetConfig+0x22a>
 800389a:	231f      	movs	r3, #31
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2202      	movs	r2, #2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e0b8      	b.n	8003a16 <UART_SetConfig+0x22a>
 80038a4:	231f      	movs	r3, #31
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2204      	movs	r2, #4
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e0b3      	b.n	8003a16 <UART_SetConfig+0x22a>
 80038ae:	231f      	movs	r3, #31
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2208      	movs	r2, #8
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e0ae      	b.n	8003a16 <UART_SetConfig+0x22a>
 80038b8:	231f      	movs	r3, #31
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2210      	movs	r2, #16
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e0a9      	b.n	8003a16 <UART_SetConfig+0x22a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a98      	ldr	r2, [pc, #608]	; (8003b28 <UART_SetConfig+0x33c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d134      	bne.n	8003936 <UART_SetConfig+0x14a>
 80038cc:	4b95      	ldr	r3, [pc, #596]	; (8003b24 <UART_SetConfig+0x338>)
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	23c0      	movs	r3, #192	; 0xc0
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	22c0      	movs	r2, #192	; 0xc0
 80038d8:	0292      	lsls	r2, r2, #10
 80038da:	4293      	cmp	r3, r2
 80038dc:	d017      	beq.n	800390e <UART_SetConfig+0x122>
 80038de:	22c0      	movs	r2, #192	; 0xc0
 80038e0:	0292      	lsls	r2, r2, #10
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d822      	bhi.n	800392c <UART_SetConfig+0x140>
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0292      	lsls	r2, r2, #10
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d019      	beq.n	8003922 <UART_SetConfig+0x136>
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	0292      	lsls	r2, r2, #10
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d81a      	bhi.n	800392c <UART_SetConfig+0x140>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <UART_SetConfig+0x118>
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	0252      	lsls	r2, r2, #9
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00a      	beq.n	8003918 <UART_SetConfig+0x12c>
 8003902:	e013      	b.n	800392c <UART_SetConfig+0x140>
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e083      	b.n	8003a16 <UART_SetConfig+0x22a>
 800390e:	231f      	movs	r3, #31
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e07e      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003918:	231f      	movs	r3, #31
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	2204      	movs	r2, #4
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e079      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003922:	231f      	movs	r3, #31
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	2208      	movs	r2, #8
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e074      	b.n	8003a16 <UART_SetConfig+0x22a>
 800392c:	231f      	movs	r3, #31
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2210      	movs	r2, #16
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e06f      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7c      	ldr	r2, [pc, #496]	; (8003b2c <UART_SetConfig+0x340>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d134      	bne.n	80039aa <UART_SetConfig+0x1be>
 8003940:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <UART_SetConfig+0x338>)
 8003942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003944:	23c0      	movs	r3, #192	; 0xc0
 8003946:	031b      	lsls	r3, r3, #12
 8003948:	4013      	ands	r3, r2
 800394a:	22c0      	movs	r2, #192	; 0xc0
 800394c:	0312      	lsls	r2, r2, #12
 800394e:	4293      	cmp	r3, r2
 8003950:	d017      	beq.n	8003982 <UART_SetConfig+0x196>
 8003952:	22c0      	movs	r2, #192	; 0xc0
 8003954:	0312      	lsls	r2, r2, #12
 8003956:	4293      	cmp	r3, r2
 8003958:	d822      	bhi.n	80039a0 <UART_SetConfig+0x1b4>
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	0312      	lsls	r2, r2, #12
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <UART_SetConfig+0x1aa>
 8003962:	2280      	movs	r2, #128	; 0x80
 8003964:	0312      	lsls	r2, r2, #12
 8003966:	4293      	cmp	r3, r2
 8003968:	d81a      	bhi.n	80039a0 <UART_SetConfig+0x1b4>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <UART_SetConfig+0x18c>
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	02d2      	lsls	r2, r2, #11
 8003972:	4293      	cmp	r3, r2
 8003974:	d00a      	beq.n	800398c <UART_SetConfig+0x1a0>
 8003976:	e013      	b.n	80039a0 <UART_SetConfig+0x1b4>
 8003978:	231f      	movs	r3, #31
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e049      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003982:	231f      	movs	r3, #31
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e044      	b.n	8003a16 <UART_SetConfig+0x22a>
 800398c:	231f      	movs	r3, #31
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2204      	movs	r2, #4
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e03f      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003996:	231f      	movs	r3, #31
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2208      	movs	r2, #8
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e03a      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039a0:	231f      	movs	r3, #31
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2210      	movs	r2, #16
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	e035      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a60      	ldr	r2, [pc, #384]	; (8003b30 <UART_SetConfig+0x344>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d104      	bne.n	80039be <UART_SetConfig+0x1d2>
 80039b4:	231f      	movs	r3, #31
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e02b      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <UART_SetConfig+0x348>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d104      	bne.n	80039d2 <UART_SetConfig+0x1e6>
 80039c8:	231f      	movs	r3, #31
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e021      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <UART_SetConfig+0x34c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d104      	bne.n	80039e6 <UART_SetConfig+0x1fa>
 80039dc:	231f      	movs	r3, #31
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e017      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a54      	ldr	r2, [pc, #336]	; (8003b3c <UART_SetConfig+0x350>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d104      	bne.n	80039fa <UART_SetConfig+0x20e>
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e00d      	b.n	8003a16 <UART_SetConfig+0x22a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a50      	ldr	r2, [pc, #320]	; (8003b40 <UART_SetConfig+0x354>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d104      	bne.n	8003a0e <UART_SetConfig+0x222>
 8003a04:	231f      	movs	r3, #31
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e003      	b.n	8003a16 <UART_SetConfig+0x22a>
 8003a0e:	231f      	movs	r3, #31
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2210      	movs	r2, #16
 8003a14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d15c      	bne.n	8003adc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003a22:	231f      	movs	r3, #31
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d015      	beq.n	8003a58 <UART_SetConfig+0x26c>
 8003a2c:	dc18      	bgt.n	8003a60 <UART_SetConfig+0x274>
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00d      	beq.n	8003a4e <UART_SetConfig+0x262>
 8003a32:	dc15      	bgt.n	8003a60 <UART_SetConfig+0x274>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <UART_SetConfig+0x252>
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0x25c>
 8003a3c:	e010      	b.n	8003a60 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3e:	f7fe ffc1 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8003a42:	0003      	movs	r3, r0
 8003a44:	61bb      	str	r3, [r7, #24]
        break;
 8003a46:	e012      	b.n	8003a6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a48:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <UART_SetConfig+0x358>)
 8003a4a:	61bb      	str	r3, [r7, #24]
        break;
 8003a4c:	e00f      	b.n	8003a6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7fe ff3d 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        break;
 8003a56:	e00a      	b.n	8003a6e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	61bb      	str	r3, [r7, #24]
        break;
 8003a5e:	e006      	b.n	8003a6e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a64:	231e      	movs	r3, #30
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
        break;
 8003a6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d100      	bne.n	8003a76 <UART_SetConfig+0x28a>
 8003a74:	e095      	b.n	8003ba2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	18d2      	adds	r2, r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0019      	movs	r1, r3
 8003a88:	0010      	movs	r0, r2
 8003a8a:	f7fc fb3d 	bl	8000108 <__udivsi3>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d91c      	bls.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	025b      	lsls	r3, r3, #9
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d217      	bcs.n	8003ad2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	200e      	movs	r0, #14
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	210f      	movs	r1, #15
 8003aac:	438a      	bics	r2, r1
 8003aae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b299      	uxth	r1, r3
 8003abc:	183b      	adds	r3, r7, r0
 8003abe:	183a      	adds	r2, r7, r0
 8003ac0:	8812      	ldrh	r2, [r2, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	183a      	adds	r2, r7, r0
 8003acc:	8812      	ldrh	r2, [r2, #0]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e067      	b.n	8003ba2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad2:	231e      	movs	r3, #30
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e062      	b.n	8003ba2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003adc:	231f      	movs	r3, #31
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d030      	beq.n	8003b48 <UART_SetConfig+0x35c>
 8003ae6:	dc33      	bgt.n	8003b50 <UART_SetConfig+0x364>
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d00d      	beq.n	8003b08 <UART_SetConfig+0x31c>
 8003aec:	dc30      	bgt.n	8003b50 <UART_SetConfig+0x364>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <UART_SetConfig+0x30c>
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d005      	beq.n	8003b02 <UART_SetConfig+0x316>
 8003af6:	e02b      	b.n	8003b50 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe ff64 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8003afc:	0003      	movs	r3, r0
 8003afe:	61bb      	str	r3, [r7, #24]
        break;
 8003b00:	e02d      	b.n	8003b5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <UART_SetConfig+0x358>)
 8003b04:	61bb      	str	r3, [r7, #24]
        break;
 8003b06:	e02a      	b.n	8003b5e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b08:	f7fe fee0 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	61bb      	str	r3, [r7, #24]
        break;
 8003b10:	e025      	b.n	8003b5e <UART_SetConfig+0x372>
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	efff69f3 	.word	0xefff69f3
 8003b18:	ffffcfff 	.word	0xffffcfff
 8003b1c:	fffff4ff 	.word	0xfffff4ff
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40004400 	.word	0x40004400
 8003b2c:	40004800 	.word	0x40004800
 8003b30:	40004c00 	.word	0x40004c00
 8003b34:	40005000 	.word	0x40005000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	40011800 	.word	0x40011800
 8003b40:	40011c00 	.word	0x40011c00
 8003b44:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	61bb      	str	r3, [r7, #24]
        break;
 8003b4e:	e006      	b.n	8003b5e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b54:	231e      	movs	r3, #30
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
        break;
 8003b5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01e      	beq.n	8003ba2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	085a      	lsrs	r2, r3, #1
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	18d2      	adds	r2, r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0019      	movs	r1, r3
 8003b74:	0010      	movs	r0, r2
 8003b76:	f7fc fac7 	bl	8000108 <__udivsi3>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d90a      	bls.n	8003b9a <UART_SetConfig+0x3ae>
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	025b      	lsls	r3, r3, #9
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d205      	bcs.n	8003b9a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e003      	b.n	8003ba2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9a:	231e      	movs	r3, #30
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bae:	231e      	movs	r3, #30
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b008      	add	sp, #32
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d00b      	beq.n	8003be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <UART_AdvFeatureConfig+0x144>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2202      	movs	r2, #2
 8003bec:	4013      	ands	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a43      	ldr	r2, [pc, #268]	; (8003d04 <UART_AdvFeatureConfig+0x148>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <UART_AdvFeatureConfig+0x14c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2208      	movs	r2, #8
 8003c30:	4013      	ands	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <UART_AdvFeatureConfig+0x150>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2210      	movs	r2, #16
 8003c52:	4013      	ands	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <UART_AdvFeatureConfig+0x154>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2220      	movs	r2, #32
 8003c74:	4013      	ands	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <UART_AdvFeatureConfig+0x158>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2240      	movs	r2, #64	; 0x40
 8003c96:	4013      	ands	r3, r2
 8003c98:	d01d      	beq.n	8003cd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <UART_AdvFeatureConfig+0x15c>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	035b      	lsls	r3, r3, #13
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d10b      	bne.n	8003cd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <UART_AdvFeatureConfig+0x160>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <UART_AdvFeatureConfig+0x164>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fffdffff 	.word	0xfffdffff
 8003d04:	fffeffff 	.word	0xfffeffff
 8003d08:	fffbffff 	.word	0xfffbffff
 8003d0c:	ffff7fff 	.word	0xffff7fff
 8003d10:	ffffefff 	.word	0xffffefff
 8003d14:	ffffdfff 	.word	0xffffdfff
 8003d18:	ffefffff 	.word	0xffefffff
 8003d1c:	ff9fffff 	.word	0xff9fffff
 8003d20:	fff7ffff 	.word	0xfff7ffff

08003d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b092      	sub	sp, #72	; 0x48
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2284      	movs	r2, #132	; 0x84
 8003d30:	2100      	movs	r1, #0
 8003d32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d34:	f7fd fa78 	bl	8001228 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2208      	movs	r2, #8
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d12c      	bne.n	8003da4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	0391      	lsls	r1, r2, #14
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <UART_CheckIdleState+0x148>)
 8003d54:	9200      	str	r2, [sp, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f000 f88c 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d021      	beq.n	8003da4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d60:	f3ef 8310 	mrs	r3, PRIMASK
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	438a      	bics	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2278      	movs	r2, #120	; 0x78
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e05f      	b.n	8003e64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2204      	movs	r2, #4
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d146      	bne.n	8003e40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	03d1      	lsls	r1, r2, #15
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <UART_CheckIdleState+0x148>)
 8003dbc:	9200      	str	r2, [sp, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f000 f858 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d03b      	beq.n	8003e40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4921      	ldr	r1, [pc, #132]	; (8003e70 <UART_CheckIdleState+0x14c>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
 8003e04:	2301      	movs	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f383 8810 	msr	PRIMASK, r3
}
 8003e2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	2120      	movs	r1, #32
 8003e32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2278      	movs	r2, #120	; 0x78
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e011      	b.n	8003e64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2280      	movs	r2, #128	; 0x80
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2278      	movs	r2, #120	; 0x78
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b010      	add	sp, #64	; 0x40
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	01ffffff 	.word	0x01ffffff
 8003e70:	fffffedf 	.word	0xfffffedf

08003e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	1dfb      	adds	r3, r7, #7
 8003e82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	e04b      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d048      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fd f9cc 	bl	8001228 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e04b      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2204      	movs	r2, #4
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d035      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d111      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f900 	bl	80040d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2284      	movs	r2, #132	; 0x84
 8003ed4:	2108      	movs	r1, #8
 8003ed6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2278      	movs	r2, #120	; 0x78
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e02c      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	401a      	ands	r2, r3
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d112      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2280      	movs	r2, #128	; 0x80
 8003efe:	0112      	lsls	r2, r2, #4
 8003f00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 f8e3 	bl	80040d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2284      	movs	r2, #132	; 0x84
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2278      	movs	r2, #120	; 0x78
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	425a      	negs	r2, r3
 8003f2e:	4153      	adcs	r3, r2
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	001a      	movs	r2, r3
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d0a4      	beq.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b090      	sub	sp, #64	; 0x40
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1dba      	adds	r2, r7, #6
 8003f60:	2158      	movs	r1, #88	; 0x58
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2284      	movs	r2, #132	; 0x84
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	2122      	movs	r1, #34	; 0x22
 8003f74:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d028      	beq.n	8003fd0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <UART_Start_Receive_DMA+0x134>)
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <UART_Start_Receive_DMA+0x138>)
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <UART_Start_Receive_DMA+0x13c>)
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	0019      	movs	r1, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	001a      	movs	r2, r3
 8003fb0:	1dbb      	adds	r3, r7, #6
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f7fd fb14 	bl	80015e0 <HAL_DMA_Start_IT>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d009      	beq.n	8003fd0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2284      	movs	r2, #132	; 0x84
 8003fc0:	2110      	movs	r1, #16
 8003fc2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	2120      	movs	r1, #32
 8003fca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e050      	b.n	8004072 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d019      	beq.n	800400c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	0049      	lsls	r1, r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400c:	f3ef 8310 	mrs	r3, PRIMASK
 8004010:	613b      	str	r3, [r7, #16]
  return(result);
 8004012:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403e:	f3ef 8310 	mrs	r3, PRIMASK
 8004042:	61fb      	str	r3, [r7, #28]
  return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
 8004048:	2301      	movs	r3, #1
 800404a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2140      	movs	r1, #64	; 0x40
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f383 8810 	msr	PRIMASK, r3
}
 800406e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b010      	add	sp, #64	; 0x40
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	08004199 	.word	0x08004199
 8004080:	080042c5 	.word	0x080042c5
 8004084:	08004307 	.word	0x08004307

08004088 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	60bb      	str	r3, [r7, #8]
  return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	2301      	movs	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	21c0      	movs	r1, #192	; 0xc0
 80040b2:	438a      	bics	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b006      	add	sp, #24
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	; 0x38
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d8:	f3ef 8310 	mrs	r3, PRIMASK
 80040dc:	617b      	str	r3, [r7, #20]
  return(result);
 80040de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	2301      	movs	r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4926      	ldr	r1, [pc, #152]	; (8004194 <UART_EndRxTransfer+0xc4>)
 80040fa:	400a      	ands	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	623b      	str	r3, [r7, #32]
  return(result);
 8004110:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	2b01      	cmp	r3, #1
 8004142:	d118      	bne.n	8004176 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004144:	f3ef 8310 	mrs	r3, PRIMASK
 8004148:	60bb      	str	r3, [r7, #8]
  return(result);
 800414a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	2301      	movs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2110      	movs	r1, #16
 8004166:	438a      	bics	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	2120      	movs	r1, #32
 800417c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	669a      	str	r2, [r3, #104]	; 0x68
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b00e      	add	sp, #56	; 0x38
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	fffffedf 	.word	0xfffffedf

08004198 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b094      	sub	sp, #80	; 0x50
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d06f      	beq.n	800428e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	225a      	movs	r2, #90	; 0x5a
 80041b2:	2100      	movs	r1, #0
 80041b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80041bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	2301      	movs	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	493a      	ldr	r1, [pc, #232]	; (80042c0 <UART_DMAReceiveCplt+0x128>)
 80041d8:	400a      	ands	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
 80041f2:	2301      	movs	r3, #1
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	f383 8810 	msr	PRIMASK, r3
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2101      	movs	r1, #1
 800420a:	438a      	bics	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421a:	f3ef 8310 	mrs	r3, PRIMASK
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
 8004224:	2301      	movs	r3, #1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	f383 8810 	msr	PRIMASK, r3
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2140      	movs	r1, #64	; 0x40
 800423c:	438a      	bics	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	f383 8810 	msr	PRIMASK, r3
}
 800424a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	2280      	movs	r2, #128	; 0x80
 8004250:	2120      	movs	r1, #32
 8004252:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	2b01      	cmp	r3, #1
 800425a:	d118      	bne.n	800428e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8310 	mrs	r3, PRIMASK
 8004260:	60fb      	str	r3, [r7, #12]
  return(result);
 8004262:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004266:	2301      	movs	r3, #1
 8004268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2110      	movs	r1, #16
 800427e:	438a      	bics	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	2200      	movs	r2, #0
 8004292:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004298:	2b01      	cmp	r3, #1
 800429a:	d108      	bne.n	80042ae <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429e:	2258      	movs	r2, #88	; 0x58
 80042a0:	5a9a      	ldrh	r2, [r3, r2]
 80042a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff fa94 	bl	80037d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ac:	e003      	b.n	80042b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fa77 	bl	80037a4 <HAL_UART_RxCpltCallback>
}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b014      	add	sp, #80	; 0x50
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	fffffeff 	.word	0xfffffeff

080042c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10a      	bne.n	80042f6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2258      	movs	r2, #88	; 0x58
 80042e4:	5a9b      	ldrh	r3, [r3, r2]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fa70 	bl	80037d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042f4:	e003      	b.n	80042fe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff fa5b 	bl	80037b4 <HAL_UART_RxHalfCpltCallback>
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}

08004306 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004318:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2280      	movs	r2, #128	; 0x80
 800432a:	4013      	ands	r3, r2
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d10a      	bne.n	8004346 <UART_DMAError+0x40>
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b21      	cmp	r3, #33	; 0x21
 8004334:	d107      	bne.n	8004346 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2252      	movs	r2, #82	; 0x52
 800433a:	2100      	movs	r1, #0
 800433c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff fea1 	bl	8004088 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2240      	movs	r2, #64	; 0x40
 800434e:	4013      	ands	r3, r2
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d10a      	bne.n	800436a <UART_DMAError+0x64>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b22      	cmp	r3, #34	; 0x22
 8004358:	d107      	bne.n	800436a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	225a      	movs	r2, #90	; 0x5a
 800435e:	2100      	movs	r1, #0
 8004360:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff feb3 	bl	80040d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2284      	movs	r2, #132	; 0x84
 800436e:	589b      	ldr	r3, [r3, r2]
 8004370:	2210      	movs	r2, #16
 8004372:	431a      	orrs	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2184      	movs	r1, #132	; 0x84
 8004378:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	0018      	movs	r0, r3
 800437e:	f7ff fa21 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b006      	add	sp, #24
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	225a      	movs	r2, #90	; 0x5a
 800439c:	2100      	movs	r1, #0
 800439e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2252      	movs	r2, #82	; 0x52
 80043a4:	2100      	movs	r1, #0
 80043a6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff fa0a 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b004      	add	sp, #16
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	2301      	movs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	438a      	bics	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff f9c7 	bl	8003794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b006      	add	sp, #24
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e05b      	b.n	80044e0 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d107      	bne.n	8004440 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2278      	movs	r2, #120	; 0x78
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	0018      	movs	r0, r3
 800443c:	f7fc fa16 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	438a      	bics	r2, r1
 8004454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff f9c7 	bl	80037ec <UART_SetConfig>
 800445e:	0003      	movs	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e03b      	b.n	80044e0 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	0018      	movs	r0, r3
 8004474:	f7ff fba2 	bl	8003bbc <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	01c9      	lsls	r1, r1, #7
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <HAL_RS485Ex_Init+0xd8>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	055b      	lsls	r3, r3, #21
 80044a4:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <HAL_RS485Ex_Init+0xdc>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fc23 	bl	8003d24 <UART_CheckIdleState>
 80044de:	0003      	movs	r3, r0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b006      	add	sp, #24
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	ffff7fff 	.word	0xffff7fff
 80044ec:	fc00ffff 	.word	0xfc00ffff

080044f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b002      	add	sp, #8
 80044fe:	bd80      	pop	{r7, pc}

08004500 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	0002      	movs	r2, r0
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004510:	1dbb      	adds	r3, r7, #6
 8004512:	2200      	movs	r2, #0
 8004514:	5e9b      	ldrsh	r3, [r3, r2]
 8004516:	2b84      	cmp	r3, #132	; 0x84
 8004518:	d006      	beq.n	8004528 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800451a:	1dbb      	adds	r3, r7, #6
 800451c:	2200      	movs	r2, #0
 800451e:	5e9a      	ldrsh	r2, [r3, r2]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	18d3      	adds	r3, r2, r3
 8004524:	3303      	adds	r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}

08004532 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004536:	f000 fe1d 	bl	8005174 <vTaskStartScheduler>
  
  return osOK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004544:	b087      	sub	sp, #28
 8004546:	af02      	add	r7, sp, #8
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685c      	ldr	r4, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004558:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2208      	movs	r2, #8
 800455e:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff ffcd 	bl	8004500 <makeFreeRtosPriority>
 8004566:	0001      	movs	r1, r0
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	230c      	movs	r3, #12
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	9100      	str	r1, [sp, #0]
 8004572:	0013      	movs	r3, r2
 8004574:	0032      	movs	r2, r6
 8004576:	0029      	movs	r1, r5
 8004578:	0020      	movs	r0, r4
 800457a:	f000 fcbe 	bl	8004efa <xTaskCreate>
 800457e:	0003      	movs	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d001      	beq.n	8004588 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8004588:	68fb      	ldr	r3, [r7, #12]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b005      	add	sp, #20
 8004590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004592 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3308      	adds	r3, #8
 800459e:	001a      	movs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4252      	negs	r2, r2
 80045aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3308      	adds	r3, #8
 80045b0:	001a      	movs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3308      	adds	r3, #8
 80045ba:	001a      	movs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}

080045ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b004      	add	sp, #16
 8004626:	bd80      	pop	{r7, pc}

08004628 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3301      	adds	r3, #1
 800463c:	d103      	bne.n	8004646 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e00c      	b.n	8004660 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3308      	adds	r3, #8
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e002      	b.n	8004654 <vListInsert+0x2c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	d2f6      	bcs.n	800464e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}

08004694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6852      	ldr	r2, [r2, #4]
 80046b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d103      	bne.n	80046c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b004      	add	sp, #16
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <xQueueGenericReset+0x18>
 80046f8:	b672      	cpsid	i
 80046fa:	e7fe      	b.n	80046fa <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80046fc:	f001 fd00 	bl	8006100 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	434b      	muls	r3, r1
 800470e:	18d2      	adds	r2, r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	1e59      	subs	r1, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	434b      	muls	r3, r1
 8004732:	18d2      	adds	r2, r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2244      	movs	r2, #68	; 0x44
 800473c:	21ff      	movs	r1, #255	; 0xff
 800473e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2245      	movs	r2, #69	; 0x45
 8004744:	21ff      	movs	r1, #255	; 0xff
 8004746:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d013      	beq.n	800477e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3310      	adds	r3, #16
 800475a:	0018      	movs	r0, r3
 800475c:	f000 ff48 	bl	80055f0 <xTaskRemoveFromEventList>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d00c      	beq.n	800477e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004764:	f001 fcbc 	bl	80060e0 <vPortYield>
 8004768:	e009      	b.n	800477e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3310      	adds	r3, #16
 800476e:	0018      	movs	r0, r3
 8004770:	f7ff ff0f 	bl	8004592 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3324      	adds	r3, #36	; 0x24
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff ff0a 	bl	8004592 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800477e:	f001 fcd1 	bl	8006124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004782:	2301      	movs	r3, #1
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bd80      	pop	{r7, pc}

0800478c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08b      	sub	sp, #44	; 0x2c
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueGenericCreate+0x18>
 80047a0:	b672      	cpsid	i
 80047a2:	e7fe      	b.n	80047a2 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	e003      	b.n	80047b8 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4353      	muls	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	3348      	adds	r3, #72	; 0x48
 80047bc:	0018      	movs	r0, r3
 80047be:	f001 fd37 	bl	8006230 <pvPortMalloc>
 80047c2:	0003      	movs	r3, r0
 80047c4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00c      	beq.n	80047e6 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	3348      	adds	r3, #72	; 0x48
 80047d0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047d2:	1dfb      	adds	r3, r7, #7
 80047d4:	781c      	ldrb	r4, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	0023      	movs	r3, r4
 80047e2:	f000 f805 	bl	80047f0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047e6:	69bb      	ldr	r3, [r7, #24]
	}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b009      	add	sp, #36	; 0x24
 80047ee:	bd90      	pop	{r4, r7, pc}

080047f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	001a      	movs	r2, r3
 80047fe:	1cfb      	adds	r3, r7, #3
 8004800:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e002      	b.n	8004816 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2101      	movs	r1, #1
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff ff5c 	bl	80046e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}

08004834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <xQueueGenericSend+0x20>
 8004850:	b672      	cpsid	i
 8004852:	e7fe      	b.n	8004852 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <xQueueGenericSend+0x2e>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <xQueueGenericSend+0x32>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <xQueueGenericSend+0x34>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xQueueGenericSend+0x3c>
 800486c:	b672      	cpsid	i
 800486e:	e7fe      	b.n	800486e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d103      	bne.n	800487e <xQueueGenericSend+0x4a>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <xQueueGenericSend+0x4e>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericSend+0x50>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <xQueueGenericSend+0x58>
 8004888:	b672      	cpsid	i
 800488a:	e7fe      	b.n	800488a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488c:	f001 f836 	bl	80058fc <xTaskGetSchedulerState>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d102      	bne.n	800489a <xQueueGenericSend+0x66>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xQueueGenericSend+0x6a>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSend+0x6c>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <xQueueGenericSend+0x74>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a8:	f001 fc2a 	bl	8006100 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <xQueueGenericSend+0x8a>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d11e      	bne.n	80048fc <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 f99f 	bl	8004c08 <prvCopyDataToQueue>
 80048ca:	0003      	movs	r3, r0
 80048cc:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	3324      	adds	r3, #36	; 0x24
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fe88 	bl	80055f0 <xTaskRemoveFromEventList>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d007      	beq.n	80048f4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048e4:	f001 fbfc 	bl	80060e0 <vPortYield>
 80048e8:	e004      	b.n	80048f4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048f0:	f001 fbf6 	bl	80060e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048f4:	f001 fc16 	bl	8006124 <vPortExitCritical>
				return pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e05b      	b.n	80049b4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004902:	f001 fc0f 	bl	8006124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004906:	2300      	movs	r3, #0
 8004908:	e054      	b.n	80049b4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004910:	2314      	movs	r3, #20
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fec7 	bl	80056a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800491e:	f001 fc01 	bl	8006124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004922:	f000 fc6d 	bl	8005200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004926:	f001 fbeb 	bl	8006100 <vPortEnterCritical>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2244      	movs	r2, #68	; 0x44
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	d103      	bne.n	800493e <xQueueGenericSend+0x10a>
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2244      	movs	r2, #68	; 0x44
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2245      	movs	r2, #69	; 0x45
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	b25b      	sxtb	r3, r3
 8004946:	3301      	adds	r3, #1
 8004948:	d103      	bne.n	8004952 <xQueueGenericSend+0x11e>
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2245      	movs	r2, #69	; 0x45
 800494e:	2100      	movs	r1, #0
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	f001 fbe7 	bl	8006124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004956:	1d3a      	adds	r2, r7, #4
 8004958:	2314      	movs	r3, #20
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	0011      	movs	r1, r2
 800495e:	0018      	movs	r0, r3
 8004960:	f000 feb6 	bl	80056d0 <xTaskCheckForTimeOut>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d11e      	bne.n	80049a6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	0018      	movs	r0, r3
 800496c:	f000 fa51 	bl	8004e12 <prvIsQueueFull>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d011      	beq.n	8004998 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	3310      	adds	r3, #16
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	0011      	movs	r1, r2
 800497c:	0018      	movs	r0, r3
 800497e:	f000 fdf3 	bl	8005568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f9d0 	bl	8004d2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800498a:	f000 fc45 	bl	8005218 <xTaskResumeAll>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d18a      	bne.n	80048a8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004992:	f001 fba5 	bl	80060e0 <vPortYield>
 8004996:	e787      	b.n	80048a8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	0018      	movs	r0, r3
 800499c:	f000 f9c5 	bl	8004d2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a0:	f000 fc3a 	bl	8005218 <xTaskResumeAll>
 80049a4:	e780      	b.n	80048a8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f9be 	bl	8004d2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ae:	f000 fc33 	bl	8005218 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049b2:	2300      	movs	r3, #0
		}
	}
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b00a      	add	sp, #40	; 0x28
 80049ba:	bd80      	pop	{r7, pc}

080049bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <xQueueGenericSendFromISR+0x1c>
 80049d4:	b672      	cpsid	i
 80049d6:	e7fe      	b.n	80049d6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <xQueueGenericSendFromISR+0x2a>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <xQueueGenericSendFromISR+0x2e>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <xQueueGenericSendFromISR+0x30>
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueGenericSendFromISR+0x38>
 80049f0:	b672      	cpsid	i
 80049f2:	e7fe      	b.n	80049f2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSendFromISR+0x46>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <xQueueGenericSendFromISR+0x4a>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <xQueueGenericSendFromISR+0x4c>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <xQueueGenericSendFromISR+0x54>
 8004a0c:	b672      	cpsid	i
 8004a0e:	e7fe      	b.n	8004a0e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a10:	f001 fba0 	bl	8006154 <ulSetInterruptMaskFromISR>
 8004a14:	0003      	movs	r3, r0
 8004a16:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <xQueueGenericSendFromISR+0x6e>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d12e      	bne.n	8004a88 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a2a:	2413      	movs	r4, #19
 8004a2c:	193b      	adds	r3, r7, r4
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	2145      	movs	r1, #69	; 0x45
 8004a32:	5c52      	ldrb	r2, [r2, r1]
 8004a34:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 f8e3 	bl	8004c08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	d111      	bne.n	8004a70 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d016      	beq.n	8004a82 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 fdc9 	bl	80055f0 <xTaskRemoveFromEventList>
 8004a5e:	1e03      	subs	r3, r0, #0
 8004a60:	d00f      	beq.n	8004a82 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e008      	b.n	8004a82 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a70:	2313      	movs	r3, #19
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	b259      	sxtb	r1, r3
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2245      	movs	r2, #69	; 0x45
 8004a80:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
		{
 8004a86:	e001      	b.n	8004a8c <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f001 fb66 	bl	8006160 <vClearInterruptMaskFromISR>

	return xReturn;
 8004a94:	69fb      	ldr	r3, [r7, #28]
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b009      	add	sp, #36	; 0x24
 8004a9c:	bd90      	pop	{r4, r7, pc}

08004a9e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b08a      	sub	sp, #40	; 0x28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <xQueueReceive+0x1e>
 8004ab8:	b672      	cpsid	i
 8004aba:	e7fe      	b.n	8004aba <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <xQueueReceive+0x2c>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueReceive+0x30>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueReceive+0x32>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <xQueueReceive+0x3a>
 8004ad4:	b672      	cpsid	i
 8004ad6:	e7fe      	b.n	8004ad6 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad8:	f000 ff10 	bl	80058fc <xTaskGetSchedulerState>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d102      	bne.n	8004ae6 <xQueueReceive+0x48>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <xQueueReceive+0x4c>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <xQueueReceive+0x4e>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <xQueueReceive+0x56>
 8004af0:	b672      	cpsid	i
 8004af2:	e7fe      	b.n	8004af2 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004af4:	f001 fb04 	bl	8006100 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	0011      	movs	r1, r2
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f000 f8e7 	bl	8004cde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1e5a      	subs	r2, r3, #1
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	3310      	adds	r3, #16
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fd63 	bl	80055f0 <xTaskRemoveFromEventList>
 8004b2a:	1e03      	subs	r3, r0, #0
 8004b2c:	d001      	beq.n	8004b32 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b2e:	f001 fad7 	bl	80060e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b32:	f001 faf7 	bl	8006124 <vPortExitCritical>
				return pdPASS;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e062      	b.n	8004c00 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b40:	f001 faf0 	bl	8006124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e05b      	b.n	8004c00 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4e:	2314      	movs	r3, #20
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fda8 	bl	80056a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b5c:	f001 fae2 	bl	8006124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b60:	f000 fb4e 	bl	8005200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b64:	f001 facc 	bl	8006100 <vPortEnterCritical>
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2244      	movs	r2, #68	; 0x44
 8004b6c:	5c9b      	ldrb	r3, [r3, r2]
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	d103      	bne.n	8004b7c <xQueueReceive+0xde>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2244      	movs	r2, #68	; 0x44
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2245      	movs	r2, #69	; 0x45
 8004b80:	5c9b      	ldrb	r3, [r3, r2]
 8004b82:	b25b      	sxtb	r3, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	d103      	bne.n	8004b90 <xQueueReceive+0xf2>
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2245      	movs	r2, #69	; 0x45
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5499      	strb	r1, [r3, r2]
 8004b90:	f001 fac8 	bl	8006124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b94:	1d3a      	adds	r2, r7, #4
 8004b96:	2314      	movs	r3, #20
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	0011      	movs	r1, r2
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 fd97 	bl	80056d0 <xTaskCheckForTimeOut>
 8004ba2:	1e03      	subs	r3, r0, #0
 8004ba4:	d11e      	bne.n	8004be4 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f91c 	bl	8004de6 <prvIsQueueEmpty>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d011      	beq.n	8004bd6 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	3324      	adds	r3, #36	; 0x24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fcd4 	bl	8005568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 f8b1 	bl	8004d2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc8:	f000 fb26 	bl	8005218 <xTaskResumeAll>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d191      	bne.n	8004af4 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004bd0:	f001 fa86 	bl	80060e0 <vPortYield>
 8004bd4:	e78e      	b.n	8004af4 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 f8a6 	bl	8004d2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bde:	f000 fb1b 	bl	8005218 <xTaskResumeAll>
 8004be2:	e787      	b.n	8004af4 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f89f 	bl	8004d2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bec:	f000 fb14 	bl	8005218 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 f8f7 	bl	8004de6 <prvIsQueueEmpty>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d100      	bne.n	8004bfe <xQueueReceive+0x160>
 8004bfc:	e77a      	b.n	8004af4 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b00a      	add	sp, #40	; 0x28
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10e      	bne.n	8004c44 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d14e      	bne.n	8004ccc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 fe7e 	bl	8005934 <xTaskPriorityDisinherit>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e043      	b.n	8004ccc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d119      	bne.n	8004c7e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6898      	ldr	r0, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0019      	movs	r1, r3
 8004c56:	f001 fd1d 	bl	8006694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	18d2      	adds	r2, r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d32b      	bcc.n	8004ccc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	e026      	b.n	8004ccc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68d8      	ldr	r0, [r3, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	0019      	movs	r1, r3
 8004c8a:	f001 fd03 	bl	8006694 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	425b      	negs	r3, r3
 8004c98:	18d2      	adds	r2, r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d207      	bcs.n	8004cba <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	18d2      	adds	r2, r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d105      	bne.n	8004ccc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cd4:	697b      	ldr	r3, [r7, #20]
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b006      	add	sp, #24
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d018      	beq.n	8004d22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	18d2      	adds	r2, r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d303      	bcc.n	8004d12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68d9      	ldr	r1, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f001 fcb9 	bl	8006694 <memcpy>
	}
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d32:	f001 f9e5 	bl	8006100 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	2145      	movs	r1, #69	; 0x45
 8004d3e:	5c52      	ldrb	r2, [r2, r1]
 8004d40:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d42:	e013      	b.n	8004d6c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3324      	adds	r3, #36	; 0x24
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fc4d 	bl	80055f0 <xTaskRemoveFromEventList>
 8004d56:	1e03      	subs	r3, r0, #0
 8004d58:	d001      	beq.n	8004d5e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d5a:	f000 fd09 	bl	8005770 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d5e:	210f      	movs	r1, #15
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b25b      	sxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dce5      	bgt.n	8004d44 <prvUnlockQueue+0x1a>
 8004d78:	e000      	b.n	8004d7c <prvUnlockQueue+0x52>
					break;
 8004d7a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2245      	movs	r2, #69	; 0x45
 8004d80:	21ff      	movs	r1, #255	; 0xff
 8004d82:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004d84:	f001 f9ce 	bl	8006124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d88:	f001 f9ba 	bl	8006100 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d8c:	230e      	movs	r3, #14
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	2144      	movs	r1, #68	; 0x44
 8004d94:	5c52      	ldrb	r2, [r2, r1]
 8004d96:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d98:	e013      	b.n	8004dc2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3310      	adds	r3, #16
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fc22 	bl	80055f0 <xTaskRemoveFromEventList>
 8004dac:	1e03      	subs	r3, r0, #0
 8004dae:	d001      	beq.n	8004db4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004db0:	f000 fcde 	bl	8005770 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db4:	210e      	movs	r1, #14
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	187b      	adds	r3, r7, r1
 8004dc0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc2:	230e      	movs	r3, #14
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dce5      	bgt.n	8004d9a <prvUnlockQueue+0x70>
 8004dce:	e000      	b.n	8004dd2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004dd0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2244      	movs	r2, #68	; 0x44
 8004dd6:	21ff      	movs	r1, #255	; 0xff
 8004dd8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 f9a3 	bl	8006124 <vPortExitCritical>
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b004      	add	sp, #16
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dee:	f001 f987 	bl	8006100 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e001      	b.n	8004e04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e04:	f001 f98e 	bl	8006124 <vPortExitCritical>

	return xReturn;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e1a:	f001 f971 	bl	8006100 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d102      	bne.n	8004e30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e001      	b.n	8004e34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e34:	f001 f976 	bl	8006124 <vPortExitCritical>

	return xReturn;
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e015      	b.n	8004e80 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <vQueueAddToRegistry+0x4c>)
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	00d2      	lsls	r2, r2, #3
 8004e5a:	58d3      	ldr	r3, [r2, r3]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10c      	bne.n	8004e7a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <vQueueAddToRegistry+0x4c>)
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	00d2      	lsls	r2, r2, #3
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <vQueueAddToRegistry+0x4c>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	18d3      	adds	r3, r2, r3
 8004e72:	3304      	adds	r3, #4
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e78:	e006      	b.n	8004e88 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b07      	cmp	r3, #7
 8004e84:	d9e6      	bls.n	8004e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b004      	add	sp, #16
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000c70 	.word	0x20000c70

08004e94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ea4:	f001 f92c 	bl	8006100 <vPortEnterCritical>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2244      	movs	r2, #68	; 0x44
 8004eac:	5c9b      	ldrb	r3, [r3, r2]
 8004eae:	b25b      	sxtb	r3, r3
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	d103      	bne.n	8004ebc <vQueueWaitForMessageRestricted+0x28>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2244      	movs	r2, #68	; 0x44
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2245      	movs	r2, #69	; 0x45
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	d103      	bne.n	8004ed0 <vQueueWaitForMessageRestricted+0x3c>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2245      	movs	r2, #69	; 0x45
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]
 8004ed0:	f001 f928 	bl	8006124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3324      	adds	r3, #36	; 0x24
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 fb5d 	bl	80055a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7ff ff1c 	bl	8004d2a <prvUnlockQueue>
	}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b006      	add	sp, #24
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efa:	b590      	push	{r4, r7, lr}
 8004efc:	b08d      	sub	sp, #52	; 0x34
 8004efe:	af04      	add	r7, sp, #16
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	1dbb      	adds	r3, r7, #6
 8004f08:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0a:	1dbb      	adds	r3, r7, #6
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	0018      	movs	r0, r3
 8004f12:	f001 f98d 	bl	8006230 <pvPortMalloc>
 8004f16:	0003      	movs	r3, r0
 8004f18:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f20:	20a0      	movs	r0, #160	; 0xa0
 8004f22:	f001 f985 	bl	8006230 <pvPortMalloc>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
 8004f36:	e006      	b.n	8004f46 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f001 fa1e 	bl	800637c <vPortFree>
 8004f40:	e001      	b.n	8004f46 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d016      	beq.n	8004f7a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f4c:	1dbb      	adds	r3, r7, #6
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	683c      	ldr	r4, [r7, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	2300      	movs	r3, #0
 8004f58:	9303      	str	r3, [sp, #12]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	9302      	str	r3, [sp, #8]
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	0023      	movs	r3, r4
 8004f68:	f000 f810 	bl	8004f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 f89c 	bl	80050ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e002      	b.n	8004f80 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	425b      	negs	r3, r3
 8004f7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f80:	69bb      	ldr	r3, [r7, #24]
	}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b009      	add	sp, #36	; 0x24
 8004f88:	bd90      	pop	{r4, r7, pc}
	...

08004f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	493e      	ldr	r1, [pc, #248]	; (800509c <prvInitialiseNewTask+0x110>)
 8004fa2:	468c      	mov	ip, r1
 8004fa4:	4463      	add	r3, ip
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	18d3      	adds	r3, r2, r3
 8004faa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2207      	movs	r2, #7
 8004fb0:	4393      	bics	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d001      	beq.n	8004fc0 <prvInitialiseNewTask+0x34>
 8004fbc:	b672      	cpsid	i
 8004fbe:	e7fe      	b.n	8004fbe <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e013      	b.n	8004fee <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	18d3      	adds	r3, r2, r3
 8004fcc:	7818      	ldrb	r0, [r3, #0]
 8004fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd0:	2134      	movs	r1, #52	; 0x34
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	18d3      	adds	r3, r2, r3
 8004fd6:	185b      	adds	r3, r3, r1
 8004fd8:	1c02      	adds	r2, r0, #0
 8004fda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b0f      	cmp	r3, #15
 8004ff2:	d9e8      	bls.n	8004fc6 <prvInitialiseNewTask+0x3a>
 8004ff4:	e000      	b.n	8004ff8 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004ff6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2243      	movs	r2, #67	; 0x43
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d901      	bls.n	800500a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005006:	2306      	movs	r3, #6
 8005008:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	6a3a      	ldr	r2, [r7, #32]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	2200      	movs	r2, #0
 800501a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	3304      	adds	r3, #4
 8005020:	0018      	movs	r0, r3
 8005022:	f7ff fad4 	bl	80045ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	3318      	adds	r3, #24
 800502a:	0018      	movs	r0, r3
 800502c:	f7ff facf 	bl	80045ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2207      	movs	r2, #7
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	2298      	movs	r2, #152	; 0x98
 800504a:	2100      	movs	r1, #0
 800504c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	229c      	movs	r2, #156	; 0x9c
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	334c      	adds	r3, #76	; 0x4c
 800505a:	224c      	movs	r2, #76	; 0x4c
 800505c:	2100      	movs	r1, #0
 800505e:	0018      	movs	r0, r3
 8005060:	f001 fa8c 	bl	800657c <memset>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <prvInitialiseNewTask+0x114>)
 8005068:	651a      	str	r2, [r3, #80]	; 0x50
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <prvInitialiseNewTask+0x118>)
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <prvInitialiseNewTask+0x11c>)
 8005074:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	0018      	movs	r0, r3
 800507e:	f000 ffa3 	bl	8005fc8 <pxPortInitialiseStack>
 8005082:	0002      	movs	r2, r0
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bd80      	pop	{r7, pc}
 800509c:	3fffffff 	.word	0x3fffffff
 80050a0:	20004e30 	.word	0x20004e30
 80050a4:	20004e98 	.word	0x20004e98
 80050a8:	20004f00 	.word	0x20004f00

080050ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050b4:	f001 f824 	bl	8006100 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <prvAddNewTaskToReadyList+0xb0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <prvAddNewTaskToReadyList+0xb0>)
 80050c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80050c2:	4b27      	ldr	r3, [pc, #156]	; (8005160 <prvAddNewTaskToReadyList+0xb4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ca:	4b25      	ldr	r3, [pc, #148]	; (8005160 <prvAddNewTaskToReadyList+0xb4>)
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <prvAddNewTaskToReadyList+0xb0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d110      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d8:	f000 fb64 	bl	80057a4 <prvInitialiseTaskLists>
 80050dc:	e00d      	b.n	80050fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050de:	4b21      	ldr	r3, [pc, #132]	; (8005164 <prvAddNewTaskToReadyList+0xb8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e6:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <prvAddNewTaskToReadyList+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d802      	bhi.n	80050fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <prvAddNewTaskToReadyList+0xb4>)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <prvAddNewTaskToReadyList+0xbc>)
 8005102:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b18      	ldr	r3, [pc, #96]	; (800516c <prvAddNewTaskToReadyList+0xc0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <prvAddNewTaskToReadyList+0x6c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <prvAddNewTaskToReadyList+0xc0>)
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	0013      	movs	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	189b      	adds	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a12      	ldr	r2, [pc, #72]	; (8005170 <prvAddNewTaskToReadyList+0xc4>)
 8005126:	189a      	adds	r2, r3, r2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	0019      	movs	r1, r3
 800512e:	0010      	movs	r0, r2
 8005130:	f7ff fa58 	bl	80045e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005134:	f000 fff6 	bl	8006124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <prvAddNewTaskToReadyList+0xb8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <prvAddNewTaskToReadyList+0xb4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d201      	bcs.n	8005152 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514e:	f000 ffc7 	bl	80060e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	20000db0 	.word	0x20000db0
 8005160:	20000cb0 	.word	0x20000cb0
 8005164:	20000dbc 	.word	0x20000dbc
 8005168:	20000dcc 	.word	0x20000dcc
 800516c:	20000db8 	.word	0x20000db8
 8005170:	20000cb4 	.word	0x20000cb4

08005174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800517a:	4919      	ldr	r1, [pc, #100]	; (80051e0 <vTaskStartScheduler+0x6c>)
 800517c:	4819      	ldr	r0, [pc, #100]	; (80051e4 <vTaskStartScheduler+0x70>)
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <vTaskStartScheduler+0x74>)
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	2300      	movs	r3, #0
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2300      	movs	r3, #0
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	f7ff feb6 	bl	8004efa <xTaskCreate>
 800518e:	0003      	movs	r3, r0
 8005190:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d103      	bne.n	80051a0 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8005198:	f000 fc7c 	bl	8005a94 <xTimerCreateTimerTask>
 800519c:	0003      	movs	r3, r0
 800519e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d113      	bne.n	80051ce <vTaskStartScheduler+0x5a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80051a6:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <vTaskStartScheduler+0x78>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	334c      	adds	r3, #76	; 0x4c
 80051ae:	001a      	movs	r2, r3
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <vTaskStartScheduler+0x7c>)
 80051b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <vTaskStartScheduler+0x80>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	4252      	negs	r2, r2
 80051ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <vTaskStartScheduler+0x84>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <vTaskStartScheduler+0x88>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051c8:	f000 ff66 	bl	8006098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051cc:	e004      	b.n	80051d8 <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3301      	adds	r3, #1
 80051d2:	d101      	bne.n	80051d8 <vTaskStartScheduler+0x64>
 80051d4:	b672      	cpsid	i
 80051d6:	e7fe      	b.n	80051d6 <vTaskStartScheduler+0x62>
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08006794 	.word	0x08006794
 80051e4:	08005785 	.word	0x08005785
 80051e8:	20000dd4 	.word	0x20000dd4
 80051ec:	20000cb0 	.word	0x20000cb0
 80051f0:	20000058 	.word	0x20000058
 80051f4:	20000dd0 	.word	0x20000dd0
 80051f8:	20000dbc 	.word	0x20000dbc
 80051fc:	20000db4 	.word	0x20000db4

08005200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <vTaskSuspendAll+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	4b02      	ldr	r3, [pc, #8]	; (8005214 <vTaskSuspendAll+0x14>)
 800520c:	601a      	str	r2, [r3, #0]
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000dd8 	.word	0x20000dd8

08005218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005226:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <xTaskResumeAll+0xf8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <xTaskResumeAll+0x1a>
 800522e:	b672      	cpsid	i
 8005230:	e7fe      	b.n	8005230 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005232:	f000 ff65 	bl	8006100 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <xTaskResumeAll+0xf8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <xTaskResumeAll+0xf8>)
 800523e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005240:	4b33      	ldr	r3, [pc, #204]	; (8005310 <xTaskResumeAll+0xf8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d15b      	bne.n	8005300 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005248:	4b32      	ldr	r3, [pc, #200]	; (8005314 <xTaskResumeAll+0xfc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d057      	beq.n	8005300 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005250:	e02f      	b.n	80052b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005252:	4b31      	ldr	r3, [pc, #196]	; (8005318 <xTaskResumeAll+0x100>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3318      	adds	r3, #24
 800525e:	0018      	movs	r0, r3
 8005260:	f7ff fa18 	bl	8004694 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3304      	adds	r3, #4
 8005268:	0018      	movs	r0, r3
 800526a:	f7ff fa13 	bl	8004694 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <xTaskResumeAll+0x104>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d903      	bls.n	8005282 <xTaskResumeAll+0x6a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4b27      	ldr	r3, [pc, #156]	; (800531c <xTaskResumeAll+0x104>)
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	0013      	movs	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	189b      	adds	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <xTaskResumeAll+0x108>)
 8005290:	189a      	adds	r2, r3, r2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	0019      	movs	r1, r3
 8005298:	0010      	movs	r0, r2
 800529a:	f7ff f9a3 	bl	80045e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <xTaskResumeAll+0x10c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d302      	bcc.n	80052b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80052ac:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <xTaskResumeAll+0x110>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <xTaskResumeAll+0x100>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1cb      	bne.n	8005252 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052c0:	f000 faf8 	bl	80058b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <xTaskResumeAll+0x114>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052d0:	f000 f83c 	bl	800534c <xTaskIncrementTick>
 80052d4:	1e03      	subs	r3, r0, #0
 80052d6:	d002      	beq.n	80052de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <xTaskResumeAll+0x110>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f2      	bne.n	80052d0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <xTaskResumeAll+0x114>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <xTaskResumeAll+0x110>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052fc:	f000 fef0 	bl	80060e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005300:	f000 ff10 	bl	8006124 <vPortExitCritical>

	return xAlreadyYielded;
 8005304:	68bb      	ldr	r3, [r7, #8]
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	20000dd8 	.word	0x20000dd8
 8005314:	20000db0 	.word	0x20000db0
 8005318:	20000d70 	.word	0x20000d70
 800531c:	20000db8 	.word	0x20000db8
 8005320:	20000cb4 	.word	0x20000cb4
 8005324:	20000cb0 	.word	0x20000cb0
 8005328:	20000dc4 	.word	0x20000dc4
 800532c:	20000dc0 	.word	0x20000dc0

08005330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005336:	4b04      	ldr	r3, [pc, #16]	; (8005348 <xTaskGetTickCount+0x18>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800533c:	687b      	ldr	r3, [r7, #4]
}
 800533e:	0018      	movs	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	b002      	add	sp, #8
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	20000db4 	.word	0x20000db4

0800534c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005356:	4b4c      	ldr	r3, [pc, #304]	; (8005488 <xTaskIncrementTick+0x13c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d000      	beq.n	8005360 <xTaskIncrementTick+0x14>
 800535e:	e083      	b.n	8005468 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005360:	4b4a      	ldr	r3, [pc, #296]	; (800548c <xTaskIncrementTick+0x140>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005368:	4b48      	ldr	r3, [pc, #288]	; (800548c <xTaskIncrementTick+0x140>)
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d117      	bne.n	80053a4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005374:	4b46      	ldr	r3, [pc, #280]	; (8005490 <xTaskIncrementTick+0x144>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <xTaskIncrementTick+0x36>
 800537e:	b672      	cpsid	i
 8005380:	e7fe      	b.n	8005380 <xTaskIncrementTick+0x34>
 8005382:	4b43      	ldr	r3, [pc, #268]	; (8005490 <xTaskIncrementTick+0x144>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	4b42      	ldr	r3, [pc, #264]	; (8005494 <xTaskIncrementTick+0x148>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b40      	ldr	r3, [pc, #256]	; (8005490 <xTaskIncrementTick+0x144>)
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	4b40      	ldr	r3, [pc, #256]	; (8005494 <xTaskIncrementTick+0x148>)
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	4b40      	ldr	r3, [pc, #256]	; (8005498 <xTaskIncrementTick+0x14c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <xTaskIncrementTick+0x14c>)
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f000 fa88 	bl	80058b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053a4:	4b3d      	ldr	r3, [pc, #244]	; (800549c <xTaskIncrementTick+0x150>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d34e      	bcc.n	800544c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ae:	4b38      	ldr	r3, [pc, #224]	; (8005490 <xTaskIncrementTick+0x144>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <xTaskIncrementTick+0x70>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <xTaskIncrementTick+0x72>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c2:	4b36      	ldr	r3, [pc, #216]	; (800549c <xTaskIncrementTick+0x150>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	4252      	negs	r2, r2
 80053c8:	601a      	str	r2, [r3, #0]
					break;
 80053ca:	e03f      	b.n	800544c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053cc:	4b30      	ldr	r3, [pc, #192]	; (8005490 <xTaskIncrementTick+0x144>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d203      	bcs.n	80053ec <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053e4:	4b2d      	ldr	r3, [pc, #180]	; (800549c <xTaskIncrementTick+0x150>)
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
						break;
 80053ea:	e02f      	b.n	800544c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	3304      	adds	r3, #4
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff f94f 	bl	8004694 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3318      	adds	r3, #24
 8005402:	0018      	movs	r0, r3
 8005404:	f7ff f946 	bl	8004694 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <xTaskIncrementTick+0x154>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d903      	bls.n	800541c <xTaskIncrementTick+0xd0>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <xTaskIncrementTick+0x154>)
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	0013      	movs	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	189b      	adds	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <xTaskIncrementTick+0x158>)
 800542a:	189a      	adds	r2, r3, r2
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3304      	adds	r3, #4
 8005430:	0019      	movs	r1, r3
 8005432:	0010      	movs	r0, r2
 8005434:	f7ff f8d6 	bl	80045e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <xTaskIncrementTick+0x15c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	429a      	cmp	r2, r3
 8005444:	d3b3      	bcc.n	80053ae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544a:	e7b0      	b.n	80053ae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <xTaskIncrementTick+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005452:	4914      	ldr	r1, [pc, #80]	; (80054a4 <xTaskIncrementTick+0x158>)
 8005454:	0013      	movs	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	189b      	adds	r3, r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	585b      	ldr	r3, [r3, r1]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d907      	bls.n	8005472 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005462:	2301      	movs	r3, #1
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e004      	b.n	8005472 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005468:	4b10      	ldr	r3, [pc, #64]	; (80054ac <xTaskIncrementTick+0x160>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <xTaskIncrementTick+0x160>)
 8005470:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <xTaskIncrementTick+0x164>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b006      	add	sp, #24
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000dd8 	.word	0x20000dd8
 800548c:	20000db4 	.word	0x20000db4
 8005490:	20000d68 	.word	0x20000d68
 8005494:	20000d6c 	.word	0x20000d6c
 8005498:	20000dc8 	.word	0x20000dc8
 800549c:	20000dd0 	.word	0x20000dd0
 80054a0:	20000db8 	.word	0x20000db8
 80054a4:	20000cb4 	.word	0x20000cb4
 80054a8:	20000cb0 	.word	0x20000cb0
 80054ac:	20000dc0 	.word	0x20000dc0
 80054b0:	20000dc4 	.word	0x20000dc4

080054b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <vTaskSwitchContext+0x9c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <vTaskSwitchContext+0xa0>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054c8:	e03d      	b.n	8005546 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80054ca:	4b22      	ldr	r3, [pc, #136]	; (8005554 <vTaskSwitchContext+0xa0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054d0:	4b21      	ldr	r3, [pc, #132]	; (8005558 <vTaskSwitchContext+0xa4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	e007      	b.n	80054e8 <vTaskSwitchContext+0x34>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <vTaskSwitchContext+0x2e>
 80054de:	b672      	cpsid	i
 80054e0:	e7fe      	b.n	80054e0 <vTaskSwitchContext+0x2c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	491c      	ldr	r1, [pc, #112]	; (800555c <vTaskSwitchContext+0xa8>)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	0013      	movs	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	189b      	adds	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	585b      	ldr	r3, [r3, r1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0ee      	beq.n	80054d8 <vTaskSwitchContext+0x24>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	0013      	movs	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	189b      	adds	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <vTaskSwitchContext+0xa8>)
 8005506:	189b      	adds	r3, r3, r2
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	429a      	cmp	r2, r3
 800551e:	d104      	bne.n	800552a <vTaskSwitchContext+0x76>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <vTaskSwitchContext+0xac>)
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b08      	ldr	r3, [pc, #32]	; (8005558 <vTaskSwitchContext+0xa4>)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <vTaskSwitchContext+0xac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	334c      	adds	r3, #76	; 0x4c
 8005540:	001a      	movs	r2, r3
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <vTaskSwitchContext+0xb0>)
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000dd8 	.word	0x20000dd8
 8005554:	20000dc4 	.word	0x20000dc4
 8005558:	20000db8 	.word	0x20000db8
 800555c:	20000cb4 	.word	0x20000cb4
 8005560:	20000cb0 	.word	0x20000cb0
 8005564:	20000058 	.word	0x20000058

08005568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <vTaskPlaceOnEventList+0x14>
 8005578:	b672      	cpsid	i
 800557a:	e7fe      	b.n	800557a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <vTaskPlaceOnEventList+0x38>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3318      	adds	r3, #24
 8005582:	001a      	movs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0011      	movs	r1, r2
 8005588:	0018      	movs	r0, r3
 800558a:	f7ff f84d 	bl	8004628 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	0018      	movs	r0, r3
 8005594:	f000 fa2a 	bl	80059ec <prvAddCurrentTaskToDelayedList>
}
 8005598:	46c0      	nop			; (mov r8, r8)
 800559a:	46bd      	mov	sp, r7
 800559c:	b002      	add	sp, #8
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000cb0 	.word	0x20000cb0

080055a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <vTaskPlaceOnEventListRestricted+0x16>
 80055b6:	b672      	cpsid	i
 80055b8:	e7fe      	b.n	80055b8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <vTaskPlaceOnEventListRestricted+0x48>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3318      	adds	r3, #24
 80055c0:	001a      	movs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0011      	movs	r1, r2
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7ff f80c 	bl	80045e4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80055d2:	2301      	movs	r3, #1
 80055d4:	425b      	negs	r3, r3
 80055d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0011      	movs	r1, r2
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 fa04 	bl	80059ec <prvAddCurrentTaskToDelayedList>
	}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b004      	add	sp, #16
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000cb0 	.word	0x20000cb0

080055f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <xTaskRemoveFromEventList+0x1a>
 8005606:	b672      	cpsid	i
 8005608:	e7fe      	b.n	8005608 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3318      	adds	r3, #24
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff f840 	bl	8004694 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <xTaskRemoveFromEventList+0xa0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11d      	bne.n	8005658 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	3304      	adds	r3, #4
 8005620:	0018      	movs	r0, r3
 8005622:	f7ff f837 	bl	8004694 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <xTaskRemoveFromEventList+0xa4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d903      	bls.n	800563a <xTaskRemoveFromEventList+0x4a>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4b17      	ldr	r3, [pc, #92]	; (8005694 <xTaskRemoveFromEventList+0xa4>)
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	0013      	movs	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	189b      	adds	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <xTaskRemoveFromEventList+0xa8>)
 8005648:	189a      	adds	r2, r3, r2
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3304      	adds	r3, #4
 800564e:	0019      	movs	r1, r3
 8005650:	0010      	movs	r0, r2
 8005652:	f7fe ffc7 	bl	80045e4 <vListInsertEnd>
 8005656:	e007      	b.n	8005668 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3318      	adds	r3, #24
 800565c:	001a      	movs	r2, r3
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <xTaskRemoveFromEventList+0xac>)
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f7fe ffbe 	bl	80045e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <xTaskRemoveFromEventList+0xb0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	429a      	cmp	r2, r3
 8005674:	d905      	bls.n	8005682 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005676:	2301      	movs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <xTaskRemoveFromEventList+0xb4>)
 800567c:	2201      	movs	r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e001      	b.n	8005686 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005686:	68fb      	ldr	r3, [r7, #12]
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b004      	add	sp, #16
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000dd8 	.word	0x20000dd8
 8005694:	20000db8 	.word	0x20000db8
 8005698:	20000cb4 	.word	0x20000cb4
 800569c:	20000d70 	.word	0x20000d70
 80056a0:	20000cb0 	.word	0x20000cb0
 80056a4:	20000dc4 	.word	0x20000dc4

080056a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <vTaskInternalSetTimeOutState+0x20>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <vTaskInternalSetTimeOutState+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	605a      	str	r2, [r3, #4]
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000dc8 	.word	0x20000dc8
 80056cc:	20000db4 	.word	0x20000db4

080056d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xTaskCheckForTimeOut+0x14>
 80056e0:	b672      	cpsid	i
 80056e2:	e7fe      	b.n	80056e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <xTaskCheckForTimeOut+0x1e>
 80056ea:	b672      	cpsid	i
 80056ec:	e7fe      	b.n	80056ec <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80056ee:	f000 fd07 	bl	8006100 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056f2:	4b1d      	ldr	r3, [pc, #116]	; (8005768 <xTaskCheckForTimeOut+0x98>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	d102      	bne.n	8005710 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e024      	b.n	800575a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b15      	ldr	r3, [pc, #84]	; (800576c <xTaskCheckForTimeOut+0x9c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d007      	beq.n	800572c <xTaskCheckForTimeOut+0x5c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e016      	b.n	800575a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	429a      	cmp	r2, r3
 8005734:	d20c      	bcs.n	8005750 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad2      	subs	r2, r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	f7ff ffaf 	bl	80056a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e004      	b.n	800575a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f000 fce3 	bl	8006124 <vPortExitCritical>

	return xReturn;
 800575e:	697b      	ldr	r3, [r7, #20]
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b006      	add	sp, #24
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000db4 	.word	0x20000db4
 800576c:	20000dc8 	.word	0x20000dc8

08005770 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <vTaskMissedYield+0x10>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20000dc4 	.word	0x20000dc4

08005784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800578c:	f000 f84e 	bl	800582c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <prvIdleTask+0x1c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d9f9      	bls.n	800578c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005798:	f000 fca2 	bl	80060e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800579c:	e7f6      	b.n	800578c <prvIdleTask+0x8>
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000cb4 	.word	0x20000cb4

080057a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	e00c      	b.n	80057ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	0013      	movs	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a14      	ldr	r2, [pc, #80]	; (800580c <prvInitialiseTaskLists+0x68>)
 80057bc:	189b      	adds	r3, r3, r2
 80057be:	0018      	movs	r0, r3
 80057c0:	f7fe fee7 	bl	8004592 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3301      	adds	r3, #1
 80057c8:	607b      	str	r3, [r7, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b06      	cmp	r3, #6
 80057ce:	d9ef      	bls.n	80057b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <prvInitialiseTaskLists+0x6c>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fe fedd 	bl	8004592 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <prvInitialiseTaskLists+0x70>)
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fe fed9 	bl	8004592 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <prvInitialiseTaskLists+0x74>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fe fed5 	bl	8004592 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <prvInitialiseTaskLists+0x78>)
 80057ea:	0018      	movs	r0, r3
 80057ec:	f7fe fed1 	bl	8004592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <prvInitialiseTaskLists+0x7c>)
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fe fecd 	bl	8004592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <prvInitialiseTaskLists+0x80>)
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <prvInitialiseTaskLists+0x6c>)
 80057fc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <prvInitialiseTaskLists+0x84>)
 8005800:	4a04      	ldr	r2, [pc, #16]	; (8005814 <prvInitialiseTaskLists+0x70>)
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000cb4 	.word	0x20000cb4
 8005810:	20000d40 	.word	0x20000d40
 8005814:	20000d54 	.word	0x20000d54
 8005818:	20000d70 	.word	0x20000d70
 800581c:	20000d84 	.word	0x20000d84
 8005820:	20000d9c 	.word	0x20000d9c
 8005824:	20000d68 	.word	0x20000d68
 8005828:	20000d6c 	.word	0x20000d6c

0800582c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005832:	e01a      	b.n	800586a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005834:	f000 fc64 	bl	8006100 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005838:	4b10      	ldr	r3, [pc, #64]	; (800587c <prvCheckTasksWaitingTermination+0x50>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	0018      	movs	r0, r3
 8005846:	f7fe ff25 	bl	8004694 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <prvCheckTasksWaitingTermination+0x54>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <prvCheckTasksWaitingTermination+0x54>)
 8005852:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 800585c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800585e:	f000 fc61 	bl	8006124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f80f 	bl	8005888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e0      	bne.n	8005834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46c0      	nop			; (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000d84 	.word	0x20000d84
 8005880:	20000db0 	.word	0x20000db0
 8005884:	20000d98 	.word	0x20000d98

08005888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	334c      	adds	r3, #76	; 0x4c
 8005894:	0018      	movs	r0, r3
 8005896:	f000 fe79 	bl	800658c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	0018      	movs	r0, r3
 80058a0:	f000 fd6c 	bl	800637c <vPortFree>
			vPortFree( pxTCB );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fd68 	bl	800637c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058ac:	46c0      	nop			; (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b002      	add	sp, #8
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <prvResetNextTaskUnblockTime+0x40>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <prvResetNextTaskUnblockTime+0x14>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <prvResetNextTaskUnblockTime+0x16>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvResetNextTaskUnblockTime+0x44>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	4252      	negs	r2, r2
 80058d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d6:	e008      	b.n	80058ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <prvResetNextTaskUnblockTime+0x40>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <prvResetNextTaskUnblockTime+0x44>)
 80058e8:	601a      	str	r2, [r3, #0]
}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b002      	add	sp, #8
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	20000d68 	.word	0x20000d68
 80058f8:	20000dd0 	.word	0x20000dd0

080058fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <xTaskGetSchedulerState+0x30>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800590a:	2301      	movs	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	e008      	b.n	8005922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <xTaskGetSchedulerState+0x34>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005918:	2302      	movs	r3, #2
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e001      	b.n	8005922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005922:	687b      	ldr	r3, [r7, #4]
	}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000dbc 	.word	0x20000dbc
 8005930:	20000dd8 	.word	0x20000dd8

08005934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d044      	beq.n	80059d4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800594a:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <xTaskPriorityDisinherit+0xac>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <xTaskPriorityDisinherit+0x24>
 8005954:	b672      	cpsid	i
 8005956:	e7fe      	b.n	8005956 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <xTaskPriorityDisinherit+0x30>
 8005960:	b672      	cpsid	i
 8005962:	e7fe      	b.n	8005962 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	429a      	cmp	r2, r3
 8005978:	d02c      	beq.n	80059d4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597e:	2b00      	cmp	r3, #0
 8005980:	d128      	bne.n	80059d4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	3304      	adds	r3, #4
 8005986:	0018      	movs	r0, r3
 8005988:	f7fe fe84 	bl	8004694 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	2207      	movs	r2, #7
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <xTaskPriorityDisinherit+0xb0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <xTaskPriorityDisinherit+0x80>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <xTaskPriorityDisinherit+0xb0>)
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	0013      	movs	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <xTaskPriorityDisinherit+0xb4>)
 80059c2:	189a      	adds	r2, r3, r2
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3304      	adds	r3, #4
 80059c8:	0019      	movs	r1, r3
 80059ca:	0010      	movs	r0, r2
 80059cc:	f7fe fe0a 	bl	80045e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059d4:	68fb      	ldr	r3, [r7, #12]
	}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b004      	add	sp, #16
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	20000cb0 	.word	0x20000cb0
 80059e4:	20000db8 	.word	0x20000db8
 80059e8:	20000cb4 	.word	0x20000cb4

080059ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059f6:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <prvAddCurrentTaskToDelayedList+0x90>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059fc:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <prvAddCurrentTaskToDelayedList+0x94>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3304      	adds	r3, #4
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7fe fe46 	bl	8004694 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	d10b      	bne.n	8005a26 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a14:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7fe fde0 	bl	80045e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a24:	e026      	b.n	8005a74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	18d3      	adds	r3, r2, r3
 8005a2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a2e:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d209      	bcs.n	8005a52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3304      	adds	r3, #4
 8005a48:	0019      	movs	r1, r3
 8005a4a:	0010      	movs	r0, r2
 8005a4c:	f7fe fdec 	bl	8004628 <vListInsert>
}
 8005a50:	e010      	b.n	8005a74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	0010      	movs	r0, r2
 8005a60:	f7fe fde2 	bl	8004628 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d202      	bcs.n	8005a74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b004      	add	sp, #16
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000db4 	.word	0x20000db4
 8005a80:	20000cb0 	.word	0x20000cb0
 8005a84:	20000d9c 	.word	0x20000d9c
 8005a88:	20000d6c 	.word	0x20000d6c
 8005a8c:	20000d68 	.word	0x20000d68
 8005a90:	20000dd0 	.word	0x20000dd0

08005a94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a9e:	f000 fa59 	bl	8005f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <xTimerCreateTimerTask+0x44>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	005a      	lsls	r2, r3, #1
 8005aae:	490b      	ldr	r1, [pc, #44]	; (8005adc <xTimerCreateTimerTask+0x48>)
 8005ab0:	480b      	ldr	r0, [pc, #44]	; (8005ae0 <xTimerCreateTimerTask+0x4c>)
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <xTimerCreateTimerTask+0x50>)
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f7ff fa1d 	bl	8004efa <xTaskCreate>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xTimerCreateTimerTask+0x3a>
 8005aca:	b672      	cpsid	i
 8005acc:	e7fe      	b.n	8005acc <xTimerCreateTimerTask+0x38>
	return xReturn;
 8005ace:	687b      	ldr	r3, [r7, #4]
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000e0c 	.word	0x20000e0c
 8005adc:	0800679c 	.word	0x0800679c
 8005ae0:	08005bed 	.word	0x08005bed
 8005ae4:	20000e10 	.word	0x20000e10

08005ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <xTimerGenericCommand+0x1c>
 8005b00:	b672      	cpsid	i
 8005b02:	e7fe      	b.n	8005b02 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b04:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <xTimerGenericCommand+0x90>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d030      	beq.n	8005b6e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b0c:	2410      	movs	r4, #16
 8005b0e:	193b      	adds	r3, r7, r4
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b14:	193b      	adds	r3, r7, r4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b1a:	193b      	adds	r3, r7, r4
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	dc19      	bgt.n	8005b5a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b26:	f7ff fee9 	bl	80058fc <xTaskGetSchedulerState>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d109      	bne.n	8005b44 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <xTimerGenericCommand+0x90>)
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b36:	1939      	adds	r1, r7, r4
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f7fe fe7b 	bl	8004834 <xQueueGenericSend>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e014      	b.n	8005b6e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <xTimerGenericCommand+0x90>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	2310      	movs	r3, #16
 8005b4a:	18f9      	adds	r1, r7, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f7fe fe70 	bl	8004834 <xQueueGenericSend>
 8005b54:	0003      	movs	r3, r0
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e009      	b.n	8005b6e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <xTimerGenericCommand+0x90>)
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	2310      	movs	r3, #16
 8005b62:	18f9      	adds	r1, r7, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	f7fe ff29 	bl	80049bc <xQueueGenericSendFromISR>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b009      	add	sp, #36	; 0x24
 8005b76:	bd90      	pop	{r4, r7, pc}
 8005b78:	20000e0c 	.word	0x20000e0c

08005b7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b86:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <prvProcessExpiredTimer+0x6c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3304      	adds	r3, #4
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fe fd7d 	bl	8004694 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d119      	bne.n	8005bd6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	18d1      	adds	r1, r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f8b6 	bl	8005d20 <prvInsertTimerInActiveList>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d00e      	beq.n	8005bd6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f7ff ff90 	bl	8005ae8 <xTimerGenericCommand>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <prvProcessExpiredTimer+0x5a>
 8005bd2:	b672      	cpsid	i
 8005bd4:	e7fe      	b.n	8005bd4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	0010      	movs	r0, r2
 8005bde:	4798      	blx	r3
}
 8005be0:	46c0      	nop			; (mov r8, r8)
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000e04 	.word	0x20000e04

08005bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 f851 	bl	8005ca0 <prvGetNextExpireTime>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f803 	bl	8005c14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c0e:	f000 f8c9 	bl	8005da4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c12:	e7ef      	b.n	8005bf4 <prvTimerTask+0x8>

08005c14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c1e:	f7ff faef 	bl	8005200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c22:	2308      	movs	r3, #8
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 f85a 	bl	8005ce0 <prvSampleTimeNow>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d129      	bne.n	8005c8a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10c      	bne.n	8005c56 <prvProcessTimerOrBlockTask+0x42>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d808      	bhi.n	8005c56 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005c44:	f7ff fae8 	bl	8005218 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff ff94 	bl	8005b7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c54:	e01b      	b.n	8005c8e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <prvProcessTimerOrBlockTask+0x84>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	425a      	negs	r2, r3
 8005c64:	4153      	adcs	r3, r2
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <prvProcessTimerOrBlockTask+0x88>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	0019      	movs	r1, r3
 8005c78:	f7ff f90c 	bl	8004e94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c7c:	f7ff facc 	bl	8005218 <xTaskResumeAll>
 8005c80:	1e03      	subs	r3, r0, #0
 8005c82:	d104      	bne.n	8005c8e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005c84:	f000 fa2c 	bl	80060e0 <vPortYield>
}
 8005c88:	e001      	b.n	8005c8e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005c8a:	f7ff fac5 	bl	8005218 <xTaskResumeAll>
}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	20000e08 	.word	0x20000e08
 8005c9c:	20000e0c 	.word	0x20000e0c

08005ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <prvGetNextExpireTime+0x3c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	425a      	negs	r2, r3
 8005cb0:	4153      	adcs	r3, r2
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <prvGetNextExpireTime+0x3c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e001      	b.n	8005cd2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b004      	add	sp, #16
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000e04 	.word	0x20000e04

08005ce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ce8:	f7ff fb22 	bl	8005330 <xTaskGetTickCount>
 8005cec:	0003      	movs	r3, r0
 8005cee:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvSampleTimeNow+0x3c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d205      	bcs.n	8005d06 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005cfa:	f000 f8d1 	bl	8005ea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e002      	b.n	8005d0c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <prvSampleTimeNow+0x3c>)
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005d12:	68fb      	ldr	r3, [r7, #12]
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b004      	add	sp, #16
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000e14 	.word	0x20000e14

08005d20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d812      	bhi.n	8005d6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e01b      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d5a:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <prvInsertTimerInActiveList+0x7c>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3304      	adds	r3, #4
 8005d62:	0019      	movs	r1, r3
 8005d64:	0010      	movs	r0, r2
 8005d66:	f7fe fc5f 	bl	8004628 <vListInsert>
 8005d6a:	e012      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d206      	bcs.n	8005d82 <prvInsertTimerInActiveList+0x62>
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e007      	b.n	8005d92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <prvInsertTimerInActiveList+0x80>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	0010      	movs	r0, r2
 8005d8e:	f7fe fc4b 	bl	8004628 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d92:	697b      	ldr	r3, [r7, #20]
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b006      	add	sp, #24
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000e08 	.word	0x20000e08
 8005da0:	20000e04 	.word	0x20000e04

08005da4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b08b      	sub	sp, #44	; 0x2c
 8005da8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005daa:	e065      	b.n	8005e78 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dac:	2208      	movs	r2, #8
 8005dae:	18bb      	adds	r3, r7, r2
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	db60      	blt.n	8005e78 <prvProcessReceivedCommands+0xd4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005db6:	18bb      	adds	r3, r7, r2
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7fe fc63 	bl	8004694 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dce:	1d3b      	adds	r3, r7, #4
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7ff ff85 	bl	8005ce0 <prvSampleTimeNow>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8005dda:	2308      	movs	r3, #8
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d848      	bhi.n	8005e76 <prvProcessReceivedCommands+0xd2>
 8005de4:	009a      	lsls	r2, r3, #2
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <prvProcessReceivedCommands+0xf4>)
 8005de8:	18d3      	adds	r3, r2, r3
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dee:	2408      	movs	r4, #8
 8005df0:	193b      	adds	r3, r7, r4
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	18d1      	adds	r1, r2, r3
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	69f8      	ldr	r0, [r7, #28]
 8005e02:	f7ff ff8d 	bl	8005d20 <prvInsertTimerInActiveList>
 8005e06:	1e03      	subs	r3, r0, #0
 8005e08:	d036      	beq.n	8005e78 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	0010      	movs	r0, r2
 8005e12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d12d      	bne.n	8005e78 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e1c:	193b      	adds	r3, r7, r4
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	18d2      	adds	r2, r2, r3
 8005e26:	69f8      	ldr	r0, [r7, #28]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	f7ff fe5a 	bl	8005ae8 <xTimerGenericCommand>
 8005e34:	0003      	movs	r3, r0
 8005e36:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11c      	bne.n	8005e78 <prvProcessReceivedCommands+0xd4>
 8005e3e:	b672      	cpsid	i
 8005e40:	e7fe      	b.n	8005e40 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e42:	2308      	movs	r3, #8
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <prvProcessReceivedCommands+0xb4>
 8005e54:	b672      	cpsid	i
 8005e56:	e7fe      	b.n	8005e56 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	18d1      	adds	r1, r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	69f8      	ldr	r0, [r7, #28]
 8005e66:	f7ff ff5b 	bl	8005d20 <prvInsertTimerInActiveList>
					break;
 8005e6a:	e005      	b.n	8005e78 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 fa84 	bl	800637c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e74:	e000      	b.n	8005e78 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
 8005e76:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <prvProcessReceivedCommands+0xf8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	18b9      	adds	r1, r7, r2
 8005e80:	2200      	movs	r2, #0
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7fe fe0b 	bl	8004a9e <xQueueReceive>
 8005e88:	1e03      	subs	r3, r0, #0
 8005e8a:	d18f      	bne.n	8005dac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b009      	add	sp, #36	; 0x24
 8005e94:	bd90      	pop	{r4, r7, pc}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	080067e4 	.word	0x080067e4
 8005e9c:	20000e0c 	.word	0x20000e0c

08005ea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ea6:	e03e      	b.n	8005f26 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ea8:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fe fbe7 	bl	8004694 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	0010      	movs	r0, r2
 8005ece:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d126      	bne.n	8005f26 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	18d3      	adds	r3, r2, r3
 8005ee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90e      	bls.n	8005f08 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3304      	adds	r3, #4
 8005efe:	0019      	movs	r1, r3
 8005f00:	0010      	movs	r0, r2
 8005f02:	f7fe fb91 	bl	8004628 <vListInsert>
 8005f06:	e00e      	b.n	8005f26 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2300      	movs	r3, #0
 8005f12:	2100      	movs	r1, #0
 8005f14:	f7ff fde8 	bl	8005ae8 <xTimerGenericCommand>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <prvSwitchTimerLists+0x86>
 8005f22:	b672      	cpsid	i
 8005f24:	e7fe      	b.n	8005f24 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1bb      	bne.n	8005ea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <prvSwitchTimerLists+0xb0>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <prvSwitchTimerLists+0xac>)
 8005f3c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <prvSwitchTimerLists+0xb0>)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	601a      	str	r2, [r3, #0]
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b006      	add	sp, #24
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000e04 	.word	0x20000e04
 8005f50:	20000e08 	.word	0x20000e08

08005f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f58:	f000 f8d2 	bl	8006100 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f5c:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d120      	bne.n	8005fa6 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <prvCheckForValidListAndQueue+0x60>)
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7fe fb13 	bl	8004592 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f6c:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prvCheckForValidListAndQueue+0x64>)
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7fe fb0f 	bl	8004592 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <prvCheckForValidListAndQueue+0x68>)
 8005f76:	4a0f      	ldr	r2, [pc, #60]	; (8005fb4 <prvCheckForValidListAndQueue+0x60>)
 8005f78:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <prvCheckForValidListAndQueue+0x6c>)
 8005f7c:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <prvCheckForValidListAndQueue+0x64>)
 8005f7e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f80:	2200      	movs	r2, #0
 8005f82:	210c      	movs	r1, #12
 8005f84:	2004      	movs	r0, #4
 8005f86:	f7fe fc01 	bl	800478c <xQueueGenericCreate>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <prvCheckForValidListAndQueue+0x5c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <prvCheckForValidListAndQueue+0x70>)
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7fe ff4f 	bl	8004e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f000 f8bd 	bl	8006124 <vPortExitCritical>
}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000e0c 	.word	0x20000e0c
 8005fb4:	20000ddc 	.word	0x20000ddc
 8005fb8:	20000df0 	.word	0x20000df0
 8005fbc:	20000e04 	.word	0x20000e04
 8005fc0:	20000e08 	.word	0x20000e08
 8005fc4:	080067a4 	.word	0x080067a4

08005fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	0452      	lsls	r2, r2, #17
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <pxPortInitialiseStack+0x50>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b14      	subs	r3, #20
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3b20      	subs	r3, #32
 800600a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800600c:	68fb      	ldr	r3, [r7, #12]
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	b004      	add	sp, #16
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	0800601d 	.word	0x0800601d

0800601c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <prvTaskExitError+0x2c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	d001      	beq.n	8006032 <prvTaskExitError+0x16>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006032:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006034:	46c0      	nop			; (mov r8, r8)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0fc      	beq.n	8006036 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800603c:	46c0      	nop			; (mov r8, r8)
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	46bd      	mov	sp, r7
 8006042:	b002      	add	sp, #8
 8006044:	bd80      	pop	{r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	20000008 	.word	0x20000008

0800604c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006050:	46c0      	nop			; (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006060 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006060:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <pxCurrentTCBConst2>)
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	3020      	adds	r0, #32
 8006068:	f380 8809 	msr	PSP, r0
 800606c:	2002      	movs	r0, #2
 800606e:	f380 8814 	msr	CONTROL, r0
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006078:	46ae      	mov	lr, r5
 800607a:	bc08      	pop	{r3}
 800607c:	bc04      	pop	{r2}
 800607e:	b662      	cpsie	i
 8006080:	4718      	bx	r3
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46c0      	nop			; (mov r8, r8)
 800608e:	46c0      	nop			; (mov r8, r8)

08006090 <pxCurrentTCBConst2>:
 8006090:	20000cb0 	.word	0x20000cb0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	46c0      	nop			; (mov r8, r8)

08006098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <xPortStartScheduler+0x40>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <xPortStartScheduler+0x40>)
 80060a2:	21ff      	movs	r1, #255	; 0xff
 80060a4:	0409      	lsls	r1, r1, #16
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <xPortStartScheduler+0x40>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <xPortStartScheduler+0x40>)
 80060b0:	21ff      	movs	r1, #255	; 0xff
 80060b2:	0609      	lsls	r1, r1, #24
 80060b4:	430a      	orrs	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80060b8:	f000 f898 	bl	80061ec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <xPortStartScheduler+0x44>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80060c2:	f7ff ffcd 	bl	8006060 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060c6:	f7ff f9f5 	bl	80054b4 <vTaskSwitchContext>
	prvTaskExitError();
 80060ca:	f7ff ffa7 	bl	800601c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	e000ed20 	.word	0xe000ed20
 80060dc:	20000008 	.word	0x20000008

080060e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <vPortYield+0x1c>)
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	0552      	lsls	r2, r2, #21
 80060ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80060ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80060f0:	f3bf 8f6f 	isb	sy
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006104:	b672      	cpsid	i
    uxCriticalNesting++;
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <vPortEnterCritical+0x20>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	4b04      	ldr	r3, [pc, #16]	; (8006120 <vPortEnterCritical+0x20>)
 800610e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006110:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006114:	f3bf 8f6f 	isb	sy
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	20000008 	.word	0x20000008

08006124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006128:	4b09      	ldr	r3, [pc, #36]	; (8006150 <vPortExitCritical+0x2c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <vPortExitCritical+0x10>
 8006130:	b672      	cpsid	i
 8006132:	e7fe      	b.n	8006132 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <vPortExitCritical+0x2c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <vPortExitCritical+0x2c>)
 800613c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800613e:	4b04      	ldr	r3, [pc, #16]	; (8006150 <vPortExitCritical+0x2c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d100      	bne.n	8006148 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006146:	b662      	cpsie	i
    }
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	20000008 	.word	0x20000008

08006154 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006154:	f3ef 8010 	mrs	r0, PRIMASK
 8006158:	b672      	cpsid	i
 800615a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	0018      	movs	r0, r3

08006160 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006160:	f380 8810 	msr	PRIMASK, r0
 8006164:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006166:	46c0      	nop			; (mov r8, r8)
	...

08006170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <pxCurrentTCBConst>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	3820      	subs	r0, #32
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800617e:	4644      	mov	r4, r8
 8006180:	464d      	mov	r5, r9
 8006182:	4656      	mov	r6, sl
 8006184:	465f      	mov	r7, fp
 8006186:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006188:	b508      	push	{r3, lr}
 800618a:	b672      	cpsid	i
 800618c:	f7ff f992 	bl	80054b4 <vTaskSwitchContext>
 8006190:	b662      	cpsie	i
 8006192:	bc0c      	pop	{r2, r3}
 8006194:	6811      	ldr	r1, [r2, #0]
 8006196:	6808      	ldr	r0, [r1, #0]
 8006198:	3010      	adds	r0, #16
 800619a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800619c:	46a0      	mov	r8, r4
 800619e:	46a9      	mov	r9, r5
 80061a0:	46b2      	mov	sl, r6
 80061a2:	46bb      	mov	fp, r7
 80061a4:	f380 8809 	msr	PSP, r0
 80061a8:	3820      	subs	r0, #32
 80061aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80061ac:	4718      	bx	r3
 80061ae:	46c0      	nop			; (mov r8, r8)

080061b0 <pxCurrentTCBConst>:
 80061b0:	20000cb0 	.word	0x20000cb0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46c0      	nop			; (mov r8, r8)

080061b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80061be:	f7ff ffc9 	bl	8006154 <ulSetInterruptMaskFromISR>
 80061c2:	0003      	movs	r3, r0
 80061c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c6:	f7ff f8c1 	bl	800534c <xTaskIncrementTick>
 80061ca:	1e03      	subs	r3, r0, #0
 80061cc:	d003      	beq.n	80061d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <SysTick_Handler+0x30>)
 80061d0:	2280      	movs	r2, #128	; 0x80
 80061d2:	0552      	lsls	r2, r2, #21
 80061d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	0018      	movs	r0, r3
 80061da:	f7ff ffc1 	bl	8006160 <vClearInterruptMaskFromISR>
}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b002      	add	sp, #8
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <prvSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <prvSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	22fa      	movs	r2, #250	; 0xfa
 8006202:	0091      	lsls	r1, r2, #2
 8006204:	0018      	movs	r0, r3
 8006206:	f7f9 ff7f 	bl	8000108 <__udivsi3>
 800620a:	0003      	movs	r3, r0
 800620c:	001a      	movs	r2, r3
 800620e:	4b07      	ldr	r3, [pc, #28]	; (800622c <prvSetupTimerInterrupt+0x40>)
 8006210:	3a01      	subs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006214:	4b02      	ldr	r3, [pc, #8]	; (8006220 <prvSetupTimerInterrupt+0x34>)
 8006216:	2207      	movs	r2, #7
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000000 	.word	0x20000000
 800622c:	e000e014 	.word	0xe000e014

08006230 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800623c:	f7fe ffe0 	bl	8005200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006240:	4b49      	ldr	r3, [pc, #292]	; (8006368 <pvPortMalloc+0x138>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006248:	f000 f8e0 	bl	800640c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800624c:	4b47      	ldr	r3, [pc, #284]	; (800636c <pvPortMalloc+0x13c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4013      	ands	r3, r2
 8006254:	d000      	beq.n	8006258 <pvPortMalloc+0x28>
 8006256:	e079      	b.n	800634c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800625e:	2208      	movs	r2, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	189b      	adds	r3, r3, r2
 8006264:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2207      	movs	r2, #7
 800626a:	4013      	ands	r3, r2
 800626c:	d00a      	beq.n	8006284 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2207      	movs	r2, #7
 8006272:	4393      	bics	r3, r2
 8006274:	3308      	adds	r3, #8
 8006276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2207      	movs	r2, #7
 800627c:	4013      	ands	r3, r2
 800627e:	d001      	beq.n	8006284 <pvPortMalloc+0x54>
 8006280:	b672      	cpsid	i
 8006282:	e7fe      	b.n	8006282 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d060      	beq.n	800634c <pvPortMalloc+0x11c>
 800628a:	4b39      	ldr	r3, [pc, #228]	; (8006370 <pvPortMalloc+0x140>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d85b      	bhi.n	800634c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006294:	4b37      	ldr	r3, [pc, #220]	; (8006374 <pvPortMalloc+0x144>)
 8006296:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006298:	4b36      	ldr	r3, [pc, #216]	; (8006374 <pvPortMalloc+0x144>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800629e:	e004      	b.n	80062aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d903      	bls.n	80062bc <pvPortMalloc+0x8c>
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f1      	bne.n	80062a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062bc:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <pvPortMalloc+0x138>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d042      	beq.n	800634c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2208      	movs	r2, #8
 80062cc:	189b      	adds	r3, r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	2308      	movs	r3, #8
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d916      	bls.n	8006316 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2207      	movs	r2, #7
 80062f4:	4013      	ands	r3, r2
 80062f6:	d001      	beq.n	80062fc <pvPortMalloc+0xcc>
 80062f8:	b672      	cpsid	i
 80062fa:	e7fe      	b.n	80062fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	0018      	movs	r0, r3
 8006312:	f000 f8db 	bl	80064cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <pvPortMalloc+0x140>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <pvPortMalloc+0x140>)
 8006322:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <pvPortMalloc+0x140>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <pvPortMalloc+0x148>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d203      	bcs.n	8006338 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <pvPortMalloc+0x140>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <pvPortMalloc+0x148>)
 8006336:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <pvPortMalloc+0x13c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	431a      	orrs	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800634c:	f7fe ff64 	bl	8005218 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2207      	movs	r2, #7
 8006354:	4013      	ands	r3, r2
 8006356:	d001      	beq.n	800635c <pvPortMalloc+0x12c>
 8006358:	b672      	cpsid	i
 800635a:	e7fe      	b.n	800635a <pvPortMalloc+0x12a>
	return pvReturn;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	b006      	add	sp, #24
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	20004e20 	.word	0x20004e20
 800636c:	20004e2c 	.word	0x20004e2c
 8006370:	20004e24 	.word	0x20004e24
 8006374:	20004e18 	.word	0x20004e18
 8006378:	20004e28 	.word	0x20004e28

0800637c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d035      	beq.n	80063fa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800638e:	2308      	movs	r3, #8
 8006390:	425b      	negs	r3, r3
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	18d3      	adds	r3, r2, r3
 8006396:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <vPortFree+0x88>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4013      	ands	r3, r2
 80063a6:	d101      	bne.n	80063ac <vPortFree+0x30>
 80063a8:	b672      	cpsid	i
 80063aa:	e7fe      	b.n	80063aa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <vPortFree+0x3c>
 80063b4:	b672      	cpsid	i
 80063b6:	e7fe      	b.n	80063b6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <vPortFree+0x88>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4013      	ands	r3, r2
 80063c2:	d01a      	beq.n	80063fa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d116      	bne.n	80063fa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <vPortFree+0x88>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063dc:	f7fe ff10 	bl	8005200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <vPortFree+0x8c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	18d2      	adds	r2, r2, r3
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <vPortFree+0x8c>)
 80063ec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 f86b 	bl	80064cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063f6:	f7fe ff0f 	bl	8005218 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b004      	add	sp, #16
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	20004e2c 	.word	0x20004e2c
 8006408:	20004e24 	.word	0x20004e24

0800640c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	01db      	lsls	r3, r3, #7
 8006416:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006418:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <prvHeapInit+0xa8>)
 800641a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2207      	movs	r2, #7
 8006420:	4013      	ands	r3, r2
 8006422:	d00c      	beq.n	800643e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3307      	adds	r3, #7
 8006428:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2207      	movs	r2, #7
 800642e:	4393      	bics	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <prvHeapInit+0xa8>)
 800643a:	18d3      	adds	r3, r2, r3
 800643c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <prvHeapInit+0xac>)
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006448:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <prvHeapInit+0xac>)
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	18d3      	adds	r3, r2, r3
 8006454:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006456:	2208      	movs	r2, #8
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1a9b      	subs	r3, r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2207      	movs	r2, #7
 8006462:	4393      	bics	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4b14      	ldr	r3, [pc, #80]	; (80064bc <prvHeapInit+0xb0>)
 800646a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800646c:	4b13      	ldr	r3, [pc, #76]	; (80064bc <prvHeapInit+0xb0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2200      	movs	r2, #0
 8006472:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006474:	4b11      	ldr	r3, [pc, #68]	; (80064bc <prvHeapInit+0xb0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800648a:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <prvHeapInit+0xb0>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <prvHeapInit+0xb4>)
 8006498:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <prvHeapInit+0xb8>)
 80064a0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <prvHeapInit+0xbc>)
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	0612      	lsls	r2, r2, #24
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b004      	add	sp, #16
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	20000e18 	.word	0x20000e18
 80064b8:	20004e18 	.word	0x20004e18
 80064bc:	20004e20 	.word	0x20004e20
 80064c0:	20004e28 	.word	0x20004e28
 80064c4:	20004e24 	.word	0x20004e24
 80064c8:	20004e2c 	.word	0x20004e2c

080064cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064d4:	4b27      	ldr	r3, [pc, #156]	; (8006574 <prvInsertBlockIntoFreeList+0xa8>)
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e002      	b.n	80064e0 <prvInsertBlockIntoFreeList+0x14>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d8f7      	bhi.n	80064da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	18d3      	adds	r3, r2, r3
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d108      	bne.n	800650e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	18d2      	adds	r2, r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	18d2      	adds	r2, r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d118      	bne.n	8006554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <prvInsertBlockIntoFreeList+0xac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d00d      	beq.n	800654a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	18d2      	adds	r2, r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e008      	b.n	800655c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800654a:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <prvInsertBlockIntoFreeList+0xac>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e003      	b.n	800655c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d002      	beq.n	800656a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	20004e18 	.word	0x20004e18
 8006578:	20004e20 	.word	0x20004e20

0800657c <memset>:
 800657c:	0003      	movs	r3, r0
 800657e:	1882      	adds	r2, r0, r2
 8006580:	4293      	cmp	r3, r2
 8006582:	d100      	bne.n	8006586 <memset+0xa>
 8006584:	4770      	bx	lr
 8006586:	7019      	strb	r1, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	e7f9      	b.n	8006580 <memset+0x4>

0800658c <_reclaim_reent>:
 800658c:	4b2d      	ldr	r3, [pc, #180]	; (8006644 <_reclaim_reent+0xb8>)
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	0004      	movs	r4, r0
 8006594:	4283      	cmp	r3, r0
 8006596:	d042      	beq.n	800661e <_reclaim_reent+0x92>
 8006598:	69c3      	ldr	r3, [r0, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <_reclaim_reent+0x28>
 800659e:	2500      	movs	r5, #0
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	d140      	bne.n	8006628 <_reclaim_reent+0x9c>
 80065a6:	69e3      	ldr	r3, [r4, #28]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	2900      	cmp	r1, #0
 80065ac:	d002      	beq.n	80065b4 <_reclaim_reent+0x28>
 80065ae:	0020      	movs	r0, r4
 80065b0:	f000 f87a 	bl	80066a8 <_free_r>
 80065b4:	6961      	ldr	r1, [r4, #20]
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d002      	beq.n	80065c0 <_reclaim_reent+0x34>
 80065ba:	0020      	movs	r0, r4
 80065bc:	f000 f874 	bl	80066a8 <_free_r>
 80065c0:	69e1      	ldr	r1, [r4, #28]
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d002      	beq.n	80065cc <_reclaim_reent+0x40>
 80065c6:	0020      	movs	r0, r4
 80065c8:	f000 f86e 	bl	80066a8 <_free_r>
 80065cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d002      	beq.n	80065d8 <_reclaim_reent+0x4c>
 80065d2:	0020      	movs	r0, r4
 80065d4:	f000 f868 	bl	80066a8 <_free_r>
 80065d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065da:	2900      	cmp	r1, #0
 80065dc:	d002      	beq.n	80065e4 <_reclaim_reent+0x58>
 80065de:	0020      	movs	r0, r4
 80065e0:	f000 f862 	bl	80066a8 <_free_r>
 80065e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d002      	beq.n	80065f0 <_reclaim_reent+0x64>
 80065ea:	0020      	movs	r0, r4
 80065ec:	f000 f85c 	bl	80066a8 <_free_r>
 80065f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d002      	beq.n	80065fc <_reclaim_reent+0x70>
 80065f6:	0020      	movs	r0, r4
 80065f8:	f000 f856 	bl	80066a8 <_free_r>
 80065fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80065fe:	2900      	cmp	r1, #0
 8006600:	d002      	beq.n	8006608 <_reclaim_reent+0x7c>
 8006602:	0020      	movs	r0, r4
 8006604:	f000 f850 	bl	80066a8 <_free_r>
 8006608:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800660a:	2900      	cmp	r1, #0
 800660c:	d002      	beq.n	8006614 <_reclaim_reent+0x88>
 800660e:	0020      	movs	r0, r4
 8006610:	f000 f84a 	bl	80066a8 <_free_r>
 8006614:	6a23      	ldr	r3, [r4, #32]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <_reclaim_reent+0x92>
 800661a:	0020      	movs	r0, r4
 800661c:	4798      	blx	r3
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	5949      	ldr	r1, [r1, r5]
 8006622:	2900      	cmp	r1, #0
 8006624:	d108      	bne.n	8006638 <_reclaim_reent+0xac>
 8006626:	3504      	adds	r5, #4
 8006628:	69e3      	ldr	r3, [r4, #28]
 800662a:	68d9      	ldr	r1, [r3, #12]
 800662c:	2d80      	cmp	r5, #128	; 0x80
 800662e:	d1f7      	bne.n	8006620 <_reclaim_reent+0x94>
 8006630:	0020      	movs	r0, r4
 8006632:	f000 f839 	bl	80066a8 <_free_r>
 8006636:	e7b6      	b.n	80065a6 <_reclaim_reent+0x1a>
 8006638:	680e      	ldr	r6, [r1, #0]
 800663a:	0020      	movs	r0, r4
 800663c:	f000 f834 	bl	80066a8 <_free_r>
 8006640:	0031      	movs	r1, r6
 8006642:	e7ee      	b.n	8006622 <_reclaim_reent+0x96>
 8006644:	20000058 	.word	0x20000058

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	2600      	movs	r6, #0
 800664c:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x38>)
 800664e:	4d0d      	ldr	r5, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 8006650:	1b64      	subs	r4, r4, r5
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	2600      	movs	r6, #0
 800665a:	f000 f87f 	bl	800675c <_init>
 800665e:	4c0a      	ldr	r4, [pc, #40]	; (8006688 <__libc_init_array+0x40>)
 8006660:	4d0a      	ldr	r5, [pc, #40]	; (800668c <__libc_init_array+0x44>)
 8006662:	1b64      	subs	r4, r4, r5
 8006664:	10a4      	asrs	r4, r4, #2
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	00b3      	lsls	r3, r6, #2
 800666e:	58eb      	ldr	r3, [r5, r3]
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	00b3      	lsls	r3, r6, #2
 8006678:	58eb      	ldr	r3, [r5, r3]
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	0800680c 	.word	0x0800680c
 8006684:	0800680c 	.word	0x0800680c
 8006688:	08006810 	.word	0x08006810
 800668c:	0800680c 	.word	0x0800680c

08006690 <__retarget_lock_acquire_recursive>:
 8006690:	4770      	bx	lr

08006692 <__retarget_lock_release_recursive>:
 8006692:	4770      	bx	lr

08006694 <memcpy>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	429a      	cmp	r2, r3
 800669a:	d100      	bne.n	800669e <memcpy+0xa>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	5ccc      	ldrb	r4, [r1, r3]
 80066a0:	54c4      	strb	r4, [r0, r3]
 80066a2:	3301      	adds	r3, #1
 80066a4:	e7f8      	b.n	8006698 <memcpy+0x4>
	...

080066a8 <_free_r>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	0005      	movs	r5, r0
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d010      	beq.n	80066d2 <_free_r+0x2a>
 80066b0:	1f0c      	subs	r4, r1, #4
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da00      	bge.n	80066ba <_free_r+0x12>
 80066b8:	18e4      	adds	r4, r4, r3
 80066ba:	0028      	movs	r0, r5
 80066bc:	f000 f83e 	bl	800673c <__malloc_lock>
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <_free_r+0x90>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <_free_r+0x2c>
 80066c8:	6063      	str	r3, [r4, #4]
 80066ca:	6014      	str	r4, [r2, #0]
 80066cc:	0028      	movs	r0, r5
 80066ce:	f000 f83d 	bl	800674c <__malloc_unlock>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d908      	bls.n	80066ea <_free_r+0x42>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	1821      	adds	r1, r4, r0
 80066dc:	428b      	cmp	r3, r1
 80066de:	d1f3      	bne.n	80066c8 <_free_r+0x20>
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	1809      	adds	r1, r1, r0
 80066e6:	6021      	str	r1, [r4, #0]
 80066e8:	e7ee      	b.n	80066c8 <_free_r+0x20>
 80066ea:	001a      	movs	r2, r3
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <_free_r+0x4e>
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	d9f9      	bls.n	80066ea <_free_r+0x42>
 80066f6:	6811      	ldr	r1, [r2, #0]
 80066f8:	1850      	adds	r0, r2, r1
 80066fa:	42a0      	cmp	r0, r4
 80066fc:	d10b      	bne.n	8006716 <_free_r+0x6e>
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	1809      	adds	r1, r1, r0
 8006702:	1850      	adds	r0, r2, r1
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	4283      	cmp	r3, r0
 8006708:	d1e0      	bne.n	80066cc <_free_r+0x24>
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	1841      	adds	r1, r0, r1
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	e7da      	b.n	80066cc <_free_r+0x24>
 8006716:	42a0      	cmp	r0, r4
 8006718:	d902      	bls.n	8006720 <_free_r+0x78>
 800671a:	230c      	movs	r3, #12
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	e7d5      	b.n	80066cc <_free_r+0x24>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	1821      	adds	r1, r4, r0
 8006724:	428b      	cmp	r3, r1
 8006726:	d103      	bne.n	8006730 <_free_r+0x88>
 8006728:	6819      	ldr	r1, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	1809      	adds	r1, r1, r0
 800672e:	6021      	str	r1, [r4, #0]
 8006730:	6063      	str	r3, [r4, #4]
 8006732:	6054      	str	r4, [r2, #4]
 8006734:	e7ca      	b.n	80066cc <_free_r+0x24>
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	20004f6c 	.word	0x20004f6c

0800673c <__malloc_lock>:
 800673c:	b510      	push	{r4, lr}
 800673e:	4802      	ldr	r0, [pc, #8]	; (8006748 <__malloc_lock+0xc>)
 8006740:	f7ff ffa6 	bl	8006690 <__retarget_lock_acquire_recursive>
 8006744:	bd10      	pop	{r4, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	20004f68 	.word	0x20004f68

0800674c <__malloc_unlock>:
 800674c:	b510      	push	{r4, lr}
 800674e:	4802      	ldr	r0, [pc, #8]	; (8006758 <__malloc_unlock+0xc>)
 8006750:	f7ff ff9f 	bl	8006692 <__retarget_lock_release_recursive>
 8006754:	bd10      	pop	{r4, pc}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	20004f68 	.word	0x20004f68

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
