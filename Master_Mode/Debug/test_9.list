
test_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c40c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c860  0800c860  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800c860  0800c860  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c860  0800c860  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c860  0800c860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c864  0800c864  0001c864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cac  20000070  0800c8d8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d1c  0800c8d8  00024d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d220  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000549e  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  00042758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  000440b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c92  00000000  00000000  00045778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002705e  00000000  00000000  0006840a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5ef3  00000000  00000000  0008f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014535b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  001453ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  0014ace8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c4b4 	.word	0x0800c4b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800c4b4 	.word	0x0800c4b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_CRC_Init+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <MX_CRC_Init+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CRC_Init+0x40>)
 800022c:	2200      	movs	r2, #0
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CRC_Init+0x40>)
 8000232:	2200      	movs	r2, #0
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CRC_Init+0x40>)
 8000238:	2200      	movs	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_CRC_Init+0x40>)
 800023e:	2200      	movs	r2, #0
 8000240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000242:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CRC_Init+0x40>)
 8000244:	2203      	movs	r2, #3
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_CRC_Init+0x40>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 f9fc 	bl	8001648 <HAL_CRC_Init>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d001      	beq.n	8000258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000254:	f000 fb70 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	2000008c 	.word	0x2000008c
 8000264:	40023000 	.word	0x40023000

08000268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CRC_MspInit+0x34>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d10b      	bne.n	8000292 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_CRC_MspInit+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	2240      	movs	r2, #64	; 0x40
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40023000 	.word	0x40023000
 80002a0:	40021000 	.word	0x40021000

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MX_DMA_Init+0x48>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_DMA_Init+0x48>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <MX_DMA_Init+0x48>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 3, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2103      	movs	r1, #3
 80002c6:	2009      	movs	r0, #9
 80002c8:	f001 f988 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80002cc:	2009      	movs	r0, #9
 80002ce:	f001 f99a 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 3, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2103      	movs	r1, #3
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 f980 	bl	80015dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80002dc:	200a      	movs	r0, #10
 80002de:	f001 f992 	bl	8001606 <HAL_NVIC_EnableIRQ>

}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b087      	sub	sp, #28
 80002f4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <MX_FREERTOS_Init+0x2c>)
 80002fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fc:	c313      	stmia	r3!, {r0, r1, r4}
 80002fe:	ca03      	ldmia	r2!, {r0, r1}
 8000300:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f005 ff97 	bl	800623a <osThreadCreate>
 800030c:	0002      	movs	r2, r0
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <MX_FREERTOS_Init+0x30>)
 8000310:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b007      	add	sp, #28
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	0800c4d8 	.word	0x0800c4d8
 8000320:	200000b0 	.word	0x200000b0

08000324 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	240c      	movs	r4, #12
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2314      	movs	r3, #20
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f00b ffe8 	bl	800c30a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_GPIO_Init+0x8c>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <MX_GPIO_Init+0x8c>)
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	0289      	lsls	r1, r1, #10
 8000344:	430a      	orrs	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <MX_GPIO_Init+0x8c>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	029b      	lsls	r3, r3, #10
 8000350:	4013      	ands	r3, r2
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_GPIO_Init+0x8c>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_GPIO_Init+0x8c>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	02c9      	lsls	r1, r1, #11
 8000360:	430a      	orrs	r2, r1
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_GPIO_Init+0x8c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	02db      	lsls	r3, r3, #11
 800036c:	4013      	ands	r3, r2
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_IND_LED_PIN_GPIO_Port, _IND_LED_PIN_Pin, GPIO_PIN_RESET);
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	01db      	lsls	r3, r3, #7
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <MX_GPIO_Init+0x90>)
 8000378:	2200      	movs	r2, #0
 800037a:	0019      	movs	r1, r3
 800037c:	f002 f9cc 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _IND_LED_PIN_Pin;
 8000380:	193b      	adds	r3, r7, r4
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	01d2      	lsls	r2, r2, #7
 8000386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	193b      	adds	r3, r7, r4
 800038a:	2201      	movs	r2, #1
 800038c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	193b      	adds	r3, r7, r4
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(_IND_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800039a:	193b      	adds	r3, r7, r4
 800039c:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <MX_GPIO_Init+0x90>)
 800039e:	0019      	movs	r1, r3
 80003a0:	0010      	movs	r0, r2
 80003a2:	f001 ff69 	bl	8002278 <HAL_GPIO_Init>

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b009      	add	sp, #36	; 0x24
 80003ac:	bd90      	pop	{r4, r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	40021000 	.word	0x40021000
 80003b4:	48000400 	.word	0x48000400

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f001 f810 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f81a 	bl	80003f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  Module_Init();
 80003c4:	f005 fa2e 	bl	8005824 <Module_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f7ff ffac 	bl	8000324 <MX_GPIO_Init>
  MX_DMA_Init();
 80003cc:	f7ff ff6a 	bl	80002a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003d0:	f000 fbe2 	bl	8000b98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003d4:	f000 fc16 	bl	8000c04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80003d8:	f000 fc48 	bl	8000c6c <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80003dc:	f000 fc7a 	bl	8000cd4 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 80003e0:	f000 fcac 	bl	8000d3c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 80003e4:	f000 fcde 	bl	8000da4 <MX_USART6_UART_Init>
  MX_CRC_Init();
 80003e8:	f7ff ff1a 	bl	8000220 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80003ec:	f7ff ff80 	bl	80002f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003f0:	f005 ff1b 	bl	800622a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <main+0x3c>
	...

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b099      	sub	sp, #100	; 0x64
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	242c      	movs	r4, #44	; 0x2c
 8000400:	193b      	adds	r3, r7, r4
 8000402:	0018      	movs	r0, r3
 8000404:	2334      	movs	r3, #52	; 0x34
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f00b ff7e 	bl	800c30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040e:	231c      	movs	r3, #28
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	0018      	movs	r0, r3
 8000414:	2310      	movs	r3, #16
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f00b ff76 	bl	800c30a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041e:	003b      	movs	r3, r7
 8000420:	0018      	movs	r0, r3
 8000422:	231c      	movs	r3, #28
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f00b ff6f 	bl	800c30a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800042c:	0021      	movs	r1, r4
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2220      	movs	r2, #32
 8000432:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2201      	movs	r2, #1
 8000438:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043a:	187b      	adds	r3, r7, r1
 800043c:	2202      	movs	r2, #2
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000440:	187b      	adds	r3, r7, r1
 8000442:	22c0      	movs	r2, #192	; 0xc0
 8000444:	0252      	lsls	r2, r2, #9
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	22e0      	movs	r2, #224	; 0xe0
 800044c:	0392      	lsls	r2, r2, #14
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV16;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	220f      	movs	r2, #15
 8000454:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	187b      	adds	r3, r7, r1
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f9c7 	bl	80027ec <HAL_RCC_OscConfig>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000462:	f000 fa69 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	211c      	movs	r1, #28
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2207      	movs	r2, #7
 800046c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2101      	movs	r1, #1
 8000484:	0018      	movs	r0, r3
 8000486:	f002 fd37 	bl	8002ef8 <HAL_RCC_ClockConfig>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800048e:	f000 fa53 	bl	8000938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8000492:	003b      	movs	r3, r7
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <SystemClock_Config+0xcc>)
 8000496:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000498:	003b      	movs	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800049e:	003b      	movs	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80004a4:	003b      	movs	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004aa:	003b      	movs	r3, r7
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 feb9 	bl	8003224 <HAL_RCCEx_PeriphCLKConfig>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004b6:	f000 fa3f 	bl	8000938 <Error_Handler>
  }
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b019      	add	sp, #100	; 0x64
 80004c0:	bd90      	pop	{r4, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	00040003 	.word	0x00040003

080004c8 <StartDefaultTask>:

/* USER CODE BEGIN 4 */
void StartDefaultTask(void const * argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN 5 */
		_IND_ON();
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	01db      	lsls	r3, r3, #7
 80004d4:	4830      	ldr	r0, [pc, #192]	; (8000598 <StartDefaultTask+0xd0>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	0019      	movs	r1, r3
 80004da:	f002 f91d 	bl	8002718 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 ffac 	bl	8001440 <HAL_Delay>
		_IND_OFF();
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	01db      	lsls	r3, r3, #7
 80004ec:	482a      	ldr	r0, [pc, #168]	; (8000598 <StartDefaultTask+0xd0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0019      	movs	r1, r3
 80004f2:	f002 f911 	bl	8002718 <HAL_GPIO_WritePin>

		/* initialize MB port */
		eMBSSerialInit(&xMBSlave,MB_RTU,SLAVE_ADDRESS,1,9600,MB_PAR_NONE);
 80004f6:	4829      	ldr	r0, [pc, #164]	; (800059c <StartDefaultTask+0xd4>)
 80004f8:	2302      	movs	r3, #2
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2396      	movs	r3, #150	; 0x96
 80004fe:	019b      	lsls	r3, r3, #6
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2301      	movs	r3, #1
 8000504:	2206      	movs	r2, #6
 8000506:	2100      	movs	r1, #0
 8000508:	f008 fb34 	bl	8008b74 <eMBSSerialInit>

		usRegHoldingValue[0] = SLAVE_ADDRESS;
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <StartDefaultTask+0xd8>)
 800050e:	2206      	movs	r2, #6
 8000510:	801a      	strh	r2, [r3, #0]
		usRegHoldingValue[1] = WATERMETRE_NAME;
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <StartDefaultTask+0xd8>)
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <StartDefaultTask+0xdc>)
 8000516:	805a      	strh	r2, [r3, #2]
		usRegHoldingValue[2] = (USHORT) (METRE_SERIAL_NUMBER >> 16);
 8000518:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <StartDefaultTask+0xd8>)
 800051a:	229e      	movs	r2, #158	; 0x9e
 800051c:	809a      	strh	r2, [r3, #4]
		usRegHoldingValue[3] = (USHORT) METRE_SERIAL_NUMBER;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <StartDefaultTask+0xd8>)
 8000520:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <StartDefaultTask+0xe0>)
 8000522:	80da      	strh	r2, [r3, #6]

	//	WaterValue = (int *)&WaterMeter;
	//	RatioValue = (int *)&WaterMeterRatio;

	remoteVar1 = 10;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <StartDefaultTask+0xe4>)
 8000526:	220a      	movs	r2, #10
 8000528:	601a      	str	r2, [r3, #0]
	remoteVar2 = 20;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <StartDefaultTask+0xe8>)
 800052c:	2214      	movs	r2, #20
 800052e:	601a      	str	r2, [r3, #0]
	remoteVar3 = 30;
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <StartDefaultTask+0xec>)
 8000532:	221e      	movs	r2, #30
 8000534:	601a      	str	r2, [r3, #0]
	remoteVar4 = 40;
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <StartDefaultTask+0xf0>)
 8000538:	2228      	movs	r2, #40	; 0x28
 800053a:	601a      	str	r2, [r3, #0]
	remoteVar5 = 50;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <StartDefaultTask+0xf4>)
 800053e:	2232      	movs	r2, #50	; 0x32
 8000540:	601a      	str	r2, [r3, #0]
	remoteVar6 = 60;
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <StartDefaultTask+0xf8>)
 8000544:	223c      	movs	r2, #60	; 0x3c
 8000546:	601a      	str	r2, [r3, #0]
	remoteVar7 = 70;
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <StartDefaultTask+0xfc>)
 800054a:	2246      	movs	r2, #70	; 0x46
 800054c:	601a      	str	r2, [r3, #0]
	remoteVar8 = 80;
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <StartDefaultTask+0x100>)
 8000550:	2250      	movs	r2, #80	; 0x50
 8000552:	601a      	str	r2, [r3, #0]
	remoteVar9 = 90;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <StartDefaultTask+0x104>)
 8000556:	225a      	movs	r2, #90	; 0x5a
 8000558:	601a      	str	r2, [r3, #0]
	  /* Infinite loop */
  for(;;)
  {
	  c++;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <StartDefaultTask+0x108>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <StartDefaultTask+0x108>)
 8000562:	601a      	str	r2, [r3, #0]
	  //
	  //		  SendMessage(2 , CODE_READ_REMOTE_ModBus_RESPONSE ,2 , messageParams1 ,5);
	  //		  HAL_Delay(200);

	  /* Poll the communication stack */
	  eMBSPoll( xMBSlave );
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <StartDefaultTask+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0018      	movs	r0, r3
 800056a:	f008 f945 	bl	80087f8 <eMBSPoll>

	  if( MB_ENOERR != ( eStatus = eMBSRegisterHoldingCB( xMBSlave, eMyRegHoldingCB ) ) )
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <StartDefaultTask+0xd4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <StartDefaultTask+0x10c>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f008 f912 	bl	80087a0 <eMBSRegisterHoldingCB>
 800057c:	0003      	movs	r3, r0
 800057e:	001a      	movs	r2, r3
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <StartDefaultTask+0x110>)
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <StartDefaultTask+0x110>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0e6      	beq.n	800055a <StartDefaultTask+0x92>
	  {
	  		( void )eMBSClose( xMBSlave );
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <StartDefaultTask+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0018      	movs	r0, r3
 8000592:	f008 f8d5 	bl	8008740 <eMBSClose>
	  c++;
 8000596:	e7e0      	b.n	800055a <StartDefaultTask+0x92>
 8000598:	48000400 	.word	0x48000400
 800059c:	200000b8 	.word	0x200000b8
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	000006f7 	.word	0x000006f7
 80005a8:	ffffefde 	.word	0xffffefde
 80005ac:	200006a0 	.word	0x200006a0
 80005b0:	200006a4 	.word	0x200006a4
 80005b4:	200006a8 	.word	0x200006a8
 80005b8:	200006ac 	.word	0x200006ac
 80005bc:	200006b0 	.word	0x200006b0
 80005c0:	200006b4 	.word	0x200006b4
 80005c4:	200006b8 	.word	0x200006b8
 80005c8:	200006bc 	.word	0x200006bc
 80005cc:	200006c0 	.word	0x200006c0
 80005d0:	200000b4 	.word	0x200000b4
 80005d4:	080005dd 	.word	0x080005dd
 80005d8:	200000bc 	.word	0x200000bc

080005dc <eMyRegHoldingCB>:
  }
  /* USER CODE END StartDefaultTask */
}
eMBException
eMyRegHoldingCB( UBYTE * pubRegBuffer, USHORT usAddress, USHORT usNRegs, eMBSRegisterMode eRegMode )
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	000c      	movs	r4, r1
 80005e6:	0010      	movs	r0, r2
 80005e8:	0019      	movs	r1, r3
 80005ea:	250a      	movs	r5, #10
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	1c22      	adds	r2, r4, #0
 80005f0:	801a      	strh	r2, [r3, #0]
 80005f2:	2408      	movs	r4, #8
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	1c02      	adds	r2, r0, #0
 80005f8:	801a      	strh	r2, [r3, #0]
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	1c0a      	adds	r2, r1, #0
 80005fe:	701a      	strb	r2, [r3, #0]

    eMBException    eException = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8000600:	261f      	movs	r6, #31
 8000602:	19bb      	adds	r3, r7, r6
 8000604:	2202      	movs	r2, #2
 8000606:	701a      	strb	r2, [r3, #0]
    STATIC const ULONG usRegsMappedAt = 0x0200;
    ULONG           usRegStart = usAddress;
 8000608:	0028      	movs	r0, r5
 800060a:	183b      	adds	r3, r7, r0
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	61bb      	str	r3, [r7, #24]
    ULONG           usRegEnd = usAddress + usNRegs - 1;
 8000610:	183b      	adds	r3, r7, r0
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	193b      	adds	r3, r7, r4
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	3b01      	subs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
    USHORT          usIndex;
    USHORT          usIndexEnd;

    if( ( usNRegs > 0 ) && ( usRegStart >= usRegsMappedAt )
 800061e:	193b      	adds	r3, r7, r4
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <eMyRegHoldingCB+0x4c>
 8000626:	e162      	b.n	80008ee <eMyRegHoldingCB+0x312>
 8000628:	4bb5      	ldr	r3, [pc, #724]	; (8000900 <eMyRegHoldingCB+0x324>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	429a      	cmp	r2, r3
 8000630:	d200      	bcs.n	8000634 <eMyRegHoldingCB+0x58>
 8000632:	e15c      	b.n	80008ee <eMyRegHoldingCB+0x312>
        && ( usRegEnd <= ( usRegsMappedAt + MB_UTILS_NARRSIZE( usRegHoldingValue ) ) ) )
 8000634:	4bb2      	ldr	r3, [pc, #712]	; (8000900 <eMyRegHoldingCB+0x324>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3364      	adds	r3, #100	; 0x64
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	429a      	cmp	r2, r3
 800063e:	d900      	bls.n	8000642 <eMyRegHoldingCB+0x66>
 8000640:	e155      	b.n	80008ee <eMyRegHoldingCB+0x312>
    {
        usIndex = ( USHORT ) ( usRegStart - usRegsMappedAt );
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	b299      	uxth	r1, r3
 8000646:	4bae      	ldr	r3, [pc, #696]	; (8000900 <eMyRegHoldingCB+0x324>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b29a      	uxth	r2, r3
 800064c:	231c      	movs	r3, #28
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	1a8a      	subs	r2, r1, r2
 8000652:	801a      	strh	r2, [r3, #0]
        usIndexEnd = ( USHORT ) ( usRegEnd - usRegsMappedAt );
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	b299      	uxth	r1, r3
 8000658:	4ba9      	ldr	r3, [pc, #676]	; (8000900 <eMyRegHoldingCB+0x324>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	b29a      	uxth	r2, r3
 800065e:	2312      	movs	r3, #18
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	1a8a      	subs	r2, r1, r2
 8000664:	801a      	strh	r2, [r3, #0]
        switch ( eRegMode )
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d000      	beq.n	8000670 <eMyRegHoldingCB+0x94>
 800066e:	e134      	b.n	80008da <eMyRegHoldingCB+0x2fe>
        {
        case MBS_REGISTER_WRITE:

							if (usAddress==0x0200)
 8000670:	183b      	adds	r3, r7, r0
 8000672:	881a      	ldrh	r2, [r3, #0]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	429a      	cmp	r2, r3
 800067a:	d000      	beq.n	800067e <eMyRegHoldingCB+0xa2>
 800067c:	e093      	b.n	80007a6 <eMyRegHoldingCB+0x1ca>
								{

										usRegHoldingValue[4] = ( USHORT ) * pubRegBuffer++ << 8;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	60fa      	str	r2, [r7, #12]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b29b      	uxth	r3, r3
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b9d      	ldr	r3, [pc, #628]	; (8000904 <eMyRegHoldingCB+0x328>)
 800068e:	811a      	strh	r2, [r3, #8]
										usRegHoldingValue[4] |= ( USHORT ) * pubRegBuffer++;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60fa      	str	r2, [r7, #12]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b9a      	ldr	r3, [pc, #616]	; (8000904 <eMyRegHoldingCB+0x328>)
 800069c:	891b      	ldrh	r3, [r3, #8]
 800069e:	4313      	orrs	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b98      	ldr	r3, [pc, #608]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006a4:	811a      	strh	r2, [r3, #8]

										HAL_Delay(500);
 80006a6:	23fa      	movs	r3, #250	; 0xfa
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fec8 	bl	8001440 <HAL_Delay>
										usRegHoldingValue[5] = ( USHORT ) * pubRegBuffer++ << 8;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	60fa      	str	r2, [r7, #12]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b91      	ldr	r3, [pc, #580]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006c0:	815a      	strh	r2, [r3, #10]
										usRegHoldingValue[5] |= ( USHORT ) * pubRegBuffer++;          // First var
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	60fa      	str	r2, [r7, #12]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b8d      	ldr	r3, [pc, #564]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006ce:	895b      	ldrh	r3, [r3, #10]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006d6:	815a      	strh	r2, [r3, #10]

										usRegHoldingValue[6] = ( USHORT ) * pubRegBuffer++ << 8;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60fa      	str	r2, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b87      	ldr	r3, [pc, #540]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006e8:	819a      	strh	r2, [r3, #12]
										usRegHoldingValue[6] |= ( USHORT ) * pubRegBuffer++;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	60fa      	str	r2, [r7, #12]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b83      	ldr	r3, [pc, #524]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006f6:	899b      	ldrh	r3, [r3, #12]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b81      	ldr	r3, [pc, #516]	; (8000904 <eMyRegHoldingCB+0x328>)
 80006fe:	819a      	strh	r2, [r3, #12]
										usRegHoldingValue[7] = ( USHORT ) * pubRegBuffer++ << 8;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60fa      	str	r2, [r7, #12]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b7d      	ldr	r3, [pc, #500]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000710:	81da      	strh	r2, [r3, #14]
										usRegHoldingValue[7] |= ( USHORT ) * pubRegBuffer++;          // Second var
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60fa      	str	r2, [r7, #12]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b79      	ldr	r3, [pc, #484]	; (8000904 <eMyRegHoldingCB+0x328>)
 800071e:	89db      	ldrh	r3, [r3, #14]
 8000720:	4313      	orrs	r3, r2
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b77      	ldr	r3, [pc, #476]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000726:	81da      	strh	r2, [r3, #14]

										usRegHoldingValue[8] = ( USHORT ) * pubRegBuffer++ << 8;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60fa      	str	r2, [r7, #12]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b73      	ldr	r3, [pc, #460]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000738:	821a      	strh	r2, [r3, #16]
										usRegHoldingValue[8] |= ( USHORT ) * pubRegBuffer++;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	60fa      	str	r2, [r7, #12]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b6f      	ldr	r3, [pc, #444]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000746:	8a1b      	ldrh	r3, [r3, #16]
 8000748:	4313      	orrs	r3, r2
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b6d      	ldr	r3, [pc, #436]	; (8000904 <eMyRegHoldingCB+0x328>)
 800074e:	821a      	strh	r2, [r3, #16]
										usRegHoldingValue[9] = ( USHORT ) * pubRegBuffer++ << 8;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60fa      	str	r2, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b69      	ldr	r3, [pc, #420]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000760:	825a      	strh	r2, [r3, #18]
										usRegHoldingValue[9] |= ( USHORT ) * pubRegBuffer++;          // Third var
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	60fa      	str	r2, [r7, #12]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b65      	ldr	r3, [pc, #404]	; (8000904 <eMyRegHoldingCB+0x328>)
 800076e:	8a5b      	ldrh	r3, [r3, #18]
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b63      	ldr	r3, [pc, #396]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000776:	825a      	strh	r2, [r3, #18]
																	_IND_ON();
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	01db      	lsls	r3, r3, #7
 800077c:	4862      	ldr	r0, [pc, #392]	; (8000908 <eMyRegHoldingCB+0x32c>)
 800077e:	2201      	movs	r2, #1
 8000780:	0019      	movs	r1, r3
 8000782:	f001 ffc9 	bl	8002718 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fe58 	bl	8001440 <HAL_Delay>
	_IND_OFF();
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	485c      	ldr	r0, [pc, #368]	; (8000908 <eMyRegHoldingCB+0x32c>)
 8000796:	2200      	movs	r2, #0
 8000798:	0019      	movs	r1, r3
 800079a:	f001 ffbd 	bl	8002718 <HAL_GPIO_WritePin>
//										usRegHoldingValue[20] = ( USHORT ) * pubRegBuffer++ << 8;
//										usRegHoldingValue[20] |= ( USHORT ) * pubRegBuffer++;
//										usRegHoldingValue[21] = ( USHORT ) * pubRegBuffer++ << 8;
//										usRegHoldingValue[21] |= ( USHORT ) * pubRegBuffer++;         // Ninth var
//
										eException = MB_PDU_EX_NONE;
 800079e:	19bb      	adds	r3, r7, r6
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
							  }
							else
								eException = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
            break;
 80007a4:	e0a4      	b.n	80008f0 <eMyRegHoldingCB+0x314>
								eException = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 80007a6:	231f      	movs	r3, #31
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]
            break;
 80007ae:	e09f      	b.n	80008f0 <eMyRegHoldingCB+0x314>
        default:
        case MBS_REGISTER_READ:

            for( ; usIndex <= usIndexEnd; usIndex++ )
            {
                *pubRegBuffer++ = ( UBYTE ) ( usRegHoldingValue[usIndex] >> 8 );
 80007b0:	201c      	movs	r0, #28
 80007b2:	183b      	adds	r3, r7, r0
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	5ad3      	ldrh	r3, [r2, r3]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b299      	uxth	r1, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60fa      	str	r2, [r7, #12]
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
                *pubRegBuffer++ = ( UBYTE ) ( usRegHoldingValue[usIndex] & 0xFF );
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	5ad1      	ldrh	r1, [r2, r3]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60fa      	str	r2, [r7, #12]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
								    usRegHoldingValue[4] =9; // Rmsv (LSByte)
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007e0:	2209      	movs	r2, #9
 80007e2:	811a      	strh	r2, [r3, #8]
										usRegHoldingValue[5] =0;//  Rmsv (MSByte)
 80007e4:	4b47      	ldr	r3, [pc, #284]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	815a      	strh	r2, [r3, #10]
										usRegHoldingValue[6] =n++; // Rmsv (LSByte)
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <eMyRegHoldingCB+0x330>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	1c51      	adds	r1, r2, #1
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <eMyRegHoldingCB+0x330>)
 80007f2:	6019      	str	r1, [r3, #0]
 80007f4:	b292      	uxth	r2, r2
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007f8:	819a      	strh	r2, [r3, #12]
										usRegHoldingValue[7] =6;//  Rmsv (MSByte)
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <eMyRegHoldingCB+0x328>)
 80007fc:	2206      	movs	r2, #6
 80007fe:	81da      	strh	r2, [r3, #14]
										usRegHoldingValue[8] =Str1[4];//Lsb of Rmsi*1000
 8000800:	4b43      	ldr	r3, [pc, #268]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000808:	821a      	strh	r2, [r3, #16]
										usRegHoldingValue[9] =Str1[5];//2nd of Rmsi*1000
 800080a:	4b41      	ldr	r3, [pc, #260]	; (8000910 <eMyRegHoldingCB+0x334>)
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000812:	825a      	strh	r2, [r3, #18]
										usRegHoldingValue[10] =Str1[6];//3rd of Rmsi*1000
 8000814:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000816:	799b      	ldrb	r3, [r3, #6]
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <eMyRegHoldingCB+0x328>)
 800081c:	829a      	strh	r2, [r3, #20]
										usRegHoldingValue[11] =Str1[7];//Msb of Rmsi*1000
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000820:	79db      	ldrb	r3, [r3, #7]
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000826:	82da      	strh	r2, [r3, #22]
										usRegHoldingValue[12]=Str1[8];//Lsb of P_F*1000
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <eMyRegHoldingCB+0x334>)
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000830:	831a      	strh	r2, [r3, #24]
										usRegHoldingValue[13]=Str1[9];//2nd of P_F*1000
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000834:	7a5b      	ldrb	r3, [r3, #9]
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b32      	ldr	r3, [pc, #200]	; (8000904 <eMyRegHoldingCB+0x328>)
 800083a:	835a      	strh	r2, [r3, #26]
										usRegHoldingValue[14]=Str1[10];//3rd of P_F*1000
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <eMyRegHoldingCB+0x334>)
 800083e:	7a9b      	ldrb	r3, [r3, #10]
 8000840:	b29a      	uxth	r2, r3
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000844:	839a      	strh	r2, [r3, #28]
										usRegHoldingValue[15]=Str1[11];//Msb of P_F*1000
 8000846:	4b32      	ldr	r3, [pc, #200]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000848:	7adb      	ldrb	r3, [r3, #11]
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <eMyRegHoldingCB+0x328>)
 800084e:	83da      	strh	r2, [r3, #30]
                    usRegHoldingValue[16]=Str1[12]; //Lsb of R_p_h
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000858:	841a      	strh	r2, [r3, #32]
										usRegHoldingValue[17]=Str1[13]; //Msb of R_p_h
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <eMyRegHoldingCB+0x334>)
 800085c:	7b5b      	ldrb	r3, [r3, #13]
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000862:	845a      	strh	r2, [r3, #34]	; 0x22
										usRegHoldingValue[18]=Str1[14];// R_p_h
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000866:	7b9b      	ldrb	r3, [r3, #14]
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <eMyRegHoldingCB+0x328>)
 800086c:	849a      	strh	r2, [r3, #36]	; 0x24
										usRegHoldingValue[19]=Str1[15];// R_p_h
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000870:	7bdb      	ldrb	r3, [r3, #15]
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000876:	84da      	strh	r2, [r3, #38]	; 0x26
										usRegHoldingValue[20] =Str1[16];// Lsb of q_h
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <eMyRegHoldingCB+0x334>)
 800087a:	7c1b      	ldrb	r3, [r3, #16]
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000880:	851a      	strh	r2, [r3, #40]	; 0x28
										usRegHoldingValue[21] =Str1[17];// Msb of q_h
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000884:	7c5b      	ldrb	r3, [r3, #17]
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <eMyRegHoldingCB+0x328>)
 800088a:	855a      	strh	r2, [r3, #42]	; 0x2a
										usRegHoldingValue[22]=Str1[18]; //q_h
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <eMyRegHoldingCB+0x334>)
 800088e:	7c9b      	ldrb	r3, [r3, #18]
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <eMyRegHoldingCB+0x328>)
 8000894:	859a      	strh	r2, [r3, #44]	; 0x2c
										usRegHoldingValue[23]=Str1[19];// q_h
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <eMyRegHoldingCB+0x334>)
 8000898:	7cdb      	ldrb	r3, [r3, #19]
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <eMyRegHoldingCB+0x328>)
 800089e:	85da      	strh	r2, [r3, #46]	; 0x2e
										usRegHoldingValue[24]=Str1[20];// Lsb of freq
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <eMyRegHoldingCB+0x334>)
 80008a2:	7d1b      	ldrb	r3, [r3, #20]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <eMyRegHoldingCB+0x328>)
 80008a8:	861a      	strh	r2, [r3, #48]	; 0x30
										usRegHoldingValue[25] =Str1[21];// freq
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <eMyRegHoldingCB+0x334>)
 80008ac:	7d5b      	ldrb	r3, [r3, #21]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <eMyRegHoldingCB+0x328>)
 80008b2:	865a      	strh	r2, [r3, #50]	; 0x32
										usRegHoldingValue[26] =Str1[22];// freq
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <eMyRegHoldingCB+0x334>)
 80008b6:	7d9b      	ldrb	r3, [r3, #22]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <eMyRegHoldingCB+0x328>)
 80008bc:	869a      	strh	r2, [r3, #52]	; 0x34
										usRegHoldingValue[27] =Str1[23];// freq
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <eMyRegHoldingCB+0x334>)
 80008c0:	7ddb      	ldrb	r3, [r3, #23]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <eMyRegHoldingCB+0x328>)
 80008c6:	86da      	strh	r2, [r3, #54]	; 0x36
//									usRegHoldingValue[19] = ( unsigned short ) (*(uint32_t *)&remoteVar8 );            // Eighth var
//
//									usRegHoldingValue[20] = ( unsigned short ) ((*(uint32_t *)&remoteVar9 )>> 16);
//									usRegHoldingValue[21] = ( unsigned short ) (*(uint32_t *)&remoteVar9 );            // Ninth var

							  eException = MB_PDU_EX_NONE;
 80008c8:	231f      	movs	r3, #31
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
            for( ; usIndex <= usIndexEnd; usIndex++ )
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	183b      	adds	r3, r7, r0
 80008d6:	3201      	adds	r2, #1
 80008d8:	801a      	strh	r2, [r3, #0]
 80008da:	231c      	movs	r3, #28
 80008dc:	18fa      	adds	r2, r7, r3
 80008de:	2312      	movs	r3, #18
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	8812      	ldrh	r2, [r2, #0]
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d800      	bhi.n	80008ec <eMyRegHoldingCB+0x310>
 80008ea:	e761      	b.n	80007b0 <eMyRegHoldingCB+0x1d4>
            }
            break;
 80008ec:	e000      	b.n	80008f0 <eMyRegHoldingCB+0x314>
        }
    }
 80008ee:	46c0      	nop			; (mov r8, r8)

    return eException;
 80008f0:	231f      	movs	r3, #31
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	781b      	ldrb	r3, [r3, #0]
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b009      	add	sp, #36	; 0x24
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	0800c524 	.word	0x0800c524
 8000904:	200000c0 	.word	0x200000c0
 8000908:	48000400 	.word	0x48000400
 800090c:	20000188 	.word	0x20000188
 8000910:	2000018c 	.word	0x2000018c

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fd6f 	bl	8001408 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40014400 	.word	0x40014400

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_MspInit+0x80>)
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_MspInit+0x80>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_MspInit+0x80>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_MspInit+0x80>)
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_MspInit+0x80>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_MspInit+0x80>)
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800097e:	2302      	movs	r3, #2
 8000980:	425b      	negs	r3, r3
 8000982:	2200      	movs	r2, #0
 8000984:	2103      	movs	r1, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fe28 	bl	80015dc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_VDDIO2_IRQn, 3, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2103      	movs	r1, #3
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fe23 	bl	80015dc <HAL_NVIC_SetPriority>
  /* PVD_VDDIO2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_VDDIO2_IRQn);
 8000996:	2001      	movs	r0, #1
 8000998:	f000 fe35 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 3, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2103      	movs	r1, #3
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 fe1b 	bl	80015dc <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80009a6:	2003      	movs	r0, #3
 80009a8:	f000 fe2d 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 3, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2103      	movs	r1, #3
 80009b0:	2004      	movs	r0, #4
 80009b2:	f000 fe13 	bl	80015dc <HAL_NVIC_SetPriority>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80009b6:	2004      	movs	r0, #4
 80009b8:	f000 fe25 	bl	8001606 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	0019      	movs	r1, r3
 80009de:	2015      	movs	r0, #21
 80009e0:	f000 fdfc 	bl	80015dc <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009e4:	2015      	movs	r0, #21
 80009e6:	f000 fe0e 	bl	8001606 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_InitTick+0xa8>)
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_InitTick+0xa8>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	0289      	lsls	r1, r1, #10
 80009f4:	430a      	orrs	r2, r1
 80009f6:	619a      	str	r2, [r3, #24]
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_InitTick+0xa8>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	029b      	lsls	r3, r3, #10
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a06:	230c      	movs	r3, #12
 8000a08:	18fa      	adds	r2, r7, r3
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fbdd 	bl	80031d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a16:	f002 fbc5 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	4914      	ldr	r1, [pc, #80]	; (8000a74 <HAL_InitTick+0xac>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fb70 	bl	8000108 <__udivsi3>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_InitTick+0xb4>)
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_InitTick+0xb8>)
 8000a38:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a3c:	6a3a      	ldr	r2, [r7, #32]
 8000a3e:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fce8 	bl	8003424 <HAL_TIM_Base_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d105      	bne.n	8000a64 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fd3a 	bl	80034d4 <HAL_TIM_Base_Start_IT>
 8000a60:	0003      	movs	r3, r0
 8000a62:	e000      	b.n	8000a66 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
}
 8000a66:	0018      	movs	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b00a      	add	sp, #40	; 0x28
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40021000 	.word	0x40021000
 8000a74:	000f4240 	.word	0x000f4240
 8000a78:	200001a8 	.word	0x200001a8
 8000a7c:	40014400 	.word	0x40014400
 8000a80:	000003e7 	.word	0x000003e7

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <PVD_VDDIO2_IRQHandler>:

/**
  * @brief This function handles PVD and VDDIO2 supply comparator interrupts through EXTI lines 16 and 31.
  */
void PVD_VDDIO2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 0 */

  /* USER CODE END PVD_VDDIO2_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000a98:	f001 fe76 	bl	8002788 <HAL_PWR_PVD_IRQHandler>
  HAL_PWREx_Vddio2Monitor_IRQHandler();
 8000a9c:	f001 fe8e 	bl	80027bc <HAL_PWREx_Vddio2Monitor_IRQHandler>
  /* USER CODE BEGIN PVD_VDDIO2_IRQn 1 */

  /* USER CODE END PVD_VDDIO2_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000aaa:	f001 fa83 	bl	8001fb4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <DMA1_Ch1_IRQHandler+0x14>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f96c 	bl	8001da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000520 	.word	0x20000520

08000ad8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f960 	bl	8001da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	20000564 	.word	0x20000564

08000af0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <TIM16_IRQHandler+0x14>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fd3e 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	200001a8 	.word	0x200001a8

08000b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <USART1_IRQHandler+0x28>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 f945 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <USART1_IRQHandler+0x20>
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <USART1_IRQHandler+0x2c>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	0552      	lsls	r2, r2, #21
 8000b26:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200001f0 	.word	0x200001f0
 8000b34:	e000ed04 	.word	0xe000ed04

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <USART2_IRQHandler+0x14>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f003 f930 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000278 	.word	0x20000278

08000b50 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <USART3_8_IRQHandler+0x2c>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f003 f924 	bl	8003da4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <USART3_8_IRQHandler+0x30>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f003 f920 	bl	8003da4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <USART3_8_IRQHandler+0x34>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f003 f91c 	bl	8003da4 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart6);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <USART3_8_IRQHandler+0x38>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f003 f918 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000300 	.word	0x20000300
 8000b80:	20000388 	.word	0x20000388
 8000b84:	20000410 	.word	0x20000410
 8000b88:	20000498 	.word	0x20000498

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <MX_USART1_UART_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000ba4:	2296      	movs	r2, #150	; 0x96
 8000ba6:	0192      	lsls	r2, r2, #6
 8000ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	0152      	lsls	r2, r2, #5
 8000be0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_USART1_UART_Init+0x64>)
 8000be4:	2300      	movs	r3, #0
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fda3 	bl	8005734 <HAL_RS485Ex_Init>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000bf2:	f7ff fea1 	bl	8000938 <Error_Handler>
////	  HAL_UART_Init(&huart1);
//	#endif

  /* USER CODE END USART1_Init 2 */

}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001f0 	.word	0x200001f0
 8000c00:	40013800 	.word	0x40013800

08000c04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <MX_USART2_UART_Init+0x64>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c10:	2296      	movs	r2, #150	; 0x96
 8000c12:	0192      	lsls	r2, r2, #6
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c42:	2210      	movs	r2, #16
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	0152      	lsls	r2, r2, #5
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x60>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 fe57 	bl	8003904 <HAL_UART_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c5a:	f7ff fe6d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000278 	.word	0x20000278
 8000c68:	40004400 	.word	0x40004400

08000c6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <MX_USART3_UART_Init+0x64>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c78:	2296      	movs	r2, #150	; 0x96
 8000c7a:	0192      	lsls	r2, r2, #6
 8000c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000caa:	2210      	movs	r2, #16
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0152      	lsls	r2, r2, #5
 8000cb4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <MX_USART3_UART_Init+0x60>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 fe23 	bl	8003904 <HAL_UART_Init>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000cc2:	f7ff fe39 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000300 	.word	0x20000300
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_USART4_UART_Init+0x64>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000ce0:	2296      	movs	r2, #150	; 0x96
 8000ce2:	0192      	lsls	r2, r2, #6
 8000ce4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d12:	2210      	movs	r2, #16
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	0152      	lsls	r2, r2, #5
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_USART4_UART_Init+0x60>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f002 fdef 	bl	8003904 <HAL_UART_Init>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART4_UART_Init+0x5a>
  {
    Error_Handler();
 8000d2a:	f7ff fe05 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000388 	.word	0x20000388
 8000d38:	40004c00 	.word	0x40004c00

08000d3c <MX_USART5_UART_Init>:
/* USART5 init function */

void MX_USART5_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <MX_USART5_UART_Init+0x64>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d48:	2296      	movs	r2, #150	; 0x96
 8000d4a:	0192      	lsls	r2, r2, #6
 8000d4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	0152      	lsls	r2, r2, #5
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MX_USART5_UART_Init+0x60>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fdbb 	bl	8003904 <HAL_UART_Init>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART5_UART_Init+0x5a>
  {
    Error_Handler();
 8000d92:	f7ff fdd1 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000410 	.word	0x20000410
 8000da0:	40005000 	.word	0x40005000

08000da4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_USART6_UART_Init+0x64>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000db0:	22e1      	movs	r2, #225	; 0xe1
 8000db2:	0312      	lsls	r2, r2, #12
 8000db4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000de2:	2210      	movs	r2, #16
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	0152      	lsls	r2, r2, #5
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <MX_USART6_UART_Init+0x60>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 fd87 	bl	8003904 <HAL_UART_Init>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART6_UART_Init+0x5a>
  {
    Error_Handler();
 8000dfa:	f7ff fd9d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000498 	.word	0x20000498
 8000e08:	40011400 	.word	0x40011400

08000e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b095      	sub	sp, #84	; 0x54
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	243c      	movs	r4, #60	; 0x3c
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f00b fa73 	bl	800c30a <memset>
  if(uartHandle->Instance==USART1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4ad9      	ldr	r2, [pc, #868]	; (8001190 <HAL_UART_MspInit+0x384>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d000      	beq.n	8000e30 <HAL_UART_MspInit+0x24>
 8000e2e:	e0ac      	b.n	8000f8a <HAL_UART_MspInit+0x17e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e30:	4bd8      	ldr	r3, [pc, #864]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	4bd7      	ldr	r3, [pc, #860]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	01c9      	lsls	r1, r1, #7
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	4bd5      	ldr	r3, [pc, #852]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e40:	699a      	ldr	r2, [r3, #24]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	01db      	lsls	r3, r3, #7
 8000e46:	4013      	ands	r3, r2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4bd1      	ldr	r3, [pc, #836]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	4bd0      	ldr	r3, [pc, #832]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0289      	lsls	r1, r1, #10
 8000e56:	430a      	orrs	r2, r1
 8000e58:	615a      	str	r2, [r3, #20]
 8000e5a:	4bce      	ldr	r3, [pc, #824]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	029b      	lsls	r3, r3, #10
 8000e62:	4013      	ands	r3, r2
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	22b0      	movs	r2, #176	; 0xb0
 8000e6c:	0152      	lsls	r2, r2, #5
 8000e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	0021      	movs	r1, r4
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2203      	movs	r2, #3
 8000e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	187a      	adds	r2, r7, r1
 8000e8c:	2390      	movs	r3, #144	; 0x90
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 f9f0 	bl	8002278 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000e98:	4bbf      	ldr	r3, [pc, #764]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000e9a:	4ac0      	ldr	r2, [pc, #768]	; (800119c <HAL_UART_MspInit+0x390>)
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9e:	4bbe      	ldr	r3, [pc, #760]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4bbc      	ldr	r3, [pc, #752]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4bbb      	ldr	r3, [pc, #748]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eb0:	4bb9      	ldr	r3, [pc, #740]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eb8:	4bb7      	ldr	r3, [pc, #732]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000ec0:	4bb5      	ldr	r3, [pc, #724]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec6:	4bb4      	ldr	r3, [pc, #720]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ecc:	4bb2      	ldr	r3, [pc, #712]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 fdf4 	bl	8001abc <HAL_DMA_Init>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000ed8:	f7ff fd2e 	bl	8000938 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000edc:	4ab0      	ldr	r2, [pc, #704]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000ede:	23a8      	movs	r3, #168	; 0xa8
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	49af      	ldr	r1, [pc, #700]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	4393      	bics	r3, r2
 8000ee8:	22a8      	movs	r2, #168	; 0xa8
 8000eea:	508b      	str	r3, [r1, r2]
 8000eec:	4aac      	ldr	r2, [pc, #688]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000eee:	23a8      	movs	r3, #168	; 0xa8
 8000ef0:	58d3      	ldr	r3, [r2, r3]
 8000ef2:	49ab      	ldr	r1, [pc, #684]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	22a8      	movs	r2, #168	; 0xa8
 8000efa:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4aa6      	ldr	r2, [pc, #664]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000f00:	675a      	str	r2, [r3, #116]	; 0x74
 8000f02:	4ba5      	ldr	r3, [pc, #660]	; (8001198 <HAL_UART_MspInit+0x38c>)
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000f08:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f0a:	4aa7      	ldr	r2, [pc, #668]	; (80011a8 <HAL_UART_MspInit+0x39c>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0e:	4ba5      	ldr	r3, [pc, #660]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4ba3      	ldr	r3, [pc, #652]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4ba2      	ldr	r3, [pc, #648]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f20:	4ba0      	ldr	r3, [pc, #640]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f28:	4b9e      	ldr	r3, [pc, #632]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000f30:	4b9c      	ldr	r3, [pc, #624]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f32:	2220      	movs	r2, #32
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f36:	4b9b      	ldr	r3, [pc, #620]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f3c:	4b99      	ldr	r3, [pc, #612]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 fdbc 	bl	8001abc <HAL_DMA_Init>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8000f48:	f7ff fcf6 	bl	8000938 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8000f4c:	4a94      	ldr	r2, [pc, #592]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000f4e:	23a8      	movs	r3, #168	; 0xa8
 8000f50:	58d3      	ldr	r3, [r2, r3]
 8000f52:	4993      	ldr	r1, [pc, #588]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	4393      	bics	r3, r2
 8000f58:	22a8      	movs	r2, #168	; 0xa8
 8000f5a:	508b      	str	r3, [r1, r2]
 8000f5c:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000f5e:	23a8      	movs	r3, #168	; 0xa8
 8000f60:	58d3      	ldr	r3, [r2, r3]
 8000f62:	498f      	ldr	r1, [pc, #572]	; (80011a0 <HAL_UART_MspInit+0x394>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	4313      	orrs	r3, r2
 8000f68:	22a8      	movs	r2, #168	; 0xa8
 8000f6a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a8d      	ldr	r2, [pc, #564]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f70:	671a      	str	r2, [r3, #112]	; 0x70
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_UART_MspInit+0x398>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	201b      	movs	r0, #27
 8000f7e:	f000 fb2d 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f82:	201b      	movs	r0, #27
 8000f84:	f000 fb3f 	bl	8001606 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000f88:	e158      	b.n	800123c <HAL_UART_MspInit+0x430>
  else if(uartHandle->Instance==USART2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a87      	ldr	r2, [pc, #540]	; (80011ac <HAL_UART_MspInit+0x3a0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d13b      	bne.n	800100c <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	4b7f      	ldr	r3, [pc, #508]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0289      	lsls	r1, r1, #10
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	61da      	str	r2, [r3, #28]
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000fa4:	69da      	ldr	r2, [r3, #28]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
 8000fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b78      	ldr	r3, [pc, #480]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	4b77      	ldr	r3, [pc, #476]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	0289      	lsls	r1, r1, #10
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	615a      	str	r2, [r3, #20]
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <HAL_UART_MspInit+0x388>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fcc:	213c      	movs	r1, #60	; 0x3c
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2201      	movs	r2, #1
 8000fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	187a      	adds	r2, r7, r1
 8000fee:	2390      	movs	r3, #144	; 0x90
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 f93f 	bl	8002278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 faec 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001004:	201c      	movs	r0, #28
 8001006:	f000 fafe 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 800100a:	e117      	b.n	800123c <HAL_UART_MspInit+0x430>
  else if(uartHandle->Instance==USART3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <HAL_UART_MspInit+0x3a4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d13b      	bne.n	800108e <HAL_UART_MspInit+0x282>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001016:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_UART_MspInit+0x388>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	02c9      	lsls	r1, r1, #11
 8001020:	430a      	orrs	r2, r1
 8001022:	61da      	str	r2, [r3, #28]
 8001024:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	02db      	lsls	r3, r3, #11
 800102c:	4013      	ands	r3, r2
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001030:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	02c9      	lsls	r1, r1, #11
 800103c:	430a      	orrs	r2, r1
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	02db      	lsls	r3, r3, #11
 8001048:	4013      	ands	r3, r2
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800104e:	213c      	movs	r1, #60	; 0x3c
 8001050:	187b      	adds	r3, r7, r1
 8001052:	22c0      	movs	r2, #192	; 0xc0
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2202      	movs	r2, #2
 800105c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2203      	movs	r2, #3
 8001068:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2204      	movs	r2, #4
 800106e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	187b      	adds	r3, r7, r1
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_UART_MspInit+0x3a8>)
 8001074:	0019      	movs	r1, r3
 8001076:	0010      	movs	r0, r2
 8001078:	f001 f8fe 	bl	8002278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2103      	movs	r1, #3
 8001080:	201d      	movs	r0, #29
 8001082:	f000 faab 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001086:	201d      	movs	r0, #29
 8001088:	f000 fabd 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 800108c:	e0d6      	b.n	800123c <HAL_UART_MspInit+0x430>
  else if(uartHandle->Instance==USART4)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_UART_MspInit+0x3ac>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d13b      	bne.n	8001110 <HAL_UART_MspInit+0x304>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HAL_UART_MspInit+0x388>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <HAL_UART_MspInit+0x388>)
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	0309      	lsls	r1, r1, #12
 80010a2:	430a      	orrs	r2, r1
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_UART_MspInit+0x388>)
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	031b      	lsls	r3, r3, #12
 80010ae:	4013      	ands	r3, r2
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_UART_MspInit+0x388>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_UART_MspInit+0x388>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0289      	lsls	r1, r1, #10
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <HAL_UART_MspInit+0x388>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d0:	213c      	movs	r1, #60	; 0x3c
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2203      	movs	r2, #3
 80010d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2202      	movs	r2, #2
 80010dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2203      	movs	r2, #3
 80010e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2204      	movs	r2, #4
 80010ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	187a      	adds	r2, r7, r1
 80010f2:	2390      	movs	r3, #144	; 0x90
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 f8bd 	bl	8002278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2103      	movs	r1, #3
 8001102:	201d      	movs	r0, #29
 8001104:	f000 fa6a 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001108:	201d      	movs	r0, #29
 800110a:	f000 fa7c 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 800110e:	e095      	b.n	800123c <HAL_UART_MspInit+0x430>
  else if(uartHandle->Instance==USART5)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <HAL_UART_MspInit+0x3b0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d152      	bne.n	80011c0 <HAL_UART_MspInit+0x3b4>
    __HAL_RCC_USART5_CLK_ENABLE();
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_UART_MspInit+0x388>)
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0349      	lsls	r1, r1, #13
 8001124:	430a      	orrs	r2, r1
 8001126:	61da      	str	r2, [r3, #28]
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_UART_MspInit+0x388>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	035b      	lsls	r3, r3, #13
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_UART_MspInit+0x388>)
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	02c9      	lsls	r1, r1, #11
 8001140:	430a      	orrs	r2, r1
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_UART_MspInit+0x388>)
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	02db      	lsls	r3, r3, #11
 800114c:	4013      	ands	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001152:	213c      	movs	r1, #60	; 0x3c
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2218      	movs	r2, #24
 8001158:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2202      	movs	r2, #2
 800115e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2203      	movs	r2, #3
 800116a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2204      	movs	r2, #4
 8001170:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	187b      	adds	r3, r7, r1
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_UART_MspInit+0x3a8>)
 8001176:	0019      	movs	r1, r3
 8001178:	0010      	movs	r0, r2
 800117a:	f001 f87d 	bl	8002278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2103      	movs	r1, #3
 8001182:	201d      	movs	r0, #29
 8001184:	f000 fa2a 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001188:	201d      	movs	r0, #29
 800118a:	f000 fa3c 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 800118e:	e055      	b.n	800123c <HAL_UART_MspInit+0x430>
 8001190:	40013800 	.word	0x40013800
 8001194:	40021000 	.word	0x40021000
 8001198:	20000520 	.word	0x20000520
 800119c:	40020008 	.word	0x40020008
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000564 	.word	0x20000564
 80011a8:	4002001c 	.word	0x4002001c
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40004800 	.word	0x40004800
 80011b4:	48000400 	.word	0x48000400
 80011b8:	40004c00 	.word	0x40004c00
 80011bc:	40005000 	.word	0x40005000
  else if(uartHandle->Instance==USART6)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_UART_MspInit+0x438>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d138      	bne.n	800123c <HAL_UART_MspInit+0x430>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011d0:	2120      	movs	r1, #32
 80011d2:	430a      	orrs	r2, r1
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2220      	movs	r2, #32
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0289      	lsls	r1, r1, #10
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0x43c>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	213c      	movs	r1, #60	; 0x3c
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2202      	movs	r2, #2
 800120a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2203      	movs	r2, #3
 8001216:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_USART6;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2205      	movs	r2, #5
 800121c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	187a      	adds	r2, r7, r1
 8001220:	2390      	movs	r3, #144	; 0x90
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f001 f826 	bl	8002278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2103      	movs	r1, #3
 8001230:	201d      	movs	r0, #29
 8001232:	f000 f9d3 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8001236:	201d      	movs	r0, #29
 8001238:	f000 f9e5 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b015      	add	sp, #84	; 0x54
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	40011400 	.word	0x40011400
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <HAL_UART_MspDeInit+0x10c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d11b      	bne.n	8001296 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_UART_MspDeInit+0x110>)
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_UART_MspDeInit+0x110>)
 8001264:	493e      	ldr	r1, [pc, #248]	; (8001360 <HAL_UART_MspDeInit+0x114>)
 8001266:	400a      	ands	r2, r1
 8001268:	619a      	str	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12);
 800126a:	23b0      	movs	r3, #176	; 0xb0
 800126c:	015a      	lsls	r2, r3, #5
 800126e:	2390      	movs	r3, #144	; 0x90
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f001 f977 	bl	8002568 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	0018      	movs	r0, r3
 8001280:	f000 fc64 	bl	8001b4c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	0018      	movs	r0, r3
 800128a:	f000 fc5f 	bl	8001b4c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800128e:	201b      	movs	r0, #27
 8001290:	f000 f9c9 	bl	8001626 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8001294:	e05b      	b.n	800134e <HAL_UART_MspDeInit+0x102>
  else if(uartHandle->Instance==USART2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_UART_MspDeInit+0x118>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d10f      	bne.n	80012c0 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_USART2_CLK_DISABLE();
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012a6:	4930      	ldr	r1, [pc, #192]	; (8001368 <HAL_UART_MspDeInit+0x11c>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80012ac:	2390      	movs	r3, #144	; 0x90
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	210c      	movs	r1, #12
 80012b2:	0018      	movs	r0, r3
 80012b4:	f001 f958 	bl	8002568 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80012b8:	201c      	movs	r0, #28
 80012ba:	f000 f9b4 	bl	8001626 <HAL_NVIC_DisableIRQ>
}
 80012be:	e046      	b.n	800134e <HAL_UART_MspDeInit+0x102>
  else if(uartHandle->Instance==USART3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_UART_MspDeInit+0x120>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012cc:	69da      	ldr	r2, [r3, #28]
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012d0:	4927      	ldr	r1, [pc, #156]	; (8001370 <HAL_UART_MspDeInit+0x124>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_UART_MspDeInit+0x128>)
 80012dc:	0019      	movs	r1, r3
 80012de:	0010      	movs	r0, r2
 80012e0:	f001 f942 	bl	8002568 <HAL_GPIO_DeInit>
}
 80012e4:	e033      	b.n	800134e <HAL_UART_MspDeInit+0x102>
  else if(uartHandle->Instance==USART4)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a23      	ldr	r2, [pc, #140]	; (8001378 <HAL_UART_MspDeInit+0x12c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d10c      	bne.n	800130a <HAL_UART_MspDeInit+0xbe>
    __HAL_RCC_USART4_CLK_DISABLE();
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_UART_MspDeInit+0x110>)
 80012f6:	4921      	ldr	r1, [pc, #132]	; (800137c <HAL_UART_MspDeInit+0x130>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80012fc:	2390      	movs	r3, #144	; 0x90
 80012fe:	05db      	lsls	r3, r3, #23
 8001300:	2103      	movs	r1, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f001 f930 	bl	8002568 <HAL_GPIO_DeInit>
}
 8001308:	e021      	b.n	800134e <HAL_UART_MspDeInit+0x102>
  else if(uartHandle->Instance==USART5)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_UART_MspDeInit+0x134>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d10b      	bne.n	800132c <HAL_UART_MspDeInit+0xe0>
    __HAL_RCC_USART5_CLK_DISABLE();
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_UART_MspDeInit+0x110>)
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_UART_MspDeInit+0x110>)
 800131a:	491a      	ldr	r1, [pc, #104]	; (8001384 <HAL_UART_MspDeInit+0x138>)
 800131c:	400a      	ands	r2, r1
 800131e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4);
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspDeInit+0x128>)
 8001322:	2118      	movs	r1, #24
 8001324:	0018      	movs	r0, r3
 8001326:	f001 f91f 	bl	8002568 <HAL_GPIO_DeInit>
}
 800132a:	e010      	b.n	800134e <HAL_UART_MspDeInit+0x102>
  else if(uartHandle->Instance==USART6)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_UART_MspDeInit+0x13c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10b      	bne.n	800134e <HAL_UART_MspDeInit+0x102>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_UART_MspDeInit+0x110>)
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_UART_MspDeInit+0x110>)
 800133c:	2120      	movs	r1, #32
 800133e:	438a      	bics	r2, r1
 8001340:	619a      	str	r2, [r3, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8001342:	2390      	movs	r3, #144	; 0x90
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	2130      	movs	r1, #48	; 0x30
 8001348:	0018      	movs	r0, r3
 800134a:	f001 f90d 	bl	8002568 <HAL_GPIO_DeInit>
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40013800 	.word	0x40013800
 800135c:	40021000 	.word	0x40021000
 8001360:	ffffbfff 	.word	0xffffbfff
 8001364:	40004400 	.word	0x40004400
 8001368:	fffdffff 	.word	0xfffdffff
 800136c:	40004800 	.word	0x40004800
 8001370:	fffbffff 	.word	0xfffbffff
 8001374:	48000400 	.word	0x48000400
 8001378:	40004c00 	.word	0x40004c00
 800137c:	fff7ffff 	.word	0xfff7ffff
 8001380:	40005000 	.word	0x40005000
 8001384:	ffefffff 	.word	0xffefffff
 8001388:	40011400 	.word	0x40011400

0800138c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001390:	f7ff fbfc 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	; (80013d8 <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ba:	f00a ff77 	bl	800c2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013be:	f7fe fffb 	bl	80003b8 <main>

080013c2 <LoopForever>:

LoopForever:
    b LoopForever
 80013c2:	e7fe      	b.n	80013c2 <LoopForever>
  ldr   r0, =_estack
 80013c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013d0:	0800c868 	.word	0x0800c868
  ldr r2, =_sbss
 80013d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013d8:	20004d1c 	.word	0x20004d1c

080013dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_COMP_IRQHandler>
	...

080013e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_Init+0x24>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_Init+0x24>)
 80013ea:	2110      	movs	r1, #16
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f7ff fae9 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff faa5 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	18d2      	adds	r2, r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000004 	.word	0x20000004
 8001428:	200005a8 	.word	0x200005a8

0800142c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	200005a8 	.word	0x200005a8

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fff0 	bl	800142c <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001a      	movs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	189b      	adds	r3, r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	f7ff ffe0 	bl	800142c <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000004 	.word	0x20000004

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	0002      	movs	r2, r0
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b7f      	cmp	r3, #127	; 0x7f
 800149a:	d809      	bhi.n	80014b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	001a      	movs	r2, r3
 80014a2:	231f      	movs	r3, #31
 80014a4:	401a      	ands	r2, r3
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_EnableIRQ+0x30>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	4091      	lsls	r1, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	0002      	movs	r2, r0
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b7f      	cmp	r3, #127	; 0x7f
 80014ce:	d810      	bhi.n	80014f2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	001a      	movs	r2, r3
 80014d6:	231f      	movs	r3, #31
 80014d8:	4013      	ands	r3, r2
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_DisableIRQ+0x40>)
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80014ec:	f3bf 8f6f 	isb	sy
}
 80014f0:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	0002      	movs	r2, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d828      	bhi.n	8001568 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <__NVIC_SetPriority+0xd4>)
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25b      	sxtb	r3, r3
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	33c0      	adds	r3, #192	; 0xc0
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	589b      	ldr	r3, [r3, r2]
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	0011      	movs	r1, r2
 800152c:	2203      	movs	r2, #3
 800152e:	400a      	ands	r2, r1
 8001530:	00d2      	lsls	r2, r2, #3
 8001532:	21ff      	movs	r1, #255	; 0xff
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	43d2      	mvns	r2, r2
 800153a:	401a      	ands	r2, r3
 800153c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	22ff      	movs	r2, #255	; 0xff
 8001544:	401a      	ands	r2, r3
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	2303      	movs	r3, #3
 800154e:	4003      	ands	r3, r0
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <__NVIC_SetPriority+0xd4>)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b25b      	sxtb	r3, r3
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	430a      	orrs	r2, r1
 8001560:	33c0      	adds	r3, #192	; 0xc0
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001566:	e031      	b.n	80015cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <__NVIC_SetPriority+0xd8>)
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	0019      	movs	r1, r3
 8001570:	230f      	movs	r3, #15
 8001572:	400b      	ands	r3, r1
 8001574:	3b08      	subs	r3, #8
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3306      	adds	r3, #6
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	18d3      	adds	r3, r2, r3
 800157e:	3304      	adds	r3, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1dfa      	adds	r2, r7, #7
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	0011      	movs	r1, r2
 8001588:	2203      	movs	r2, #3
 800158a:	400a      	ands	r2, r1
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	21ff      	movs	r1, #255	; 0xff
 8001590:	4091      	lsls	r1, r2
 8001592:	000a      	movs	r2, r1
 8001594:	43d2      	mvns	r2, r2
 8001596:	401a      	ands	r2, r3
 8001598:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	401a      	ands	r2, r3
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	0018      	movs	r0, r3
 80015a8:	2303      	movs	r3, #3
 80015aa:	4003      	ands	r3, r0
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <__NVIC_SetPriority+0xd8>)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	001c      	movs	r4, r3
 80015b8:	230f      	movs	r3, #15
 80015ba:	4023      	ands	r3, r4
 80015bc:	3b08      	subs	r3, #8
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	430a      	orrs	r2, r1
 80015c2:	3306      	adds	r3, #6
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	18c3      	adds	r3, r0, r3
 80015c8:	3304      	adds	r3, #4
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b003      	add	sp, #12
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	210f      	movs	r1, #15
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	1c02      	adds	r2, r0, #0
 80015ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff81 	bl	8001500 <__NVIC_SetPriority>
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	0002      	movs	r2, r0
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff ff35 	bl	8001488 <__NVIC_EnableIRQ>
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	0002      	movs	r2, r0
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b25b      	sxtb	r3, r3
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff ff3f 	bl	80014bc <__NVIC_DisableIRQ>
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e056      	b.n	8001708 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d106      	bne.n	8001672 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7fe fdfb 	bl	8000268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	791b      	ldrb	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10c      	bne.n	800169a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_CRC_Init+0xc8>)
 8001686:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2118      	movs	r1, #24
 8001694:	438a      	bics	r2, r1
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	e00b      	b.n	80016b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 f993 	bl	80019d0 <HAL_CRCEx_Polynomial_Set>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e02a      	b.n	8001708 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4252      	negs	r2, r2
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	e004      	b.n	80016d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6912      	ldr	r2, [r2, #16]
 80016ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2260      	movs	r2, #96	; 0x60
 80016d8:	4393      	bics	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	04c11db7 	.word	0x04c11db7

08001714 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2202      	movs	r2, #2
 8001728:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d005      	beq.n	800173e <HAL_CRC_Accumulate+0x2a>
 8001732:	d82d      	bhi.n	8001790 <HAL_CRC_Accumulate+0x7c>
 8001734:	2b01      	cmp	r3, #1
 8001736:	d019      	beq.n	800176c <HAL_CRC_Accumulate+0x58>
 8001738:	2b02      	cmp	r3, #2
 800173a:	d020      	beq.n	800177e <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800173c:	e028      	b.n	8001790 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	18d2      	adds	r2, r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d3f0      	bcc.n	8001744 <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	613b      	str	r3, [r7, #16]
      break;
 800176a:	e012      	b.n	8001792 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f864 	bl	8001840 <CRC_Handle_8>
 8001778:	0003      	movs	r3, r0
 800177a:	613b      	str	r3, [r7, #16]
      break;
 800177c:	e009      	b.n	8001792 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f8ec 	bl	8001962 <CRC_Handle_16>
 800178a:	0003      	movs	r3, r0
 800178c:	613b      	str	r3, [r7, #16]
      break;
 800178e:	e000      	b.n	8001792 <HAL_CRC_Accumulate+0x7e>
      break;
 8001790:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001798:	693b      	ldr	r3, [r7, #16]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b006      	add	sp, #24
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2202      	movs	r2, #2
 80017b6:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2101      	movs	r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d005      	beq.n	80017dc <HAL_CRC_Calculate+0x3a>
 80017d0:	d82d      	bhi.n	800182e <HAL_CRC_Calculate+0x8c>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d019      	beq.n	800180a <HAL_CRC_Calculate+0x68>
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d020      	beq.n	800181c <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80017da:	e028      	b.n	800182e <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	18d2      	adds	r2, r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f0      	bcc.n	80017e2 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e012      	b.n	8001830 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	0018      	movs	r0, r3
 8001812:	f000 f815 	bl	8001840 <CRC_Handle_8>
 8001816:	0003      	movs	r3, r0
 8001818:	613b      	str	r3, [r7, #16]
      break;
 800181a:	e009      	b.n	8001830 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0018      	movs	r0, r3
 8001824:	f000 f89d 	bl	8001962 <CRC_Handle_16>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]
      break;
 800182c:	e000      	b.n	8001830 <HAL_CRC_Calculate+0x8e>
      break;
 800182e:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001836:	693b      	ldr	r3, [r7, #16]
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b006      	add	sp, #24
 800183e:	bd80      	pop	{r7, pc}

08001840 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e023      	b.n	800189a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	3301      	adds	r3, #1
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	18cb      	adds	r3, r1, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800186c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	18cb      	adds	r3, r1, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800187c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	3303      	adds	r3, #3
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	18cb      	adds	r3, r1, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001890:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3301      	adds	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3d6      	bcc.n	8001852 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	d053      	beq.n	8001954 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2203      	movs	r2, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d119      	bne.n	8001904 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21a      	sxth	r2, r3
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	3301      	adds	r3, #1
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	18cb      	adds	r3, r1, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	211a      	movs	r1, #26
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	187a      	adds	r2, r7, r1
 8001900:	8812      	ldrh	r2, [r2, #0]
 8001902:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	4013      	ands	r3, r2
 800190a:	2b03      	cmp	r3, #3
 800190c:	d122      	bne.n	8001954 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	18d3      	adds	r3, r2, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	3301      	adds	r3, #1
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	18cb      	adds	r3, r1, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	211a      	movs	r1, #26
 8001930:	187b      	adds	r3, r7, r1
 8001932:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	187a      	adds	r2, r7, r1
 800193e:	8812      	ldrh	r2, [r2, #0]
 8001940:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	18d2      	adds	r2, r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b008      	add	sp, #32
 8001960:	bd80      	pop	{r7, pc}

08001962 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e013      	b.n	800199c <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	041a      	lsls	r2, r3, #16
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	18cb      	adds	r3, r1, r3
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	0019      	movs	r1, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3e6      	bcc.n	8001974 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d009      	beq.n	80019c2 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	18d3      	adds	r3, r2, r3
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b006      	add	sp, #24
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2117      	movs	r1, #23
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80019e4:	231f      	movs	r3, #31
 80019e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d103      	bne.n	80019f8 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e045      	b.n	8001a84 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	613a      	str	r2, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_CRCEx_Polynomial_Set+0x46>
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	221f      	movs	r2, #31
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	40da      	lsrs	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	d0f1      	beq.n	80019fa <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b18      	cmp	r3, #24
 8001a1a:	d00f      	beq.n	8001a3c <HAL_CRCEx_Polynomial_Set+0x6c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d824      	bhi.n	8001a6c <HAL_CRCEx_Polynomial_Set+0x9c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d011      	beq.n	8001a4c <HAL_CRCEx_Polynomial_Set+0x7c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d81e      	bhi.n	8001a6c <HAL_CRCEx_Polynomial_Set+0x9c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_CRCEx_Polynomial_Set+0xa6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d010      	beq.n	8001a5c <HAL_CRCEx_Polynomial_Set+0x8c>
 8001a3a:	e017      	b.n	8001a6c <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d91b      	bls.n	8001a7a <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8001a42:	2317      	movs	r3, #23
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001a4a:	e016      	b.n	8001a7a <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d915      	bls.n	8001a7e <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8001a52:	2317      	movs	r3, #23
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001a5a:	e010      	b.n	8001a7e <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d90f      	bls.n	8001a82 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8001a62:	2317      	movs	r3, #23
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001a6a:	e00a      	b.n	8001a82 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001a6c:	2317      	movs	r3, #23
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
        break;
 8001a74:	e006      	b.n	8001a84 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e004      	b.n	8001a84 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	e002      	b.n	8001a84 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	e000      	b.n	8001a84 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001a82:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8001a84:	2317      	movs	r3, #23
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2218      	movs	r2, #24
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001aac:	2317      	movs	r3, #23
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b006      	add	sp, #24
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e036      	b.n	8001b40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2221      	movs	r2, #33	; 0x21
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <HAL_DMA_Init+0x8c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 fa0c 	bl	8001f40 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	ffffc00f 	.word	0xffffc00f

08001b4c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e03b      	b.n	8001bd6 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f9d5 	bl	8001f40 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4091      	lsls	r1, r2
 8001ba2:	000a      	movs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2317      	movs	r3, #23
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Start_IT+0x24>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e04f      	b.n	8001ca2 <HAL_DMA_Start_IT+0xc4>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2221      	movs	r2, #33	; 0x21
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d13a      	bne.n	8001c8c <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2221      	movs	r2, #33	; 0x21
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f954 	bl	8001ee8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	210e      	movs	r1, #14
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e00f      	b.n	8001c7a <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	210a      	movs	r1, #10
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2104      	movs	r1, #4
 8001c76:	438a      	bics	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c94:	2317      	movs	r3, #23
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2202      	movs	r2, #2
 8001c9a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001c9c:	2317      	movs	r3, #23
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b006      	add	sp, #24
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2221      	movs	r2, #33	; 0x21
 8001cb6:	5c9b      	ldrb	r3, [r3, r2]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d008      	beq.n	8001cd0 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e020      	b.n	8001d12 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	210e      	movs	r1, #14
 8001cdc:	438a      	bics	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4091      	lsls	r1, r2
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2221      	movs	r2, #33	; 0x21
 8001d04:	2101      	movs	r1, #1
 8001d06:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	0018      	movs	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	210f      	movs	r1, #15
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d006      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2204      	movs	r2, #4
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e028      	b.n	8001d96 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	210e      	movs	r1, #14
 8001d50:	438a      	bics	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4091      	lsls	r1, r2
 8001d70:	000a      	movs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2221      	movs	r2, #33	; 0x21
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	0010      	movs	r0, r2
 8001d94:	4798      	blx	r3
    }
  }
  return status;
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d024      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x72>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d020      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2104      	movs	r1, #4
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4091      	lsls	r1, r2
 8001dfc:	000a      	movs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d100      	bne.n	8001e0a <HAL_DMA_IRQHandler+0x66>
 8001e08:	e06a      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	0010      	movs	r0, r2
 8001e12:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e14:	e064      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	0013      	movs	r3, r2
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xda>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2220      	movs	r2, #32
 8001e36:	4013      	ands	r3, r2
 8001e38:	d10b      	bne.n	8001e52 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	210a      	movs	r1, #10
 8001e46:	438a      	bics	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2221      	movs	r2, #33	; 0x21
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4091      	lsls	r1, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	2100      	movs	r1, #0
 8001e68:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d036      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	0010      	movs	r0, r2
 8001e7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e7c:	e030      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2208      	movs	r2, #8
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d028      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2208      	movs	r2, #8
 8001e92:	4013      	ands	r3, r2
 8001e94:	d024      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	210e      	movs	r1, #14
 8001ea2:	438a      	bics	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2221      	movs	r2, #33	; 0x21
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	0010      	movs	r0, r2
 8001edc:	4798      	blx	r3
    }
  }
}
 8001ede:	e7ff      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x13c>
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	2101      	movs	r1, #1
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d108      	bne.n	8001f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f26:	e007      	b.n	8001f38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x60>)
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d810      	bhi.n	8001f76 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f5a:	4694      	mov	ip, r2
 8001f5c:	4463      	add	r3, ip
 8001f5e:	2114      	movs	r1, #20
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe f8d1 	bl	8000108 <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001f74:	e00f      	b.n	8001f96 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <DMA_CalcBaseAndBitshift+0x6c>)
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	4463      	add	r3, ip
 8001f80:	2114      	movs	r1, #20
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe f8c0 	bl	8000108 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <DMA_CalcBaseAndBitshift+0x70>)
 8001f94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40020407 	.word	0x40020407
 8001fa4:	bffdfff8 	.word	0xbffdfff8
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	bffdfbf8 	.word	0xbffdfbf8
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d005      	beq.n	8001fd6 <HAL_FLASH_IRQHandler+0x22>
 8001fca:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001fdc:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4252      	negs	r2, r2
 8001fe2:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8001fe4:	f000 f8fa 	bl	80021dc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 f8d2 	bl	8002194 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ff0:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d000      	beq.n	8002004 <HAL_FLASH_IRQHandler+0x50>
 8002002:	e0a1      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002006:	2220      	movs	r2, #32
 8002008:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <HAL_FLASH_IRQHandler+0x62>
 8002014:	e098      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002016:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d132      	bne.n	8002086 <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002020:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	4b55      	ldr	r3, [pc, #340]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002028:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01b      	beq.n	800206a <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f8a2 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	4694      	mov	ip, r2
 800204a:	4463      	add	r3, ip
 800204c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800204e:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002054:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 800205a:	2102      	movs	r1, #2
 800205c:	438a      	bics	r2, r1
 800205e:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f8ea 	bl	800223c <FLASH_PageErase>
 8002068:	e06e      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800206a:	2301      	movs	r3, #1
 800206c:	425b      	negs	r3, r3
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f880 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>
 8002084:	e060      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d10c      	bne.n	80020aa <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 800209c:	2000      	movs	r0, #0
 800209e:	f000 f871 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e04e      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020b2:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d021      	beq.n	8002100 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	1c9a      	adds	r2, r3, #2
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020c4:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	0419      	lsls	r1, r3, #16
 80020d4:	0c14      	lsrs	r4, r2, #16
 80020d6:	430c      	orrs	r4, r1
 80020d8:	0c1d      	lsrs	r5, r3, #16
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020dc:	611c      	str	r4, [r3, #16]
 80020de:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	b292      	uxth	r2, r2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f853 	bl	80021a4 <FLASH_Program_HalfWord>
 80020fe:	e023      	b.n	8002148 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d105      	bne.n	8002116 <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f838 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>
 8002114:	e011      	b.n	800213a <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b04      	cmp	r3, #4
 800211e:	d106      	bne.n	800212e <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	3b02      	subs	r3, #2
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f82c 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>
 800212c:	e005      	b.n	800213a <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	3b06      	subs	r3, #6
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f825 	bl	8002184 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800213c:	2201      	movs	r2, #1
 800213e:	4252      	negs	r2, r2
 8002140:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10e      	bne.n	8002170 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002158:	2107      	movs	r1, #7
 800215a:	438a      	bics	r2, r1
 800215c:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_FLASH_IRQHandler+0x1c4>)
 8002164:	4906      	ldr	r1, [pc, #24]	; (8002180 <HAL_FLASH_IRQHandler+0x1cc>)
 8002166:	400a      	ands	r2, r1
 8002168:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_FLASH_IRQHandler+0x1c8>)
 800216c:	2200      	movs	r2, #0
 800216e:	761a      	strb	r2, [r3, #24]
  }
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bdb0      	pop	{r4, r5, r7, pc}
 8002178:	40022000 	.word	0x40022000
 800217c:	200005b0 	.word	0x200005b0
 8002180:	ffffebff 	.word	0xffffebff

08002184 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	000a      	movs	r2, r1
 80021ae:	1cbb      	adds	r3, r7, #2
 80021b0:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <FLASH_Program_HalfWord+0x30>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <FLASH_Program_HalfWord+0x34>)
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <FLASH_Program_HalfWord+0x34>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1cba      	adds	r2, r7, #2
 80021c8:	8812      	ldrh	r2, [r2, #0]
 80021ca:	801a      	strh	r2, [r3, #0]
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200005b0 	.word	0x200005b0
 80021d8:	40022000 	.word	0x40022000

080021dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <FLASH_SetErrorCode+0x58>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2210      	movs	r2, #16
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d109      	bne.n	8002206 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <FLASH_SetErrorCode+0x5c>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2202      	movs	r2, #2
 80021f8:	431a      	orrs	r2, r3
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <FLASH_SetErrorCode+0x5c>)
 80021fc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2210      	movs	r2, #16
 8002202:	4313      	orrs	r3, r2
 8002204:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <FLASH_SetErrorCode+0x58>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	2b04      	cmp	r3, #4
 8002210:	d109      	bne.n	8002226 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <FLASH_SetErrorCode+0x5c>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2201      	movs	r2, #1
 8002218:	431a      	orrs	r2, r3
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <FLASH_SetErrorCode+0x5c>)
 800221c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	4313      	orrs	r3, r2
 8002224:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002226:	4b03      	ldr	r3, [pc, #12]	; (8002234 <FLASH_SetErrorCode+0x58>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
}  
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40022000 	.word	0x40022000
 8002238:	200005b0 	.word	0x200005b0

0800223c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <FLASH_PageErase+0x34>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <FLASH_PageErase+0x38>)
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <FLASH_PageErase+0x38>)
 8002250:	2102      	movs	r1, #2
 8002252:	430a      	orrs	r2, r1
 8002254:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <FLASH_PageErase+0x38>)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <FLASH_PageErase+0x38>)
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <FLASH_PageErase+0x38>)
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	430a      	orrs	r2, r1
 8002266:	611a      	str	r2, [r3, #16]
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200005b0 	.word	0x200005b0
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002286:	e155      	b.n	8002534 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4091      	lsls	r1, r2
 8002292:	000a      	movs	r2, r1
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d100      	bne.n	80022a0 <HAL_GPIO_Init+0x28>
 800229e:	e146      	b.n	800252e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d005      	beq.n	80022b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d130      	bne.n	800231a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ee:	2201      	movs	r2, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	43da      	mvns	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	2201      	movs	r2, #1
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
 800230c:	0013      	movs	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	4013      	ands	r3, r2
 8002322:	2b03      	cmp	r3, #3
 8002324:	d017      	beq.n	8002356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	43da      	mvns	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	4013      	ands	r3, r2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d123      	bne.n	80023aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	58d3      	ldr	r3, [r2, r3]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2207      	movs	r2, #7
 8002374:	4013      	ands	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	409a      	lsls	r2, r3
 800237c:	0013      	movs	r3, r2
 800237e:	43da      	mvns	r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2107      	movs	r1, #7
 800238e:	400b      	ands	r3, r1
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	401a      	ands	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d100      	bne.n	80023ec <HAL_GPIO_Init+0x174>
 80023ea:	e0a0      	b.n	800252e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_GPIO_Init+0x2d4>)
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4b56      	ldr	r3, [pc, #344]	; (800254c <HAL_GPIO_Init+0x2d4>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_GPIO_Init+0x2d4>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_GPIO_Init+0x2d8>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	589b      	ldr	r3, [r3, r2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	409a      	lsls	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	43da      	mvns	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	2390      	movs	r3, #144	; 0x90
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x1ee>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a47      	ldr	r2, [pc, #284]	; (8002554 <HAL_GPIO_Init+0x2dc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x1ea>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a46      	ldr	r2, [pc, #280]	; (8002558 <HAL_GPIO_Init+0x2e0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x1e6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a45      	ldr	r2, [pc, #276]	; (800255c <HAL_GPIO_Init+0x2e4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x1e2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a44      	ldr	r2, [pc, #272]	; (8002560 <HAL_GPIO_Init+0x2e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1de>
 8002452:	2304      	movs	r3, #4
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x1f0>
 8002456:	2305      	movs	r3, #5
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x1f0>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x1f0>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x1f0>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x1f0>
 8002466:	2300      	movs	r3, #0
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	2103      	movs	r1, #3
 800246c:	400a      	ands	r2, r1
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	; (8002550 <HAL_GPIO_Init+0x2d8>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43da      	mvns	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	035b      	lsls	r3, r3, #13
 800249e:	4013      	ands	r3, r2
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	039b      	lsls	r3, r3, #14
 80024c8:	4013      	ands	r3, r2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	4013      	ands	r3, r2
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	4013      	ands	r3, r2
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	40da      	lsrs	r2, r3
 800253c:	1e13      	subs	r3, r2, #0
 800253e:	d000      	beq.n	8002542 <HAL_GPIO_Init+0x2ca>
 8002540:	e6a2      	b.n	8002288 <HAL_GPIO_Init+0x10>
  } 
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b006      	add	sp, #24
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	40010000 	.word	0x40010000
 8002554:	48000400 	.word	0x48000400
 8002558:	48000800 	.word	0x48000800
 800255c:	48000c00 	.word	0x48000c00
 8002560:	48001000 	.word	0x48001000
 8002564:	40010400 	.word	0x40010400

08002568 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002576:	e0b7      	b.n	80026e8 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002578:	2201      	movs	r2, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	409a      	lsls	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_GPIO_DeInit+0x24>
 800258a:	e0aa      	b.n	80026e2 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800258c:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_GPIO_DeInit+0x198>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	589b      	ldr	r3, [r3, r2]
 8002598:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2203      	movs	r2, #3
 800259e:	4013      	ands	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	409a      	lsls	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	2390      	movs	r3, #144	; 0x90
 80025b0:	05db      	lsls	r3, r3, #23
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_DeInit+0x82>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_GPIO_DeInit+0x19c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_DeInit+0x7e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_GPIO_DeInit+0x1a0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_DeInit+0x7a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_GPIO_DeInit+0x1a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_DeInit+0x76>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_DeInit+0x1a8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_DeInit+0x72>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_DeInit+0x84>
 80025da:	2305      	movs	r3, #5
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_DeInit+0x84>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_DeInit+0x84>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_DeInit+0x84>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_DeInit+0x84>
 80025ea:	2300      	movs	r3, #0
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	2103      	movs	r1, #3
 80025f0:	400a      	ands	r2, r1
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d132      	bne.n	8002662 <HAL_GPIO_DeInit+0xfa>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43d9      	mvns	r1, r3
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43d9      	mvns	r1, r3
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 8002614:	400a      	ands	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43d9      	mvns	r1, r3
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 8002622:	400a      	ands	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43d9      	mvns	r1, r3
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_GPIO_DeInit+0x1ac>)
 8002630:	400a      	ands	r2, r1
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2203      	movs	r2, #3
 8002638:	4013      	ands	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	409a      	lsls	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002644:	4a2e      	ldr	r2, [pc, #184]	; (8002700 <HAL_GPIO_DeInit+0x198>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	589a      	ldr	r2, [r3, r2]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43d9      	mvns	r1, r3
 8002654:	482a      	ldr	r0, [pc, #168]	; (8002700 <HAL_GPIO_DeInit+0x198>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	400a      	ands	r2, r1
 800265c:	3302      	adds	r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	0052      	lsls	r2, r2, #1
 800266a:	2103      	movs	r1, #3
 800266c:	4091      	lsls	r1, r2
 800266e:	000a      	movs	r2, r1
 8002670:	43d2      	mvns	r2, r2
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	58d3      	ldr	r3, [r2, r3]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	2107      	movs	r1, #7
 8002688:	400a      	ands	r2, r1
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	210f      	movs	r1, #15
 800268e:	4091      	lsls	r1, r2
 8002690:	000a      	movs	r2, r1
 8002692:	43d1      	mvns	r1, r2
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	08d2      	lsrs	r2, r2, #3
 8002698:	4019      	ands	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	0052      	lsls	r2, r2, #1
 80026aa:	2103      	movs	r1, #3
 80026ac:	4091      	lsls	r1, r2
 80026ae:	000a      	movs	r2, r1
 80026b0:	43d2      	mvns	r2, r2
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2101      	movs	r1, #1
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4091      	lsls	r1, r2
 80026c2:	000a      	movs	r2, r1
 80026c4:	43d2      	mvns	r2, r2
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	2103      	movs	r1, #3
 80026d6:	4091      	lsls	r1, r2
 80026d8:	000a      	movs	r2, r1
 80026da:	43d2      	mvns	r2, r2
 80026dc:	401a      	ands	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]

    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	40da      	lsrs	r2, r3
 80026ee:	1e13      	subs	r3, r2, #0
 80026f0:	d000      	beq.n	80026f4 <HAL_GPIO_DeInit+0x18c>
 80026f2:	e741      	b.n	8002578 <HAL_GPIO_DeInit+0x10>
  }
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b006      	add	sp, #24
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40010000 	.word	0x40010000
 8002704:	48000400 	.word	0x48000400
 8002708:	48000800 	.word	0x48000800
 800270c:	48000c00 	.word	0x48000c00
 8002710:	48001000 	.word	0x48001000
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	0008      	movs	r0, r1
 8002722:	0011      	movs	r1, r2
 8002724:	1cbb      	adds	r3, r7, #2
 8002726:	1c02      	adds	r2, r0, #0
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	1c7b      	adds	r3, r7, #1
 800272c:	1c0a      	adds	r2, r1, #0
 800272e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002730:	1c7b      	adds	r3, r7, #1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002738:	1cbb      	adds	r3, r7, #2
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002742:	1cbb      	adds	r3, r7, #2
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	000a      	movs	r2, r1
 800275c:	1cbb      	adds	r3, r7, #2
 800275e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002766:	1cbb      	adds	r3, r7, #2
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	1cb9      	adds	r1, r7, #2
 8002776:	8809      	ldrh	r1, [r1, #0]
 8002778:	400b      	ands	r3, r1
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the  PVD_IRQHandler() or PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_PWR_PVD_IRQHandler+0x24>)
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	4013      	ands	r3, r2
 8002796:	d005      	beq.n	80027a4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002798:	f000 f80a 	bl	80027b0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_PWR_PVD_IRQHandler+0x24>)
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0252      	lsls	r2, r2, #9
 80027a2:	615a      	str	r2, [r3, #20]
  }
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_PWREx_Vddio2Monitor_IRQHandler>:
  * @brief This function handles the PWR Vddio2 monitor interrupt request.
  * @note This API should be called under the VDDIO2_IRQHandler() PVD_VDDIO2_IRQHandler().
  * @retval None
  */
void HAL_PWREx_Vddio2Monitor_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_VDDIO2_EXTI_GET_FLAG() != RESET)
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da05      	bge.n	80027d4 <HAL_PWREx_Vddio2Monitor_IRQHandler+0x18>
  {
    /* PWR Vddio2 monitor interrupt user callback */
    HAL_PWREx_Vddio2MonitorCallback();
 80027c8:	f000 f80a 	bl	80027e0 <HAL_PWREx_Vddio2MonitorCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_VDDIO2_EXTI_CLEAR_FLAG();
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_PWREx_Vddio2Monitor_IRQHandler+0x20>)
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	0612      	lsls	r2, r2, #24
 80027d2:	615a      	str	r2, [r3, #20]
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_PWREx_Vddio2MonitorCallback>:
/**
  * @brief PWR Vddio2 Monitor interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_Vddio2MonitorCallback(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWREx_Vddio2MonitorCallback could be implemented in the user file
   */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f000 fb76 	bl	8002eec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4013      	ands	r3, r2
 8002808:	d100      	bne.n	800280c <HAL_RCC_OscConfig+0x20>
 800280a:	e08e      	b.n	800292a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800280c:	4bc5      	ldr	r3, [pc, #788]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	220c      	movs	r2, #12
 8002812:	4013      	ands	r3, r2
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00e      	beq.n	8002836 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002818:	4bc2      	ldr	r3, [pc, #776]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	220c      	movs	r2, #12
 800281e:	4013      	ands	r3, r2
 8002820:	2b08      	cmp	r3, #8
 8002822:	d117      	bne.n	8002854 <HAL_RCC_OscConfig+0x68>
 8002824:	4bbf      	ldr	r3, [pc, #764]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	401a      	ands	r2, r3
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	429a      	cmp	r2, r3
 8002834:	d10e      	bne.n	8002854 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4bbb      	ldr	r3, [pc, #748]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	d100      	bne.n	8002844 <HAL_RCC_OscConfig+0x58>
 8002842:	e071      	b.n	8002928 <HAL_RCC_OscConfig+0x13c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d000      	beq.n	800284e <HAL_RCC_OscConfig+0x62>
 800284c:	e06c      	b.n	8002928 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f000 fb4c 	bl	8002eec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x80>
 800285c:	4bb1      	ldr	r3, [pc, #708]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4bb0      	ldr	r3, [pc, #704]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0249      	lsls	r1, r1, #9
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e02f      	b.n	80028cc <HAL_RCC_OscConfig+0xe0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0xa2>
 8002874:	4bab      	ldr	r3, [pc, #684]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4baa      	ldr	r3, [pc, #680]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800287a:	49ab      	ldr	r1, [pc, #684]	; (8002b28 <HAL_RCC_OscConfig+0x33c>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4ba8      	ldr	r3, [pc, #672]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002886:	49a9      	ldr	r1, [pc, #676]	; (8002b2c <HAL_RCC_OscConfig+0x340>)
 8002888:	400a      	ands	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e01e      	b.n	80028cc <HAL_RCC_OscConfig+0xe0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10e      	bne.n	80028b4 <HAL_RCC_OscConfig+0xc8>
 8002896:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba2      	ldr	r3, [pc, #648]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	02c9      	lsls	r1, r1, #11
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	4b9f      	ldr	r3, [pc, #636]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b9e      	ldr	r3, [pc, #632]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	0249      	lsls	r1, r1, #9
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xe0>
 80028b4:	4b9b      	ldr	r3, [pc, #620]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028ba:	499b      	ldr	r1, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x33c>)
 80028bc:	400a      	ands	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	4b98      	ldr	r3, [pc, #608]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b97      	ldr	r3, [pc, #604]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028c6:	4999      	ldr	r1, [pc, #612]	; (8002b2c <HAL_RCC_OscConfig+0x340>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d014      	beq.n	80028fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fdaa 	bl	800142c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028de:	f7fe fda5 	bl	800142c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e2fd      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f0:	4b8c      	ldr	r3, [pc, #560]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0xf2>
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fd95 	bl	800142c <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fd90 	bl	800142c <HAL_GetTick>
 800290c:	0002      	movs	r2, r0
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e2e8      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	4013      	ands	r3, r2
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x11c>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x14a>
 8002934:	e06c      	b.n	8002a10 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002936:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	220c      	movs	r2, #12
 800293c:	4013      	ands	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002940:	4b78      	ldr	r3, [pc, #480]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	220c      	movs	r2, #12
 8002946:	4013      	ands	r3, r2
 8002948:	2b08      	cmp	r3, #8
 800294a:	d11f      	bne.n	800298c <HAL_RCC_OscConfig+0x1a0>
 800294c:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	23c0      	movs	r3, #192	; 0xc0
 8002952:	025b      	lsls	r3, r3, #9
 8002954:	401a      	ands	r2, r3
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	429a      	cmp	r2, r3
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d005      	beq.n	8002974 <HAL_RCC_OscConfig+0x188>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e2bb      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b6b      	ldr	r3, [pc, #428]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	22f8      	movs	r2, #248	; 0xf8
 800297a:	4393      	bics	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00da      	lsls	r2, r3, #3
 8002984:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e041      	b.n	8002a10 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d024      	beq.n	80029de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 800299a:	2101      	movs	r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fd44 	bl	800142c <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe fd3f 	bl	800142c <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e297      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d0f1      	beq.n	80029aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	22f8      	movs	r2, #248	; 0xf8
 80029cc:	4393      	bics	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	00da      	lsls	r2, r3, #3
 80029d6:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e018      	b.n	8002a10 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	438a      	bics	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe fd1f 	bl	800142c <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f4:	f7fe fd1a 	bl	800142c <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e272      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d1f1      	bne.n	80029f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2208      	movs	r2, #8
 8002a16:	4013      	ands	r3, r2
 8002a18:	d036      	beq.n	8002a88 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d019      	beq.n	8002a56 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fcfd 	bl	800142c <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe fcf8 	bl	800142c <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e250      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2202      	movs	r2, #2
 8002a50:	4013      	ands	r3, r2
 8002a52:	d0f1      	beq.n	8002a38 <HAL_RCC_OscConfig+0x24c>
 8002a54:	e018      	b.n	8002a88 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	438a      	bics	r2, r1
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fce3 	bl	800142c <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fcde 	bl	800142c <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e236      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d1f1      	bne.n	8002a6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d100      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2a8>
 8002a92:	e0b5      	b.n	8002c00 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a94:	201f      	movs	r0, #31
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	055b      	lsls	r3, r3, #21
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d110      	bne.n	8002aca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0549      	lsls	r1, r1, #21
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	61da      	str	r2, [r3, #28]
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_OscConfig+0x344>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d11a      	bne.n	8002b0c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_RCC_OscConfig+0x344>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x344>)
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	0049      	lsls	r1, r1, #1
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fca2 	bl	800142c <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aee:	f7fe fc9d 	bl	800142c <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1f5      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x344>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10f      	bne.n	8002b34 <HAL_RCC_OscConfig+0x348>
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <HAL_RCC_OscConfig+0x338>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	e036      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a4>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	fffeffff 	.word	0xfffeffff
 8002b2c:	fffbffff 	.word	0xfffbffff
 8002b30:	40007000 	.word	0x40007000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x36a>
 8002b3c:	4bca      	ldr	r3, [pc, #808]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	4bc9      	ldr	r3, [pc, #804]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	438a      	bics	r2, r1
 8002b46:	621a      	str	r2, [r3, #32]
 8002b48:	4bc7      	ldr	r3, [pc, #796]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4bc6      	ldr	r3, [pc, #792]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	2104      	movs	r1, #4
 8002b50:	438a      	bics	r2, r1
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	e01c      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a4>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x38c>
 8002b5e:	4bc2      	ldr	r3, [pc, #776]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	4bc1      	ldr	r3, [pc, #772]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b64:	2104      	movs	r1, #4
 8002b66:	430a      	orrs	r2, r1
 8002b68:	621a      	str	r2, [r3, #32]
 8002b6a:	4bbf      	ldr	r3, [pc, #764]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	4bbe      	ldr	r3, [pc, #760]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	621a      	str	r2, [r3, #32]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0x3a4>
 8002b78:	4bbb      	ldr	r3, [pc, #748]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	4bba      	ldr	r3, [pc, #744]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	438a      	bics	r2, r1
 8002b82:	621a      	str	r2, [r3, #32]
 8002b84:	4bb8      	ldr	r3, [pc, #736]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	4bb7      	ldr	r3, [pc, #732]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe fc48 	bl	800142c <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	e009      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fc43 	bl	800142c <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	4aaf      	ldr	r2, [pc, #700]	; (8002e6c <HAL_RCC_OscConfig+0x680>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e19a      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	4bac      	ldr	r3, [pc, #688]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3b6>
 8002bc0:	e013      	b.n	8002bea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fc33 	bl	800142c <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bca:	e009      	b.n	8002be0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fc2e 	bl	800142c <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	4aa5      	ldr	r2, [pc, #660]	; (8002e6c <HAL_RCC_OscConfig+0x680>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e185      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4ba1      	ldr	r3, [pc, #644]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	2202      	movs	r2, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bea:	231f      	movs	r3, #31
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf4:	4b9c      	ldr	r3, [pc, #624]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	4b9b      	ldr	r3, [pc, #620]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	499d      	ldr	r1, [pc, #628]	; (8002e70 <HAL_RCC_OscConfig+0x684>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	4013      	ands	r3, r2
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d12a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c12:	4b95      	ldr	r3, [pc, #596]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c16:	4b94      	ldr	r3, [pc, #592]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c18:	2104      	movs	r1, #4
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c1e:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c22:	4b91      	ldr	r3, [pc, #580]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	2101      	movs	r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fbff 	bl	800142c <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c34:	f7fe fbfa 	bl	800142c <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e152      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d0f1      	beq.n	8002c34 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c50:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	22f8      	movs	r2, #248	; 0xf8
 8002c56:	4393      	bics	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	00da      	lsls	r2, r3, #3
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
 8002c66:	e034      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	3305      	adds	r3, #5
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c70:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c74:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c76:	2104      	movs	r1, #4
 8002c78:	438a      	bics	r2, r1
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c7c:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	22f8      	movs	r2, #248	; 0xf8
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	00da      	lsls	r2, r3, #3
 8002c8c:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	e01e      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c94:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c98:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ca0:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fbbe 	bl	800142c <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cb6:	f7fe fbb9 	bl	800142c <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e111      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cc8:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d1f1      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d05c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cdc:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	220c      	movs	r2, #12
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d00e      	beq.n	8002d06 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ce8:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	220c      	movs	r2, #12
 8002cee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d114      	bne.n	8002d1e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cf4:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	23c0      	movs	r3, #192	; 0xc0
 8002cfa:	025b      	lsls	r3, r3, #9
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	025b      	lsls	r3, r3, #9
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_RCC_OscConfig+0x5a8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d03c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0e6      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d26:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2a:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	0249      	lsls	r1, r1, #9
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fb7a 	bl	800142c <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d3e:	f7fe fb75 	bl	800142c <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0cd      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d50:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	029b      	lsls	r3, r3, #10
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x552>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d5e:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d64:	4943      	ldr	r1, [pc, #268]	; (8002e74 <HAL_RCC_OscConfig+0x688>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fb5f 	bl	800142c <HAL_GetTick>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d74:	f7fe fb5a 	bl	800142c <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0b2      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	029b      	lsls	r3, r3, #10
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x588>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d94:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d100      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5b4>
 8002d9e:	e0a4      	b.n	8002eea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	220c      	movs	r2, #12
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d100      	bne.n	8002dae <HAL_RCC_OscConfig+0x5c2>
 8002dac:	e078      	b.n	8002ea0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d14c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	492e      	ldr	r1, [pc, #184]	; (8002e78 <HAL_RCC_OscConfig+0x68c>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fb33 	bl	800142c <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fb2e 	bl	800142c <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e086      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	049b      	lsls	r3, r3, #18
 8002de6:	4013      	ands	r3, r2
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	220f      	movs	r2, #15
 8002df0:	4393      	bics	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_RCC_OscConfig+0x690>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	431a      	orrs	r2, r3
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0449      	lsls	r1, r1, #17
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe fb01 	bl	800142c <HAL_GetTick>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fafc 	bl	800142c <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e054      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	049b      	lsls	r3, r3, #18
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x644>
 8002e4e:	e04c      	b.n	8002eea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <HAL_RCC_OscConfig+0x67c>)
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <HAL_RCC_OscConfig+0x68c>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fae6 	bl	800142c <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x6a6>
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	00001388 	.word	0x00001388
 8002e70:	efffffff 	.word	0xefffffff
 8002e74:	fffeffff 	.word	0xfffeffff
 8002e78:	feffffff 	.word	0xfeffffff
 8002e7c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fad4 	bl	800142c <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e02c      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCC_OscConfig+0x708>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	049b      	lsls	r3, r3, #18
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x694>
 8002e9e:	e024      	b.n	8002eea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e01f      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_OscConfig+0x708>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x708>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	025b      	lsls	r3, r3, #9
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	220f      	movs	r2, #15
 8002ecc:	401a      	ands	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	23f0      	movs	r3, #240	; 0xf0
 8002eda:	039b      	lsls	r3, r3, #14
 8002edc:	401a      	ands	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b008      	add	sp, #32
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0bf      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d911      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4393      	bics	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a6      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d015      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d006      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f52:	4b51      	ldr	r3, [pc, #324]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002f58:	21e0      	movs	r1, #224	; 0xe0
 8002f5a:	00c9      	lsls	r1, r1, #3
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	22f0      	movs	r2, #240	; 0xf0
 8002f66:	4393      	bics	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d04c      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d120      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07a      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	049b      	lsls	r3, r3, #18
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d114      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06e      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e062      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e05b      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4393      	bics	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fa20 	bl	800142c <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff2:	f7fe fa1b 	bl	800142c <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_RCC_ClockConfig+0x1a4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e042      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	220c      	movs	r2, #12
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1ec      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d211      	bcs.n	800304a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x19c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2204      	movs	r2, #4
 8003050:	4013      	ands	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_RCC_ClockConfig+0x1a8>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003068:	f000 f820 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306c:	0001      	movs	r1, r0
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1a0>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	220f      	movs	r2, #15
 8003076:	4013      	ands	r3, r2
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x1ac>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	000a      	movs	r2, r1
 800307e:	40da      	lsrs	r2, r3
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003084:	2003      	movs	r0, #3
 8003086:	f7fd fc9f 	bl	80009c8 <HAL_InitTick>
  
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	00001388 	.word	0x00001388
 80030a0:	fffff8ff 	.word	0xfffff8ff
 80030a4:	0800c528 	.word	0x0800c528
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030c6:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	220c      	movs	r2, #12
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d046      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0xb8>
 80030d6:	d848      	bhi.n	800316a <HAL_RCC_GetSysClockFreq+0xbe>
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d002      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x36>
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d003      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x3c>
 80030e0:	e043      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_GetSysClockFreq+0xd4>)
 80030e4:	613b      	str	r3, [r7, #16]
      break;
 80030e6:	e043      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0c9b      	lsrs	r3, r3, #18
 80030ec:	220f      	movs	r2, #15
 80030ee:	4013      	ands	r3, r2
 80030f0:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_RCC_GetSysClockFreq+0xd8>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	220f      	movs	r2, #15
 80030fc:	4013      	ands	r3, r2
 80030fe:	4a22      	ldr	r2, [pc, #136]	; (8003188 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	23c0      	movs	r3, #192	; 0xc0
 8003108:	025b      	lsls	r3, r3, #9
 800310a:	401a      	ands	r2, r3
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	025b      	lsls	r3, r3, #9
 8003110:	429a      	cmp	r2, r3
 8003112:	d109      	bne.n	8003128 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	481a      	ldr	r0, [pc, #104]	; (8003180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003118:	f7fc fff6 	bl	8000108 <__udivsi3>
 800311c:	0003      	movs	r3, r0
 800311e:	001a      	movs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4353      	muls	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e01a      	b.n	800315e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	025b      	lsls	r3, r3, #9
 800312e:	401a      	ands	r2, r3
 8003130:	23c0      	movs	r3, #192	; 0xc0
 8003132:	025b      	lsls	r3, r3, #9
 8003134:	429a      	cmp	r2, r3
 8003136:	d109      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <HAL_RCC_GetSysClockFreq+0xe0>)
 800313c:	f7fc ffe4 	bl	8000108 <__udivsi3>
 8003140:	0003      	movs	r3, r0
 8003142:	001a      	movs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4353      	muls	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e008      	b.n	800315e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	480c      	ldr	r0, [pc, #48]	; (8003180 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003150:	f7fc ffda 	bl	8000108 <__udivsi3>
 8003154:	0003      	movs	r3, r0
 8003156:	001a      	movs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4353      	muls	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	613b      	str	r3, [r7, #16]
      break;
 8003162:	e005      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003166:	613b      	str	r3, [r7, #16]
      break;
 8003168:	e002      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetSysClockFreq+0xd4>)
 800316c:	613b      	str	r3, [r7, #16]
      break;
 800316e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003170:	693b      	ldr	r3, [r7, #16]
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	007a1200 	.word	0x007a1200
 8003184:	0800c540 	.word	0x0800c540
 8003188:	0800c550 	.word	0x0800c550
 800318c:	02dc6c00 	.word	0x02dc6c00

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031a8:	f7ff fff2 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031ac:	0001      	movs	r1, r0
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	2207      	movs	r2, #7
 80031b6:	4013      	ands	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	40d9      	lsrs	r1, r3
 80031be:	000b      	movs	r3, r1
}    
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	40021000 	.word	0x40021000
 80031cc:	0800c538 	.word	0x0800c538

080031d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCC_GetClockConfig+0x4c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_GetClockConfig+0x4c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	22f0      	movs	r2, #240	; 0xf0
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_RCC_GetClockConfig+0x4c>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	23e0      	movs	r3, #224	; 0xe0
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	401a      	ands	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetClockConfig+0x50>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	401a      	ands	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40021000 	.word	0x40021000
 8003220:	40022000 	.word	0x40022000

08003224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	025b      	lsls	r3, r3, #9
 800323c:	4013      	ands	r3, r2
 800323e:	d100      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003240:	e08e      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2017      	movs	r0, #23
 8003244:	183b      	adds	r3, r7, r0
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b6e      	ldr	r3, [pc, #440]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	055b      	lsls	r3, r3, #21
 8003252:	4013      	ands	r3, r2
 8003254:	d110      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0549      	lsls	r1, r1, #21
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
 8003264:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	055b      	lsls	r3, r3, #21
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	183b      	adds	r3, r7, r0
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4013      	ands	r3, r2
 8003282:	d11a      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003284:	4b60      	ldr	r3, [pc, #384]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	0049      	lsls	r1, r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe f8cb 	bl	800142c <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe f8c6 	bl	800142c <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0a6      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d0f0      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ba:	4b52      	ldr	r3, [pc, #328]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	23c0      	movs	r3, #192	; 0xc0
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d034      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	23c0      	movs	r3, #192	; 0xc0
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d02c      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a4a      	ldr	r2, [pc, #296]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0249      	lsls	r1, r1, #9
 80032f0:	430a      	orrs	r2, r1
 80032f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f4:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fa:	4945      	ldr	r1, [pc, #276]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe f88d 	bl	800142c <HAL_GetTick>
 8003312:	0003      	movs	r3, r0
 8003314:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe f888 	bl	800142c <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e067      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d0f0      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003336:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a34      	ldr	r2, [pc, #208]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003346:	430a      	orrs	r2, r1
 8003348:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334a:	2317      	movs	r3, #23
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335a:	492f      	ldr	r1, [pc, #188]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800335c:	400a      	ands	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	2203      	movs	r2, #3
 8003370:	4393      	bics	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800337a:	430a      	orrs	r2, r1
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	4a23      	ldr	r2, [pc, #140]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003398:	430a      	orrs	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	02db      	lsls	r3, r3, #11
 80033a4:	4013      	ands	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2220      	movs	r2, #32
 80033c2:	4013      	ands	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2210      	movs	r2, #16
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4013      	ands	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	4393      	bics	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b006      	add	sp, #24
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	fffffcff 	.word	0xfffffcff
 8003410:	fffeffff 	.word	0xfffeffff
 8003414:	00001388 	.word	0x00001388
 8003418:	efffffff 	.word	0xefffffff
 800341c:	fffcffff 	.word	0xfffcffff
 8003420:	fff3ffff 	.word	0xfff3ffff

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e042      	b.n	80034bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223d      	movs	r2, #61	; 0x3d
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223c      	movs	r2, #60	; 0x3c
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 f839 	bl	80034c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223d      	movs	r2, #61	; 0x3d
 8003456:	2102      	movs	r1, #2
 8003458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f000 f9bd 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2246      	movs	r2, #70	; 0x46
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223e      	movs	r2, #62	; 0x3e
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2241      	movs	r2, #65	; 0x41
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2242      	movs	r2, #66	; 0x42
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2243      	movs	r2, #67	; 0x43
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2244      	movs	r2, #68	; 0x44
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2245      	movs	r2, #69	; 0x45
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	223d      	movs	r2, #61	; 0x3d
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e03b      	b.n	8003564 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	223d      	movs	r2, #61	; 0x3d
 80034f0:	2102      	movs	r1, #2
 80034f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	430a      	orrs	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_TIM_Base_Start_IT+0x98>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	429a      	cmp	r2, r3
 8003518:	d009      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_TIM_Base_Start_IT+0x9c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x5a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_TIM_Base_Start_IT+0xa0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d111      	bne.n	8003552 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2207      	movs	r2, #7
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d010      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2101      	movs	r1, #1
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	e007      	b.n	8003562 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40014000 	.word	0x40014000

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d124      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11d      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4252      	negs	r2, r2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2203      	movs	r2, #3
 80035b4:	4013      	ands	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f8fa 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e007      	b.n	80035d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f8ed 	bl	80037a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f8f9 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2204      	movs	r2, #4
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d125      	bne.n	8003632 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2204      	movs	r2, #4
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11e      	bne.n	8003632 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2205      	movs	r2, #5
 80035fa:	4252      	negs	r2, r2
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	23c0      	movs	r3, #192	; 0xc0
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f8cd 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 800361a:	e007      	b.n	800362c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f8c0 	bl	80037a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f8cc 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2208      	movs	r2, #8
 800363a:	4013      	ands	r3, r2
 800363c:	2b08      	cmp	r3, #8
 800363e:	d124      	bne.n	800368a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2208      	movs	r2, #8
 8003648:	4013      	ands	r3, r2
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11d      	bne.n	800368a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2209      	movs	r2, #9
 8003654:	4252      	negs	r2, r2
 8003656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f8a1 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 8003672:	e007      	b.n	8003684 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f894 	bl	80037a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f8a0 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2210      	movs	r2, #16
 8003692:	4013      	ands	r3, r2
 8003694:	2b10      	cmp	r3, #16
 8003696:	d125      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2210      	movs	r2, #16
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d11e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2211      	movs	r2, #17
 80036ac:	4252      	negs	r2, r2
 80036ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2208      	movs	r2, #8
 80036b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	23c0      	movs	r3, #192	; 0xc0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4013      	ands	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f874 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e007      	b.n	80036de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f867 	bl	80037a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f873 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10f      	bne.n	8003712 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2202      	movs	r2, #2
 8003706:	4252      	negs	r2, r2
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd f901 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	4013      	ands	r3, r2
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d10f      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	4013      	ands	r3, r2
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d108      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2281      	movs	r2, #129	; 0x81
 8003734:	4252      	negs	r2, r2
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f8da 	bl	80038f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2240      	movs	r2, #64	; 0x40
 8003748:	4013      	ands	r3, r2
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d10f      	bne.n	800376e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	4013      	ands	r3, r2
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d108      	bne.n	800376e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2241      	movs	r2, #65	; 0x41
 8003762:	4252      	negs	r2, r2
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f833 	bl	80037d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2220      	movs	r2, #32
 8003776:	4013      	ands	r3, r2
 8003778:	2b20      	cmp	r3, #32
 800377a:	d10f      	bne.n	800379c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	2b20      	cmp	r3, #32
 8003788:	d108      	bne.n	800379c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2221      	movs	r2, #33	; 0x21
 8003790:	4252      	negs	r2, r2
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f8a4 	bl	80038e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <TIM_Base_SetConfig+0xe4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d008      	beq.n	800380e <TIM_Base_SetConfig+0x2a>
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	05db      	lsls	r3, r3, #23
 8003802:	429a      	cmp	r2, r3
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x2a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a30      	ldr	r2, [pc, #192]	; (80038cc <TIM_Base_SetConfig+0xe8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2270      	movs	r2, #112	; 0x70
 8003812:	4393      	bics	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <TIM_Base_SetConfig+0xe4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	05db      	lsls	r3, r3, #23
 800382e:	429a      	cmp	r2, r3
 8003830:	d013      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <TIM_Base_SetConfig+0xe8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00f      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <TIM_Base_SetConfig+0xec>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <TIM_Base_SetConfig+0xf0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <TIM_Base_SetConfig+0xf4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_Base_SetConfig+0x76>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a21      	ldr	r2, [pc, #132]	; (80038dc <TIM_Base_SetConfig+0xf8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d108      	bne.n	800386c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <TIM_Base_SetConfig+0xfc>)
 800385e:	4013      	ands	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	4393      	bics	r3, r2
 8003872:	001a      	movs	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <TIM_Base_SetConfig+0xe4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0xce>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <TIM_Base_SetConfig+0xf0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0xce>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <TIM_Base_SetConfig+0xf4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0xce>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <TIM_Base_SetConfig+0xf8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d103      	bne.n	80038ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	615a      	str	r2, [r3, #20]
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40002000 	.word	0x40002000
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800
 80038e0:	fffffcff 	.word	0xfffffcff

080038e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e044      	b.n	80039a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2278      	movs	r2, #120	; 0x78
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f7fd fa6f 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	; 0x24
 8003932:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fda8 	bl	800449c <UART_SetConfig>
 800394c:	0003      	movs	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e024      	b.n	80039a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 ff83 	bl	800486c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	490d      	ldr	r1, [pc, #52]	; (80039a8 <HAL_UART_Init+0xa4>)
 8003972:	400a      	ands	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	212a      	movs	r1, #42	; 0x2a
 8003982:	438a      	bics	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f001 f81b 	bl	80049d4 <UART_CheckIdleState>
 800399e:	0003      	movs	r3, r0
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	ffffb7ff 	.word	0xffffb7ff

080039ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e030      	b.n	8003a20 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2101      	movs	r1, #1
 80039d0:	438a      	bics	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2200      	movs	r2, #0
 80039e2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fd fc2c 	bl	800124c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2284      	movs	r2, #132	; 0x84
 80039f8:	2100      	movs	r1, #0
 80039fa:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	2100      	movs	r1, #0
 8003a08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2278      	movs	r2, #120	; 0x78
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d000      	beq.n	8003a42 <HAL_UART_Transmit+0x1a>
 8003a40:	e08d      	b.n	8003b5e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_UART_Transmit+0x28>
 8003a48:	1dbb      	adds	r3, r7, #6
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e085      	b.n	8003b60 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	015b      	lsls	r3, r3, #5
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d109      	bne.n	8003a74 <HAL_UART_Transmit+0x4c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e075      	b.n	8003b60 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2284      	movs	r2, #132	; 0x84
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2221      	movs	r2, #33	; 0x21
 8003a80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a82:	f7fd fcd3 	bl	800142c <HAL_GetTick>
 8003a86:	0003      	movs	r3, r0
 8003a88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1dba      	adds	r2, r7, #6
 8003a8e:	2150      	movs	r1, #80	; 0x50
 8003a90:	8812      	ldrh	r2, [r2, #0]
 8003a92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1dba      	adds	r2, r7, #6
 8003a98:	2152      	movs	r1, #82	; 0x52
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	015b      	lsls	r3, r3, #5
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d108      	bne.n	8003abc <HAL_UART_Transmit+0x94>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e003      	b.n	8003ac4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac4:	e030      	b.n	8003b28 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	0013      	movs	r3, r2
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	f001 f826 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e03c      	b.n	8003b60 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	05d2      	lsls	r2, r2, #23
 8003af6:	0dd2      	lsrs	r2, r2, #23
 8003af8:	b292      	uxth	r2, r2
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	3302      	adds	r3, #2
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e008      	b.n	8003b16 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2252      	movs	r2, #82	; 0x52
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b299      	uxth	r1, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2252      	movs	r2, #82	; 0x52
 8003b26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2252      	movs	r2, #82	; 0x52
 8003b2c:	5a9b      	ldrh	r3, [r3, r2]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1c8      	bne.n	8003ac6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2140      	movs	r1, #64	; 0x40
 8003b42:	f000 ffef 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e005      	b.n	8003b60 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
  }
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b008      	add	sp, #32
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	1dbb      	adds	r3, r7, #6
 8003b74:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d15b      	bne.n	8003c36 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_UART_Transmit_IT+0x24>
 8003b84:	1dbb      	adds	r3, r7, #6
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e053      	b.n	8003c38 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	015b      	lsls	r3, r3, #5
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d109      	bne.n	8003bb0 <HAL_UART_Transmit_IT+0x48>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e043      	b.n	8003c38 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1dba      	adds	r2, r7, #6
 8003bba:	2150      	movs	r1, #80	; 0x50
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1dba      	adds	r2, r7, #6
 8003bc4:	2152      	movs	r1, #82	; 0x52
 8003bc6:	8812      	ldrh	r2, [r2, #0]
 8003bc8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2284      	movs	r2, #132	; 0x84
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2221      	movs	r2, #33	; 0x21
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	015b      	lsls	r3, r3, #5
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d107      	bne.n	8003bfa <HAL_UART_Transmit_IT+0x92>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <HAL_UART_Transmit_IT+0xd8>)
 8003bf6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003bf8:	e002      	b.n	8003c00 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HAL_UART_Transmit_IT+0xdc>)
 8003bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c00:	f3ef 8310 	mrs	r3, PRIMASK
 8003c04:	613b      	str	r3, [r7, #16]
  return(result);
 8003c06:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b008      	add	sp, #32
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	080052b1 	.word	0x080052b1
 8003c44:	080051fd 	.word	0x080051fd

08003c48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	1dbb      	adds	r3, r7, #6
 8003c54:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2280      	movs	r2, #128	; 0x80
 8003c5a:	589b      	ldr	r3, [r3, r2]
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d145      	bne.n	8003cec <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_UART_Receive_IT+0x26>
 8003c66:	1dbb      	adds	r3, r7, #6
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e03d      	b.n	8003cee <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	015b      	lsls	r3, r3, #5
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d109      	bne.n	8003c92 <HAL_UART_Receive_IT+0x4a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d001      	beq.n	8003c92 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e02d      	b.n	8003cee <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d019      	beq.n	8003cda <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8003caa:	613b      	str	r3, [r7, #16]
  return(result);
 8003cac:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	04c9      	lsls	r1, r1, #19
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cda:	1dbb      	adds	r3, r7, #6
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 ff88 	bl	8004bf8 <UART_Start_Receive_IT>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	e000      	b.n	8003cee <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b008      	add	sp, #32
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	1dbb      	adds	r3, r7, #6
 8003d02:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	589b      	ldr	r3, [r3, r2]
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d145      	bne.n	8003d9a <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_UART_Receive_DMA+0x26>
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e03d      	b.n	8003d9c <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	015b      	lsls	r3, r3, #5
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d109      	bne.n	8003d40 <HAL_UART_Receive_DMA+0x4a>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e02d      	b.n	8003d9c <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	4013      	ands	r3, r2
 8003d52:	d019      	beq.n	8003d88 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	613b      	str	r3, [r7, #16]
  return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	04c9      	lsls	r1, r1, #19
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fffb 	bl	8004d8c <UART_Start_Receive_DMA>
 8003d96:	0003      	movs	r3, r0
 8003d98:	e000      	b.n	8003d9c <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b008      	add	sp, #32
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b0ab      	sub	sp, #172	; 0xac
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	22a4      	movs	r2, #164	; 0xa4
 8003db4:	18b9      	adds	r1, r7, r2
 8003db6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	20a0      	movs	r0, #160	; 0xa0
 8003dc0:	1839      	adds	r1, r7, r0
 8003dc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	219c      	movs	r1, #156	; 0x9c
 8003dcc:	1879      	adds	r1, r7, r1
 8003dce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	18bb      	adds	r3, r7, r2
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a99      	ldr	r2, [pc, #612]	; (800403c <HAL_UART_IRQHandler+0x298>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2298      	movs	r2, #152	; 0x98
 8003ddc:	18bc      	adds	r4, r7, r2
 8003dde:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003de0:	18bb      	adds	r3, r7, r2
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d114      	bne.n	8003e12 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2220      	movs	r2, #32
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00f      	beq.n	8003e12 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003df2:	183b      	adds	r3, r7, r0
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2220      	movs	r2, #32
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d00a      	beq.n	8003e12 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d100      	bne.n	8003e06 <HAL_UART_IRQHandler+0x62>
 8003e04:	e29e      	b.n	8004344 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	4798      	blx	r3
      }
      return;
 8003e10:	e298      	b.n	8004344 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e12:	2398      	movs	r3, #152	; 0x98
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d100      	bne.n	8003e1e <HAL_UART_IRQHandler+0x7a>
 8003e1c:	e114      	b.n	8004048 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e1e:	239c      	movs	r3, #156	; 0x9c
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e2a:	23a0      	movs	r3, #160	; 0xa0
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a83      	ldr	r2, [pc, #524]	; (8004040 <HAL_UART_IRQHandler+0x29c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	d100      	bne.n	8003e38 <HAL_UART_IRQHandler+0x94>
 8003e36:	e107      	b.n	8004048 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e38:	23a4      	movs	r3, #164	; 0xa4
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d012      	beq.n	8003e6a <HAL_UART_IRQHandler+0xc6>
 8003e44:	23a0      	movs	r3, #160	; 0xa0
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2284      	movs	r2, #132	; 0x84
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	2201      	movs	r2, #1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2184      	movs	r1, #132	; 0x84
 8003e68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e6a:	23a4      	movs	r3, #164	; 0xa4
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2202      	movs	r2, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d011      	beq.n	8003e9a <HAL_UART_IRQHandler+0xf6>
 8003e76:	239c      	movs	r3, #156	; 0x9c
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2202      	movs	r2, #2
 8003e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2284      	movs	r2, #132	; 0x84
 8003e8e:	589b      	ldr	r3, [r3, r2]
 8003e90:	2204      	movs	r2, #4
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2184      	movs	r1, #132	; 0x84
 8003e98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e9a:	23a4      	movs	r3, #164	; 0xa4
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d011      	beq.n	8003eca <HAL_UART_IRQHandler+0x126>
 8003ea6:	239c      	movs	r3, #156	; 0x9c
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2284      	movs	r2, #132	; 0x84
 8003ebe:	589b      	ldr	r3, [r3, r2]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2184      	movs	r1, #132	; 0x84
 8003ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003eca:	23a4      	movs	r3, #164	; 0xa4
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d017      	beq.n	8003f06 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ed6:	23a0      	movs	r3, #160	; 0xa0
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2220      	movs	r2, #32
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d105      	bne.n	8003eee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ee2:	239c      	movs	r3, #156	; 0x9c
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2284      	movs	r2, #132	; 0x84
 8003efa:	589b      	ldr	r3, [r3, r2]
 8003efc:	2208      	movs	r2, #8
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2184      	movs	r1, #132	; 0x84
 8003f04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f06:	23a4      	movs	r3, #164	; 0xa4
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_UART_IRQHandler+0x198>
 8003f14:	23a0      	movs	r3, #160	; 0xa0
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	04db      	lsls	r3, r3, #19
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d00c      	beq.n	8003f3c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2284      	movs	r2, #132	; 0x84
 8003f30:	589b      	ldr	r3, [r3, r2]
 8003f32:	2220      	movs	r2, #32
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2184      	movs	r1, #132	; 0x84
 8003f3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2284      	movs	r2, #132	; 0x84
 8003f40:	589b      	ldr	r3, [r3, r2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d100      	bne.n	8003f48 <HAL_UART_IRQHandler+0x1a4>
 8003f46:	e1ff      	b.n	8004348 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f48:	23a4      	movs	r3, #164	; 0xa4
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	4013      	ands	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f54:	23a0      	movs	r3, #160	; 0xa0
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d008      	beq.n	8003f72 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	0010      	movs	r0, r2
 8003f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2284      	movs	r2, #132	; 0x84
 8003f76:	589b      	ldr	r3, [r3, r2]
 8003f78:	2194      	movs	r1, #148	; 0x94
 8003f7a:	187a      	adds	r2, r7, r1
 8003f7c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d004      	beq.n	8003f96 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2228      	movs	r2, #40	; 0x28
 8003f92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f94:	d047      	beq.n	8004026 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 ffbb 	bl	8004f14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d137      	bne.n	800401c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fac:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb4:	2090      	movs	r0, #144	; 0x90
 8003fb6:	183a      	adds	r2, r7, r0
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc0:	f383 8810 	msr	PRIMASK, r3
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	438a      	bics	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <HAL_UART_IRQHandler+0x2a0>)
 8003ff2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fd fe8e 	bl	8001d1a <HAL_DMA_Abort_IT>
 8003ffe:	1e03      	subs	r3, r0, #0
 8004000:	d01a      	beq.n	8004038 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	0018      	movs	r0, r3
 800400e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e012      	b.n	8004038 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fa2d 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401a:	e00d      	b.n	8004038 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fa28 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	e008      	b.n	8004038 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 fa23 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2284      	movs	r2, #132	; 0x84
 8004032:	2100      	movs	r1, #0
 8004034:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004036:	e187      	b.n	8004348 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	46c0      	nop			; (mov r8, r8)
    return;
 800403a:	e185      	b.n	8004348 <HAL_UART_IRQHandler+0x5a4>
 800403c:	0000080f 	.word	0x0000080f
 8004040:	04000120 	.word	0x04000120
 8004044:	080051cf 	.word	0x080051cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	2b01      	cmp	r3, #1
 800404e:	d000      	beq.n	8004052 <HAL_UART_IRQHandler+0x2ae>
 8004050:	e139      	b.n	80042c6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004052:	23a4      	movs	r3, #164	; 0xa4
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2210      	movs	r2, #16
 800405a:	4013      	ands	r3, r2
 800405c:	d100      	bne.n	8004060 <HAL_UART_IRQHandler+0x2bc>
 800405e:	e132      	b.n	80042c6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004060:	23a0      	movs	r3, #160	; 0xa0
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2210      	movs	r2, #16
 8004068:	4013      	ands	r3, r2
 800406a:	d100      	bne.n	800406e <HAL_UART_IRQHandler+0x2ca>
 800406c:	e12b      	b.n	80042c6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2240      	movs	r2, #64	; 0x40
 800407e:	4013      	ands	r3, r2
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d000      	beq.n	8004086 <HAL_UART_IRQHandler+0x2e2>
 8004084:	e09f      	b.n	80041c6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	217e      	movs	r1, #126	; 0x7e
 8004090:	187b      	adds	r3, r7, r1
 8004092:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004094:	187b      	adds	r3, r7, r1
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d100      	bne.n	800409e <HAL_UART_IRQHandler+0x2fa>
 800409c:	e156      	b.n	800434c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2258      	movs	r2, #88	; 0x58
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	187a      	adds	r2, r7, r1
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d300      	bcc.n	80040ae <HAL_UART_IRQHandler+0x30a>
 80040ac:	e14e      	b.n	800434c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	187a      	adds	r2, r7, r1
 80040b2:	215a      	movs	r1, #90	; 0x5a
 80040b4:	8812      	ldrh	r2, [r2, #0]
 80040b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d06f      	beq.n	80041a2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c2:	f3ef 8310 	mrs	r3, PRIMASK
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80040cc:	2301      	movs	r3, #1
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	499e      	ldr	r1, [pc, #632]	; (800435c <HAL_UART_IRQHandler+0x5b8>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80040fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	677b      	str	r3, [r7, #116]	; 0x74
 80040fe:	2301      	movs	r3, #1
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	438a      	bics	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004126:	f3ef 8310 	mrs	r3, PRIMASK
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800412c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412e:	673b      	str	r3, [r7, #112]	; 0x70
 8004130:	2301      	movs	r3, #1
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	438a      	bics	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800414e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	2120      	movs	r1, #32
 800415e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800416c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004170:	2301      	movs	r3, #1
 8004172:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2110      	movs	r1, #16
 8004188:	438a      	bics	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	0018      	movs	r0, r3
 800419e:	f7fd fd84 	bl	8001caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2258      	movs	r2, #88	; 0x58
 80041ac:	5a9a      	ldrh	r2, [r3, r2]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	215a      	movs	r1, #90	; 0x5a
 80041b2:	5a5b      	ldrh	r3, [r3, r1]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0011      	movs	r1, r2
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f960 	bl	8004484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041c4:	e0c2      	b.n	800434c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2258      	movs	r2, #88	; 0x58
 80041ca:	5a99      	ldrh	r1, [r3, r2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	225a      	movs	r2, #90	; 0x5a
 80041d0:	5a9b      	ldrh	r3, [r3, r2]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	208e      	movs	r0, #142	; 0x8e
 80041d6:	183b      	adds	r3, r7, r0
 80041d8:	1a8a      	subs	r2, r1, r2
 80041da:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	225a      	movs	r2, #90	; 0x5a
 80041e0:	5a9b      	ldrh	r3, [r3, r2]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d100      	bne.n	80041ea <HAL_UART_IRQHandler+0x446>
 80041e8:	e0b2      	b.n	8004350 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80041ea:	183b      	adds	r3, r7, r0
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d100      	bne.n	80041f4 <HAL_UART_IRQHandler+0x450>
 80041f2:	e0ad      	b.n	8004350 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041fa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fc:	2488      	movs	r4, #136	; 0x88
 80041fe:	193a      	adds	r2, r7, r4
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	2301      	movs	r3, #1
 8004204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4951      	ldr	r1, [pc, #324]	; (8004360 <HAL_UART_IRQHandler+0x5bc>)
 800421a:	400a      	ands	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	193b      	adds	r3, r7, r4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422c:	f3ef 8310 	mrs	r3, PRIMASK
 8004230:	61bb      	str	r3, [r7, #24]
  return(result);
 8004232:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	2484      	movs	r4, #132	; 0x84
 8004236:	193a      	adds	r2, r7, r4
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	438a      	bics	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	193b      	adds	r3, r7, r4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	2120      	movs	r1, #32
 800426a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004278:	f3ef 8310 	mrs	r3, PRIMASK
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004280:	2480      	movs	r4, #128	; 0x80
 8004282:	193a      	adds	r2, r7, r4
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	2301      	movs	r3, #1
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2110      	movs	r1, #16
 800429e:	438a      	bics	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042b6:	183b      	adds	r3, r7, r0
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 f8e0 	bl	8004484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042c4:	e044      	b.n	8004350 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042c6:	23a4      	movs	r3, #164	; 0xa4
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	035b      	lsls	r3, r3, #13
 80042d0:	4013      	ands	r3, r2
 80042d2:	d010      	beq.n	80042f6 <HAL_UART_IRQHandler+0x552>
 80042d4:	239c      	movs	r3, #156	; 0x9c
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	03db      	lsls	r3, r3, #15
 80042de:	4013      	ands	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	0352      	lsls	r2, r2, #13
 80042ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f001 fa90 	bl	8005814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042f4:	e02f      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042f6:	23a4      	movs	r3, #164	; 0xa4
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	4013      	ands	r3, r2
 8004300:	d00f      	beq.n	8004322 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004302:	23a0      	movs	r3, #160	; 0xa0
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	4013      	ands	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01e      	beq.n	8004354 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	0010      	movs	r0, r2
 800431e:	4798      	blx	r3
    }
    return;
 8004320:	e018      	b.n	8004354 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004322:	23a4      	movs	r3, #164	; 0xa4
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2240      	movs	r2, #64	; 0x40
 800432a:	4013      	ands	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_UART_IRQHandler+0x5b2>
 800432e:	23a0      	movs	r3, #160	; 0xa0
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2240      	movs	r2, #64	; 0x40
 8004336:	4013      	ands	r3, r2
 8004338:	d00d      	beq.n	8004356 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f001 f815 	bl	800536c <UART_EndTransmit_IT>
    return;
 8004342:	e008      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	e006      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	e004      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
      return;
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	e002      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	e000      	b.n	8004356 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004354:	46c0      	nop			; (mov r8, r8)
  }

}
 8004356:	46bd      	mov	sp, r7
 8004358:	b02b      	add	sp, #172	; 0xac
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	fffffeff 	.word	0xfffffeff
 8004360:	fffffedf 	.word	0xfffffedf

08004364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	uint8_t port;
	if(huart == P1uart)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	4b2f      	ldr	r3, [pc, #188]	; (800443c <HAL_UART_RxCpltCallback+0xc8>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d109      	bne.n	8004398 <HAL_UART_RxCpltCallback+0x24>
	{
		port=1;
 8004384:	210f      	movs	r1, #15
 8004386:	187b      	adds	r3, r7, r1
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
		MessagingParser(port);
 800438c:	187b      	adds	r3, r7, r1
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	0018      	movs	r0, r3
 8004392:	f001 fc33 	bl	8005bfc <MessagingParser>
 8004396:	e046      	b.n	8004426 <HAL_UART_RxCpltCallback+0xb2>
	}
	else if (huart == P2uart)
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_UART_RxCpltCallback+0xcc>)
 800439c:	429a      	cmp	r2, r3
 800439e:	d109      	bne.n	80043b4 <HAL_UART_RxCpltCallback+0x40>
	{
		port=2;
 80043a0:	210f      	movs	r1, #15
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	2202      	movs	r2, #2
 80043a6:	701a      	strb	r2, [r3, #0]
		MessagingParser(port);
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f001 fc25 	bl	8005bfc <MessagingParser>
 80043b2:	e038      	b.n	8004426 <HAL_UART_RxCpltCallback+0xb2>
	}
	else if (huart == P3uart)
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <HAL_UART_RxCpltCallback+0xd0>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d109      	bne.n	80043d0 <HAL_UART_RxCpltCallback+0x5c>
	{
		port=3;
 80043bc:	210f      	movs	r1, #15
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	2203      	movs	r2, #3
 80043c2:	701a      	strb	r2, [r3, #0]
		MessagingParser(port);
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f001 fc17 	bl	8005bfc <MessagingParser>
 80043ce:	e02a      	b.n	8004426 <HAL_UART_RxCpltCallback+0xb2>
	}
	else if (huart == P4uart)
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_UART_RxCpltCallback+0xd4>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d109      	bne.n	80043ec <HAL_UART_RxCpltCallback+0x78>
	{
		port=4;
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2204      	movs	r2, #4
 80043de:	701a      	strb	r2, [r3, #0]
		MessagingParser(port);
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f001 fc09 	bl	8005bfc <MessagingParser>
 80043ea:	e01c      	b.n	8004426 <HAL_UART_RxCpltCallback+0xb2>
	}
	else if (huart == P5uart)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <HAL_UART_RxCpltCallback+0xd8>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d118      	bne.n	8004426 <HAL_UART_RxCpltCallback+0xb2>
	{
		//port=5;
		memcpy(&Str1[0], &RcvMessage[4][1], 24);
 80043f4:	4916      	ldr	r1, [pc, #88]	; (8004450 <HAL_UART_RxCpltCallback+0xdc>)
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_UART_RxCpltCallback+0xe0>)
 80043f8:	2218      	movs	r2, #24
 80043fa:	0018      	movs	r0, r3
 80043fc:	f007 ff7c 	bl	800c2f8 <memcpy>
		memset(&RcvMessage[4][0],0,RcvMessageMaxSize);
 8004400:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_UART_RxCpltCallback+0xe4>)
 8004402:	2218      	movs	r2, #24
 8004404:	2100      	movs	r1, #0
 8004406:	0018      	movs	r0, r3
 8004408:	f007 ff7f 	bl	800c30a <memset>
	//	HAL_UART_DeInit(P5uart);
	 // HAL_UART_Init(P5uart);
    HAL_UART_Receive_DMA(P5uart, &RcvMessage[4][0], RcvMessageMaxSize);
 800440c:	4912      	ldr	r1, [pc, #72]	; (8004458 <HAL_UART_RxCpltCallback+0xe4>)
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_UART_RxCpltCallback+0xd8>)
 8004410:	2218      	movs	r2, #24
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fc6f 	bl	8003cf6 <HAL_UART_Receive_DMA>
	  _IND_TOGGLE();
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	01db      	lsls	r3, r3, #7
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <HAL_UART_RxCpltCallback+0xe8>)
 800441e:	0019      	movs	r1, r3
 8004420:	0010      	movs	r0, r2
 8004422:	f7fe f996 	bl	8002752 <HAL_GPIO_TogglePin>
		//MessagingParser(port);
	}
	if (huart == P_RS485uart)
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_UART_RxCpltCallback+0xec>)
 800442a:	429a      	cmp	r2, r3
 800442c:	d101      	bne.n	8004432 <HAL_UART_RxCpltCallback+0xbe>
	{
		prvvMBPUSART1_RXNE_ISR();              // Call Modbus protocol port ISR
 800442e:	f007 fd0b 	bl	800be48 <prvvMBPUSART1_RXNE_ISR>
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b004      	add	sp, #16
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	20000388 	.word	0x20000388
 8004440:	20000278 	.word	0x20000278
 8004444:	20000498 	.word	0x20000498
 8004448:	20000300 	.word	0x20000300
 800444c:	20000410 	.word	0x20000410
 8004450:	20000725 	.word	0x20000725
 8004454:	2000018c 	.word	0x2000018c
 8004458:	20000724 	.word	0x20000724
 800445c:	48000400 	.word	0x48000400
 8004460:	200001f0 	.word	0x200001f0

08004464 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	000a      	movs	r2, r1
 800448e:	1cbb      	adds	r3, r7, #2
 8004490:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b002      	add	sp, #8
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044a4:	231e      	movs	r3, #30
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4abe      	ldr	r2, [pc, #760]	; (80047c4 <UART_SetConfig+0x328>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4ab9      	ldr	r2, [pc, #740]	; (80047c8 <UART_SetConfig+0x32c>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4ab0      	ldr	r2, [pc, #704]	; (80047cc <UART_SetConfig+0x330>)
 800450a:	4013      	ands	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4aac      	ldr	r2, [pc, #688]	; (80047d0 <UART_SetConfig+0x334>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d127      	bne.n	8004572 <UART_SetConfig+0xd6>
 8004522:	4bac      	ldr	r3, [pc, #688]	; (80047d4 <UART_SetConfig+0x338>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	2203      	movs	r2, #3
 8004528:	4013      	ands	r3, r2
 800452a:	2b03      	cmp	r3, #3
 800452c:	d00d      	beq.n	800454a <UART_SetConfig+0xae>
 800452e:	d81b      	bhi.n	8004568 <UART_SetConfig+0xcc>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d014      	beq.n	800455e <UART_SetConfig+0xc2>
 8004534:	d818      	bhi.n	8004568 <UART_SetConfig+0xcc>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <UART_SetConfig+0xa4>
 800453a:	2b01      	cmp	r3, #1
 800453c:	d00a      	beq.n	8004554 <UART_SetConfig+0xb8>
 800453e:	e013      	b.n	8004568 <UART_SetConfig+0xcc>
 8004540:	231f      	movs	r3, #31
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e0bd      	b.n	80046c6 <UART_SetConfig+0x22a>
 800454a:	231f      	movs	r3, #31
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2202      	movs	r2, #2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e0b8      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004554:	231f      	movs	r3, #31
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2204      	movs	r2, #4
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e0b3      	b.n	80046c6 <UART_SetConfig+0x22a>
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	2208      	movs	r2, #8
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e0ae      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004568:	231f      	movs	r3, #31
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2210      	movs	r2, #16
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e0a9      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a98      	ldr	r2, [pc, #608]	; (80047d8 <UART_SetConfig+0x33c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d134      	bne.n	80045e6 <UART_SetConfig+0x14a>
 800457c:	4b95      	ldr	r3, [pc, #596]	; (80047d4 <UART_SetConfig+0x338>)
 800457e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004580:	23c0      	movs	r3, #192	; 0xc0
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	22c0      	movs	r2, #192	; 0xc0
 8004588:	0292      	lsls	r2, r2, #10
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <UART_SetConfig+0x122>
 800458e:	22c0      	movs	r2, #192	; 0xc0
 8004590:	0292      	lsls	r2, r2, #10
 8004592:	4293      	cmp	r3, r2
 8004594:	d822      	bhi.n	80045dc <UART_SetConfig+0x140>
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	0292      	lsls	r2, r2, #10
 800459a:	4293      	cmp	r3, r2
 800459c:	d019      	beq.n	80045d2 <UART_SetConfig+0x136>
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	0292      	lsls	r2, r2, #10
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d81a      	bhi.n	80045dc <UART_SetConfig+0x140>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <UART_SetConfig+0x118>
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0252      	lsls	r2, r2, #9
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00a      	beq.n	80045c8 <UART_SetConfig+0x12c>
 80045b2:	e013      	b.n	80045dc <UART_SetConfig+0x140>
 80045b4:	231f      	movs	r3, #31
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e083      	b.n	80046c6 <UART_SetConfig+0x22a>
 80045be:	231f      	movs	r3, #31
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e07e      	b.n	80046c6 <UART_SetConfig+0x22a>
 80045c8:	231f      	movs	r3, #31
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2204      	movs	r2, #4
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e079      	b.n	80046c6 <UART_SetConfig+0x22a>
 80045d2:	231f      	movs	r3, #31
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2208      	movs	r2, #8
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e074      	b.n	80046c6 <UART_SetConfig+0x22a>
 80045dc:	231f      	movs	r3, #31
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2210      	movs	r2, #16
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e06f      	b.n	80046c6 <UART_SetConfig+0x22a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7c      	ldr	r2, [pc, #496]	; (80047dc <UART_SetConfig+0x340>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d134      	bne.n	800465a <UART_SetConfig+0x1be>
 80045f0:	4b78      	ldr	r3, [pc, #480]	; (80047d4 <UART_SetConfig+0x338>)
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	23c0      	movs	r3, #192	; 0xc0
 80045f6:	031b      	lsls	r3, r3, #12
 80045f8:	4013      	ands	r3, r2
 80045fa:	22c0      	movs	r2, #192	; 0xc0
 80045fc:	0312      	lsls	r2, r2, #12
 80045fe:	4293      	cmp	r3, r2
 8004600:	d017      	beq.n	8004632 <UART_SetConfig+0x196>
 8004602:	22c0      	movs	r2, #192	; 0xc0
 8004604:	0312      	lsls	r2, r2, #12
 8004606:	4293      	cmp	r3, r2
 8004608:	d822      	bhi.n	8004650 <UART_SetConfig+0x1b4>
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0312      	lsls	r2, r2, #12
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <UART_SetConfig+0x1aa>
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	0312      	lsls	r2, r2, #12
 8004616:	4293      	cmp	r3, r2
 8004618:	d81a      	bhi.n	8004650 <UART_SetConfig+0x1b4>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <UART_SetConfig+0x18c>
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	02d2      	lsls	r2, r2, #11
 8004622:	4293      	cmp	r3, r2
 8004624:	d00a      	beq.n	800463c <UART_SetConfig+0x1a0>
 8004626:	e013      	b.n	8004650 <UART_SetConfig+0x1b4>
 8004628:	231f      	movs	r3, #31
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e049      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004632:	231f      	movs	r3, #31
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e044      	b.n	80046c6 <UART_SetConfig+0x22a>
 800463c:	231f      	movs	r3, #31
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2204      	movs	r2, #4
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e03f      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004646:	231f      	movs	r3, #31
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2208      	movs	r2, #8
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e03a      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004650:	231f      	movs	r3, #31
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	2210      	movs	r2, #16
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e035      	b.n	80046c6 <UART_SetConfig+0x22a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a60      	ldr	r2, [pc, #384]	; (80047e0 <UART_SetConfig+0x344>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d104      	bne.n	800466e <UART_SetConfig+0x1d2>
 8004664:	231f      	movs	r3, #31
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e02b      	b.n	80046c6 <UART_SetConfig+0x22a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <UART_SetConfig+0x348>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d104      	bne.n	8004682 <UART_SetConfig+0x1e6>
 8004678:	231f      	movs	r3, #31
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e021      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <UART_SetConfig+0x34c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d104      	bne.n	8004696 <UART_SetConfig+0x1fa>
 800468c:	231f      	movs	r3, #31
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e017      	b.n	80046c6 <UART_SetConfig+0x22a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a54      	ldr	r2, [pc, #336]	; (80047ec <UART_SetConfig+0x350>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d104      	bne.n	80046aa <UART_SetConfig+0x20e>
 80046a0:	231f      	movs	r3, #31
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e00d      	b.n	80046c6 <UART_SetConfig+0x22a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a50      	ldr	r2, [pc, #320]	; (80047f0 <UART_SetConfig+0x354>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d104      	bne.n	80046be <UART_SetConfig+0x222>
 80046b4:	231f      	movs	r3, #31
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e003      	b.n	80046c6 <UART_SetConfig+0x22a>
 80046be:	231f      	movs	r3, #31
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2210      	movs	r2, #16
 80046c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d15c      	bne.n	800478c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80046d2:	231f      	movs	r3, #31
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d015      	beq.n	8004708 <UART_SetConfig+0x26c>
 80046dc:	dc18      	bgt.n	8004710 <UART_SetConfig+0x274>
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00d      	beq.n	80046fe <UART_SetConfig+0x262>
 80046e2:	dc15      	bgt.n	8004710 <UART_SetConfig+0x274>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <UART_SetConfig+0x252>
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d005      	beq.n	80046f8 <UART_SetConfig+0x25c>
 80046ec:	e010      	b.n	8004710 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ee:	f7fe fd59 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80046f2:	0003      	movs	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]
        break;
 80046f6:	e012      	b.n	800471e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <UART_SetConfig+0x358>)
 80046fa:	61bb      	str	r3, [r7, #24]
        break;
 80046fc:	e00f      	b.n	800471e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe fcd5 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8004702:	0003      	movs	r3, r0
 8004704:	61bb      	str	r3, [r7, #24]
        break;
 8004706:	e00a      	b.n	800471e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	61bb      	str	r3, [r7, #24]
        break;
 800470e:	e006      	b.n	800471e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004714:	231e      	movs	r3, #30
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
        break;
 800471c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d100      	bne.n	8004726 <UART_SetConfig+0x28a>
 8004724:	e095      	b.n	8004852 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	005a      	lsls	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	18d2      	adds	r2, r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	0019      	movs	r1, r3
 8004738:	0010      	movs	r0, r2
 800473a:	f7fb fce5 	bl	8000108 <__udivsi3>
 800473e:	0003      	movs	r3, r0
 8004740:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b0f      	cmp	r3, #15
 8004746:	d91c      	bls.n	8004782 <UART_SetConfig+0x2e6>
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	025b      	lsls	r3, r3, #9
 800474e:	429a      	cmp	r2, r3
 8004750:	d217      	bcs.n	8004782 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	b29a      	uxth	r2, r3
 8004756:	200e      	movs	r0, #14
 8004758:	183b      	adds	r3, r7, r0
 800475a:	210f      	movs	r1, #15
 800475c:	438a      	bics	r2, r1
 800475e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	2207      	movs	r2, #7
 8004768:	4013      	ands	r3, r2
 800476a:	b299      	uxth	r1, r3
 800476c:	183b      	adds	r3, r7, r0
 800476e:	183a      	adds	r2, r7, r0
 8004770:	8812      	ldrh	r2, [r2, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	183a      	adds	r2, r7, r0
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e067      	b.n	8004852 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004782:	231e      	movs	r3, #30
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e062      	b.n	8004852 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800478c:	231f      	movs	r3, #31
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b08      	cmp	r3, #8
 8004794:	d030      	beq.n	80047f8 <UART_SetConfig+0x35c>
 8004796:	dc33      	bgt.n	8004800 <UART_SetConfig+0x364>
 8004798:	2b04      	cmp	r3, #4
 800479a:	d00d      	beq.n	80047b8 <UART_SetConfig+0x31c>
 800479c:	dc30      	bgt.n	8004800 <UART_SetConfig+0x364>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <UART_SetConfig+0x30c>
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d005      	beq.n	80047b2 <UART_SetConfig+0x316>
 80047a6:	e02b      	b.n	8004800 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe fcfc 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80047ac:	0003      	movs	r3, r0
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e02d      	b.n	800480e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <UART_SetConfig+0x358>)
 80047b4:	61bb      	str	r3, [r7, #24]
        break;
 80047b6:	e02a      	b.n	800480e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b8:	f7fe fc78 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80047bc:	0003      	movs	r3, r0
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e025      	b.n	800480e <UART_SetConfig+0x372>
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	efff69f3 	.word	0xefff69f3
 80047c8:	ffffcfff 	.word	0xffffcfff
 80047cc:	fffff4ff 	.word	0xfffff4ff
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40004400 	.word	0x40004400
 80047dc:	40004800 	.word	0x40004800
 80047e0:	40004c00 	.word	0x40004c00
 80047e4:	40005000 	.word	0x40005000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	40011800 	.word	0x40011800
 80047f0:	40011c00 	.word	0x40011c00
 80047f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	61bb      	str	r3, [r7, #24]
        break;
 80047fe:	e006      	b.n	800480e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004804:	231e      	movs	r3, #30
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
        break;
 800480c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01e      	beq.n	8004852 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	085a      	lsrs	r2, r3, #1
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	18d2      	adds	r2, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0019      	movs	r1, r3
 8004824:	0010      	movs	r0, r2
 8004826:	f7fb fc6f 	bl	8000108 <__udivsi3>
 800482a:	0003      	movs	r3, r0
 800482c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b0f      	cmp	r3, #15
 8004832:	d90a      	bls.n	800484a <UART_SetConfig+0x3ae>
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	429a      	cmp	r2, r3
 800483c:	d205      	bcs.n	800484a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e003      	b.n	8004852 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800484a:	231e      	movs	r3, #30
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800485e:	231e      	movs	r3, #30
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d00b      	beq.n	8004896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <UART_AdvFeatureConfig+0x144>)
 8004886:	4013      	ands	r3, r2
 8004888:	0019      	movs	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2202      	movs	r2, #2
 800489c:	4013      	ands	r3, r2
 800489e:	d00b      	beq.n	80048b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4a43      	ldr	r2, [pc, #268]	; (80049b4 <UART_AdvFeatureConfig+0x148>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2204      	movs	r2, #4
 80048be:	4013      	ands	r3, r2
 80048c0:	d00b      	beq.n	80048da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a3b      	ldr	r2, [pc, #236]	; (80049b8 <UART_AdvFeatureConfig+0x14c>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2208      	movs	r2, #8
 80048e0:	4013      	ands	r3, r2
 80048e2:	d00b      	beq.n	80048fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4a34      	ldr	r2, [pc, #208]	; (80049bc <UART_AdvFeatureConfig+0x150>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2210      	movs	r2, #16
 8004902:	4013      	ands	r3, r2
 8004904:	d00b      	beq.n	800491e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <UART_AdvFeatureConfig+0x154>)
 800490e:	4013      	ands	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2220      	movs	r2, #32
 8004924:	4013      	ands	r3, r2
 8004926:	d00b      	beq.n	8004940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <UART_AdvFeatureConfig+0x158>)
 8004930:	4013      	ands	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	4013      	ands	r3, r2
 8004948:	d01d      	beq.n	8004986 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <UART_AdvFeatureConfig+0x15c>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	035b      	lsls	r3, r3, #13
 800496a:	429a      	cmp	r2, r3
 800496c:	d10b      	bne.n	8004986 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <UART_AdvFeatureConfig+0x160>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	4013      	ands	r3, r2
 800498e:	d00b      	beq.n	80049a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <UART_AdvFeatureConfig+0x164>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	fffdffff 	.word	0xfffdffff
 80049b4:	fffeffff 	.word	0xfffeffff
 80049b8:	fffbffff 	.word	0xfffbffff
 80049bc:	ffff7fff 	.word	0xffff7fff
 80049c0:	ffffefff 	.word	0xffffefff
 80049c4:	ffffdfff 	.word	0xffffdfff
 80049c8:	ffefffff 	.word	0xffefffff
 80049cc:	ff9fffff 	.word	0xff9fffff
 80049d0:	fff7ffff 	.word	0xfff7ffff

080049d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b092      	sub	sp, #72	; 0x48
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2284      	movs	r2, #132	; 0x84
 80049e0:	2100      	movs	r1, #0
 80049e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e4:	f7fc fd22 	bl	800142c <HAL_GetTick>
 80049e8:	0003      	movs	r3, r0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2208      	movs	r2, #8
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d12c      	bne.n	8004a54 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0391      	lsls	r1, r2, #14
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4a46      	ldr	r2, [pc, #280]	; (8004b1c <UART_CheckIdleState+0x148>)
 8004a04:	9200      	str	r2, [sp, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f000 f88c 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d021      	beq.n	8004a54 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a10:	f3ef 8310 	mrs	r3, PRIMASK
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	438a      	bics	r2, r1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2278      	movs	r2, #120	; 0x78
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e05f      	b.n	8004b14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d146      	bne.n	8004af0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	2280      	movs	r2, #128	; 0x80
 8004a66:	03d1      	lsls	r1, r2, #15
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <UART_CheckIdleState+0x148>)
 8004a6c:	9200      	str	r2, [sp, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f000 f858 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d03b      	beq.n	8004af0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a78:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	2301      	movs	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4921      	ldr	r1, [pc, #132]	; (8004b20 <UART_CheckIdleState+0x14c>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f383 8810 	msr	PRIMASK, r3
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004aae:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2101      	movs	r1, #1
 8004acc:	438a      	bics	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2278      	movs	r2, #120	; 0x78
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e011      	b.n	8004b14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	2120      	movs	r1, #32
 8004afc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2278      	movs	r2, #120	; 0x78
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	0018      	movs	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b010      	add	sp, #64	; 0x40
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	01ffffff 	.word	0x01ffffff
 8004b20:	fffffedf 	.word	0xfffffedf

08004b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b34:	e04b      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	d048      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3c:	f7fc fc76 	bl	800142c <HAL_GetTick>
 8004b40:	0002      	movs	r2, r0
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04b      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d035      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d111      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2208      	movs	r2, #8
 8004b76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 f9ca 	bl	8004f14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2284      	movs	r2, #132	; 0x84
 8004b84:	2108      	movs	r1, #8
 8004b86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2278      	movs	r2, #120	; 0x78
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e02c      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d112      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f000 f9ad 	bl	8004f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2284      	movs	r2, #132	; 0x84
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2278      	movs	r2, #120	; 0x78
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	425a      	negs	r2, r3
 8004bde:	4153      	adcs	r3, r2
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	001a      	movs	r2, r3
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d0a4      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b090      	sub	sp, #64	; 0x40
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	1dbb      	adds	r3, r7, #6
 8004c04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1dba      	adds	r2, r7, #6
 8004c10:	2158      	movs	r1, #88	; 0x58
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1dba      	adds	r2, r7, #6
 8004c1a:	215a      	movs	r1, #90	; 0x5a
 8004c1c:	8812      	ldrh	r2, [r2, #0]
 8004c1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	015b      	lsls	r3, r3, #5
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d10d      	bne.n	8004c4e <UART_Start_Receive_IT+0x56>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <UART_Start_Receive_IT+0x4c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	225c      	movs	r2, #92	; 0x5c
 8004c3e:	4950      	ldr	r1, [pc, #320]	; (8004d80 <UART_Start_Receive_IT+0x188>)
 8004c40:	5299      	strh	r1, [r3, r2]
 8004c42:	e02e      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	225c      	movs	r2, #92	; 0x5c
 8004c48:	21ff      	movs	r1, #255	; 0xff
 8004c4a:	5299      	strh	r1, [r3, r2]
 8004c4c:	e029      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <UART_Start_Receive_IT+0x7a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <UART_Start_Receive_IT+0x70>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	225c      	movs	r2, #92	; 0x5c
 8004c62:	21ff      	movs	r1, #255	; 0xff
 8004c64:	5299      	strh	r1, [r3, r2]
 8004c66:	e01c      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	225c      	movs	r2, #92	; 0x5c
 8004c6c:	217f      	movs	r1, #127	; 0x7f
 8004c6e:	5299      	strh	r1, [r3, r2]
 8004c70:	e017      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	055b      	lsls	r3, r3, #21
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10d      	bne.n	8004c9a <UART_Start_Receive_IT+0xa2>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <UART_Start_Receive_IT+0x98>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	225c      	movs	r2, #92	; 0x5c
 8004c8a:	217f      	movs	r1, #127	; 0x7f
 8004c8c:	5299      	strh	r1, [r3, r2]
 8004c8e:	e008      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	225c      	movs	r2, #92	; 0x5c
 8004c94:	213f      	movs	r1, #63	; 0x3f
 8004c96:	5299      	strh	r1, [r3, r2]
 8004c98:	e003      	b.n	8004ca2 <UART_Start_Receive_IT+0xaa>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	225c      	movs	r2, #92	; 0x5c
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2284      	movs	r2, #132	; 0x84
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	2122      	movs	r1, #34	; 0x22
 8004cb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	f383 8810 	msr	PRIMASK, r3
}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	015b      	lsls	r3, r3, #5
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d107      	bne.n	8004d00 <UART_Start_Receive_IT+0x108>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d103      	bne.n	8004d00 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <UART_Start_Receive_IT+0x18c>)
 8004cfc:	669a      	str	r2, [r3, #104]	; 0x68
 8004cfe:	e002      	b.n	8004d06 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <UART_Start_Receive_IT+0x190>)
 8004d04:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d019      	beq.n	8004d42 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d12:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d14:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	2301      	movs	r3, #1
 8004d1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2190      	movs	r1, #144	; 0x90
 8004d30:	0049      	lsls	r1, r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	e018      	b.n	8004d74 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d42:	f3ef 8310 	mrs	r3, PRIMASK
 8004d46:	613b      	str	r3, [r7, #16]
  return(result);
 8004d48:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f383 8810 	msr	PRIMASK, r3
}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2120      	movs	r1, #32
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f383 8810 	msr	PRIMASK, r3
}
 8004d72:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b010      	add	sp, #64	; 0x40
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	000001ff 	.word	0x000001ff
 8004d84:	0800557d 	.word	0x0800557d
 8004d88:	080053c5 	.word	0x080053c5

08004d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b090      	sub	sp, #64	; 0x40
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	1dbb      	adds	r3, r7, #6
 8004d98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1dba      	adds	r2, r7, #6
 8004da4:	2158      	movs	r1, #88	; 0x58
 8004da6:	8812      	ldrh	r2, [r2, #0]
 8004da8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2284      	movs	r2, #132	; 0x84
 8004dae:	2100      	movs	r1, #0
 8004db0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	2122      	movs	r1, #34	; 0x22
 8004db8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d028      	beq.n	8004e14 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc6:	4a3e      	ldr	r2, [pc, #248]	; (8004ec0 <UART_Start_Receive_DMA+0x134>)
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <UART_Start_Receive_DMA+0x138>)
 8004dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <UART_Start_Receive_DMA+0x13c>)
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	2200      	movs	r2, #0
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3324      	adds	r3, #36	; 0x24
 8004dec:	0019      	movs	r1, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	001a      	movs	r2, r3
 8004df4:	1dbb      	adds	r3, r7, #6
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	f7fc fef1 	bl	8001bde <HAL_DMA_Start_IT>
 8004dfc:	1e03      	subs	r3, r0, #0
 8004dfe:	d009      	beq.n	8004e14 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2284      	movs	r2, #132	; 0x84
 8004e04:	2110      	movs	r1, #16
 8004e06:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2280      	movs	r2, #128	; 0x80
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e050      	b.n	8004eb6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d019      	beq.n	8004e50 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e26:	2301      	movs	r3, #1
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	f383 8810 	msr	PRIMASK, r3
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	0049      	lsls	r1, r1, #1
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e50:	f3ef 8310 	mrs	r3, PRIMASK
 8004e54:	613b      	str	r3, [r7, #16]
  return(result);
 8004e56:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e82:	f3ef 8310 	mrs	r3, PRIMASK
 8004e86:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e88:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b010      	add	sp, #64	; 0x40
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	08004fdd 	.word	0x08004fdd
 8004ec4:	08005109 	.word	0x08005109
 8004ec8:	0800514b 	.word	0x0800514b

08004ecc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eda:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	21c0      	movs	r1, #192	; 0xc0
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b006      	add	sp, #24
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	; 0x38
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f20:	617b      	str	r3, [r7, #20]
  return(result);
 8004f22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	2301      	movs	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4926      	ldr	r1, [pc, #152]	; (8004fd8 <UART_EndRxTransfer+0xc4>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	623b      	str	r3, [r7, #32]
  return(result);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 8004f58:	2301      	movs	r3, #1
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f383 8810 	msr	PRIMASK, r3
}
 8004f7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d118      	bne.n	8004fba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f88:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	2301      	movs	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2110      	movs	r1, #16
 8004faa:	438a      	bics	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f383 8810 	msr	PRIMASK, r3
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	2120      	movs	r1, #32
 8004fc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b00e      	add	sp, #56	; 0x38
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	fffffedf 	.word	0xfffffedf

08004fdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b094      	sub	sp, #80	; 0x50
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d06f      	beq.n	80050d2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	225a      	movs	r2, #90	; 0x5a
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005000:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
 8005004:	2301      	movs	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	493a      	ldr	r1, [pc, #232]	; (8005104 <UART_DMAReceiveCplt+0x128>)
 800501c:	400a      	ands	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502c:	f3ef 8310 	mrs	r3, PRIMASK
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	647b      	str	r3, [r7, #68]	; 0x44
 8005036:	2301      	movs	r3, #1
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2101      	movs	r1, #1
 800504e:	438a      	bics	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	643b      	str	r3, [r7, #64]	; 0x40
 8005068:	2301      	movs	r3, #1
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2140      	movs	r1, #64	; 0x40
 8005080:	438a      	bics	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	2120      	movs	r1, #32
 8005096:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	2b01      	cmp	r3, #1
 800509e:	d118      	bne.n	80050d2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a0:	f3ef 8310 	mrs	r3, PRIMASK
 80050a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050aa:	2301      	movs	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f383 8810 	msr	PRIMASK, r3
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2110      	movs	r1, #16
 80050c2:	438a      	bics	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	2200      	movs	r2, #0
 80050d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d108      	bne.n	80050f2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e2:	2258      	movs	r2, #88	; 0x58
 80050e4:	5a9a      	ldrh	r2, [r3, r2]
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7ff f9ca 	bl	8004484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050f0:	e003      	b.n	80050fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff f93d 	bl	8004374 <HAL_UART_RxCpltCallback>
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b014      	add	sp, #80	; 0x50
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	fffffeff 	.word	0xfffffeff

08005108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10a      	bne.n	800513a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2258      	movs	r2, #88	; 0x58
 8005128:	5a9b      	ldrh	r3, [r3, r2]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	0011      	movs	r1, r2
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff f9a6 	bl	8004484 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005138:	e003      	b.n	8005142 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0018      	movs	r0, r3
 800513e:	f7ff f991 	bl	8004464 <HAL_UART_RxHalfCpltCallback>
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b004      	add	sp, #16
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800515c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	589b      	ldr	r3, [r3, r2]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	4013      	ands	r3, r2
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d10a      	bne.n	800518a <UART_DMAError+0x40>
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b21      	cmp	r3, #33	; 0x21
 8005178:	d107      	bne.n	800518a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2252      	movs	r2, #82	; 0x52
 800517e:	2100      	movs	r1, #0
 8005180:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff fea1 	bl	8004ecc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2240      	movs	r2, #64	; 0x40
 8005192:	4013      	ands	r3, r2
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d10a      	bne.n	80051ae <UART_DMAError+0x64>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b22      	cmp	r3, #34	; 0x22
 800519c:	d107      	bne.n	80051ae <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	225a      	movs	r2, #90	; 0x5a
 80051a2:	2100      	movs	r1, #0
 80051a4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7ff feb3 	bl	8004f14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2284      	movs	r2, #132	; 0x84
 80051b2:	589b      	ldr	r3, [r3, r2]
 80051b4:	2210      	movs	r2, #16
 80051b6:	431a      	orrs	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2184      	movs	r1, #132	; 0x84
 80051bc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff f957 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b006      	add	sp, #24
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	225a      	movs	r2, #90	; 0x5a
 80051e0:	2100      	movs	r1, #0
 80051e2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2252      	movs	r2, #82	; 0x52
 80051e8:	2100      	movs	r1, #0
 80051ea:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7ff f940 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b004      	add	sp, #16
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005208:	2b21      	cmp	r3, #33	; 0x21
 800520a:	d14d      	bne.n	80052a8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2252      	movs	r2, #82	; 0x52
 8005210:	5a9b      	ldrh	r3, [r3, r2]
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d132      	bne.n	800527e <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005218:	f3ef 8310 	mrs	r3, PRIMASK
 800521c:	60bb      	str	r3, [r7, #8]
  return(result);
 800521e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	2301      	movs	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	438a      	bics	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f383 8810 	msr	PRIMASK, r3
}
 8005248:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524a:	f3ef 8310 	mrs	r3, PRIMASK
 800524e:	617b      	str	r3, [r7, #20]
  return(result);
 8005250:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	2301      	movs	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2140      	movs	r1, #64	; 0x40
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800527c:	e014      	b.n	80052a8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	b292      	uxth	r2, r2
 800528a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2252      	movs	r2, #82	; 0x52
 800529a:	5a9b      	ldrh	r3, [r3, r2]
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b299      	uxth	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2252      	movs	r2, #82	; 0x52
 80052a6:	5299      	strh	r1, [r3, r2]
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b00a      	add	sp, #40	; 0x28
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052bc:	2b21      	cmp	r3, #33	; 0x21
 80052be:	d151      	bne.n	8005364 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2252      	movs	r2, #82	; 0x52
 80052c4:	5a9b      	ldrh	r3, [r3, r2]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d132      	bne.n	8005332 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052cc:	f3ef 8310 	mrs	r3, PRIMASK
 80052d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80052d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d6:	2301      	movs	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f383 8810 	msr	PRIMASK, r3
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2180      	movs	r1, #128	; 0x80
 80052ee:	438a      	bics	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005302:	61bb      	str	r3, [r7, #24]
  return(result);
 8005304:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
 8005308:	2301      	movs	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f383 8810 	msr	PRIMASK, r3
}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005330:	e018      	b.n	8005364 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	05d2      	lsls	r2, r2, #23
 8005342:	0dd2      	lsrs	r2, r2, #23
 8005344:	b292      	uxth	r2, r2
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2252      	movs	r2, #82	; 0x52
 8005356:	5a9b      	ldrh	r3, [r3, r2]
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b299      	uxth	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2252      	movs	r2, #82	; 0x52
 8005362:	5299      	strh	r1, [r3, r2]
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b00c      	add	sp, #48	; 0x30
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005374:	f3ef 8310 	mrs	r3, PRIMASK
 8005378:	60bb      	str	r3, [r7, #8]
  return(result);
 800537a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	2301      	movs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	438a      	bics	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fe ffd5 	bl	8004364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b006      	add	sp, #24
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b094      	sub	sp, #80	; 0x50
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053cc:	204e      	movs	r0, #78	; 0x4e
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	215c      	movs	r1, #92	; 0x5c
 80053d4:	5a52      	ldrh	r2, [r2, r1]
 80053d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	589b      	ldr	r3, [r3, r2]
 80053de:	2b22      	cmp	r3, #34	; 0x22
 80053e0:	d000      	beq.n	80053e4 <UART_RxISR_8BIT+0x20>
 80053e2:	e0ba      	b.n	800555a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	214c      	movs	r1, #76	; 0x4c
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80053ee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b2d9      	uxtb	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	400a      	ands	r2, r1
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	225a      	movs	r2, #90	; 0x5a
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b299      	uxth	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	225a      	movs	r2, #90	; 0x5a
 8005420:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	225a      	movs	r2, #90	; 0x5a
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <UART_RxISR_8BIT+0x6c>
 800542e:	e09c      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005430:	f3ef 8310 	mrs	r3, PRIMASK
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
 800543a:	2301      	movs	r3, #1
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	f383 8810 	msr	PRIMASK, r3
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4948      	ldr	r1, [pc, #288]	; (8005574 <UART_RxISR_8BIT+0x1b0>)
 8005452:	400a      	ands	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	f383 8810 	msr	PRIMASK, r3
}
 8005460:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8310 	mrs	r3, PRIMASK
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546a:	647b      	str	r3, [r7, #68]	; 0x44
 800546c:	2301      	movs	r3, #1
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	f383 8810 	msr	PRIMASK, r3
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2101      	movs	r1, #1
 8005484:	438a      	bics	r2, r1
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	2120      	movs	r1, #32
 800549a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d018      	beq.n	80054e8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
 80054c0:	2301      	movs	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f383 8810 	msr	PRIMASK, r3
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4928      	ldr	r1, [pc, #160]	; (8005578 <UART_RxISR_8BIT+0x1b4>)
 80054d8:	400a      	ands	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	f383 8810 	msr	PRIMASK, r3
}
 80054e6:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d12f      	bne.n	8005550 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f6:	f3ef 8310 	mrs	r3, PRIMASK
 80054fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005500:	2301      	movs	r3, #1
 8005502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2110      	movs	r1, #16
 8005518:	438a      	bics	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2210      	movs	r2, #16
 8005530:	4013      	ands	r3, r2
 8005532:	2b10      	cmp	r3, #16
 8005534:	d103      	bne.n	800553e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2258      	movs	r2, #88	; 0x58
 8005542:	5a9a      	ldrh	r2, [r3, r2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0011      	movs	r1, r2
 8005548:	0018      	movs	r0, r3
 800554a:	f7fe ff9b 	bl	8004484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554e:	e00c      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	0018      	movs	r0, r3
 8005554:	f7fe ff0e 	bl	8004374 <HAL_UART_RxCpltCallback>
}
 8005558:	e007      	b.n	800556a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2108      	movs	r1, #8
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b014      	add	sp, #80	; 0x50
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	fffffedf 	.word	0xfffffedf
 8005578:	fbffffff 	.word	0xfbffffff

0800557c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b094      	sub	sp, #80	; 0x50
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005584:	204e      	movs	r0, #78	; 0x4e
 8005586:	183b      	adds	r3, r7, r0
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	215c      	movs	r1, #92	; 0x5c
 800558c:	5a52      	ldrh	r2, [r2, r1]
 800558e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	589b      	ldr	r3, [r3, r2]
 8005596:	2b22      	cmp	r3, #34	; 0x22
 8005598:	d000      	beq.n	800559c <UART_RxISR_16BIT+0x20>
 800559a:	e0ba      	b.n	8005712 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	214c      	movs	r1, #76	; 0x4c
 80055a2:	187b      	adds	r3, r7, r1
 80055a4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80055a6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ac:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	183a      	adds	r2, r7, r0
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	8812      	ldrh	r2, [r2, #0]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	225a      	movs	r2, #90	; 0x5a
 80055cc:	5a9b      	ldrh	r3, [r3, r2]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b299      	uxth	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	225a      	movs	r2, #90	; 0x5a
 80055d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	225a      	movs	r2, #90	; 0x5a
 80055de:	5a9b      	ldrh	r3, [r3, r2]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d000      	beq.n	80055e8 <UART_RxISR_16BIT+0x6c>
 80055e6:	e09c      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ec:	623b      	str	r3, [r7, #32]
  return(result);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
 80055f2:	2301      	movs	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f383 8810 	msr	PRIMASK, r3
}
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4948      	ldr	r1, [pc, #288]	; (800572c <UART_RxISR_16BIT+0x1b0>)
 800560a:	400a      	ands	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	f383 8810 	msr	PRIMASK, r3
}
 8005618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
 8005624:	2301      	movs	r3, #1
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f383 8810 	msr	PRIMASK, r3
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2101      	movs	r1, #1
 800563c:	438a      	bics	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	2120      	movs	r1, #32
 8005652:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	4013      	ands	r3, r2
 800566c:	d018      	beq.n	80056a0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566e:	f3ef 8310 	mrs	r3, PRIMASK
 8005672:	617b      	str	r3, [r7, #20]
  return(result);
 8005674:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	2301      	movs	r3, #1
 800567a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f383 8810 	msr	PRIMASK, r3
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4928      	ldr	r1, [pc, #160]	; (8005730 <UART_RxISR_16BIT+0x1b4>)
 8005690:	400a      	ands	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f383 8810 	msr	PRIMASK, r3
}
 800569e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12f      	bne.n	8005708 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ae:	f3ef 8310 	mrs	r3, PRIMASK
 80056b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2110      	movs	r1, #16
 80056d0:	438a      	bics	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	2210      	movs	r2, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d103      	bne.n	80056f6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2210      	movs	r2, #16
 80056f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2258      	movs	r2, #88	; 0x58
 80056fa:	5a9a      	ldrh	r2, [r3, r2]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0011      	movs	r1, r2
 8005700:	0018      	movs	r0, r3
 8005702:	f7fe febf 	bl	8004484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005706:	e00c      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f7fe fe32 	bl	8004374 <HAL_UART_RxCpltCallback>
}
 8005710:	e007      	b.n	8005722 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2108      	movs	r1, #8
 800571e:	430a      	orrs	r2, r1
 8005720:	619a      	str	r2, [r3, #24]
}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b014      	add	sp, #80	; 0x50
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	fffffedf 	.word	0xfffffedf
 8005730:	fbffffff 	.word	0xfbffffff

08005734 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e05b      	b.n	8005804 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2278      	movs	r2, #120	; 0x78
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	0018      	movs	r0, r3
 8005760:	f7fb fb54 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2224      	movs	r2, #36	; 0x24
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	0018      	movs	r0, r3
 800577e:	f7fe fe8d 	bl	800449c <UART_SetConfig>
 8005782:	0003      	movs	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e03b      	b.n	8005804 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f7ff f868 	bl	800486c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	01c9      	lsls	r1, r1, #7
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_RS485Ex_Init+0xd8>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	055b      	lsls	r3, r3, #21
 80057c8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <HAL_RS485Ex_Init+0xdc>)
 80057dc:	4013      	ands	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	430a      	orrs	r2, r1
 80057f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7ff f8e9 	bl	80049d4 <UART_CheckIdleState>
 8005802:	0003      	movs	r3, r0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b006      	add	sp, #24
 800580a:	bd80      	pop	{r7, pc}
 800580c:	ffff7fff 	.word	0xffff7fff
 8005810:	fc00ffff 	.word	0xfc00ffff

08005814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}

08005824 <Module_Init>:
//}

/* --- EMS module initialization. 
*/
void Module_Init(void)
{
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b083      	sub	sp, #12
 8005828:	af02      	add	r7, sp, #8

	/* System Clock Configuration */
	SystemClock_Config();
 800582a:	f7fa fde5 	bl	80003f8 <SystemClock_Config>

	/* Peripherals Init */
	MX_GPIO_Init();
 800582e:	f7fa fd79 	bl	8000324 <MX_GPIO_Init>
  MX_DMA_Init();
 8005832:	f7fa fd37 	bl	80002a4 <MX_DMA_Init>
  MX_CRC_Init();
 8005836:	f7fa fcf3 	bl	8000220 <MX_CRC_Init>
	
//  MX_TIM2_Init();
//	HAL_TIM_Base_Start(&htim2);
	
	/* Array ports */
	MX_USART1_UART_Init();
 800583a:	f7fb f9ad 	bl	8000b98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800583e:	f7fb f9e1 	bl	8000c04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005842:	f7fb fa13 	bl	8000c6c <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 8005846:	f7fb fa45 	bl	8000cd4 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800584a:	f7fb fa77 	bl	8000d3c <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800584e:	f7fb faa9 	bl	8000da4 <MX_USART6_UART_Init>
//	/* RS485 port */
//	RS485_DE_RE_Init();
//	RS485_RECEIVER_EN();
	
	/* Definition and creation of software timers */
	zTimer = xTimerCreate( "Measuremet_Timer", pdMS_TO_TICKS(1000), pdTRUE, ( void * ) TIMERID_RTC_TIMER, RTC_HandleTimer );	
 8005852:	23fa      	movs	r3, #250	; 0xfa
 8005854:	0099      	lsls	r1, r3, #2
 8005856:	481c      	ldr	r0, [pc, #112]	; (80058c8 <Module_Init+0xa4>)
 8005858:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <Module_Init+0xa8>)
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	23fe      	movs	r3, #254	; 0xfe
 800585e:	2201      	movs	r2, #1
 8005860:	f002 f86e 	bl	8007940 <xTimerCreate>
 8005864:	0002      	movs	r2, r0
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <Module_Init+0xac>)
 8005868:	601a      	str	r2, [r3, #0]
	xTimerStart( zTimer, portMAX_DELAY );
 800586a:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <Module_Init+0xac>)
 800586c:	681c      	ldr	r4, [r3, #0]
 800586e:	f001 fc09 	bl	8007084 <xTaskGetTickCount>
 8005872:	0002      	movs	r2, r0
 8005874:	2301      	movs	r3, #1
 8005876:	425b      	negs	r3, r3
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2300      	movs	r3, #0
 800587c:	2101      	movs	r1, #1
 800587e:	0020      	movs	r0, r4
 8005880:	f002 f8a6 	bl	80079d0 <xTimerGenericCommand>

	/* Initializing DMA recieve */ 
	HAL_UART_Receive_DMA(P1uart, &RcvMessage[0][0], RcvMessageMaxSize);
 8005884:	4913      	ldr	r1, [pc, #76]	; (80058d4 <Module_Init+0xb0>)
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <Module_Init+0xb4>)
 8005888:	2218      	movs	r2, #24
 800588a:	0018      	movs	r0, r3
 800588c:	f7fe fa33 	bl	8003cf6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P2uart, &RcvMessage[1][0], RcvMessageMaxSize);
 8005890:	4912      	ldr	r1, [pc, #72]	; (80058dc <Module_Init+0xb8>)
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <Module_Init+0xbc>)
 8005894:	2218      	movs	r2, #24
 8005896:	0018      	movs	r0, r3
 8005898:	f7fe fa2d 	bl	8003cf6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P3uart, &RcvMessage[2][0], RcvMessageMaxSize);
 800589c:	4911      	ldr	r1, [pc, #68]	; (80058e4 <Module_Init+0xc0>)
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <Module_Init+0xc4>)
 80058a0:	2218      	movs	r2, #24
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fe fa27 	bl	8003cf6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P4uart, &RcvMessage[3][0], RcvMessageMaxSize);
 80058a8:	4910      	ldr	r1, [pc, #64]	; (80058ec <Module_Init+0xc8>)
 80058aa:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <Module_Init+0xcc>)
 80058ac:	2218      	movs	r2, #24
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fe fa21 	bl	8003cf6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(P5uart, &RcvMessage[4][0], RcvMessageMaxSize);
 80058b4:	490f      	ldr	r1, [pc, #60]	; (80058f4 <Module_Init+0xd0>)
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <Module_Init+0xd4>)
 80058b8:	2218      	movs	r2, #24
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7fe fa1b 	bl	8003cf6 <HAL_UART_Receive_DMA>


}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b001      	add	sp, #4
 80058c6:	bd90      	pop	{r4, r7, pc}
 80058c8:	0800c4ec 	.word	0x0800c4ec
 80058cc:	08005975 	.word	0x08005975
 80058d0:	200005d0 	.word	0x200005d0
 80058d4:	200006c4 	.word	0x200006c4
 80058d8:	20000388 	.word	0x20000388
 80058dc:	200006dc 	.word	0x200006dc
 80058e0:	20000278 	.word	0x20000278
 80058e4:	200006f4 	.word	0x200006f4
 80058e8:	20000498 	.word	0x20000498
 80058ec:	2000070c 	.word	0x2000070c
 80058f0:	20000300 	.word	0x20000300
 80058f4:	20000724 	.word	0x20000724
 80058f8:	20000410 	.word	0x20000410

080058fc <GetUART>:
/*-----------------------------------------------------------*/

/* --- Get the UART handle for a given port. 
*/
UART_HandleTypeDef* GetUART(uint8_t Port)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	0002      	movs	r2, r0
 8005904:	1dfb      	adds	r3, r7, #7
 8005906:	701a      	strb	r2, [r3, #0]
	if (1 == Port)
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <GetUART+0x18>
			return &huart4; 
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <GetUART+0x60>)
 8005912:	e01e      	b.n	8005952 <GetUART+0x56>
	else if (2 == Port)
 8005914:	1dfb      	adds	r3, r7, #7
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d101      	bne.n	8005920 <GetUART+0x24>
			return &huart2;
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <GetUART+0x64>)
 800591e:	e018      	b.n	8005952 <GetUART+0x56>
	else if (3 == Port)
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d101      	bne.n	800592c <GetUART+0x30>
			return &huart6; 
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <GetUART+0x68>)
 800592a:	e012      	b.n	8005952 <GetUART+0x56>
	else if (4 == Port)
 800592c:	1dfb      	adds	r3, r7, #7
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d101      	bne.n	8005938 <GetUART+0x3c>
			return &huart3;
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <GetUART+0x6c>)
 8005936:	e00c      	b.n	8005952 <GetUART+0x56>
	else if (5 == Port)
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b05      	cmp	r3, #5
 800593e:	d101      	bne.n	8005944 <GetUART+0x48>
			return &huart5;
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <GetUART+0x70>)
 8005942:	e006      	b.n	8005952 <GetUART+0x56>
	else if (6 == Port)
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d101      	bne.n	8005950 <GetUART+0x54>
			return &huart1;
 800594c:	4b08      	ldr	r3, [pc, #32]	; (8005970 <GetUART+0x74>)
 800594e:	e000      	b.n	8005952 <GetUART+0x56>
		
	return NULL;
 8005950:	2300      	movs	r3, #0
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b002      	add	sp, #8
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	20000388 	.word	0x20000388
 8005960:	20000278 	.word	0x20000278
 8005964:	20000498 	.word	0x20000498
 8005968:	20000300 	.word	0x20000300
 800596c:	20000410 	.word	0x20000410
 8005970:	200001f0 	.word	0x200001f0

08005974 <RTC_HandleTimer>:
   ----------------------------------------------------------------------- */

/* --- Sample time for meter measurement software timer
*/
static void RTC_HandleTimer(TimerHandle_t zTimer)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	uint32_t Timer_ID = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
	
	Timer_ID = ( uint32_t ) pvTimerGetTimerID( zTimer );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0018      	movs	r0, r3
 8005984:	f002 fa94 	bl	8007eb0 <pvTimerGetTimerID>
 8005988:	0003      	movs	r3, r0
 800598a:	60fb      	str	r3, [r7, #12]
  if (TIMERID_RTC_TIMER == Timer_ID)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2bfe      	cmp	r3, #254	; 0xfe
 8005990:	d11f      	bne.n	80059d2 <RTC_HandleTimer+0x5e>
  {
		Second++;
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <RTC_HandleTimer+0x68>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	3301      	adds	r3, #1
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4b10      	ldr	r3, [pc, #64]	; (80059dc <RTC_HandleTimer+0x68>)
 800599c:	701a      	strb	r2, [r3, #0]
		if(Second==60){
 800599e:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <RTC_HandleTimer+0x68>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b3c      	cmp	r3, #60	; 0x3c
 80059a4:	d108      	bne.n	80059b8 <RTC_HandleTimer+0x44>
			Second=0;
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <RTC_HandleTimer+0x68>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
			Minute++;
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <RTC_HandleTimer+0x6c>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <RTC_HandleTimer+0x6c>)
 80059b6:	701a      	strb	r2, [r3, #0]
		}
		
		if(Minute==60){
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <RTC_HandleTimer+0x6c>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b3c      	cmp	r3, #60	; 0x3c
 80059be:	d108      	bne.n	80059d2 <RTC_HandleTimer+0x5e>
		Minute=0;
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <RTC_HandleTimer+0x6c>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
		Hour++;
 80059c6:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <RTC_HandleTimer+0x70>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <RTC_HandleTimer+0x70>)
 80059d0:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b004      	add	sp, #16
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	200005d4 	.word	0x200005d4
 80059e0:	200005d5 	.word	0x200005d5
 80059e4:	200005d6 	.word	0x200005d6

080059e8 <SendMessage>:
/*-----------------------------------------------------------*/

/* --- send data packet from port
*/
Module_Status SendMessage(uint16_t Port, uint16_t mCode, uint8_t dst, uint8_t *pData, uint16_t size)
{
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	b093      	sub	sp, #76	; 0x4c
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	0004      	movs	r4, r0
 80059f0:	0008      	movs	r0, r1
 80059f2:	0011      	movs	r1, r2
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	250e      	movs	r5, #14
 80059f8:	197b      	adds	r3, r7, r5
 80059fa:	1c22      	adds	r2, r4, #0
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	260c      	movs	r6, #12
 8005a00:	19bb      	adds	r3, r7, r6
 8005a02:	1c02      	adds	r2, r0, #0
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	230b      	movs	r3, #11
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	1c0a      	adds	r2, r1, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	UART_HandleTypeDef* handle;
	uint16_t length =0;
 8005a0e:	213e      	movs	r1, #62	; 0x3e
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	2200      	movs	r2, #0
 8005a14:	801a      	strh	r2, [r3, #0]
	uint8_t crc8=0;
 8005a16:	2046      	movs	r0, #70	; 0x46
 8005a18:	183b      	adds	r3, r7, r0
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
	uint8_t MessagePacket[45]={0};
 8005a1e:	2410      	movs	r4, #16
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	3304      	adds	r3, #4
 8005a28:	2229      	movs	r2, #41	; 0x29
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f006 fc6c 	bl	800c30a <memset>
	
	/* check port */
	if (0<Port && 6>Port)
 8005a32:	197b      	adds	r3, r7, r5
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d100      	bne.n	8005a3c <SendMessage+0x54>
 8005a3a:	e0cf      	b.n	8005bdc <SendMessage+0x1f4>
 8005a3c:	197b      	adds	r3, r7, r5
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d900      	bls.n	8005a46 <SendMessage+0x5e>
 8005a44:	e0ca      	b.n	8005bdc <SendMessage+0x1f4>
	{
		/* get the handle of the port to transmit from */
		handle=GetUART(Port);
 8005a46:	197b      	adds	r3, r7, r5
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff ff55 	bl	80058fc <GetUART>
 8005a52:	0003      	movs	r3, r0
 8005a54:	643b      	str	r3, [r7, #64]	; 0x40
	
		/* Configuring packet's header */
		/* packet delimiter */
		MessagePacket[0]='H';
 8005a56:	0020      	movs	r0, r4
 8005a58:	183b      	adds	r3, r7, r0
 8005a5a:	2248      	movs	r2, #72	; 0x48
 8005a5c:	701a      	strb	r2, [r3, #0]
		MessagePacket[1]='Z';
 8005a5e:	183b      	adds	r3, r7, r0
 8005a60:	225a      	movs	r2, #90	; 0x5a
 8005a62:	705a      	strb	r2, [r3, #1]
		
		if (CODE_EMS_PACKET==mCode)
 8005a64:	19bb      	adds	r3, r7, r6
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	2b57      	cmp	r3, #87	; 0x57
 8005a6a:	d12e      	bne.n	8005aca <SendMessage+0xe2>
		{
			/* Calculating packet length */
			length=size+9;                          /*not including H & Z delimiters, the length bytes and the CRC byte.*/
 8005a6c:	2558      	movs	r5, #88	; 0x58
 8005a6e:	2308      	movs	r3, #8
 8005a70:	18ea      	adds	r2, r5, r3
 8005a72:	19d3      	adds	r3, r2, r7
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	3309      	adds	r3, #9
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	213e      	movs	r1, #62	; 0x3e
 8005a7c:	187b      	adds	r3, r7, r1
 8005a7e:	801a      	strh	r2, [r3, #0]
			memcpy(&MessagePacket[2], &length, 2);
 8005a80:	1879      	adds	r1, r7, r1
 8005a82:	0004      	movs	r4, r0
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	3302      	adds	r3, #2
 8005a88:	2202      	movs	r2, #2
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f006 fc34 	bl	800c2f8 <memcpy>
			/* destination module */
			MessagePacket[4]=dst;
 8005a90:	0021      	movs	r1, r4
 8005a92:	187b      	adds	r3, r7, r1
 8005a94:	220b      	movs	r2, #11
 8005a96:	18ba      	adds	r2, r7, r2
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	711a      	strb	r2, [r3, #4]
			/* source module */
			MessagePacket[5]=MyID;
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	715a      	strb	r2, [r3, #5]
			/* options byte */
			MessagePacket[6]=Options;
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	719a      	strb	r2, [r3, #6]
			/* message code */
			MessagePacket[7]=mCode;
 8005aa8:	19bb      	adds	r3, r7, r6
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	0008      	movs	r0, r1
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	71da      	strb	r2, [r3, #7]
		
			/* Copying data payload */
			memcpy(&MessagePacket[8],pData,size);
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	18eb      	adds	r3, r5, r3
 8005ab8:	19db      	adds	r3, r3, r7
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	183b      	adds	r3, r7, r0
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f006 fc18 	bl	800c2f8 <memcpy>
 8005ac8:	e02a      	b.n	8005b20 <SendMessage+0x138>
		}
		else
		{
			/* Calculating packet length */
			length=size+4;                          /*not including H & Z delimiters, the length bytes and the CRC byte.*/
 8005aca:	2458      	movs	r4, #88	; 0x58
 8005acc:	2508      	movs	r5, #8
 8005ace:	1963      	adds	r3, r4, r5
 8005ad0:	19db      	adds	r3, r3, r7
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	213e      	movs	r1, #62	; 0x3e
 8005ada:	187b      	adds	r3, r7, r1
 8005adc:	801a      	strh	r2, [r3, #0]
			MessagePacket[2]=length;
 8005ade:	187b      	adds	r3, r7, r1
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	2110      	movs	r1, #16
 8005ae6:	187b      	adds	r3, r7, r1
 8005ae8:	709a      	strb	r2, [r3, #2]
			/* destination module */
		  MessagePacket[3]=dst;
 8005aea:	187b      	adds	r3, r7, r1
 8005aec:	220b      	movs	r2, #11
 8005aee:	18ba      	adds	r2, r7, r2
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	70da      	strb	r2, [r3, #3]
			/* source module */
		  MessagePacket[4]=MyID;
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	2201      	movs	r2, #1
 8005af8:	711a      	strb	r2, [r3, #4]
		  /* options byte */
		  MessagePacket[5]=Options;
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	2200      	movs	r2, #0
 8005afe:	715a      	strb	r2, [r3, #5]
		  /* message code */
		  MessagePacket[6]=mCode;
 8005b00:	230c      	movs	r3, #12
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	0008      	movs	r0, r1
 8005b0a:	187b      	adds	r3, r7, r1
 8005b0c:	719a      	strb	r2, [r3, #6]
			/* Copying data payload */
			memcpy(&MessagePacket[7],pData,size);
 8005b0e:	1963      	adds	r3, r4, r5
 8005b10:	19db      	adds	r3, r3, r7
 8005b12:	881a      	ldrh	r2, [r3, #0]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	183b      	adds	r3, r7, r0
 8005b18:	3307      	adds	r3, #7
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f006 fbec 	bl	800c2f8 <memcpy>
		}
		
		/* Calculating CRC8 for the packet */
		crc8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&MessagePacket, (length+3)/4);
 8005b20:	233e      	movs	r3, #62	; 0x3e
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	3303      	adds	r3, #3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da00      	bge.n	8005b2e <SendMessage+0x146>
 8005b2c:	3303      	adds	r3, #3
 8005b2e:	109b      	asrs	r3, r3, #2
 8005b30:	001a      	movs	r2, r3
 8005b32:	2310      	movs	r3, #16
 8005b34:	18f9      	adds	r1, r7, r3
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <SendMessage+0x20c>)
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7fb fe32 	bl	80017a2 <HAL_CRC_Calculate>
 8005b3e:	0002      	movs	r2, r0
 8005b40:	2346      	movs	r3, #70	; 0x46
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	701a      	strb	r2, [r3, #0]
		if ((length-1)%4 !=0){
 8005b46:	213e      	movs	r1, #62	; 0x3e
 8005b48:	187b      	adds	r3, r7, r1
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	001a      	movs	r2, r3
 8005b50:	2303      	movs	r3, #3
 8005b52:	4013      	ands	r3, r2
 8005b54:	d013      	beq.n	8005b7e <SendMessage+0x196>
			crc8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&MessagePacket[((length+3)/4)*4], 1);
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da00      	bge.n	8005b62 <SendMessage+0x17a>
 8005b60:	3303      	adds	r3, #3
 8005b62:	109b      	asrs	r3, r3, #2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	2210      	movs	r2, #16
 8005b68:	18ba      	adds	r2, r7, r2
 8005b6a:	18d1      	adds	r1, r2, r3
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <SendMessage+0x20c>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7fb fdcf 	bl	8001714 <HAL_CRC_Accumulate>
 8005b76:	0002      	movs	r2, r0
 8005b78:	2346      	movs	r3, #70	; 0x46
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	701a      	strb	r2, [r3, #0]
		}
		MessagePacket[length+3]=crc8;
 8005b7e:	203e      	movs	r0, #62	; 0x3e
 8005b80:	183b      	adds	r3, r7, r0
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	3303      	adds	r3, #3
 8005b86:	2410      	movs	r4, #16
 8005b88:	193a      	adds	r2, r7, r4
 8005b8a:	2146      	movs	r1, #70	; 0x46
 8005b8c:	1879      	adds	r1, r7, r1
 8005b8e:	7809      	ldrb	r1, [r1, #0]
 8005b90:	54d1      	strb	r1, [r2, r3]

		/* Send data packet via DMA */
		HAL_UART_Transmit(handle, MessagePacket, length+4 , 100);    /* in case length doesn't include delimeter and CRC should be added to 5*/
 8005b92:	183b      	adds	r3, r7, r0
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	3304      	adds	r3, #4
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	1939      	adds	r1, r7, r4
 8005b9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005b9e:	2364      	movs	r3, #100	; 0x64
 8005ba0:	f7fd ff42 	bl	8003a28 <HAL_UART_Transmit>
	
		/* wait to finish transmitting packet */
		//HAL_Delay(100);
    
		/* Reinitializing DMA */
		HAL_UART_DeInit(handle);
 8005ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7fd ff00 	bl	80039ac <HAL_UART_DeInit>
		HAL_UART_Init(handle);
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f7fd fea8 	bl	8003904 <HAL_UART_Init>
		HAL_UART_Receive_DMA(handle, &RcvMessage[Port-1][0], RcvMessageMaxSize);
 8005bb4:	230e      	movs	r3, #14
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	0013      	movs	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	189b      	adds	r3, r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4a0c      	ldr	r2, [pc, #48]	; (8005bf8 <SendMessage+0x210>)
 8005bc6:	1899      	adds	r1, r3, r2
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	2218      	movs	r2, #24
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7fe f892 	bl	8003cf6 <HAL_UART_Receive_DMA>
	
		Status = MBslave_OK;
 8005bd2:	2347      	movs	r3, #71	; 0x47
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <SendMessage+0x1fc>
	}
	else
		Status = MBslave_ERR_WrongParams;
 8005bdc:	2347      	movs	r3, #71	; 0x47
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	2202      	movs	r2, #2
 8005be2:	701a      	strb	r2, [r3, #0]
	
	return Status;
 8005be4:	2347      	movs	r3, #71	; 0x47
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	781b      	ldrb	r3, [r3, #0]
}
 8005bea:	0018      	movs	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b013      	add	sp, #76	; 0x4c
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	2000008c 	.word	0x2000008c
 8005bf8:	200006c4 	.word	0x200006c4

08005bfc <MessagingParser>:
/*-----------------------------------------------------------*/

/* --- send data packet from port
*/
Module_Status MessagingParser(uint8_t Port)
{
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfe:	b095      	sub	sp, #84	; 0x54
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	0002      	movs	r2, r0
 8005c04:	1dfb      	adds	r3, r7, #7
 8005c06:	701a      	strb	r2, [r3, #0]
	Module_Status Status;
	UART_HandleTypeDef* Handle;
	uint8_t packetLength=0;
 8005c08:	234e      	movs	r3, #78	; 0x4e
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
	uint8_t CRC8=0;
 8005c10:	244d      	movs	r4, #77	; 0x4d
 8005c12:	193b      	adds	r3, r7, r4
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
	uint16_t code=0;
 8005c18:	264a      	movs	r6, #74	; 0x4a
 8005c1a:	19bb      	adds	r3, r7, r6
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	801a      	strh	r2, [r3, #0]
	uint8_t data[36]={0};
 8005c20:	2320      	movs	r3, #32
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f006 fb6b 	bl	800c30a <memset>
	uint8_t CRC_Buffer[RcvMessageMaxSize]={0};
 8005c34:	2508      	movs	r5, #8
 8005c36:	197b      	adds	r3, r7, r5
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2214      	movs	r2, #20
 8005c40:	2100      	movs	r1, #0
 8005c42:	0018      	movs	r0, r3
 8005c44:	f006 fb61 	bl	800c30a <memset>
	
	Handle=GetUART(Port);
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7ff fe55 	bl	80058fc <GetUART>
 8005c52:	0003      	movs	r3, r0
 8005c54:	647b      	str	r3, [r7, #68]	; 0x44
	
	/* Parsing message */
	if (RcvMessage[Port-1][0]=='H' && RcvMessage[Port-1][1]=='Z')
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	4959      	ldr	r1, [pc, #356]	; (8005dc4 <MessagingParser+0x1c8>)
 8005c5e:	0013      	movs	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	5c5b      	ldrb	r3, [r3, r1]
 8005c68:	2b48      	cmp	r3, #72	; 0x48
 8005c6a:	d000      	beq.n	8005c6e <MessagingParser+0x72>
 8005c6c:	e07a      	b.n	8005d64 <MessagingParser+0x168>
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	4953      	ldr	r1, [pc, #332]	; (8005dc4 <MessagingParser+0x1c8>)
 8005c76:	0013      	movs	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	18cb      	adds	r3, r1, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b5a      	cmp	r3, #90	; 0x5a
 8005c86:	d16d      	bne.n	8005d64 <MessagingParser+0x168>
	{
		/* Get packet length */
		packetLength=RcvMessage[Port-1][2];
 8005c88:	1dfb      	adds	r3, r7, #7
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	214e      	movs	r1, #78	; 0x4e
 8005c90:	1879      	adds	r1, r7, r1
 8005c92:	484c      	ldr	r0, [pc, #304]	; (8005dc4 <MessagingParser+0x1c8>)
 8005c94:	0013      	movs	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	189b      	adds	r3, r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	18c3      	adds	r3, r0, r3
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	700b      	strb	r3, [r1, #0]
		memcpy(CRC_Buffer, &RcvMessage[Port-1][0], RcvMessageMaxSize-1);
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	0013      	movs	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	189b      	adds	r3, r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4a44      	ldr	r2, [pc, #272]	; (8005dc4 <MessagingParser+0x1c8>)
 8005cb4:	1899      	adds	r1, r3, r2
 8005cb6:	197b      	adds	r3, r7, r5
 8005cb8:	2217      	movs	r2, #23
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f006 fb1c 	bl	800c2f8 <memcpy>
		
		/* Calculating CRC8 for the packet */
		CRC8 = HAL_CRC_Calculate(&hcrc, (uint32_t *)&CRC_Buffer, (RcvMessageMaxSize-1)/4);
 8005cc0:	1979      	adds	r1, r7, r5
 8005cc2:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <MessagingParser+0x1cc>)
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fb fd6b 	bl	80017a2 <HAL_CRC_Calculate>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	193b      	adds	r3, r7, r4
 8005cd0:	701a      	strb	r2, [r3, #0]
		if ((RcvMessageMaxSize-1)%4 !=0){
			CRC8 = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&CRC_Buffer[((RcvMessageMaxSize-1)/4)*4], 1);
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	3114      	adds	r1, #20
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <MessagingParser+0x1cc>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fb fd19 	bl	8001714 <HAL_CRC_Accumulate>
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	193b      	adds	r3, r7, r4
 8005ce6:	701a      	strb	r2, [r3, #0]
		}
		
		/* Check CRC value */
		if (CRC8 == RcvMessage[Port-1][RcvMessageMaxSize-1])
 8005ce8:	1dfb      	adds	r3, r7, #7
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	4935      	ldr	r1, [pc, #212]	; (8005dc4 <MessagingParser+0x1c8>)
 8005cf0:	0013      	movs	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	189b      	adds	r3, r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	18cb      	adds	r3, r1, r3
 8005cfa:	3317      	adds	r3, #23
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	193a      	adds	r2, r7, r4
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d129      	bne.n	8005d5a <MessagingParser+0x15e>
		{
			/* message code */
			code=RcvMessage[Port-1][6];  //( (uint16_t) RcvMessage[Port-1][6] << 8 )
 8005d06:	1dfb      	adds	r3, r7, #7
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	1e5a      	subs	r2, r3, #1
 8005d0c:	492d      	ldr	r1, [pc, #180]	; (8005dc4 <MessagingParser+0x1c8>)
 8005d0e:	0013      	movs	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	18cb      	adds	r3, r1, r3
 8005d18:	3306      	adds	r3, #6
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	19bb      	adds	r3, r7, r6
 8005d1e:	801a      	strh	r2, [r3, #0]
			
			memcpy(data,&RcvMessage[Port-1][7],RcvMessageMaxSize-8);
 8005d20:	1dfb      	adds	r3, r7, #7
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	1e5a      	subs	r2, r3, #1
 8005d26:	0013      	movs	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1dda      	adds	r2, r3, #7
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <MessagingParser+0x1c8>)
 8005d32:	18d1      	adds	r1, r2, r3
 8005d34:	2420      	movs	r4, #32
 8005d36:	193b      	adds	r3, r7, r4
 8005d38:	2210      	movs	r2, #16
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f006 fadc 	bl	800c2f8 <memcpy>
			Module_MessagingProcessing(Port ,code, data);
 8005d40:	193a      	adds	r2, r7, r4
 8005d42:	19bb      	adds	r3, r7, r6
 8005d44:	8819      	ldrh	r1, [r3, #0]
 8005d46:	1dfb      	adds	r3, r7, #7
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f83e 	bl	8005dcc <Module_MessagingProcessing>
			Status = MBslave_OK;
 8005d50:	234f      	movs	r3, #79	; 0x4f
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
	{
 8005d58:	e008      	b.n	8005d6c <MessagingParser+0x170>
		}
		else 
			Status = MBslave_ERROR;
 8005d5a:	234f      	movs	r3, #79	; 0x4f
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	22ff      	movs	r2, #255	; 0xff
 8005d60:	701a      	strb	r2, [r3, #0]
	{
 8005d62:	e003      	b.n	8005d6c <MessagingParser+0x170>
	}
	else
		Status = MBslave_ERROR;
 8005d64:	234f      	movs	r3, #79	; 0x4f
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	701a      	strb	r2, [r3, #0]
	
	/* clear RcvMessage	*/					
	memset(&RcvMessage[Port-1][0],0,RcvMessageMaxSize);
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	0013      	movs	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <MessagingParser+0x1c8>)
 8005d7c:	189b      	adds	r3, r3, r2
 8005d7e:	2218      	movs	r2, #24
 8005d80:	2100      	movs	r1, #0
 8005d82:	0018      	movs	r0, r3
 8005d84:	f006 fac1 	bl	800c30a <memset>
	
	/* re-initializing DMA of receiving port */
	HAL_UART_DeInit(Handle);
 8005d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fd fe0e 	bl	80039ac <HAL_UART_DeInit>
	HAL_UART_Init(Handle);
 8005d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7fd fdb6 	bl	8003904 <HAL_UART_Init>
	HAL_UART_Receive_DMA(Handle, &RcvMessage[Port-1][0], RcvMessageMaxSize);
 8005d98:	1dfb      	adds	r3, r7, #7
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	1e5a      	subs	r2, r3, #1
 8005d9e:	0013      	movs	r3, r2
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4a07      	ldr	r2, [pc, #28]	; (8005dc4 <MessagingParser+0x1c8>)
 8005da8:	1899      	adds	r1, r3, r2
 8005daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dac:	2218      	movs	r2, #24
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7fd ffa1 	bl	8003cf6 <HAL_UART_Receive_DMA>
	
	return Status;
 8005db4:	234f      	movs	r3, #79	; 0x4f
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b015      	add	sp, #84	; 0x54
 8005dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	200006c4 	.word	0x200006c4
 8005dc8:	2000008c 	.word	0x2000008c

08005dcc <Module_MessagingProcessing>:
/*-----------------------------------------------------------*/

/* --- message processing. 
*/
Module_Status Module_MessagingProcessing(uint8_t Port ,uint16_t code,  uint8_t *pData)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08e      	sub	sp, #56	; 0x38
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	603a      	str	r2, [r7, #0]
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	1c02      	adds	r2, r0, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	1c0a      	adds	r2, r1, #0
 8005dde:	801a      	strh	r2, [r3, #0]
	Module_Status result = MBslave_OK;
 8005de0:	232f      	movs	r3, #47	; 0x2f
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
	uint8_t messageParams[36];
	uint8_t rank;	
	
	switch (code)
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	2b1e      	cmp	r3, #30
 8005dee:	d003      	beq.n	8005df8 <Module_MessagingProcessing+0x2c>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d100      	bne.n	8005df6 <Module_MessagingProcessing+0x2a>
 8005df4:	e0ea      	b.n	8005fcc <Module_MessagingProcessing+0x200>
 8005df6:	e1bb      	b.n	8006170 <Module_MessagingProcessing+0x3a4>
//			messageParams[32] = (uint8_t)((*(uint32_t *) &x) >> 0);   // Nineth var
//			messageParams[33] = (uint8_t)((*(uint32_t *) &x) >> 8);
//			messageParams[34] = (uint8_t)((*(uint32_t *) &x) >> 16);
//			messageParams[35] = (uint8_t)((*(uint32_t *) &x) >> 24);
			
		  messageParams[0] = rank;
 8005df8:	2308      	movs	r3, #8
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	212e      	movs	r1, #46	; 0x2e
 8005dfe:	187a      	adds	r2, r7, r1
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	701a      	strb	r2, [r3, #0]
			switch(rank)
 8005e04:	187b      	adds	r3, r7, r1
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d100      	bne.n	8005e0e <Module_MessagingProcessing+0x42>
 8005e0c:	e08e      	b.n	8005f2c <Module_MessagingProcessing+0x160>
 8005e0e:	dd00      	ble.n	8005e12 <Module_MessagingProcessing+0x46>
 8005e10:	e0d0      	b.n	8005fb4 <Module_MessagingProcessing+0x1e8>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <Module_MessagingProcessing+0x50>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d044      	beq.n	8005ea4 <Module_MessagingProcessing+0xd8>
 8005e1a:	e0cb      	b.n	8005fb4 <Module_MessagingProcessing+0x1e8>
			{
				
				case 0 :
					messageParams[1] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[5]) >> 0);   // First var
 8005e1c:	4bdb      	ldr	r3, [pc, #876]	; (800618c <Module_MessagingProcessing+0x3c0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	2108      	movs	r1, #8
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	705a      	strb	r2, [r3, #1]
					messageParams[2] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[5]) >> 8);
 8005e28:	4bd8      	ldr	r3, [pc, #864]	; (800618c <Module_MessagingProcessing+0x3c0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	709a      	strb	r2, [r3, #2]
					messageParams[3] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[4]) >> 0);
 8005e34:	4bd6      	ldr	r3, [pc, #856]	; (8006190 <Module_MessagingProcessing+0x3c4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	70da      	strb	r2, [r3, #3]
					messageParams[4] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[4]) >> 8);
 8005e3e:	4bd4      	ldr	r3, [pc, #848]	; (8006190 <Module_MessagingProcessing+0x3c4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	711a      	strb	r2, [r3, #4]
					
					messageParams[5] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[7]) >> 0);   // Second var
 8005e4a:	4bd2      	ldr	r3, [pc, #840]	; (8006194 <Module_MessagingProcessing+0x3c8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	715a      	strb	r2, [r3, #5]
					messageParams[6] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[7]) >> 8);
 8005e54:	4bcf      	ldr	r3, [pc, #828]	; (8006194 <Module_MessagingProcessing+0x3c8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	187b      	adds	r3, r7, r1
 8005e5e:	719a      	strb	r2, [r3, #6]
					messageParams[7] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[6]) >> 0);
 8005e60:	4bcd      	ldr	r3, [pc, #820]	; (8006198 <Module_MessagingProcessing+0x3cc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	71da      	strb	r2, [r3, #7]
					messageParams[8] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[6]) >> 8);
 8005e6a:	4bcb      	ldr	r3, [pc, #812]	; (8006198 <Module_MessagingProcessing+0x3cc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	721a      	strb	r2, [r3, #8]
				
					messageParams[9] =  (uint8_t)((*(uint32_t *) &usRegHoldingValue[9]) >> 0);   // Third var
 8005e76:	4bc9      	ldr	r3, [pc, #804]	; (800619c <Module_MessagingProcessing+0x3d0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	725a      	strb	r2, [r3, #9]
					messageParams[10] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[9]) >> 8);
 8005e80:	4bc6      	ldr	r3, [pc, #792]	; (800619c <Module_MessagingProcessing+0x3d0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	729a      	strb	r2, [r3, #10]
					messageParams[11] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[8]) >> 0);
 8005e8c:	4bc4      	ldr	r3, [pc, #784]	; (80061a0 <Module_MessagingProcessing+0x3d4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	72da      	strb	r2, [r3, #11]
					messageParams[12] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[8]) >> 8);
 8005e96:	4bc2      	ldr	r3, [pc, #776]	; (80061a0 <Module_MessagingProcessing+0x3d4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	187b      	adds	r3, r7, r1
 8005ea0:	731a      	strb	r2, [r3, #12]
		   break;
 8005ea2:	e087      	b.n	8005fb4 <Module_MessagingProcessing+0x1e8>
				
				case 1 :
					messageParams[1] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[11]) >> 0);   // Fourth var
 8005ea4:	4bbf      	ldr	r3, [pc, #764]	; (80061a4 <Module_MessagingProcessing+0x3d8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	2108      	movs	r1, #8
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	705a      	strb	r2, [r3, #1]
					messageParams[2] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[11]) >> 8);
 8005eb0:	4bbc      	ldr	r3, [pc, #752]	; (80061a4 <Module_MessagingProcessing+0x3d8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	187b      	adds	r3, r7, r1
 8005eba:	709a      	strb	r2, [r3, #2]
					messageParams[3] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[10]) >> 0);
 8005ebc:	4bba      	ldr	r3, [pc, #744]	; (80061a8 <Module_MessagingProcessing+0x3dc>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	187b      	adds	r3, r7, r1
 8005ec4:	70da      	strb	r2, [r3, #3]
					messageParams[4] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[10]) >> 8);
 8005ec6:	4bb8      	ldr	r3, [pc, #736]	; (80061a8 <Module_MessagingProcessing+0x3dc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	711a      	strb	r2, [r3, #4]
					
					messageParams[5] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[13]) >> 0);   // Fifth var
 8005ed2:	4bb6      	ldr	r3, [pc, #728]	; (80061ac <Module_MessagingProcessing+0x3e0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	187b      	adds	r3, r7, r1
 8005eda:	715a      	strb	r2, [r3, #5]
					messageParams[6] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[13]) >> 8);
 8005edc:	4bb3      	ldr	r3, [pc, #716]	; (80061ac <Module_MessagingProcessing+0x3e0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	187b      	adds	r3, r7, r1
 8005ee6:	719a      	strb	r2, [r3, #6]
					messageParams[7] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[12]) >> 0);
 8005ee8:	4bb1      	ldr	r3, [pc, #708]	; (80061b0 <Module_MessagingProcessing+0x3e4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	187b      	adds	r3, r7, r1
 8005ef0:	71da      	strb	r2, [r3, #7]
					messageParams[8] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[12]) >> 8);
 8005ef2:	4baf      	ldr	r3, [pc, #700]	; (80061b0 <Module_MessagingProcessing+0x3e4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	721a      	strb	r2, [r3, #8]
					
					messageParams[9] =  (uint8_t)((*(uint32_t *) &usRegHoldingValue[15]) >> 0);   // Sixth var
 8005efe:	4bad      	ldr	r3, [pc, #692]	; (80061b4 <Module_MessagingProcessing+0x3e8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	725a      	strb	r2, [r3, #9]
					messageParams[10] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[15]) >> 8);
 8005f08:	4baa      	ldr	r3, [pc, #680]	; (80061b4 <Module_MessagingProcessing+0x3e8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	729a      	strb	r2, [r3, #10]
					messageParams[11] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[14]) >> 0);
 8005f14:	4ba8      	ldr	r3, [pc, #672]	; (80061b8 <Module_MessagingProcessing+0x3ec>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	72da      	strb	r2, [r3, #11]
					messageParams[12] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[14]) >> 8);
 8005f1e:	4ba6      	ldr	r3, [pc, #664]	; (80061b8 <Module_MessagingProcessing+0x3ec>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	187b      	adds	r3, r7, r1
 8005f28:	731a      	strb	r2, [r3, #12]
		  break;
 8005f2a:	e043      	b.n	8005fb4 <Module_MessagingProcessing+0x1e8>
				
				case 2 :
					messageParams[1] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[17]) >> 0);   // Seventh var
 8005f2c:	4ba3      	ldr	r3, [pc, #652]	; (80061bc <Module_MessagingProcessing+0x3f0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	2108      	movs	r1, #8
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	705a      	strb	r2, [r3, #1]
					messageParams[2] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[17]) >> 8);
 8005f38:	4ba0      	ldr	r3, [pc, #640]	; (80061bc <Module_MessagingProcessing+0x3f0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	187b      	adds	r3, r7, r1
 8005f42:	709a      	strb	r2, [r3, #2]
					messageParams[3] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[16]) >> 0);
 8005f44:	4b9e      	ldr	r3, [pc, #632]	; (80061c0 <Module_MessagingProcessing+0x3f4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	70da      	strb	r2, [r3, #3]
					messageParams[4] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[16]) >> 8);
 8005f4e:	4b9c      	ldr	r3, [pc, #624]	; (80061c0 <Module_MessagingProcessing+0x3f4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	711a      	strb	r2, [r3, #4]
					
					messageParams[5] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[19]) >> 0);   // Eighth var
 8005f5a:	4b9a      	ldr	r3, [pc, #616]	; (80061c4 <Module_MessagingProcessing+0x3f8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	715a      	strb	r2, [r3, #5]
					messageParams[6] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[19]) >> 8);
 8005f64:	4b97      	ldr	r3, [pc, #604]	; (80061c4 <Module_MessagingProcessing+0x3f8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	187b      	adds	r3, r7, r1
 8005f6e:	719a      	strb	r2, [r3, #6]
					messageParams[7] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[18]) >> 0);
 8005f70:	4b95      	ldr	r3, [pc, #596]	; (80061c8 <Module_MessagingProcessing+0x3fc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	71da      	strb	r2, [r3, #7]
					messageParams[8] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[18]) >> 8);
 8005f7a:	4b93      	ldr	r3, [pc, #588]	; (80061c8 <Module_MessagingProcessing+0x3fc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	721a      	strb	r2, [r3, #8]
				
					messageParams[9] =  (uint8_t)((*(uint32_t *) &usRegHoldingValue[21]) >> 0);   // Ninth var
 8005f86:	4b91      	ldr	r3, [pc, #580]	; (80061cc <Module_MessagingProcessing+0x400>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	187b      	adds	r3, r7, r1
 8005f8e:	725a      	strb	r2, [r3, #9]
					messageParams[10] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[21]) >> 8);
 8005f90:	4b8e      	ldr	r3, [pc, #568]	; (80061cc <Module_MessagingProcessing+0x400>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	729a      	strb	r2, [r3, #10]
					messageParams[11] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[20]) >> 0);
 8005f9c:	4b8c      	ldr	r3, [pc, #560]	; (80061d0 <Module_MessagingProcessing+0x404>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	187b      	adds	r3, r7, r1
 8005fa4:	72da      	strb	r2, [r3, #11]
					messageParams[12] = (uint8_t)((*(uint32_t *) &usRegHoldingValue[20]) >> 8);
 8005fa6:	4b8a      	ldr	r3, [pc, #552]	; (80061d0 <Module_MessagingProcessing+0x404>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	187b      	adds	r3, r7, r1
 8005fb0:	731a      	strb	r2, [r3, #12]
			  break;
 8005fb2:	46c0      	nop			; (mov r8, r8)
		}
			
		  SendMessage(Port , CODE_READ_REMOTE_ModBus_RESPONSE ,2 , messageParams ,13);
 8005fb4:	1dfb      	adds	r3, r7, #7
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b298      	uxth	r0, r3
 8005fba:	2308      	movs	r3, #8
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	220d      	movs	r2, #13
 8005fc0:	9200      	str	r2, [sp, #0]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	2124      	movs	r1, #36	; 0x24
 8005fc6:	f7ff fd0f 	bl	80059e8 <SendMessage>
		break;
 8005fca:	e0d7      	b.n	800617c <Module_MessagingProcessing+0x3b0>
		
		case (CODE_WRITE_REMOTE):
			    rank = pData[0];
 8005fcc:	212e      	movs	r1, #46	; 0x2e
 8005fce:	187b      	adds	r3, r7, r1
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
		
		   switch( rank)
 8005fd6:	187b      	adds	r3, r7, r1
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d100      	bne.n	8005fe0 <Module_MessagingProcessing+0x214>
 8005fde:	e086      	b.n	80060ee <Module_MessagingProcessing+0x322>
 8005fe0:	dd00      	ble.n	8005fe4 <Module_MessagingProcessing+0x218>
 8005fe2:	e0ca      	b.n	800617a <Module_MessagingProcessing+0x3ae>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <Module_MessagingProcessing+0x222>
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d040      	beq.n	800606e <Module_MessagingProcessing+0x2a2>
//			remoteVar7 = ((uint32_t)pData[24]<<0) + ((uint32_t)pData[25]<<8) + ((uint32_t)pData[26]<<16) + ((uint32_t)pData[27]<<24);  // Seventh Var
//		
//			remoteVar8 = ((uint32_t)pData[28]<<0) + ((uint32_t)pData[29]<<8) + ((uint32_t)pData[30]<<16) + ((uint32_t)pData[31]<<24);  // Eighth Var
//		
//			remoteVar9 = ((uint32_t)pData[32]<<0) + ((uint32_t)pData[33]<<8) + ((uint32_t)pData[34]<<16) + ((uint32_t)pData[35]<<24);  // Ninth Var
		 break;
 8005fec:	e0c5      	b.n	800617a <Module_MessagingProcessing+0x3ae>
					remoteVar1 = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // First Var
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	18d2      	adds	r2, r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	3303      	adds	r3, #3
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	041b      	lsls	r3, r3, #16
 8006008:	18d2      	adds	r2, r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3304      	adds	r3, #4
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	18d2      	adds	r2, r2, r3
 8006014:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <Module_MessagingProcessing+0x408>)
 8006016:	601a      	str	r2, [r3, #0]
					remoteVar2 = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Second Var
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	3305      	adds	r3, #5
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	001a      	movs	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	3306      	adds	r3, #6
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	18d2      	adds	r2, r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	3307      	adds	r3, #7
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	18d2      	adds	r2, r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	18d2      	adds	r2, r2, r3
 800603e:	4b66      	ldr	r3, [pc, #408]	; (80061d8 <Module_MessagingProcessing+0x40c>)
 8006040:	601a      	str	r2, [r3, #0]
					remoteVar3 = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Third Var
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	3309      	adds	r3, #9
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	001a      	movs	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	330a      	adds	r3, #10
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	18d2      	adds	r2, r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	330b      	adds	r3, #11
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	18d2      	adds	r2, r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	18d2      	adds	r2, r2, r3
 8006068:	4b5c      	ldr	r3, [pc, #368]	; (80061dc <Module_MessagingProcessing+0x410>)
 800606a:	601a      	str	r2, [r3, #0]
					  break;
 800606c:	e07f      	b.n	800616e <Module_MessagingProcessing+0x3a2>
					remoteVar4 = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // Fourth Var
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	001a      	movs	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3302      	adds	r3, #2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	18d2      	adds	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	3303      	adds	r3, #3
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	18d2      	adds	r2, r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	3304      	adds	r3, #4
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	18d2      	adds	r2, r2, r3
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <Module_MessagingProcessing+0x414>)
 8006096:	601a      	str	r2, [r3, #0]
					remoteVar5 = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Fifth Var
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	3305      	adds	r3, #5
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	001a      	movs	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3306      	adds	r3, #6
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	18d2      	adds	r2, r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	3307      	adds	r3, #7
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	18d2      	adds	r2, r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	061b      	lsls	r3, r3, #24
 80060bc:	18d2      	adds	r2, r2, r3
 80060be:	4b49      	ldr	r3, [pc, #292]	; (80061e4 <Module_MessagingProcessing+0x418>)
 80060c0:	601a      	str	r2, [r3, #0]
					remoteVar6 = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Sixth Var
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	3309      	adds	r3, #9
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	001a      	movs	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	330a      	adds	r3, #10
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	18d2      	adds	r2, r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	330b      	adds	r3, #11
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	18d2      	adds	r2, r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	18d2      	adds	r2, r2, r3
 80060e8:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <Module_MessagingProcessing+0x41c>)
 80060ea:	601a      	str	r2, [r3, #0]
						break;
 80060ec:	e03f      	b.n	800616e <Module_MessagingProcessing+0x3a2>
					remoteVar7 = ((uint32_t)pData[1]<<0) + ((uint32_t)pData[2]<<8) + ((uint32_t)pData[3]<<16) + ((uint32_t)pData[4]<<24);  // Seventh Var
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	001a      	movs	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	3302      	adds	r3, #2
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	18d2      	adds	r2, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3303      	adds	r3, #3
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	18d2      	adds	r2, r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	18d2      	adds	r2, r2, r3
 8006114:	4b35      	ldr	r3, [pc, #212]	; (80061ec <Module_MessagingProcessing+0x420>)
 8006116:	601a      	str	r2, [r3, #0]
					remoteVar8 = ((uint32_t)pData[5]<<0) + ((uint32_t)pData[6]<<8) + ((uint32_t)pData[7]<<16) + ((uint32_t)pData[8]<<24);  // Eighth Var
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	3305      	adds	r3, #5
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	001a      	movs	r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3306      	adds	r3, #6
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	18d2      	adds	r2, r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	3307      	adds	r3, #7
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	18d2      	adds	r2, r2, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	061b      	lsls	r3, r3, #24
 800613c:	18d2      	adds	r2, r2, r3
 800613e:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <Module_MessagingProcessing+0x424>)
 8006140:	601a      	str	r2, [r3, #0]
					remoteVar9 = ((uint32_t)pData[9]<<0) + ((uint32_t)pData[10]<<8) + ((uint32_t)pData[11]<<16) + ((uint32_t)pData[12]<<24);  // Ninth Var
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3309      	adds	r3, #9
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	001a      	movs	r2, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	330a      	adds	r3, #10
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	18d2      	adds	r2, r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	330b      	adds	r3, #11
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	18d2      	adds	r2, r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	18d2      	adds	r2, r2, r3
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <Module_MessagingProcessing+0x428>)
 800616a:	601a      	str	r2, [r3, #0]
						break;
 800616c:	46c0      	nop			; (mov r8, r8)
		 break;
 800616e:	e004      	b.n	800617a <Module_MessagingProcessing+0x3ae>
		
		default:
			result = MBslave_ERR_UnknownMessage;
 8006170:	232f      	movs	r3, #47	; 0x2f
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
			break;
 8006178:	e000      	b.n	800617c <Module_MessagingProcessing+0x3b0>
		 break;
 800617a:	46c0      	nop			; (mov r8, r8)
	}

	return result;
 800617c:	232f      	movs	r3, #47	; 0x2f
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	781b      	ldrb	r3, [r3, #0]
}
 8006182:	0018      	movs	r0, r3
 8006184:	46bd      	mov	sp, r7
 8006186:	b00c      	add	sp, #48	; 0x30
 8006188:	bd80      	pop	{r7, pc}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	200005e2 	.word	0x200005e2
 8006190:	200005e0 	.word	0x200005e0
 8006194:	200005e6 	.word	0x200005e6
 8006198:	200005e4 	.word	0x200005e4
 800619c:	200005ea 	.word	0x200005ea
 80061a0:	200005e8 	.word	0x200005e8
 80061a4:	200005ee 	.word	0x200005ee
 80061a8:	200005ec 	.word	0x200005ec
 80061ac:	200005f2 	.word	0x200005f2
 80061b0:	200005f0 	.word	0x200005f0
 80061b4:	200005f6 	.word	0x200005f6
 80061b8:	200005f4 	.word	0x200005f4
 80061bc:	200005fa 	.word	0x200005fa
 80061c0:	200005f8 	.word	0x200005f8
 80061c4:	200005fe 	.word	0x200005fe
 80061c8:	200005fc 	.word	0x200005fc
 80061cc:	20000602 	.word	0x20000602
 80061d0:	20000600 	.word	0x20000600
 80061d4:	200006a0 	.word	0x200006a0
 80061d8:	200006a4 	.word	0x200006a4
 80061dc:	200006a8 	.word	0x200006a8
 80061e0:	200006ac 	.word	0x200006ac
 80061e4:	200006b0 	.word	0x200006b0
 80061e8:	200006b4 	.word	0x200006b4
 80061ec:	200006b8 	.word	0x200006b8
 80061f0:	200006bc 	.word	0x200006bc
 80061f4:	200006c0 	.word	0x200006c0

080061f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	0002      	movs	r2, r0
 8006200:	1dbb      	adds	r3, r7, #6
 8006202:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006208:	1dbb      	adds	r3, r7, #6
 800620a:	2200      	movs	r2, #0
 800620c:	5e9b      	ldrsh	r3, [r3, r2]
 800620e:	2b84      	cmp	r3, #132	; 0x84
 8006210:	d006      	beq.n	8006220 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006212:	1dbb      	adds	r3, r7, #6
 8006214:	2200      	movs	r2, #0
 8006216:	5e9a      	ldrsh	r2, [r3, r2]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	18d3      	adds	r3, r2, r3
 800621c:	3303      	adds	r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006220:	68fb      	ldr	r3, [r7, #12]
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bd80      	pop	{r7, pc}

0800622a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800622e:	f000 fe4b 	bl	8006ec8 <vTaskStartScheduler>
  
  return osOK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	0018      	movs	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800623a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623c:	b087      	sub	sp, #28
 800623e:	af02      	add	r7, sp, #8
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685c      	ldr	r4, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006250:	b29e      	uxth	r6, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2208      	movs	r2, #8
 8006256:	5e9b      	ldrsh	r3, [r3, r2]
 8006258:	0018      	movs	r0, r3
 800625a:	f7ff ffcd 	bl	80061f8 <makeFreeRtosPriority>
 800625e:	0001      	movs	r1, r0
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	230c      	movs	r3, #12
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	9100      	str	r1, [sp, #0]
 800626a:	0013      	movs	r3, r2
 800626c:	0032      	movs	r2, r6
 800626e:	0029      	movs	r1, r5
 8006270:	0020      	movs	r0, r4
 8006272:	f000 fcec 	bl	8006c4e <xTaskCreate>
 8006276:	0003      	movs	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	e000      	b.n	8006282 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006280:	68fb      	ldr	r3, [r7, #12]
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b005      	add	sp, #20
 8006288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800628a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3308      	adds	r3, #8
 8006296:	001a      	movs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	4252      	negs	r2, r2
 80062a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3308      	adds	r3, #8
 80062a8:	001a      	movs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3308      	adds	r3, #8
 80062b2:	001a      	movs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b002      	add	sp, #8
 80062da:	bd80      	pop	{r7, pc}

080062dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}

08006320 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	3301      	adds	r3, #1
 8006334:	d103      	bne.n	800633e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e00c      	b.n	8006358 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3308      	adds	r3, #8
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	e002      	b.n	800634c <vListInsert+0x2c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d2f6      	bcs.n	8006346 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}

0800638c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6892      	ldr	r2, [r2, #8]
 80063a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6852      	ldr	r2, [r2, #4]
 80063ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d103      	bne.n	80063c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	1e5a      	subs	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b004      	add	sp, #16
 80063da:	bd80      	pop	{r7, pc}

080063dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <xQueueGenericReset+0x18>
 80063f0:	b672      	cpsid	i
 80063f2:	e7fe      	b.n	80063f2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80063f4:	f001 fe0c 	bl	8008010 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	434b      	muls	r3, r1
 8006406:	18d2      	adds	r2, r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	1e59      	subs	r1, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	434b      	muls	r3, r1
 800642a:	18d2      	adds	r2, r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2244      	movs	r2, #68	; 0x44
 8006434:	21ff      	movs	r1, #255	; 0xff
 8006436:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2245      	movs	r2, #69	; 0x45
 800643c:	21ff      	movs	r1, #255	; 0xff
 800643e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10d      	bne.n	8006462 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3310      	adds	r3, #16
 8006452:	0018      	movs	r0, r3
 8006454:	f000 ff76 	bl	8007344 <xTaskRemoveFromEventList>
 8006458:	1e03      	subs	r3, r0, #0
 800645a:	d00c      	beq.n	8006476 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800645c:	f001 fdc8 	bl	8007ff0 <vPortYield>
 8006460:	e009      	b.n	8006476 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3310      	adds	r3, #16
 8006466:	0018      	movs	r0, r3
 8006468:	f7ff ff0f 	bl	800628a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	0018      	movs	r0, r3
 8006472:	f7ff ff0a 	bl	800628a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006476:	f001 fddd 	bl	8008034 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800647a:	2301      	movs	r3, #1
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b004      	add	sp, #16
 8006482:	bd80      	pop	{r7, pc}

08006484 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b08b      	sub	sp, #44	; 0x2c
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	1dfb      	adds	r3, r7, #7
 8006490:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <xQueueGenericCreate+0x18>
 8006498:	b672      	cpsid	i
 800649a:	e7fe      	b.n	800649a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e003      	b.n	80064b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4353      	muls	r3, r2
 80064ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3348      	adds	r3, #72	; 0x48
 80064b4:	0018      	movs	r0, r3
 80064b6:	f001 fe43 	bl	8008140 <pvPortMalloc>
 80064ba:	0003      	movs	r3, r0
 80064bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	3348      	adds	r3, #72	; 0x48
 80064c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ca:	1dfb      	adds	r3, r7, #7
 80064cc:	781c      	ldrb	r4, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	0023      	movs	r3, r4
 80064da:	f000 f805 	bl	80064e8 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80064de:	69bb      	ldr	r3, [r7, #24]
	}
 80064e0:	0018      	movs	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b009      	add	sp, #36	; 0x24
 80064e6:	bd90      	pop	{r4, r7, pc}

080064e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	001a      	movs	r2, r3
 80064f6:	1cfb      	adds	r3, r7, #3
 80064f8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e002      	b.n	800650e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2101      	movs	r1, #1
 800651e:	0018      	movs	r0, r3
 8006520:	f7ff ff5c 	bl	80063dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b004      	add	sp, #16
 800652a:	bd80      	pop	{r7, pc}

0800652c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800653a:	2300      	movs	r3, #0
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <xQueueGenericSend+0x20>
 8006548:	b672      	cpsid	i
 800654a:	e7fe      	b.n	800654a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x2e>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <xQueueGenericSend+0x32>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSend+0x34>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <xQueueGenericSend+0x3c>
 8006564:	b672      	cpsid	i
 8006566:	e7fe      	b.n	8006566 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <xQueueGenericSend+0x4a>
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <xQueueGenericSend+0x4e>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericSend+0x50>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <xQueueGenericSend+0x58>
 8006580:	b672      	cpsid	i
 8006582:	e7fe      	b.n	8006582 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006584:	f001 f876 	bl	8007674 <xTaskGetSchedulerState>
 8006588:	1e03      	subs	r3, r0, #0
 800658a:	d102      	bne.n	8006592 <xQueueGenericSend+0x66>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <xQueueGenericSend+0x6a>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericSend+0x6c>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueGenericSend+0x74>
 800659c:	b672      	cpsid	i
 800659e:	e7fe      	b.n	800659e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065a0:	f001 fd36 	bl	8008010 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <xQueueGenericSend+0x8a>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d11e      	bne.n	80065f4 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 f9ce 	bl	800695e <prvCopyDataToQueue>
 80065c2:	0003      	movs	r3, r0
 80065c4:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 feb6 	bl	8007344 <xTaskRemoveFromEventList>
 80065d8:	1e03      	subs	r3, r0, #0
 80065da:	d007      	beq.n	80065ec <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065dc:	f001 fd08 	bl	8007ff0 <vPortYield>
 80065e0:	e004      	b.n	80065ec <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065e8:	f001 fd02 	bl	8007ff0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065ec:	f001 fd22 	bl	8008034 <vPortExitCritical>
				return pdPASS;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e05b      	b.n	80066ac <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065fa:	f001 fd1b 	bl	8008034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	e054      	b.n	80066ac <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006608:	2314      	movs	r3, #20
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	0018      	movs	r0, r3
 800660e:	f000 fef5 	bl	80073fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006616:	f001 fd0d 	bl	8008034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800661a:	f000 fc9b 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800661e:	f001 fcf7 	bl	8008010 <vPortEnterCritical>
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2244      	movs	r2, #68	; 0x44
 8006626:	5c9b      	ldrb	r3, [r3, r2]
 8006628:	b25b      	sxtb	r3, r3
 800662a:	3301      	adds	r3, #1
 800662c:	d103      	bne.n	8006636 <xQueueGenericSend+0x10a>
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	2244      	movs	r2, #68	; 0x44
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2245      	movs	r2, #69	; 0x45
 800663a:	5c9b      	ldrb	r3, [r3, r2]
 800663c:	b25b      	sxtb	r3, r3
 800663e:	3301      	adds	r3, #1
 8006640:	d103      	bne.n	800664a <xQueueGenericSend+0x11e>
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	2245      	movs	r2, #69	; 0x45
 8006646:	2100      	movs	r1, #0
 8006648:	5499      	strb	r1, [r3, r2]
 800664a:	f001 fcf3 	bl	8008034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800664e:	1d3a      	adds	r2, r7, #4
 8006650:	2314      	movs	r3, #20
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	0011      	movs	r1, r2
 8006656:	0018      	movs	r0, r3
 8006658:	f000 feea 	bl	8007430 <xTaskCheckForTimeOut>
 800665c:	1e03      	subs	r3, r0, #0
 800665e:	d11e      	bne.n	800669e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 fa80 	bl	8006b68 <prvIsQueueFull>
 8006668:	1e03      	subs	r3, r0, #0
 800666a:	d011      	beq.n	8006690 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3310      	adds	r3, #16
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fe21 	bl	80072bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 f9ff 	bl	8006a80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006682:	f000 fc73 	bl	8006f6c <xTaskResumeAll>
 8006686:	1e03      	subs	r3, r0, #0
 8006688:	d18a      	bne.n	80065a0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800668a:	f001 fcb1 	bl	8007ff0 <vPortYield>
 800668e:	e787      	b.n	80065a0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	0018      	movs	r0, r3
 8006694:	f000 f9f4 	bl	8006a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006698:	f000 fc68 	bl	8006f6c <xTaskResumeAll>
 800669c:	e780      	b.n	80065a0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 f9ed 	bl	8006a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066a6:	f000 fc61 	bl	8006f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066aa:	2300      	movs	r3, #0
		}
	}
}
 80066ac:	0018      	movs	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b00a      	add	sp, #40	; 0x28
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066b4:	b590      	push	{r4, r7, lr}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <xQueueGenericSendFromISR+0x1c>
 80066cc:	b672      	cpsid	i
 80066ce:	e7fe      	b.n	80066ce <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <xQueueGenericSendFromISR+0x2a>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <xQueueGenericSendFromISR+0x2e>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <xQueueGenericSendFromISR+0x30>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <xQueueGenericSendFromISR+0x38>
 80066e8:	b672      	cpsid	i
 80066ea:	e7fe      	b.n	80066ea <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d103      	bne.n	80066fa <xQueueGenericSendFromISR+0x46>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <xQueueGenericSendFromISR+0x4a>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <xQueueGenericSendFromISR+0x4c>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <xQueueGenericSendFromISR+0x54>
 8006704:	b672      	cpsid	i
 8006706:	e7fe      	b.n	8006706 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006708:	f001 fcac 	bl	8008064 <ulSetInterruptMaskFromISR>
 800670c:	0003      	movs	r3, r0
 800670e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <xQueueGenericSendFromISR+0x6e>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d12e      	bne.n	8006780 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006722:	2413      	movs	r4, #19
 8006724:	193b      	adds	r3, r7, r4
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	2145      	movs	r1, #69	; 0x45
 800672a:	5c52      	ldrb	r2, [r2, r1]
 800672c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 f912 	bl	800695e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800673a:	193b      	adds	r3, r7, r4
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b25b      	sxtb	r3, r3
 8006740:	3301      	adds	r3, #1
 8006742:	d111      	bne.n	8006768 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d016      	beq.n	800677a <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	3324      	adds	r3, #36	; 0x24
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fdf7 	bl	8007344 <xTaskRemoveFromEventList>
 8006756:	1e03      	subs	r3, r0, #0
 8006758:	d00f      	beq.n	800677a <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e008      	b.n	800677a <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006768:	2313      	movs	r3, #19
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	b2db      	uxtb	r3, r3
 8006772:	b259      	sxtb	r1, r3
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2245      	movs	r2, #69	; 0x45
 8006778:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800677a:	2301      	movs	r3, #1
 800677c:	61fb      	str	r3, [r7, #28]
		{
 800677e:	e001      	b.n	8006784 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	0018      	movs	r0, r3
 8006788:	f001 fc72 	bl	8008070 <vClearInterruptMaskFromISR>

	return xReturn;
 800678c:	69fb      	ldr	r3, [r7, #28]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b009      	add	sp, #36	; 0x24
 8006794:	bd90      	pop	{r4, r7, pc}

08006796 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	; 0x28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <xQueueGenericReceive+0x20>
 80067b2:	b672      	cpsid	i
 80067b4:	e7fe      	b.n	80067b4 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <xQueueGenericReceive+0x2e>
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <xQueueGenericReceive+0x32>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <xQueueGenericReceive+0x34>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <xQueueGenericReceive+0x3c>
 80067ce:	b672      	cpsid	i
 80067d0:	e7fe      	b.n	80067d0 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d2:	f000 ff4f 	bl	8007674 <xTaskGetSchedulerState>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d102      	bne.n	80067e0 <xQueueGenericReceive+0x4a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xQueueGenericReceive+0x4e>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <xQueueGenericReceive+0x50>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <xQueueGenericReceive+0x58>
 80067ea:	b672      	cpsid	i
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ee:	f001 fc0f 	bl	8008010 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d03a      	beq.n	8006874 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f000 f912 	bl	8006a34 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d11a      	bne.n	800684c <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	1e5a      	subs	r2, r3, #1
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006826:	f000 fffb 	bl	8007820 <pvTaskIncrementMutexHeldCount>
 800682a:	0002      	movs	r2, r0
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d019      	beq.n	800686c <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	3310      	adds	r3, #16
 800683c:	0018      	movs	r0, r3
 800683e:	f000 fd81 	bl	8007344 <xTaskRemoveFromEventList>
 8006842:	1e03      	subs	r3, r0, #0
 8006844:	d012      	beq.n	800686c <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8006846:	f001 fbd3 	bl	8007ff0 <vPortYield>
 800684a:	e00f      	b.n	800686c <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	0018      	movs	r0, r3
 8006860:	f000 fd70 	bl	8007344 <xTaskRemoveFromEventList>
 8006864:	1e03      	subs	r3, r0, #0
 8006866:	d001      	beq.n	800686c <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8006868:	f001 fbc2 	bl	8007ff0 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800686c:	f001 fbe2 	bl	8008034 <vPortExitCritical>
				return pdPASS;
 8006870:	2301      	movs	r3, #1
 8006872:	e070      	b.n	8006956 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800687a:	f001 fbdb 	bl	8008034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800687e:	2300      	movs	r3, #0
 8006880:	e069      	b.n	8006956 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8006888:	2310      	movs	r3, #16
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fdb5 	bl	80073fc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006896:	f001 fbcd 	bl	8008034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800689a:	f000 fb5b 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689e:	f001 fbb7 	bl	8008010 <vPortEnterCritical>
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2244      	movs	r2, #68	; 0x44
 80068a6:	5c9b      	ldrb	r3, [r3, r2]
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	3301      	adds	r3, #1
 80068ac:	d103      	bne.n	80068b6 <xQueueGenericReceive+0x120>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2244      	movs	r2, #68	; 0x44
 80068b2:	2100      	movs	r1, #0
 80068b4:	5499      	strb	r1, [r3, r2]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	2245      	movs	r2, #69	; 0x45
 80068ba:	5c9b      	ldrb	r3, [r3, r2]
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	3301      	adds	r3, #1
 80068c0:	d103      	bne.n	80068ca <xQueueGenericReceive+0x134>
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	2245      	movs	r2, #69	; 0x45
 80068c6:	2100      	movs	r1, #0
 80068c8:	5499      	strb	r1, [r3, r2]
 80068ca:	f001 fbb3 	bl	8008034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	2310      	movs	r3, #16
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	0011      	movs	r1, r2
 80068d6:	0018      	movs	r0, r3
 80068d8:	f000 fdaa 	bl	8007430 <xTaskCheckForTimeOut>
 80068dc:	1e03      	subs	r3, r0, #0
 80068de:	d12c      	bne.n	800693a <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f92a 	bl	8006b3c <prvIsQueueEmpty>
 80068e8:	1e03      	subs	r3, r0, #0
 80068ea:	d01f      	beq.n	800692c <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d108      	bne.n	8006906 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 80068f4:	f001 fb8c 	bl	8008010 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f000 fed5 	bl	80076ac <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8006902:	f001 fb97 	bl	8008034 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 fcd4 	bl	80072bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	0018      	movs	r0, r3
 8006918:	f000 f8b2 	bl	8006a80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800691c:	f000 fb26 	bl	8006f6c <xTaskResumeAll>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d000      	beq.n	8006926 <xQueueGenericReceive+0x190>
 8006924:	e763      	b.n	80067ee <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
 8006926:	f001 fb63 	bl	8007ff0 <vPortYield>
 800692a:	e760      	b.n	80067ee <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f8a6 	bl	8006a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006934:	f000 fb1a 	bl	8006f6c <xTaskResumeAll>
 8006938:	e759      	b.n	80067ee <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	0018      	movs	r0, r3
 800693e:	f000 f89f 	bl	8006a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006942:	f000 fb13 	bl	8006f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	0018      	movs	r0, r3
 800694a:	f000 f8f7 	bl	8006b3c <prvIsQueueEmpty>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d100      	bne.n	8006954 <xQueueGenericReceive+0x1be>
 8006952:	e74c      	b.n	80067ee <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b00a      	add	sp, #40	; 0x28
 800695c:	bd80      	pop	{r7, pc}

0800695e <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10e      	bne.n	800699a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d14e      	bne.n	8006a22 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f000 feed 	bl	8007768 <xTaskPriorityDisinherit>
 800698e:	0003      	movs	r3, r0
 8006990:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	605a      	str	r2, [r3, #4]
 8006998:	e043      	b.n	8006a22 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d119      	bne.n	80069d4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6898      	ldr	r0, [r3, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	0019      	movs	r1, r3
 80069ac:	f005 fca4 	bl	800c2f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	18d2      	adds	r2, r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d32b      	bcc.n	8006a22 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	609a      	str	r2, [r3, #8]
 80069d2:	e026      	b.n	8006a22 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68d8      	ldr	r0, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	0019      	movs	r1, r3
 80069e0:	f005 fc8a 	bl	800c2f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	425b      	negs	r3, r3
 80069ee:	18d2      	adds	r2, r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d207      	bcs.n	8006a10 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	425b      	negs	r3, r3
 8006a0a:	18d2      	adds	r2, r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d105      	bne.n	8006a22 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a2a:	697b      	ldr	r3, [r7, #20]
}
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b006      	add	sp, #24
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d018      	beq.n	8006a78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	18d2      	adds	r2, r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d303      	bcc.n	8006a68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68d9      	ldr	r1, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f005 fc40 	bl	800c2f8 <memcpy>
	}
}
 8006a78:	46c0      	nop			; (mov r8, r8)
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b002      	add	sp, #8
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a88:	f001 fac2 	bl	8008010 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a8c:	230f      	movs	r3, #15
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	2145      	movs	r1, #69	; 0x45
 8006a94:	5c52      	ldrb	r2, [r2, r1]
 8006a96:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a98:	e013      	b.n	8006ac2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3324      	adds	r3, #36	; 0x24
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 fc4c 	bl	8007344 <xTaskRemoveFromEventList>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d001      	beq.n	8006ab4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ab0:	f000 fd0c 	bl	80074cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ab4:	210f      	movs	r1, #15
 8006ab6:	187b      	adds	r3, r7, r1
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ac2:	230f      	movs	r3, #15
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dce5      	bgt.n	8006a9a <prvUnlockQueue+0x1a>
 8006ace:	e000      	b.n	8006ad2 <prvUnlockQueue+0x52>
					break;
 8006ad0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2245      	movs	r2, #69	; 0x45
 8006ad6:	21ff      	movs	r1, #255	; 0xff
 8006ad8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006ada:	f001 faab 	bl	8008034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ade:	f001 fa97 	bl	8008010 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ae2:	230e      	movs	r3, #14
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	2144      	movs	r1, #68	; 0x44
 8006aea:	5c52      	ldrb	r2, [r2, r1]
 8006aec:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aee:	e013      	b.n	8006b18 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d016      	beq.n	8006b26 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3310      	adds	r3, #16
 8006afc:	0018      	movs	r0, r3
 8006afe:	f000 fc21 	bl	8007344 <xTaskRemoveFromEventList>
 8006b02:	1e03      	subs	r3, r0, #0
 8006b04:	d001      	beq.n	8006b0a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006b06:	f000 fce1 	bl	80074cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b0a:	210e      	movs	r1, #14
 8006b0c:	187b      	adds	r3, r7, r1
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	187b      	adds	r3, r7, r1
 8006b16:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b18:	230e      	movs	r3, #14
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	dce5      	bgt.n	8006af0 <prvUnlockQueue+0x70>
 8006b24:	e000      	b.n	8006b28 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006b26:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2244      	movs	r2, #68	; 0x44
 8006b2c:	21ff      	movs	r1, #255	; 0xff
 8006b2e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006b30:	f001 fa80 	bl	8008034 <vPortExitCritical>
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b004      	add	sp, #16
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b44:	f001 fa64 	bl	8008010 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e001      	b.n	8006b5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b5a:	f001 fa6b 	bl	8008034 <vPortExitCritical>

	return xReturn;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
}
 8006b60:	0018      	movs	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b004      	add	sp, #16
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b70:	f001 fa4e 	bl	8008010 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d102      	bne.n	8006b86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	e001      	b.n	8006b8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b8a:	f001 fa53 	bl	8008034 <vPortExitCritical>

	return xReturn;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	0018      	movs	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b004      	add	sp, #16
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e015      	b.n	8006bd4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <vQueueAddToRegistry+0x4c>)
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	00d2      	lsls	r2, r2, #3
 8006bae:	58d3      	ldr	r3, [r2, r3]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <vQueueAddToRegistry+0x4c>)
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	00d2      	lsls	r2, r2, #3
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bbe:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <vQueueAddToRegistry+0x4c>)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	18d3      	adds	r3, r2, r3
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bcc:	e006      	b.n	8006bdc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b07      	cmp	r3, #7
 8006bd8:	d9e6      	bls.n	8006ba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	2000073c 	.word	0x2000073c

08006be8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bf8:	f001 fa0a 	bl	8008010 <vPortEnterCritical>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2244      	movs	r2, #68	; 0x44
 8006c00:	5c9b      	ldrb	r3, [r3, r2]
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	d103      	bne.n	8006c10 <vQueueWaitForMessageRestricted+0x28>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2244      	movs	r2, #68	; 0x44
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	5499      	strb	r1, [r3, r2]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2245      	movs	r2, #69	; 0x45
 8006c14:	5c9b      	ldrb	r3, [r3, r2]
 8006c16:	b25b      	sxtb	r3, r3
 8006c18:	3301      	adds	r3, #1
 8006c1a:	d103      	bne.n	8006c24 <vQueueWaitForMessageRestricted+0x3c>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2245      	movs	r2, #69	; 0x45
 8006c20:	2100      	movs	r1, #0
 8006c22:	5499      	strb	r1, [r3, r2]
 8006c24:	f001 fa06 	bl	8008034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f000 fb5d 	bl	80072f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7ff ff1d 	bl	8006a80 <prvUnlockQueue>
	}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b006      	add	sp, #24
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c4e:	b590      	push	{r4, r7, lr}
 8006c50:	b08d      	sub	sp, #52	; 0x34
 8006c52:	af04      	add	r7, sp, #16
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	1dbb      	adds	r3, r7, #6
 8006c5c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5e:	1dbb      	adds	r3, r7, #6
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	0018      	movs	r0, r3
 8006c66:	f001 fa6b 	bl	8008140 <pvPortMalloc>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d010      	beq.n	8006c96 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c74:	20b4      	movs	r0, #180	; 0xb4
 8006c76:	f001 fa63 	bl	8008140 <pvPortMalloc>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8a:	e006      	b.n	8006c9a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f001 fafc 	bl	800828c <vPortFree>
 8006c94:	e001      	b.n	8006c9a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d016      	beq.n	8006cce <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	683c      	ldr	r4, [r7, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	2300      	movs	r3, #0
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	0023      	movs	r3, r4
 8006cbc:	f000 f810 	bl	8006ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f000 f89c 	bl	8006e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e002      	b.n	8006cd4 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cd4:	69bb      	ldr	r3, [r7, #24]
	}
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b009      	add	sp, #36	; 0x24
 8006cdc:	bd90      	pop	{r4, r7, pc}
	...

08006ce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	493e      	ldr	r1, [pc, #248]	; (8006df0 <prvInitialiseNewTask+0x110>)
 8006cf6:	468c      	mov	ip, r1
 8006cf8:	4463      	add	r3, ip
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	18d3      	adds	r3, r2, r3
 8006cfe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2207      	movs	r2, #7
 8006d04:	4393      	bics	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d001      	beq.n	8006d14 <prvInitialiseNewTask+0x34>
 8006d10:	b672      	cpsid	i
 8006d12:	e7fe      	b.n	8006d12 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e013      	b.n	8006d42 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	18d3      	adds	r3, r2, r3
 8006d20:	7818      	ldrb	r0, [r3, #0]
 8006d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d24:	2134      	movs	r1, #52	; 0x34
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	18d3      	adds	r3, r2, r3
 8006d2a:	185b      	adds	r3, r3, r1
 8006d2c:	1c02      	adds	r2, r0, #0
 8006d2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d006      	beq.n	8006d4a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b0f      	cmp	r3, #15
 8006d46:	d9e8      	bls.n	8006d1a <prvInitialiseNewTask+0x3a>
 8006d48:	e000      	b.n	8006d4c <prvInitialiseNewTask+0x6c>
		{
			break;
 8006d4a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2243      	movs	r2, #67	; 0x43
 8006d50:	2100      	movs	r1, #0
 8006d52:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	d901      	bls.n	8006d5e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	3304      	adds	r3, #4
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7ff faa6 	bl	80062c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7ff faa1 	bl	80062c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	22ac      	movs	r2, #172	; 0xac
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	22b0      	movs	r2, #176	; 0xb0
 8006da6:	2100      	movs	r1, #0
 8006da8:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	334c      	adds	r3, #76	; 0x4c
 8006dae:	2260      	movs	r2, #96	; 0x60
 8006db0:	2100      	movs	r1, #0
 8006db2:	0018      	movs	r0, r3
 8006db4:	f005 faa9 	bl	800c30a <memset>
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	4a0e      	ldr	r2, [pc, #56]	; (8006df4 <prvInitialiseNewTask+0x114>)
 8006dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <prvInitialiseNewTask+0x118>)
 8006dc2:	655a      	str	r2, [r3, #84]	; 0x54
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <prvInitialiseNewTask+0x11c>)
 8006dc8:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f001 f885 	bl	8007ee0 <pxPortInitialiseStack>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b006      	add	sp, #24
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	3fffffff 	.word	0x3fffffff
 8006df4:	0800c820 	.word	0x0800c820
 8006df8:	0800c840 	.word	0x0800c840
 8006dfc:	0800c800 	.word	0x0800c800

08006e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e08:	f001 f902 	bl	8008010 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <prvAddNewTaskToReadyList+0xb0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <prvAddNewTaskToReadyList+0xb0>)
 8006e14:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006e16:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <prvAddNewTaskToReadyList+0xb4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e1e:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <prvAddNewTaskToReadyList+0xb4>)
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e24:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <prvAddNewTaskToReadyList+0xb0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d110      	bne.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e2c:	f000 fb68 	bl	8007500 <prvInitialiseTaskLists>
 8006e30:	e00d      	b.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e32:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <prvAddNewTaskToReadyList+0xb8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e3a:	4b1e      	ldr	r3, [pc, #120]	; (8006eb4 <prvAddNewTaskToReadyList+0xb4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d802      	bhi.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e48:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <prvAddNewTaskToReadyList+0xb4>)
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e56:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5c:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <prvAddNewTaskToReadyList+0xc0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d903      	bls.n	8006e6c <prvAddNewTaskToReadyList+0x6c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <prvAddNewTaskToReadyList+0xc0>)
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	0013      	movs	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	189b      	adds	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <prvAddNewTaskToReadyList+0xc4>)
 8006e7a:	189a      	adds	r2, r3, r2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	0019      	movs	r1, r3
 8006e82:	0010      	movs	r0, r2
 8006e84:	f7ff fa2a 	bl	80062dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e88:	f001 f8d4 	bl	8008034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvAddNewTaskToReadyList+0xb8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <prvAddNewTaskToReadyList+0xb4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d201      	bcs.n	8006ea6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ea2:	f001 f8a5 	bl	8007ff0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b002      	add	sp, #8
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	2000087c 	.word	0x2000087c
 8006eb4:	2000077c 	.word	0x2000077c
 8006eb8:	20000888 	.word	0x20000888
 8006ebc:	20000898 	.word	0x20000898
 8006ec0:	20000884 	.word	0x20000884
 8006ec4:	20000780 	.word	0x20000780

08006ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006ece:	4919      	ldr	r1, [pc, #100]	; (8006f34 <vTaskStartScheduler+0x6c>)
 8006ed0:	4819      	ldr	r0, [pc, #100]	; (8006f38 <vTaskStartScheduler+0x70>)
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <vTaskStartScheduler+0x74>)
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	f7ff feb6 	bl	8006c4e <xTaskCreate>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d103      	bne.n	8006ef4 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8006eec:	f000 fcfe 	bl	80078ec <xTimerCreateTimerTask>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d113      	bne.n	8006f22 <vTaskStartScheduler+0x5a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006efa:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <vTaskStartScheduler+0x78>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	334c      	adds	r3, #76	; 0x4c
 8006f02:	001a      	movs	r2, r3
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <vTaskStartScheduler+0x7c>)
 8006f06:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <vTaskStartScheduler+0x80>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	4252      	negs	r2, r2
 8006f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <vTaskStartScheduler+0x84>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <vTaskStartScheduler+0x88>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f1c:	f001 f844 	bl	8007fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f20:	e004      	b.n	8006f2c <vTaskStartScheduler+0x64>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3301      	adds	r3, #1
 8006f26:	d101      	bne.n	8006f2c <vTaskStartScheduler+0x64>
 8006f28:	b672      	cpsid	i
 8006f2a:	e7fe      	b.n	8006f2a <vTaskStartScheduler+0x62>
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b002      	add	sp, #8
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0800c500 	.word	0x0800c500
 8006f38:	080074e1 	.word	0x080074e1
 8006f3c:	200008a0 	.word	0x200008a0
 8006f40:	2000077c 	.word	0x2000077c
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	2000089c 	.word	0x2000089c
 8006f4c:	20000888 	.word	0x20000888
 8006f50:	20000880 	.word	0x20000880

08006f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <vTaskSuspendAll+0x14>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <vTaskSuspendAll+0x14>)
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	200008a4 	.word	0x200008a4

08006f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xTaskResumeAll+0x1a>
 8006f82:	b672      	cpsid	i
 8006f84:	e7fe      	b.n	8006f84 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f86:	f001 f843 	bl	8008010 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f8a:	4b36      	ldr	r3, [pc, #216]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	4b34      	ldr	r3, [pc, #208]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f92:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f94:	4b33      	ldr	r3, [pc, #204]	; (8007064 <xTaskResumeAll+0xf8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d15b      	bne.n	8007054 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f9c:	4b32      	ldr	r3, [pc, #200]	; (8007068 <xTaskResumeAll+0xfc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d057      	beq.n	8007054 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fa4:	e02f      	b.n	8007006 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006fa6:	4b31      	ldr	r3, [pc, #196]	; (800706c <xTaskResumeAll+0x100>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7ff f9ea 	bl	800638c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7ff f9e5 	bl	800638c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <xTaskResumeAll+0x104>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d903      	bls.n	8006fd6 <xTaskResumeAll+0x6a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4b27      	ldr	r3, [pc, #156]	; (8007070 <xTaskResumeAll+0x104>)
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	0013      	movs	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4a24      	ldr	r2, [pc, #144]	; (8007074 <xTaskResumeAll+0x108>)
 8006fe4:	189a      	adds	r2, r3, r2
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	0019      	movs	r1, r3
 8006fec:	0010      	movs	r0, r2
 8006fee:	f7ff f975 	bl	80062dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <xTaskResumeAll+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007000:	4b1e      	ldr	r3, [pc, #120]	; (800707c <xTaskResumeAll+0x110>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <xTaskResumeAll+0x100>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1cb      	bne.n	8006fa6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007014:	f000 fb0a 	bl	800762c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <xTaskResumeAll+0x114>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00f      	beq.n	8007044 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007024:	f000 f83c 	bl	80070a0 <xTaskIncrementTick>
 8007028:	1e03      	subs	r3, r0, #0
 800702a:	d002      	beq.n	8007032 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <xTaskResumeAll+0x110>)
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3b01      	subs	r3, #1
 8007036:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f2      	bne.n	8007024 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <xTaskResumeAll+0x114>)
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <xTaskResumeAll+0x110>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007050:	f000 ffce 	bl	8007ff0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007054:	f000 ffee 	bl	8008034 <vPortExitCritical>

	return xAlreadyYielded;
 8007058:	68bb      	ldr	r3, [r7, #8]
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	200008a4 	.word	0x200008a4
 8007068:	2000087c 	.word	0x2000087c
 800706c:	2000083c 	.word	0x2000083c
 8007070:	20000884 	.word	0x20000884
 8007074:	20000780 	.word	0x20000780
 8007078:	2000077c 	.word	0x2000077c
 800707c:	20000890 	.word	0x20000890
 8007080:	2000088c 	.word	0x2000088c

08007084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800708a:	4b04      	ldr	r3, [pc, #16]	; (800709c <xTaskGetTickCount+0x18>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007090:	687b      	ldr	r3, [r7, #4]
}
 8007092:	0018      	movs	r0, r3
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	20000880 	.word	0x20000880

080070a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070aa:	4b4c      	ldr	r3, [pc, #304]	; (80071dc <xTaskIncrementTick+0x13c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d000      	beq.n	80070b4 <xTaskIncrementTick+0x14>
 80070b2:	e083      	b.n	80071bc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80070b4:	4b4a      	ldr	r3, [pc, #296]	; (80071e0 <xTaskIncrementTick+0x140>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070bc:	4b48      	ldr	r3, [pc, #288]	; (80071e0 <xTaskIncrementTick+0x140>)
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d117      	bne.n	80070f8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c8:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <xTaskIncrementTick+0x144>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <xTaskIncrementTick+0x36>
 80070d2:	b672      	cpsid	i
 80070d4:	e7fe      	b.n	80070d4 <xTaskIncrementTick+0x34>
 80070d6:	4b43      	ldr	r3, [pc, #268]	; (80071e4 <xTaskIncrementTick+0x144>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <xTaskIncrementTick+0x148>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4b40      	ldr	r3, [pc, #256]	; (80071e4 <xTaskIncrementTick+0x144>)
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	4b40      	ldr	r3, [pc, #256]	; (80071e8 <xTaskIncrementTick+0x148>)
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	4b40      	ldr	r3, [pc, #256]	; (80071ec <xTaskIncrementTick+0x14c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	4b3e      	ldr	r3, [pc, #248]	; (80071ec <xTaskIncrementTick+0x14c>)
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f000 fa9a 	bl	800762c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070f8:	4b3d      	ldr	r3, [pc, #244]	; (80071f0 <xTaskIncrementTick+0x150>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d34e      	bcc.n	80071a0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007102:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <xTaskIncrementTick+0x144>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xTaskIncrementTick+0x70>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xTaskIncrementTick+0x72>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007116:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <xTaskIncrementTick+0x150>)
 8007118:	2201      	movs	r2, #1
 800711a:	4252      	negs	r2, r2
 800711c:	601a      	str	r2, [r3, #0]
					break;
 800711e:	e03f      	b.n	80071a0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007120:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <xTaskIncrementTick+0x144>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d203      	bcs.n	8007140 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007138:	4b2d      	ldr	r3, [pc, #180]	; (80071f0 <xTaskIncrementTick+0x150>)
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
						break;
 800713e:	e02f      	b.n	80071a0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3304      	adds	r3, #4
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff f921 	bl	800638c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3318      	adds	r3, #24
 8007156:	0018      	movs	r0, r3
 8007158:	f7ff f918 	bl	800638c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <xTaskIncrementTick+0x154>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d903      	bls.n	8007170 <xTaskIncrementTick+0xd0>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b21      	ldr	r3, [pc, #132]	; (80071f4 <xTaskIncrementTick+0x154>)
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	0013      	movs	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	189b      	adds	r3, r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <xTaskIncrementTick+0x158>)
 800717e:	189a      	adds	r2, r3, r2
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3304      	adds	r3, #4
 8007184:	0019      	movs	r1, r3
 8007186:	0010      	movs	r0, r2
 8007188:	f7ff f8a8 	bl	80062dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <xTaskIncrementTick+0x15c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	429a      	cmp	r2, r3
 8007198:	d3b3      	bcc.n	8007102 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800719a:	2301      	movs	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719e:	e7b0      	b.n	8007102 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071a0:	4b16      	ldr	r3, [pc, #88]	; (80071fc <xTaskIncrementTick+0x15c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a6:	4914      	ldr	r1, [pc, #80]	; (80071f8 <xTaskIncrementTick+0x158>)
 80071a8:	0013      	movs	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	585b      	ldr	r3, [r3, r1]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d907      	bls.n	80071c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e004      	b.n	80071c6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <xTaskIncrementTick+0x160>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <xTaskIncrementTick+0x160>)
 80071c4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <xTaskIncrementTick+0x164>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80071ce:	2301      	movs	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071d2:	697b      	ldr	r3, [r7, #20]
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b006      	add	sp, #24
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200008a4 	.word	0x200008a4
 80071e0:	20000880 	.word	0x20000880
 80071e4:	20000834 	.word	0x20000834
 80071e8:	20000838 	.word	0x20000838
 80071ec:	20000894 	.word	0x20000894
 80071f0:	2000089c 	.word	0x2000089c
 80071f4:	20000884 	.word	0x20000884
 80071f8:	20000780 	.word	0x20000780
 80071fc:	2000077c 	.word	0x2000077c
 8007200:	2000088c 	.word	0x2000088c
 8007204:	20000890 	.word	0x20000890

08007208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800720e:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <vTaskSwitchContext+0x9c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <vTaskSwitchContext+0xa0>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800721c:	e03d      	b.n	800729a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800721e:	4b22      	ldr	r3, [pc, #136]	; (80072a8 <vTaskSwitchContext+0xa0>)
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <vTaskSwitchContext+0xa4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	e007      	b.n	800723c <vTaskSwitchContext+0x34>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <vTaskSwitchContext+0x2e>
 8007232:	b672      	cpsid	i
 8007234:	e7fe      	b.n	8007234 <vTaskSwitchContext+0x2c>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3b01      	subs	r3, #1
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	491c      	ldr	r1, [pc, #112]	; (80072b0 <vTaskSwitchContext+0xa8>)
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	0013      	movs	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	189b      	adds	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	585b      	ldr	r3, [r3, r1]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0ee      	beq.n	800722c <vTaskSwitchContext+0x24>
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	0013      	movs	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	189b      	adds	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <vTaskSwitchContext+0xa8>)
 800725a:	189b      	adds	r3, r3, r2
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	605a      	str	r2, [r3, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	429a      	cmp	r2, r3
 8007272:	d104      	bne.n	800727e <vTaskSwitchContext+0x76>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	605a      	str	r2, [r3, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vTaskSwitchContext+0xac>)
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <vTaskSwitchContext+0xa4>)
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <vTaskSwitchContext+0xac>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	334c      	adds	r3, #76	; 0x4c
 8007294:	001a      	movs	r2, r3
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <vTaskSwitchContext+0xb0>)
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b002      	add	sp, #8
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	200008a4 	.word	0x200008a4
 80072a8:	20000890 	.word	0x20000890
 80072ac:	20000884 	.word	0x20000884
 80072b0:	20000780 	.word	0x20000780
 80072b4:	2000077c 	.word	0x2000077c
 80072b8:	2000000c 	.word	0x2000000c

080072bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <vTaskPlaceOnEventList+0x14>
 80072cc:	b672      	cpsid	i
 80072ce:	e7fe      	b.n	80072ce <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <vTaskPlaceOnEventList+0x38>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3318      	adds	r3, #24
 80072d6:	001a      	movs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	0011      	movs	r1, r2
 80072dc:	0018      	movs	r0, r3
 80072de:	f7ff f81f 	bl	8006320 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2101      	movs	r1, #1
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 faac 	bl	8007844 <prvAddCurrentTaskToDelayedList>
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b002      	add	sp, #8
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	2000077c 	.word	0x2000077c

080072f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <vTaskPlaceOnEventListRestricted+0x16>
 800730a:	b672      	cpsid	i
 800730c:	e7fe      	b.n	800730c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <vTaskPlaceOnEventListRestricted+0x48>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3318      	adds	r3, #24
 8007314:	001a      	movs	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0011      	movs	r1, r2
 800731a:	0018      	movs	r0, r3
 800731c:	f7fe ffde 	bl	80062dc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007326:	2301      	movs	r3, #1
 8007328:	425b      	negs	r3, r3
 800732a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	0011      	movs	r1, r2
 8007332:	0018      	movs	r0, r3
 8007334:	f000 fa86 	bl	8007844 <prvAddCurrentTaskToDelayedList>
	}
 8007338:	46c0      	nop			; (mov r8, r8)
 800733a:	46bd      	mov	sp, r7
 800733c:	b004      	add	sp, #16
 800733e:	bd80      	pop	{r7, pc}
 8007340:	2000077c 	.word	0x2000077c

08007344 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <xTaskRemoveFromEventList+0x1a>
 800735a:	b672      	cpsid	i
 800735c:	e7fe      	b.n	800735c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3318      	adds	r3, #24
 8007362:	0018      	movs	r0, r3
 8007364:	f7ff f812 	bl	800638c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007368:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <xTaskRemoveFromEventList+0xa0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11d      	bne.n	80073ac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3304      	adds	r3, #4
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff f809 	bl	800638c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737e:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <xTaskRemoveFromEventList+0xa4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d903      	bls.n	800738e <xTaskRemoveFromEventList+0x4a>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <xTaskRemoveFromEventList+0xa4>)
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	0013      	movs	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	189b      	adds	r3, r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4a14      	ldr	r2, [pc, #80]	; (80073ec <xTaskRemoveFromEventList+0xa8>)
 800739c:	189a      	adds	r2, r3, r2
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3304      	adds	r3, #4
 80073a2:	0019      	movs	r1, r3
 80073a4:	0010      	movs	r0, r2
 80073a6:	f7fe ff99 	bl	80062dc <vListInsertEnd>
 80073aa:	e007      	b.n	80073bc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	3318      	adds	r3, #24
 80073b0:	001a      	movs	r2, r3
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <xTaskRemoveFromEventList+0xac>)
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7fe ff90 	bl	80062dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <xTaskRemoveFromEventList+0xb0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d905      	bls.n	80073d6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <xTaskRemoveFromEventList+0xb4>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e001      	b.n	80073da <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80073da:	68fb      	ldr	r3, [r7, #12]
}
 80073dc:	0018      	movs	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	b004      	add	sp, #16
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	200008a4 	.word	0x200008a4
 80073e8:	20000884 	.word	0x20000884
 80073ec:	20000780 	.word	0x20000780
 80073f0:	2000083c 	.word	0x2000083c
 80073f4:	2000077c 	.word	0x2000077c
 80073f8:	20000890 	.word	0x20000890

080073fc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <vTaskSetTimeOutState+0x12>
 800740a:	b672      	cpsid	i
 800740c:	e7fe      	b.n	800740c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <vTaskSetTimeOutState+0x2c>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <vTaskSetTimeOutState+0x30>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]
}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	46bd      	mov	sp, r7
 8007422:	b002      	add	sp, #8
 8007424:	bd80      	pop	{r7, pc}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	20000894 	.word	0x20000894
 800742c:	20000880 	.word	0x20000880

08007430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <xTaskCheckForTimeOut+0x14>
 8007440:	b672      	cpsid	i
 8007442:	e7fe      	b.n	8007442 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <xTaskCheckForTimeOut+0x1e>
 800744a:	b672      	cpsid	i
 800744c:	e7fe      	b.n	800744c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800744e:	f000 fddf 	bl	8008010 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <xTaskCheckForTimeOut+0x94>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	d102      	bne.n	8007466 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e027      	b.n	80074b6 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <xTaskCheckForTimeOut+0x98>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d007      	beq.n	8007482 <xTaskCheckForTimeOut+0x52>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e019      	b.n	80074b6 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d20f      	bcs.n	80074b2 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	1acb      	subs	r3, r1, r3
 800749e:	18d2      	adds	r2, r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7ff ffa8 	bl	80073fc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e001      	b.n	80074b6 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074b6:	f000 fdbd 	bl	8008034 <vPortExitCritical>

	return xReturn;
 80074ba:	68fb      	ldr	r3, [r7, #12]
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	b004      	add	sp, #16
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000880 	.word	0x20000880
 80074c8:	20000894 	.word	0x20000894

080074cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <vTaskMissedYield+0x10>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000890 	.word	0x20000890

080074e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e8:	f000 f84e 	bl	8007588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ec:	4b03      	ldr	r3, [pc, #12]	; (80074fc <prvIdleTask+0x1c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d9f9      	bls.n	80074e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f4:	f000 fd7c 	bl	8007ff0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80074f8:	e7f6      	b.n	80074e8 <prvIdleTask+0x8>
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	20000780 	.word	0x20000780

08007500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e00c      	b.n	8007526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	0013      	movs	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	189b      	adds	r3, r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a14      	ldr	r2, [pc, #80]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007518:	189b      	adds	r3, r3, r2
 800751a:	0018      	movs	r0, r3
 800751c:	f7fe feb5 	bl	800628a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b06      	cmp	r3, #6
 800752a:	d9ef      	bls.n	800750c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <prvInitialiseTaskLists+0x6c>)
 800752e:	0018      	movs	r0, r3
 8007530:	f7fe feab 	bl	800628a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <prvInitialiseTaskLists+0x70>)
 8007536:	0018      	movs	r0, r3
 8007538:	f7fe fea7 	bl	800628a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x74>)
 800753e:	0018      	movs	r0, r3
 8007540:	f7fe fea3 	bl	800628a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInitialiseTaskLists+0x78>)
 8007546:	0018      	movs	r0, r3
 8007548:	f7fe fe9f 	bl	800628a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <prvInitialiseTaskLists+0x7c>)
 800754e:	0018      	movs	r0, r3
 8007550:	f7fe fe9b 	bl	800628a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <prvInitialiseTaskLists+0x80>)
 8007556:	4a05      	ldr	r2, [pc, #20]	; (800756c <prvInitialiseTaskLists+0x6c>)
 8007558:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800755a:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <prvInitialiseTaskLists+0x84>)
 800755c:	4a04      	ldr	r2, [pc, #16]	; (8007570 <prvInitialiseTaskLists+0x70>)
 800755e:	601a      	str	r2, [r3, #0]
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	46bd      	mov	sp, r7
 8007564:	b002      	add	sp, #8
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20000780 	.word	0x20000780
 800756c:	2000080c 	.word	0x2000080c
 8007570:	20000820 	.word	0x20000820
 8007574:	2000083c 	.word	0x2000083c
 8007578:	20000850 	.word	0x20000850
 800757c:	20000868 	.word	0x20000868
 8007580:	20000834 	.word	0x20000834
 8007584:	20000838 	.word	0x20000838

08007588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800758e:	e027      	b.n	80075e0 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8007590:	f7ff fce0 	bl	8006f54 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007594:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <prvCheckTasksWaitingTermination+0x6c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	425a      	negs	r2, r3
 800759a:	4153      	adcs	r3, r2
 800759c:	b2db      	uxtb	r3, r3
 800759e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80075a0:	f7ff fce4 	bl	8006f6c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11a      	bne.n	80075e0 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80075aa:	f000 fd31 	bl	8008010 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <prvCheckTasksWaitingTermination+0x6c>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	3304      	adds	r3, #4
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7fe fee6 	bl	800638c <uxListRemove>
					--uxCurrentNumberOfTasks;
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <prvCheckTasksWaitingTermination+0x70>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <prvCheckTasksWaitingTermination+0x70>)
 80075c8:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <prvCheckTasksWaitingTermination+0x74>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	1e5a      	subs	r2, r3, #1
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvCheckTasksWaitingTermination+0x74>)
 80075d2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80075d4:	f000 fd2e 	bl	8008034 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	0018      	movs	r0, r3
 80075dc:	f000 f810 	bl	8007600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e0:	4b06      	ldr	r3, [pc, #24]	; (80075fc <prvCheckTasksWaitingTermination+0x74>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d3      	bne.n	8007590 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b002      	add	sp, #8
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	20000850 	.word	0x20000850
 80075f8:	2000087c 	.word	0x2000087c
 80075fc:	20000864 	.word	0x20000864

08007600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	334c      	adds	r3, #76	; 0x4c
 800760c:	0018      	movs	r0, r3
 800760e:	f004 fe91 	bl	800c334 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	0018      	movs	r0, r3
 8007618:	f000 fe38 	bl	800828c <vPortFree>
			vPortFree( pxTCB );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	0018      	movs	r0, r3
 8007620:	f000 fe34 	bl	800828c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	46bd      	mov	sp, r7
 8007628:	b002      	add	sp, #8
 800762a:	bd80      	pop	{r7, pc}

0800762c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007632:	4b0e      	ldr	r3, [pc, #56]	; (800766c <prvResetNextTaskUnblockTime+0x40>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <prvResetNextTaskUnblockTime+0x14>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <prvResetNextTaskUnblockTime+0x16>
 8007640:	2300      	movs	r3, #0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <prvResetNextTaskUnblockTime+0x44>)
 8007648:	2201      	movs	r2, #1
 800764a:	4252      	negs	r2, r2
 800764c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800764e:	e008      	b.n	8007662 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <prvResetNextTaskUnblockTime+0x40>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <prvResetNextTaskUnblockTime+0x44>)
 8007660:	601a      	str	r2, [r3, #0]
}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	46bd      	mov	sp, r7
 8007666:	b002      	add	sp, #8
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	20000834 	.word	0x20000834
 8007670:	2000089c 	.word	0x2000089c

08007674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <xTaskGetSchedulerState+0x30>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007682:	2301      	movs	r3, #1
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	e008      	b.n	800769a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007688:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <xTaskGetSchedulerState+0x34>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007690:	2302      	movs	r3, #2
 8007692:	607b      	str	r3, [r7, #4]
 8007694:	e001      	b.n	800769a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800769a:	687b      	ldr	r3, [r7, #4]
	}
 800769c:	0018      	movs	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	b002      	add	sp, #8
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000888 	.word	0x20000888
 80076a8:	200008a4 	.word	0x200008a4

080076ac <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d04a      	beq.n	8007754 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c2:	4b26      	ldr	r3, [pc, #152]	; (800775c <vTaskPriorityInherit+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d243      	bcs.n	8007754 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db06      	blt.n	80076e2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d4:	4b21      	ldr	r3, [pc, #132]	; (800775c <vTaskPriorityInherit+0xb0>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	2207      	movs	r2, #7
 80076dc:	1ad2      	subs	r2, r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6959      	ldr	r1, [r3, #20]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	0013      	movs	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <vTaskPriorityInherit+0xb4>)
 80076f4:	189b      	adds	r3, r3, r2
 80076f6:	4299      	cmp	r1, r3
 80076f8:	d101      	bne.n	80076fe <vTaskPriorityInherit+0x52>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <vTaskPriorityInherit+0x54>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d022      	beq.n	800774a <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3304      	adds	r3, #4
 8007708:	0018      	movs	r0, r3
 800770a:	f7fe fe3f 	bl	800638c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <vTaskPriorityInherit+0xb0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	4b11      	ldr	r3, [pc, #68]	; (8007764 <vTaskPriorityInherit+0xb8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <vTaskPriorityInherit+0x80>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007728:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <vTaskPriorityInherit+0xb8>)
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	0013      	movs	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	189b      	adds	r3, r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <vTaskPriorityInherit+0xb4>)
 800773a:	189a      	adds	r2, r3, r2
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3304      	adds	r3, #4
 8007740:	0019      	movs	r1, r3
 8007742:	0010      	movs	r0, r2
 8007744:	f7fe fdca 	bl	80062dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007748:	e004      	b.n	8007754 <vTaskPriorityInherit+0xa8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800774a:	4b04      	ldr	r3, [pc, #16]	; (800775c <vTaskPriorityInherit+0xb0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8007754:	46c0      	nop			; (mov r8, r8)
 8007756:	46bd      	mov	sp, r7
 8007758:	b004      	add	sp, #16
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2000077c 	.word	0x2000077c
 8007760:	20000780 	.word	0x20000780
 8007764:	20000884 	.word	0x20000884

08007768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d044      	beq.n	8007808 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800777e:	4b25      	ldr	r3, [pc, #148]	; (8007814 <xTaskPriorityDisinherit+0xac>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <xTaskPriorityDisinherit+0x24>
 8007788:	b672      	cpsid	i
 800778a:	e7fe      	b.n	800778a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <xTaskPriorityDisinherit+0x30>
 8007794:	b672      	cpsid	i
 8007796:	e7fe      	b.n	8007796 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d02c      	beq.n	8007808 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d128      	bne.n	8007808 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3304      	adds	r3, #4
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7fe fde6 	bl	800638c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2207      	movs	r2, #7
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <xTaskPriorityDisinherit+0xb0>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d903      	bls.n	80077e8 <xTaskPriorityDisinherit+0x80>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <xTaskPriorityDisinherit+0xb0>)
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	0013      	movs	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	189b      	adds	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4a09      	ldr	r2, [pc, #36]	; (800781c <xTaskPriorityDisinherit+0xb4>)
 80077f6:	189a      	adds	r2, r3, r2
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3304      	adds	r3, #4
 80077fc:	0019      	movs	r1, r3
 80077fe:	0010      	movs	r0, r2
 8007800:	f7fe fd6c 	bl	80062dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007808:	68fb      	ldr	r3, [r7, #12]
	}
 800780a:	0018      	movs	r0, r3
 800780c:	46bd      	mov	sp, r7
 800780e:	b004      	add	sp, #16
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	2000077c 	.word	0x2000077c
 8007818:	20000884 	.word	0x20000884
 800781c:	20000780 	.word	0x20000780

08007820 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <pvTaskIncrementMutexHeldCount+0x20>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <pvTaskIncrementMutexHeldCount+0x20>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007832:	3201      	adds	r2, #1
 8007834:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007836:	4b02      	ldr	r3, [pc, #8]	; (8007840 <pvTaskIncrementMutexHeldCount+0x20>)
 8007838:	681b      	ldr	r3, [r3, #0]
	}
 800783a:	0018      	movs	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	2000077c 	.word	0x2000077c

08007844 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3304      	adds	r3, #4
 800785a:	0018      	movs	r0, r3
 800785c:	f7fe fd96 	bl	800638c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3301      	adds	r3, #1
 8007864:	d10b      	bne.n	800787e <prvAddCurrentTaskToDelayedList+0x3a>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800786c:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1d1a      	adds	r2, r3, #4
 8007872:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007874:	0011      	movs	r1, r2
 8007876:	0018      	movs	r0, r3
 8007878:	f7fe fd30 	bl	80062dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800787c:	e026      	b.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	18d3      	adds	r3, r2, r3
 8007884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	429a      	cmp	r2, r3
 8007894:	d209      	bcs.n	80078aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007896:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3304      	adds	r3, #4
 80078a0:	0019      	movs	r1, r3
 80078a2:	0010      	movs	r0, r2
 80078a4:	f7fe fd3c 	bl	8006320 <vListInsert>
}
 80078a8:	e010      	b.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3304      	adds	r3, #4
 80078b4:	0019      	movs	r1, r3
 80078b6:	0010      	movs	r0, r2
 80078b8:	f7fe fd32 	bl	8006320 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d202      	bcs.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078c6:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	601a      	str	r2, [r3, #0]
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b004      	add	sp, #16
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000880 	.word	0x20000880
 80078d8:	2000077c 	.word	0x2000077c
 80078dc:	20000868 	.word	0x20000868
 80078e0:	20000838 	.word	0x20000838
 80078e4:	20000834 	.word	0x20000834
 80078e8:	2000089c 	.word	0x2000089c

080078ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078f6:	f000 faa1 	bl	8007e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078fa:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <xTimerCreateTimerTask+0x44>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8007902:	2380      	movs	r3, #128	; 0x80
 8007904:	005a      	lsls	r2, r3, #1
 8007906:	490b      	ldr	r1, [pc, #44]	; (8007934 <xTimerCreateTimerTask+0x48>)
 8007908:	480b      	ldr	r0, [pc, #44]	; (8007938 <xTimerCreateTimerTask+0x4c>)
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <xTimerCreateTimerTask+0x50>)
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	2303      	movs	r3, #3
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	f7ff f99b 	bl	8006c4e <xTaskCreate>
 8007918:	0003      	movs	r3, r0
 800791a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <xTimerCreateTimerTask+0x3a>
 8007922:	b672      	cpsid	i
 8007924:	e7fe      	b.n	8007924 <xTimerCreateTimerTask+0x38>
	return xReturn;
 8007926:	687b      	ldr	r3, [r7, #4]
}
 8007928:	0018      	movs	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	b002      	add	sp, #8
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200008d8 	.word	0x200008d8
 8007934:	0800c508 	.word	0x0800c508
 8007938:	08007ad5 	.word	0x08007ad5
 800793c:	200008dc 	.word	0x200008dc

08007940 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007940:	b590      	push	{r4, r7, lr}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800794e:	2028      	movs	r0, #40	; 0x28
 8007950:	f000 fbf6 	bl	8008140 <pvPortMalloc>
 8007954:	0003      	movs	r3, r0
 8007956:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800795e:	683c      	ldr	r4, [r7, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	0023      	movs	r3, r4
 8007970:	f000 f805 	bl	800797e <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007974:	697b      	ldr	r3, [r7, #20]
	}
 8007976:	0018      	movs	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	b007      	add	sp, #28
 800797c:	bd90      	pop	{r4, r7, pc}

0800797e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <prvInitialiseNewTimer+0x18>
 8007992:	b672      	cpsid	i
 8007994:	e7fe      	b.n	8007994 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800799c:	f000 fa4e 	bl	8007e3c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	3304      	adds	r3, #4
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7fe fc7f 	bl	80062c6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b004      	add	sp, #16
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b089      	sub	sp, #36	; 0x24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <xTimerGenericCommand+0x1c>
 80079e8:	b672      	cpsid	i
 80079ea:	e7fe      	b.n	80079ea <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079ec:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <xTimerGenericCommand+0x90>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d030      	beq.n	8007a56 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079f4:	2410      	movs	r4, #16
 80079f6:	193b      	adds	r3, r7, r4
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079fc:	193b      	adds	r3, r7, r4
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007a02:	193b      	adds	r3, r7, r4
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	dc19      	bgt.n	8007a42 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a0e:	f7ff fe31 	bl	8007674 <xTaskGetSchedulerState>
 8007a12:	0003      	movs	r3, r0
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d109      	bne.n	8007a2c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <xTimerGenericCommand+0x90>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1e:	1939      	adds	r1, r7, r4
 8007a20:	2300      	movs	r3, #0
 8007a22:	f7fe fd83 	bl	800652c <xQueueGenericSend>
 8007a26:	0003      	movs	r3, r0
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	e014      	b.n	8007a56 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <xTimerGenericCommand+0x90>)
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	2310      	movs	r3, #16
 8007a32:	18f9      	adds	r1, r7, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	2200      	movs	r2, #0
 8007a38:	f7fe fd78 	bl	800652c <xQueueGenericSend>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	e009      	b.n	8007a56 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <xTimerGenericCommand+0x90>)
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	2310      	movs	r3, #16
 8007a4a:	18f9      	adds	r1, r7, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f7fe fe31 	bl	80066b4 <xQueueGenericSendFromISR>
 8007a52:	0003      	movs	r3, r0
 8007a54:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a56:	69fb      	ldr	r3, [r7, #28]
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b009      	add	sp, #36	; 0x24
 8007a5e:	bd90      	pop	{r4, r7, pc}
 8007a60:	200008d8 	.word	0x200008d8

08007a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a6e:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <prvProcessExpiredTimer+0x6c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7fe fc85 	bl	800638c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d119      	bne.n	8007abe <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	18d1      	adds	r1, r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8b6 	bl	8007c08 <prvInsertTimerInActiveList>
 8007a9c:	1e03      	subs	r3, r0, #0
 8007a9e:	d00e      	beq.n	8007abe <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f7ff ff90 	bl	80079d0 <xTimerGenericCommand>
 8007ab0:	0003      	movs	r3, r0
 8007ab2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <prvProcessExpiredTimer+0x5a>
 8007aba:	b672      	cpsid	i
 8007abc:	e7fe      	b.n	8007abc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	0010      	movs	r0, r2
 8007ac6:	4798      	blx	r3
}
 8007ac8:	46c0      	nop			; (mov r8, r8)
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b004      	add	sp, #16
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200008d0 	.word	0x200008d0

08007ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007adc:	2308      	movs	r3, #8
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 f851 	bl	8007b88 <prvGetNextExpireTime>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f803 	bl	8007afc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007af6:	f000 f8c9 	bl	8007c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007afa:	e7ef      	b.n	8007adc <prvTimerTask+0x8>

08007afc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b06:	f7ff fa25 	bl	8006f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f000 f85a 	bl	8007bc8 <prvSampleTimeNow>
 8007b14:	0003      	movs	r3, r0
 8007b16:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d129      	bne.n	8007b72 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <prvProcessTimerOrBlockTask+0x42>
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d808      	bhi.n	8007b3e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007b2c:	f7ff fa1e 	bl	8006f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	0011      	movs	r1, r2
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7ff ff94 	bl	8007a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b3c:	e01b      	b.n	8007b76 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d006      	beq.n	8007b52 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <prvProcessTimerOrBlockTask+0x84>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	425a      	negs	r2, r3
 8007b4c:	4153      	adcs	r3, r2
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b52:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <prvProcessTimerOrBlockTask+0x88>)
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	0019      	movs	r1, r3
 8007b60:	f7ff f842 	bl	8006be8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b64:	f7ff fa02 	bl	8006f6c <xTaskResumeAll>
 8007b68:	1e03      	subs	r3, r0, #0
 8007b6a:	d104      	bne.n	8007b76 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007b6c:	f000 fa40 	bl	8007ff0 <vPortYield>
}
 8007b70:	e001      	b.n	8007b76 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007b72:	f7ff f9fb 	bl	8006f6c <xTaskResumeAll>
}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b004      	add	sp, #16
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	200008d4 	.word	0x200008d4
 8007b84:	200008d8 	.word	0x200008d8

08007b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <prvGetNextExpireTime+0x3c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	425a      	negs	r2, r3
 8007b98:	4153      	adcs	r3, r2
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	001a      	movs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <prvGetNextExpireTime+0x3c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e001      	b.n	8007bba <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bba:	68fb      	ldr	r3, [r7, #12]
}
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b004      	add	sp, #16
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	200008d0 	.word	0x200008d0

08007bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bd0:	f7ff fa58 	bl	8007084 <xTaskGetTickCount>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <prvSampleTimeNow+0x3c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d205      	bcs.n	8007bee <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007be2:	f000 f8d1 	bl	8007d88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	e002      	b.n	8007bf4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <prvSampleTimeNow+0x3c>)
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b004      	add	sp, #16
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	200008e0 	.word	0x200008e0

08007c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d812      	bhi.n	8007c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	1ad2      	subs	r2, r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d302      	bcc.n	8007c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e01b      	b.n	8007c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c42:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <prvInsertTimerInActiveList+0x7c>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	0010      	movs	r0, r2
 8007c4e:	f7fe fb67 	bl	8006320 <vListInsert>
 8007c52:	e012      	b.n	8007c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d206      	bcs.n	8007c6a <prvInsertTimerInActiveList+0x62>
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	e007      	b.n	8007c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <prvInsertTimerInActiveList+0x80>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3304      	adds	r3, #4
 8007c72:	0019      	movs	r1, r3
 8007c74:	0010      	movs	r0, r2
 8007c76:	f7fe fb53 	bl	8006320 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c7a:	697b      	ldr	r3, [r7, #20]
}
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b006      	add	sp, #24
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	200008d4 	.word	0x200008d4
 8007c88:	200008d0 	.word	0x200008d0

08007c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b08b      	sub	sp, #44	; 0x2c
 8007c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c92:	e065      	b.n	8007d60 <prvProcessReceivedCommands+0xd4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c94:	2208      	movs	r2, #8
 8007c96:	18bb      	adds	r3, r7, r2
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db5f      	blt.n	8007d5e <prvProcessReceivedCommands+0xd2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c9e:	18bb      	adds	r3, r7, r2
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f7fe fb6b 	bl	800638c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f7ff ff85 	bl	8007bc8 <prvSampleTimeNow>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d849      	bhi.n	8007d60 <prvProcessReceivedCommands+0xd4>
 8007ccc:	009a      	lsls	r2, r3, #2
 8007cce:	4b2c      	ldr	r3, [pc, #176]	; (8007d80 <prvProcessReceivedCommands+0xf4>)
 8007cd0:	18d3      	adds	r3, r2, r3
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cd6:	2408      	movs	r4, #8
 8007cd8:	193b      	adds	r3, r7, r4
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	18d1      	adds	r1, r2, r3
 8007ce2:	193b      	adds	r3, r7, r4
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	69f8      	ldr	r0, [r7, #28]
 8007cea:	f7ff ff8d 	bl	8007c08 <prvInsertTimerInActiveList>
 8007cee:	1e03      	subs	r3, r0, #0
 8007cf0:	d036      	beq.n	8007d60 <prvProcessReceivedCommands+0xd4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	0010      	movs	r0, r2
 8007cfa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d12d      	bne.n	8007d60 <prvProcessReceivedCommands+0xd4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d04:	193b      	adds	r3, r7, r4
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	18d2      	adds	r2, r2, r3
 8007d0e:	69f8      	ldr	r0, [r7, #28]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	f7ff fe5a 	bl	80079d0 <xTimerGenericCommand>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11c      	bne.n	8007d60 <prvProcessReceivedCommands+0xd4>
 8007d26:	b672      	cpsid	i
 8007d28:	e7fe      	b.n	8007d28 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	18fb      	adds	r3, r7, r3
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <prvProcessReceivedCommands+0xb4>
 8007d3c:	b672      	cpsid	i
 8007d3e:	e7fe      	b.n	8007d3e <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	699a      	ldr	r2, [r3, #24]
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	18d1      	adds	r1, r2, r3
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	69f8      	ldr	r0, [r7, #28]
 8007d4e:	f7ff ff5b 	bl	8007c08 <prvInsertTimerInActiveList>
					break;
 8007d52:	e005      	b.n	8007d60 <prvProcessReceivedCommands+0xd4>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 fa98 	bl	800828c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d5c:	e000      	b.n	8007d60 <prvProcessReceivedCommands+0xd4>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d5e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d60:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <prvProcessReceivedCommands+0xf8>)
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	2308      	movs	r3, #8
 8007d66:	18f9      	adds	r1, r7, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f7fe fd13 	bl	8006796 <xQueueGenericReceive>
 8007d70:	1e03      	subs	r3, r0, #0
 8007d72:	d18f      	bne.n	8007c94 <prvProcessReceivedCommands+0x8>
	}
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b009      	add	sp, #36	; 0x24
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	0800c560 	.word	0x0800c560
 8007d84:	200008d8 	.word	0x200008d8

08007d88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d8e:	e03e      	b.n	8007e0e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d90:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3304      	adds	r3, #4
 8007da8:	0018      	movs	r0, r3
 8007daa:	f7fe faef 	bl	800638c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	0010      	movs	r0, r2
 8007db6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d126      	bne.n	8007e0e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	18d3      	adds	r3, r2, r3
 8007dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d90e      	bls.n	8007df0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dde:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3304      	adds	r3, #4
 8007de6:	0019      	movs	r1, r3
 8007de8:	0010      	movs	r0, r2
 8007dea:	f7fe fa99 	bl	8006320 <vListInsert>
 8007dee:	e00e      	b.n	8007e0e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	2300      	movs	r3, #0
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7ff fde8 	bl	80079d0 <xTimerGenericCommand>
 8007e00:	0003      	movs	r3, r0
 8007e02:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <prvSwitchTimerLists+0x86>
 8007e0a:	b672      	cpsid	i
 8007e0c:	e7fe      	b.n	8007e0c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1bb      	bne.n	8007d90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <prvSwitchTimerLists+0xb0>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <prvSwitchTimerLists+0xac>)
 8007e24:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007e26:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <prvSwitchTimerLists+0xb0>)
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	601a      	str	r2, [r3, #0]
}
 8007e2c:	46c0      	nop			; (mov r8, r8)
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b006      	add	sp, #24
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	200008d0 	.word	0x200008d0
 8007e38:	200008d4 	.word	0x200008d4

08007e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e40:	f000 f8e6 	bl	8008010 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e44:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <prvCheckForValidListAndQueue+0x5c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d120      	bne.n	8007e8e <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e4c:	4b13      	ldr	r3, [pc, #76]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f7fe fa1b 	bl	800628a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e56:	0018      	movs	r0, r3
 8007e58:	f7fe fa17 	bl	800628a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <prvCheckForValidListAndQueue+0x68>)
 8007e5e:	4a0f      	ldr	r2, [pc, #60]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e60:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e62:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <prvCheckForValidListAndQueue+0x6c>)
 8007e64:	4a0e      	ldr	r2, [pc, #56]	; (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e66:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007e68:	2200      	movs	r2, #0
 8007e6a:	210c      	movs	r1, #12
 8007e6c:	2004      	movs	r0, #4
 8007e6e:	f7fe fb09 	bl	8006484 <xQueueGenericCreate>
 8007e72:	0002      	movs	r2, r0
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <prvCheckForValidListAndQueue+0x5c>)
 8007e76:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <prvCheckForValidListAndQueue+0x5c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <prvCheckForValidListAndQueue+0x5c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a09      	ldr	r2, [pc, #36]	; (8007eac <prvCheckForValidListAndQueue+0x70>)
 8007e86:	0011      	movs	r1, r2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f7fe fe85 	bl	8006b98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e8e:	f000 f8d1 	bl	8008034 <vPortExitCritical>
}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	200008d8 	.word	0x200008d8
 8007e9c:	200008a8 	.word	0x200008a8
 8007ea0:	200008bc 	.word	0x200008bc
 8007ea4:	200008d0 	.word	0x200008d0
 8007ea8:	200008d4 	.word	0x200008d4
 8007eac:	0800c510 	.word	0x0800c510

08007eb0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <pvTimerGetTimerID+0x16>
 8007ec2:	b672      	cpsid	i
 8007ec4:	e7fe      	b.n	8007ec4 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8007ec6:	f000 f8a3 	bl	8008010 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8007ed0:	f000 f8b0 	bl	8008034 <vPortExitCritical>

	return pvReturn;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
}
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	b004      	add	sp, #16
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	0452      	lsls	r2, r2, #17
 8007ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f0c:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <pxPortInitialiseStack+0x50>)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3b14      	subs	r3, #20
 8007f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3b20      	subs	r3, #32
 8007f22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f24:	68fb      	ldr	r3, [r7, #12]
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b004      	add	sp, #16
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	08007f35 	.word	0x08007f35

08007f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <prvTaskExitError+0x2c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	d001      	beq.n	8007f4a <prvTaskExitError+0x16>
 8007f46:	b672      	cpsid	i
 8007f48:	e7fe      	b.n	8007f48 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007f4a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007f4c:	46c0      	nop			; (mov r8, r8)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0fc      	beq.n	8007f4e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	b002      	add	sp, #8
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	20000008 	.word	0x20000008

08007f64 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007f70:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <pxCurrentTCBConst2>)
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	3020      	adds	r0, #32
 8007f78:	f380 8809 	msr	PSP, r0
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f380 8814 	msr	CONTROL, r0
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007f88:	46ae      	mov	lr, r5
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	bc04      	pop	{r2}
 8007f8e:	b662      	cpsie	i
 8007f90:	4718      	bx	r3
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	46c0      	nop			; (mov r8, r8)

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	2000077c 	.word	0x2000077c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007fa4:	46c0      	nop			; (mov r8, r8)
 8007fa6:	46c0      	nop			; (mov r8, r8)

08007fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007fac:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <xPortStartScheduler+0x40>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <xPortStartScheduler+0x40>)
 8007fb2:	21ff      	movs	r1, #255	; 0xff
 8007fb4:	0409      	lsls	r1, r1, #16
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <xPortStartScheduler+0x40>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <xPortStartScheduler+0x40>)
 8007fc0:	21ff      	movs	r1, #255	; 0xff
 8007fc2:	0609      	lsls	r1, r1, #24
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007fc8:	f000 f898 	bl	80080fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <xPortStartScheduler+0x44>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007fd2:	f7ff ffcd 	bl	8007f70 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fd6:	f7ff f917 	bl	8007208 <vTaskSwitchContext>
	prvTaskExitError();
 8007fda:	f7ff ffab 	bl	8007f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	e000ed20 	.word	0xe000ed20
 8007fec:	20000008 	.word	0x20000008

08007ff0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <vPortYield+0x1c>)
 8007ff6:	2280      	movs	r2, #128	; 0x80
 8007ff8:	0552      	lsls	r2, r2, #21
 8007ffa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007ffc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008000:	f3bf 8f6f 	isb	sy
}
 8008004:	46c0      	nop			; (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008014:	b672      	cpsid	i
    uxCriticalNesting++;
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <vPortEnterCritical+0x20>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <vPortEnterCritical+0x20>)
 800801e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008020:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008024:	f3bf 8f6f 	isb	sy
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	20000008 	.word	0x20000008

08008034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008038:	4b09      	ldr	r3, [pc, #36]	; (8008060 <vPortExitCritical+0x2c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <vPortExitCritical+0x10>
 8008040:	b672      	cpsid	i
 8008042:	e7fe      	b.n	8008042 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <vPortExitCritical+0x2c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <vPortExitCritical+0x2c>)
 800804c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800804e:	4b04      	ldr	r3, [pc, #16]	; (8008060 <vPortExitCritical+0x2c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d100      	bne.n	8008058 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008056:	b662      	cpsie	i
    }
}
 8008058:	46c0      	nop			; (mov r8, r8)
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	20000008 	.word	0x20000008

08008064 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008064:	f3ef 8010 	mrs	r0, PRIMASK
 8008068:	b672      	cpsid	i
 800806a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800806c:	46c0      	nop			; (mov r8, r8)
 800806e:	0018      	movs	r0, r3

08008070 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008070:	f380 8810 	msr	PRIMASK, r0
 8008074:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008076:	46c0      	nop			; (mov r8, r8)
	...

08008080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008080:	f3ef 8009 	mrs	r0, PSP
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <pxCurrentTCBConst>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	3820      	subs	r0, #32
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800808e:	4644      	mov	r4, r8
 8008090:	464d      	mov	r5, r9
 8008092:	4656      	mov	r6, sl
 8008094:	465f      	mov	r7, fp
 8008096:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008098:	b508      	push	{r3, lr}
 800809a:	b672      	cpsid	i
 800809c:	f7ff f8b4 	bl	8007208 <vTaskSwitchContext>
 80080a0:	b662      	cpsie	i
 80080a2:	bc0c      	pop	{r2, r3}
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	6808      	ldr	r0, [r1, #0]
 80080a8:	3010      	adds	r0, #16
 80080aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80080ac:	46a0      	mov	r8, r4
 80080ae:	46a9      	mov	r9, r5
 80080b0:	46b2      	mov	sl, r6
 80080b2:	46bb      	mov	fp, r7
 80080b4:	f380 8809 	msr	PSP, r0
 80080b8:	3820      	subs	r0, #32
 80080ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80080bc:	4718      	bx	r3
 80080be:	46c0      	nop			; (mov r8, r8)

080080c0 <pxCurrentTCBConst>:
 80080c0:	2000077c 	.word	0x2000077c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80080c4:	46c0      	nop			; (mov r8, r8)
 80080c6:	46c0      	nop			; (mov r8, r8)

080080c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80080ce:	f7ff ffc9 	bl	8008064 <ulSetInterruptMaskFromISR>
 80080d2:	0003      	movs	r3, r0
 80080d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080d6:	f7fe ffe3 	bl	80070a0 <xTaskIncrementTick>
 80080da:	1e03      	subs	r3, r0, #0
 80080dc:	d003      	beq.n	80080e6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <SysTick_Handler+0x30>)
 80080e0:	2280      	movs	r2, #128	; 0x80
 80080e2:	0552      	lsls	r2, r2, #21
 80080e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	0018      	movs	r0, r3
 80080ea:	f7ff ffc1 	bl	8008070 <vClearInterruptMaskFromISR>
}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b002      	add	sp, #8
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	e000ed04 	.word	0xe000ed04

080080fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <prvSetupTimerInterrupt+0x34>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008106:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <prvSetupTimerInterrupt+0x38>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvSetupTimerInterrupt+0x3c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	22fa      	movs	r2, #250	; 0xfa
 8008112:	0091      	lsls	r1, r2, #2
 8008114:	0018      	movs	r0, r3
 8008116:	f7f7 fff7 	bl	8000108 <__udivsi3>
 800811a:	0003      	movs	r3, r0
 800811c:	001a      	movs	r2, r3
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <prvSetupTimerInterrupt+0x40>)
 8008120:	3a01      	subs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <prvSetupTimerInterrupt+0x34>)
 8008126:	2207      	movs	r2, #7
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	e000e010 	.word	0xe000e010
 8008134:	e000e018 	.word	0xe000e018
 8008138:	20000000 	.word	0x20000000
 800813c:	e000e014 	.word	0xe000e014

08008140 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800814c:	f7fe ff02 	bl	8006f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008150:	4b49      	ldr	r3, [pc, #292]	; (8008278 <pvPortMalloc+0x138>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008158:	f000 f8e0 	bl	800831c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800815c:	4b47      	ldr	r3, [pc, #284]	; (800827c <pvPortMalloc+0x13c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4013      	ands	r3, r2
 8008164:	d000      	beq.n	8008168 <pvPortMalloc+0x28>
 8008166:	e079      	b.n	800825c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d012      	beq.n	8008194 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800816e:	2208      	movs	r2, #8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	189b      	adds	r3, r3, r2
 8008174:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2207      	movs	r2, #7
 800817a:	4013      	ands	r3, r2
 800817c:	d00a      	beq.n	8008194 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2207      	movs	r2, #7
 8008182:	4393      	bics	r3, r2
 8008184:	3308      	adds	r3, #8
 8008186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2207      	movs	r2, #7
 800818c:	4013      	ands	r3, r2
 800818e:	d001      	beq.n	8008194 <pvPortMalloc+0x54>
 8008190:	b672      	cpsid	i
 8008192:	e7fe      	b.n	8008192 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d060      	beq.n	800825c <pvPortMalloc+0x11c>
 800819a:	4b39      	ldr	r3, [pc, #228]	; (8008280 <pvPortMalloc+0x140>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d85b      	bhi.n	800825c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081a4:	4b37      	ldr	r3, [pc, #220]	; (8008284 <pvPortMalloc+0x144>)
 80081a6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80081a8:	4b36      	ldr	r3, [pc, #216]	; (8008284 <pvPortMalloc+0x144>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ae:	e004      	b.n	80081ba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <pvPortMalloc+0x8c>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f1      	bne.n	80081b0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081cc:	4b2a      	ldr	r3, [pc, #168]	; (8008278 <pvPortMalloc+0x138>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d042      	beq.n	800825c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2208      	movs	r2, #8
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	2308      	movs	r3, #8
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d916      	bls.n	8008226 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	18d3      	adds	r3, r2, r3
 80081fe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2207      	movs	r2, #7
 8008204:	4013      	ands	r3, r2
 8008206:	d001      	beq.n	800820c <pvPortMalloc+0xcc>
 8008208:	b672      	cpsid	i
 800820a:	e7fe      	b.n	800820a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	0018      	movs	r0, r3
 8008222:	f000 f8db 	bl	80083dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008226:	4b16      	ldr	r3, [pc, #88]	; (8008280 <pvPortMalloc+0x140>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	4b13      	ldr	r3, [pc, #76]	; (8008280 <pvPortMalloc+0x140>)
 8008232:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <pvPortMalloc+0x140>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b13      	ldr	r3, [pc, #76]	; (8008288 <pvPortMalloc+0x148>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d203      	bcs.n	8008248 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008240:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <pvPortMalloc+0x140>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b10      	ldr	r3, [pc, #64]	; (8008288 <pvPortMalloc+0x148>)
 8008246:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <pvPortMalloc+0x13c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	431a      	orrs	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800825c:	f7fe fe86 	bl	8006f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2207      	movs	r2, #7
 8008264:	4013      	ands	r3, r2
 8008266:	d001      	beq.n	800826c <pvPortMalloc+0x12c>
 8008268:	b672      	cpsid	i
 800826a:	e7fe      	b.n	800826a <pvPortMalloc+0x12a>
	return pvReturn;
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b006      	add	sp, #24
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	200048ec 	.word	0x200048ec
 800827c:	200048f8 	.word	0x200048f8
 8008280:	200048f0 	.word	0x200048f0
 8008284:	200048e4 	.word	0x200048e4
 8008288:	200048f4 	.word	0x200048f4

0800828c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d035      	beq.n	800830a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800829e:	2308      	movs	r3, #8
 80082a0:	425b      	negs	r3, r3
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	18d3      	adds	r3, r2, r3
 80082a6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4b18      	ldr	r3, [pc, #96]	; (8008314 <vPortFree+0x88>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4013      	ands	r3, r2
 80082b6:	d101      	bne.n	80082bc <vPortFree+0x30>
 80082b8:	b672      	cpsid	i
 80082ba:	e7fe      	b.n	80082ba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <vPortFree+0x3c>
 80082c4:	b672      	cpsid	i
 80082c6:	e7fe      	b.n	80082c6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4b11      	ldr	r3, [pc, #68]	; (8008314 <vPortFree+0x88>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4013      	ands	r3, r2
 80082d2:	d01a      	beq.n	800830a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d116      	bne.n	800830a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <vPortFree+0x88>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	43db      	mvns	r3, r3
 80082e6:	401a      	ands	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082ec:	f7fe fe32 	bl	8006f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	4b08      	ldr	r3, [pc, #32]	; (8008318 <vPortFree+0x8c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	18d2      	adds	r2, r2, r3
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <vPortFree+0x8c>)
 80082fc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	0018      	movs	r0, r3
 8008302:	f000 f86b 	bl	80083dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008306:	f7fe fe31 	bl	8006f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	200048f8 	.word	0x200048f8
 8008318:	200048f0 	.word	0x200048f0

0800831c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008322:	2380      	movs	r3, #128	; 0x80
 8008324:	01db      	lsls	r3, r3, #7
 8008326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008328:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <prvHeapInit+0xa8>)
 800832a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2207      	movs	r2, #7
 8008330:	4013      	ands	r3, r2
 8008332:	d00c      	beq.n	800834e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3307      	adds	r3, #7
 8008338:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2207      	movs	r2, #7
 800833e:	4393      	bics	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <prvHeapInit+0xa8>)
 800834a:	18d3      	adds	r3, r2, r3
 800834c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008352:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <prvHeapInit+0xac>)
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008358:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <prvHeapInit+0xac>)
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	18d3      	adds	r3, r2, r3
 8008364:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008366:	2208      	movs	r2, #8
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2207      	movs	r2, #7
 8008372:	4393      	bics	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <prvHeapInit+0xb0>)
 800837a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800837c:	4b13      	ldr	r3, [pc, #76]	; (80083cc <prvHeapInit+0xb0>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008384:	4b11      	ldr	r3, [pc, #68]	; (80083cc <prvHeapInit+0xb0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <prvHeapInit+0xb0>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <prvHeapInit+0xb4>)
 80083a8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <prvHeapInit+0xb8>)
 80083b0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <prvHeapInit+0xbc>)
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	0612      	lsls	r2, r2, #24
 80083b8:	601a      	str	r2, [r3, #0]
}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	b004      	add	sp, #16
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	200008e4 	.word	0x200008e4
 80083c8:	200048e4 	.word	0x200048e4
 80083cc:	200048ec 	.word	0x200048ec
 80083d0:	200048f4 	.word	0x200048f4
 80083d4:	200048f0 	.word	0x200048f0
 80083d8:	200048f8 	.word	0x200048f8

080083dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <prvInsertBlockIntoFreeList+0xa8>)
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e002      	b.n	80083f0 <prvInsertBlockIntoFreeList+0x14>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d8f7      	bhi.n	80083ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	18d3      	adds	r3, r2, r3
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d108      	bne.n	800841e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	18d2      	adds	r2, r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	18d2      	adds	r2, r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d118      	bne.n	8008464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvInsertBlockIntoFreeList+0xac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d00d      	beq.n	800845a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	18d2      	adds	r2, r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	e008      	b.n	800846c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <prvInsertBlockIntoFreeList+0xac>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e003      	b.n	800846c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d002      	beq.n	800847a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	46bd      	mov	sp, r7
 800847e:	b004      	add	sp, #16
 8008480:	bd80      	pop	{r7, pc}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	200048e4 	.word	0x200048e4
 8008488:	200048ec 	.word	0x200048ec

0800848c <bMBSIsHdlValid>:

/* ----------------------- Start implementation -----------------------------*/

BOOL
bMBSIsHdlValid( const xMBSInternalHandle * pxIntHdl )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
    return MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) ? TRUE : FALSE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00f      	beq.n	80084ba <bMBSIsHdlValid+0x2e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d80b      	bhi.n	80084ba <bMBSIsHdlValid+0x2e>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	001a      	movs	r2, r3
 80084a8:	234c      	movs	r3, #76	; 0x4c
 80084aa:	435a      	muls	r2, r3
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <bMBSIsHdlValid+0x3c>)
 80084ae:	18d3      	adds	r3, r2, r3
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d101      	bne.n	80084ba <bMBSIsHdlValid+0x2e>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <bMBSIsHdlValid+0x30>
 80084ba:	2300      	movs	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
}
 80084be:	0018      	movs	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b002      	add	sp, #8
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	20004900 	.word	0x20004900

080084cc <vMBSResetHdl>:

STATIC void
vMBSResetHdl( xMBSInternalHandle * pxIntHdl )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
    UBYTE           ubIdx;

    pxIntHdl->eSlaveState = MBS_STATE_NONE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	711a      	strb	r2, [r3, #4]
    pxIntHdl->xFrameEventHdl = MBP_EVENTHDL_INVALID;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	60da      	str	r2, [r3, #12]
    pxIntHdl->xFrameHdl = MBS_FRAME_HANDLE_INVALID;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	611a      	str	r2, [r3, #16]
    pxIntHdl->ubSlaveAddress = MB_SER_SLAVE_ADDR_MIN;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
    pxIntHdl->bIsSerialDevice = FALSE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	715a      	strb	r2, [r3, #5]
    pxIntHdl->ubIdx = IDX_INVALID;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	22ff      	movs	r2, #255	; 0xff
 80084f6:	705a      	strb	r2, [r3, #1]
    pxIntHdl->pubFrameMBPDUBuffer = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	615a      	str	r2, [r3, #20]
    pxIntHdl->usFrameMBPDULength = 0;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	805a      	strh	r2, [r3, #2]
    pxIntHdl->pFrameSendFN = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	619a      	str	r2, [r3, #24]
    pxIntHdl->pFrameRecvFN = NULL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	61da      	str	r2, [r3, #28]
    pxIntHdl->pFrameCloseFN = NULL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	621a      	str	r2, [r3, #32]
    pxIntHdl->xMBSRegCB.peMBSRegInputCB = NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	625a      	str	r2, [r3, #36]	; 0x24
    pxIntHdl->xMBSRegCB.peMBSRegHoldingCB = NULL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	629a      	str	r2, [r3, #40]	; 0x28
    pxIntHdl->xMBSRegCB.peMBSDiscInputCB = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
    pxIntHdl->xMBSRegCB.peMBSCoilsCB = NULL;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
    pxIntHdl->xMBSRegCB.pvCtx = NULL;
#endif
#if MBS_NCUSTOM_FUNCTION_HANDLERS > 0
    for( ubIdx = 0; ubIdx < MBS_NCUSTOM_FUNCTION_HANDLERS; ubIdx++ )
 800852e:	230f      	movs	r3, #15
 8008530:	18fb      	adds	r3, r7, r3
 8008532:	2200      	movs	r2, #0
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	e017      	b.n	8008568 <vMBSResetHdl+0x9c>
    {
        pxIntHdl->arxMBCustomHandlers[ubIdx].peMBSFunctionCB = NULL;
 8008538:	210f      	movs	r1, #15
 800853a:	187b      	adds	r3, r7, r1
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	3307      	adds	r3, #7
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	18d3      	adds	r3, r2, r3
 8008546:	3308      	adds	r3, #8
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
        pxIntHdl->arxMBCustomHandlers[ubIdx].ubFunctionCode = MBS_FUNCCODE_NONE;
 800854c:	187b      	adds	r3, r7, r1
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	3307      	adds	r3, #7
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	18d3      	adds	r3, r2, r3
 8008558:	3304      	adds	r3, #4
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
    for( ubIdx = 0; ubIdx < MBS_NCUSTOM_FUNCTION_HANDLERS; ubIdx++ )
 800855e:	187b      	adds	r3, r7, r1
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	187b      	adds	r3, r7, r1
 8008564:	3201      	adds	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	230f      	movs	r3, #15
 800856a:	18fb      	adds	r3, r7, r3
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d9e2      	bls.n	8008538 <vMBSResetHdl+0x6c>
#endif
#if MBS_ENABLE_GATEWAY_MODE == 1
    pxIntHdl->peGatewayCB = NULL;
    pxIntHdl->bGatewayMode = FALSE;
#endif
}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	46c0      	nop			; (mov r8, r8)
 8008576:	46bd      	mov	sp, r7
 8008578:	b004      	add	sp, #16
 800857a:	bd80      	pop	{r7, pc}

0800857c <pxMBSGetNewHdl>:

#if MBS_TEST_INSTANCES == 0
STATIC
#endif
    xMBSInternalHandle * pxMBSGetNewHdl( void )
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENORES, eStatus2;
 8008582:	230f      	movs	r3, #15
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	2204      	movs	r2, #4
 8008588:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	60bb      	str	r3, [r7, #8]
    UBYTE           ubIdx;

    MBP_ENTER_CRITICAL_SECTION(  );
 800858e:	f003 f9cc 	bl	800b92a <vMBPEnterCritical>
    if( !bIsInitalized )
 8008592:	4b3c      	ldr	r3, [pc, #240]	; (8008684 <pxMBSGetNewHdl+0x108>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d118      	bne.n	80085cc <pxMBSGetNewHdl+0x50>
    {
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSInternalHdl ); ubIdx++ )
 800859a:	1dfb      	adds	r3, r7, #7
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	e00d      	b.n	80085be <pxMBSGetNewHdl+0x42>
        {
            vMBSResetHdl( &xMBSInternalHdl[ubIdx] );
 80085a2:	1dfb      	adds	r3, r7, #7
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	224c      	movs	r2, #76	; 0x4c
 80085a8:	435a      	muls	r2, r3
 80085aa:	4b37      	ldr	r3, [pc, #220]	; (8008688 <pxMBSGetNewHdl+0x10c>)
 80085ac:	18d3      	adds	r3, r2, r3
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff ff8c 	bl	80084cc <vMBSResetHdl>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSInternalHdl ); ubIdx++ )
 80085b4:	1dfb      	adds	r3, r7, #7
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	1dfb      	adds	r3, r7, #7
 80085ba:	3201      	adds	r2, #1
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	1dfb      	adds	r3, r7, #7
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d9ed      	bls.n	80085a2 <pxMBSGetNewHdl+0x26>
        }
        bIsInitalized = TRUE;
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <pxMBSGetNewHdl+0x108>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	701a      	strb	r2, [r3, #0]
    }
    for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSInternalHdl ); ubIdx++ )
 80085cc:	1dfb      	adds	r3, r7, #7
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e030      	b.n	8008636 <pxMBSGetNewHdl+0xba>
    {
        if( IDX_INVALID == xMBSInternalHdl[ubIdx].ubIdx )
 80085d4:	1dfb      	adds	r3, r7, #7
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4a2b      	ldr	r2, [pc, #172]	; (8008688 <pxMBSGetNewHdl+0x10c>)
 80085da:	214c      	movs	r1, #76	; 0x4c
 80085dc:	434b      	muls	r3, r1
 80085de:	18d3      	adds	r3, r2, r3
 80085e0:	3301      	adds	r3, #1
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2bff      	cmp	r3, #255	; 0xff
 80085e6:	d121      	bne.n	800862c <pxMBSGetNewHdl+0xb0>
        {
            pxIntHdl = &xMBSInternalHdl[ubIdx];
 80085e8:	1dfb      	adds	r3, r7, #7
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	224c      	movs	r2, #76	; 0x4c
 80085ee:	435a      	muls	r2, r3
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <pxMBSGetNewHdl+0x10c>)
 80085f2:	18d3      	adds	r3, r2, r3
 80085f4:	60bb      	str	r3, [r7, #8]
            pxIntHdl->ubIdx = ubIdx;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	1dfa      	adds	r2, r7, #7
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	705a      	strb	r2, [r3, #1]
            if( MB_ENOERR != ( eStatus2 = eMBPEventCreate( &( pxIntHdl->xFrameEventHdl ) ) ) )
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	330c      	adds	r3, #12
 8008602:	1dbc      	adds	r4, r7, #6
 8008604:	0018      	movs	r0, r3
 8008606:	f003 f887 	bl	800b718 <eMBPEventCreate>
 800860a:	0003      	movs	r3, r0
 800860c:	7023      	strb	r3, [r4, #0]
 800860e:	1dbb      	adds	r3, r7, #6
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <pxMBSGetNewHdl+0xa6>
            {
                eStatus = eStatus2;
 8008616:	230f      	movs	r3, #15
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	1dba      	adds	r2, r7, #6
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_ENOERR;
            }
            break;
 8008620:	e00d      	b.n	800863e <pxMBSGetNewHdl+0xc2>
                eStatus = MB_ENOERR;
 8008622:	230f      	movs	r3, #15
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
            break;
 800862a:	e008      	b.n	800863e <pxMBSGetNewHdl+0xc2>
    for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSInternalHdl ); ubIdx++ )
 800862c:	1dfb      	adds	r3, r7, #7
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	1dfb      	adds	r3, r7, #7
 8008632:	3201      	adds	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	1dfb      	adds	r3, r7, #7
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d9ca      	bls.n	80085d4 <pxMBSGetNewHdl+0x58>
        }
    }
    if( MB_ENOERR != eStatus )
 800863e:	230f      	movs	r3, #15
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00f      	beq.n	8008668 <pxMBSGetNewHdl+0xec>
    {
        if( NULL != pxIntHdl )
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <pxMBSGetNewHdl+0xec>
        {
            eStatus2 = eMBSReleaseHdl( pxIntHdl );
 800864e:	1dbc      	adds	r4, r7, #6
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	0018      	movs	r0, r3
 8008654:	f000 f81a 	bl	800868c <eMBSReleaseHdl>
 8008658:	0003      	movs	r3, r0
 800865a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus2 );
 800865c:	1dbb      	adds	r3, r7, #6
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <pxMBSGetNewHdl+0xec>
 8008664:	f003 f94e 	bl	800b904 <vMBPAssert>
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8008668:	f003 f966 	bl	800b938 <vMBPExitCritical>
    return MB_ENOERR == eStatus ? pxIntHdl : NULL;
 800866c:	230f      	movs	r3, #15
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <pxMBSGetNewHdl+0xfe>
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	e000      	b.n	800867c <pxMBSGetNewHdl+0x100>
 800867a:	2300      	movs	r3, #0
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	b005      	add	sp, #20
 8008682:	bd90      	pop	{r4, r7, pc}
 8008684:	200048fc 	.word	0x200048fc
 8008688:	20004900 	.word	0x20004900

0800868c <eMBSReleaseHdl>:
#if MBS_TEST_INSTANCES == 0
STATIC
#endif
    eMBErrorCode
eMBSReleaseHdl( xMBSInternalHandle * pxIntHdl )
{
 800868c:	b5b0      	push	{r4, r5, r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008694:	240f      	movs	r4, #15
 8008696:	193b      	adds	r3, r7, r4
 8008698:	2202      	movs	r2, #2
 800869a:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 800869c:	f003 f945 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d041      	beq.n	800872a <eMBSReleaseHdl+0x9e>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d83d      	bhi.n	800872a <eMBSReleaseHdl+0x9e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	001a      	movs	r2, r3
 80086b4:	234c      	movs	r3, #76	; 0x4c
 80086b6:	435a      	muls	r2, r3
 80086b8:	4b20      	ldr	r3, [pc, #128]	; (800873c <eMBSReleaseHdl+0xb0>)
 80086ba:	18d3      	adds	r3, r2, r3
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d133      	bne.n	800872a <eMBSReleaseHdl+0x9e>
    {
        if( NULL != pxIntHdl->pFrameCloseFN )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01e      	beq.n	8008708 <eMBSReleaseHdl+0x7c>
        {
            if( MB_ENOERR != ( eStatus = pxIntHdl->pFrameCloseFN( pxIntHdl ) ) )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	0025      	movs	r5, r4
 80086d0:	193c      	adds	r4, r7, r4
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	0010      	movs	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	0003      	movs	r3, r0
 80086da:	7023      	strb	r3, [r4, #0]
 80086dc:	197b      	adds	r3, r7, r5
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d122      	bne.n	800872a <eMBSReleaseHdl+0x9e>
                 * not close the frame instance.
                 */
            }
            else
            {
                if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <eMBSReleaseHdl+0x6a>
                {
                    vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	0018      	movs	r0, r3
 80086f2:	f003 f8e5 	bl	800b8c0 <vMBPEventDelete>
                }
                vMBSResetHdl( pxIntHdl );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	0018      	movs	r0, r3
 80086fa:	f7ff fee7 	bl	80084cc <vMBSResetHdl>
                eStatus = MB_ENOERR;
 80086fe:	230f      	movs	r3, #15
 8008700:	18fb      	adds	r3, r7, r3
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e010      	b.n	800872a <eMBSReleaseHdl+0x9e>
        /* If no frame handle has been attached we can only do a
         * partial cleanup.
         */
        else
        {
            if( MBP_EVENTHDL_INVALID != pxIntHdl->xFrameEventHdl )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <eMBSReleaseHdl+0x8e>
            {
                vMBPEventDelete( pxIntHdl->xFrameEventHdl );
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	0018      	movs	r0, r3
 8008716:	f003 f8d3 	bl	800b8c0 <vMBPEventDelete>
            }
            vMBSResetHdl( pxIntHdl );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	0018      	movs	r0, r3
 800871e:	f7ff fed5 	bl	80084cc <vMBSResetHdl>
            eStatus = MB_ENOERR;
 8008722:	230f      	movs	r3, #15
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800872a:	f003 f905 	bl	800b938 <vMBPExitCritical>

    return eStatus;
 800872e:	230f      	movs	r3, #15
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	781b      	ldrb	r3, [r3, #0]
}
 8008734:	0018      	movs	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	b004      	add	sp, #16
 800873a:	bdb0      	pop	{r4, r5, r7, pc}
 800873c:	20004900 	.word	0x20004900

08008740 <eMBSClose>:

eMBErrorCode
eMBSClose( xMBSHandle xHdl )
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8008748:	240f      	movs	r4, #15
 800874a:	193b      	adds	r3, r7, r4
 800874c:	2202      	movs	r2, #2
 800874e:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60bb      	str	r3, [r7, #8]

#if MBP_ADVA_STARTUP_SHUTDOWN_ENABLED == 1
    MBP_ENTER_CRITICAL_INIT(  );
#endif
    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <eMBSClose+0x4c>
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d814      	bhi.n	800878c <eMBSClose+0x4c>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	001a      	movs	r2, r3
 8008768:	234c      	movs	r3, #76	; 0x4c
 800876a:	435a      	muls	r2, r3
 800876c:	4b0b      	ldr	r3, [pc, #44]	; (800879c <eMBSClose+0x5c>)
 800876e:	18d3      	adds	r3, r2, r3
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d10a      	bne.n	800878c <eMBSClose+0x4c>
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 8008776:	f003 f8d8 	bl	800b92a <vMBPEnterCritical>
        eStatus = eMBSReleaseHdl( pxIntHdl );
 800877a:	193c      	adds	r4, r7, r4
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	0018      	movs	r0, r3
 8008780:	f7ff ff84 	bl	800868c <eMBSReleaseHdl>
 8008784:	0003      	movs	r3, r0
 8008786:	7023      	strb	r3, [r4, #0]
        MBP_EXIT_CRITICAL_SECTION(  );
 8008788:	f003 f8d6 	bl	800b938 <vMBPExitCritical>
    {
        vMBPLibraryUnload(  );
    }
    MBP_EXIT_CRITICAL_INIT(  );
#endif
    return eStatus;
 800878c:	230f      	movs	r3, #15
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	781b      	ldrb	r3, [r3, #0]
}
 8008792:	0018      	movs	r0, r3
 8008794:	46bd      	mov	sp, r7
 8008796:	b005      	add	sp, #20
 8008798:	bd90      	pop	{r4, r7, pc}
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	20004900 	.word	0x20004900

080087a0 <eMBSRegisterHoldingCB>:
    return eStatus;
}

eMBErrorCode
eMBSRegisterHoldingCB( xMBSHandle xHdl, peMBSRegisterHoldingCB peRegHoldingCB )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 80087aa:	210f      	movs	r1, #15
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	2202      	movs	r2, #2
 80087b0:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60bb      	str	r3, [r7, #8]

    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d013      	beq.n	80087e4 <eMBSRegisterHoldingCB+0x44>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d80f      	bhi.n	80087e4 <eMBSRegisterHoldingCB+0x44>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	001a      	movs	r2, r3
 80087ca:	234c      	movs	r3, #76	; 0x4c
 80087cc:	435a      	muls	r2, r3
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <eMBSRegisterHoldingCB+0x54>)
 80087d0:	18d3      	adds	r3, r2, r3
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d105      	bne.n	80087e4 <eMBSRegisterHoldingCB+0x44>
    {
        pxIntHdl->xMBSRegCB.peMBSRegHoldingCB = peRegHoldingCB;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	629a      	str	r2, [r3, #40]	; 0x28
        eStatus = MB_ENOERR;
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80087e4:	230f      	movs	r3, #15
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	781b      	ldrb	r3, [r3, #0]
}
 80087ea:	0018      	movs	r0, r3
 80087ec:	46bd      	mov	sp, r7
 80087ee:	b004      	add	sp, #16
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	20004900 	.word	0x20004900

080087f8 <eMBSPoll>:
    return eStatus;
}

eMBErrorCode
eMBSPoll( xMBSHandle xHdl )
{
 80087f8:	b5b0      	push	{r4, r5, r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 8008800:	2317      	movs	r3, #23
 8008802:	18fb      	adds	r3, r7, r3
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
    eMBException    eEXResponse;
    xMBSInternalHandle *pxIntHdl = xHdl;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	613b      	str	r3, [r7, #16]
    xMBPEventType   eEvent;
    UBYTE           ubSlaveAddress;
    UBYTE           ubIdx;
    UBYTE           ubFunctionCode;
    BOOL            bIsBroadcast = FALSE;
 800880c:	2314      	movs	r3, #20
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]

    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d100      	bne.n	800881c <eMBSPoll+0x24>
 800881a:	e198      	b.n	8008b4e <eMBSPoll+0x356>
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d900      	bls.n	8008826 <eMBSPoll+0x2e>
 8008824:	e193      	b.n	8008b4e <eMBSPoll+0x356>
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	001a      	movs	r2, r3
 800882c:	234c      	movs	r3, #76	; 0x4c
 800882e:	435a      	muls	r2, r3
 8008830:	4bc9      	ldr	r3, [pc, #804]	; (8008b58 <eMBSPoll+0x360>)
 8008832:	18d3      	adds	r3, r2, r3
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	429a      	cmp	r2, r3
 8008838:	d000      	beq.n	800883c <eMBSPoll+0x44>
 800883a:	e188      	b.n	8008b4e <eMBSPoll+0x356>
    {
#if MBS_POLL_SINGLE_CYCLE == 1
        do
        {
#endif
            switch ( pxIntHdl->eSlaveState )
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	791b      	ldrb	r3, [r3, #4]
 8008840:	2b05      	cmp	r3, #5
 8008842:	d900      	bls.n	8008846 <eMBSPoll+0x4e>
 8008844:	e179      	b.n	8008b3a <eMBSPoll+0x342>
 8008846:	009a      	lsls	r2, r3, #2
 8008848:	4bc4      	ldr	r3, [pc, #784]	; (8008b5c <eMBSPoll+0x364>)
 800884a:	18d3      	adds	r3, r2, r3
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	469f      	mov	pc, r3
            {
            case MBS_STATE_NONE:
                /* Note: Check if we still need the RTU startup code. */
                pxIntHdl->eSlaveState = MBS_STATE_WAITING;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2201      	movs	r2, #1
 8008854:	711a      	strb	r2, [r3, #4]
                break;
 8008856:	e170      	b.n	8008b3a <eMBSPoll+0x342>

            case MBS_STATE_WAITING:
                /* Wait for new MODBUS requests from a master. */
                if( bMBPEventGet( pxIntHdl->xFrameEventHdl, &eEvent ) )
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	240d      	movs	r4, #13
 800885e:	193a      	adds	r2, r7, r4
 8008860:	0011      	movs	r1, r2
 8008862:	0018      	movs	r0, r3
 8008864:	f002 fffa 	bl	800b85c <bMBPEventGet>
 8008868:	1e03      	subs	r3, r0, #0
 800886a:	d05c      	beq.n	8008926 <eMBSPoll+0x12e>
                {
                    switch ( ( eMBSEvent ) eEvent )
 800886c:	193b      	adds	r3, r7, r4
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d002      	beq.n	800887a <eMBSPoll+0x82>
 8008874:	2b02      	cmp	r3, #2
 8008876:	d04d      	beq.n	8008914 <eMBSPoll+0x11c>
 8008878:	e050      	b.n	800891c <eMBSPoll+0x124>
                    {
                    case MBS_EV_RECEIVED:
                        MBP_ASSERT( NULL != pxIntHdl->pFrameRecvFN );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <eMBSPoll+0x8e>
 8008882:	f003 f83f 	bl	800b904 <vMBPAssert>
                        eStatus2 = pxIntHdl->pFrameRecvFN( pxIntHdl, &ubSlaveAddress, &( pxIntHdl->usFrameMBPDULength ) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	3202      	adds	r2, #2
 800888e:	250f      	movs	r5, #15
 8008890:	197c      	adds	r4, r7, r5
 8008892:	210c      	movs	r1, #12
 8008894:	1879      	adds	r1, r7, r1
 8008896:	6938      	ldr	r0, [r7, #16]
 8008898:	4798      	blx	r3
 800889a:	0003      	movs	r3, r0
 800889c:	7023      	strb	r3, [r4, #0]
                                pxIntHdl->arubEventLog[pxIntHdl->arubEventLogCurPos] |= ( UBYTE ) MB_SER_RECEIVE_EVENT_COMMUNICATION_ERROR;
                            }
                            MB_UTILS_RINGBUFFER_INCREMENT( pxIntHdl->arubEventLogCurPos, pxIntHdl->arubEventLog );
                        }
#endif
                        switch ( eStatus2 )
 800889e:	197b      	adds	r3, r7, r5
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <eMBSPoll+0xb4>
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d020      	beq.n	80088ec <eMBSPoll+0xf4>
 80088aa:	e02b      	b.n	8008904 <eMBSPoll+0x10c>
#endif
                            /* MBS_ANY_ADDR (0xFF) is used in TCP mode for addressing 
                             * the slave. In serial mode we check if the frame is for 
                             * us.
                             */
                            if( ubSlaveAddress == pxIntHdl->ubSlaveAddress )
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	781a      	ldrb	r2, [r3, #0]
 80088b0:	230c      	movs	r3, #12
 80088b2:	18fb      	adds	r3, r7, r3
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d103      	bne.n	80088c2 <eMBSPoll+0xca>
                            {
                                pxIntHdl->eSlaveState = MBS_STATE_EXECUTE;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2202      	movs	r2, #2
 80088be:	711a      	strb	r2, [r3, #4]
                                if( MB_ENOERR != pxIntHdl->pFrameSendFN( pxIntHdl, 0 ) )
                                {
                                    pxIntHdl->eSlaveState = MBS_STATE_ERROR;
                                }
                            }
                            break;
 80088c0:	e024      	b.n	800890c <eMBSPoll+0x114>
                            else if( MB_SER_BROADCAST_ADDR == ubSlaveAddress )
 80088c2:	230c      	movs	r3, #12
 80088c4:	18fb      	adds	r3, r7, r3
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <eMBSPoll+0xdc>
                                pxIntHdl->eSlaveState = MBS_STATE_EXECUTE_BROADCAST;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2203      	movs	r2, #3
 80088d0:	711a      	strb	r2, [r3, #4]
                            break;
 80088d2:	e01b      	b.n	800890c <eMBSPoll+0x114>
                                if( MB_ENOERR != pxIntHdl->pFrameSendFN( pxIntHdl, 0 ) )
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	2100      	movs	r1, #0
 80088dc:	0010      	movs	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	1e03      	subs	r3, r0, #0
 80088e2:	d013      	beq.n	800890c <eMBSPoll+0x114>
                                    pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2205      	movs	r2, #5
 80088e8:	711a      	strb	r2, [r3, #4]
                            break;
 80088ea:	e00f      	b.n	800890c <eMBSPoll+0x114>

                            /* This frame was garbage. Do nothing. */
                        case MB_EIO:
                            /* Do a dummy transmission to reenable the receiver. */
                            if( MB_ENOERR != pxIntHdl->pFrameSendFN( pxIntHdl, 0 ) )
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	2100      	movs	r1, #0
 80088f4:	0010      	movs	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	1e03      	subs	r3, r0, #0
 80088fa:	d009      	beq.n	8008910 <eMBSPoll+0x118>
                            {
                                pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2205      	movs	r2, #5
 8008900:	711a      	strb	r2, [r3, #4]
                            }
                            /* Simply ignore this frame. No need to signal an error
                             * to the caller. 
                             */
                            break;
 8008902:	e005      	b.n	8008910 <eMBSPoll+0x118>

                        case MB_EPORTERR:
                        default:
                            /* Transistion to error state. */
                            pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2205      	movs	r2, #5
 8008908:	711a      	strb	r2, [r3, #4]
                            break;
 800890a:	e002      	b.n	8008912 <eMBSPoll+0x11a>
                            break;
 800890c:	46c0      	nop			; (mov r8, r8)
 800890e:	e00b      	b.n	8008928 <eMBSPoll+0x130>
                            break;
 8008910:	46c0      	nop			; (mov r8, r8)

                        }
                        break;
 8008912:	e009      	b.n	8008928 <eMBSPoll+0x130>
                        /* The porting layer has detected an error during runtime.
                         * For example a PPP link was shut down and the stack needs
                         * to be restarted.
                         */
                    case MBS_EV_ERROR:
                        pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2205      	movs	r2, #5
 8008918:	711a      	strb	r2, [r3, #4]
                        break;
 800891a:	e005      	b.n	8008928 <eMBSPoll+0x130>

                        /* Ignore all other events */
                    default:
                        eStatus = MB_ENOERR;
 800891c:	2317      	movs	r3, #23
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
                        break;
 8008924:	e000      	b.n	8008928 <eMBSPoll+0x130>
                    }
                }
 8008926:	46c0      	nop			; (mov r8, r8)
                break;
 8008928:	e107      	b.n	8008b3a <eMBSPoll+0x342>

                /* Fallthrough to next case which takes care of handling the
                 * function.
                 */
            case MBS_STATE_EXECUTE_BROADCAST:
                bIsBroadcast = TRUE;
 800892a:	2314      	movs	r3, #20
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	2201      	movs	r2, #1
 8008930:	701a      	strb	r2, [r3, #0]
                pxIntHdl->xFrameStat.ulNPacketsReceivedSelf += ( ULONG ) 1;
#endif
                /* The default is that we assume that no such function is
                 * available.
                 */
                eEXResponse = MB_PDU_EX_ILLEGAL_FUNCTION;
 8008932:	2316      	movs	r3, #22
 8008934:	18fb      	adds	r3, r7, r3
 8008936:	2201      	movs	r2, #1
 8008938:	701a      	strb	r2, [r3, #0]
                MBP_ASSERT( NULL != pxIntHdl->pubFrameMBPDUBuffer );
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <eMBSPoll+0x14e>
 8008942:	f002 ffdf 	bl	800b904 <vMBPAssert>
                ubFunctionCode = pxIntHdl->pubFrameMBPDUBuffer[MB_PDU_FUNC_OFF];
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	230e      	movs	r3, #14
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
#if MBS_NCUSTOM_FUNCTION_HANDLERS > 0
                for( ubIdx = 0; ubIdx < MBS_NCUSTOM_FUNCTION_HANDLERS; ubIdx++ )
 8008952:	2315      	movs	r3, #21
 8008954:	18fb      	adds	r3, r7, r3
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	e03d      	b.n	80089d8 <eMBSPoll+0x1e0>
                {
                    if( ( MBS_FUNCCODE_NONE != pxIntHdl->arxMBCustomHandlers[ubIdx].ubFunctionCode ) &&
 800895c:	2115      	movs	r1, #21
 800895e:	187b      	adds	r3, r7, r1
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	3307      	adds	r3, #7
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	18d3      	adds	r3, r2, r3
 800896a:	3304      	adds	r3, #4
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d02c      	beq.n	80089cc <eMBSPoll+0x1d4>
                        ( ubFunctionCode == pxIntHdl->arxMBCustomHandlers[ubIdx].ubFunctionCode ) )
 8008972:	187b      	adds	r3, r7, r1
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	3307      	adds	r3, #7
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	18d3      	adds	r3, r2, r3
 800897e:	3304      	adds	r3, #4
 8008980:	781b      	ldrb	r3, [r3, #0]
                    if( ( MBS_FUNCCODE_NONE != pxIntHdl->arxMBCustomHandlers[ubIdx].ubFunctionCode ) &&
 8008982:	220e      	movs	r2, #14
 8008984:	18ba      	adds	r2, r7, r2
 8008986:	7812      	ldrb	r2, [r2, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d11f      	bne.n	80089cc <eMBSPoll+0x1d4>
                    {
                        MBP_ASSERT( NULL != pxIntHdl->arxMBCustomHandlers[ubIdx].peMBSFunctionCB );
 800898c:	187b      	adds	r3, r7, r1
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	3307      	adds	r3, #7
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	18d3      	adds	r3, r2, r3
 8008998:	3308      	adds	r3, #8
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <eMBSPoll+0x1ac>
 80089a0:	f002 ffb0 	bl	800b904 <vMBPAssert>
                        eEXResponse =
                            pxIntHdl->arxMBCustomHandlers[ubIdx].peMBSFunctionCB( pxIntHdl->xMBSRegCB.pvCtx,
                                                                                  pxIntHdl->pubFrameMBPDUBuffer, &( pxIntHdl->usFrameMBPDULength ) );

#else
                        eEXResponse = pxIntHdl->arxMBCustomHandlers[ubIdx].peMBSFunctionCB( pxIntHdl->pubFrameMBPDUBuffer, &( pxIntHdl->usFrameMBPDULength ) );
 80089a4:	2315      	movs	r3, #21
 80089a6:	18fb      	adds	r3, r7, r3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	3307      	adds	r3, #7
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	18d3      	adds	r3, r2, r3
 80089b2:	3308      	adds	r3, #8
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6958      	ldr	r0, [r3, #20]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3302      	adds	r3, #2
 80089be:	2116      	movs	r1, #22
 80089c0:	187c      	adds	r4, r7, r1
 80089c2:	0019      	movs	r1, r3
 80089c4:	4790      	blx	r2
 80089c6:	0003      	movs	r3, r0
 80089c8:	7023      	strb	r3, [r4, #0]
#endif
                        break;
 80089ca:	e00a      	b.n	80089e2 <eMBSPoll+0x1ea>
                for( ubIdx = 0; ubIdx < MBS_NCUSTOM_FUNCTION_HANDLERS; ubIdx++ )
 80089cc:	2115      	movs	r1, #21
 80089ce:	187b      	adds	r3, r7, r1
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	187b      	adds	r3, r7, r1
 80089d4:	3201      	adds	r2, #1
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	2315      	movs	r3, #21
 80089da:	18fb      	adds	r3, r7, r3
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d9bc      	bls.n	800895c <eMBSPoll+0x164>
                }
#endif
                /* Check if frame has not already been handled by the custom
                 * function handlers.
                 */
                if( MB_PDU_EX_ILLEGAL_FUNCTION == eEXResponse )
 80089e2:	2316      	movs	r3, #22
 80089e4:	18fb      	adds	r3, r7, r3
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d13a      	bne.n	8008a62 <eMBSPoll+0x26a>
                {
                    for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( arxMBSDefaultHandlers ); ubIdx++ )
 80089ec:	2315      	movs	r3, #21
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	e030      	b.n	8008a58 <eMBSPoll+0x260>
                    {
                        if( ubFunctionCode == arxMBSDefaultHandlers[ubIdx].ubFunctionCode )
 80089f6:	2115      	movs	r1, #21
 80089f8:	187b      	adds	r3, r7, r1
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	4b58      	ldr	r3, [pc, #352]	; (8008b60 <eMBSPoll+0x368>)
 80089fe:	00d2      	lsls	r2, r2, #3
 8008a00:	5cd3      	ldrb	r3, [r2, r3]
 8008a02:	220e      	movs	r2, #14
 8008a04:	18ba      	adds	r2, r7, r2
 8008a06:	7812      	ldrb	r2, [r2, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d11f      	bne.n	8008a4c <eMBSPoll+0x254>
                        {
                            MBP_ASSERT( NULL != arxMBSDefaultHandlers[ubIdx].peFunctionCB );
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	4a53      	ldr	r2, [pc, #332]	; (8008b60 <eMBSPoll+0x368>)
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	18d3      	adds	r3, r2, r3
 8008a16:	3304      	adds	r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <eMBSPoll+0x22a>
 8008a1e:	f002 ff71 	bl	800b904 <vMBPAssert>
                            eEXResponse =
                                arxMBSDefaultHandlers[ubIdx].peFunctionCB( pxIntHdl->pubFrameMBPDUBuffer,
 8008a22:	2315      	movs	r3, #21
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	4a4d      	ldr	r2, [pc, #308]	; (8008b60 <eMBSPoll+0x368>)
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	3304      	adds	r3, #4
 8008a30:	681d      	ldr	r5, [r3, #0]
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6958      	ldr	r0, [r3, #20]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	1c99      	adds	r1, r3, #2
                                                                           &( pxIntHdl->usFrameMBPDULength ), &( pxIntHdl->xMBSRegCB ) );
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3324      	adds	r3, #36	; 0x24
                                arxMBSDefaultHandlers[ubIdx].peFunctionCB( pxIntHdl->pubFrameMBPDUBuffer,
 8008a3e:	2216      	movs	r2, #22
 8008a40:	18bc      	adds	r4, r7, r2
 8008a42:	001a      	movs	r2, r3
 8008a44:	47a8      	blx	r5
 8008a46:	0003      	movs	r3, r0
 8008a48:	7023      	strb	r3, [r4, #0]
                            break;
 8008a4a:	e00a      	b.n	8008a62 <eMBSPoll+0x26a>
                    for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( arxMBSDefaultHandlers ); ubIdx++ )
 8008a4c:	2115      	movs	r1, #21
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	3201      	adds	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	2315      	movs	r3, #21
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b0b      	cmp	r3, #11
 8008a60:	d9c9      	bls.n	80089f6 <eMBSPoll+0x1fe>
                        break;
                    }
                    MB_UTILS_RINGBUFFER_INCREMENT( pxIntHdl->arubEventLogCurPos, pxIntHdl->arubEventLog );
                }
#endif
                if( !bIsBroadcast )
 8008a62:	2314      	movs	r3, #20
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d12c      	bne.n	8008ac6 <eMBSPoll+0x2ce>
                {
                    /* In case of an exception we must build an exception frame. */
                    if( MB_PDU_EX_NONE != eEXResponse )
 8008a6c:	2016      	movs	r0, #22
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d023      	beq.n	8008abe <eMBSPoll+0x2c6>
                    {
                        pxIntHdl->usFrameMBPDULength = 0;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	805a      	strh	r2, [r3, #2]
                        pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) ( ubFunctionCode | 0x80 );
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	8852      	ldrh	r2, [r2, #2]
 8008a84:	189b      	adds	r3, r3, r2
 8008a86:	220e      	movs	r2, #14
 8008a88:	18ba      	adds	r2, r7, r2
 8008a8a:	7812      	ldrb	r2, [r2, #0]
 8008a8c:	2180      	movs	r1, #128	; 0x80
 8008a8e:	4249      	negs	r1, r1
 8008a90:	430a      	orrs	r2, r1
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
                        pxIntHdl->usFrameMBPDULength++;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	805a      	strh	r2, [r3, #2]
                        pxIntHdl->pubFrameMBPDUBuffer[pxIntHdl->usFrameMBPDULength] = ( UBYTE ) eEXResponse;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	8852      	ldrh	r2, [r2, #2]
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	183a      	adds	r2, r7, r0
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	701a      	strb	r2, [r3, #0]
                        pxIntHdl->usFrameMBPDULength++;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	805a      	strh	r2, [r3, #2]
                    }
                    pxIntHdl->eSlaveState = MBS_STATE_SEND;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2204      	movs	r2, #4
 8008ac2:	711a      	strb	r2, [r3, #4]
                    else
                    {
                        pxIntHdl->eSlaveState = MBS_STATE_WAITING;
                    }
                }
                break;
 8008ac4:	e039      	b.n	8008b3a <eMBSPoll+0x342>
                    if( MB_ENOERR != pxIntHdl->pFrameSendFN( pxIntHdl, 0 ) )
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	2100      	movs	r1, #0
 8008ace:	0010      	movs	r0, r2
 8008ad0:	4798      	blx	r3
 8008ad2:	1e03      	subs	r3, r0, #0
 8008ad4:	d003      	beq.n	8008ade <eMBSPoll+0x2e6>
                        pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	711a      	strb	r2, [r3, #4]
                break;
 8008adc:	e02d      	b.n	8008b3a <eMBSPoll+0x342>
                        pxIntHdl->eSlaveState = MBS_STATE_WAITING;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	711a      	strb	r2, [r3, #4]
                break;
 8008ae4:	e029      	b.n	8008b3a <eMBSPoll+0x342>
                }
                break;
#endif

            case MBS_STATE_SEND:
                MBP_ASSERT( NULL != pxIntHdl->pFrameSendFN );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <eMBSPoll+0x2fa>
 8008aee:	f002 ff09 	bl	800b904 <vMBPAssert>
                    {
                        pxIntHdl->xFrameStat.ulNBusyExceptionCount += ( ULONG ) 1;
                    }
                }
#endif
                eStatus2 = pxIntHdl->pFrameSendFN( pxIntHdl, pxIntHdl->usFrameMBPDULength );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	8851      	ldrh	r1, [r2, #2]
 8008afa:	250f      	movs	r5, #15
 8008afc:	197c      	adds	r4, r7, r5
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	0010      	movs	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	0003      	movs	r3, r0
 8008b06:	7023      	strb	r3, [r4, #0]
                switch ( eStatus2 )
 8008b08:	197b      	adds	r3, r7, r5
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <eMBSPoll+0x31e>
 8008b10:	2b05      	cmp	r3, #5
 8008b12:	d004      	beq.n	8008b1e <eMBSPoll+0x326>
 8008b14:	e007      	b.n	8008b26 <eMBSPoll+0x32e>
                {
                case MB_ENOERR:
                    pxIntHdl->eSlaveState = MBS_STATE_WAITING;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	711a      	strb	r2, [r3, #4]
                    break;
 8008b1c:	e007      	b.n	8008b2e <eMBSPoll+0x336>

                case MB_EIO:
                    pxIntHdl->eSlaveState = MBS_STATE_WAITING;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2201      	movs	r2, #1
 8008b22:	711a      	strb	r2, [r3, #4]
                    break;
 8008b24:	e003      	b.n	8008b2e <eMBSPoll+0x336>

                case MB_EPORTERR:
                default:
                    pxIntHdl->eSlaveState = MBS_STATE_ERROR;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	711a      	strb	r2, [r3, #4]
                    break;
 8008b2c:	46c0      	nop			; (mov r8, r8)
                }
                break;
 8008b2e:	e004      	b.n	8008b3a <eMBSPoll+0x342>

                /* The stack is broken and needs to be restarted. */
            case MBS_STATE_ERROR:
                eStatus = MB_EILLSTATE;
 8008b30:	2317      	movs	r3, #23
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	2206      	movs	r2, #6
 8008b36:	701a      	strb	r2, [r3, #0]
                break;
 8008b38:	46c0      	nop			; (mov r8, r8)
            }
#if MBS_POLL_SINGLE_CYCLE == 1
        }
        while( ( pxIntHdl->eSlaveState != MBS_STATE_ERROR ) && ( pxIntHdl->eSlaveState != MBS_STATE_WAITING ) );
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	791b      	ldrb	r3, [r3, #4]
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d010      	beq.n	8008b64 <eMBSPoll+0x36c>
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	791b      	ldrb	r3, [r3, #4]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d000      	beq.n	8008b4c <eMBSPoll+0x354>
 8008b4a:	e677      	b.n	800883c <eMBSPoll+0x44>
    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 8008b4c:	e00a      	b.n	8008b64 <eMBSPoll+0x36c>
#endif
    }
    else
    {
        eStatus = MB_EINVAL;
 8008b4e:	2317      	movs	r3, #23
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	2202      	movs	r2, #2
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e006      	b.n	8008b66 <eMBSPoll+0x36e>
 8008b58:	20004900 	.word	0x20004900
 8008b5c:	0800c5e8 	.word	0x0800c5e8
 8008b60:	0800c588 	.word	0x0800c588
    if( MB_IS_VALID_HDL( pxIntHdl, xMBSInternalHdl ) )
 8008b64:	46c0      	nop			; (mov r8, r8)
    }
    return eStatus;
 8008b66:	2317      	movs	r3, #23
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	781b      	ldrb	r3, [r3, #0]
}
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bdb0      	pop	{r4, r5, r7, pc}

08008b74 <eMBSSerialInit>:
eMBSSerialInit( xMBSHandle * pxHdl, eMBSerialMode eMode, UBYTE ubSlaveAddress, UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity, void *pvCtx )
#else
eMBErrorCode
eMBSSerialInit( xMBSHandle * pxHdl, eMBSerialMode eMode, UBYTE ubSlaveAddress, UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity )
#endif
{
 8008b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b76:	b089      	sub	sp, #36	; 0x24
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	000c      	movs	r4, r1
 8008b7e:	0010      	movs	r0, r2
 8008b80:	0019      	movs	r1, r3
 8008b82:	1cfb      	adds	r3, r7, #3
 8008b84:	1c22      	adds	r2, r4, #0
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	1cbb      	adds	r3, r7, #2
 8008b8a:	1c02      	adds	r2, r0, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	1c7b      	adds	r3, r7, #1
 8008b90:	1c0a      	adds	r2, r1, #0
 8008b92:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    UCHAR           ucStopBits;
    ucStopBits = MB_PAR_NONE == eParity ? ( UCHAR ) 2 : ( UCHAR ) 1;
 8008b94:	2324      	movs	r3, #36	; 0x24
 8008b96:	2208      	movs	r2, #8
 8008b98:	189b      	adds	r3, r3, r2
 8008b9a:	19db      	adds	r3, r3, r7
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d101      	bne.n	8008ba6 <eMBSSerialInit+0x32>
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	e000      	b.n	8008ba8 <eMBSSerialInit+0x34>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	260f      	movs	r6, #15
 8008baa:	19bb      	adds	r3, r7, r6
 8008bac:	701a      	strb	r2, [r3, #0]
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
    eStatus = eMBSSerialInitExt( pxHdl, eMode, ubSlaveAddress, ubPort, ulBaudRate, eParity, ucStopBits, pvCtx );
#else
    eStatus = eMBSSerialInitExt( pxHdl, eMode, ubSlaveAddress, ubPort, ulBaudRate, eParity, ucStopBits );
 8008bae:	230e      	movs	r3, #14
 8008bb0:	18fc      	adds	r4, r7, r3
 8008bb2:	1c7b      	adds	r3, r7, #1
 8008bb4:	781d      	ldrb	r5, [r3, #0]
 8008bb6:	1cbb      	adds	r3, r7, #2
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	1cfb      	adds	r3, r7, #3
 8008bbc:	7819      	ldrb	r1, [r3, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	19bb      	adds	r3, r7, r6
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	9302      	str	r3, [sp, #8]
 8008bc6:	2624      	movs	r6, #36	; 0x24
 8008bc8:	2308      	movs	r3, #8
 8008bca:	18f3      	adds	r3, r6, r3
 8008bcc:	19db      	adds	r3, r3, r7
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	002b      	movs	r3, r5
 8008bd8:	f000 f809 	bl	8008bee <eMBSSerialInitExt>
 8008bdc:	0003      	movs	r3, r0
 8008bde:	7023      	strb	r3, [r4, #0]
#endif
    return eStatus;
 8008be0:	230e      	movs	r3, #14
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	781b      	ldrb	r3, [r3, #0]
}
 8008be6:	0018      	movs	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b005      	add	sp, #20
 8008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bee <eMBSSerialInitExt>:
                   UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits, void *pvCtx )
#else
eMBErrorCode
eMBSSerialInitExt( xMBSHandle * pxHdl, eMBSerialMode eMode, UBYTE ubSlaveAddress, UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
#endif
{
 8008bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf0:	b089      	sub	sp, #36	; 0x24
 8008bf2:	af02      	add	r7, sp, #8
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	000c      	movs	r4, r1
 8008bf8:	0010      	movs	r0, r2
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	1cfb      	adds	r3, r7, #3
 8008bfe:	1c22      	adds	r2, r4, #0
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	1cbb      	adds	r3, r7, #2
 8008c04:	1c02      	adds	r2, r0, #0
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	1c7b      	adds	r3, r7, #1
 8008c0a:	1c0a      	adds	r2, r1, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxMBSNewIntHdl;
    eMBErrorCode    eStatus = MB_EINVAL, eStatus2;
 8008c0e:	2417      	movs	r4, #23
 8008c10:	193b      	adds	r3, r7, r4
 8008c12:	2202      	movs	r2, #2
 8008c14:	701a      	strb	r2, [r3, #0]
    if( 0 == ubMBSCountInstances(  ) )
    {
        vMBPLibraryLoad(  );
    }
#endif
    if( NULL != pxHdl )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d068      	beq.n	8008cee <eMBSSerialInitExt+0x100>
    {
        if( NULL == ( pxMBSNewIntHdl = pxMBSGetNewHdl(  ) ) )
 8008c1c:	f7ff fcae 	bl	800857c <pxMBSGetNewHdl>
 8008c20:	0003      	movs	r3, r0
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <eMBSSerialInitExt+0x44>
        {
            eStatus = MB_ENORES;
 8008c2a:	193b      	adds	r3, r7, r4
 8008c2c:	2204      	movs	r2, #4
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	e036      	b.n	8008ca0 <eMBSSerialInitExt+0xb2>
		}
#endif			
        else
        {

            switch ( eMode )
 8008c32:	1cfb      	adds	r3, r7, #3
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d017      	beq.n	8008c6a <eMBSSerialInitExt+0x7c>
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d12b      	bne.n	8008c96 <eMBSSerialInitExt+0xa8>
            {
#if MBS_ASCII_ENABLED == 1
            case MB_ASCII:
                eStatus = eMBSSerialASCIIInit( pxMBSNewIntHdl, ubPort, ulBaudRate, eParity, ucStopBits );
 8008c3e:	2317      	movs	r3, #23
 8008c40:	18fc      	adds	r4, r7, r3
 8008c42:	232c      	movs	r3, #44	; 0x2c
 8008c44:	2608      	movs	r6, #8
 8008c46:	199b      	adds	r3, r3, r6
 8008c48:	19db      	adds	r3, r3, r7
 8008c4a:	781d      	ldrb	r5, [r3, #0]
 8008c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4e:	1c7b      	adds	r3, r7, #1
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	6938      	ldr	r0, [r7, #16]
 8008c54:	2330      	movs	r3, #48	; 0x30
 8008c56:	199b      	adds	r3, r3, r6
 8008c58:	19db      	adds	r3, r3, r7
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	002b      	movs	r3, r5
 8008c60:	f000 f84c 	bl	8008cfc <eMBSSerialASCIIInit>
 8008c64:	0003      	movs	r3, r0
 8008c66:	7023      	strb	r3, [r4, #0]
                break;
 8008c68:	e01a      	b.n	8008ca0 <eMBSSerialInitExt+0xb2>
#endif

#if MBS_RTU_ENABLED == 1
            case MB_RTU:
                eStatus = eMBSSerialRTUInit( pxMBSNewIntHdl, ubPort, ulBaudRate, eParity, ucStopBits );
 8008c6a:	2317      	movs	r3, #23
 8008c6c:	18fc      	adds	r4, r7, r3
 8008c6e:	232c      	movs	r3, #44	; 0x2c
 8008c70:	2608      	movs	r6, #8
 8008c72:	199b      	adds	r3, r3, r6
 8008c74:	19db      	adds	r3, r3, r7
 8008c76:	781d      	ldrb	r5, [r3, #0]
 8008c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7a:	1c7b      	adds	r3, r7, #1
 8008c7c:	7819      	ldrb	r1, [r3, #0]
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	2330      	movs	r3, #48	; 0x30
 8008c82:	199b      	adds	r3, r3, r6
 8008c84:	19db      	adds	r3, r3, r7
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	002b      	movs	r3, r5
 8008c8c:	f001 ffe6 	bl	800ac5c <eMBSSerialRTUInit>
 8008c90:	0003      	movs	r3, r0
 8008c92:	7023      	strb	r3, [r4, #0]
                break;
 8008c94:	e004      	b.n	8008ca0 <eMBSSerialInitExt+0xb2>
#endif

            default:
                eStatus = MB_EINVAL;
 8008c96:	2317      	movs	r3, #23
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	701a      	strb	r2, [r3, #0]
                break;
 8008c9e:	46c0      	nop			; (mov r8, r8)
            }			
        }

        if( eStatus != MB_ENOERR )
 8008ca0:	2617      	movs	r6, #23
 8008ca2:	19bb      	adds	r3, r7, r6
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d017      	beq.n	8008cda <eMBSSerialInitExt+0xec>
        {
            if( NULL != pxMBSNewIntHdl )
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d010      	beq.n	8008cd2 <eMBSSerialInitExt+0xe4>
            {
                if( MB_ENOERR != ( eStatus2 = eMBSReleaseHdl( pxMBSNewIntHdl ) ) )
 8008cb0:	250f      	movs	r5, #15
 8008cb2:	197c      	adds	r4, r7, r5
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7ff fce8 	bl	800868c <eMBSReleaseHdl>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	7023      	strb	r3, [r4, #0]
 8008cc0:	002a      	movs	r2, r5
 8008cc2:	18bb      	adds	r3, r7, r2
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <eMBSSerialInitExt+0xe4>
                {
                    eStatus = eStatus2;
 8008cca:	19bb      	adds	r3, r7, r6
 8008ccc:	18ba      	adds	r2, r7, r2
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	701a      	strb	r2, [r3, #0]
                }
            }
            *pxHdl = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e009      	b.n	8008cee <eMBSSerialInitExt+0x100>
        }
        else
        {
            /*lint -e(613) */ pxMBSNewIntHdl->ubSlaveAddress = ubSlaveAddress;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1cba      	adds	r2, r7, #2
 8008cde:	7812      	ldrb	r2, [r2, #0]
 8008ce0:	701a      	strb	r2, [r3, #0]
            /*lint -e(613) */ pxMBSNewIntHdl->bIsSerialDevice = TRUE;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	715a      	strb	r2, [r3, #5]
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
            /*lint -e(613) */ pxMBSNewIntHdl->xMBSRegCB.pvCtx = pvCtx;
#endif
            *pxHdl = pxMBSNewIntHdl;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	601a      	str	r2, [r3, #0]
    {
        vMBPLibraryUnload(  );
    }
    MBP_EXIT_CRITICAL_INIT(  );
#endif
    return eStatus;
 8008cee:	2317      	movs	r3, #23
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	781b      	ldrb	r3, [r3, #0]
}
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b007      	add	sp, #28
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cfc <eMBSSerialASCIIInit>:
/* ----------------------- Static functions ---------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBSSerialASCIIInit( xMBSInternalHandle * pxIntHdl, UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 8008cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfe:	b08d      	sub	sp, #52	; 0x34
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	0008      	movs	r0, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	0019      	movs	r1, r3
 8008d0a:	230b      	movs	r3, #11
 8008d0c:	18fb      	adds	r3, r7, r3
 8008d0e:	1c02      	adds	r2, r0, #0
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	230a      	movs	r3, #10
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	1c0a      	adds	r2, r1, #0
 8008d18:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 8008d1a:	231f      	movs	r3, #31
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
    xMBSASCIIFrameHandle *pxFrameHdl = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61bb      	str	r3, [r7, #24]
    UBYTE           ubIdx;
    USHORT          usTimeoutMS;
	
#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d100      	bne.n	8008d2e <eMBSSerialASCIIInit+0x32>
 8008d2c:	e19f      	b.n	800906e <eMBSSerialASCIIInit+0x372>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d100      	bne.n	8008d36 <eMBSSerialASCIIInit+0x3a>
 8008d34:	e19b      	b.n	800906e <eMBSSerialASCIIInit+0x372>
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 8008d36:	f002 fdf8 	bl	800b92a <vMBPEnterCritical>
        if( !bIsInitialized )
 8008d3a:	4bd2      	ldr	r3, [pc, #840]	; (8009084 <eMBSSerialASCIIInit+0x388>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d000      	beq.n	8008d44 <eMBSSerialASCIIInit+0x48>
 8008d42:	e0d1      	b.n	8008ee8 <eMBSSerialASCIIInit+0x1ec>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSASCIIFrameHdl ); ubIdx++ )
 8008d44:	2317      	movs	r3, #23
 8008d46:	18fb      	adds	r3, r7, r3
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e0c3      	b.n	8008ed6 <eMBSSerialASCIIInit+0x1da>
            {
                HDL_RESET( &xMBSASCIIFrameHdl[ubIdx] );
 8008d4e:	2417      	movs	r4, #23
 8008d50:	193b      	adds	r3, r7, r4
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	49cc      	ldr	r1, [pc, #816]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008d56:	0013      	movs	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	189b      	adds	r3, r3, r2
 8008d5c:	00da      	lsls	r2, r3, #3
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	00d3      	lsls	r3, r2, #3
 8008d62:	001a      	movs	r2, r3
 8008d64:	23ff      	movs	r3, #255	; 0xff
 8008d66:	5453      	strb	r3, [r2, r1]
 8008d68:	193b      	adds	r3, r7, r4
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	48c6      	ldr	r0, [pc, #792]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008d6e:	2302      	movs	r3, #2
 8008d70:	33ff      	adds	r3, #255	; 0xff
 8008d72:	0019      	movs	r1, r3
 8008d74:	0013      	movs	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	189b      	adds	r3, r3, r2
 8008d7a:	00da      	lsls	r2, r3, #3
 8008d7c:	1ad2      	subs	r2, r2, r3
 8008d7e:	00d3      	lsls	r3, r2, #3
 8008d80:	001a      	movs	r2, r3
 8008d82:	1883      	adds	r3, r0, r2
 8008d84:	185b      	adds	r3, r3, r1
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	193b      	adds	r3, r7, r4
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	48be      	ldr	r0, [pc, #760]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008d90:	2381      	movs	r3, #129	; 0x81
 8008d92:	0059      	lsls	r1, r3, #1
 8008d94:	0013      	movs	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	189b      	adds	r3, r3, r2
 8008d9a:	00da      	lsls	r2, r3, #3
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	00d3      	lsls	r3, r2, #3
 8008da0:	001a      	movs	r2, r3
 8008da2:	1883      	adds	r3, r0, r2
 8008da4:	185b      	adds	r3, r3, r1
 8008da6:	2200      	movs	r2, #0
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	193b      	adds	r3, r7, r4
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	48b6      	ldr	r0, [pc, #728]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	0059      	lsls	r1, r3, #1
 8008db4:	0013      	movs	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	00da      	lsls	r2, r3, #3
 8008dbc:	1ad2      	subs	r2, r2, r3
 8008dbe:	00d3      	lsls	r3, r2, #3
 8008dc0:	001a      	movs	r2, r3
 8008dc2:	1883      	adds	r3, r0, r2
 8008dc4:	185b      	adds	r3, r3, r1
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	193b      	adds	r3, r7, r4
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	48ae      	ldr	r0, [pc, #696]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008dd0:	2382      	movs	r3, #130	; 0x82
 8008dd2:	0059      	lsls	r1, r3, #1
 8008dd4:	0013      	movs	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	189b      	adds	r3, r3, r2
 8008dda:	00da      	lsls	r2, r3, #3
 8008ddc:	1ad2      	subs	r2, r2, r3
 8008dde:	00d3      	lsls	r3, r2, #3
 8008de0:	001a      	movs	r2, r3
 8008de2:	1883      	adds	r3, r0, r2
 8008de4:	185b      	adds	r3, r3, r1
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	193b      	adds	r3, r7, r4
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	48a6      	ldr	r0, [pc, #664]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008df0:	2383      	movs	r3, #131	; 0x83
 8008df2:	0059      	lsls	r1, r3, #1
 8008df4:	0013      	movs	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	189b      	adds	r3, r3, r2
 8008dfa:	00da      	lsls	r2, r3, #3
 8008dfc:	1ad2      	subs	r2, r2, r3
 8008dfe:	00d3      	lsls	r3, r2, #3
 8008e00:	001a      	movs	r2, r3
 8008e02:	1883      	adds	r3, r0, r2
 8008e04:	185b      	adds	r3, r3, r1
 8008e06:	2200      	movs	r2, #0
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	193b      	adds	r3, r7, r4
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	489e      	ldr	r0, [pc, #632]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	0059      	lsls	r1, r3, #1
 8008e14:	0013      	movs	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	189b      	adds	r3, r3, r2
 8008e1a:	00da      	lsls	r2, r3, #3
 8008e1c:	1ad2      	subs	r2, r2, r3
 8008e1e:	00d3      	lsls	r3, r2, #3
 8008e20:	001a      	movs	r2, r3
 8008e22:	1883      	adds	r3, r0, r2
 8008e24:	185b      	adds	r3, r3, r1
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	193b      	adds	r3, r7, r4
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	4896      	ldr	r0, [pc, #600]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008e30:	2384      	movs	r3, #132	; 0x84
 8008e32:	0059      	lsls	r1, r3, #1
 8008e34:	0013      	movs	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	189b      	adds	r3, r3, r2
 8008e3a:	00da      	lsls	r2, r3, #3
 8008e3c:	1ad2      	subs	r2, r2, r3
 8008e3e:	00d3      	lsls	r3, r2, #3
 8008e40:	001a      	movs	r2, r3
 8008e42:	1883      	adds	r3, r0, r2
 8008e44:	185b      	adds	r3, r3, r1
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	193b      	adds	r3, r7, r4
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	488e      	ldr	r0, [pc, #568]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008e50:	2386      	movs	r3, #134	; 0x86
 8008e52:	0059      	lsls	r1, r3, #1
 8008e54:	0013      	movs	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	189b      	adds	r3, r3, r2
 8008e5a:	00da      	lsls	r2, r3, #3
 8008e5c:	1ad2      	subs	r2, r2, r3
 8008e5e:	00d3      	lsls	r3, r2, #3
 8008e60:	001a      	movs	r2, r3
 8008e62:	1883      	adds	r3, r0, r2
 8008e64:	185b      	adds	r3, r3, r1
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	193b      	adds	r3, r7, r4
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	4886      	ldr	r0, [pc, #536]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008e70:	238a      	movs	r3, #138	; 0x8a
 8008e72:	0059      	lsls	r1, r3, #1
 8008e74:	0013      	movs	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	189b      	adds	r3, r3, r2
 8008e7a:	00da      	lsls	r2, r3, #3
 8008e7c:	1ad2      	subs	r2, r2, r3
 8008e7e:	00d3      	lsls	r3, r2, #3
 8008e80:	001a      	movs	r2, r3
 8008e82:	1883      	adds	r3, r0, r2
 8008e84:	185b      	adds	r3, r3, r1
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	193b      	adds	r3, r7, r4
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	0013      	movs	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	00da      	lsls	r2, r3, #3
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	00d3      	lsls	r3, r2, #3
 8008e9a:	001a      	movs	r2, r3
 8008e9c:	4b7a      	ldr	r3, [pc, #488]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f003 fa2f 	bl	800c30a <memset>
 8008eac:	193b      	adds	r3, r7, r4
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	4875      	ldr	r0, [pc, #468]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008eb2:	2388      	movs	r3, #136	; 0x88
 8008eb4:	0059      	lsls	r1, r3, #1
 8008eb6:	0013      	movs	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	189b      	adds	r3, r3, r2
 8008ebc:	00da      	lsls	r2, r3, #3
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	00d3      	lsls	r3, r2, #3
 8008ec2:	001a      	movs	r2, r3
 8008ec4:	1883      	adds	r3, r0, r2
 8008ec6:	185b      	adds	r3, r3, r1
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSASCIIFrameHdl ); ubIdx++ )
 8008ecc:	193b      	adds	r3, r7, r4
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	193b      	adds	r3, r7, r4
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	2317      	movs	r3, #23
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d100      	bne.n	8008ee2 <eMBSSerialASCIIInit+0x1e6>
 8008ee0:	e735      	b.n	8008d4e <eMBSSerialASCIIInit+0x52>
            }
            bIsInitialized = TRUE;
 8008ee2:	4b68      	ldr	r3, [pc, #416]	; (8009084 <eMBSSerialASCIIInit+0x388>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSASCIIFrameHdl ); ubIdx++ )
 8008ee8:	2317      	movs	r3, #23
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	e025      	b.n	8008f3e <eMBSSerialASCIIInit+0x242>
        {
            if( IDX_INVALID == xMBSASCIIFrameHdl[ubIdx].ubIdx )
 8008ef2:	2017      	movs	r0, #23
 8008ef4:	183b      	adds	r3, r7, r0
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	4963      	ldr	r1, [pc, #396]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008efa:	0013      	movs	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	00da      	lsls	r2, r3, #3
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	00d3      	lsls	r3, r2, #3
 8008f06:	001a      	movs	r2, r3
 8008f08:	5c53      	ldrb	r3, [r2, r1]
 8008f0a:	2bff      	cmp	r3, #255	; 0xff
 8008f0c:	d111      	bne.n	8008f32 <eMBSSerialASCIIInit+0x236>
            {
                pxFrameHdl = &xMBSASCIIFrameHdl[ubIdx];
 8008f0e:	0001      	movs	r1, r0
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	0013      	movs	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	189b      	adds	r3, r3, r2
 8008f1a:	00da      	lsls	r2, r3, #3
 8008f1c:	1ad2      	subs	r2, r2, r3
 8008f1e:	00d3      	lsls	r3, r2, #3
 8008f20:	001a      	movs	r2, r3
 8008f22:	4b59      	ldr	r3, [pc, #356]	; (8009088 <eMBSSerialASCIIInit+0x38c>)
 8008f24:	18d3      	adds	r3, r2, r3
 8008f26:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	187a      	adds	r2, r7, r1
 8008f2c:	7812      	ldrb	r2, [r2, #0]
 8008f2e:	701a      	strb	r2, [r3, #0]
                break;
 8008f30:	e00a      	b.n	8008f48 <eMBSSerialASCIIInit+0x24c>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSASCIIFrameHdl ); ubIdx++ )
 8008f32:	2117      	movs	r1, #23
 8008f34:	187b      	adds	r3, r7, r1
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	187b      	adds	r3, r7, r1
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	2317      	movs	r3, #23
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0d4      	beq.n	8008ef2 <eMBSSerialASCIIInit+0x1f6>
            }
        }

        if( NULL != pxFrameHdl )
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d100      	bne.n	8008f50 <eMBSSerialASCIIInit+0x254>
 8008f4e:	e087      	b.n	8009060 <eMBSSerialASCIIInit+0x364>
        {
            usTimeoutMS = ( USHORT ) ( MBS_ASCII_TIMEOUT_SEC * 1000U );
 8008f50:	2314      	movs	r3, #20
 8008f52:	18fb      	adds	r3, r7, r3
 8008f54:	22fa      	movs	r2, #250	; 0xfa
 8008f56:	0092      	lsls	r2, r2, #2
 8008f58:	801a      	strh	r2, [r3, #0]

            if( MB_ENOERR !=
                ( eStatus2 =
                  eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ( UCHAR ) ubPort, ulBaudRate, 7, eParity, ucStopBits, pxIntHdl
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	3315      	adds	r3, #21
 8008f5e:	33ff      	adds	r3, #255	; 0xff
 8008f60:	0018      	movs	r0, r3
 8008f62:	2513      	movs	r5, #19
 8008f64:	197c      	adds	r4, r7, r5
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	230b      	movs	r3, #11
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	7819      	ldrb	r1, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	9302      	str	r3, [sp, #8]
 8008f72:	2330      	movs	r3, #48	; 0x30
 8008f74:	2608      	movs	r6, #8
 8008f76:	199b      	adds	r3, r3, r6
 8008f78:	19db      	adds	r3, r3, r7
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	230a      	movs	r3, #10
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2307      	movs	r3, #7
 8008f88:	f002 fcde 	bl	800b948 <eMBPSerialInit>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	7023      	strb	r3, [r4, #0]
            if( MB_ENOERR !=
 8008f90:	197b      	adds	r3, r7, r5
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <eMBSSerialASCIIInit+0x2a8>
#if MBP_SUPPORT_FRAME_ANALYZE_STAT_API == 1
                  , NULL
#endif
				  ) ) )
            {
                eStatus = eStatus2;
 8008f98:	231f      	movs	r3, #31
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	197a      	adds	r2, r7, r5
 8008f9e:	7812      	ldrb	r2, [r2, #0]
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e053      	b.n	800904c <eMBSSerialASCIIInit+0x350>
            }
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS,
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	330d      	adds	r3, #13
 8008fa8:	33ff      	adds	r3, #255	; 0xff
 8008faa:	0018      	movs	r0, r3
 8008fac:	2613      	movs	r6, #19
 8008fae:	19bc      	adds	r4, r7, r6
 8008fb0:	68fd      	ldr	r5, [r7, #12]
 8008fb2:	4a36      	ldr	r2, [pc, #216]	; (800908c <eMBSSerialASCIIInit+0x390>)
 8008fb4:	2314      	movs	r3, #20
 8008fb6:	18fb      	adds	r3, r7, r3
 8008fb8:	8819      	ldrh	r1, [r3, #0]
 8008fba:	002b      	movs	r3, r5
 8008fbc:	f002 ffaa 	bl	800bf14 <eMBPTimerInit>
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	7023      	strb	r3, [r4, #0]
 8008fc4:	19bb      	adds	r3, r7, r6
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <eMBSSerialASCIIInit+0x2dc>
                                                              bMBSSerialASCIITimerCB, pxIntHdl ) ) )
            {
                eStatus = eStatus2;
 8008fcc:	231f      	movs	r3, #31
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	19ba      	adds	r2, r7, r6
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	e039      	b.n	800904c <eMBSSerialASCIIInit+0x350>
            }
#if MBS_ASCII_BACKOF_TIME_MS > 0
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xBackOffTmrHdl ),
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	3311      	adds	r3, #17
 8008fdc:	33ff      	adds	r3, #255	; 0xff
 8008fde:	0018      	movs	r0, r3
 8008fe0:	2513      	movs	r5, #19
 8008fe2:	197c      	adds	r4, r7, r5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <eMBSSerialASCIIInit+0x394>)
 8008fe8:	2105      	movs	r1, #5
 8008fea:	f002 ff93 	bl	800bf14 <eMBPTimerInit>
 8008fee:	0003      	movs	r3, r0
 8008ff0:	7023      	strb	r3, [r4, #0]
 8008ff2:	002a      	movs	r2, r5
 8008ff4:	18bb      	adds	r3, r7, r2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <eMBSSerialASCIIInit+0x30c>
                                                              MBS_ASCII_BACKOF_TIME_MS,
                                                              bMBSSerialASCIIBackOffTimerCB, pxIntHdl ) ) )
            {
                eStatus = eStatus2;
 8008ffc:	231f      	movs	r3, #31
 8008ffe:	18fb      	adds	r3, r7, r3
 8009000:	18ba      	adds	r2, r7, r2
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e021      	b.n	800904c <eMBSSerialASCIIInit+0x350>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocl stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubASCIIFrameBuffer[MBS_SER_PDU_PDU_OFF];
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	1c9a      	adds	r2, r3, #2
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	615a      	str	r2, [r3, #20]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	611a      	str	r2, [r3, #16]
                pxIntHdl->pFrameSendFN = eMBSSerialASCIIFrameSend;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a1e      	ldr	r2, [pc, #120]	; (8009094 <eMBSSerialASCIIInit+0x398>)
 800901a:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameRecvFN = eMBSSerialASCIIFrameReceive;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a1e      	ldr	r2, [pc, #120]	; (8009098 <eMBSSerialASCIIInit+0x39c>)
 8009020:	61da      	str	r2, [r3, #28]
                pxIntHdl->pFrameCloseFN = eMBSSerialASCIIFrameClose;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4a1d      	ldr	r2, [pc, #116]	; (800909c <eMBSSerialASCIIInit+0x3a0>)
 8009026:	621a      	str	r2, [r3, #32]
                eStatus = MB_ENOERR;
 8009028:	241f      	movs	r4, #31
 800902a:	193b      	adds	r3, r7, r4
 800902c:	2200      	movs	r2, #0
 800902e:	701a      	strb	r2, [r3, #0]
                {
                    eStatus = MB_EPORTERR;
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR !=
                    eMBPSerialRxEnable( pxFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	238a      	movs	r3, #138	; 0x8a
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	58d3      	ldr	r3, [r2, r3]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <eMBSSerialASCIIInit+0x3a4>)
 800903a:	0011      	movs	r1, r2
 800903c:	0018      	movs	r0, r3
 800903e:	f002 feb1 	bl	800bda4 <eMBPSerialRxEnable>
 8009042:	1e03      	subs	r3, r0, #0
                if( MB_ENOERR !=
 8009044:	d002      	beq.n	800904c <eMBSSerialASCIIInit+0x350>
                {
                    eStatus = MB_EPORTERR;
 8009046:	193b      	adds	r3, r7, r4
 8009048:	2203      	movs	r2, #3
 800904a:	701a      	strb	r2, [r3, #0]
#else
#error "Define either MBS_SERIAL_API_VERSION=1 or 2!"
#endif
            }

            if( MB_ENOERR != eStatus )
 800904c:	231f      	movs	r3, #31
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <eMBSSerialASCIIInit+0x36c>
            {
                ( void )eMBSSerialASCIIFrameCloseInternal( pxFrameHdl );
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	0018      	movs	r0, r3
 800905a:	f000 fc25 	bl	80098a8 <eMBSSerialASCIIFrameCloseInternal>
 800905e:	e003      	b.n	8009068 <eMBSSerialASCIIInit+0x36c>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 8009060:	231f      	movs	r3, #31
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	2204      	movs	r2, #4
 8009066:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 8009068:	f002 fc66 	bl	800b938 <vMBPExitCritical>
 800906c:	e003      	b.n	8009076 <eMBSSerialASCIIInit+0x37a>
    }
    else
    {
        eStatus = MB_EINVAL;
 800906e:	231f      	movs	r3, #31
 8009070:	18fb      	adds	r3, r7, r3
 8009072:	2202      	movs	r2, #2
 8009074:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009076:	231f      	movs	r3, #31
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	781b      	ldrb	r3, [r3, #0]
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b009      	add	sp, #36	; 0x24
 8009082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009084:	20004998 	.word	0x20004998
 8009088:	2000499c 	.word	0x2000499c
 800908c:	080097d3 	.word	0x080097d3
 8009090:	08009835 	.word	0x08009835
 8009094:	080090a5 	.word	0x080090a5
 8009098:	08009239 	.word	0x08009239
 800909c:	0800986b 	.word	0x0800986b
 80090a0:	0800951d 	.word	0x0800951d

080090a4 <eMBSSerialASCIIFrameSend>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialASCIIFrameSend( xMBHandle xHdl, USHORT usMBPDULength )
{
 80090a4:	b5b0      	push	{r4, r5, r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	000a      	movs	r2, r1
 80090ae:	1cbb      	adds	r3, r7, #2
 80090b0:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 80090b2:	2417      	movs	r4, #23
 80090b4:	193b      	adds	r3, r7, r4
 80090b6:	2202      	movs	r2, #2
 80090b8:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	613b      	str	r3, [r7, #16]
    xMBAnalyzerFrame xAnalyzerFrame;
    xMBPTimeStamp   xTimeStamp;
#endif

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( bMBSIsHdlValid( pxIntHdl ) )
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	0018      	movs	r0, r3
 80090c2:	f7ff f9e3 	bl	800848c <bMBSIsHdlValid>
 80090c6:	1e03      	subs	r3, r0, #0
 80090c8:	d100      	bne.n	80090cc <eMBSSerialASCIIFrameSend+0x28>
 80090ca:	e0a8      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	60fb      	str	r3, [r7, #12]

        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBSASCIIFrameHdl ) )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d100      	bne.n	80090da <eMBSSerialASCIIFrameSend+0x36>
 80090d8:	e0a1      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d000      	beq.n	80090e4 <eMBSSerialASCIIFrameSend+0x40>
 80090e2:	e09c      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	001a      	movs	r2, r3
 80090ea:	0013      	movs	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	00da      	lsls	r2, r3, #3
 80090f2:	1ad2      	subs	r2, r2, r3
 80090f4:	00d3      	lsls	r3, r2, #3
 80090f6:	001a      	movs	r2, r3
 80090f8:	4b4c      	ldr	r3, [pc, #304]	; (800922c <eMBSSerialASCIIFrameSend+0x188>)
 80090fa:	18d3      	adds	r3, r2, r3
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d000      	beq.n	8009104 <eMBSSerialASCIIFrameSend+0x60>
 8009102:	e08c      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
        {
            if( 0 == usMBPDULength )
 8009104:	1cbb      	adds	r3, r7, #2
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d113      	bne.n	8009134 <eMBSSerialASCIIFrameSend+0x90>
                {
                    eStatus = MB_EPORTERR;
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR !=
                    eMBPSerialRxEnable( pxASCIIHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	238a      	movs	r3, #138	; 0x8a
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	58d3      	ldr	r3, [r2, r3]
 8009114:	4a46      	ldr	r2, [pc, #280]	; (8009230 <eMBSSerialASCIIFrameSend+0x18c>)
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f002 fe43 	bl	800bda4 <eMBPSerialRxEnable>
 800911e:	1e03      	subs	r3, r0, #0
                if( MB_ENOERR !=
 8009120:	d003      	beq.n	800912a <eMBSSerialASCIIFrameSend+0x86>
                {
                    eStatus = MB_EPORTERR;
 8009122:	193b      	adds	r3, r7, r4
 8009124:	2203      	movs	r2, #3
 8009126:	701a      	strb	r2, [r3, #0]
 8009128:	e079      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
#else
#error "Define either MBS_SERIAL_API_VERSION=1 or 2!"
#endif
                else
                {
                    eStatus = MB_ENOERR;
 800912a:	2317      	movs	r3, #23
 800912c:	18fb      	adds	r3, r7, r3
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
 8009132:	e074      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
                }
            }
            else if( usMBPDULength <= ( MBS_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 1 /* LRC */  ) ) )
 8009134:	1cbb      	adds	r3, r7, #2
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	2bfd      	cmp	r3, #253	; 0xfd
 800913a:	d870      	bhi.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
            {
                MBP_ASSERT( STATE_TX_IDLE == pxASCIIHdl->eSndState );
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	2382      	movs	r3, #130	; 0x82
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	5cd3      	ldrb	r3, [r2, r3]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <eMBSSerialASCIIFrameSend+0xaa>
 800914a:	f002 fbdb 	bl	800b904 <vMBPAssert>

                /* Added the MODBUS ASCII header (= slave address) */
                pxASCIIHdl->ubASCIIFrameBuffer[MBS_SER_PDU_ADDR_OFF] = pxIntHdl->ubSlaveAddress;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	781a      	ldrb	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	705a      	strb	r2, [r3, #1]
                pxASCIIHdl->usSndBufferCnt = 1;
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	2383      	movs	r3, #131	; 0x83
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	2101      	movs	r1, #1
 800915e:	52d1      	strh	r1, [r2, r3]

                /* MODBUS PDU is already embedded in the frame. */
                pxASCIIHdl->usSndBufferCnt += usMBPDULength;
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	2383      	movs	r3, #131	; 0x83
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	5ad3      	ldrh	r3, [r2, r3]
 8009168:	b29a      	uxth	r2, r3
 800916a:	1cbb      	adds	r3, r7, #2
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	18d3      	adds	r3, r2, r3
 8009170:	b299      	uxth	r1, r3
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	2383      	movs	r3, #131	; 0x83
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	52d1      	strh	r1, [r2, r3]

                ubLRC =
                    ubMBSSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ),
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	1c58      	adds	r0, r3, #1
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	2383      	movs	r3, #131	; 0x83
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	5ad3      	ldrh	r3, [r2, r3]
 8009186:	b29b      	uxth	r3, r3
 8009188:	250b      	movs	r5, #11
 800918a:	197c      	adds	r4, r7, r5
 800918c:	0019      	movs	r1, r3
 800918e:	f000 fcbf 	bl	8009b10 <ubMBSSerialASCIILRC>
 8009192:	0003      	movs	r3, r0
 8009194:	7023      	strb	r3, [r4, #0]
                                         pxASCIIHdl->usSndBufferCnt );
                pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usSndBufferCnt++] = ubLRC;
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	2383      	movs	r3, #131	; 0x83
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	5ad3      	ldrh	r3, [r2, r3]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	b290      	uxth	r0, r2
 80091a4:	68f9      	ldr	r1, [r7, #12]
 80091a6:	2283      	movs	r2, #131	; 0x83
 80091a8:	0052      	lsls	r2, r2, #1
 80091aa:	5288      	strh	r0, [r1, r2]
 80091ac:	001a      	movs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	197a      	adds	r2, r7, r5
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	705a      	strb	r2, [r3, #1]

                /* Enable transmitter */
                pxASCIIHdl->eSndState = STATE_TX_START;
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	2382      	movs	r3, #130	; 0x82
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	2101      	movs	r1, #1
 80091c0:	54d1      	strb	r1, [r2, r3]
                pxASCIIHdl->pubSndBufferCur = ( UBYTE * ) & pxASCIIHdl->ubASCIIFrameBuffer[MBS_SER_PDU_ADDR_OFF];
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1c59      	adds	r1, r3, #1
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	2384      	movs	r3, #132	; 0x84
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	50d1      	str	r1, [r2, r3]
                    eStatus = MB_EPORTERR;
                    HDL_RESET_TX( pxASCIIHdl );
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR !=
                    eMBPSerialTxEnable( pxASCIIHdl->xSerHdl,
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	238a      	movs	r3, #138	; 0x8a
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	58d3      	ldr	r3, [r2, r3]
 80091d6:	4a17      	ldr	r2, [pc, #92]	; (8009234 <eMBSSerialASCIIFrameSend+0x190>)
 80091d8:	0011      	movs	r1, r2
 80091da:	0018      	movs	r0, r3
 80091dc:	f002 fd1a 	bl	800bc14 <eMBPSerialTxEnable>
 80091e0:	1e03      	subs	r3, r0, #0
                if( MB_ENOERR !=
 80091e2:	d018      	beq.n	8009216 <eMBSSerialASCIIFrameSend+0x172>
                                        ( pbMBPSerialTransmitterEmptyCB ) bMBSSerialTransmitterEmptyAPIV1CB ) )
                {
                    eStatus = MB_EPORTERR;
 80091e4:	2317      	movs	r3, #23
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	2203      	movs	r2, #3
 80091ea:	701a      	strb	r2, [r3, #0]
                    HDL_RESET_TX( pxASCIIHdl );
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	2382      	movs	r3, #130	; 0x82
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	2100      	movs	r1, #0
 80091f4:	54d1      	strb	r1, [r2, r3]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	2383      	movs	r3, #131	; 0x83
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	2100      	movs	r1, #0
 80091fe:	52d1      	strh	r1, [r2, r3]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	2100      	movs	r1, #0
 8009208:	54d1      	strb	r1, [r2, r3]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	2384      	movs	r3, #132	; 0x84
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	2100      	movs	r1, #0
 8009212:	50d1      	str	r1, [r2, r3]
 8009214:	e003      	b.n	800921e <eMBSSerialASCIIFrameSend+0x17a>
                    {
                        vMBPGetTimeStamp( &xTimeStamp );
                        pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                    }
#endif
                    eStatus = MB_ENOERR;
 8009216:	2317      	movs	r3, #23
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	2200      	movs	r2, #0
 800921c:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return eStatus;
 800921e:	2317      	movs	r3, #23
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	781b      	ldrb	r3, [r3, #0]
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b006      	add	sp, #24
 800922a:	bdb0      	pop	{r4, r5, r7, pc}
 800922c:	2000499c 	.word	0x2000499c
 8009230:	0800951d 	.word	0x0800951d
 8009234:	08009311 	.word	0x08009311

08009238 <eMBSSerialASCIIFrameReceive>:

STATIC          eMBErrorCode
eMBSSerialASCIIFrameReceive( xMBHandle xHdl, UBYTE * pubSlaveAddress, USHORT * pusMBPDULength )
    MB_CDECL_SUFFIX
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b089      	sub	sp, #36	; 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8009244:	241f      	movs	r4, #31
 8009246:	193b      	adds	r3, r7, r4
 8009248:	2202      	movs	r2, #2
 800924a:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	61bb      	str	r3, [r7, #24]
    xMBAnalyzerFrame xAnalyzerFrame;
    xMBPTimeStamp   xTimeStamp;
#endif

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( bMBSIsHdlValid( pxIntHdl ) )
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	0018      	movs	r0, r3
 8009254:	f7ff f91a 	bl	800848c <bMBSIsHdlValid>
 8009258:	1e03      	subs	r3, r0, #0
 800925a:	d050      	beq.n	80092fe <eMBSSerialASCIIFrameReceive+0xc6>
#else
    if( TRUE )
#endif
    {
        pxASCIIHdl = pxIntHdl->xFrameHdl;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	617b      	str	r3, [r7, #20]
        if( MB_IS_VALID_HDL( pxASCIIHdl, xMBSASCIIFrameHdl ) )
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d04a      	beq.n	80092fe <eMBSSerialASCIIFrameReceive+0xc6>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d146      	bne.n	80092fe <eMBSSerialASCIIFrameReceive+0xc6>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	001a      	movs	r2, r3
 8009276:	0013      	movs	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	189b      	adds	r3, r3, r2
 800927c:	00da      	lsls	r2, r3, #3
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	00d3      	lsls	r3, r2, #3
 8009282:	001a      	movs	r2, r3
 8009284:	4b21      	ldr	r3, [pc, #132]	; (800930c <eMBSSerialASCIIFrameReceive+0xd4>)
 8009286:	18d3      	adds	r3, r2, r3
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	429a      	cmp	r2, r3
 800928c:	d137      	bne.n	80092fe <eMBSSerialASCIIFrameReceive+0xc6>
        {
            if( ( pxASCIIHdl->usRcvBufferPos >= MBS_SER_PDU_SIZE_MIN ) &&
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	2381      	movs	r3, #129	; 0x81
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	5ad3      	ldrh	r3, [r2, r3]
 8009296:	b29b      	uxth	r3, r3
 8009298:	2b03      	cmp	r3, #3
 800929a:	d91d      	bls.n	80092d8 <eMBSSerialASCIIFrameReceive+0xa0>
                ( ubMBSSerialASCIILRC( ( UBYTE * ) & ( pxASCIIHdl->ubASCIIFrameBuffer[0] ), pxASCIIHdl->usRcvBufferPos )
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	1c58      	adds	r0, r3, #1
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	2381      	movs	r3, #129	; 0x81
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	5ad3      	ldrh	r3, [r2, r3]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	0019      	movs	r1, r3
 80092ac:	f000 fc30 	bl	8009b10 <ubMBSSerialASCIILRC>
 80092b0:	1e03      	subs	r3, r0, #0
            if( ( pxASCIIHdl->usRcvBufferPos >= MBS_SER_PDU_SIZE_MIN ) &&
 80092b2:	d111      	bne.n	80092d8 <eMBSSerialASCIIFrameReceive+0xa0>
#if MBS_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_ASCII;
                xAnalyzerFrame.x.xASCIIHeader.ubSlaveAddress = pxASCIIHdl->ubASCIIFrameBuffer[MBS_SER_PDU_ADDR_OFF];
                xAnalyzerFrame.x.xASCIIHeader.ubLRC = pxASCIIHdl->ubASCIIFrameBuffer[pxASCIIHdl->usRcvBufferPos - 1];
#endif
                *pubSlaveAddress = pxASCIIHdl->ubASCIIFrameBuffer[MBS_SER_PDU_ADDR_OFF];
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	701a      	strb	r2, [r3, #0]
                *pusMBPDULength =
                    ( USHORT ) ( pxASCIIHdl->usRcvBufferPos - ( MBS_SER_PDU_PDU_OFF + MBS_SER_PDU_SIZE_LRC ) );
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	2381      	movs	r3, #129	; 0x81
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	5ad3      	ldrh	r3, [r2, r3]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b02      	subs	r3, #2
 80092ca:	b29a      	uxth	r2, r3
                *pusMBPDULength =
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	801a      	strh	r2, [r3, #0]
                eStatus = MB_ENOERR;
 80092d0:	193b      	adds	r3, r7, r4
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e003      	b.n	80092e0 <eMBSSerialASCIIFrameReceive+0xa8>
                pxIntHdl->xFrameStat.ulNChecksumErrors += ( ULONG )1;
#endif
#if MBS_ENABLE_PROT_ANALYZER_INTERFACE == 1
                xAnalyzerFrame.eFrameType = MB_FRAME_DAMAGED;
#endif
                eStatus = MB_EIO;
 80092d8:	231f      	movs	r3, #31
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	2205      	movs	r2, #5
 80092de:	701a      	strb	r2, [r3, #0]
            {
                vMBPGetTimeStamp( &xTimeStamp );
                pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
            }
#endif
            HDL_RESET_RX( pxASCIIHdl );
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	2302      	movs	r3, #2
 80092e4:	33ff      	adds	r3, #255	; 0xff
 80092e6:	2100      	movs	r1, #0
 80092e8:	54d1      	strb	r1, [r2, r3]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	2381      	movs	r3, #129	; 0x81
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	2100      	movs	r1, #0
 80092f2:	52d1      	strh	r1, [r2, r3]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	2100      	movs	r1, #0
 80092fc:	54d1      	strb	r1, [r2, r3]
        }
    }

    return eStatus;
 80092fe:	231f      	movs	r3, #31
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	781b      	ldrb	r3, [r3, #0]
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b009      	add	sp, #36	; 0x24
 800930a:	bd90      	pop	{r4, r7, pc}
 800930c:	2000499c 	.word	0x2000499c

08009310 <bMBSSerialTransmitterEmptyAPIV1CB>:
#pragma interrupt_level 1
#endif
STATIC          BOOL
bMBSSerialTransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
    MB_CDECL_SUFFIX
{
 8009310:	b5b0      	push	{r4, r5, r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
    BOOL            bMoreTxData = FALSE;
 800931a:	2317      	movs	r3, #23
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 8009322:	2316      	movs	r3, #22
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	613b      	str	r3, [r7, #16]
    xMBSASCIIFrameHandle *pxASCIIFrameHdl;
    eMBErrorCode    eStatus;

    MBP_ENTER_CRITICAL_SECTION(  );
 800932e:	f002 fafc 	bl	800b92a <vMBPEnterCritical>
    pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( NULL != pxASCIIFrameHdl );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <bMBSSerialTransmitterEmptyAPIV1CB+0x32>
 800933e:	f002 fae1 	bl	800b904 <vMBPAssert>
    MBP_ASSERT( pxASCIIFrameHdl->eRcvState == STATE_RX_IDLE );
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	2302      	movs	r3, #2
 8009346:	33ff      	adds	r3, #255	; 0xff
 8009348:	5cd3      	ldrb	r3, [r2, r3]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <bMBSSerialTransmitterEmptyAPIV1CB+0x44>
 8009350:	f002 fad8 	bl	800b904 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eSndState )
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	2382      	movs	r3, #130	; 0x82
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	5cd3      	ldrb	r3, [r2, r3]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b03      	cmp	r3, #3
 8009360:	d100      	bne.n	8009364 <bMBSSerialTransmitterEmptyAPIV1CB+0x54>
 8009362:	e084      	b.n	800946e <bMBSSerialTransmitterEmptyAPIV1CB+0x15e>
 8009364:	dd00      	ble.n	8009368 <bMBSSerialTransmitterEmptyAPIV1CB+0x58>
 8009366:	e094      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>
 8009368:	2b02      	cmp	r3, #2
 800936a:	d019      	beq.n	80093a0 <bMBSSerialTransmitterEmptyAPIV1CB+0x90>
 800936c:	dd00      	ble.n	8009370 <bMBSSerialTransmitterEmptyAPIV1CB+0x60>
 800936e:	e090      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d100      	bne.n	8009376 <bMBSSerialTransmitterEmptyAPIV1CB+0x66>
 8009374:	e088      	b.n	8009488 <bMBSSerialTransmitterEmptyAPIV1CB+0x178>
 8009376:	2b01      	cmp	r3, #1
 8009378:	d000      	beq.n	800937c <bMBSSerialTransmitterEmptyAPIV1CB+0x6c>
 800937a:	e08a      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>
    {
    case STATE_TX_START:
        *pubValue = MBS_ASCII_START;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	223a      	movs	r2, #58	; 0x3a
 8009380:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_DATA;
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	2382      	movs	r3, #130	; 0x82
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	2102      	movs	r1, #2
 800938a:	54d1      	strb	r1, [r2, r3]
        pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	2380      	movs	r3, #128	; 0x80
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	2100      	movs	r1, #0
 8009394:	54d1      	strb	r1, [r2, r3]
        bMoreTxData = TRUE;
 8009396:	2317      	movs	r3, #23
 8009398:	18fb      	adds	r3, r7, r3
 800939a:	2201      	movs	r2, #1
 800939c:	701a      	strb	r2, [r3, #0]
        break;
 800939e:	e078      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>

    case STATE_TX_DATA:
        if( pxASCIIFrameHdl->usSndBufferCnt > 0 )
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	2383      	movs	r3, #131	; 0x83
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	5ad3      	ldrh	r3, [r2, r3]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d052      	beq.n	8009454 <bMBSSerialTransmitterEmptyAPIV1CB+0x144>
        {
            MBP_ASSERT( NULL != pxASCIIFrameHdl->pubSndBufferCur );
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	2384      	movs	r3, #132	; 0x84
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	58d3      	ldr	r3, [r2, r3]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <bMBSSerialTransmitterEmptyAPIV1CB+0xae>
 80093ba:	f002 faa3 	bl	800b904 <vMBPAssert>
            switch ( pxASCIIFrameHdl->eBytePos )
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	5cd3      	ldrb	r3, [r2, r3]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <bMBSSerialTransmitterEmptyAPIV1CB+0xc0>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d014      	beq.n	80093f8 <bMBSSerialTransmitterEmptyAPIV1CB+0xe8>
 80093ce:	e03c      	b.n	800944a <bMBSSerialTransmitterEmptyAPIV1CB+0x13a>
            {
            case BYTE_HIGH_NIBBLE:
                *pubValue = ubMBSSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) >> 4 ) );
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	2384      	movs	r3, #132	; 0x84
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	58d3      	ldr	r3, [r2, r3]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	0018      	movs	r0, r3
 80093e0:	f000 fb73 	bl	8009aca <ubMBSSerialASCIIBIN2CHAR>
 80093e4:	0003      	movs	r3, r0
 80093e6:	001a      	movs	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	2380      	movs	r3, #128	; 0x80
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	2101      	movs	r1, #1
 80093f4:	54d1      	strb	r1, [r2, r3]
                break;
 80093f6:	e028      	b.n	800944a <bMBSSerialTransmitterEmptyAPIV1CB+0x13a>

            case BYTE_LOW_NIBBLE:
                *pubValue = ubMBSSerialASCIIBIN2CHAR( ( UBYTE ) ( *( pxASCIIFrameHdl->pubSndBufferCur ) & 0x0F ) );
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	2384      	movs	r3, #132	; 0x84
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	58d3      	ldr	r3, [r2, r3]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	220f      	movs	r2, #15
 8009404:	4013      	ands	r3, r2
 8009406:	b2db      	uxtb	r3, r3
 8009408:	0018      	movs	r0, r3
 800940a:	f000 fb5e 	bl	8009aca <ubMBSSerialASCIIBIN2CHAR>
 800940e:	0003      	movs	r3, r0
 8009410:	001a      	movs	r2, r3
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	701a      	strb	r2, [r3, #0]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	2380      	movs	r3, #128	; 0x80
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	2100      	movs	r1, #0
 800941e:	54d1      	strb	r1, [r2, r3]
                pxASCIIFrameHdl->pubSndBufferCur++;
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	2384      	movs	r3, #132	; 0x84
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	58d3      	ldr	r3, [r2, r3]
 8009428:	1c59      	adds	r1, r3, #1
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	2384      	movs	r3, #132	; 0x84
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	50d1      	str	r1, [r2, r3]
                pxASCIIFrameHdl->usSndBufferCnt--;
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	2383      	movs	r3, #131	; 0x83
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	5ad3      	ldrh	r3, [r2, r3]
 800943a:	b29b      	uxth	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	b299      	uxth	r1, r3
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	2383      	movs	r3, #131	; 0x83
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	52d1      	strh	r1, [r2, r3]
                break;
 8009448:	46c0      	nop			; (mov r8, r8)
            }
            bMoreTxData = TRUE;
 800944a:	2317      	movs	r3, #23
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	2201      	movs	r2, #1
 8009450:	701a      	strb	r2, [r3, #0]
        {
            *pubValue = MBS_ASCII_DEFAULT_CR;
            bMoreTxData = TRUE;
            pxASCIIFrameHdl->eSndState = STATE_TX_END;
        }
        break;
 8009452:	e01e      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>
            *pubValue = MBS_ASCII_DEFAULT_CR;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	220d      	movs	r2, #13
 8009458:	701a      	strb	r2, [r3, #0]
            bMoreTxData = TRUE;
 800945a:	2317      	movs	r3, #23
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	2201      	movs	r2, #1
 8009460:	701a      	strb	r2, [r3, #0]
            pxASCIIFrameHdl->eSndState = STATE_TX_END;
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	2382      	movs	r3, #130	; 0x82
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	2103      	movs	r1, #3
 800946a:	54d1      	strb	r1, [r2, r3]
        break;
 800946c:	e011      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>

    case STATE_TX_END:
        *pubValue = MBS_ASCII_DEFAULT_LF;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	220a      	movs	r2, #10
 8009472:	701a      	strb	r2, [r3, #0]
        bMoreTxData = TRUE;
 8009474:	2317      	movs	r3, #23
 8009476:	18fb      	adds	r3, r7, r3
 8009478:	2201      	movs	r2, #1
 800947a:	701a      	strb	r2, [r3, #0]
        pxASCIIFrameHdl->eSndState = STATE_TX_IDLE;
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	2382      	movs	r3, #130	; 0x82
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	2100      	movs	r1, #0
 8009484:	54d1      	strb	r1, [r2, r3]
        break;
 8009486:	e004      	b.n	8009492 <bMBSSerialTransmitterEmptyAPIV1CB+0x182>

    case STATE_TX_IDLE:
        bEnableRx = TRUE;
 8009488:	2316      	movs	r3, #22
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        break;
 8009490:	46c0      	nop			; (mov r8, r8)
    }
    if( !bMoreTxData )
 8009492:	2317      	movs	r3, #23
 8009494:	18fb      	adds	r3, r7, r3
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d113      	bne.n	80094c4 <bMBSSerialTransmitterEmptyAPIV1CB+0x1b4>
    {
        HDL_RESET_TX( pxASCIIFrameHdl );
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	2382      	movs	r3, #130	; 0x82
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	2100      	movs	r1, #0
 80094a4:	54d1      	strb	r1, [r2, r3]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	2383      	movs	r3, #131	; 0x83
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	2100      	movs	r1, #0
 80094ae:	52d1      	strh	r1, [r2, r3]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	2380      	movs	r3, #128	; 0x80
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	2100      	movs	r1, #0
 80094b8:	54d1      	strb	r1, [r2, r3]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	2384      	movs	r3, #132	; 0x84
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	2100      	movs	r1, #0
 80094c2:	50d1      	str	r1, [r2, r3]
    {
#if MBS_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 80094c4:	2316      	movs	r3, #22
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d01a      	beq.n	8009504 <bMBSSerialTransmitterEmptyAPIV1CB+0x1f4>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else
        if( MB_ENOERR !=
            eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	238a      	movs	r3, #138	; 0x8a
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	58d3      	ldr	r3, [r2, r3]
 80094d6:	4a10      	ldr	r2, [pc, #64]	; (8009518 <bMBSSerialTransmitterEmptyAPIV1CB+0x208>)
 80094d8:	0011      	movs	r1, r2
 80094da:	0018      	movs	r0, r3
 80094dc:	f002 fc62 	bl	800bda4 <eMBPSerialRxEnable>
 80094e0:	1e03      	subs	r3, r0, #0
        if( MB_ENOERR !=
 80094e2:	d00f      	beq.n	8009504 <bMBSSerialTransmitterEmptyAPIV1CB+0x1f4>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	250b      	movs	r5, #11
 80094ea:	197c      	adds	r4, r7, r5
 80094ec:	2102      	movs	r1, #2
 80094ee:	0018      	movs	r0, r3
 80094f0:	f002 f988 	bl	800b804 <eMBPEventPost>
 80094f4:	0003      	movs	r3, r0
 80094f6:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80094f8:	197b      	adds	r3, r7, r5
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <bMBSSerialTransmitterEmptyAPIV1CB+0x1f4>
 8009500:	f002 fa00 	bl	800b904 <vMBPAssert>
        }
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009504:	f002 fa18 	bl	800b938 <vMBPExitCritical>
    return bMoreTxData;
 8009508:	2317      	movs	r3, #23
 800950a:	18fb      	adds	r3, r7, r3
 800950c:	781b      	ldrb	r3, [r3, #0]
}
 800950e:	0018      	movs	r0, r3
 8009510:	46bd      	mov	sp, r7
 8009512:	b006      	add	sp, #24
 8009514:	bdb0      	pop	{r4, r5, r7, pc}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	0800951d 	.word	0x0800951d

0800951c <vMBPSerialReceiverAPIV1CB>:
#pragma interrupt_level 1
#endif
STATIC void
vMBPSerialReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
    MB_CDECL_SUFFIX
{
 800951c:	b5b0      	push	{r4, r5, r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	000a      	movs	r2, r1
 8009526:	1cfb      	adds	r3, r7, #3
 8009528:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	613b      	str	r3, [r7, #16]
    xMBSASCIIFrameHandle *pxASCIIFrameHdl;
    eMBErrorCode    eStatus;
    UBYTE           ubBinValue;
    BOOL            bEnableTimer = TRUE;
 800952e:	2317      	movs	r3, #23
 8009530:	18fb      	adds	r3, r7, r3
 8009532:	2201      	movs	r2, #1
 8009534:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 8009536:	f002 f9f8 	bl	800b92a <vMBPEnterCritical>
    pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( NULL != pxASCIIFrameHdl );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <vMBPSerialReceiverAPIV1CB+0x2e>
 8009546:	f002 f9dd 	bl	800b904 <vMBPAssert>
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	2382      	movs	r3, #130	; 0x82
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	5cd3      	ldrb	r3, [r2, r3]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <vMBPSerialReceiverAPIV1CB+0x40>
 8009558:	f002 f9d4 	bl	800b904 <vMBPAssert>

    switch ( pxASCIIFrameHdl->eRcvState )
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	2302      	movs	r3, #2
 8009560:	33ff      	adds	r3, #255	; 0xff
 8009562:	5cd3      	ldrb	r3, [r2, r3]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d100      	bne.n	800956c <vMBPSerialReceiverAPIV1CB+0x50>
 800956a:	e073      	b.n	8009654 <vMBPSerialReceiverAPIV1CB+0x138>
 800956c:	dd00      	ble.n	8009570 <vMBPSerialReceiverAPIV1CB+0x54>
 800956e:	e0d7      	b.n	8009720 <vMBPSerialReceiverAPIV1CB+0x204>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d100      	bne.n	8009576 <vMBPSerialReceiverAPIV1CB+0x5a>
 8009574:	e0ca      	b.n	800970c <vMBPSerialReceiverAPIV1CB+0x1f0>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d000      	beq.n	800957c <vMBPSerialReceiverAPIV1CB+0x60>
 800957a:	e0d1      	b.n	8009720 <vMBPSerialReceiverAPIV1CB+0x204>
    {
    case STATE_RX_RCV:
        if( MBS_ASCII_START == ubValue )
 800957c:	1cfb      	adds	r3, r7, #3
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b3a      	cmp	r3, #58	; 0x3a
 8009582:	d10a      	bne.n	800959a <vMBPSerialReceiverAPIV1CB+0x7e>
        {
            /* Empty receive buffer. */
            pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	2380      	movs	r3, #128	; 0x80
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	2100      	movs	r1, #0
 800958c:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->usRcvBufferPos = 0;
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	2381      	movs	r3, #129	; 0x81
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	2100      	movs	r1, #0
 8009596:	52d1      	strh	r1, [r2, r3]
                pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos++] |= ubBinValue;
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
                break;
            }
        }
        break;
 8009598:	e0e0      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>
        else if( MBS_ASCII_DEFAULT_CR == ubValue )
 800959a:	1cfb      	adds	r3, r7, #3
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b0d      	cmp	r3, #13
 80095a0:	d105      	bne.n	80095ae <vMBPSerialReceiverAPIV1CB+0x92>
            pxASCIIFrameHdl->eRcvState = STATE_RX_WAIT_EOF;
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	2302      	movs	r3, #2
 80095a6:	33ff      	adds	r3, #255	; 0xff
 80095a8:	2102      	movs	r1, #2
 80095aa:	54d1      	strb	r1, [r2, r3]
        break;
 80095ac:	e0d6      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>
            ubBinValue = ubMBSSerialASCIICHAR2BIN( ubValue );
 80095ae:	230a      	movs	r3, #10
 80095b0:	18fc      	adds	r4, r7, r3
 80095b2:	1cfb      	adds	r3, r7, #3
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	0018      	movs	r0, r3
 80095b8:	f000 fa62 	bl	8009a80 <ubMBSSerialASCIICHAR2BIN>
 80095bc:	0003      	movs	r3, r0
 80095be:	7023      	strb	r3, [r4, #0]
            switch ( pxASCIIFrameHdl->eBytePos )
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	2380      	movs	r3, #128	; 0x80
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	5cd3      	ldrb	r3, [r2, r3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <vMBPSerialReceiverAPIV1CB+0xb6>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d021      	beq.n	8009614 <vMBPSerialReceiverAPIV1CB+0xf8>
        break;
 80095d0:	e0c4      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>
                if( pxASCIIFrameHdl->usRcvBufferPos < MBS_SER_PDU_SIZE_MAX )
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	2381      	movs	r3, #129	; 0x81
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	5ad3      	ldrh	r3, [r2, r3]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2bfe      	cmp	r3, #254	; 0xfe
 80095de:	d813      	bhi.n	8009608 <vMBPSerialReceiverAPIV1CB+0xec>
                    pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] =
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	2381      	movs	r3, #129	; 0x81
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	5ad3      	ldrh	r3, [r2, r3]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	0019      	movs	r1, r3
                        ( UBYTE ) ( ubBinValue << 4 );
 80095ec:	230a      	movs	r3, #10
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	b2da      	uxtb	r2, r3
                    pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos] =
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	185b      	adds	r3, r3, r1
 80095fa:	705a      	strb	r2, [r3, #1]
                    pxASCIIFrameHdl->eBytePos = BYTE_LOW_NIBBLE;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	2380      	movs	r3, #128	; 0x80
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	2101      	movs	r1, #1
 8009604:	54d1      	strb	r1, [r2, r3]
                break;
 8009606:	e024      	b.n	8009652 <vMBPSerialReceiverAPIV1CB+0x136>
                    pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	2302      	movs	r3, #2
 800960c:	33ff      	adds	r3, #255	; 0xff
 800960e:	2103      	movs	r1, #3
 8009610:	54d1      	strb	r1, [r2, r3]
                break;
 8009612:	e01e      	b.n	8009652 <vMBPSerialReceiverAPIV1CB+0x136>
                pxASCIIFrameHdl->ubASCIIFrameBuffer[pxASCIIFrameHdl->usRcvBufferPos++] |= ubBinValue;
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	2381      	movs	r3, #129	; 0x81
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	5ad3      	ldrh	r3, [r2, r3]
 800961c:	b29b      	uxth	r3, r3
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	b290      	uxth	r0, r2
 8009622:	68f9      	ldr	r1, [r7, #12]
 8009624:	2281      	movs	r2, #129	; 0x81
 8009626:	0052      	lsls	r2, r2, #1
 8009628:	5288      	strh	r0, [r1, r2]
 800962a:	0019      	movs	r1, r3
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	1852      	adds	r2, r2, r1
 8009630:	7852      	ldrb	r2, [r2, #1]
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	0019      	movs	r1, r3
 8009636:	230a      	movs	r3, #10
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4313      	orrs	r3, r2
 800963e:	b2da      	uxtb	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	185b      	adds	r3, r3, r1
 8009644:	705a      	strb	r2, [r3, #1]
                pxASCIIFrameHdl->eBytePos = BYTE_HIGH_NIBBLE;
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	2380      	movs	r3, #128	; 0x80
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	2100      	movs	r1, #0
 800964e:	54d1      	strb	r1, [r2, r3]
                break;
 8009650:	46c0      	nop			; (mov r8, r8)
        break;
 8009652:	e083      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>

    case STATE_RX_WAIT_EOF:
        if( MBS_ASCII_DEFAULT_LF == ubValue )
 8009654:	1cfb      	adds	r3, r7, #3
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b0a      	cmp	r3, #10
 800965a:	d138      	bne.n	80096ce <vMBPSerialReceiverAPIV1CB+0x1b2>
        {
            bEnableTimer = FALSE;
 800965c:	2317      	movs	r3, #23
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	238a      	movs	r3, #138	; 0x8a
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	58d3      	ldr	r3, [r2, r3]
 800966c:	250b      	movs	r5, #11
 800966e:	197c      	adds	r4, r7, r5
 8009670:	2100      	movs	r1, #0
 8009672:	0018      	movs	r0, r3
 8009674:	f002 fb96 	bl	800bda4 <eMBPSerialRxEnable>
 8009678:	0003      	movs	r3, r0
 800967a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800967c:	197b      	adds	r3, r7, r5
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <vMBPSerialReceiverAPIV1CB+0x16c>
 8009684:	f002 f93e 	bl	800b904 <vMBPAssert>
            eStatus = eMBPTimerStop( pxASCIIFrameHdl->xTmrHdl );
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	2386      	movs	r3, #134	; 0x86
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	58d3      	ldr	r3, [r2, r3]
 8009690:	250b      	movs	r5, #11
 8009692:	197c      	adds	r4, r7, r5
 8009694:	0018      	movs	r0, r3
 8009696:	f002 fd75 	bl	800c184 <eMBPTimerStop>
 800969a:	0003      	movs	r3, r0
 800969c:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800969e:	197b      	adds	r3, r7, r5
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <vMBPSerialReceiverAPIV1CB+0x18e>
 80096a6:	f002 f92d 	bl	800b904 <vMBPAssert>

#if MBS_ASCII_BACKOF_TIME_MS > 0
            eStatus = eMBPTimerStart( pxASCIIFrameHdl->xBackOffTmrHdl );
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	2388      	movs	r3, #136	; 0x88
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	58d3      	ldr	r3, [r2, r3]
 80096b2:	250b      	movs	r5, #11
 80096b4:	197c      	adds	r4, r7, r5
 80096b6:	0018      	movs	r0, r3
 80096b8:	f002 fd2c 	bl	800c114 <eMBPTimerStart>
 80096bc:	0003      	movs	r3, r0
 80096be:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80096c0:	197b      	adds	r3, r7, r5
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d044      	beq.n	8009752 <vMBPSerialReceiverAPIV1CB+0x236>
 80096c8:	f002 f91c 	bl	800b904 <vMBPAssert>
        }
        else
        {
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
        }
        break;
 80096cc:	e041      	b.n	8009752 <vMBPSerialReceiverAPIV1CB+0x236>
        else if( MBS_ASCII_START == ubValue )
 80096ce:	1cfb      	adds	r3, r7, #3
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b3a      	cmp	r3, #58	; 0x3a
 80096d4:	d114      	bne.n	8009700 <vMBPSerialReceiverAPIV1CB+0x1e4>
            HDL_RESET_RX( pxASCIIFrameHdl );
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	2302      	movs	r3, #2
 80096da:	33ff      	adds	r3, #255	; 0xff
 80096dc:	2100      	movs	r1, #0
 80096de:	54d1      	strb	r1, [r2, r3]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	2381      	movs	r3, #129	; 0x81
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	2100      	movs	r1, #0
 80096e8:	52d1      	strh	r1, [r2, r3]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	2380      	movs	r3, #128	; 0x80
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	2100      	movs	r1, #0
 80096f2:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	2302      	movs	r3, #2
 80096f8:	33ff      	adds	r3, #255	; 0xff
 80096fa:	2101      	movs	r1, #1
 80096fc:	54d1      	strb	r1, [r2, r3]
        break;
 80096fe:	e028      	b.n	8009752 <vMBPSerialReceiverAPIV1CB+0x236>
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	2302      	movs	r3, #2
 8009704:	33ff      	adds	r3, #255	; 0xff
 8009706:	2103      	movs	r1, #3
 8009708:	54d1      	strb	r1, [r2, r3]
        break;
 800970a:	e022      	b.n	8009752 <vMBPSerialReceiverAPIV1CB+0x236>


    case STATE_RX_IDLE:
        if( MBS_ASCII_START == ubValue )
 800970c:	1cfb      	adds	r3, r7, #3
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b3a      	cmp	r3, #58	; 0x3a
 8009712:	d120      	bne.n	8009756 <vMBPSerialReceiverAPIV1CB+0x23a>
        {
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	2302      	movs	r3, #2
 8009718:	33ff      	adds	r3, #255	; 0xff
 800971a:	2101      	movs	r1, #1
 800971c:	54d1      	strb	r1, [r2, r3]
        }
        break;
 800971e:	e01a      	b.n	8009756 <vMBPSerialReceiverAPIV1CB+0x23a>

    case STATE_RX_ERROR:
    default:
        if( MBS_ASCII_START == ubValue )
 8009720:	1cfb      	adds	r3, r7, #3
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b3a      	cmp	r3, #58	; 0x3a
 8009726:	d118      	bne.n	800975a <vMBPSerialReceiverAPIV1CB+0x23e>
        {
            HDL_RESET_RX( pxASCIIFrameHdl );
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	2302      	movs	r3, #2
 800972c:	33ff      	adds	r3, #255	; 0xff
 800972e:	2100      	movs	r1, #0
 8009730:	54d1      	strb	r1, [r2, r3]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	2381      	movs	r3, #129	; 0x81
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	2100      	movs	r1, #0
 800973a:	52d1      	strh	r1, [r2, r3]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	2380      	movs	r3, #128	; 0x80
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	2100      	movs	r1, #0
 8009744:	54d1      	strb	r1, [r2, r3]
            pxASCIIFrameHdl->eRcvState = STATE_RX_RCV;
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	2302      	movs	r3, #2
 800974a:	33ff      	adds	r3, #255	; 0xff
 800974c:	2101      	movs	r1, #1
 800974e:	54d1      	strb	r1, [r2, r3]
        }
        break;
 8009750:	e003      	b.n	800975a <vMBPSerialReceiverAPIV1CB+0x23e>
        break;
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	e002      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>
        break;
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	e000      	b.n	800975c <vMBPSerialReceiverAPIV1CB+0x240>
        break;
 800975a:	46c0      	nop			; (mov r8, r8)
    }
#if MBS_ENABLE_STATISTICS_INTERFACE == 1
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif
    if( bEnableTimer )
 800975c:	2317      	movs	r3, #23
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d02f      	beq.n	80097c6 <vMBPSerialReceiverAPIV1CB+0x2aa>
    {
        if( MB_ENOERR != eMBPTimerStart( pxASCIIFrameHdl->xTmrHdl ) )
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	2386      	movs	r3, #134	; 0x86
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	58d3      	ldr	r3, [r2, r3]
 800976e:	0018      	movs	r0, r3
 8009770:	f002 fcd0 	bl	800c114 <eMBPTimerStart>
 8009774:	1e03      	subs	r3, r0, #0
 8009776:	d026      	beq.n	80097c6 <vMBPSerialReceiverAPIV1CB+0x2aa>
        {
            /* We can only abort here because or timers failed. */
            pxASCIIFrameHdl->eRcvState = STATE_RX_ERROR;
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	2302      	movs	r3, #2
 800977c:	33ff      	adds	r3, #255	; 0xff
 800977e:	2103      	movs	r1, #3
 8009780:	54d1      	strb	r1, [r2, r3]
            eStatus = eMBPSerialRxEnable( pxASCIIFrameHdl->xSerHdl, NULL );
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	238a      	movs	r3, #138	; 0x8a
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	58d3      	ldr	r3, [r2, r3]
 800978a:	250b      	movs	r5, #11
 800978c:	197c      	adds	r4, r7, r5
 800978e:	2100      	movs	r1, #0
 8009790:	0018      	movs	r0, r3
 8009792:	f002 fb07 	bl	800bda4 <eMBPSerialRxEnable>
 8009796:	0003      	movs	r3, r0
 8009798:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800979a:	197b      	adds	r3, r7, r5
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <vMBPSerialReceiverAPIV1CB+0x28a>
 80097a2:	f002 f8af 	bl	800b904 <vMBPAssert>
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	250b      	movs	r5, #11
 80097ac:	197c      	adds	r4, r7, r5
 80097ae:	2102      	movs	r1, #2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f002 f827 	bl	800b804 <eMBPEventPost>
 80097b6:	0003      	movs	r3, r0
 80097b8:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 80097ba:	197b      	adds	r3, r7, r5
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <vMBPSerialReceiverAPIV1CB+0x2aa>
 80097c2:	f002 f89f 	bl	800b904 <vMBPAssert>
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 80097c6:	f002 f8b7 	bl	800b938 <vMBPExitCritical>
}
 80097ca:	46c0      	nop			; (mov r8, r8)
 80097cc:	46bd      	mov	sp, r7
 80097ce:	b006      	add	sp, #24
 80097d0:	bdb0      	pop	{r4, r5, r7, pc}

080097d2 <bMBSSerialASCIITimerCB>:
STATIC
#endif
    BOOL
bMBSSerialASCIITimerCB( xMBHandle xHdl )
    MB_CDECL_SUFFIX
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
    BOOL            bNeedCtxSwitch = FALSE;
 80097da:	2317      	movs	r3, #23
 80097dc:	18fb      	adds	r3, r7, r3
 80097de:	2200      	movs	r2, #0
 80097e0:	701a      	strb	r2, [r3, #0]

    xMBSInternalHandle *pxIntHdl = xHdl;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	613b      	str	r3, [r7, #16]
    xMBSASCIIFrameHandle *pxASCIIFrameHdl = pxIntHdl->xFrameHdl;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	60fb      	str	r3, [r7, #12]

    MBP_ASSERT( NULL != pxASCIIFrameHdl );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <bMBSSerialASCIITimerCB+0x24>
 80097f2:	f002 f887 	bl	800b904 <vMBPAssert>
    MBP_ASSERT( pxASCIIFrameHdl->eSndState == STATE_TX_IDLE );
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	2382      	movs	r3, #130	; 0x82
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	5cd3      	ldrb	r3, [r2, r3]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <bMBSSerialASCIITimerCB+0x36>
 8009804:	f002 f87e 	bl	800b904 <vMBPAssert>
    HDL_RESET_RX( pxASCIIFrameHdl );
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	2302      	movs	r3, #2
 800980c:	33ff      	adds	r3, #255	; 0xff
 800980e:	2100      	movs	r1, #0
 8009810:	54d1      	strb	r1, [r2, r3]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	2381      	movs	r3, #129	; 0x81
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	2100      	movs	r1, #0
 800981a:	52d1      	strh	r1, [r2, r3]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	2380      	movs	r3, #128	; 0x80
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	2100      	movs	r1, #0
 8009824:	54d1      	strb	r1, [r2, r3]

    return bNeedCtxSwitch;
 8009826:	2317      	movs	r3, #23
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	781b      	ldrb	r3, [r3, #0]
}
 800982c:	0018      	movs	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	b006      	add	sp, #24
 8009832:	bd80      	pop	{r7, pc}

08009834 <bMBSSerialASCIIBackOffTimerCB>:
STATIC
#endif
    BOOL
bMBSSerialASCIIBackOffTimerCB( xMBHandle xHdl )
    MB_CDECL_SUFFIX
{
 8009834:	b5b0      	push	{r4, r5, r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60fb      	str	r3, [r7, #12]
    eMBErrorCode    eStatus;

    eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_RECEIVED );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	250b      	movs	r5, #11
 8009846:	197c      	adds	r4, r7, r5
 8009848:	2101      	movs	r1, #1
 800984a:	0018      	movs	r0, r3
 800984c:	f001 ffda 	bl	800b804 <eMBPEventPost>
 8009850:	0003      	movs	r3, r0
 8009852:	7023      	strb	r3, [r4, #0]
    MBP_ASSERT( MB_ENOERR == eStatus );
 8009854:	197b      	adds	r3, r7, r5
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <bMBSSerialASCIIBackOffTimerCB+0x2c>
 800985c:	f002 f852 	bl	800b904 <vMBPAssert>
    return TRUE;
 8009860:	2301      	movs	r3, #1
}
 8009862:	0018      	movs	r0, r3
 8009864:	46bd      	mov	sp, r7
 8009866:	b004      	add	sp, #16
 8009868:	bdb0      	pop	{r4, r5, r7, pc}

0800986a <eMBSSerialASCIIFrameClose>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialASCIIFrameClose( xMBHandle xHdl )
{
 800986a:	b590      	push	{r4, r7, lr}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 8009872:	240f      	movs	r4, #15
 8009874:	193b      	adds	r3, r7, r4
 8009876:	2202      	movs	r2, #2
 8009878:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60bb      	str	r3, [r7, #8]

    if( bMBSIsHdlValid( pxIntHdl ) )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	0018      	movs	r0, r3
 8009882:	f7fe fe03 	bl	800848c <bMBSIsHdlValid>
 8009886:	1e03      	subs	r3, r0, #0
 8009888:	d007      	beq.n	800989a <eMBSSerialASCIIFrameClose+0x30>
    {
        eStatus = eMBSSerialASCIIFrameCloseInternal( ( xMBSASCIIFrameHandle * ) pxIntHdl->xFrameHdl );
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	193c      	adds	r4, r7, r4
 8009890:	0018      	movs	r0, r3
 8009892:	f000 f809 	bl	80098a8 <eMBSSerialASCIIFrameCloseInternal>
 8009896:	0003      	movs	r3, r0
 8009898:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 800989a:	230f      	movs	r3, #15
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	781b      	ldrb	r3, [r3, #0]
}
 80098a0:	0018      	movs	r0, r3
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b005      	add	sp, #20
 80098a6:	bd90      	pop	{r4, r7, pc}

080098a8 <eMBSSerialASCIIFrameCloseInternal>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialASCIIFrameCloseInternal( xMBSASCIIFrameHandle * pxASCIIHdl )
{
 80098a8:	b590      	push	{r4, r7, lr}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 80098b0:	240f      	movs	r4, #15
 80098b2:	193b      	adds	r3, r7, r4
 80098b4:	2202      	movs	r2, #2
 80098b6:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 80098b8:	f002 f837 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxASCIIHdl, xMBSASCIIFrameHdl ) )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d100      	bne.n	80098c4 <eMBSSerialASCIIFrameCloseInternal+0x1c>
 80098c2:	e0d2      	b.n	8009a6a <eMBSSerialASCIIFrameCloseInternal+0x1c2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d000      	beq.n	80098ce <eMBSSerialASCIIFrameCloseInternal+0x26>
 80098cc:	e0cd      	b.n	8009a6a <eMBSSerialASCIIFrameCloseInternal+0x1c2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	001a      	movs	r2, r3
 80098d4:	0013      	movs	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	189b      	adds	r3, r3, r2
 80098da:	00da      	lsls	r2, r3, #3
 80098dc:	1ad2      	subs	r2, r2, r3
 80098de:	00d3      	lsls	r3, r2, #3
 80098e0:	001a      	movs	r2, r3
 80098e2:	4b66      	ldr	r3, [pc, #408]	; (8009a7c <eMBSSerialASCIIFrameCloseInternal+0x1d4>)
 80098e4:	18d3      	adds	r3, r2, r3
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d000      	beq.n	80098ee <eMBSSerialASCIIFrameCloseInternal+0x46>
 80098ec:	e0bd      	b.n	8009a6a <eMBSSerialASCIIFrameCloseInternal+0x1c2>
    {

        if( MBP_SERIALHDL_INVALID != pxASCIIHdl->xSerHdl )
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	238a      	movs	r3, #138	; 0x8a
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	58d3      	ldr	r3, [r2, r3]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d067      	beq.n	80099ca <eMBSSerialASCIIFrameCloseInternal+0x122>
        {
            if( MB_ENOERR != eMBPSerialClose( pxASCIIHdl->xSerHdl ) )
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	238a      	movs	r3, #138	; 0x8a
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	58d3      	ldr	r3, [r2, r3]
 8009902:	0018      	movs	r0, r3
 8009904:	f002 f930 	bl	800bb68 <eMBPSerialClose>
 8009908:	1e03      	subs	r3, r0, #0
 800990a:	d003      	beq.n	8009914 <eMBSSerialASCIIFrameCloseInternal+0x6c>
            {
                eStatus = MB_EPORTERR;
 800990c:	193b      	adds	r3, r7, r4
 800990e:	2203      	movs	r2, #3
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e0aa      	b.n	8009a6a <eMBSSerialASCIIFrameCloseInternal+0x1c2>
            }
            else
            {
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xTmrHdl )
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	2386      	movs	r3, #134	; 0x86
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	58d3      	ldr	r3, [r2, r3]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <eMBSSerialASCIIFrameCloseInternal+0x86>
                {
                    vMBPTimerClose( pxASCIIHdl->xTmrHdl );
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	2386      	movs	r3, #134	; 0x86
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	58d3      	ldr	r3, [r2, r3]
 8009928:	0018      	movs	r0, r3
 800992a:	f002 fbcb 	bl	800c0c4 <vMBPTimerClose>
                }
#if MBS_ASCII_BACKOF_TIME_MS > 0
                if( MBP_TIMERHDL_INVALID != pxASCIIHdl->xBackOffTmrHdl )
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	2388      	movs	r3, #136	; 0x88
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	58d3      	ldr	r3, [r2, r3]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d006      	beq.n	8009948 <eMBSSerialASCIIFrameCloseInternal+0xa0>
                {

                    vMBPTimerClose( pxASCIIHdl->xBackOffTmrHdl );
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	2388      	movs	r3, #136	; 0x88
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	58d3      	ldr	r3, [r2, r3]
 8009942:	0018      	movs	r0, r3
 8009944:	f002 fbbe 	bl	800c0c4 <vMBPTimerClose>
                }
#endif
                HDL_RESET( pxASCIIHdl );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	2302      	movs	r3, #2
 8009952:	33ff      	adds	r3, #255	; 0xff
 8009954:	2100      	movs	r1, #0
 8009956:	54d1      	strb	r1, [r2, r3]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	2381      	movs	r3, #129	; 0x81
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	2100      	movs	r1, #0
 8009960:	52d1      	strh	r1, [r2, r3]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	2380      	movs	r3, #128	; 0x80
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	2100      	movs	r1, #0
 800996a:	54d1      	strb	r1, [r2, r3]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	2382      	movs	r3, #130	; 0x82
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	2100      	movs	r1, #0
 8009974:	54d1      	strb	r1, [r2, r3]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	2383      	movs	r3, #131	; 0x83
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	2100      	movs	r1, #0
 800997e:	52d1      	strh	r1, [r2, r3]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	2380      	movs	r3, #128	; 0x80
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	2100      	movs	r1, #0
 8009988:	54d1      	strb	r1, [r2, r3]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	2384      	movs	r3, #132	; 0x84
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	2100      	movs	r1, #0
 8009992:	50d1      	str	r1, [r2, r3]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	2386      	movs	r3, #134	; 0x86
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	2100      	movs	r1, #0
 800999c:	50d1      	str	r1, [r2, r3]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	238a      	movs	r3, #138	; 0x8a
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	2100      	movs	r1, #0
 80099a6:	50d1      	str	r1, [r2, r3]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3301      	adds	r3, #1
 80099ac:	22ff      	movs	r2, #255	; 0xff
 80099ae:	2100      	movs	r1, #0
 80099b0:	0018      	movs	r0, r3
 80099b2:	f002 fcaa 	bl	800c30a <memset>
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	2388      	movs	r3, #136	; 0x88
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	2100      	movs	r1, #0
 80099be:	50d1      	str	r1, [r2, r3]
                eStatus = MB_ENOERR;
 80099c0:	230f      	movs	r3, #15
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e04f      	b.n	8009a6a <eMBSSerialASCIIFrameCloseInternal+0x1c2>
            }
        }
        else
        {
            /* Make sure that no timers are created. */
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xTmrHdl );
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	2386      	movs	r3, #134	; 0x86
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	58d3      	ldr	r3, [r2, r3]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <eMBSSerialASCIIFrameCloseInternal+0x132>
 80099d6:	f001 ff95 	bl	800b904 <vMBPAssert>
#if MBS_ASCII_BACKOF_TIME_MS > 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxASCIIHdl->xBackOffTmrHdl );
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	2388      	movs	r3, #136	; 0x88
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	58d3      	ldr	r3, [r2, r3]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <eMBSSerialASCIIFrameCloseInternal+0x142>
 80099e6:	f001 ff8d 	bl	800b904 <vMBPAssert>
#endif
            HDL_RESET( pxASCIIHdl );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	22ff      	movs	r2, #255	; 0xff
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	2302      	movs	r3, #2
 80099f4:	33ff      	adds	r3, #255	; 0xff
 80099f6:	2100      	movs	r1, #0
 80099f8:	54d1      	strb	r1, [r2, r3]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	2381      	movs	r3, #129	; 0x81
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	2100      	movs	r1, #0
 8009a02:	52d1      	strh	r1, [r2, r3]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	2380      	movs	r3, #128	; 0x80
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	54d1      	strb	r1, [r2, r3]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	2382      	movs	r3, #130	; 0x82
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	2100      	movs	r1, #0
 8009a16:	54d1      	strb	r1, [r2, r3]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	2383      	movs	r3, #131	; 0x83
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	2100      	movs	r1, #0
 8009a20:	52d1      	strh	r1, [r2, r3]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	2100      	movs	r1, #0
 8009a2a:	54d1      	strb	r1, [r2, r3]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	2384      	movs	r3, #132	; 0x84
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	2100      	movs	r1, #0
 8009a34:	50d1      	str	r1, [r2, r3]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	2386      	movs	r3, #134	; 0x86
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	50d1      	str	r1, [r2, r3]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	238a      	movs	r3, #138	; 0x8a
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	2100      	movs	r1, #0
 8009a48:	50d1      	str	r1, [r2, r3]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	22ff      	movs	r2, #255	; 0xff
 8009a50:	2100      	movs	r1, #0
 8009a52:	0018      	movs	r0, r3
 8009a54:	f002 fc59 	bl	800c30a <memset>
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	2388      	movs	r3, #136	; 0x88
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	2100      	movs	r1, #0
 8009a60:	50d1      	str	r1, [r2, r3]
            eStatus = MB_ENOERR;
 8009a62:	230f      	movs	r3, #15
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 8009a6a:	f001 ff65 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 8009a6e:	230f      	movs	r3, #15
 8009a70:	18fb      	adds	r3, r7, r3
 8009a72:	781b      	ldrb	r3, [r3, #0]
}
 8009a74:	0018      	movs	r0, r3
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b005      	add	sp, #20
 8009a7a:	bd90      	pop	{r4, r7, pc}
 8009a7c:	2000499c 	.word	0x2000499c

08009a80 <ubMBSSerialASCIICHAR2BIN>:
#if MBS_TEST_INSTANCES == 0
STATIC
#endif
    UBYTE
ubMBSSerialASCIICHAR2BIN( UBYTE ubCharacter )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	0002      	movs	r2, r0
 8009a88:	1dfb      	adds	r3, r7, #7
 8009a8a:	701a      	strb	r2, [r3, #0]
    if( ( ubCharacter >= 0x30 /* ASCII '0' */  ) && ( ubCharacter <= 0x39 /* ASCII '9' */  ) )
 8009a8c:	1dfb      	adds	r3, r7, #7
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b2f      	cmp	r3, #47	; 0x2f
 8009a92:	d908      	bls.n	8009aa6 <ubMBSSerialASCIICHAR2BIN+0x26>
 8009a94:	1dfb      	adds	r3, r7, #7
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b39      	cmp	r3, #57	; 0x39
 8009a9a:	d804      	bhi.n	8009aa6 <ubMBSSerialASCIICHAR2BIN+0x26>
    {
        return ( UBYTE ) ( ubCharacter - 0x30 /* ASCII '0' */  );
 8009a9c:	1dfb      	adds	r3, r7, #7
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	3b30      	subs	r3, #48	; 0x30
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	e00d      	b.n	8009ac2 <ubMBSSerialASCIICHAR2BIN+0x42>
    }
    else if( ( ubCharacter >= 0x41 /* ASCII 'A' */  ) && ( ubCharacter <= 0x46 /* ASCII 'F' */  ) )
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b40      	cmp	r3, #64	; 0x40
 8009aac:	d908      	bls.n	8009ac0 <ubMBSSerialASCIICHAR2BIN+0x40>
 8009aae:	1dfb      	adds	r3, r7, #7
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b46      	cmp	r3, #70	; 0x46
 8009ab4:	d804      	bhi.n	8009ac0 <ubMBSSerialASCIICHAR2BIN+0x40>
    {
        return ( UBYTE ) ( ( ubCharacter - 0x41 ) /* ASCII 'A' */  + 0x0A );
 8009ab6:	1dfb      	adds	r3, r7, #7
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	3b37      	subs	r3, #55	; 0x37
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	e000      	b.n	8009ac2 <ubMBSSerialASCIICHAR2BIN+0x42>
    }
    else
    {
        return 0xFF;
 8009ac0:	23ff      	movs	r3, #255	; 0xff
    }
}
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b002      	add	sp, #8
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <ubMBSSerialASCIIBIN2CHAR>:
#if MBS_TEST_INSTANCES == 0
STATIC
#endif
    UBYTE
ubMBSSerialASCIIBIN2CHAR( UBYTE ubByte )
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	0002      	movs	r2, r0
 8009ad2:	1dfb      	adds	r3, r7, #7
 8009ad4:	701a      	strb	r2, [r3, #0]
    if( ubByte <= 0x09 )
 8009ad6:	1dfb      	adds	r3, r7, #7
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d804      	bhi.n	8009ae8 <ubMBSSerialASCIIBIN2CHAR+0x1e>
    {
        return ( UBYTE ) ( 0x30 + ubByte );
 8009ade:	1dfb      	adds	r3, r7, #7
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	3330      	adds	r3, #48	; 0x30
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	e00f      	b.n	8009b08 <ubMBSSerialASCIIBIN2CHAR+0x3e>
    }
    else if( ( ubByte >= 0x0A ) && ( ubByte <= 0x0F ) )
 8009ae8:	1dfb      	adds	r3, r7, #7
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b09      	cmp	r3, #9
 8009aee:	d908      	bls.n	8009b02 <ubMBSSerialASCIIBIN2CHAR+0x38>
 8009af0:	1dfb      	adds	r3, r7, #7
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b0f      	cmp	r3, #15
 8009af6:	d804      	bhi.n	8009b02 <ubMBSSerialASCIIBIN2CHAR+0x38>
    {
        return ( UBYTE ) ( ( ubByte - 0x0A ) + 0x41 /* ASCII 'A' */  );
 8009af8:	1dfb      	adds	r3, r7, #7
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	3337      	adds	r3, #55	; 0x37
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	e002      	b.n	8009b08 <ubMBSSerialASCIIBIN2CHAR+0x3e>
    }
    MBP_ASSERT( 0 );
 8009b02:	f001 feff 	bl	800b904 <vMBPAssert>
    /*lint -e(527) */ return 0xFF;
 8009b06:	23ff      	movs	r3, #255	; 0xff
}
 8009b08:	0018      	movs	r0, r3
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	b002      	add	sp, #8
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <ubMBSSerialASCIILRC>:
#if MBS_TEST_INSTANCES == 0
STATIC
#endif
    UBYTE
ubMBSSerialASCIILRC( const UBYTE * pubFrame, USHORT usLen )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	000a      	movs	r2, r1
 8009b1a:	1cbb      	adds	r3, r7, #2
 8009b1c:	801a      	strh	r2, [r3, #0]
    UBYTE           ubLRC = 0;  /* LRC char initialized */
 8009b1e:	230f      	movs	r3, #15
 8009b20:	18fb      	adds	r3, r7, r3
 8009b22:	2200      	movs	r2, #0
 8009b24:	701a      	strb	r2, [r3, #0]

    while( usLen-- > 0 )
 8009b26:	e009      	b.n	8009b3c <ubMBSSerialASCIILRC+0x2c>
    {
        ubLRC += *pubFrame++;   /* Add buffer byte without carry */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	7819      	ldrb	r1, [r3, #0]
 8009b30:	220f      	movs	r2, #15
 8009b32:	18bb      	adds	r3, r7, r2
 8009b34:	18ba      	adds	r2, r7, r2
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	188a      	adds	r2, r1, r2
 8009b3a:	701a      	strb	r2, [r3, #0]
    while( usLen-- > 0 )
 8009b3c:	1cbb      	adds	r3, r7, #2
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	1cba      	adds	r2, r7, #2
 8009b42:	1e59      	subs	r1, r3, #1
 8009b44:	8011      	strh	r1, [r2, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1ee      	bne.n	8009b28 <ubMBSSerialASCIILRC+0x18>
    }

    /* Return twos complement */
    ubLRC = ( UBYTE ) ( -( ( UBYTE ) ubLRC ) );
 8009b4a:	210f      	movs	r1, #15
 8009b4c:	187b      	adds	r3, r7, r1
 8009b4e:	187a      	adds	r2, r7, r1
 8009b50:	7812      	ldrb	r2, [r2, #0]
 8009b52:	4252      	negs	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]
    return ubLRC;
 8009b56:	187b      	adds	r3, r7, r1
 8009b58:	781b      	ldrb	r3, [r3, #0]
}
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b004      	add	sp, #16
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <usMBSCRC16>:
};
#endif

USHORT
usMBSCRC16( const UBYTE * pucFrame, USHORT usLen )
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	000a      	movs	r2, r1
 8009b6e:	1cbb      	adds	r3, r7, #2
 8009b70:	801a      	strh	r2, [r3, #0]
    UBYTE           ubCRCHi = 0xFF;
 8009b72:	230f      	movs	r3, #15
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	22ff      	movs	r2, #255	; 0xff
 8009b78:	701a      	strb	r2, [r3, #0]
    UBYTE           ubCRCLo = 0xFF;
 8009b7a:	230e      	movs	r3, #14
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	22ff      	movs	r2, #255	; 0xff
 8009b80:	701a      	strb	r2, [r3, #0]

#if CRC16_USETABLE == 0
    USHORT          usCRCTableValue;
#endif

    while( usLen-- )
 8009b82:	e01a      	b.n	8009bba <usMBSCRC16+0x56>
    {

        ubIndex = ubCRCLo ^ *( pucFrame++ );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	7819      	ldrb	r1, [r3, #0]
 8009b8c:	200d      	movs	r0, #13
 8009b8e:	183b      	adds	r3, r7, r0
 8009b90:	240e      	movs	r4, #14
 8009b92:	193a      	adds	r2, r7, r4
 8009b94:	7812      	ldrb	r2, [r2, #0]
 8009b96:	404a      	eors	r2, r1
 8009b98:	701a      	strb	r2, [r3, #0]
#if CRC16_USETABLE == 1
        ubCRCLo = ubCRCHi ^ ( UBYTE ) aucCRCHi[ubIndex];
 8009b9a:	183b      	adds	r3, r7, r0
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <usMBSCRC16+0x84>)
 8009ba0:	5cd1      	ldrb	r1, [r2, r3]
 8009ba2:	193b      	adds	r3, r7, r4
 8009ba4:	240f      	movs	r4, #15
 8009ba6:	193a      	adds	r2, r7, r4
 8009ba8:	7812      	ldrb	r2, [r2, #0]
 8009baa:	404a      	eors	r2, r1
 8009bac:	701a      	strb	r2, [r3, #0]
        ubCRCHi = ( UBYTE ) aucCRCLo[ubIndex];
 8009bae:	183b      	adds	r3, r7, r0
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	193b      	adds	r3, r7, r4
 8009bb4:	490d      	ldr	r1, [pc, #52]	; (8009bec <usMBSCRC16+0x88>)
 8009bb6:	5c8a      	ldrb	r2, [r1, r2]
 8009bb8:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8009bba:	1cbb      	adds	r3, r7, #2
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	1cba      	adds	r2, r7, #2
 8009bc0:	1e59      	subs	r1, r3, #1
 8009bc2:	8011      	strh	r1, [r2, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1dd      	bne.n	8009b84 <usMBSCRC16+0x20>
    }
    /* Additional casts a for PIC MCC18 compiler to fix a bug when -Oi is not used. 
     * This is required because it does not enforce ANSI c integer promotion
     * rules.
     */
    return ( USHORT )( ( USHORT )ubCRCHi << 8 | ( USHORT )ubCRCLo );
 8009bc8:	230f      	movs	r3, #15
 8009bca:	18fb      	adds	r3, r7, r3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	b21a      	sxth	r2, r3
 8009bd2:	230e      	movs	r3, #14
 8009bd4:	18fb      	adds	r3, r7, r3
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b21b      	sxth	r3, r3
 8009bde:	b29b      	uxth	r3, r3
}
 8009be0:	0018      	movs	r0, r3
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b005      	add	sp, #20
 8009be6:	bd90      	pop	{r4, r7, pc}
 8009be8:	0800c600 	.word	0x0800c600
 8009bec:	0800c700 	.word	0x0800c700

08009bf0 <eMBSFuncReadCoils>:

#if MBS_FUNC_READ_COILS_ENABLED == 1
eMBException
eMBSFuncReadCoils( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 8009bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf2:	b089      	sub	sp, #36	; 0x24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usCoilsCnt;
    UBYTE           ubNBytes;
    UBYTE          *pubFrameCur;

    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009bfc:	231e      	movs	r3, #30
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	2202      	movs	r2, #2
 8009c02:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d000      	beq.n	8009c0e <eMBSFuncReadCoils+0x1e>
 8009c0c:	e087      	b.n	8009d1e <eMBSFuncReadCoils+0x12e>
    {
        /* Additional casts a for PIC MCC18 compiler to fix a bug when -Oi is not used. 
         * This is required because it does not enforce ANSI c integer promotion
         * rules.
         */
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3301      	adds	r3, #1
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	201c      	movs	r0, #28
 8009c18:	183b      	adds	r3, r7, r0
 8009c1a:	0212      	lsls	r2, r2, #8
 8009c1c:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3302      	adds	r3, #2
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	b299      	uxth	r1, r3
 8009c26:	183b      	adds	r3, r7, r0
 8009c28:	183a      	adds	r2, r7, r0
 8009c2a:	8812      	ldrh	r2, [r2, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	801a      	strh	r2, [r3, #0]

        usCoilsCnt = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3303      	adds	r3, #3
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	201a      	movs	r0, #26
 8009c3a:	183b      	adds	r3, r7, r0
 8009c3c:	0212      	lsls	r2, r2, #8
 8009c3e:	801a      	strh	r2, [r3, #0]
        usCoilsCnt |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3304      	adds	r3, #4
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b299      	uxth	r1, r3
 8009c48:	183b      	adds	r3, r7, r0
 8009c4a:	183a      	adds	r2, r7, r0
 8009c4c:	8812      	ldrh	r2, [r2, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilsCnt >= 1 ) && ( usCoilsCnt <= MB_PDU_FUNC_READ_COILCNT_MAX ) )
 8009c52:	183b      	adds	r3, r7, r0
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d05c      	beq.n	8009d14 <eMBSFuncReadCoils+0x124>
 8009c5a:	0001      	movs	r1, r0
 8009c5c:	183b      	adds	r3, r7, r0
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	23fa      	movs	r3, #250	; 0xfa
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d855      	bhi.n	8009d14 <eMBSFuncReadCoils+0x124>
        {
            /* Set the current PDU data pointer to the beginning. */
            pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	617b      	str	r3, [r7, #20]
            *pusMBPDULen = MB_PDU_FUNC_OFF;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pubFrameCur++ = MBS_FUNC_READ_COILS;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	617a      	str	r2, [r7, #20]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. 
             */
            if( ( usCoilsCnt & 0x0007 ) != 0 )
 8009c88:	187b      	adds	r3, r7, r1
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	2207      	movs	r2, #7
 8009c8e:	4013      	ands	r3, r2
 8009c90:	d009      	beq.n	8009ca6 <eMBSFuncReadCoils+0xb6>
            {
                ubNBytes = ( UBYTE ) ( usCoilsCnt / 8 + 1 );
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	231f      	movs	r3, #31
 8009c9e:	18fb      	adds	r3, r7, r3
 8009ca0:	3201      	adds	r2, #1
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e007      	b.n	8009cb6 <eMBSFuncReadCoils+0xc6>
            }
            else
            {
                ubNBytes = ( UBYTE ) ( usCoilsCnt / 8 );
 8009ca6:	231a      	movs	r3, #26
 8009ca8:	18fb      	adds	r3, r7, r3
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	08db      	lsrs	r3, r3, #3
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	231f      	movs	r3, #31
 8009cb2:	18fb      	adds	r3, r7, r3
 8009cb4:	701a      	strb	r2, [r3, #0]
            }
            *pubFrameCur++ = ubNBytes;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	617a      	str	r2, [r7, #20]
 8009cbc:	261f      	movs	r6, #31
 8009cbe:	19ba      	adds	r2, r7, r6
 8009cc0:	7812      	ldrb	r2, [r2, #0]
 8009cc2:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	801a      	strh	r2, [r3, #0]

            /* Get the acutal register values from the callback. */
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d018      	beq.n	8009d0a <eMBSFuncReadCoils+0x11a>
            {
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
                eStatus = pxMBSRegisterCB->peMBSCoilsCB( pxMBSRegisterCB->pvCtx, pubFrameCur, usRegAddress, usCoilsCnt, MBS_REGISTER_READ );
#else
                eStatus = pxMBSRegisterCB->peMBSCoilsCB( pubFrameCur, usRegAddress, usCoilsCnt, MBS_REGISTER_READ );
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691d      	ldr	r5, [r3, #16]
 8009cdc:	231e      	movs	r3, #30
 8009cde:	18fc      	adds	r4, r7, r3
 8009ce0:	231a      	movs	r3, #26
 8009ce2:	18fb      	adds	r3, r7, r3
 8009ce4:	881a      	ldrh	r2, [r3, #0]
 8009ce6:	231c      	movs	r3, #28
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	8819      	ldrh	r1, [r3, #0]
 8009cec:	6978      	ldr	r0, [r7, #20]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	47a8      	blx	r5
 8009cf2:	0003      	movs	r3, r0
 8009cf4:	7023      	strb	r3, [r4, #0]
#endif
                *pusMBPDULen += ( USHORT ) ubNBytes;;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	881a      	ldrh	r2, [r3, #0]
 8009cfa:	19bb      	adds	r3, r7, r6
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	18d3      	adds	r3, r2, r3
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	801a      	strh	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009d08:	e00d      	b.n	8009d26 <eMBSFuncReadCoils+0x136>
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009d0a:	231e      	movs	r3, #30
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009d12:	e008      	b.n	8009d26 <eMBSFuncReadCoils+0x136>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009d14:	231e      	movs	r3, #30
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	2203      	movs	r2, #3
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	e003      	b.n	8009d26 <eMBSFuncReadCoils+0x136>
    }
    else
    {
        /* Can't be a valid read coils request because the length
         * is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009d1e:	231e      	movs	r3, #30
 8009d20:	18fb      	adds	r3, r7, r3
 8009d22:	2203      	movs	r2, #3
 8009d24:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009d26:	231e      	movs	r3, #30
 8009d28:	18fb      	adds	r3, r7, r3
 8009d2a:	781b      	ldrb	r3, [r3, #0]
}
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b009      	add	sp, #36	; 0x24
 8009d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d34 <eMBSFuncWriteSingleCoil>:
#if MBS_FUNC_WRITE_SINGLE_COIL_ENABLED == 1
/*lint -save -esym(818,pubMBPDU,pusMBPDULen) */
eMBException
eMBSFuncWriteSingleCoil( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 8009d34:	b5b0      	push	{r4, r5, r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    UBYTE           ubBuf[2];
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009d40:	2317      	movs	r3, #23
 8009d42:	18fb      	adds	r3, r7, r3
 8009d44:	2202      	movs	r2, #2
 8009d46:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	2b05      	cmp	r3, #5
 8009d4e:	d14d      	bne.n	8009dec <eMBSFuncWriteSingleCoil+0xb8>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3301      	adds	r3, #1
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	2014      	movs	r0, #20
 8009d5a:	183b      	adds	r3, r7, r0
 8009d5c:	0212      	lsls	r2, r2, #8
 8009d5e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3302      	adds	r3, #2
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	b299      	uxth	r1, r3
 8009d68:	183b      	adds	r3, r7, r0
 8009d6a:	183a      	adds	r2, r7, r0
 8009d6c:	8812      	ldrh	r2, [r2, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	801a      	strh	r2, [r3, #0]

        if( ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3304      	adds	r3, #4
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d132      	bne.n	8009de2 <eMBSFuncWriteSingleCoil+0xae>
            ( ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) || ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3303      	adds	r3, #3
 8009d80:	781b      	ldrb	r3, [r3, #0]
        if( ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009d82:	2bff      	cmp	r3, #255	; 0xff
 8009d84:	d004      	beq.n	8009d90 <eMBSFuncWriteSingleCoil+0x5c>
            ( ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) || ( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3303      	adds	r3, #3
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d128      	bne.n	8009de2 <eMBSFuncWriteSingleCoil+0xae>
        {
            ubBuf[1] = 0;
 8009d90:	2110      	movs	r1, #16
 8009d92:	187b      	adds	r3, r7, r1
 8009d94:	2200      	movs	r2, #0
 8009d96:	705a      	strb	r2, [r3, #1]
            if( pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3303      	adds	r3, #3
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	d103      	bne.n	8009daa <eMBSFuncWriteSingleCoil+0x76>
            {
                ubBuf[0] = 1;
 8009da2:	187b      	adds	r3, r7, r1
 8009da4:	2201      	movs	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e003      	b.n	8009db2 <eMBSFuncWriteSingleCoil+0x7e>
            }
            else
            {
                ubBuf[0] = 0;
 8009daa:	2310      	movs	r3, #16
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]
            }

            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00e      	beq.n	8009dd8 <eMBSFuncWriteSingleCoil+0xa4>
            {
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
                eStatus = pxMBSRegisterCB->peMBSCoilsCB( pxMBSRegisterCB->pvCtx, ubBuf, usRegAddress, 1, MBS_REGISTER_WRITE );
#else
                eStatus = pxMBSRegisterCB->peMBSCoilsCB( ubBuf, usRegAddress, 1, MBS_REGISTER_WRITE );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691d      	ldr	r5, [r3, #16]
 8009dbe:	2317      	movs	r3, #23
 8009dc0:	18fc      	adds	r4, r7, r3
 8009dc2:	2314      	movs	r3, #20
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	8819      	ldrh	r1, [r3, #0]
 8009dc8:	2310      	movs	r3, #16
 8009dca:	18f8      	adds	r0, r7, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2201      	movs	r2, #1
 8009dd0:	47a8      	blx	r5
 8009dd2:	0003      	movs	r3, r0
 8009dd4:	7023      	strb	r3, [r4, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009dd6:	e00d      	b.n	8009df4 <eMBSFuncWriteSingleCoil+0xc0>
#endif
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009dd8:	2317      	movs	r3, #23
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	2202      	movs	r2, #2
 8009dde:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009de0:	e008      	b.n	8009df4 <eMBSFuncWriteSingleCoil+0xc0>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009de2:	2317      	movs	r3, #23
 8009de4:	18fb      	adds	r3, r7, r3
 8009de6:	2203      	movs	r2, #3
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	e003      	b.n	8009df4 <eMBSFuncWriteSingleCoil+0xc0>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009dec:	2317      	movs	r3, #23
 8009dee:	18fb      	adds	r3, r7, r3
 8009df0:	2203      	movs	r2, #3
 8009df2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009df4:	2317      	movs	r3, #23
 8009df6:	18fb      	adds	r3, r7, r3
 8009df8:	781b      	ldrb	r3, [r3, #0]
}
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	b006      	add	sp, #24
 8009e00:	bdb0      	pop	{r4, r5, r7, pc}

08009e02 <eMBSFuncWriteMultipleCoils>:

#if MBS_FUNC_WRITE_MULTIPLE_COILS_ENABLED != 0
eMBException
eMBSFuncWriteMultipleCoils( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 8009e02:	b5b0      	push	{r4, r5, r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UBYTE           ubByteCount;
    UBYTE           ubByteCountVerify;
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009e0e:	2316      	movs	r3, #22
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	2202      	movs	r2, #2
 8009e14:	701a      	strb	r2, [r3, #0]

    if( *pubMBPDU > ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b06      	cmp	r3, #6
 8009e1c:	d800      	bhi.n	8009e20 <eMBSFuncWriteMultipleCoils+0x1e>
 8009e1e:	e071      	b.n	8009f04 <eMBSFuncWriteMultipleCoils+0x102>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3301      	adds	r3, #1
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	2014      	movs	r0, #20
 8009e2a:	183b      	adds	r3, r7, r0
 8009e2c:	0212      	lsls	r2, r2, #8
 8009e2e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3302      	adds	r3, #2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	b299      	uxth	r1, r3
 8009e38:	183b      	adds	r3, r7, r0
 8009e3a:	183a      	adds	r2, r7, r0
 8009e3c:	8812      	ldrh	r2, [r2, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3303      	adds	r3, #3
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	2012      	movs	r0, #18
 8009e4c:	183b      	adds	r3, r7, r0
 8009e4e:	0212      	lsls	r2, r2, #8
 8009e50:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3304      	adds	r3, #4
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	b299      	uxth	r1, r3
 8009e5a:	183b      	adds	r3, r7, r0
 8009e5c:	183a      	adds	r2, r7, r0
 8009e5e:	8812      	ldrh	r2, [r2, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	801a      	strh	r2, [r3, #0]

        ubByteCount = pubMBPDU[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8009e64:	2311      	movs	r3, #17
 8009e66:	18fb      	adds	r3, r7, r3
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	7952      	ldrb	r2, [r2, #5]
 8009e6c:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8009e6e:	183b      	adds	r3, r7, r0
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	2207      	movs	r2, #7
 8009e74:	4013      	ands	r3, r2
 8009e76:	d009      	beq.n	8009e8c <eMBSFuncWriteMultipleCoils+0x8a>
        {
            ubByteCountVerify = ( UBYTE ) ( usCoilCnt / 8 + 1 );
 8009e78:	183b      	adds	r3, r7, r0
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	08db      	lsrs	r3, r3, #3
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	2317      	movs	r3, #23
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	3201      	adds	r2, #1
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e007      	b.n	8009e9c <eMBSFuncWriteMultipleCoils+0x9a>
        }
        else
        {
            ubByteCountVerify = ( UBYTE ) ( usCoilCnt / 8 );
 8009e8c:	2312      	movs	r3, #18
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	08db      	lsrs	r3, r3, #3
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	2317      	movs	r3, #23
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) && ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) && ( ubByteCountVerify == ubByteCount ) )
 8009e9c:	2112      	movs	r1, #18
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d029      	beq.n	8009efa <eMBSFuncWriteMultipleCoils+0xf8>
 8009ea6:	187b      	adds	r3, r7, r1
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	23f6      	movs	r3, #246	; 0xf6
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d823      	bhi.n	8009efa <eMBSFuncWriteMultipleCoils+0xf8>
 8009eb2:	2317      	movs	r3, #23
 8009eb4:	18fa      	adds	r2, r7, r3
 8009eb6:	2311      	movs	r3, #17
 8009eb8:	18fb      	adds	r3, r7, r3
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d11b      	bne.n	8009efa <eMBSFuncWriteMultipleCoils+0xf8>
        {
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d012      	beq.n	8009ef0 <eMBSFuncWriteMultipleCoils+0xee>
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
                eStatus =
                    pxMBSRegisterCB->peMBSCoilsCB( pxMBSRegisterCB->pvCtx, &pubMBPDU[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                                   usRegAddress, usCoilCnt, MBS_REGISTER_WRITE );
#else
                eStatus = pxMBSRegisterCB->peMBSCoilsCB( &pubMBPDU[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF], usRegAddress, usCoilCnt, MBS_REGISTER_WRITE );
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691d      	ldr	r5, [r3, #16]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1d98      	adds	r0, r3, #6
 8009ed2:	2316      	movs	r3, #22
 8009ed4:	18fc      	adds	r4, r7, r3
 8009ed6:	187b      	adds	r3, r7, r1
 8009ed8:	881a      	ldrh	r2, [r3, #0]
 8009eda:	2314      	movs	r3, #20
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	8819      	ldrh	r1, [r3, #0]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	47a8      	blx	r5
 8009ee4:	0003      	movs	r3, r0
 8009ee6:	7023      	strb	r3, [r4, #0]
#endif
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. 
                 */
                *pusMBPDULen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2205      	movs	r2, #5
 8009eec:	801a      	strh	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009eee:	e00d      	b.n	8009f0c <eMBSFuncWriteMultipleCoils+0x10a>
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009ef0:	2316      	movs	r3, #22
 8009ef2:	18fb      	adds	r3, r7, r3
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSCoilsCB )
 8009ef8:	e008      	b.n	8009f0c <eMBSFuncWriteMultipleCoils+0x10a>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009efa:	2316      	movs	r3, #22
 8009efc:	18fb      	adds	r3, r7, r3
 8009efe:	2203      	movs	r2, #3
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	e003      	b.n	8009f0c <eMBSFuncWriteMultipleCoils+0x10a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 8009f04:	2316      	movs	r3, #22
 8009f06:	18fb      	adds	r3, r7, r3
 8009f08:	2203      	movs	r2, #3
 8009f0a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8009f0c:	2316      	movs	r3, #22
 8009f0e:	18fb      	adds	r3, r7, r3
 8009f10:	781b      	ldrb	r3, [r3, #0]
}
 8009f12:	0018      	movs	r0, r3
 8009f14:	46bd      	mov	sp, r7
 8009f16:	b006      	add	sp, #24
 8009f18:	bdb0      	pop	{r4, r5, r7, pc}

08009f1a <eMBSFuncReadDiscreteInputs>:

#if MBS_FUNC_READ_DISCRETE_ENABLED == 1
eMBException
eMBSFuncReadDiscreteInputs( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 8009f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1c:	b089      	sub	sp, #36	; 0x24
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UBYTE           ubNBytes;
    UBYTE          *pubFrameCur;

    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 8009f26:	231e      	movs	r3, #30
 8009f28:	18fb      	adds	r3, r7, r3
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	d000      	beq.n	8009f38 <eMBSFuncReadDiscreteInputs+0x1e>
 8009f36:	e087      	b.n	800a048 <eMBSFuncReadDiscreteInputs+0x12e>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	201c      	movs	r0, #28
 8009f42:	183b      	adds	r3, r7, r0
 8009f44:	0212      	lsls	r2, r2, #8
 8009f46:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b299      	uxth	r1, r3
 8009f50:	183b      	adds	r3, r7, r0
 8009f52:	183a      	adds	r2, r7, r0
 8009f54:	8812      	ldrh	r2, [r2, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	201a      	movs	r0, #26
 8009f64:	183b      	adds	r3, r7, r0
 8009f66:	0212      	lsls	r2, r2, #8
 8009f68:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b299      	uxth	r1, r3
 8009f72:	183b      	adds	r3, r7, r0
 8009f74:	183a      	adds	r2, r7, r0
 8009f76:	8812      	ldrh	r2, [r2, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) && ( usDiscreteCnt <= MB_PDU_FUNC_READ_DISCCNT_MAX ) )
 8009f7c:	183b      	adds	r3, r7, r0
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d05c      	beq.n	800a03e <eMBSFuncReadDiscreteInputs+0x124>
 8009f84:	0001      	movs	r1, r0
 8009f86:	183b      	adds	r3, r7, r0
 8009f88:	881a      	ldrh	r2, [r3, #0]
 8009f8a:	23fa      	movs	r3, #250	; 0xfa
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d855      	bhi.n	800a03e <eMBSFuncReadDiscreteInputs+0x124>
        {
            /* Set the current PDU data pointer to the beginning. */
            pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	617b      	str	r3, [r7, #20]
            *pusMBPDULen = MB_PDU_FUNC_OFF;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pubFrameCur++ = MBS_FUNC_READ_DISCRETE_INPUTS;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	617a      	str	r2, [r7, #20]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	3301      	adds	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. 
             */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8009fb2:	187b      	adds	r3, r7, r1
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	4013      	ands	r3, r2
 8009fba:	d009      	beq.n	8009fd0 <eMBSFuncReadDiscreteInputs+0xb6>
            {
                ubNBytes = ( UBYTE ) ( usDiscreteCnt / 8 + 1 );
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	08db      	lsrs	r3, r3, #3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	231f      	movs	r3, #31
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	3201      	adds	r2, #1
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e007      	b.n	8009fe0 <eMBSFuncReadDiscreteInputs+0xc6>
            }
            else
            {
                ubNBytes = ( UBYTE ) ( usDiscreteCnt / 8 );
 8009fd0:	231a      	movs	r3, #26
 8009fd2:	18fb      	adds	r3, r7, r3
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	08db      	lsrs	r3, r3, #3
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	231f      	movs	r3, #31
 8009fdc:	18fb      	adds	r3, r7, r3
 8009fde:	701a      	strb	r2, [r3, #0]
            }
            *pubFrameCur++ = ubNBytes;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	617a      	str	r2, [r7, #20]
 8009fe6:	261f      	movs	r6, #31
 8009fe8:	19ba      	adds	r2, r7, r6
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	801a      	strh	r2, [r3, #0]

            /* Get the acutal register values from the callback. */
            if( NULL != pxMBSRegisterCB->peMBSDiscInputCB )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d018      	beq.n	800a034 <eMBSFuncReadDiscreteInputs+0x11a>
                                                       usDiscreteCnt );
#else
#if defined( HI_TECH_C ) && defined( __PICC18__ )
               	eStatus = pxMBSRegisterCB->peMBSDiscInputCB( pubFrameCur, usRegAddress, usDiscreteCnt, NULL );
#else
               	eStatus = pxMBSRegisterCB->peMBSDiscInputCB( pubFrameCur, usRegAddress, usDiscreteCnt );
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	221e      	movs	r2, #30
 800a008:	18bc      	adds	r4, r7, r2
 800a00a:	221a      	movs	r2, #26
 800a00c:	18ba      	adds	r2, r7, r2
 800a00e:	8815      	ldrh	r5, [r2, #0]
 800a010:	221c      	movs	r2, #28
 800a012:	18ba      	adds	r2, r7, r2
 800a014:	8811      	ldrh	r1, [r2, #0]
 800a016:	6978      	ldr	r0, [r7, #20]
 800a018:	002a      	movs	r2, r5
 800a01a:	4798      	blx	r3
 800a01c:	0003      	movs	r3, r0
 800a01e:	7023      	strb	r3, [r4, #0]
#endif
#endif
                *pusMBPDULen += ( USHORT ) ubNBytes;;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	881a      	ldrh	r2, [r3, #0]
 800a024:	19bb      	adds	r3, r7, r6
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	18d3      	adds	r3, r2, r3
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	801a      	strh	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSDiscInputCB )
 800a032:	e00d      	b.n	800a050 <eMBSFuncReadDiscreteInputs+0x136>
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a034:	231e      	movs	r3, #30
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2202      	movs	r2, #2
 800a03a:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSDiscInputCB )
 800a03c:	e008      	b.n	800a050 <eMBSFuncReadDiscreteInputs+0x136>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a03e:	231e      	movs	r3, #30
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	2203      	movs	r2, #3
 800a044:	701a      	strb	r2, [r3, #0]
 800a046:	e003      	b.n	800a050 <eMBSFuncReadDiscreteInputs+0x136>
    }
    else
    {
        /* Can't be a valid read discrete input request because the length
         * is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a048:	231e      	movs	r3, #30
 800a04a:	18fb      	adds	r3, r7, r3
 800a04c:	2203      	movs	r2, #3
 800a04e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800a050:	231e      	movs	r3, #30
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	781b      	ldrb	r3, [r3, #0]
}
 800a056:	0018      	movs	r0, r3
 800a058:	46bd      	mov	sp, r7
 800a05a:	b009      	add	sp, #36	; 0x24
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a060 <eMBSFuncReadFileRecord>:
/* ----------------------- Start implementation -----------------------------*/
#if MBS_FUNC_READ_FILE_RECORD_ENABLED == 1
eMBException
eMBSFuncReadFileRecord( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	b08d      	sub	sp, #52	; 0x34
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
    UBYTE           ubByteCount;
    UBYTE          *pubFrameCur;
    UBYTE           ubReqIsGood = 1;
 800a06c:	2323      	movs	r3, #35	; 0x23
 800a06e:	18fb      	adds	r3, r7, r3
 800a070:	2201      	movs	r2, #1
 800a072:	701a      	strb	r2, [r3, #0]
    USHORT          usResLen = 0xffff;
 800a074:	2320      	movs	r3, #32
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	2201      	movs	r2, #1
 800a07a:	4252      	negs	r2, r2
 800a07c:	801a      	strh	r2, [r3, #0]
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a07e:	231f      	movs	r3, #31
 800a080:	18fb      	adds	r3, r7, r3
 800a082:	2203      	movs	r2, #3
 800a084:	701a      	strb	r2, [r3, #0]

    /* Length check: first at least one full frame?, second: bytecount + overheads sums up to PDU length? */
    if( ( ( MB_PDU_FUNC_READ_MIN_SIZE + MB_PDU_SIZE_MIN ) < *pusMBPDULen ) || ( MB_PDU_SIZE_MIN + 2 + pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_BYTE_OFF] != *pusMBPDULen ) )
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	2b09      	cmp	r3, #9
 800a08c:	d808      	bhi.n	800a0a0 <eMBSFuncReadFileRecord+0x40>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3301      	adds	r3, #1
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	3303      	adds	r3, #3
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	8812      	ldrh	r2, [r2, #0]
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d100      	bne.n	800a0a0 <eMBSFuncReadFileRecord+0x40>
 800a09e:	e1ad      	b.n	800a3fc <eMBSFuncReadFileRecord+0x39c>
    {
        ubByteCount = ( UBYTE ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_BYTE_OFF] );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	251c      	movs	r5, #28
 800a0a6:	197b      	adds	r3, r7, r5
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	701a      	strb	r2, [r3, #0]
        UBYTE ubNrSubReq = ubByteCount / 7;
 800a0ac:	231b      	movs	r3, #27
 800a0ae:	18fc      	adds	r4, r7, r3
 800a0b0:	197b      	adds	r3, r7, r5
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2107      	movs	r1, #7
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f7f6 f826 	bl	8000108 <__udivsi3>
 800a0bc:	0003      	movs	r3, r0
 800a0be:	7023      	strb	r3, [r4, #0]

        usResLen = 0; 
 800a0c0:	2320      	movs	r3, #32
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( ubByteCount >= MB_PDU_FUNC_READ_BYTE_MIN ) && ( ubByteCount <= MB_PDU_FUNC_READ_BYTE_MAX ) )
 800a0c8:	197b      	adds	r3, r7, r5
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b06      	cmp	r3, #6
 800a0ce:	d800      	bhi.n	800a0d2 <eMBSFuncReadFileRecord+0x72>
 800a0d0:	e190      	b.n	800a3f4 <eMBSFuncReadFileRecord+0x394>
 800a0d2:	197b      	adds	r3, r7, r5
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2bf5      	cmp	r3, #245	; 0xf5
 800a0d8:	d900      	bls.n	800a0dc <eMBSFuncReadFileRecord+0x7c>
 800a0da:	e18b      	b.n	800a3f4 <eMBSFuncReadFileRecord+0x394>
        {
            /* Check for complete sub-requests */
            if ( ubByteCount % 7 == 0 ) {
 800a0dc:	197b      	adds	r3, r7, r5
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2107      	movs	r1, #7
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7f6 f896 	bl	8000214 <__aeabi_uidivmod>
 800a0e8:	000b      	movs	r3, r1
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d000      	beq.n	800a0f2 <eMBSFuncReadFileRecord+0x92>
 800a0f0:	e0c3      	b.n	800a27a <eMBSFuncReadFileRecord+0x21a>
                /* point to first sub-request */
                pubFrameCur = &pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_SUBREQ_OFF];
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3302      	adds	r3, #2
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24

                for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a0f8:	231e      	movs	r3, #30
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	e0b1      	b.n	800a266 <eMBSFuncReadFileRecord+0x206>
                    USHORT usFileNo;
                    USHORT usRecordNo;
                    USHORT usRecordLen;

                    UBYTE ubRefType = *pubFrameCur++;
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	627a      	str	r2, [r7, #36]	; 0x24
 800a108:	211a      	movs	r1, #26
 800a10a:	187a      	adds	r2, r7, r1
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	7013      	strb	r3, [r2, #0]
                    if (ubRefType != MB_PDU_FUNC_READWRITE_FILE_REF_TYPE) 
 800a110:	187b      	adds	r3, r7, r1
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b06      	cmp	r3, #6
 800a116:	d004      	beq.n	800a122 <eMBSFuncReadFileRecord+0xc2>
                    {
                            eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a118:	231f      	movs	r3, #31
 800a11a:	18fb      	adds	r3, r7, r3
 800a11c:	2202      	movs	r2, #2
 800a11e:	701a      	strb	r2, [r3, #0]
                            break;
 800a120:	e0af      	b.n	800a282 <eMBSFuncReadFileRecord+0x222>
                    }
                  
                    usFileNo = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	627a      	str	r2, [r7, #36]	; 0x24
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	2018      	movs	r0, #24
 800a12c:	183b      	adds	r3, r7, r0
 800a12e:	801a      	strh	r2, [r3, #0]
                    usFileNo |= ( USHORT ) ( *pubFrameCur++ );
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	627a      	str	r2, [r7, #36]	; 0x24
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b299      	uxth	r1, r3
 800a13a:	183b      	adds	r3, r7, r0
 800a13c:	183a      	adds	r2, r7, r0
 800a13e:	8812      	ldrh	r2, [r2, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	801a      	strh	r2, [r3, #0]

                    usRecordNo = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	627a      	str	r2, [r7, #36]	; 0x24
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	2016      	movs	r0, #22
 800a14e:	183b      	adds	r3, r7, r0
 800a150:	801a      	strh	r2, [r3, #0]
                    usRecordNo |= ( USHORT ) ( *pubFrameCur++ );
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	627a      	str	r2, [r7, #36]	; 0x24
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	b299      	uxth	r1, r3
 800a15c:	183b      	adds	r3, r7, r0
 800a15e:	183a      	adds	r2, r7, r0
 800a160:	8812      	ldrh	r2, [r2, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	801a      	strh	r2, [r3, #0]

                    usRecordLen = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	627a      	str	r2, [r7, #36]	; 0x24
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	2414      	movs	r4, #20
 800a170:	193b      	adds	r3, r7, r4
 800a172:	801a      	strh	r2, [r3, #0]
                    usRecordLen |= ( USHORT ) ( *pubFrameCur++ );
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	627a      	str	r2, [r7, #36]	; 0x24
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b299      	uxth	r1, r3
 800a17e:	193b      	adds	r3, r7, r4
 800a180:	193a      	adds	r2, r7, r4
 800a182:	8812      	ldrh	r2, [r2, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	801a      	strh	r2, [r3, #0]

                    usResLen += 1 + 1 + usRecordLen * 2; /* byte-length subreq, reference, data bytes */
 800a188:	193b      	adds	r3, r7, r4
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	18db      	adds	r3, r3, r3
 800a192:	b299      	uxth	r1, r3
 800a194:	2220      	movs	r2, #32
 800a196:	18bb      	adds	r3, r7, r2
 800a198:	18ba      	adds	r2, r7, r2
 800a19a:	8812      	ldrh	r2, [r2, #0]
 800a19c:	188a      	adds	r2, r1, r2
 800a19e:	801a      	strh	r2, [r3, #0]

                    /* check each sub-request for sanity */
                    if ( ubRefType != MB_PDU_FUNC_READWRITE_FILE_REF_TYPE || 
 800a1a0:	231a      	movs	r3, #26
 800a1a2:	18fb      	adds	r3, r7, r3
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d10c      	bne.n	800a1c4 <eMBSFuncReadFileRecord+0x164>
 800a1aa:	183b      	adds	r3, r7, r0
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	4a97      	ldr	r2, [pc, #604]	; (800a40c <eMBSFuncReadFileRecord+0x3ac>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d807      	bhi.n	800a1c4 <eMBSFuncReadFileRecord+0x164>
                         usRecordNo > MB_PDU_FUNC_READ_FILE_RECORDNR_MAX ||
                         usRecordLen + usRecordNo > MB_PDU_FUNC_READ_FILE_RECORDNR_MAX )
 800a1b4:	193b      	adds	r3, r7, r4
 800a1b6:	881a      	ldrh	r2, [r3, #0]
 800a1b8:	183b      	adds	r3, r7, r0
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	18d3      	adds	r3, r2, r3
                         usRecordNo > MB_PDU_FUNC_READ_FILE_RECORDNR_MAX ||
 800a1be:	4a93      	ldr	r2, [pc, #588]	; (800a40c <eMBSFuncReadFileRecord+0x3ac>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	dd08      	ble.n	800a1d6 <eMBSFuncReadFileRecord+0x176>
                    {
                        eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a1c4:	231f      	movs	r3, #31
 800a1c6:	18fb      	adds	r3, r7, r3
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	701a      	strb	r2, [r3, #0]
                        ubReqIsGood = 0;
 800a1cc:	2323      	movs	r3, #35	; 0x23
 800a1ce:	18fb      	adds	r3, r7, r3
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
                        break;
 800a1d4:	e055      	b.n	800a282 <eMBSFuncReadFileRecord+0x222>
                    }

                    /* can the answer frame fit into PDU? */
                    if ( usResLen > MB_PDU_FUNC_READ_BYTE_MAX ) {
 800a1d6:	2320      	movs	r3, #32
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	2bf5      	cmp	r3, #245	; 0xf5
 800a1de:	d908      	bls.n	800a1f2 <eMBSFuncReadFileRecord+0x192>
                        eStatus = MB_PDU_EX_SLAVE_DEVICE_FAILURE;
 800a1e0:	231f      	movs	r3, #31
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	701a      	strb	r2, [r3, #0]
                        ubReqIsGood = 0;
 800a1e8:	2323      	movs	r3, #35	; 0x23
 800a1ea:	18fb      	adds	r3, r7, r3
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
                        break;
 800a1f0:	e047      	b.n	800a282 <eMBSFuncReadFileRecord+0x222>
                    }
 
                    /* store request, as we overwrite it when generating the answer */
                    /* the returned error code is not according to the specification */
                    if ( i < MB_PDU_FUNC_READWRITE_FILE_RECORD_SUBREQ_MAX ) {
 800a1f2:	201e      	movs	r0, #30
 800a1f4:	183b      	adds	r3, r7, r0
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b22      	cmp	r3, #34	; 0x22
 800a1fa:	d825      	bhi.n	800a248 <eMBSFuncReadFileRecord+0x1e8>
                        xSubreqBuffer[i].usFileNo = usFileNo;
 800a1fc:	183b      	adds	r3, r7, r0
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	4983      	ldr	r1, [pc, #524]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a202:	0013      	movs	r3, r2
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	189b      	adds	r3, r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	2218      	movs	r2, #24
 800a20c:	18ba      	adds	r2, r7, r2
 800a20e:	8812      	ldrh	r2, [r2, #0]
 800a210:	525a      	strh	r2, [r3, r1]
                        xSubreqBuffer[i].usRecordNo = usRecordNo;
 800a212:	183b      	adds	r3, r7, r0
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	497e      	ldr	r1, [pc, #504]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a218:	0013      	movs	r3, r2
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	189b      	adds	r3, r3, r2
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	18cb      	adds	r3, r1, r3
 800a222:	3302      	adds	r3, #2
 800a224:	2216      	movs	r2, #22
 800a226:	18ba      	adds	r2, r7, r2
 800a228:	8812      	ldrh	r2, [r2, #0]
 800a22a:	801a      	strh	r2, [r3, #0]
                        xSubreqBuffer[i].usRecordLen = usRecordLen;
 800a22c:	183b      	adds	r3, r7, r0
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	4977      	ldr	r1, [pc, #476]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a232:	0013      	movs	r3, r2
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	189b      	adds	r3, r3, r2
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	18cb      	adds	r3, r1, r3
 800a23c:	3304      	adds	r3, #4
 800a23e:	2214      	movs	r2, #20
 800a240:	18ba      	adds	r2, r7, r2
 800a242:	8812      	ldrh	r2, [r2, #0]
 800a244:	801a      	strh	r2, [r3, #0]
 800a246:	e008      	b.n	800a25a <eMBSFuncReadFileRecord+0x1fa>
                    } else {
                        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a248:	231f      	movs	r3, #31
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	2203      	movs	r2, #3
 800a24e:	701a      	strb	r2, [r3, #0]
                        ubReqIsGood = 0;
 800a250:	2323      	movs	r3, #35	; 0x23
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
                        break;
 800a258:	e013      	b.n	800a282 <eMBSFuncReadFileRecord+0x222>
                for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a25a:	211e      	movs	r1, #30
 800a25c:	187b      	adds	r3, r7, r1
 800a25e:	781a      	ldrb	r2, [r3, #0]
 800a260:	187b      	adds	r3, r7, r1
 800a262:	3201      	adds	r2, #1
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	231e      	movs	r3, #30
 800a268:	18fa      	adds	r2, r7, r3
 800a26a:	231b      	movs	r3, #27
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d200      	bcs.n	800a278 <eMBSFuncReadFileRecord+0x218>
 800a276:	e744      	b.n	800a102 <eMBSFuncReadFileRecord+0xa2>
 800a278:	e003      	b.n	800a282 <eMBSFuncReadFileRecord+0x222>
                    }
                }
            } else {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a27a:	231f      	movs	r3, #31
 800a27c:	18fb      	adds	r3, r7, r3
 800a27e:	2202      	movs	r2, #2
 800a280:	701a      	strb	r2, [r3, #0]
            }

            /* sub-requests are good, actually process frame */
            if (ubReqIsGood) {
 800a282:	2323      	movs	r3, #35	; 0x23
 800a284:	18fb      	adds	r3, r7, r3
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d100      	bne.n	800a28e <eMBSFuncReadFileRecord+0x22e>
 800a28c:	e0b6      	b.n	800a3fc <eMBSFuncReadFileRecord+0x39c>
                /* point to start of PDU */
                pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
                *pusMBPDULen = MB_PDU_FUNC_OFF;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2200      	movs	r2, #0
 800a296:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pubFrameCur++ = MBS_FUNCCODE_READ_FILE_RECORD;
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	627a      	str	r2, [r7, #36]	; 0x24
 800a29e:	2214      	movs	r2, #20
 800a2a0:	701a      	strb	r2, [r3, #0]
                *pusMBPDULen += ( USHORT ) 1;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pubFrameCur++ = ( UBYTE ) usResLen;
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	627a      	str	r2, [r7, #36]	; 0x24
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	18ba      	adds	r2, r7, r2
 800a2b8:	8812      	ldrh	r2, [r2, #0]
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
                *pusMBPDULen += ( USHORT ) 1;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	801a      	strh	r2, [r3, #0]

                for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a2ca:	231d      	movs	r3, #29
 800a2cc:	18fb      	adds	r3, r7, r3
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	e084      	b.n	800a3de <eMBSFuncReadFileRecord+0x37e>
                    UBYTE ubSubreqLen = xSubreqBuffer[i].usRecordLen * 2;
 800a2d4:	201d      	movs	r0, #29
 800a2d6:	183b      	adds	r3, r7, r0
 800a2d8:	781a      	ldrb	r2, [r3, #0]
 800a2da:	494d      	ldr	r1, [pc, #308]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a2dc:	0013      	movs	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	189b      	adds	r3, r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	18cb      	adds	r3, r1, r3
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2213      	movs	r2, #19
 800a2ee:	18ba      	adds	r2, r7, r2
 800a2f0:	18db      	adds	r3, r3, r3
 800a2f2:	7013      	strb	r3, [r2, #0]

                    /* First byte contains the number of bytes for this subreq */
                    *pubFrameCur++ = ( UBYTE ) ( 1 + xSubreqBuffer[i].usRecordLen * 2 );
 800a2f4:	183b      	adds	r3, r7, r0
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	4945      	ldr	r1, [pc, #276]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a2fa:	0013      	movs	r3, r2
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	189b      	adds	r3, r3, r2
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	18cb      	adds	r3, r1, r3
 800a304:	3304      	adds	r3, #4
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	18db      	adds	r3, r3, r3
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	1c59      	adds	r1, r3, #1
 800a312:	6279      	str	r1, [r7, #36]	; 0x24
 800a314:	3201      	adds	r2, #1
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	701a      	strb	r2, [r3, #0]
                    *pusMBPDULen += ( USHORT ) 1;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	3301      	adds	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	801a      	strh	r2, [r3, #0]

                    /* Second byte in the response contains the reference type */
                    *pubFrameCur++ = ( UBYTE ) MB_PDU_FUNC_READWRITE_FILE_REF_TYPE;
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	627a      	str	r2, [r7, #36]	; 0x24
 800a32c:	2206      	movs	r2, #6
 800a32e:	701a      	strb	r2, [r3, #0]
                    *pusMBPDULen += ( USHORT ) 1;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	801a      	strh	r2, [r3, #0]

                    /* Get the acutal recard values from the callback. */
                    if( NULL != pxMBSRegisterCB->peMBSFileRecordCB )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d041      	beq.n	800a3c8 <eMBSFuncReadFileRecord+0x368>
                    {
                        eStatus = pxMBSRegisterCB->peMBSFileRecordCB( 
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689d      	ldr	r5, [r3, #8]
 800a348:	183b      	adds	r3, r7, r0
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	4930      	ldr	r1, [pc, #192]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a34e:	0013      	movs	r3, r2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	189b      	adds	r3, r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	5a5e      	ldrh	r6, [r3, r1]
 800a358:	183b      	adds	r3, r7, r0
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	492c      	ldr	r1, [pc, #176]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a35e:	0013      	movs	r3, r2
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	189b      	adds	r3, r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	18cb      	adds	r3, r1, r3
 800a368:	3302      	adds	r3, #2
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	469c      	mov	ip, r3
 800a36e:	183b      	adds	r3, r7, r0
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	4927      	ldr	r1, [pc, #156]	; (800a410 <eMBSFuncReadFileRecord+0x3b0>)
 800a374:	0013      	movs	r3, r2
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	189b      	adds	r3, r3, r2
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	18cb      	adds	r3, r1, r3
 800a37e:	3304      	adds	r3, #4
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	221f      	movs	r2, #31
 800a384:	18bc      	adds	r4, r7, r2
 800a386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a388:	2201      	movs	r2, #1
 800a38a:	9200      	str	r2, [sp, #0]
 800a38c:	4662      	mov	r2, ip
 800a38e:	0031      	movs	r1, r6
 800a390:	47a8      	blx	r5
 800a392:	0003      	movs	r3, r0
 800a394:	7023      	strb	r3, [r4, #0]
                            xSubreqBuffer[i].usFileNo,
                            xSubreqBuffer[i].usRecordNo, 
                            xSubreqBuffer[i].usRecordLen, 
                            MBS_REGISTER_READ );

                        if (eStatus != MB_PDU_EX_NONE) {
 800a396:	221f      	movs	r2, #31
 800a398:	18bb      	adds	r3, r7, r2
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <eMBSFuncReadFileRecord+0x348>
                            eStatus = MB_PDU_EX_SLAVE_DEVICE_FAILURE;
 800a3a0:	18bb      	adds	r3, r7, r2
 800a3a2:	2204      	movs	r2, #4
 800a3a4:	701a      	strb	r2, [r3, #0]
                            break;
 800a3a6:	e024      	b.n	800a3f2 <eMBSFuncReadFileRecord+0x392>
                        }

                        pubFrameCur += ubSubreqLen;
 800a3a8:	2113      	movs	r1, #19
 800a3aa:	187b      	adds	r3, r7, r1
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b0:	18d3      	adds	r3, r2, r3
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
                        *pusMBPDULen += ubSubreqLen;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	881a      	ldrh	r2, [r3, #0]
 800a3b8:	187b      	adds	r3, r7, r1
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	18d3      	adds	r3, r2, r3
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	801a      	strh	r2, [r3, #0]
 800a3c6:	e004      	b.n	800a3d2 <eMBSFuncReadFileRecord+0x372>
                    }
                    else
                    {
                        eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a3c8:	231f      	movs	r3, #31
 800a3ca:	18fb      	adds	r3, r7, r3
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	701a      	strb	r2, [r3, #0]
                        break;
 800a3d0:	e00f      	b.n	800a3f2 <eMBSFuncReadFileRecord+0x392>
                for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a3d2:	211d      	movs	r1, #29
 800a3d4:	187b      	adds	r3, r7, r1
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	187b      	adds	r3, r7, r1
 800a3da:	3201      	adds	r2, #1
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	231d      	movs	r3, #29
 800a3e0:	18fa      	adds	r2, r7, r3
 800a3e2:	231b      	movs	r3, #27
 800a3e4:	18fb      	adds	r3, r7, r3
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d200      	bcs.n	800a3f0 <eMBSFuncReadFileRecord+0x390>
 800a3ee:	e771      	b.n	800a2d4 <eMBSFuncReadFileRecord+0x274>
            if (ubReqIsGood) {
 800a3f0:	e004      	b.n	800a3fc <eMBSFuncReadFileRecord+0x39c>
 800a3f2:	e003      	b.n	800a3fc <eMBSFuncReadFileRecord+0x39c>
                } /* for */
            } /* ubReqIsGood */
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a3f4:	231f      	movs	r3, #31
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 800a3fc:	231f      	movs	r3, #31
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	781b      	ldrb	r3, [r3, #0]
}
 800a402:	0018      	movs	r0, r3
 800a404:	46bd      	mov	sp, r7
 800a406:	b00b      	add	sp, #44	; 0x2c
 800a408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40a:	46c0      	nop			; (mov r8, r8)
 800a40c:	0000270f 	.word	0x0000270f
 800a410:	20004ab4 	.word	0x20004ab4

0800a414 <eMBSFuncWriteFileRecord>:

#if MBS_FUNC_WRITE_FILE_RECORD_ENABLED == 1
eMBException
eMBSFuncWriteFileRecord( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a416:	b08d      	sub	sp, #52	; 0x34
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a420:	2327      	movs	r3, #39	; 0x27
 800a422:	18fb      	adds	r3, r7, r3
 800a424:	2203      	movs	r2, #3
 800a426:	701a      	strb	r2, [r3, #0]

    /* Length check: first at least one full frame?, second: bytecount + overheads sums up to PDU length? */
    if( ( ( MB_PDU_FUNC_WRITE_MIN_SIZE + MB_PDU_SIZE_MIN ) < *pusMBPDULen ) || ( MB_PDU_SIZE_MIN + 1 + pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_BYTE_OFF] != *pusMBPDULen ) )
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	2b0a      	cmp	r3, #10
 800a42e:	d808      	bhi.n	800a442 <eMBSFuncWriteFileRecord+0x2e>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3301      	adds	r3, #1
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	3302      	adds	r3, #2
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	8812      	ldrh	r2, [r2, #0]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d100      	bne.n	800a442 <eMBSFuncWriteFileRecord+0x2e>
 800a440:	e0c1      	b.n	800a5c6 <eMBSFuncWriteFileRecord+0x1b2>
    {
        UBYTE ubByteCount = ( UBYTE ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_BYTE_OFF] );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	251e      	movs	r5, #30
 800a448:	197b      	adds	r3, r7, r5
 800a44a:	7812      	ldrb	r2, [r2, #0]
 800a44c:	701a      	strb	r2, [r3, #0]
        UBYTE ubNrSubReq = ubByteCount / 7;
 800a44e:	231d      	movs	r3, #29
 800a450:	18fc      	adds	r4, r7, r3
 800a452:	197b      	adds	r3, r7, r5
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2107      	movs	r1, #7
 800a458:	0018      	movs	r0, r3
 800a45a:	f7f5 fe55 	bl	8000108 <__udivsi3>
 800a45e:	0003      	movs	r3, r0
 800a460:	7023      	strb	r3, [r4, #0]

        /* check for size violation */
        if( ( ubByteCount >= MB_PDU_FUNC_WRITE_BYTE_MIN ) && ( ubByteCount <= MB_PDU_FUNC_WRITE_BYTE_MAX ) )
 800a462:	002a      	movs	r2, r5
 800a464:	18bb      	adds	r3, r7, r2
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d800      	bhi.n	800a46e <eMBSFuncWriteFileRecord+0x5a>
 800a46c:	e0a7      	b.n	800a5be <eMBSFuncWriteFileRecord+0x1aa>
 800a46e:	18bb      	adds	r3, r7, r2
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2bfb      	cmp	r3, #251	; 0xfb
 800a474:	d900      	bls.n	800a478 <eMBSFuncWriteFileRecord+0x64>
 800a476:	e0a2      	b.n	800a5be <eMBSFuncWriteFileRecord+0x1aa>
        {
            /* Handle sub-requests */
            /* point to first sub-request */
            UBYTE * pubFrameCur = &pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_SUBREQ_OFF];
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3302      	adds	r3, #2
 800a47c:	623b      	str	r3, [r7, #32]
            UBYTE * pubFrameEnd = &pubMBPDU[MB_PDU_FUNC_READWRITE_FILE_BYTE_OFF] + 1 + ubByteCount;
 800a47e:	18bb      	adds	r3, r7, r2
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	3302      	adds	r3, #2
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	18d3      	adds	r3, r2, r3
 800a488:	61bb      	str	r3, [r7, #24]

            for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a48a:	231f      	movs	r3, #31
 800a48c:	18fb      	adds	r3, r7, r3
 800a48e:	2200      	movs	r2, #0
 800a490:	701a      	strb	r2, [r3, #0]
 800a492:	e089      	b.n	800a5a8 <eMBSFuncWriteFileRecord+0x194>
                USHORT usFileNo;
                USHORT usRecordNo;
                USHORT usRecordLen;

                if (pubFrameCur + 7 > pubFrameEnd) 
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	3307      	adds	r3, #7
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d204      	bcs.n	800a4a8 <eMBSFuncWriteFileRecord+0x94>
                {
                    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a49e:	2327      	movs	r3, #39	; 0x27
 800a4a0:	18fb      	adds	r3, r7, r3
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	701a      	strb	r2, [r3, #0]
                    break;
 800a4a6:	e089      	b.n	800a5bc <eMBSFuncWriteFileRecord+0x1a8>
                }

                UBYTE ubRefType = *pubFrameCur++;
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	623a      	str	r2, [r7, #32]
 800a4ae:	2117      	movs	r1, #23
 800a4b0:	187a      	adds	r2, r7, r1
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	7013      	strb	r3, [r2, #0]

                if (ubRefType != MB_PDU_FUNC_READWRITE_FILE_REF_TYPE) 
 800a4b6:	187b      	adds	r3, r7, r1
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b06      	cmp	r3, #6
 800a4bc:	d004      	beq.n	800a4c8 <eMBSFuncWriteFileRecord+0xb4>
                {
                    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a4be:	2327      	movs	r3, #39	; 0x27
 800a4c0:	18fb      	adds	r3, r7, r3
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	701a      	strb	r2, [r3, #0]
                    break;
 800a4c6:	e079      	b.n	800a5bc <eMBSFuncWriteFileRecord+0x1a8>
                }
              
                usFileNo = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	623a      	str	r2, [r7, #32]
 800a4ce:	781a      	ldrb	r2, [r3, #0]
 800a4d0:	2014      	movs	r0, #20
 800a4d2:	183b      	adds	r3, r7, r0
 800a4d4:	801a      	strh	r2, [r3, #0]
                usFileNo |= ( USHORT ) ( *pubFrameCur++ );
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	623a      	str	r2, [r7, #32]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	b299      	uxth	r1, r3
 800a4e0:	183b      	adds	r3, r7, r0
 800a4e2:	183a      	adds	r2, r7, r0
 800a4e4:	8812      	ldrh	r2, [r2, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	801a      	strh	r2, [r3, #0]

                usRecordNo = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	623a      	str	r2, [r7, #32]
 800a4f0:	781a      	ldrb	r2, [r3, #0]
 800a4f2:	2012      	movs	r0, #18
 800a4f4:	183b      	adds	r3, r7, r0
 800a4f6:	801a      	strh	r2, [r3, #0]
                usRecordNo |= ( USHORT ) ( *pubFrameCur++ );
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	623a      	str	r2, [r7, #32]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	b299      	uxth	r1, r3
 800a502:	183b      	adds	r3, r7, r0
 800a504:	183a      	adds	r2, r7, r0
 800a506:	8812      	ldrh	r2, [r2, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	801a      	strh	r2, [r3, #0]

                usRecordLen = ( USHORT ) ( ( USHORT ) *pubFrameCur++ );
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	623a      	str	r2, [r7, #32]
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	2010      	movs	r0, #16
 800a516:	183b      	adds	r3, r7, r0
 800a518:	801a      	strh	r2, [r3, #0]
                usRecordLen |= ( USHORT ) ( *pubFrameCur++ );
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	623a      	str	r2, [r7, #32]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b299      	uxth	r1, r3
 800a524:	183b      	adds	r3, r7, r0
 800a526:	183a      	adds	r2, r7, r0
 800a528:	8812      	ldrh	r2, [r2, #0]
 800a52a:	430a      	orrs	r2, r1
 800a52c:	801a      	strh	r2, [r3, #0]

                /* check that data access stays within frame */
                if (pubFrameCur + usRecordLen*2 > pubFrameEnd) 
 800a52e:	183b      	adds	r3, r7, r0
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	001a      	movs	r2, r3
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	189b      	adds	r3, r3, r2
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d204      	bcs.n	800a54a <eMBSFuncWriteFileRecord+0x136>
                {
                    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a540:	2327      	movs	r3, #39	; 0x27
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	2202      	movs	r2, #2
 800a546:	701a      	strb	r2, [r3, #0]
                    break;
 800a548:	e038      	b.n	800a5bc <eMBSFuncWriteFileRecord+0x1a8>
                }

                /* Get the acutal recard values from the callback. */
                if( NULL != pxMBSRegisterCB->peMBSFileRecordCB )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01c      	beq.n	800a58c <eMBSFuncWriteFileRecord+0x178>
                {
                    eStatus = pxMBSRegisterCB->peMBSFileRecordCB( 
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689d      	ldr	r5, [r3, #8]
 800a556:	2227      	movs	r2, #39	; 0x27
 800a558:	18bc      	adds	r4, r7, r2
 800a55a:	2310      	movs	r3, #16
 800a55c:	18fb      	adds	r3, r7, r3
 800a55e:	881e      	ldrh	r6, [r3, #0]
 800a560:	2312      	movs	r3, #18
 800a562:	18fb      	adds	r3, r7, r3
 800a564:	881a      	ldrh	r2, [r3, #0]
 800a566:	2314      	movs	r3, #20
 800a568:	18fb      	adds	r3, r7, r3
 800a56a:	8819      	ldrh	r1, [r3, #0]
 800a56c:	6a38      	ldr	r0, [r7, #32]
 800a56e:	2300      	movs	r3, #0
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	0033      	movs	r3, r6
 800a574:	47a8      	blx	r5
 800a576:	0003      	movs	r3, r0
 800a578:	7023      	strb	r3, [r4, #0]
                        usFileNo,
                        usRecordNo, 
                        usRecordLen, 
                        MBS_REGISTER_WRITE);

                    if (eStatus != MB_PDU_EX_NONE) {
 800a57a:	2227      	movs	r2, #39	; 0x27
 800a57c:	18bb      	adds	r3, r7, r2
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <eMBSFuncWriteFileRecord+0x178>
                        eStatus = MB_PDU_EX_SLAVE_DEVICE_FAILURE;
 800a584:	18bb      	adds	r3, r7, r2
 800a586:	2204      	movs	r2, #4
 800a588:	701a      	strb	r2, [r3, #0]
                        break;
 800a58a:	e017      	b.n	800a5bc <eMBSFuncWriteFileRecord+0x1a8>
                    }
                }
                pubFrameCur += usRecordLen * 2;
 800a58c:	2310      	movs	r3, #16
 800a58e:	18fb      	adds	r3, r7, r3
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	001a      	movs	r2, r3
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	189b      	adds	r3, r3, r2
 800a59a:	623b      	str	r3, [r7, #32]
            for (UBYTE i = 0; i < ubNrSubReq; i++) {
 800a59c:	211f      	movs	r1, #31
 800a59e:	187b      	adds	r3, r7, r1
 800a5a0:	781a      	ldrb	r2, [r3, #0]
 800a5a2:	187b      	adds	r3, r7, r1
 800a5a4:	3201      	adds	r2, #1
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	231f      	movs	r3, #31
 800a5aa:	18fa      	adds	r2, r7, r3
 800a5ac:	231d      	movs	r3, #29
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	7812      	ldrb	r2, [r2, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d200      	bcs.n	800a5ba <eMBSFuncWriteFileRecord+0x1a6>
 800a5b8:	e76c      	b.n	800a494 <eMBSFuncWriteFileRecord+0x80>
        {
 800a5ba:	e004      	b.n	800a5c6 <eMBSFuncWriteFileRecord+0x1b2>
 800a5bc:	e003      	b.n	800a5c6 <eMBSFuncWriteFileRecord+0x1b2>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a5be:	2327      	movs	r3, #39	; 0x27
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 800a5c6:	2327      	movs	r3, #39	; 0x27
 800a5c8:	18fb      	adds	r3, r7, r3
 800a5ca:	781b      	ldrb	r3, [r3, #0]

    return MB_PDU_EX_ILLEGAL_DATA_VALUE;
}
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b00b      	add	sp, #44	; 0x2c
 800a5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5d4 <eMBSFuncReadHoldingRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MBS_FUNC_READ_HOLDING_REGISTERS_ENABLED == 1
eMBException
eMBSFuncReadHoldingRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5d6:	b089      	sub	sp, #36	; 0x24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UBYTE          *pubFrameCur;
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a5e0:	241f      	movs	r4, #31
 800a5e2:	193b      	adds	r3, r7, r4
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	701a      	strb	r2, [r3, #0]

    /* Length check */
    if( ( MB_PDU_FUNC_READ_HOLDING_SIZE + MB_PDU_SIZE_MIN ) == *pusMBPDULen )
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	2b05      	cmp	r3, #5
 800a5ee:	d000      	beq.n	800a5f2 <eMBSFuncReadHoldingRegister+0x1e>
 800a5f0:	e06d      	b.n	800a6ce <eMBSFuncReadHoldingRegister+0xfa>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	261c      	movs	r6, #28
 800a5fc:	19bb      	adds	r3, r7, r6
 800a5fe:	0212      	lsls	r2, r2, #8
 800a600:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3302      	adds	r3, #2
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	b299      	uxth	r1, r3
 800a60a:	19bb      	adds	r3, r7, r6
 800a60c:	19ba      	adds	r2, r7, r6
 800a60e:	8812      	ldrh	r2, [r2, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3303      	adds	r3, #3
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	201a      	movs	r0, #26
 800a61e:	183b      	adds	r3, r7, r0
 800a620:	0212      	lsls	r2, r2, #8
 800a622:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3304      	adds	r3, #4
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b299      	uxth	r1, r3
 800a62c:	183b      	adds	r3, r7, r0
 800a62e:	183a      	adds	r2, r7, r0
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	801a      	strh	r2, [r3, #0]
        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_HOLDING_REGCNT_MAX ) )
 800a636:	183b      	adds	r3, r7, r0
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d043      	beq.n	800a6c6 <eMBSFuncReadHoldingRegister+0xf2>
 800a63e:	183b      	adds	r3, r7, r0
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	2b7d      	cmp	r3, #125	; 0x7d
 800a644:	d83f      	bhi.n	800a6c6 <eMBSFuncReadHoldingRegister+0xf2>
        {
            /* Set the current PDU data pointer to the beginning. */
            pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	617b      	str	r3, [r7, #20]
            *pusMBPDULen = MB_PDU_FUNC_OFF;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2200      	movs	r2, #0
 800a64e:	801a      	strh	r2, [r3, #0]
            /* First byte contains the function code. */
            *pubFrameCur++ = MBS_FUNCCODE_READ_HOLDING_REGISTERS;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	617a      	str	r2, [r7, #20]
 800a656:	2203      	movs	r2, #3
 800a658:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pubFrameCur++ = ( UBYTE ) ( usRegCount * 2 );
 800a666:	183b      	adds	r3, r7, r0
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	b2d9      	uxtb	r1, r3
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	617a      	str	r2, [r7, #20]
 800a672:	1c0a      	adds	r2, r1, #0
 800a674:	1892      	adds	r2, r2, r2
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	801a      	strh	r2, [r3, #0]

            /* Get the acutal register values from the callback. */
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d016      	beq.n	800a6bc <eMBSFuncReadHoldingRegister+0xe8>
            {
                *pusMBPDULen += ( USHORT ) ( usRegCount * 2 );
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	881a      	ldrh	r2, [r3, #0]
 800a692:	183b      	adds	r3, r7, r0
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	18db      	adds	r3, r3, r3
 800a698:	b29b      	uxth	r3, r3
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	801a      	strh	r2, [r3, #0]
                    pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, pubFrameCur, usRegAddress, usRegCount,
                                                        MBS_REGISTER_READ );

#else
                eStatus =
                    pxMBSRegisterCB->peMBSRegHoldingCB( pubFrameCur, usRegAddress, usRegCount, MBS_REGISTER_READ );
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685d      	ldr	r5, [r3, #4]
 800a6a6:	193c      	adds	r4, r7, r4
 800a6a8:	183b      	adds	r3, r7, r0
 800a6aa:	881a      	ldrh	r2, [r3, #0]
 800a6ac:	19bb      	adds	r3, r7, r6
 800a6ae:	8819      	ldrh	r1, [r3, #0]
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	47a8      	blx	r5
 800a6b6:	0003      	movs	r3, r0
 800a6b8:	7023      	strb	r3, [r4, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a6ba:	e008      	b.n	800a6ce <eMBSFuncReadHoldingRegister+0xfa>
#endif
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a6bc:	231f      	movs	r3, #31
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a6c4:	e003      	b.n	800a6ce <eMBSFuncReadHoldingRegister+0xfa>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a6c6:	231f      	movs	r3, #31
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 800a6ce:	231f      	movs	r3, #31
 800a6d0:	18fb      	adds	r3, r7, r3
 800a6d2:	781b      	ldrb	r3, [r3, #0]
}
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	b009      	add	sp, #36	; 0x24
 800a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6dc <eMBSFuncWriteSingleRegister>:

#if MBS_FUNC_WRITE_SINGLE_REGISTER_ENABLED == 1
eMBException
eMBSFuncWriteSingleRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a6e8:	2417      	movs	r4, #23
 800a6ea:	193b      	adds	r3, r7, r4
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	701a      	strb	r2, [r3, #0]

    if( ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) == *pusMBPDULen )
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	2b05      	cmp	r3, #5
 800a6f6:	d126      	bne.n	800a746 <eMBSFuncWriteSingleRegister+0x6a>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	2614      	movs	r6, #20
 800a702:	19bb      	adds	r3, r7, r6
 800a704:	0212      	lsls	r2, r2, #8
 800a706:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3302      	adds	r3, #2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	b299      	uxth	r1, r3
 800a710:	19bb      	adds	r3, r7, r6
 800a712:	19ba      	adds	r2, r7, r6
 800a714:	8812      	ldrh	r2, [r2, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	801a      	strh	r2, [r3, #0]

        /* Get the acutal register values from the callback. */
        if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <eMBSFuncWriteSingleRegister+0x60>
            eStatus =
                pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, &pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF],
                                                    usRegAddress, 1, MBS_REGISTER_WRITE );
#else
            eStatus =
                pxMBSRegisterCB->peMBSRegHoldingCB( &pubMBPDU[MB_PDU_FUNC_WRITE_VALUE_OFF], usRegAddress, 1,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685d      	ldr	r5, [r3, #4]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1cd8      	adds	r0, r3, #3
 800a72a:	193c      	adds	r4, r7, r4
 800a72c:	19bb      	adds	r3, r7, r6
 800a72e:	8819      	ldrh	r1, [r3, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	2201      	movs	r2, #1
 800a734:	47a8      	blx	r5
 800a736:	0003      	movs	r3, r0
 800a738:	7023      	strb	r3, [r4, #0]
 800a73a:	e008      	b.n	800a74e <eMBSFuncWriteSingleRegister+0x72>
                                                    MBS_REGISTER_WRITE );
#endif
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a73c:	2317      	movs	r3, #23
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	2202      	movs	r2, #2
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	e003      	b.n	800a74e <eMBSFuncWriteSingleRegister+0x72>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a746:	2317      	movs	r3, #23
 800a748:	18fb      	adds	r3, r7, r3
 800a74a:	2203      	movs	r2, #3
 800a74c:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800a74e:	2317      	movs	r3, #23
 800a750:	18fb      	adds	r3, r7, r3
 800a752:	781b      	ldrb	r3, [r3, #0]
}
 800a754:	0018      	movs	r0, r3
 800a756:	46bd      	mov	sp, r7
 800a758:	b007      	add	sp, #28
 800a75a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a75c <eMBSFuncWriteMultipleHoldingRegister>:

#if MBS_FUNC_WRITE_MULTIPLE_REGISTERS_ENABLED == 1
eMBException
eMBSFuncWriteMultipleHoldingRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UBYTE           ubRegByteCount;

    eMBException    eStatus = MB_PDU_EX_NONE;
 800a768:	2417      	movs	r4, #23
 800a76a:	193b      	adds	r3, r7, r4
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	2b05      	cmp	r3, #5
 800a776:	d957      	bls.n	800a828 <eMBSFuncWriteMultipleHoldingRegister+0xcc>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b29a      	uxth	r2, r3
 800a780:	2614      	movs	r6, #20
 800a782:	19bb      	adds	r3, r7, r6
 800a784:	0212      	lsls	r2, r2, #8
 800a786:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3302      	adds	r3, #2
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	b299      	uxth	r1, r3
 800a790:	19bb      	adds	r3, r7, r6
 800a792:	19ba      	adds	r2, r7, r6
 800a794:	8812      	ldrh	r2, [r2, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3303      	adds	r3, #3
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	2012      	movs	r0, #18
 800a7a4:	183b      	adds	r3, r7, r0
 800a7a6:	0212      	lsls	r2, r2, #8
 800a7a8:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b299      	uxth	r1, r3
 800a7b2:	183b      	adds	r3, r7, r0
 800a7b4:	183a      	adds	r2, r7, r0
 800a7b6:	8812      	ldrh	r2, [r2, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	801a      	strh	r2, [r3, #0]

        ubRegByteCount = pubMBPDU[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800a7bc:	2511      	movs	r5, #17
 800a7be:	197b      	adds	r3, r7, r5
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	7952      	ldrb	r2, [r2, #5]
 800a7c4:	701a      	strb	r2, [r3, #0]

        if( ( NULL != pxMBSRegisterCB->peMBSRegHoldingCB ) &&
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d027      	beq.n	800a81e <eMBSFuncWriteMultipleHoldingRegister+0xc2>
 800a7ce:	0001      	movs	r1, r0
 800a7d0:	187b      	adds	r3, r7, r1
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d022      	beq.n	800a81e <eMBSFuncWriteMultipleHoldingRegister+0xc2>
            ( usRegCount >= 1 ) &&
 800a7d8:	187b      	adds	r3, r7, r1
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	2b7b      	cmp	r3, #123	; 0x7b
 800a7de:	d81e      	bhi.n	800a81e <eMBSFuncWriteMultipleHoldingRegister+0xc2>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) && ( ubRegByteCount == ( UBYTE ) ( 2 * usRegCount ) ) )
 800a7e0:	187b      	adds	r3, r7, r1
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	18db      	adds	r3, r3, r3
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	197a      	adds	r2, r7, r5
 800a7ec:	7812      	ldrb	r2, [r2, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d115      	bne.n	800a81e <eMBSFuncWriteMultipleHoldingRegister+0xc2>
#if MBS_CALLBACK_ENABLE_CONTEXT == 1
            eStatus =
                pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, &pubMBPDU[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                                    usRegAddress, usRegCount, MBS_REGISTER_WRITE );
#else
            eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( &pubMBPDU[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685d      	ldr	r5, [r3, #4]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	1d98      	adds	r0, r3, #6
 800a7fa:	193c      	adds	r4, r7, r4
 800a7fc:	187b      	adds	r3, r7, r1
 800a7fe:	881a      	ldrh	r2, [r3, #0]
 800a800:	19bb      	adds	r3, r7, r6
 800a802:	8819      	ldrh	r1, [r3, #0]
 800a804:	2300      	movs	r3, #0
 800a806:	47a8      	blx	r5
 800a808:	0003      	movs	r3, r0
 800a80a:	7023      	strb	r3, [r4, #0]
                                                          usRegAddress, usRegCount, MBS_REGISTER_WRITE );
#endif
            if( MB_PDU_EX_NONE == eStatus )
 800a80c:	2417      	movs	r4, #23
 800a80e:	193b      	adds	r3, r7, r4
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10c      	bne.n	800a830 <eMBSFuncWriteMultipleHoldingRegister+0xd4>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *pusMBPDULen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2205      	movs	r2, #5
 800a81a:	801a      	strh	r2, [r3, #0]
            if( MB_PDU_EX_NONE == eStatus )
 800a81c:	e008      	b.n	800a830 <eMBSFuncWriteMultipleHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a81e:	2317      	movs	r3, #23
 800a820:	18fb      	adds	r3, r7, r3
 800a822:	2203      	movs	r2, #3
 800a824:	701a      	strb	r2, [r3, #0]
 800a826:	e003      	b.n	800a830 <eMBSFuncWriteMultipleHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a828:	2317      	movs	r3, #23
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	2203      	movs	r2, #3
 800a82e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800a830:	2317      	movs	r3, #23
 800a832:	18fb      	adds	r3, r7, r3
 800a834:	781b      	ldrb	r3, [r3, #0]
}
 800a836:	0018      	movs	r0, r3
 800a838:	46bd      	mov	sp, r7
 800a83a:	b007      	add	sp, #28
 800a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a83e <eMBSFuncReadWriteMultipleHoldingRegister>:
#if MBS_FUNC_READWRITE_MULTIPLE_REGISTERS_ENABLED  == 1
eMBException
eMBSFuncReadWriteMultipleHoldingRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen,
                                          const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a840:	b089      	sub	sp, #36	; 0x24
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UBYTE           ubRegWriteByteCount;
    UBYTE          *pubFrameCur;

    eMBException    eStatus = MB_PDU_EX_NONE;
 800a84a:	241f      	movs	r4, #31
 800a84c:	193b      	adds	r3, r7, r4
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	2b09      	cmp	r3, #9
 800a858:	d800      	bhi.n	800a85c <eMBSFuncReadWriteMultipleHoldingRegister+0x1e>
 800a85a:	e0c3      	b.n	800a9e4 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a6>
    {
        usRegReadAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b29a      	uxth	r2, r3
 800a864:	201c      	movs	r0, #28
 800a866:	183b      	adds	r3, r7, r0
 800a868:	0212      	lsls	r2, r2, #8
 800a86a:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3302      	adds	r3, #2
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b299      	uxth	r1, r3
 800a874:	183b      	adds	r3, r7, r0
 800a876:	183a      	adds	r2, r7, r0
 800a878:	8812      	ldrh	r2, [r2, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3303      	adds	r3, #3
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	261a      	movs	r6, #26
 800a888:	19bb      	adds	r3, r7, r6
 800a88a:	0212      	lsls	r2, r2, #8
 800a88c:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3304      	adds	r3, #4
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	b299      	uxth	r1, r3
 800a896:	19bb      	adds	r3, r7, r6
 800a898:	19ba      	adds	r2, r7, r6
 800a89a:	8812      	ldrh	r2, [r2, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3305      	adds	r3, #5
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	2518      	movs	r5, #24
 800a8aa:	197b      	adds	r3, r7, r5
 800a8ac:	0212      	lsls	r2, r2, #8
 800a8ae:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3306      	adds	r3, #6
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	197b      	adds	r3, r7, r5
 800a8ba:	197a      	adds	r2, r7, r5
 800a8bc:	8812      	ldrh	r2, [r2, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	2016      	movs	r0, #22
 800a8cc:	183b      	adds	r3, r7, r0
 800a8ce:	0212      	lsls	r2, r2, #8
 800a8d0:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	b299      	uxth	r1, r3
 800a8da:	183b      	adds	r3, r7, r0
 800a8dc:	183a      	adds	r2, r7, r0
 800a8de:	8812      	ldrh	r2, [r2, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	801a      	strh	r2, [r3, #0]

        ubRegWriteByteCount = pubMBPDU[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800a8e4:	2215      	movs	r2, #21
 800a8e6:	0015      	movs	r5, r2
 800a8e8:	18bb      	adds	r3, r7, r2
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	7a52      	ldrb	r2, [r2, #9]
 800a8ee:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800a8f0:	19bb      	adds	r3, r7, r6
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d100      	bne.n	800a8fa <eMBSFuncReadWriteMultipleHoldingRegister+0xbc>
 800a8f8:	e06e      	b.n	800a9d8 <eMBSFuncReadWriteMultipleHoldingRegister+0x19a>
 800a8fa:	19bb      	adds	r3, r7, r6
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	2b7d      	cmp	r3, #125	; 0x7d
 800a900:	d900      	bls.n	800a904 <eMBSFuncReadWriteMultipleHoldingRegister+0xc6>
 800a902:	e069      	b.n	800a9d8 <eMBSFuncReadWriteMultipleHoldingRegister+0x19a>
 800a904:	0001      	movs	r1, r0
 800a906:	187b      	adds	r3, r7, r1
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d064      	beq.n	800a9d8 <eMBSFuncReadWriteMultipleHoldingRegister+0x19a>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800a90e:	187b      	adds	r3, r7, r1
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	2b79      	cmp	r3, #121	; 0x79
 800a914:	d860      	bhi.n	800a9d8 <eMBSFuncReadWriteMultipleHoldingRegister+0x19a>
            ( ( 2 * usRegWriteCount ) == ubRegWriteByteCount ) )
 800a916:	187b      	adds	r3, r7, r1
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	005a      	lsls	r2, r3, #1
 800a91c:	197b      	adds	r3, r7, r5
 800a91e:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800a920:	429a      	cmp	r2, r3
 800a922:	d159      	bne.n	800a9d8 <eMBSFuncReadWriteMultipleHoldingRegister+0x19a>
        {
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d050      	beq.n	800a9ce <eMBSFuncReadWriteMultipleHoldingRegister+0x190>
                eStatus =
                    pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx,
                                                        &pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
                                                        usRegWriteAddress, usRegWriteCount, MBS_REGISTER_WRITE );
#else
                eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( &pubMBPDU[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685d      	ldr	r5, [r3, #4]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	330a      	adds	r3, #10
 800a934:	0018      	movs	r0, r3
 800a936:	193c      	adds	r4, r7, r4
 800a938:	187b      	adds	r3, r7, r1
 800a93a:	881a      	ldrh	r2, [r3, #0]
 800a93c:	2318      	movs	r3, #24
 800a93e:	18fb      	adds	r3, r7, r3
 800a940:	8819      	ldrh	r1, [r3, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	47a8      	blx	r5
 800a946:	0003      	movs	r3, r0
 800a948:	7023      	strb	r3, [r4, #0]
                                                              usRegWriteAddress, usRegWriteCount, MBS_REGISTER_WRITE );
#endif
                if( MB_PDU_EX_NONE == eStatus )
 800a94a:	241f      	movs	r4, #31
 800a94c:	193b      	adds	r3, r7, r4
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d146      	bne.n	800a9e2 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a4>
                {
                    /* Set the current PDU data pointer to the beginning. */
                    pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	613b      	str	r3, [r7, #16]
                    *pusMBPDULen = MB_PDU_FUNC_OFF;
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	801a      	strh	r2, [r3, #0]

                    /* First byte contains the function code. */
                    *pubFrameCur++ = MBS_FUNCCODE_READWRITE_MULTIPLE_REGISTERS;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	613a      	str	r2, [r7, #16]
 800a964:	2217      	movs	r2, #23
 800a966:	701a      	strb	r2, [r3, #0]
                    *pusMBPDULen += ( USHORT ) 1;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	3301      	adds	r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	801a      	strh	r2, [r3, #0]

                    /* Second byte in the response contain the number of bytes. */
                    *pubFrameCur++ = ( UBYTE ) ( usRegReadCount * 2 );
 800a974:	19bb      	adds	r3, r7, r6
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b2d9      	uxtb	r1, r3
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	613a      	str	r2, [r7, #16]
 800a980:	1c0a      	adds	r2, r1, #0
 800a982:	1892      	adds	r2, r2, r2
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	701a      	strb	r2, [r3, #0]
                    *pusMBPDULen += ( USHORT ) 1;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	3301      	adds	r3, #1
 800a98e:	b29a      	uxth	r2, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	801a      	strh	r2, [r3, #0]
                    eStatus =
                        pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, pubFrameCur, usRegReadAddress,
                                                            usRegReadCount, MBS_REGISTER_READ );
#else
                    eStatus =
                        pxMBSRegisterCB->peMBSRegHoldingCB( pubFrameCur, usRegReadAddress, usRegReadCount,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685d      	ldr	r5, [r3, #4]
 800a998:	193c      	adds	r4, r7, r4
 800a99a:	19bb      	adds	r3, r7, r6
 800a99c:	881a      	ldrh	r2, [r3, #0]
 800a99e:	201c      	movs	r0, #28
 800a9a0:	183b      	adds	r3, r7, r0
 800a9a2:	8819      	ldrh	r1, [r3, #0]
 800a9a4:	6938      	ldr	r0, [r7, #16]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	47a8      	blx	r5
 800a9aa:	0003      	movs	r3, r0
 800a9ac:	7023      	strb	r3, [r4, #0]
                                                            MBS_REGISTER_READ );
#endif
                    if( MB_PDU_EX_NONE == eStatus )
 800a9ae:	241f      	movs	r4, #31
 800a9b0:	193b      	adds	r3, r7, r4
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d114      	bne.n	800a9e2 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a4>
                    {
                        *pusMBPDULen += ( USHORT ) ( 2 * usRegReadCount );
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	881a      	ldrh	r2, [r3, #0]
 800a9bc:	19bb      	adds	r3, r7, r6
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	18db      	adds	r3, r3, r3
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	18d3      	adds	r3, r2, r3
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	801a      	strh	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a9cc:	e009      	b.n	800a9e2 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a4>
                    }
                }
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a9ce:	231f      	movs	r3, #31
 800a9d0:	18fb      	adds	r3, r7, r3
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a9d6:	e004      	b.n	800a9e2 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a4>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800a9d8:	231f      	movs	r3, #31
 800a9da:	18fb      	adds	r3, r7, r3
 800a9dc:	2203      	movs	r2, #3
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e000      	b.n	800a9e4 <eMBSFuncReadWriteMultipleHoldingRegister+0x1a6>
            if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800a9e2:	46c0      	nop			; (mov r8, r8)
        }
    }
    return eStatus;
 800a9e4:	231f      	movs	r3, #31
 800a9e6:	18fb      	adds	r3, r7, r3
 800a9e8:	781b      	ldrb	r3, [r3, #0]
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b009      	add	sp, #36	; 0x24
 800a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9f2 <eMBSFuncMaskWriteRegister>:

#if MBS_FUNC_MASK_WRITE_REGISTER_ENABLED == 1
eMBException
eMBSFuncMaskWriteRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800a9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f4:	b089      	sub	sp, #36	; 0x24
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    UBYTE           ubBuffer[2];
    USHORT          usAndMask;
    USHORT          usOrMask;
    USHORT          usTmpValue;
    eMBException    eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800a9fe:	261f      	movs	r6, #31
 800aa00:	19bb      	adds	r3, r7, r6
 800aa02:	2202      	movs	r2, #2
 800aa04:	701a      	strb	r2, [r3, #0]

    if( ( MB_PDU_FUNC_MASKWRITE_SIZE + MB_PDU_SIZE_MIN ) == *pusMBPDULen )
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	2b07      	cmp	r3, #7
 800aa0c:	d000      	beq.n	800aa10 <eMBSFuncMaskWriteRegister+0x1e>
 800aa0e:	e090      	b.n	800ab32 <eMBSFuncMaskWriteRegister+0x140>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3301      	adds	r3, #1
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	201c      	movs	r0, #28
 800aa1a:	183b      	adds	r3, r7, r0
 800aa1c:	0212      	lsls	r2, r2, #8
 800aa1e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3302      	adds	r3, #2
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b299      	uxth	r1, r3
 800aa28:	183b      	adds	r3, r7, r0
 800aa2a:	183a      	adds	r2, r7, r0
 800aa2c:	8812      	ldrh	r2, [r2, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	801a      	strh	r2, [r3, #0]

        usAndMask = ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_MASKWRITE_AND_OFF] << 8 );
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3303      	adds	r3, #3
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	241a      	movs	r4, #26
 800aa3c:	193b      	adds	r3, r7, r4
 800aa3e:	0212      	lsls	r2, r2, #8
 800aa40:	801a      	strh	r2, [r3, #0]
        usAndMask |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_MASKWRITE_AND_OFF + 1]);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3304      	adds	r3, #4
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	b299      	uxth	r1, r3
 800aa4a:	193b      	adds	r3, r7, r4
 800aa4c:	193a      	adds	r2, r7, r4
 800aa4e:	8812      	ldrh	r2, [r2, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	801a      	strh	r2, [r3, #0]

        usOrMask = ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_MASKWRITE_OR_OFF] << 8 );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3305      	adds	r3, #5
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	2318      	movs	r3, #24
 800aa5e:	001d      	movs	r5, r3
 800aa60:	18fb      	adds	r3, r7, r3
 800aa62:	0212      	lsls	r2, r2, #8
 800aa64:	801a      	strh	r2, [r3, #0]
        usOrMask |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_MASKWRITE_OR_OFF + 1]);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3306      	adds	r3, #6
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b299      	uxth	r1, r3
 800aa6e:	002a      	movs	r2, r5
 800aa70:	18bb      	adds	r3, r7, r2
 800aa72:	18ba      	adds	r2, r7, r2
 800aa74:	8812      	ldrh	r2, [r2, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	801a      	strh	r2, [r3, #0]

        /* Get the acutal register values from the callback. */
        if( NULL != pxMBSRegisterCB->peMBSRegHoldingCB )
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d052      	beq.n	800ab28 <eMBSFuncMaskWriteRegister+0x136>
        {

#if MBS_CALLBACK_ENABLE_CONTEXT == 1
            eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, &ubBuffer[0], usRegAddress, 1, MBS_REGISTER_READ );
#else
            eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( &ubBuffer[0], usRegAddress, 1, MBS_REGISTER_READ );
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685d      	ldr	r5, [r3, #4]
 800aa86:	19bc      	adds	r4, r7, r6
 800aa88:	183b      	adds	r3, r7, r0
 800aa8a:	8819      	ldrh	r1, [r3, #0]
 800aa8c:	2614      	movs	r6, #20
 800aa8e:	19b8      	adds	r0, r7, r6
 800aa90:	2301      	movs	r3, #1
 800aa92:	2201      	movs	r2, #1
 800aa94:	47a8      	blx	r5
 800aa96:	0003      	movs	r3, r0
 800aa98:	7023      	strb	r3, [r4, #0]
#endif
            if( MB_PDU_EX_NONE == eStatus )
 800aa9a:	221f      	movs	r2, #31
 800aa9c:	18bb      	adds	r3, r7, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d14a      	bne.n	800ab3a <eMBSFuncMaskWriteRegister+0x148>
            {
                /* Update current register value according to MODBUS standard:
                 * (Current Contents AND And_Mask) OR (Or_Mask AND (NOT And_Mask))
                 */
                usTmpValue = ( ubBuffer[0] << 8U ) | ubBuffer[1];
 800aaa4:	0034      	movs	r4, r6
 800aaa6:	193b      	adds	r3, r7, r4
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	b21a      	sxth	r2, r3
 800aaae:	193b      	adds	r3, r7, r4
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	b21b      	sxth	r3, r3
 800aab4:	4313      	orrs	r3, r2
 800aab6:	b21a      	sxth	r2, r3
 800aab8:	2016      	movs	r0, #22
 800aaba:	183b      	adds	r3, r7, r0
 800aabc:	801a      	strh	r2, [r3, #0]
                usTmpValue &= usAndMask;
 800aabe:	183b      	adds	r3, r7, r0
 800aac0:	183a      	adds	r2, r7, r0
 800aac2:	251a      	movs	r5, #26
 800aac4:	1979      	adds	r1, r7, r5
 800aac6:	8812      	ldrh	r2, [r2, #0]
 800aac8:	8809      	ldrh	r1, [r1, #0]
 800aaca:	400a      	ands	r2, r1
 800aacc:	801a      	strh	r2, [r3, #0]
                usTmpValue |= ( usOrMask & ~usAndMask );
 800aace:	197b      	adds	r3, r7, r5
 800aad0:	2100      	movs	r1, #0
 800aad2:	5e5b      	ldrsh	r3, [r3, r1]
 800aad4:	43db      	mvns	r3, r3
 800aad6:	b21b      	sxth	r3, r3
 800aad8:	2518      	movs	r5, #24
 800aada:	197a      	adds	r2, r7, r5
 800aadc:	2100      	movs	r1, #0
 800aade:	5e52      	ldrsh	r2, [r2, r1]
 800aae0:	4013      	ands	r3, r2
 800aae2:	b21a      	sxth	r2, r3
 800aae4:	183b      	adds	r3, r7, r0
 800aae6:	2100      	movs	r1, #0
 800aae8:	5e5b      	ldrsh	r3, [r3, r1]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	b21a      	sxth	r2, r3
 800aaee:	183b      	adds	r3, r7, r0
 800aaf0:	801a      	strh	r2, [r3, #0]

                /* Serialize data into buffer */
                ubBuffer[0] = usTmpValue >> 8U;
 800aaf2:	183b      	adds	r3, r7, r0
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	0a1b      	lsrs	r3, r3, #8
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	193b      	adds	r3, r7, r4
 800aafe:	701a      	strb	r2, [r3, #0]
                ubBuffer[1] = usTmpValue & 0xFF;
 800ab00:	183b      	adds	r3, r7, r0
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	0020      	movs	r0, r4
 800ab08:	193b      	adds	r3, r7, r4
 800ab0a:	705a      	strb	r2, [r3, #1]

#if MBS_CALLBACK_ENABLE_CONTEXT == 1
                eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( pxMBSRegisterCB->pvCtx, &ubBuffer[0], usRegAddress, 1, MBS_REGISTER_WRITE );
#else
                eStatus = pxMBSRegisterCB->peMBSRegHoldingCB( &ubBuffer[0], usRegAddress, 1, MBS_REGISTER_WRITE );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685d      	ldr	r5, [r3, #4]
 800ab10:	221f      	movs	r2, #31
 800ab12:	18bc      	adds	r4, r7, r2
 800ab14:	231c      	movs	r3, #28
 800ab16:	18fb      	adds	r3, r7, r3
 800ab18:	8819      	ldrh	r1, [r3, #0]
 800ab1a:	1838      	adds	r0, r7, r0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2201      	movs	r2, #1
 800ab20:	47a8      	blx	r5
 800ab22:	0003      	movs	r3, r0
 800ab24:	7023      	strb	r3, [r4, #0]
 800ab26:	e008      	b.n	800ab3a <eMBSFuncMaskWriteRegister+0x148>
#endif
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800ab28:	231f      	movs	r3, #31
 800ab2a:	18fb      	adds	r3, r7, r3
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	e003      	b.n	800ab3a <eMBSFuncMaskWriteRegister+0x148>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800ab32:	231f      	movs	r3, #31
 800ab34:	18fb      	adds	r3, r7, r3
 800ab36:	2203      	movs	r2, #3
 800ab38:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800ab3a:	231f      	movs	r3, #31
 800ab3c:	18fb      	adds	r3, r7, r3
 800ab3e:	781b      	ldrb	r3, [r3, #0]
}
 800ab40:	0018      	movs	r0, r3
 800ab42:	46bd      	mov	sp, r7
 800ab44:	b009      	add	sp, #36	; 0x24
 800ab46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab48 <eMBSFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MBS_FUNC_READ_INPUT_REGISTERS_ENABLED == 1
eMBException
eMBSFuncReadInputRegister( UBYTE * pubMBPDU, USHORT * pusMBPDULen, const xMBSRegisterCB * pxMBSRegisterCB )
    MB_CDECL_SUFFIX
{
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	b089      	sub	sp, #36	; 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UBYTE          *pubFrameCur;

    eMBException    eStatus = MB_PDU_EX_NONE;
 800ab54:	241f      	movs	r4, #31
 800ab56:	193b      	adds	r3, r7, r4
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]

    if( *pusMBPDULen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	d000      	beq.n	800ab66 <eMBSFuncReadInputRegister+0x1e>
 800ab64:	e06e      	b.n	800ac44 <eMBSFuncReadInputRegister+0xfc>
    {
        usRegAddress = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	261c      	movs	r6, #28
 800ab70:	19bb      	adds	r3, r7, r6
 800ab72:	0212      	lsls	r2, r2, #8
 800ab74:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3302      	adds	r3, #2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	b299      	uxth	r1, r3
 800ab7e:	19bb      	adds	r3, r7, r6
 800ab80:	19ba      	adds	r2, r7, r6
 800ab82:	8812      	ldrh	r2, [r2, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT ) ( ( USHORT ) pubMBPDU[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3303      	adds	r3, #3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	201a      	movs	r0, #26
 800ab92:	183b      	adds	r3, r7, r0
 800ab94:	0212      	lsls	r2, r2, #8
 800ab96:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT ) ( pubMBPDU[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b299      	uxth	r1, r3
 800aba0:	183b      	adds	r3, r7, r0
 800aba2:	183a      	adds	r2, r7, r0
 800aba4:	8812      	ldrh	r2, [r2, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800abaa:	183b      	adds	r3, r7, r0
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d043      	beq.n	800ac3a <eMBSFuncReadInputRegister+0xf2>
 800abb2:	183b      	adds	r3, r7, r0
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	2b7d      	cmp	r3, #125	; 0x7d
 800abb8:	d83f      	bhi.n	800ac3a <eMBSFuncReadInputRegister+0xf2>
        {
            /* Set the current PDU data pointer to the beginning. */
            pubFrameCur = &pubMBPDU[MB_PDU_FUNC_OFF];
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	617b      	str	r3, [r7, #20]
            *pusMBPDULen = MB_PDU_FUNC_OFF;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2200      	movs	r2, #0
 800abc2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pubFrameCur++ = MBS_FUNCCODE_READ_INPUT_REGISTERS;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	617a      	str	r2, [r7, #20]
 800abca:	2204      	movs	r2, #4
 800abcc:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pubFrameCur++ = ( UBYTE ) ( usRegCount * 2 );
 800abda:	183b      	adds	r3, r7, r0
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	b2d9      	uxtb	r1, r3
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	617a      	str	r2, [r7, #20]
 800abe6:	1c0a      	adds	r2, r1, #0
 800abe8:	1892      	adds	r2, r2, r2
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]
            *pusMBPDULen += ( USHORT ) 1;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	881b      	ldrh	r3, [r3, #0]
 800abf2:	3301      	adds	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	801a      	strh	r2, [r3, #0]

            /* Get the acutal register values from the callback. */
            if( NULL != pxMBSRegisterCB->peMBSRegInputCB )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d016      	beq.n	800ac30 <eMBSFuncReadInputRegister+0xe8>
            {
                *pusMBPDULen += ( USHORT ) ( usRegCount * 2 );
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	881a      	ldrh	r2, [r3, #0]
 800ac06:	183b      	adds	r3, r7, r0
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	18db      	adds	r3, r3, r3
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	18d3      	adds	r3, r2, r3
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	801a      	strh	r2, [r3, #0]
                    pxMBSRegisterCB->peMBSRegInputCB( pxMBSRegisterCB->pvCtx, pubFrameCur, usRegAddress, usRegCount );
#else
#if defined( HI_TECH_C ) && defined( __PICC18__ )
               eStatus = pxMBSRegisterCB->peMBSRegInputCB( pubFrameCur, usRegAddress, usRegCount, NULL );
#else
               eStatus = pxMBSRegisterCB->peMBSRegInputCB( pubFrameCur, usRegAddress, usRegCount );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	193c      	adds	r4, r7, r4
 800ac1c:	183a      	adds	r2, r7, r0
 800ac1e:	8815      	ldrh	r5, [r2, #0]
 800ac20:	19ba      	adds	r2, r7, r6
 800ac22:	8811      	ldrh	r1, [r2, #0]
 800ac24:	6978      	ldr	r0, [r7, #20]
 800ac26:	002a      	movs	r2, r5
 800ac28:	4798      	blx	r3
 800ac2a:	0003      	movs	r3, r0
 800ac2c:	7023      	strb	r3, [r4, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegInputCB )
 800ac2e:	e00d      	b.n	800ac4c <eMBSFuncReadInputRegister+0x104>
#endif
#endif
            }
            else
            {
                eStatus = MB_PDU_EX_ILLEGAL_DATA_ADDRESS;
 800ac30:	231f      	movs	r3, #31
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	2202      	movs	r2, #2
 800ac36:	701a      	strb	r2, [r3, #0]
            if( NULL != pxMBSRegisterCB->peMBSRegInputCB )
 800ac38:	e008      	b.n	800ac4c <eMBSFuncReadInputRegister+0x104>
            }
        }
        else
        {
            eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800ac3a:	231f      	movs	r3, #31
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	2203      	movs	r2, #3
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e003      	b.n	800ac4c <eMBSFuncReadInputRegister+0x104>
        }
    }
    else
    {
        eStatus = MB_PDU_EX_ILLEGAL_DATA_VALUE;
 800ac44:	231f      	movs	r3, #31
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	2203      	movs	r2, #3
 800ac4a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800ac4c:	231f      	movs	r3, #31
 800ac4e:	18fb      	adds	r3, r7, r3
 800ac50:	781b      	ldrb	r3, [r3, #0]
}
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b009      	add	sp, #36	; 0x24
 800ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ac5c <eMBSSerialRTUInit>:
}
#endif

eMBErrorCode
eMBSSerialRTUInit( xMBSInternalHandle * pxIntHdl, UBYTE ubPort, ULONG ulBaudRate, eMBSerialParity eParity, UCHAR ucStopBits )
{
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	b08d      	sub	sp, #52	; 0x34
 800ac60:	af04      	add	r7, sp, #16
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	0008      	movs	r0, r1
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	0019      	movs	r1, r3
 800ac6a:	230b      	movs	r3, #11
 800ac6c:	18fb      	adds	r3, r7, r3
 800ac6e:	1c02      	adds	r2, r0, #0
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	230a      	movs	r3, #10
 800ac74:	18fb      	adds	r3, r7, r3
 800ac76:	1c0a      	adds	r2, r1, #0
 800ac78:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR, eStatus2;
 800ac7a:	231f      	movs	r3, #31
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
    xMBSRTUFrameHandle *pxFrameHdl = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
#if defined( MBP_HITECH_LINKERWORKAROUND_ENABLED ) && ( MBP_HITECH_LINKERWORKAROUND_ENABLED == 1 )
    vMBSSerialLinkerWorkaround(  );
#endif

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( ( NULL != pxIntHdl ) && ( ulBaudRate > 0 ) )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d100      	bne.n	800ac8e <eMBSSerialRTUInit+0x32>
 800ac8c:	e16d      	b.n	800af6a <eMBSSerialRTUInit+0x30e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d100      	bne.n	800ac96 <eMBSSerialRTUInit+0x3a>
 800ac94:	e169      	b.n	800af6a <eMBSSerialRTUInit+0x30e>
#else
    if( TRUE )
#endif
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800ac96:	f000 fe48 	bl	800b92a <vMBPEnterCritical>
        if( !bIsInitialized )
 800ac9a:	4bb9      	ldr	r3, [pc, #740]	; (800af80 <eMBSSerialRTUInit+0x324>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d000      	beq.n	800aca4 <eMBSSerialRTUInit+0x48>
 800aca2:	e0a2      	b.n	800adea <eMBSSerialRTUInit+0x18e>
        {
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSRTUFrameHdl ); ubIdx++ )
 800aca4:	2317      	movs	r3, #23
 800aca6:	18fb      	adds	r3, r7, r3
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
 800acac:	e094      	b.n	800add8 <eMBSSerialRTUInit+0x17c>
            {
                HDL_RESET( &xMBSRTUFrameHdl[ubIdx] );
 800acae:	2417      	movs	r4, #23
 800acb0:	193b      	adds	r3, r7, r4
 800acb2:	781a      	ldrb	r2, [r3, #0]
 800acb4:	49b3      	ldr	r1, [pc, #716]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800acb6:	0013      	movs	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	189b      	adds	r3, r3, r2
 800acbc:	00da      	lsls	r2, r3, #3
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	00d3      	lsls	r3, r2, #3
 800acc2:	001a      	movs	r2, r3
 800acc4:	23ff      	movs	r3, #255	; 0xff
 800acc6:	5453      	strb	r3, [r2, r1]
 800acc8:	193b      	adds	r3, r7, r4
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	48ad      	ldr	r0, [pc, #692]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800acce:	2302      	movs	r3, #2
 800acd0:	33ff      	adds	r3, #255	; 0xff
 800acd2:	0019      	movs	r1, r3
 800acd4:	0013      	movs	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	189b      	adds	r3, r3, r2
 800acda:	00da      	lsls	r2, r3, #3
 800acdc:	1ad2      	subs	r2, r2, r3
 800acde:	00d3      	lsls	r3, r2, #3
 800ace0:	001a      	movs	r2, r3
 800ace2:	1883      	adds	r3, r0, r2
 800ace4:	185b      	adds	r3, r3, r1
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	193b      	adds	r3, r7, r4
 800acec:	781a      	ldrb	r2, [r3, #0]
 800acee:	48a5      	ldr	r0, [pc, #660]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800acf0:	2381      	movs	r3, #129	; 0x81
 800acf2:	0059      	lsls	r1, r3, #1
 800acf4:	0013      	movs	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	189b      	adds	r3, r3, r2
 800acfa:	00da      	lsls	r2, r3, #3
 800acfc:	1ad2      	subs	r2, r2, r3
 800acfe:	00d3      	lsls	r3, r2, #3
 800ad00:	001a      	movs	r2, r3
 800ad02:	1883      	adds	r3, r0, r2
 800ad04:	185b      	adds	r3, r3, r1
 800ad06:	2200      	movs	r2, #0
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	193b      	adds	r3, r7, r4
 800ad0c:	781a      	ldrb	r2, [r3, #0]
 800ad0e:	489d      	ldr	r0, [pc, #628]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ad10:	2382      	movs	r3, #130	; 0x82
 800ad12:	0059      	lsls	r1, r3, #1
 800ad14:	0013      	movs	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	00da      	lsls	r2, r3, #3
 800ad1c:	1ad2      	subs	r2, r2, r3
 800ad1e:	00d3      	lsls	r3, r2, #3
 800ad20:	001a      	movs	r2, r3
 800ad22:	1883      	adds	r3, r0, r2
 800ad24:	185b      	adds	r3, r3, r1
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	193b      	adds	r3, r7, r4
 800ad2c:	781a      	ldrb	r2, [r3, #0]
 800ad2e:	4895      	ldr	r0, [pc, #596]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ad30:	2383      	movs	r3, #131	; 0x83
 800ad32:	0059      	lsls	r1, r3, #1
 800ad34:	0013      	movs	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	189b      	adds	r3, r3, r2
 800ad3a:	00da      	lsls	r2, r3, #3
 800ad3c:	1ad2      	subs	r2, r2, r3
 800ad3e:	00d3      	lsls	r3, r2, #3
 800ad40:	001a      	movs	r2, r3
 800ad42:	1883      	adds	r3, r0, r2
 800ad44:	185b      	adds	r3, r3, r1
 800ad46:	2200      	movs	r2, #0
 800ad48:	801a      	strh	r2, [r3, #0]
 800ad4a:	193b      	adds	r3, r7, r4
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	488d      	ldr	r0, [pc, #564]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ad50:	2384      	movs	r3, #132	; 0x84
 800ad52:	0059      	lsls	r1, r3, #1
 800ad54:	0013      	movs	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	00da      	lsls	r2, r3, #3
 800ad5c:	1ad2      	subs	r2, r2, r3
 800ad5e:	00d3      	lsls	r3, r2, #3
 800ad60:	001a      	movs	r2, r3
 800ad62:	1883      	adds	r3, r0, r2
 800ad64:	185b      	adds	r3, r3, r1
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	193b      	adds	r3, r7, r4
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	4885      	ldr	r0, [pc, #532]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ad70:	2386      	movs	r3, #134	; 0x86
 800ad72:	0059      	lsls	r1, r3, #1
 800ad74:	0013      	movs	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	189b      	adds	r3, r3, r2
 800ad7a:	00da      	lsls	r2, r3, #3
 800ad7c:	1ad2      	subs	r2, r2, r3
 800ad7e:	00d3      	lsls	r3, r2, #3
 800ad80:	001a      	movs	r2, r3
 800ad82:	1883      	adds	r3, r0, r2
 800ad84:	185b      	adds	r3, r3, r1
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	193b      	adds	r3, r7, r4
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	487d      	ldr	r0, [pc, #500]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ad90:	2388      	movs	r3, #136	; 0x88
 800ad92:	0059      	lsls	r1, r3, #1
 800ad94:	0013      	movs	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	189b      	adds	r3, r3, r2
 800ad9a:	00da      	lsls	r2, r3, #3
 800ad9c:	1ad2      	subs	r2, r2, r3
 800ad9e:	00d3      	lsls	r3, r2, #3
 800ada0:	001a      	movs	r2, r3
 800ada2:	1883      	adds	r3, r0, r2
 800ada4:	185b      	adds	r3, r3, r1
 800ada6:	2200      	movs	r2, #0
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	193b      	adds	r3, r7, r4
 800adac:	781a      	ldrb	r2, [r3, #0]
 800adae:	0013      	movs	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	189b      	adds	r3, r3, r2
 800adb4:	00da      	lsls	r2, r3, #3
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	00d3      	lsls	r3, r2, #3
 800adba:	001a      	movs	r2, r3
 800adbc:	4b71      	ldr	r3, [pc, #452]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800adbe:	18d3      	adds	r3, r2, r3
 800adc0:	3301      	adds	r3, #1
 800adc2:	2280      	movs	r2, #128	; 0x80
 800adc4:	0052      	lsls	r2, r2, #1
 800adc6:	2100      	movs	r1, #0
 800adc8:	0018      	movs	r0, r3
 800adca:	f001 fa9e 	bl	800c30a <memset>
            for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSRTUFrameHdl ); ubIdx++ )
 800adce:	193b      	adds	r3, r7, r4
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	193b      	adds	r3, r7, r4
 800add4:	3201      	adds	r2, #1
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	2317      	movs	r3, #23
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d100      	bne.n	800ade4 <eMBSSerialRTUInit+0x188>
 800ade2:	e764      	b.n	800acae <eMBSSerialRTUInit+0x52>
            }
            bIsInitialized = TRUE;
 800ade4:	4b66      	ldr	r3, [pc, #408]	; (800af80 <eMBSSerialRTUInit+0x324>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
        }

        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSRTUFrameHdl ); ubIdx++ )
 800adea:	2317      	movs	r3, #23
 800adec:	18fb      	adds	r3, r7, r3
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	e025      	b.n	800ae40 <eMBSSerialRTUInit+0x1e4>
        {
            if( IDX_INVALID == xMBSRTUFrameHdl[ubIdx].ubIdx )
 800adf4:	2017      	movs	r0, #23
 800adf6:	183b      	adds	r3, r7, r0
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	4962      	ldr	r1, [pc, #392]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800adfc:	0013      	movs	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	189b      	adds	r3, r3, r2
 800ae02:	00da      	lsls	r2, r3, #3
 800ae04:	1ad2      	subs	r2, r2, r3
 800ae06:	00d3      	lsls	r3, r2, #3
 800ae08:	001a      	movs	r2, r3
 800ae0a:	5c53      	ldrb	r3, [r2, r1]
 800ae0c:	2bff      	cmp	r3, #255	; 0xff
 800ae0e:	d111      	bne.n	800ae34 <eMBSSerialRTUInit+0x1d8>
            {
                pxFrameHdl = &xMBSRTUFrameHdl[ubIdx];
 800ae10:	0001      	movs	r1, r0
 800ae12:	187b      	adds	r3, r7, r1
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	0013      	movs	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	189b      	adds	r3, r3, r2
 800ae1c:	00da      	lsls	r2, r3, #3
 800ae1e:	1ad2      	subs	r2, r2, r3
 800ae20:	00d3      	lsls	r3, r2, #3
 800ae22:	001a      	movs	r2, r3
 800ae24:	4b57      	ldr	r3, [pc, #348]	; (800af84 <eMBSSerialRTUInit+0x328>)
 800ae26:	18d3      	adds	r3, r2, r3
 800ae28:	61bb      	str	r3, [r7, #24]
                pxFrameHdl->ubIdx = ubIdx;
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	187a      	adds	r2, r7, r1
 800ae2e:	7812      	ldrb	r2, [r2, #0]
 800ae30:	701a      	strb	r2, [r3, #0]
                break;
 800ae32:	e00a      	b.n	800ae4a <eMBSSerialRTUInit+0x1ee>
        for( ubIdx = 0; ubIdx < ( UBYTE ) MB_UTILS_NARRSIZE( xMBSRTUFrameHdl ); ubIdx++ )
 800ae34:	2117      	movs	r1, #23
 800ae36:	187b      	adds	r3, r7, r1
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	187b      	adds	r3, r7, r1
 800ae3c:	3201      	adds	r2, #1
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	2317      	movs	r3, #23
 800ae42:	18fb      	adds	r3, r7, r3
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0d4      	beq.n	800adf4 <eMBSSerialRTUInit+0x198>
            }
        }

        if( NULL != pxFrameHdl )
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d100      	bne.n	800ae52 <eMBSSerialRTUInit+0x1f6>
 800ae50:	e084      	b.n	800af5c <eMBSSerialRTUInit+0x300>
            usTimeoutMS = MBS_SERIAL_APIV2_RTU_DYNAMIC_TIMEOUT_MS( ulBaudRate );
#else
            /* If baudrate > 19200 then we should use the fixed timer value 1750us.
             * We can't match this exactly so we use 2000us. Otherwise use 3.5 times
             * the character timeout. */
            if( ulBaudRate > 19200 )
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	2396      	movs	r3, #150	; 0x96
 800ae56:	01db      	lsls	r3, r3, #7
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d904      	bls.n	800ae66 <eMBSSerialRTUInit+0x20a>
            {
                usTimeoutMS = 2;
 800ae5c:	2314      	movs	r3, #20
 800ae5e:	18fb      	adds	r3, r7, r3
 800ae60:	2202      	movs	r2, #2
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	e00a      	b.n	800ae7c <eMBSSerialRTUInit+0x220>
            {
                /* The number of ticks required for a character is given by
                 * xTicksCh = TIMER_TICKS_PER_SECOND * 11 / BAUDRATE
                 * The total timeout is given by xTicksCh * 3.5 = xTicksCh * 7/2.
                 */
                usTimeoutMS = ( USHORT ) ( ( 1000UL * 11UL * 7UL ) / ( 2 * ulBaudRate ) );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	0019      	movs	r1, r3
 800ae6c:	4846      	ldr	r0, [pc, #280]	; (800af88 <eMBSSerialRTUInit+0x32c>)
 800ae6e:	f7f5 f94b 	bl	8000108 <__udivsi3>
 800ae72:	0003      	movs	r3, r0
 800ae74:	001a      	movs	r2, r3
 800ae76:	2314      	movs	r3, #20
 800ae78:	18fb      	adds	r3, r7, r3
 800ae7a:	801a      	strh	r2, [r3, #0]
#if MBS_RTU_WAITAFTERSEND_ENABLED == 1
            usTimeoutMSWaitAfterSend = ( USHORT ) MBS_SERIAL_RTU_DYNAMIC_WAITAFTERSEND_TIMEOUT_MS( ulBaudRate );
#endif
#endif

            if( MB_ENOERR != ( eStatus2 = eMBPSerialInit( &( pxFrameHdl->xSerHdl ), ( UCHAR ) ubPort, ulBaudRate, 8, eParity, ucStopBits, pxIntHdl
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	3311      	adds	r3, #17
 800ae80:	33ff      	adds	r3, #255	; 0xff
 800ae82:	0018      	movs	r0, r3
 800ae84:	2513      	movs	r5, #19
 800ae86:	197c      	adds	r4, r7, r5
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	230b      	movs	r3, #11
 800ae8c:	18fb      	adds	r3, r7, r3
 800ae8e:	7819      	ldrb	r1, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	2330      	movs	r3, #48	; 0x30
 800ae96:	2608      	movs	r6, #8
 800ae98:	199b      	adds	r3, r3, r6
 800ae9a:	19db      	adds	r3, r3, r7
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	230a      	movs	r3, #10
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	2308      	movs	r3, #8
 800aeaa:	f000 fd4d 	bl	800b948 <eMBPSerialInit>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	7023      	strb	r3, [r4, #0]
 800aeb2:	197b      	adds	r3, r7, r5
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d005      	beq.n	800aec6 <eMBSSerialRTUInit+0x26a>
#if MBP_SUPPORT_FRAME_ANALYZE_STAT_API == 1
                                                          , vMBSSerialRTUAnalyzeStatCB
#endif
                                ) ) )
            {
                eStatus = eStatus2;
 800aeba:	231f      	movs	r3, #31
 800aebc:	18fb      	adds	r3, r7, r3
 800aebe:	197a      	adds	r2, r7, r5
 800aec0:	7812      	ldrb	r2, [r2, #0]
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e040      	b.n	800af48 <eMBSSerialRTUInit+0x2ec>
            }
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            else if( MB_ENOERR != ( eStatus2 = eMBPTimerInit( &( pxFrameHdl->xTmrHdl ), usTimeoutMS, bMBSSerialRTUT35CB, pxIntHdl ) ) )
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	330d      	adds	r3, #13
 800aeca:	33ff      	adds	r3, #255	; 0xff
 800aecc:	0018      	movs	r0, r3
 800aece:	2613      	movs	r6, #19
 800aed0:	19bc      	adds	r4, r7, r6
 800aed2:	68fd      	ldr	r5, [r7, #12]
 800aed4:	4a2d      	ldr	r2, [pc, #180]	; (800af8c <eMBSSerialRTUInit+0x330>)
 800aed6:	2314      	movs	r3, #20
 800aed8:	18fb      	adds	r3, r7, r3
 800aeda:	8819      	ldrh	r1, [r3, #0]
 800aedc:	002b      	movs	r3, r5
 800aede:	f001 f819 	bl	800bf14 <eMBPTimerInit>
 800aee2:	0003      	movs	r3, r0
 800aee4:	7023      	strb	r3, [r4, #0]
 800aee6:	19bb      	adds	r3, r7, r6
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <eMBSSerialRTUInit+0x29e>
            {
                eStatus = eStatus2;
 800aeee:	231f      	movs	r3, #31
 800aef0:	18fb      	adds	r3, r7, r3
 800aef2:	19ba      	adds	r2, r7, r6
 800aef4:	7812      	ldrb	r2, [r2, #0]
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e026      	b.n	800af48 <eMBSSerialRTUInit+0x2ec>
            }
#endif
            else
            {
                /* Attach the frame handle to the protocol stack. */
                pxIntHdl->pubFrameMBPDUBuffer = ( UBYTE * ) & pxFrameHdl->ubRTUFrameBuffer[MBS_SER_PDU_PDU_OFF];
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	1c9a      	adds	r2, r3, #2
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	615a      	str	r2, [r3, #20]
                pxIntHdl->xFrameHdl = pxFrameHdl;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	611a      	str	r2, [r3, #16]
                pxIntHdl->pFrameSendFN = eMBSSerialRTUFrameSend;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4a21      	ldr	r2, [pc, #132]	; (800af90 <eMBSSerialRTUInit+0x334>)
 800af0c:	619a      	str	r2, [r3, #24]
                pxIntHdl->pFrameRecvFN = eMBSSerialRTUFrameReceive;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4a20      	ldr	r2, [pc, #128]	; (800af94 <eMBSSerialRTUInit+0x338>)
 800af12:	61da      	str	r2, [r3, #28]
                pxIntHdl->pFrameCloseFN = eMBSSerialRTUFrameClose;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4a20      	ldr	r2, [pc, #128]	; (800af98 <eMBSSerialRTUInit+0x33c>)
 800af18:	621a      	str	r2, [r3, #32]
#if MBS_RTU_NEEDS_INTHDL == 1
                pxFrameHdl->xMBIntHdl = pxIntHdl;
 800af1a:	69ba      	ldr	r2, [r7, #24]
 800af1c:	238a      	movs	r3, #138	; 0x8a
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	68f9      	ldr	r1, [r7, #12]
 800af22:	50d1      	str	r1, [r2, r3]
#endif
                eStatus = MB_ENOERR;
 800af24:	241f      	movs	r4, #31
 800af26:	193b      	adds	r3, r7, r4
 800af28:	2200      	movs	r2, #0
 800af2a:	701a      	strb	r2, [r3, #0]
                if( MB_ENOERR != eMBPSerialRxEnable( pxFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV2CB ) )
                {
                    eStatus = MB_EPORTERR;
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR != eMBPSerialRxEnable( pxFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 800af2c:	69ba      	ldr	r2, [r7, #24]
 800af2e:	2388      	movs	r3, #136	; 0x88
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	58d3      	ldr	r3, [r2, r3]
 800af34:	4a19      	ldr	r2, [pc, #100]	; (800af9c <eMBSSerialRTUInit+0x340>)
 800af36:	0011      	movs	r1, r2
 800af38:	0018      	movs	r0, r3
 800af3a:	f000 ff33 	bl	800bda4 <eMBPSerialRxEnable>
 800af3e:	1e03      	subs	r3, r0, #0
 800af40:	d002      	beq.n	800af48 <eMBSSerialRTUInit+0x2ec>
                {
                    eStatus = MB_EPORTERR;
 800af42:	193b      	adds	r3, r7, r4
 800af44:	2203      	movs	r2, #3
 800af46:	701a      	strb	r2, [r3, #0]
                    eStatus = MB_EPORTERR;
                }
#endif
            }

            if( MB_ENOERR != eStatus )
 800af48:	231f      	movs	r3, #31
 800af4a:	18fb      	adds	r3, r7, r3
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <eMBSSerialRTUInit+0x308>
            {
                ( void )eMBSSerialRTUFrameCloseInternal( pxFrameHdl );
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	0018      	movs	r0, r3
 800af56:	f000 fac9 	bl	800b4ec <eMBSSerialRTUFrameCloseInternal>
 800af5a:	e003      	b.n	800af64 <eMBSSerialRTUInit+0x308>
            }
        }
        else
        {
            eStatus = MB_ENORES;
 800af5c:	231f      	movs	r3, #31
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	2204      	movs	r2, #4
 800af62:	701a      	strb	r2, [r3, #0]
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800af64:	f000 fce8 	bl	800b938 <vMBPExitCritical>
 800af68:	e003      	b.n	800af72 <eMBSSerialRTUInit+0x316>
    }
    else
    {
        eStatus = MB_EINVAL;
 800af6a:	231f      	movs	r3, #31
 800af6c:	18fb      	adds	r3, r7, r3
 800af6e:	2202      	movs	r2, #2
 800af70:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800af72:	231f      	movs	r3, #31
 800af74:	18fb      	adds	r3, r7, r3
 800af76:	781b      	ldrb	r3, [r3, #0]
}
 800af78:	0018      	movs	r0, r3
 800af7a:	46bd      	mov	sp, r7
 800af7c:	b009      	add	sp, #36	; 0x24
 800af7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af80:	20004b86 	.word	0x20004b86
 800af84:	20004b88 	.word	0x20004b88
 800af88:	00012cc8 	.word	0x00012cc8
 800af8c:	0800b665 	.word	0x0800b665
 800af90:	0800afa1 	.word	0x0800afa1
 800af94:	0800b1b5 	.word	0x0800b1b5
 800af98:	0800b4af 	.word	0x0800b4af
 800af9c:	0800b391 	.word	0x0800b391

0800afa0 <eMBSSerialRTUFrameSend>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialRTUFrameSend( xMBHandle xHdl, USHORT usMBPDULength )
{
 800afa0:	b5b0      	push	{r4, r5, r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	000a      	movs	r2, r1
 800afaa:	1cbb      	adds	r3, r7, #2
 800afac:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800afae:	2417      	movs	r4, #23
 800afb0:	193b      	adds	r3, r7, r4
 800afb2:	2202      	movs	r2, #2
 800afb4:	701a      	strb	r2, [r3, #0]
    USHORT          usCRC16;
    xMBSInternalHandle *pxIntHdl = xHdl;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	613b      	str	r3, [r7, #16]
    xMBAnalyzerFrame xAnalyzerFrame;
    xMBPTimeStamp   xTimeStamp;
#endif

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( bMBSIsHdlValid( pxIntHdl ) )
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	0018      	movs	r0, r3
 800afbe:	f7fd fa65 	bl	800848c <bMBSIsHdlValid>
 800afc2:	1e03      	subs	r3, r0, #0
 800afc4:	d100      	bne.n	800afc8 <eMBSSerialRTUFrameSend+0x28>
 800afc6:	e0c4      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
#else
    if( TRUE )
#endif
    {
        pxRTUHdl = pxIntHdl->xFrameHdl;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	60fb      	str	r3, [r7, #12]

        if( MB_IS_VALID_HDL( pxRTUHdl, xMBSRTUFrameHdl ) )
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d100      	bne.n	800afd6 <eMBSSerialRTUFrameSend+0x36>
 800afd4:	e0bd      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d000      	beq.n	800afe0 <eMBSSerialRTUFrameSend+0x40>
 800afde:	e0b8      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	001a      	movs	r2, r3
 800afe6:	0013      	movs	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	189b      	adds	r3, r3, r2
 800afec:	00da      	lsls	r2, r3, #3
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	00d3      	lsls	r3, r2, #3
 800aff2:	001a      	movs	r2, r3
 800aff4:	4b5a      	ldr	r3, [pc, #360]	; (800b160 <eMBSSerialRTUFrameSend+0x1c0>)
 800aff6:	18d3      	adds	r3, r2, r3
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	429a      	cmp	r2, r3
 800affc:	d000      	beq.n	800b000 <eMBSSerialRTUFrameSend+0x60>
 800affe:	e0a8      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
        {
            if( 0 == usMBPDULength )
 800b000:	1cbb      	adds	r3, r7, #2
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d113      	bne.n	800b030 <eMBSSerialRTUFrameSend+0x90>
                if( MB_ENOERR != eMBPSerialRxEnable( pxRTUHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV2CB ) )
                {
                    eStatus = MB_EPORTERR;
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR != eMBPSerialRxEnable( pxRTUHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	2388      	movs	r3, #136	; 0x88
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	58d3      	ldr	r3, [r2, r3]
 800b010:	4a54      	ldr	r2, [pc, #336]	; (800b164 <eMBSSerialRTUFrameSend+0x1c4>)
 800b012:	0011      	movs	r1, r2
 800b014:	0018      	movs	r0, r3
 800b016:	f000 fec5 	bl	800bda4 <eMBPSerialRxEnable>
 800b01a:	1e03      	subs	r3, r0, #0
 800b01c:	d003      	beq.n	800b026 <eMBSSerialRTUFrameSend+0x86>
                {
                    eStatus = MB_EPORTERR;
 800b01e:	193b      	adds	r3, r7, r4
 800b020:	2203      	movs	r2, #3
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	e095      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
                }
#endif
                else
                {
                    eStatus = MB_ENOERR;
 800b026:	2317      	movs	r3, #23
 800b028:	18fb      	adds	r3, r7, r3
 800b02a:	2200      	movs	r2, #0
 800b02c:	701a      	strb	r2, [r3, #0]
 800b02e:	e090      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
                }
            }
            else if( usMBPDULength <= ( MBS_SER_PDU_SIZE_MAX - ( 1 /* Slave Address */  + 2 /* CRC16 */  ) ) )
 800b030:	1cbb      	adds	r3, r7, #2
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	2bfd      	cmp	r3, #253	; 0xfd
 800b036:	d900      	bls.n	800b03a <eMBSSerialRTUFrameSend+0x9a>
 800b038:	e08b      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
            {
                MBP_ASSERT( STATE_TX_IDLE == pxRTUHdl->eSndState );
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	2382      	movs	r3, #130	; 0x82
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	5cd3      	ldrb	r3, [r2, r3]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <eMBSSerialRTUFrameSend+0xac>
 800b048:	f000 fc5c 	bl	800b904 <vMBPAssert>

                /* Added the MODBUS RTU header (= slave address) */
                pxRTUHdl->ubRTUFrameBuffer[MBS_SER_PDU_ADDR_OFF] = pxIntHdl->ubSlaveAddress;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	781a      	ldrb	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	705a      	strb	r2, [r3, #1]
                pxRTUHdl->usSndBufferCnt = 1;
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	2383      	movs	r3, #131	; 0x83
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	2101      	movs	r1, #1
 800b05c:	52d1      	strh	r1, [r2, r3]

                /* MODBUS PDU is already embedded in the frame. */
                pxRTUHdl->usSndBufferCnt += usMBPDULength;
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	2383      	movs	r3, #131	; 0x83
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	5ad3      	ldrh	r3, [r2, r3]
 800b066:	b29a      	uxth	r2, r3
 800b068:	1cbb      	adds	r3, r7, #2
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	18d3      	adds	r3, r2, r3
 800b06e:	b299      	uxth	r1, r3
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	2383      	movs	r3, #131	; 0x83
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	52d1      	strh	r1, [r2, r3]

                usCRC16 = usMBSCRC16( ( const UBYTE * )&pxRTUHdl->ubRTUFrameBuffer[0], pxRTUHdl->usSndBufferCnt );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	1c58      	adds	r0, r3, #1
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	2383      	movs	r3, #131	; 0x83
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	5ad3      	ldrh	r3, [r2, r3]
 800b084:	b29b      	uxth	r3, r3
 800b086:	250a      	movs	r5, #10
 800b088:	197c      	adds	r4, r7, r5
 800b08a:	0019      	movs	r1, r3
 800b08c:	f7fe fd6a 	bl	8009b64 <usMBSCRC16>
 800b090:	0003      	movs	r3, r0
 800b092:	8023      	strh	r3, [r4, #0]
                pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 & 0xFF );
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	2383      	movs	r3, #131	; 0x83
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	5ad3      	ldrh	r3, [r2, r3]
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	0019      	movs	r1, r3
 800b0a0:	0028      	movs	r0, r5
 800b0a2:	183b      	adds	r3, r7, r0
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	185b      	adds	r3, r3, r1
 800b0ac:	705a      	strb	r2, [r3, #1]
                pxRTUHdl->usSndBufferCnt++;
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	2383      	movs	r3, #131	; 0x83
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	5ad3      	ldrh	r3, [r2, r3]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	b299      	uxth	r1, r3
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	2383      	movs	r3, #131	; 0x83
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	52d1      	strh	r1, [r2, r3]
                pxRTUHdl->ubRTUFrameBuffer[pxRTUHdl->usSndBufferCnt] = ( UBYTE ) ( usCRC16 >> 8 );
 800b0c4:	183b      	adds	r3, r7, r0
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	0a1b      	lsrs	r3, r3, #8
 800b0ca:	b298      	uxth	r0, r3
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	2383      	movs	r3, #131	; 0x83
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	5ad3      	ldrh	r3, [r2, r3]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	0019      	movs	r1, r3
 800b0d8:	b2c2      	uxtb	r2, r0
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	185b      	adds	r3, r3, r1
 800b0de:	705a      	strb	r2, [r3, #1]
                pxRTUHdl->usSndBufferCnt++;
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	2383      	movs	r3, #131	; 0x83
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	5ad3      	ldrh	r3, [r2, r3]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	b299      	uxth	r1, r3
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	2383      	movs	r3, #131	; 0x83
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	52d1      	strh	r1, [r2, r3]

                /* Enable transmitter */
                pxRTUHdl->eSndState = STATE_TX_XMIT;
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	2382      	movs	r3, #130	; 0x82
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	54d1      	strb	r1, [r2, r3]
                pxRTUHdl->pubSndBufferCur = ( UBYTE * ) & pxRTUHdl->ubRTUFrameBuffer[MBS_SER_PDU_ADDR_OFF];
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	1c59      	adds	r1, r3, #1
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	2384      	movs	r3, #132	; 0x84
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	50d1      	str	r1, [r2, r3]
                {
                    eStatus = MB_EPORTERR;
                    HDL_RESET_TX( pxRTUHdl );
                }
#elif MBS_SERIAL_API_VERSION == 1
                if( MB_ENOERR != eMBPSerialTxEnable( pxRTUHdl->xSerHdl, ( pbMBPSerialTransmitterEmptyCB ) bMBSSerialTransmitterEmptyAPIV1CB ) )
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	2388      	movs	r3, #136	; 0x88
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	58d3      	ldr	r3, [r2, r3]
 800b114:	4a14      	ldr	r2, [pc, #80]	; (800b168 <eMBSSerialRTUFrameSend+0x1c8>)
 800b116:	0011      	movs	r1, r2
 800b118:	0018      	movs	r0, r3
 800b11a:	f000 fd7b 	bl	800bc14 <eMBPSerialTxEnable>
 800b11e:	1e03      	subs	r3, r0, #0
 800b120:	d013      	beq.n	800b14a <eMBSSerialRTUFrameSend+0x1aa>
                {
                    eStatus = MB_EPORTERR;
 800b122:	2317      	movs	r3, #23
 800b124:	18fb      	adds	r3, r7, r3
 800b126:	2203      	movs	r2, #3
 800b128:	701a      	strb	r2, [r3, #0]
                    HDL_RESET_TX( pxRTUHdl );
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	2382      	movs	r3, #130	; 0x82
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	2100      	movs	r1, #0
 800b132:	54d1      	strb	r1, [r2, r3]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	2383      	movs	r3, #131	; 0x83
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	2100      	movs	r1, #0
 800b13c:	52d1      	strh	r1, [r2, r3]
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	2384      	movs	r3, #132	; 0x84
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	2100      	movs	r1, #0
 800b146:	50d1      	str	r1, [r2, r3]
 800b148:	e003      	b.n	800b152 <eMBSSerialRTUFrameSend+0x1b2>
                    {
                        vMBPGetTimeStamp( &xTimeStamp );
                        pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
                    }
#endif
                    eStatus = MB_ENOERR;
 800b14a:	2317      	movs	r3, #23
 800b14c:	18fb      	adds	r3, r7, r3
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
    return eStatus;
 800b152:	2317      	movs	r3, #23
 800b154:	18fb      	adds	r3, r7, r3
 800b156:	781b      	ldrb	r3, [r3, #0]
}
 800b158:	0018      	movs	r0, r3
 800b15a:	46bd      	mov	sp, r7
 800b15c:	b006      	add	sp, #24
 800b15e:	bdb0      	pop	{r4, r5, r7, pc}
 800b160:	20004b88 	.word	0x20004b88
 800b164:	0800b391 	.word	0x0800b391
 800b168:	0800b265 	.word	0x0800b265

0800b16c <bMBSSerialRTUFrameReceiveInternal>:
}
#endif

STATIC          BOOL
bMBSSerialRTUFrameReceiveInternal( xMBSInternalHandle * pxIntHdl, xMBSRTUFrameHandle * pxRTUHdl, const UBYTE * pubBuffer, USHORT usLength )
{
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	001a      	movs	r2, r3
 800b17a:	1cbb      	adds	r3, r7, #2
 800b17c:	801a      	strh	r2, [r3, #0]
    BOOL            isValidFrame = FALSE;
 800b17e:	2417      	movs	r4, #23
 800b180:	193b      	adds	r3, r7, r4
 800b182:	2200      	movs	r2, #0
 800b184:	701a      	strb	r2, [r3, #0]
#if MBS_ENABLE_PROT_ANALYZER_INTERFACE == 1
    xMBAnalyzerFrame xAnalyzerFrame;
    xMBPTimeStamp   xTimeStamp;
#endif
    if( ( usLength >= MBS_SER_PDU_SIZE_MIN ) && ( usMBSCRC16( ( const UBYTE * )pubBuffer, usLength ) == 0 ) )
 800b186:	1cbb      	adds	r3, r7, #2
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d90b      	bls.n	800b1a6 <bMBSSerialRTUFrameReceiveInternal+0x3a>
 800b18e:	1cbb      	adds	r3, r7, #2
 800b190:	881a      	ldrh	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	0011      	movs	r1, r2
 800b196:	0018      	movs	r0, r3
 800b198:	f7fe fce4 	bl	8009b64 <usMBSCRC16>
 800b19c:	1e03      	subs	r3, r0, #0
 800b19e:	d102      	bne.n	800b1a6 <bMBSSerialRTUFrameReceiveInternal+0x3a>
    {
        isValidFrame = TRUE;
 800b1a0:	193b      	adds	r3, r7, r4
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	701a      	strb	r2, [r3, #0]
    {
        vMBPGetTimeStamp( &xTimeStamp );
        pxIntHdl->pvMBAnalyzerCallbackFN( pxIntHdl, pxIntHdl->pvCtx, &xTimeStamp, &xAnalyzerFrame );
    }
#endif
    return isValidFrame;
 800b1a6:	2317      	movs	r3, #23
 800b1a8:	18fb      	adds	r3, r7, r3
 800b1aa:	781b      	ldrb	r3, [r3, #0]
}
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	b007      	add	sp, #28
 800b1b2:	bd90      	pop	{r4, r7, pc}

0800b1b4 <eMBSSerialRTUFrameReceive>:

STATIC          eMBErrorCode
eMBSSerialRTUFrameReceive( xMBHandle xHdl, UBYTE * pubSlaveAddress, USHORT * pusMBPDULength )
    MB_CDECL_SUFFIX
{
 800b1b4:	b5b0      	push	{r4, r5, r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b1c0:	251f      	movs	r5, #31
 800b1c2:	197b      	adds	r3, r7, r5
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	61bb      	str	r3, [r7, #24]
    xMBSRTUFrameHandle *pxRTUHdl;

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( bMBSIsHdlValid( pxIntHdl ) )
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f7fd f95c 	bl	800848c <bMBSIsHdlValid>
 800b1d4:	1e03      	subs	r3, r0, #0
 800b1d6:	d03c      	beq.n	800b252 <eMBSSerialRTUFrameReceive+0x9e>
#else
    if( TRUE )
#endif
    {
			pxRTUHdl = pxIntHdl->xFrameHdl;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	617b      	str	r3, [r7, #20]
			if( MB_IS_VALID_HDL( pxRTUHdl, xMBSRTUFrameHdl ) )
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d036      	beq.n	800b252 <eMBSSerialRTUFrameReceive+0x9e>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d132      	bne.n	800b252 <eMBSSerialRTUFrameReceive+0x9e>
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	001a      	movs	r2, r3
 800b1f2:	0013      	movs	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	189b      	adds	r3, r3, r2
 800b1f8:	00da      	lsls	r2, r3, #3
 800b1fa:	1ad2      	subs	r2, r2, r3
 800b1fc:	00d3      	lsls	r3, r2, #3
 800b1fe:	001a      	movs	r2, r3
 800b200:	4b17      	ldr	r3, [pc, #92]	; (800b260 <eMBSSerialRTUFrameReceive+0xac>)
 800b202:	18d3      	adds	r3, r2, r3
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	429a      	cmp	r2, r3
 800b208:	d123      	bne.n	800b252 <eMBSSerialRTUFrameReceive+0x9e>
			{
					if( bMBSSerialRTUFrameReceiveInternal( pxIntHdl, pxRTUHdl, ( const UBYTE * )&pxRTUHdl->ubRTUFrameBuffer[0], pxRTUHdl->usRcvBufferPos ) )
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	1c5c      	adds	r4, r3, #1
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	2381      	movs	r3, #129	; 0x81
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	5ad3      	ldrh	r3, [r2, r3]
 800b216:	b29b      	uxth	r3, r3
 800b218:	6979      	ldr	r1, [r7, #20]
 800b21a:	69b8      	ldr	r0, [r7, #24]
 800b21c:	0022      	movs	r2, r4
 800b21e:	f7ff ffa5 	bl	800b16c <bMBSSerialRTUFrameReceiveInternal>
 800b222:	1e03      	subs	r3, r0, #0
 800b224:	d011      	beq.n	800b24a <eMBSSerialRTUFrameReceive+0x96>
					{
							*pubSlaveAddress = pxRTUHdl->ubRTUFrameBuffer[MBS_SER_PDU_ADDR_OFF];
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	701a      	strb	r2, [r3, #0]
							*pusMBPDULength = ( USHORT ) ( pxRTUHdl->usRcvBufferPos - ( MBS_SER_PDU_PDU_OFF + MBS_SER_PDU_SIZE_CRC ) );
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	2381      	movs	r3, #129	; 0x81
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	5ad3      	ldrh	r3, [r2, r3]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	3b03      	subs	r3, #3
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	801a      	strh	r2, [r3, #0]
							eStatus = MB_ENOERR;
 800b242:	197b      	adds	r3, r7, r5
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
 800b248:	e003      	b.n	800b252 <eMBSSerialRTUFrameReceive+0x9e>
					}
					else
					{
							eStatus = MB_EIO;
 800b24a:	231f      	movs	r3, #31
 800b24c:	18fb      	adds	r3, r7, r3
 800b24e:	2205      	movs	r2, #5
 800b250:	701a      	strb	r2, [r3, #0]
					}
			}
    }
    return eStatus;
 800b252:	231f      	movs	r3, #31
 800b254:	18fb      	adds	r3, r7, r3
 800b256:	781b      	ldrb	r3, [r3, #0]
}
 800b258:	0018      	movs	r0, r3
 800b25a:	46bd      	mov	sp, r7
 800b25c:	b008      	add	sp, #32
 800b25e:	bdb0      	pop	{r4, r5, r7, pc}
 800b260:	20004b88 	.word	0x20004b88

0800b264 <bMBSSerialTransmitterEmptyAPIV1CB>:
#pragma interrupt_level 1
#endif
STATIC          BOOL
bMBSSerialTransmitterEmptyAPIV1CB( xMBHandle xHdl, UBYTE * pubValue )
    MB_CDECL_SUFFIX
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
    BOOL            bMoreTxData = FALSE;
 800b26e:	2317      	movs	r3, #23
 800b270:	18fb      	adds	r3, r7, r3
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]
    BOOL            bEnableRx = FALSE;
 800b276:	2316      	movs	r3, #22
 800b278:	18fb      	adds	r3, r7, r3
 800b27a:	2200      	movs	r2, #0
 800b27c:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	613b      	str	r3, [r7, #16]
    xMBSRTUFrameHandle *pxRTUFrameHdl;
    eMBErrorCode    eStatus;

    MBP_ENTER_CRITICAL_SECTION(  );
 800b282:	f000 fb52 	bl	800b92a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eRcvState == STATE_RX_IDLE );
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	2302      	movs	r3, #2
 800b290:	33ff      	adds	r3, #255	; 0xff
 800b292:	5cd3      	ldrb	r3, [r2, r3]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <bMBSSerialTransmitterEmptyAPIV1CB+0x3a>
 800b29a:	f000 fb33 	bl	800b904 <vMBPAssert>
    MBP_ASSERT( pxRTUFrameHdl->eSndState == STATE_TX_XMIT );
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	2382      	movs	r3, #130	; 0x82
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	5cd3      	ldrb	r3, [r2, r3]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d001      	beq.n	800b2b0 <bMBSSerialTransmitterEmptyAPIV1CB+0x4c>
 800b2ac:	f000 fb2a 	bl	800b904 <vMBPAssert>

    switch ( pxRTUFrameHdl->eSndState )
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	2382      	movs	r3, #130	; 0x82
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	5cd3      	ldrb	r3, [r2, r3]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d127      	bne.n	800b30e <bMBSSerialTransmitterEmptyAPIV1CB+0xaa>
    {
    case STATE_TX_XMIT:
        if( pxRTUFrameHdl->usSndBufferCnt > 0 )
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	2383      	movs	r3, #131	; 0x83
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	5ad3      	ldrh	r3, [r2, r3]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01b      	beq.n	800b304 <bMBSSerialTransmitterEmptyAPIV1CB+0xa0>
        {
            *pubValue = *pxRTUFrameHdl->pubSndBufferCur++;
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	2384      	movs	r3, #132	; 0x84
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	58d3      	ldr	r3, [r2, r3]
 800b2d4:	1c58      	adds	r0, r3, #1
 800b2d6:	68f9      	ldr	r1, [r7, #12]
 800b2d8:	2284      	movs	r2, #132	; 0x84
 800b2da:	0052      	lsls	r2, r2, #1
 800b2dc:	5088      	str	r0, [r1, r2]
 800b2de:	781a      	ldrb	r2, [r3, #0]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	701a      	strb	r2, [r3, #0]
            pxRTUFrameHdl->usSndBufferCnt -= ( USHORT ) 1;
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	2383      	movs	r3, #131	; 0x83
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	5ad3      	ldrh	r3, [r2, r3]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b299      	uxth	r1, r3
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	2383      	movs	r3, #131	; 0x83
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	52d1      	strh	r1, [r2, r3]
            bMoreTxData = TRUE;
 800b2fa:	2317      	movs	r3, #23
 800b2fc:	18fb      	adds	r3, r7, r3
 800b2fe:	2201      	movs	r2, #1
 800b300:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            bEnableRx = TRUE;
        }
        break;
 800b302:	e005      	b.n	800b310 <bMBSSerialTransmitterEmptyAPIV1CB+0xac>
            bEnableRx = TRUE;
 800b304:	2316      	movs	r3, #22
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	2201      	movs	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
        break;
 800b30c:	e000      	b.n	800b310 <bMBSSerialTransmitterEmptyAPIV1CB+0xac>

    default:
        break;
 800b30e:	46c0      	nop			; (mov r8, r8)
    }
    if( !bMoreTxData )
 800b310:	2317      	movs	r3, #23
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10e      	bne.n	800b338 <bMBSSerialTransmitterEmptyAPIV1CB+0xd4>
    {
        HDL_RESET_TX( pxRTUFrameHdl );
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	2382      	movs	r3, #130	; 0x82
 800b31e:	005b      	lsls	r3, r3, #1
 800b320:	2100      	movs	r1, #0
 800b322:	54d1      	strb	r1, [r2, r3]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	2383      	movs	r3, #131	; 0x83
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	2100      	movs	r1, #0
 800b32c:	52d1      	strh	r1, [r2, r3]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	2384      	movs	r3, #132	; 0x84
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	2100      	movs	r1, #0
 800b336:	50d1      	str	r1, [r2, r3]
    {
#if MBS_ENABLE_STATISTICS_INTERFACE == 1
        pxIntHdl->xFrameStat.ulNBytesSent += 1;
#endif
    }
    if( bEnableRx )
 800b338:	2316      	movs	r3, #22
 800b33a:	18fb      	adds	r3, r7, r3
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01a      	beq.n	800b378 <bMBSSerialTransmitterEmptyAPIV1CB+0x114>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
            MBP_ASSERT( MB_ENOERR == eStatus );
        }
#else
        if( MB_ENOERR != eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, ( pvMBPSerialReceiverCB ) vMBPSerialReceiverAPIV1CB ) )
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	2388      	movs	r3, #136	; 0x88
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	58d3      	ldr	r3, [r2, r3]
 800b34a:	4a10      	ldr	r2, [pc, #64]	; (800b38c <bMBSSerialTransmitterEmptyAPIV1CB+0x128>)
 800b34c:	0011      	movs	r1, r2
 800b34e:	0018      	movs	r0, r3
 800b350:	f000 fd28 	bl	800bda4 <eMBPSerialRxEnable>
 800b354:	1e03      	subs	r3, r0, #0
 800b356:	d00f      	beq.n	800b378 <bMBSSerialTransmitterEmptyAPIV1CB+0x114>
        {
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	250b      	movs	r5, #11
 800b35e:	197c      	adds	r4, r7, r5
 800b360:	2102      	movs	r1, #2
 800b362:	0018      	movs	r0, r3
 800b364:	f000 fa4e 	bl	800b804 <eMBPEventPost>
 800b368:	0003      	movs	r3, r0
 800b36a:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800b36c:	197b      	adds	r3, r7, r5
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <bMBSSerialTransmitterEmptyAPIV1CB+0x114>
 800b374:	f000 fac6 	bl	800b904 <vMBPAssert>
        }
#endif
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800b378:	f000 fade 	bl	800b938 <vMBPExitCritical>
    return bMoreTxData;
 800b37c:	2317      	movs	r3, #23
 800b37e:	18fb      	adds	r3, r7, r3
 800b380:	781b      	ldrb	r3, [r3, #0]
}
 800b382:	0018      	movs	r0, r3
 800b384:	46bd      	mov	sp, r7
 800b386:	b006      	add	sp, #24
 800b388:	bdb0      	pop	{r4, r5, r7, pc}
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	0800b391 	.word	0x0800b391

0800b390 <vMBPSerialReceiverAPIV1CB>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC void
vMBPSerialReceiverAPIV1CB( xMBHandle xHdl, UBYTE ubValue )
{
 800b390:	b5b0      	push	{r4, r5, r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	000a      	movs	r2, r1
 800b39a:	1cfb      	adds	r3, r7, #3
 800b39c:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	617b      	str	r3, [r7, #20]
    xMBSRTUFrameHandle *pxRTUFrameHdl;
    eMBErrorCode    eStatus;

    MBP_ENTER_CRITICAL_SECTION(  );
 800b3a2:	f000 fac2 	bl	800b92a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	613b      	str	r3, [r7, #16]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == STATE_TX_IDLE );
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	2382      	movs	r3, #130	; 0x82
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	5cd3      	ldrb	r3, [r2, r3]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <vMBPSerialReceiverAPIV1CB+0x2e>
 800b3ba:	f000 faa3 	bl	800b904 <vMBPAssert>
    switch ( pxRTUFrameHdl->eRcvState )
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	33ff      	adds	r3, #255	; 0xff
 800b3c4:	5cd3      	ldrb	r3, [r2, r3]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <vMBPSerialReceiverAPIV1CB+0x42>
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d00f      	beq.n	800b3f0 <vMBPSerialReceiverAPIV1CB+0x60>
 800b3d0:	e032      	b.n	800b438 <vMBPSerialReceiverAPIV1CB+0xa8>
    {
    case STATE_RX_IDLE:
        pxRTUFrameHdl->ubRTUFrameBuffer[0] = ubValue;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	1cfa      	adds	r2, r7, #3
 800b3d6:	7812      	ldrb	r2, [r2, #0]
 800b3d8:	705a      	strb	r2, [r3, #1]
        pxRTUFrameHdl->usRcvBufferPos = 1;
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	2381      	movs	r3, #129	; 0x81
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	52d1      	strh	r1, [r2, r3]
        pxRTUFrameHdl->eRcvState = STATE_RX_RCV;
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	33ff      	adds	r3, #255	; 0xff
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	54d1      	strb	r1, [r2, r3]
        break;
 800b3ee:	e028      	b.n	800b442 <vMBPSerialReceiverAPIV1CB+0xb2>

    case STATE_RX_RCV:
        if( pxRTUFrameHdl->usRcvBufferPos < MBS_SER_PDU_SIZE_MAX )
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	2381      	movs	r3, #129	; 0x81
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	5ad3      	ldrh	r3, [r2, r3]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	2bff      	cmp	r3, #255	; 0xff
 800b3fc:	d816      	bhi.n	800b42c <vMBPSerialReceiverAPIV1CB+0x9c>
        {
            pxRTUFrameHdl->ubRTUFrameBuffer[pxRTUFrameHdl->usRcvBufferPos] = ubValue;
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	2381      	movs	r3, #129	; 0x81
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	5ad3      	ldrh	r3, [r2, r3]
 800b406:	b29b      	uxth	r3, r3
 800b408:	001a      	movs	r2, r3
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	1cfa      	adds	r2, r7, #3
 800b410:	7812      	ldrb	r2, [r2, #0]
 800b412:	705a      	strb	r2, [r3, #1]
            pxRTUFrameHdl->usRcvBufferPos++;
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	2381      	movs	r3, #129	; 0x81
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	5ad3      	ldrh	r3, [r2, r3]
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3301      	adds	r3, #1
 800b420:	b299      	uxth	r1, r3
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	2381      	movs	r3, #129	; 0x81
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	52d1      	strh	r1, [r2, r3]
        }
        else
        {
            pxRTUFrameHdl->eRcvState = STATE_RX_ERROR;
        }
        break;
 800b42a:	e00a      	b.n	800b442 <vMBPSerialReceiverAPIV1CB+0xb2>
            pxRTUFrameHdl->eRcvState = STATE_RX_ERROR;
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	2302      	movs	r3, #2
 800b430:	33ff      	adds	r3, #255	; 0xff
 800b432:	2102      	movs	r1, #2
 800b434:	54d1      	strb	r1, [r2, r3]
        break;
 800b436:	e004      	b.n	800b442 <vMBPSerialReceiverAPIV1CB+0xb2>

    default:
    case STATE_RX_ERROR:
        pxRTUFrameHdl->eRcvState = STATE_RX_ERROR;
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	2302      	movs	r3, #2
 800b43c:	33ff      	adds	r3, #255	; 0xff
 800b43e:	2102      	movs	r1, #2
 800b440:	54d1      	strb	r1, [r2, r3]
    }
#if MBS_ENABLE_STATISTICS_INTERFACE == 1
    pxIntHdl->xFrameStat.ulNBytesReceived += 1;
#endif
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
    if( MB_ENOERR != eMBPTimerStart( pxRTUFrameHdl->xTmrHdl ) )
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	2386      	movs	r3, #134	; 0x86
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	58d3      	ldr	r3, [r2, r3]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f000 fe62 	bl	800c114 <eMBPTimerStart>
 800b450:	1e03      	subs	r3, r0, #0
 800b452:	d026      	beq.n	800b4a2 <vMBPSerialReceiverAPIV1CB+0x112>
    {
        /* We can only abort here because or timers failed. */
        pxRTUFrameHdl->eRcvState = STATE_RX_ERROR;
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	2302      	movs	r3, #2
 800b458:	33ff      	adds	r3, #255	; 0xff
 800b45a:	2102      	movs	r1, #2
 800b45c:	54d1      	strb	r1, [r2, r3]
        eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	2388      	movs	r3, #136	; 0x88
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	58d3      	ldr	r3, [r2, r3]
 800b466:	250f      	movs	r5, #15
 800b468:	197c      	adds	r4, r7, r5
 800b46a:	2100      	movs	r1, #0
 800b46c:	0018      	movs	r0, r3
 800b46e:	f000 fc99 	bl	800bda4 <eMBPSerialRxEnable>
 800b472:	0003      	movs	r3, r0
 800b474:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800b476:	197b      	adds	r3, r7, r5
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <vMBPSerialReceiverAPIV1CB+0xf2>
 800b47e:	f000 fa41 	bl	800b904 <vMBPAssert>
        eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_ERROR );
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	250f      	movs	r5, #15
 800b488:	197c      	adds	r4, r7, r5
 800b48a:	2102      	movs	r1, #2
 800b48c:	0018      	movs	r0, r3
 800b48e:	f000 f9b9 	bl	800b804 <eMBPEventPost>
 800b492:	0003      	movs	r3, r0
 800b494:	7023      	strb	r3, [r4, #0]
        MBP_ASSERT( MB_ENOERR == eStatus );
 800b496:	197b      	adds	r3, r7, r5
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <vMBPSerialReceiverAPIV1CB+0x112>
 800b49e:	f000 fa31 	bl	800b904 <vMBPAssert>
    }
#endif
    MBP_EXIT_CRITICAL_SECTION(  );
 800b4a2:	f000 fa49 	bl	800b938 <vMBPExitCritical>
}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	b006      	add	sp, #24
 800b4ac:	bdb0      	pop	{r4, r5, r7, pc}

0800b4ae <eMBSSerialRTUFrameClose>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialRTUFrameClose( xMBHandle xHdl )
{
 800b4ae:	b590      	push	{r4, r7, lr}
 800b4b0:	b085      	sub	sp, #20
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b4b6:	240f      	movs	r4, #15
 800b4b8:	193b      	adds	r3, r7, r4
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
    xMBSInternalHandle *pxIntHdl = xHdl;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60bb      	str	r3, [r7, #8]

#if MBS_ENABLE_FULL_API_CHECKS == 1
    if( bMBSIsHdlValid( pxIntHdl ) )
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	f7fc ffe1 	bl	800848c <bMBSIsHdlValid>
 800b4ca:	1e03      	subs	r3, r0, #0
 800b4cc:	d007      	beq.n	800b4de <eMBSSerialRTUFrameClose+0x30>
#else
    if( TRUE )
#endif
    {
        eStatus = eMBSSerialRTUFrameCloseInternal( ( xMBSRTUFrameHandle * ) pxIntHdl->xFrameHdl );
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	193c      	adds	r4, r7, r4
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f000 f809 	bl	800b4ec <eMBSSerialRTUFrameCloseInternal>
 800b4da:	0003      	movs	r3, r0
 800b4dc:	7023      	strb	r3, [r4, #0]
    }
    return eStatus;
 800b4de:	230f      	movs	r3, #15
 800b4e0:	18fb      	adds	r3, r7, r3
 800b4e2:	781b      	ldrb	r3, [r3, #0]
}
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	b005      	add	sp, #20
 800b4ea:	bd90      	pop	{r4, r7, pc}

0800b4ec <eMBSSerialRTUFrameCloseInternal>:
#if defined( HI_TECH_C ) && defined( __PICC18__ )
#pragma interrupt_level 1
#endif
STATIC          eMBErrorCode
eMBSSerialRTUFrameCloseInternal( xMBSRTUFrameHandle * pxRTUHdl )
{
 800b4ec:	b590      	push	{r4, r7, lr}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b4f4:	240f      	movs	r4, #15
 800b4f6:	193b      	adds	r3, r7, r4
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 800b4fc:	f000 fa15 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxRTUHdl, xMBSRTUFrameHdl ) )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d100      	bne.n	800b508 <eMBSSerialRTUFrameCloseInternal+0x1c>
 800b506:	e0a1      	b.n	800b64c <eMBSSerialRTUFrameCloseInternal+0x160>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d000      	beq.n	800b512 <eMBSSerialRTUFrameCloseInternal+0x26>
 800b510:	e09c      	b.n	800b64c <eMBSSerialRTUFrameCloseInternal+0x160>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	001a      	movs	r2, r3
 800b518:	0013      	movs	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	00da      	lsls	r2, r3, #3
 800b520:	1ad2      	subs	r2, r2, r3
 800b522:	00d3      	lsls	r3, r2, #3
 800b524:	001a      	movs	r2, r3
 800b526:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <eMBSSerialRTUFrameCloseInternal+0x174>)
 800b528:	18d3      	adds	r3, r2, r3
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d000      	beq.n	800b532 <eMBSSerialRTUFrameCloseInternal+0x46>
 800b530:	e08c      	b.n	800b64c <eMBSSerialRTUFrameCloseInternal+0x160>
    {

        if( MBP_SERIALHDL_INVALID != pxRTUHdl->xSerHdl )
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	2388      	movs	r3, #136	; 0x88
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	58d3      	ldr	r3, [r2, r3]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d04c      	beq.n	800b5d8 <eMBSSerialRTUFrameCloseInternal+0xec>
        {
            if( MB_ENOERR != eMBPSerialClose( pxRTUHdl->xSerHdl ) )
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	2388      	movs	r3, #136	; 0x88
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	58d3      	ldr	r3, [r2, r3]
 800b546:	0018      	movs	r0, r3
 800b548:	f000 fb0e 	bl	800bb68 <eMBPSerialClose>
 800b54c:	1e03      	subs	r3, r0, #0
 800b54e:	d003      	beq.n	800b558 <eMBSSerialRTUFrameCloseInternal+0x6c>
            {
                eStatus = MB_EPORTERR;
 800b550:	193b      	adds	r3, r7, r4
 800b552:	2203      	movs	r2, #3
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e079      	b.n	800b64c <eMBSSerialRTUFrameCloseInternal+0x160>
            }
            else
            {
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrHdl )
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	2386      	movs	r3, #134	; 0x86
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	58d3      	ldr	r3, [r2, r3]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <eMBSSerialRTUFrameCloseInternal+0x86>
                {
                    vMBPTimerClose( pxRTUHdl->xTmrHdl );
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	2386      	movs	r3, #134	; 0x86
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	58d3      	ldr	r3, [r2, r3]
 800b56c:	0018      	movs	r0, r3
 800b56e:	f000 fda9 	bl	800c0c4 <vMBPTimerClose>
                if( MBP_TIMERHDL_INVALID != pxRTUHdl->xTmrWaitHdl )
                {
                    vMBPTimerClose( pxRTUHdl->xTmrWaitHdl );
                }
#endif
                HDL_RESET( pxRTUHdl );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	22ff      	movs	r2, #255	; 0xff
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	2302      	movs	r3, #2
 800b57c:	33ff      	adds	r3, #255	; 0xff
 800b57e:	2100      	movs	r1, #0
 800b580:	54d1      	strb	r1, [r2, r3]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	2381      	movs	r3, #129	; 0x81
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	2100      	movs	r1, #0
 800b58a:	52d1      	strh	r1, [r2, r3]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	2382      	movs	r3, #130	; 0x82
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	2100      	movs	r1, #0
 800b594:	54d1      	strb	r1, [r2, r3]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	2383      	movs	r3, #131	; 0x83
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	2100      	movs	r1, #0
 800b59e:	52d1      	strh	r1, [r2, r3]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	2384      	movs	r3, #132	; 0x84
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	50d1      	str	r1, [r2, r3]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	2386      	movs	r3, #134	; 0x86
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	50d1      	str	r1, [r2, r3]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	2388      	movs	r3, #136	; 0x88
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	50d1      	str	r1, [r2, r3]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	2280      	movs	r2, #128	; 0x80
 800b5c4:	0052      	lsls	r2, r2, #1
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f000 fe9e 	bl	800c30a <memset>
                eStatus = MB_ENOERR;
 800b5ce:	230f      	movs	r3, #15
 800b5d0:	18fb      	adds	r3, r7, r3
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	e039      	b.n	800b64c <eMBSSerialRTUFrameCloseInternal+0x160>
        }
        else
        {
            /* Make sure that no timers are created. */
#if MBP_SERIAL_PORT_DETECTS_TIMEOUT == 0
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrHdl );
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	2386      	movs	r3, #134	; 0x86
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	58d3      	ldr	r3, [r2, r3]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <eMBSSerialRTUFrameCloseInternal+0xfc>
 800b5e4:	f000 f98e 	bl	800b904 <vMBPAssert>
#endif
#if MBS_RTU_WAITAFTERSEND_ENABLED == 1
            MBP_ASSERT( MBP_TIMERHDL_INVALID == pxRTUHdl->xTmrWaitHdl );
#endif
            HDL_RESET( pxRTUHdl );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	22ff      	movs	r2, #255	; 0xff
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	33ff      	adds	r3, #255	; 0xff
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	54d1      	strb	r1, [r2, r3]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	2381      	movs	r3, #129	; 0x81
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	2100      	movs	r1, #0
 800b600:	52d1      	strh	r1, [r2, r3]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	2382      	movs	r3, #130	; 0x82
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	2100      	movs	r1, #0
 800b60a:	54d1      	strb	r1, [r2, r3]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	2383      	movs	r3, #131	; 0x83
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	2100      	movs	r1, #0
 800b614:	52d1      	strh	r1, [r2, r3]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	2384      	movs	r3, #132	; 0x84
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	2100      	movs	r1, #0
 800b61e:	50d1      	str	r1, [r2, r3]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	2386      	movs	r3, #134	; 0x86
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	2100      	movs	r1, #0
 800b628:	50d1      	str	r1, [r2, r3]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	2388      	movs	r3, #136	; 0x88
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	2100      	movs	r1, #0
 800b632:	50d1      	str	r1, [r2, r3]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3301      	adds	r3, #1
 800b638:	2280      	movs	r2, #128	; 0x80
 800b63a:	0052      	lsls	r2, r2, #1
 800b63c:	2100      	movs	r1, #0
 800b63e:	0018      	movs	r0, r3
 800b640:	f000 fe63 	bl	800c30a <memset>
            eStatus = MB_ENOERR;
 800b644:	230f      	movs	r3, #15
 800b646:	18fb      	adds	r3, r7, r3
 800b648:	2200      	movs	r2, #0
 800b64a:	701a      	strb	r2, [r3, #0]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800b64c:	f000 f974 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800b650:	230f      	movs	r3, #15
 800b652:	18fb      	adds	r3, r7, r3
 800b654:	781b      	ldrb	r3, [r3, #0]
}
 800b656:	0018      	movs	r0, r3
 800b658:	46bd      	mov	sp, r7
 800b65a:	b005      	add	sp, #20
 800b65c:	bd90      	pop	{r4, r7, pc}
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	20004b88 	.word	0x20004b88

0800b664 <bMBSSerialRTUT35CB>:
#if ( MBS_TEST_INSTANCES == 0 )
STATIC
#endif
    BOOL
bMBSSerialRTUT35CB( xMBHandle xHdl )
{
 800b664:	b5b0      	push	{r4, r5, r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
    BOOL            bFrameIsTaken = FALSE;
 800b66c:	2317      	movs	r3, #23
 800b66e:	18fb      	adds	r3, r7, r3
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus;
    xMBSInternalHandle *pxIntHdl = xHdl;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	613b      	str	r3, [r7, #16]
    xMBSRTUFrameHandle *pxRTUFrameHdl;

    MBP_ENTER_CRITICAL_SECTION(  );
 800b678:	f000 f957 	bl	800b92a <vMBPEnterCritical>
    pxRTUFrameHdl = pxIntHdl->xFrameHdl;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	60fb      	str	r3, [r7, #12]
    MBP_ASSERT( pxRTUFrameHdl->eSndState == STATE_TX_IDLE );
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	2382      	movs	r3, #130	; 0x82
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	5cd3      	ldrb	r3, [r2, r3]
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <bMBSSerialRTUT35CB+0x30>
 800b690:	f000 f938 	bl	800b904 <vMBPAssert>


    switch ( pxRTUFrameHdl->eRcvState )
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	2302      	movs	r3, #2
 800b698:	33ff      	adds	r3, #255	; 0xff
 800b69a:	5cd3      	ldrb	r3, [r2, r3]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d12b      	bne.n	800b6fa <bMBSSerialRTUT35CB+0x96>
        if( 1 )
#endif
        {

            /* Disable receiver since we want to process this frame first. */
            eStatus = eMBPSerialRxEnable( pxRTUFrameHdl->xSerHdl, NULL );
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	2388      	movs	r3, #136	; 0x88
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	58d3      	ldr	r3, [r2, r3]
 800b6aa:	250b      	movs	r5, #11
 800b6ac:	197c      	adds	r4, r7, r5
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fb77 	bl	800bda4 <eMBPSerialRxEnable>
 800b6b6:	0003      	movs	r3, r0
 800b6b8:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800b6ba:	197b      	adds	r3, r7, r5
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <bMBSSerialRTUT35CB+0x62>
 800b6c2:	f000 f91f 	bl	800b904 <vMBPAssert>
            /* Put receiver back to idle - Information about new frame is in the
             * MBS_EV_RECEIVED event.
             */
            pxRTUFrameHdl->eRcvState = STATE_RX_IDLE;
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	33ff      	adds	r3, #255	; 0xff
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	54d1      	strb	r1, [r2, r3]
            /* A frame has been received. Handle this one. */
            eStatus = eMBPEventPost( pxIntHdl->xFrameEventHdl, ( xMBPEventType ) MBS_EV_RECEIVED );
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	250b      	movs	r5, #11
 800b6d6:	197c      	adds	r4, r7, r5
 800b6d8:	2101      	movs	r1, #1
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 f892 	bl	800b804 <eMBPEventPost>
 800b6e0:	0003      	movs	r3, r0
 800b6e2:	7023      	strb	r3, [r4, #0]
            MBP_ASSERT( MB_ENOERR == eStatus );
 800b6e4:	197b      	adds	r3, r7, r5
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <bMBSSerialRTUT35CB+0x8c>
 800b6ec:	f000 f90a 	bl	800b904 <vMBPAssert>
            /* The frame will be analyzed within the main polling loop */
            bFrameIsTaken = TRUE;
 800b6f0:	2317      	movs	r3, #23
 800b6f2:	18fb      	adds	r3, r7, r3
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            pxRTUFrameHdl->eRcvState = STATE_RX_IDLE;
        }
        break;
 800b6f8:	e005      	b.n	800b706 <bMBSSerialRTUT35CB+0xa2>

    default:
        /* An error occurred during frame reception. Ignore this
         * frame.
         */
        pxRTUFrameHdl->eRcvState = STATE_RX_IDLE;
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	33ff      	adds	r3, #255	; 0xff
 800b700:	2100      	movs	r1, #0
 800b702:	54d1      	strb	r1, [r2, r3]
        break;
 800b704:	46c0      	nop			; (mov r8, r8)
    }

    MBP_EXIT_CRITICAL_SECTION(  );
 800b706:	f000 f917 	bl	800b938 <vMBPExitCritical>
    return bFrameIsTaken;
 800b70a:	2317      	movs	r3, #23
 800b70c:	18fb      	adds	r3, r7, r3
 800b70e:	781b      	ldrb	r3, [r3, #0]
}
 800b710:	0018      	movs	r0, r3
 800b712:	46bd      	mov	sp, r7
 800b714:	b006      	add	sp, #24
 800b716:	bdb0      	pop	{r4, r5, r7, pc}

0800b718 <eMBPEventCreate>:

/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPEventCreate( xMBPEventHandle * pxEventHdl )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b720:	230f      	movs	r3, #15
 800b722:	18fb      	adds	r3, r7, r3
 800b724:	2202      	movs	r2, #2
 800b726:	701a      	strb	r2, [r3, #0]
    UBYTE           i;

    if( NULL != pxEventHdl )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d05e      	beq.n	800b7ec <eMBPEventCreate+0xd4>
    {
        MBP_ENTER_CRITICAL_SECTION(  );
 800b72e:	f000 f8fc 	bl	800b92a <vMBPEnterCritical>
        if( !bIsInitialized )
 800b732:	4b32      	ldr	r3, [pc, #200]	; (800b7fc <eMBPEventCreate+0xe4>)
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d121      	bne.n	800b77e <eMBPEventCreate+0x66>
        {
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800b73a:	230e      	movs	r3, #14
 800b73c:	18fb      	adds	r3, r7, r3
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	e014      	b.n	800b76e <eMBPEventCreate+0x56>
            {
                HDL_RESET( &arxEventHdls[i] );
 800b744:	200e      	movs	r0, #14
 800b746:	183b      	adds	r3, r7, r0
 800b748:	781a      	ldrb	r2, [r3, #0]
 800b74a:	4b2d      	ldr	r3, [pc, #180]	; (800b800 <eMBPEventCreate+0xe8>)
 800b74c:	0052      	lsls	r2, r2, #1
 800b74e:	21ff      	movs	r1, #255	; 0xff
 800b750:	54d1      	strb	r1, [r2, r3]
 800b752:	0001      	movs	r1, r0
 800b754:	187b      	adds	r3, r7, r1
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	4a29      	ldr	r2, [pc, #164]	; (800b800 <eMBPEventCreate+0xe8>)
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	18d3      	adds	r3, r2, r3
 800b75e:	3301      	adds	r3, #1
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800b764:	187b      	adds	r3, r7, r1
 800b766:	781a      	ldrb	r2, [r3, #0]
 800b768:	187b      	adds	r3, r7, r1
 800b76a:	3201      	adds	r2, #1
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	230e      	movs	r3, #14
 800b770:	18fb      	adds	r3, r7, r3
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d9e5      	bls.n	800b744 <eMBPEventCreate+0x2c>
            }
            bIsInitialized = TRUE;
 800b778:	4b20      	ldr	r3, [pc, #128]	; (800b7fc <eMBPEventCreate+0xe4>)
 800b77a:	2201      	movs	r2, #1
 800b77c:	701a      	strb	r2, [r3, #0]
        }
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800b77e:	230e      	movs	r3, #14
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e02a      	b.n	800b7de <eMBPEventCreate+0xc6>
        {
            if( IDX_INVALID == arxEventHdls[i].ubIdx )
 800b788:	210e      	movs	r1, #14
 800b78a:	187b      	adds	r3, r7, r1
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	4b1c      	ldr	r3, [pc, #112]	; (800b800 <eMBPEventCreate+0xe8>)
 800b790:	0052      	lsls	r2, r2, #1
 800b792:	5cd3      	ldrb	r3, [r2, r3]
 800b794:	2bff      	cmp	r3, #255	; 0xff
 800b796:	d11c      	bne.n	800b7d2 <eMBPEventCreate+0xba>
            {
                arxEventHdls[i].ubIdx = i;
 800b798:	187b      	adds	r3, r7, r1
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	4b18      	ldr	r3, [pc, #96]	; (800b800 <eMBPEventCreate+0xe8>)
 800b79e:	0052      	lsls	r2, r2, #1
 800b7a0:	0008      	movs	r0, r1
 800b7a2:	1879      	adds	r1, r7, r1
 800b7a4:	7809      	ldrb	r1, [r1, #0]
 800b7a6:	54d1      	strb	r1, [r2, r3]
                arxEventHdls[i].xType = EV_NONE;
 800b7a8:	0001      	movs	r1, r0
 800b7aa:	187b      	adds	r3, r7, r1
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	4a14      	ldr	r2, [pc, #80]	; (800b800 <eMBPEventCreate+0xe8>)
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	18d3      	adds	r3, r2, r3
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
                *pxEventHdl = &arxEventHdls[i];
 800b7ba:	187b      	adds	r3, r7, r1
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	005a      	lsls	r2, r3, #1
 800b7c0:	4b0f      	ldr	r3, [pc, #60]	; (800b800 <eMBPEventCreate+0xe8>)
 800b7c2:	18d2      	adds	r2, r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	601a      	str	r2, [r3, #0]
                eStatus = MB_ENOERR;
 800b7c8:	230f      	movs	r3, #15
 800b7ca:	18fb      	adds	r3, r7, r3
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	701a      	strb	r2, [r3, #0]
                break;
 800b7d0:	e00a      	b.n	800b7e8 <eMBPEventCreate+0xd0>
        for( i = 0; i < MAX_EVENT_HDLS; i++ )
 800b7d2:	210e      	movs	r1, #14
 800b7d4:	187b      	adds	r3, r7, r1
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	187b      	adds	r3, r7, r1
 800b7da:	3201      	adds	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	230e      	movs	r3, #14
 800b7e0:	18fb      	adds	r3, r7, r3
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d9cf      	bls.n	800b788 <eMBPEventCreate+0x70>
            }
        }
        MBP_EXIT_CRITICAL_SECTION(  );
 800b7e8:	f000 f8a6 	bl	800b938 <vMBPExitCritical>
    }
    return eStatus;
 800b7ec:	230f      	movs	r3, #15
 800b7ee:	18fb      	adds	r3, r7, r3
 800b7f0:	781b      	ldrb	r3, [r3, #0]
}
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	b004      	add	sp, #16
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	46c0      	nop			; (mov r8, r8)
 800b7fc:	20004ca0 	.word	0x20004ca0
 800b800:	20004ca4 	.word	0x20004ca4

0800b804 <eMBPEventPost>:

eMBErrorCode
eMBPEventPost( const xMBPEventHandle xEventHdl, xMBPEventType xEvent )
{
 800b804:	b590      	push	{r4, r7, lr}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	000a      	movs	r2, r1
 800b80e:	1cfb      	adds	r3, r7, #3
 800b810:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800b812:	240f      	movs	r4, #15
 800b814:	193b      	adds	r3, r7, r4
 800b816:	2202      	movs	r2, #2
 800b818:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800b81e:	f000 f884 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00e      	beq.n	800b846 <eMBPEventPost+0x42>
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	005a      	lsls	r2, r3, #1
 800b82e:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <eMBPEventPost+0x54>)
 800b830:	18d3      	adds	r3, r2, r3
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	429a      	cmp	r2, r3
 800b836:	d106      	bne.n	800b846 <eMBPEventPost+0x42>
    {
        pxEventHdl->xType = xEvent;
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	1cfa      	adds	r2, r7, #3
 800b83c:	7812      	ldrb	r2, [r2, #0]
 800b83e:	705a      	strb	r2, [r3, #1]
        eStatus = MB_ENOERR;
 800b840:	193b      	adds	r3, r7, r4
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800b846:	f000 f877 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800b84a:	230f      	movs	r3, #15
 800b84c:	18fb      	adds	r3, r7, r3
 800b84e:	781b      	ldrb	r3, [r3, #0]
}
 800b850:	0018      	movs	r0, r3
 800b852:	46bd      	mov	sp, r7
 800b854:	b005      	add	sp, #20
 800b856:	bd90      	pop	{r4, r7, pc}
 800b858:	20004ca4 	.word	0x20004ca4

0800b85c <bMBPEventGet>:

BOOL
bMBPEventGet( const xMBPEventHandle xEventHdl, xMBPEventType * pxEvent )
{
 800b85c:	b590      	push	{r4, r7, lr}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
    BOOL            bEventInQueue = FALSE;
 800b866:	240f      	movs	r4, #15
 800b868:	193b      	adds	r3, r7, r4
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
    xEventInternalHandle *pxEventHdl = xEventHdl;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800b872:	f000 f85a 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventHdl, arxEventHdls ) )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d015      	beq.n	800b8a8 <bMBPEventGet+0x4c>
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	005a      	lsls	r2, r3, #1
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <bMBPEventGet+0x60>)
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d10d      	bne.n	800b8a8 <bMBPEventGet+0x4c>
    {
        if( EV_NONE != pxEventHdl->xType )
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d009      	beq.n	800b8a8 <bMBPEventGet+0x4c>
        {
            bEventInQueue = TRUE;
 800b894:	193b      	adds	r3, r7, r4
 800b896:	2201      	movs	r2, #1
 800b898:	701a      	strb	r2, [r3, #0]
            *pxEvent = pxEventHdl->xType;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	785a      	ldrb	r2, [r3, #1]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	701a      	strb	r2, [r3, #0]
            pxEventHdl->xType = EV_NONE;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	705a      	strb	r2, [r3, #1]
        }
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800b8a8:	f000 f846 	bl	800b938 <vMBPExitCritical>
    return bEventInQueue;
 800b8ac:	230f      	movs	r3, #15
 800b8ae:	18fb      	adds	r3, r7, r3
 800b8b0:	781b      	ldrb	r3, [r3, #0]
}
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	b005      	add	sp, #20
 800b8b8:	bd90      	pop	{r4, r7, pc}
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	20004ca4 	.word	0x20004ca4

0800b8c0 <vMBPEventDelete>:

void
vMBPEventDelete( xMBPEventHandle xEventHdl )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
    xEventInternalHandle *pxEventIntHdl = xEventHdl;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	60fb      	str	r3, [r7, #12]

    MBP_ENTER_CRITICAL_SECTION(  );
 800b8cc:	f000 f82d 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxEventIntHdl, arxEventHdls ) )
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00d      	beq.n	800b8f2 <vMBPEventDelete+0x32>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	005a      	lsls	r2, r3, #1
 800b8dc:	4b08      	ldr	r3, [pc, #32]	; (800b900 <vMBPEventDelete+0x40>)
 800b8de:	18d3      	adds	r3, r2, r3
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d105      	bne.n	800b8f2 <vMBPEventDelete+0x32>
    {
        HDL_RESET( pxEventIntHdl );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	22ff      	movs	r2, #255	; 0xff
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	705a      	strb	r2, [r3, #1]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800b8f2:	f000 f821 	bl	800b938 <vMBPExitCritical>
}
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	b004      	add	sp, #16
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	20004ca4 	.word	0x20004ca4

0800b904 <vMBPAssert>:
    vMBPAssert(  );
}

void
vMBPAssert( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
    volatile BOOL   bBreakOut = FALSE;
 800b90a:	1dfb      	adds	r3, r7, #7
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]

    vMBPEnterCritical(  );
 800b910:	f000 f80b 	bl	800b92a <vMBPEnterCritical>
    while( !bBreakOut );
 800b914:	46c0      	nop			; (mov r8, r8)
 800b916:	1dfb      	adds	r3, r7, #7
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0fa      	beq.n	800b916 <vMBPAssert+0x12>
}
 800b920:	46c0      	nop			; (mov r8, r8)
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b002      	add	sp, #8
 800b928:	bd80      	pop	{r7, pc}

0800b92a <vMBPEnterCritical>:

void
vMBPEnterCritical( void )
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	af00      	add	r7, sp, #0
	portENTER_CRITICAL(  );
 800b92e:	f7fc fb6f 	bl	8008010 <vPortEnterCritical>
	
}
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <vMBPExitCritical>:

void
vMBPExitCritical( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
	portEXIT_CRITICAL(  );
 800b93c:	f7fc fb7a 	bl	8008034 <vPortExitCritical>
 
}
 800b940:	46c0      	nop			; (mov r8, r8)
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <eMBPSerialInit>:

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBPSerialInit( xMBPSerialHandle * pxSerialHdl, UCHAR ucPort, ULONG ulBaudRate,
                UCHAR ucDataBits, eMBSerialParity eParity, UCHAR ucStopBits, xMBHandle xMBMHdl)
{
 800b948:	b590      	push	{r4, r7, lr}
 800b94a:	b08b      	sub	sp, #44	; 0x2c
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	0008      	movs	r0, r1
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	0019      	movs	r1, r3
 800b956:	230b      	movs	r3, #11
 800b958:	18fb      	adds	r3, r7, r3
 800b95a:	1c02      	adds	r2, r0, #0
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	230a      	movs	r3, #10
 800b960:	18fb      	adds	r3, r7, r3
 800b962:	1c0a      	adds	r2, r1, #0
 800b964:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800b966:	2327      	movs	r3, #39	; 0x27
 800b968:	18fb      	adds	r3, r7, r3
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
		uint32_t StopBit;
	
		UBYTE           ubUDR;
		/* End of addition */

    MBP_ENTER_CRITICAL_SECTION(  );
 800b96e:	f7ff ffdc 	bl	800b92a <vMBPEnterCritical>
    if( !bIsInitalized )
 800b972:	4b7a      	ldr	r3, [pc, #488]	; (800bb5c <eMBPSerialInit+0x214>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d139      	bne.n	800b9ee <eMBPSerialInit+0xa6>
    {
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 800b97a:	2326      	movs	r3, #38	; 0x26
 800b97c:	18fb      	adds	r3, r7, r3
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	e024      	b.n	800b9ce <eMBPSerialInit+0x86>
        {
            HDL_RESET( &xSerialHdls[ubIdx] );
 800b984:	2026      	movs	r0, #38	; 0x26
 800b986:	183b      	adds	r3, r7, r0
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	4b75      	ldr	r3, [pc, #468]	; (800bb60 <eMBPSerialInit+0x218>)
 800b98c:	0112      	lsls	r2, r2, #4
 800b98e:	21ff      	movs	r1, #255	; 0xff
 800b990:	54d1      	strb	r1, [r2, r3]
 800b992:	0001      	movs	r1, r0
 800b994:	187b      	adds	r3, r7, r1
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	4a71      	ldr	r2, [pc, #452]	; (800bb60 <eMBPSerialInit+0x218>)
 800b99a:	011b      	lsls	r3, r3, #4
 800b99c:	18d3      	adds	r3, r2, r3
 800b99e:	3304      	adds	r3, #4
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	187b      	adds	r3, r7, r1
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	4a6d      	ldr	r2, [pc, #436]	; (800bb60 <eMBPSerialInit+0x218>)
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	18d3      	adds	r3, r2, r3
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	187b      	adds	r3, r7, r1
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	4a69      	ldr	r2, [pc, #420]	; (800bb60 <eMBPSerialInit+0x218>)
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	18d3      	adds	r3, r2, r3
 800b9be:	330c      	adds	r3, #12
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( xSerialHdls ); ubIdx++ )
 800b9c4:	187b      	adds	r3, r7, r1
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	187b      	adds	r3, r7, r1
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	2326      	movs	r3, #38	; 0x26
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0d5      	beq.n	800b984 <eMBPSerialInit+0x3c>
        }
#if UART_1_ENABLED == 1
        RS_485_UART_1_INIT(  );
        RS_485_UART_1_DISABLE_TX(  );
 800b9d8:	2380      	movs	r3, #128	; 0x80
 800b9da:	0159      	lsls	r1, r3, #5
 800b9dc:	2390      	movs	r3, #144	; 0x90
 800b9de:	05db      	lsls	r3, r3, #23
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	f7f6 fe98 	bl	8002718 <HAL_GPIO_WritePin>
#endif
        bIsInitalized = TRUE;
 800b9e8:	4b5c      	ldr	r3, [pc, #368]	; (800bb5c <eMBPSerialInit+0x214>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	701a      	strb	r2, [r3, #0]
    }

    if( ( MB_HDL_INVALID == xMBMHdl ) || ( NULL == pxSerialHdl ) )
 800b9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <eMBPSerialInit+0xb2>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <eMBPSerialInit+0xbc>
    {
        eStatus = MB_EINVAL;
 800b9fa:	2327      	movs	r3, #39	; 0x27
 800b9fc:	18fb      	adds	r3, r7, r3
 800b9fe:	2202      	movs	r2, #2
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	e0a1      	b.n	800bb48 <eMBPSerialInit+0x200>
    }
    else
    {
        eStatus = MB_ENORES;
 800ba04:	2327      	movs	r3, #39	; 0x27
 800ba06:	18fb      	adds	r3, r7, r3
 800ba08:	2204      	movs	r2, #4
 800ba0a:	701a      	strb	r2, [r3, #0]

        /* Setup baudrate */
        if( ( ulBaudRate > UART_BAUDRATE_MIN ) && ( ulBaudRate < UART_BAUDRATE_MAX ) )
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	2396      	movs	r3, #150	; 0x96
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d904      	bls.n	800ba20 <eMBPSerialInit+0xd8>
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	23e1      	movs	r3, #225	; 0xe1
 800ba1a:	025b      	lsls	r3, r3, #9
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d303      	bcc.n	800ba28 <eMBPSerialInit+0xe0>
        {
            //BaudRate = ulBaudRate;
        }
        else
        {
            eStatus = MB_EINVAL;
 800ba20:	2327      	movs	r3, #39	; 0x27
 800ba22:	18fb      	adds	r3, r7, r3
 800ba24:	2202      	movs	r2, #2
 800ba26:	701a      	strb	r2, [r3, #0]
        }

        /* Setup stopbits */
        switch ( ucStopBits )
 800ba28:	2334      	movs	r3, #52	; 0x34
 800ba2a:	2208      	movs	r2, #8
 800ba2c:	189b      	adds	r3, r3, r2
 800ba2e:	19db      	adds	r3, r3, r7
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d002      	beq.n	800ba3c <eMBPSerialInit+0xf4>
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d003      	beq.n	800ba42 <eMBPSerialInit+0xfa>
 800ba3a:	e006      	b.n	800ba4a <eMBPSerialInit+0x102>
        {
        case 1:
            StopBit = UART_STOPBITS_1;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	623b      	str	r3, [r7, #32]
            break;
 800ba40:	e008      	b.n	800ba54 <eMBPSerialInit+0x10c>
        case 2:
            StopBit = UART_STOPBITS_2;
 800ba42:	2380      	movs	r3, #128	; 0x80
 800ba44:	019b      	lsls	r3, r3, #6
 800ba46:	623b      	str	r3, [r7, #32]
            break;
 800ba48:	e004      	b.n	800ba54 <eMBPSerialInit+0x10c>
        default:
            eStatus = MB_EINVAL;
 800ba4a:	2327      	movs	r3, #39	; 0x27
 800ba4c:	18fb      	adds	r3, r7, r3
 800ba4e:	2202      	movs	r2, #2
 800ba50:	701a      	strb	r2, [r3, #0]
            break;
 800ba52:	46c0      	nop			; (mov r8, r8)
        }

        /* For STM32 parity is placed on bit 9 (MSB)
         * Select correct number of databits */
        if( ucDataBits == 8 )
 800ba54:	230a      	movs	r3, #10
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b08      	cmp	r3, #8
 800ba5c:	d10d      	bne.n	800ba7a <eMBPSerialInit+0x132>
        {
            if( eParity != MB_PAR_NONE )
 800ba5e:	2330      	movs	r3, #48	; 0x30
 800ba60:	2208      	movs	r2, #8
 800ba62:	189b      	adds	r3, r3, r2
 800ba64:	19db      	adds	r3, r3, r7
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d003      	beq.n	800ba74 <eMBPSerialInit+0x12c>
            {
                DataBits = UART_WORDLENGTH_9B;
 800ba6c:	2380      	movs	r3, #128	; 0x80
 800ba6e:	015b      	lsls	r3, r3, #5
 800ba70:	61fb      	str	r3, [r7, #28]
 800ba72:	e010      	b.n	800ba96 <eMBPSerialInit+0x14e>
            }
            else
            {
                DataBits = UART_WORDLENGTH_8B;
 800ba74:	2300      	movs	r3, #0
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	e00d      	b.n	800ba96 <eMBPSerialInit+0x14e>
            }
        }
        else
        {
            if( eParity != MB_PAR_NONE )
 800ba7a:	2330      	movs	r3, #48	; 0x30
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	189b      	adds	r3, r3, r2
 800ba80:	19db      	adds	r3, r3, r7
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d002      	beq.n	800ba8e <eMBPSerialInit+0x146>
            {
                DataBits = UART_WORDLENGTH_8B;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	e003      	b.n	800ba96 <eMBPSerialInit+0x14e>
            }
            else
            {
                eStatus = MB_EINVAL;
 800ba8e:	2327      	movs	r3, #39	; 0x27
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	2202      	movs	r2, #2
 800ba94:	701a      	strb	r2, [r3, #0]
            }
        }

        /* Setup parity */
        switch ( eParity )
 800ba96:	2330      	movs	r3, #48	; 0x30
 800ba98:	2208      	movs	r2, #8
 800ba9a:	189b      	adds	r3, r3, r2
 800ba9c:	19db      	adds	r3, r3, r7
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d005      	beq.n	800bab0 <eMBPSerialInit+0x168>
 800baa4:	dc0f      	bgt.n	800bac6 <eMBPSerialInit+0x17e>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d005      	beq.n	800bab6 <eMBPSerialInit+0x16e>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d007      	beq.n	800babe <eMBPSerialInit+0x176>
 800baae:	e00a      	b.n	800bac6 <eMBPSerialInit+0x17e>
        {
        case MB_PAR_NONE:
            Parity = UART_PARITY_NONE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61bb      	str	r3, [r7, #24]
            break;
 800bab4:	e00c      	b.n	800bad0 <eMBPSerialInit+0x188>
        case MB_PAR_ODD:
            Parity = UART_PARITY_ODD;
 800bab6:	23c0      	movs	r3, #192	; 0xc0
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	61bb      	str	r3, [r7, #24]
            break;
 800babc:	e008      	b.n	800bad0 <eMBPSerialInit+0x188>
        case MB_PAR_EVEN:
            Parity = UART_PARITY_EVEN;
 800babe:	2380      	movs	r3, #128	; 0x80
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	61bb      	str	r3, [r7, #24]
            break;
 800bac4:	e004      	b.n	800bad0 <eMBPSerialInit+0x188>
        default:
            eStatus = MB_EINVAL;
 800bac6:	2327      	movs	r3, #39	; 0x27
 800bac8:	18fb      	adds	r3, r7, r3
 800baca:	2202      	movs	r2, #2
 800bacc:	701a      	strb	r2, [r3, #0]
            break;
 800bace:	46c0      	nop			; (mov r8, r8)
        }

        if( eStatus != MB_EINVAL )
 800bad0:	2427      	movs	r4, #39	; 0x27
 800bad2:	193b      	adds	r3, r7, r4
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d033      	beq.n	800bb42 <eMBPSerialInit+0x1fa>
        {
            switch ( ucPort )
 800bada:	230b      	movs	r3, #11
 800badc:	18fb      	adds	r3, r7, r3
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d130      	bne.n	800bb46 <eMBPSerialInit+0x1fe>
            {
#if UART_1_ENABLED == 1
            case UART_1_PORT:
                if( IDX_INVALID == xSerialHdls[UART_1_IDX].ubIdx )
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <eMBPSerialInit+0x218>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2bff      	cmp	r3, #255	; 0xff
 800baea:	d125      	bne.n	800bb38 <eMBPSerialInit+0x1f0>
                {
                    /* Configure  USART1 */
                    //MB_PORT_Init(BaudRate, DataBits, Parity, StopBit);
										MX_USART1_UART_Init();
 800baec:	f7f5 f854 	bl	8000b98 <MX_USART1_UART_Init>
									
                    /* Disable receive and transmit interrupts from the beginning */
                    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 800baf0:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <eMBPSerialInit+0x21c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	4b1b      	ldr	r3, [pc, #108]	; (800bb64 <eMBPSerialInit+0x21c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2120      	movs	r1, #32
 800bafc:	438a      	bics	r2, r1
 800bafe:	601a      	str	r2, [r3, #0]
										__HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 800bb00:	4b18      	ldr	r3, [pc, #96]	; (800bb64 <eMBPSerialInit+0x21c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <eMBPSerialInit+0x21c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2140      	movs	r1, #64	; 0x40
 800bb0c:	438a      	bics	r2, r1
 800bb0e:	601a      	str	r2, [r3, #0]
									
										HAL_UART_Receive_IT(&huart1, &ubUDR, sizeof (ubUDR));
 800bb10:	2317      	movs	r3, #23
 800bb12:	18f9      	adds	r1, r7, r3
 800bb14:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <eMBPSerialInit+0x21c>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	0018      	movs	r0, r3
 800bb1a:	f7f8 f895 	bl	8003c48 <HAL_UART_Receive_IT>

                    /* Setup handle to uart */
                    *pxSerialHdl = &xSerialHdls[UART_1_IDX];
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4a0f      	ldr	r2, [pc, #60]	; (800bb60 <eMBPSerialInit+0x218>)
 800bb22:	601a      	str	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].ubIdx = UART_1_IDX;
 800bb24:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <eMBPSerialInit+0x218>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	701a      	strb	r2, [r3, #0]
                    xSerialHdls[UART_1_IDX].xMBMHdl = xMBMHdl;
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <eMBPSerialInit+0x218>)
 800bb2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb2e:	60da      	str	r2, [r3, #12]

                    /* Everything is ok */
                    eStatus = MB_ENOERR;
 800bb30:	193b      	adds	r3, r7, r4
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                    eStatus = MB_ENORES;
                }
                break;
 800bb36:	e007      	b.n	800bb48 <eMBPSerialInit+0x200>
                    eStatus = MB_ENORES;
 800bb38:	2327      	movs	r3, #39	; 0x27
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	2204      	movs	r2, #4
 800bb3e:	701a      	strb	r2, [r3, #0]
                break;
 800bb40:	e002      	b.n	800bb48 <eMBPSerialInit+0x200>
#endif
            default:
                break;
            }
        }
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	e000      	b.n	800bb48 <eMBPSerialInit+0x200>
                break;
 800bb46:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800bb48:	f7ff fef6 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800bb4c:	2327      	movs	r3, #39	; 0x27
 800bb4e:	18fb      	adds	r3, r7, r3
 800bb50:	781b      	ldrb	r3, [r3, #0]
}
 800bb52:	0018      	movs	r0, r3
 800bb54:	46bd      	mov	sp, r7
 800bb56:	b00b      	add	sp, #44	; 0x2c
 800bb58:	bd90      	pop	{r4, r7, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	20004cb8 	.word	0x20004cb8
 800bb60:	20004ca8 	.word	0x20004ca8
 800bb64:	200001f0 	.word	0x200001f0

0800bb68 <eMBPSerialClose>:

eMBErrorCode
eMBPSerialClose( xMBPSerialHandle xSerialHdl )
{
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800bb70:	240f      	movs	r4, #15
 800bb72:	193b      	adds	r3, r7, r4
 800bb74:	2202      	movs	r2, #2
 800bb76:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800bb7c:	f7ff fed5 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d037      	beq.n	800bbf6 <eMBPSerialClose+0x8e>
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	011a      	lsls	r2, r3, #4
 800bb8c:	4b1f      	ldr	r3, [pc, #124]	; (800bc0c <eMBPSerialClose+0xa4>)
 800bb8e:	18d3      	adds	r3, r2, r3
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d12f      	bne.n	800bbf6 <eMBPSerialClose+0x8e>
    {
        switch ( pxSerialIntHdl->ubIdx )
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d128      	bne.n	800bbf0 <eMBPSerialClose+0x88>
        {
#if UART_1_ENABLED == 1
        case UART_1_IDX:
            if( ( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN ) && ( NULL == pxSerialIntHdl->pvMBMReceiveFN ) )
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d11f      	bne.n	800bbe6 <eMBPSerialClose+0x7e>
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d11b      	bne.n	800bbe6 <eMBPSerialClose+0x7e>
            {
                /* Close USART 1 */
                HAL_UART_DeInit(&huart1);
 800bbae:	4b18      	ldr	r3, [pc, #96]	; (800bc10 <eMBPSerialClose+0xa8>)
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f7f7 fefb 	bl	80039ac <HAL_UART_DeInit>
                /* Force RS485 back to receive mode */
                RS_485_UART_1_DISABLE_TX(  );
 800bbb6:	2380      	movs	r3, #128	; 0x80
 800bbb8:	0159      	lsls	r1, r3, #5
 800bbba:	2390      	movs	r3, #144	; 0x90
 800bbbc:	05db      	lsls	r3, r3, #23
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f7f6 fda9 	bl	8002718 <HAL_GPIO_WritePin>
                /* Reset handle */
                HDL_RESET( pxSerialIntHdl );
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	22ff      	movs	r2, #255	; 0xff
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	605a      	str	r2, [r3, #4]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	609a      	str	r2, [r3, #8]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	60da      	str	r2, [r3, #12]
                /* No error */
                eStatus = MB_ENOERR;
 800bbde:	193b      	adds	r3, r7, r4
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                eStatus = MB_EIO;
            }
            break;
 800bbe4:	e008      	b.n	800bbf8 <eMBPSerialClose+0x90>
                eStatus = MB_EIO;
 800bbe6:	230f      	movs	r3, #15
 800bbe8:	18fb      	adds	r3, r7, r3
 800bbea:	2205      	movs	r2, #5
 800bbec:	701a      	strb	r2, [r3, #0]
            break;
 800bbee:	e003      	b.n	800bbf8 <eMBPSerialClose+0x90>
#endif
        default:
            MBP_ASSERT( 0 );
 800bbf0:	f7ff fe88 	bl	800b904 <vMBPAssert>
            break;
 800bbf4:	e000      	b.n	800bbf8 <eMBPSerialClose+0x90>
        }
    }
 800bbf6:	46c0      	nop			; (mov r8, r8)
    MBP_EXIT_CRITICAL_SECTION(  );
 800bbf8:	f7ff fe9e 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800bbfc:	230f      	movs	r3, #15
 800bbfe:	18fb      	adds	r3, r7, r3
 800bc00:	781b      	ldrb	r3, [r3, #0]
}
 800bc02:	0018      	movs	r0, r3
 800bc04:	46bd      	mov	sp, r7
 800bc06:	b005      	add	sp, #20
 800bc08:	bd90      	pop	{r4, r7, pc}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	20004ca8 	.word	0x20004ca8
 800bc10:	200001f0 	.word	0x200001f0

0800bc14 <eMBPSerialTxEnable>:

eMBErrorCode
eMBPSerialTxEnable( xMBPSerialHandle xSerialHdl, pbMBPSerialTransmitterEmptyCB pbMBMTransmitterEmptyFN )
{
 800bc14:	b5b0      	push	{r4, r5, r7, lr}
 800bc16:	b0c4      	sub	sp, #272	; 0x110
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800bc1e:	2310      	movs	r3, #16
 800bc20:	33ff      	adds	r3, #255	; 0xff
 800bc22:	18fb      	adds	r3, r7, r3
 800bc24:	2202      	movs	r2, #2
 800bc26:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2284      	movs	r2, #132	; 0x84
 800bc2c:	0052      	lsls	r2, r2, #1
 800bc2e:	18ba      	adds	r2, r7, r2
 800bc30:	6013      	str	r3, [r2, #0]
	
		/* Next lines added for copying frame packet to buffer */
		MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 800bc32:	4b59      	ldr	r3, [pc, #356]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2bff      	cmp	r3, #255	; 0xff
 800bc38:	d101      	bne.n	800bc3e <eMBPSerialTxEnable+0x2a>
 800bc3a:	f7ff fe63 	bl	800b904 <vMBPAssert>
    BOOL      bHasMoreData = TRUE;      
 800bc3e:	2387      	movs	r3, #135	; 0x87
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	18fb      	adds	r3, r7, r3
 800bc44:	2201      	movs	r2, #1
 800bc46:	701a      	strb	r2, [r3, #0]
    UBYTE     ubTxByte[MBM_SER_PDU_SIZE_MAX]={0};
 800bc48:	4b54      	ldr	r3, [pc, #336]	; (800bd9c <eMBPSerialTxEnable+0x188>)
 800bc4a:	2288      	movs	r2, #136	; 0x88
 800bc4c:	0052      	lsls	r2, r2, #1
 800bc4e:	189b      	adds	r3, r3, r2
 800bc50:	19db      	adds	r3, r3, r7
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	3304      	adds	r3, #4
 800bc58:	22fc      	movs	r2, #252	; 0xfc
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f000 fb54 	bl	800c30a <memset>
		UBYTE 		FrameCnt=0;
 800bc62:	230e      	movs	r3, #14
 800bc64:	33ff      	adds	r3, #255	; 0xff
 800bc66:	18fb      	adds	r3, r7, r3
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]

    MBP_ENTER_CRITICAL_SECTION(  );
 800bc6c:	f7ff fe5d 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800bc70:	2184      	movs	r1, #132	; 0x84
 800bc72:	0049      	lsls	r1, r1, #1
 800bc74:	187b      	adds	r3, r7, r1
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d100      	bne.n	800bc7e <eMBPSerialTxEnable+0x6a>
 800bc7c:	e081      	b.n	800bd82 <eMBPSerialTxEnable+0x16e>
 800bc7e:	187b      	adds	r3, r7, r1
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	011a      	lsls	r2, r3, #4
 800bc86:	4b44      	ldr	r3, [pc, #272]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bc88:	18d3      	adds	r3, r2, r3
 800bc8a:	187a      	adds	r2, r7, r1
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d000      	beq.n	800bc94 <eMBPSerialTxEnable+0x80>
 800bc92:	e076      	b.n	800bd82 <eMBPSerialTxEnable+0x16e>
    {
        eStatus = MB_ENOERR;
 800bc94:	2310      	movs	r3, #16
 800bc96:	33ff      	adds	r3, #255	; 0xff
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]
        if( NULL != pbMBMTransmitterEmptyFN )
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d04f      	beq.n	800bd44 <eMBPSerialTxEnable+0x130>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pbMBMTransmitterEmptyFN );
 800bca4:	187b      	adds	r3, r7, r1
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <eMBPSerialTxEnable+0x9e>
 800bcae:	f7ff fe29 	bl	800b904 <vMBPAssert>
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = pbMBMTransmitterEmptyFN;
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	2184      	movs	r1, #132	; 0x84
 800bcb6:	0049      	lsls	r1, r1, #1
 800bcb8:	187b      	adds	r3, r7, r1
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	605a      	str	r2, [r3, #4]
            switch ( pxSerialIntHdl->ubIdx )
 800bcbe:	187b      	adds	r3, r7, r1
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d13a      	bne.n	800bd3e <eMBPSerialTxEnable+0x12a>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* RS485 transmit mode */
                RS_485_UART_1_ENABLE_TX(  );
 800bcc8:	2380      	movs	r3, #128	; 0x80
 800bcca:	0159      	lsls	r1, r3, #5
 800bccc:	2390      	movs	r3, #144	; 0x90
 800bcce:	05db      	lsls	r3, r3, #23
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	f7f6 fd20 	bl	8002718 <HAL_GPIO_WritePin>
                /* Copy the frame to buffer */
								if( NULL != xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN )
 800bcd8:	4b2f      	ldr	r3, [pc, #188]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d020      	beq.n	800bd22 <eMBPSerialTxEnable+0x10e>
									{
										while (bHasMoreData){
 800bce0:	e016      	b.n	800bd10 <eMBPSerialTxEnable+0xfc>
											bHasMoreData = xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN( xSerialHdls[UART_1_IDX].xMBMHdl, &ubTxByte[FrameCnt] );
 800bce2:	4b2d      	ldr	r3, [pc, #180]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	4b2c      	ldr	r3, [pc, #176]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bce8:	68d8      	ldr	r0, [r3, #12]
 800bcea:	250e      	movs	r5, #14
 800bcec:	35ff      	adds	r5, #255	; 0xff
 800bcee:	197b      	adds	r3, r7, r5
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2108      	movs	r1, #8
 800bcf4:	1879      	adds	r1, r7, r1
 800bcf6:	18cb      	adds	r3, r1, r3
 800bcf8:	2187      	movs	r1, #135	; 0x87
 800bcfa:	0049      	lsls	r1, r1, #1
 800bcfc:	187c      	adds	r4, r7, r1
 800bcfe:	0019      	movs	r1, r3
 800bd00:	4790      	blx	r2
 800bd02:	0003      	movs	r3, r0
 800bd04:	7023      	strb	r3, [r4, #0]
											FrameCnt++;
 800bd06:	197b      	adds	r3, r7, r5
 800bd08:	781a      	ldrb	r2, [r3, #0]
 800bd0a:	197b      	adds	r3, r7, r5
 800bd0c:	3201      	adds	r2, #1
 800bd0e:	701a      	strb	r2, [r3, #0]
										while (bHasMoreData){
 800bd10:	2387      	movs	r3, #135	; 0x87
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	18fb      	adds	r3, r7, r3
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e2      	bne.n	800bce2 <eMBPSerialTxEnable+0xce>
										}
										xSerialHdls[UART_1_IDX].pbMBMTransmitterEmptyFN = NULL;
 800bd1c:	4b1e      	ldr	r3, [pc, #120]	; (800bd98 <eMBPSerialTxEnable+0x184>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	605a      	str	r2, [r3, #4]
									}
								/* Send the buffer once */
								HAL_UART_Transmit_IT( &huart1, ubTxByte, FrameCnt-1 );
 800bd22:	230e      	movs	r3, #14
 800bd24:	33ff      	adds	r3, #255	; 0xff
 800bd26:	18fb      	adds	r3, r7, r3
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	2308      	movs	r3, #8
 800bd32:	18f9      	adds	r1, r7, r3
 800bd34:	4b1a      	ldr	r3, [pc, #104]	; (800bda0 <eMBPSerialTxEnable+0x18c>)
 800bd36:	0018      	movs	r0, r3
 800bd38:	f7f7 ff16 	bl	8003b68 <HAL_UART_Transmit_IT>
                break;
 800bd3c:	e022      	b.n	800bd84 <eMBPSerialTxEnable+0x170>
#endif
            default:
                MBP_ASSERT( 0 );
 800bd3e:	f7ff fde1 	bl	800b904 <vMBPAssert>
 800bd42:	e01f      	b.n	800bd84 <eMBPSerialTxEnable+0x170>
            }

        }
        else
        {
            pxSerialIntHdl->pbMBMTransmitterEmptyFN = NULL;
 800bd44:	2184      	movs	r1, #132	; 0x84
 800bd46:	0049      	lsls	r1, r1, #1
 800bd48:	187b      	adds	r3, r7, r1
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	605a      	str	r2, [r3, #4]
            /* The transmitter is disable when the last frame has been sent.
             * This is necessary for RS485 with a half-duplex bus.
             */
            switch ( pxSerialIntHdl->ubIdx )
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d110      	bne.n	800bd7c <eMBPSerialTxEnable+0x168>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Disable transmit register empty interrupt */
								__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 800bd5a:	4b11      	ldr	r3, [pc, #68]	; (800bda0 <eMBPSerialTxEnable+0x18c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4b0f      	ldr	r3, [pc, #60]	; (800bda0 <eMBPSerialTxEnable+0x18c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2180      	movs	r1, #128	; 0x80
 800bd66:	438a      	bics	r2, r1
 800bd68:	601a      	str	r2, [r3, #0]
                /* Enable transmit complete interrupt */
								__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800bd6a:	4b0d      	ldr	r3, [pc, #52]	; (800bda0 <eMBPSerialTxEnable+0x18c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <eMBPSerialTxEnable+0x18c>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2140      	movs	r1, #64	; 0x40
 800bd76:	430a      	orrs	r2, r1
 800bd78:	601a      	str	r2, [r3, #0]
                break;
 800bd7a:	e003      	b.n	800bd84 <eMBPSerialTxEnable+0x170>
#endif
            default:
                MBP_ASSERT( 0 );
 800bd7c:	f7ff fdc2 	bl	800b904 <vMBPAssert>
 800bd80:	e000      	b.n	800bd84 <eMBPSerialTxEnable+0x170>
            }
        }
 800bd82:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800bd84:	f7ff fdd8 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800bd88:	2310      	movs	r3, #16
 800bd8a:	33ff      	adds	r3, #255	; 0xff
 800bd8c:	18fb      	adds	r3, r7, r3
 800bd8e:	781b      	ldrb	r3, [r3, #0]
}
 800bd90:	0018      	movs	r0, r3
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b044      	add	sp, #272	; 0x110
 800bd96:	bdb0      	pop	{r4, r5, r7, pc}
 800bd98:	20004ca8 	.word	0x20004ca8
 800bd9c:	fffffef8 	.word	0xfffffef8
 800bda0:	200001f0 	.word	0x200001f0

0800bda4 <eMBPSerialRxEnable>:

eMBErrorCode
eMBPSerialRxEnable( xMBPSerialHandle xSerialHdl, pvMBPSerialReceiverCB pvMBMReceiveFN )
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
    eMBErrorCode    eStatus = MB_EINVAL;
 800bdae:	240f      	movs	r4, #15
 800bdb0:	193b      	adds	r3, r7, r4
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	701a      	strb	r2, [r3, #0]
    xSerialHandle  *pxSerialIntHdl = xSerialHdl;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800bdba:	f7ff fdb6 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxSerialIntHdl, xSerialHdls ) )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d030      	beq.n	800be26 <eMBPSerialRxEnable+0x82>
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	011a      	lsls	r2, r3, #4
 800bdca:	4b1d      	ldr	r3, [pc, #116]	; (800be40 <eMBPSerialRxEnable+0x9c>)
 800bdcc:	18d3      	adds	r3, r2, r3
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d128      	bne.n	800be26 <eMBPSerialRxEnable+0x82>
    {
        eStatus = MB_ENOERR;
 800bdd4:	193b      	adds	r3, r7, r4
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
        if( NULL != pvMBMReceiveFN )
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d018      	beq.n	800be12 <eMBPSerialRxEnable+0x6e>
        {
            MBP_ASSERT( NULL == pxSerialIntHdl->pvMBMReceiveFN );
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <eMBPSerialRxEnable+0x48>
 800bde8:	f7ff fd8c 	bl	800b904 <vMBPAssert>
            pxSerialIntHdl->pvMBMReceiveFN = pvMBMReceiveFN;
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d108      	bne.n	800be0c <eMBPSerialRxEnable+0x68>
            {
#if UART_1_ENABLED == 1
            case UART_1_IDX:
                /* Enable USART 1 receive interrupt */
                __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800bdfa:	4b12      	ldr	r3, [pc, #72]	; (800be44 <eMBPSerialRxEnable+0xa0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	4b10      	ldr	r3, [pc, #64]	; (800be44 <eMBPSerialRxEnable+0xa0>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2120      	movs	r1, #32
 800be06:	430a      	orrs	r2, r1
 800be08:	601a      	str	r2, [r3, #0]
                break;
 800be0a:	e00f      	b.n	800be2c <eMBPSerialRxEnable+0x88>
#endif
            default:
                MBP_ASSERT( 0 );
 800be0c:	f7ff fd7a 	bl	800b904 <vMBPAssert>
 800be10:	e00c      	b.n	800be2c <eMBPSerialRxEnable+0x88>
            }
        }
        else
        {
            pxSerialIntHdl->pvMBMReceiveFN = NULL;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2200      	movs	r2, #0
 800be16:	609a      	str	r2, [r3, #8]
            switch ( pxSerialIntHdl->ubIdx )
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <eMBPSerialRxEnable+0x86>
                //__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
								
                break;
#endif
            default:
                MBP_ASSERT( 0 );
 800be20:	f7ff fd70 	bl	800b904 <vMBPAssert>
 800be24:	e002      	b.n	800be2c <eMBPSerialRxEnable+0x88>
            }
        }
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	e000      	b.n	800be2c <eMBPSerialRxEnable+0x88>
                break;
 800be2a:	46c0      	nop			; (mov r8, r8)
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800be2c:	f7ff fd84 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800be30:	230f      	movs	r3, #15
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	781b      	ldrb	r3, [r3, #0]
}
 800be36:	0018      	movs	r0, r3
 800be38:	46bd      	mov	sp, r7
 800be3a:	b005      	add	sp, #20
 800be3c:	bd90      	pop	{r4, r7, pc}
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	20004ca8 	.word	0x20004ca8
 800be44:	200001f0 	.word	0x200001f0

0800be48 <prvvMBPUSART1_RXNE_ISR>:
}

/* USART 1 Receive interrupt */
void
prvvMBPUSART1_RXNE_ISR( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
    UBYTE           ubUDR;
    FlagStatus      fs;

    /* Read current flagstatus */
    fs = RESET;
 800be4e:	1dfb      	adds	r3, r7, #7
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE) )
 800be54:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <prvvMBPUSART1_RXNE_ISR+0xc0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	2208      	movs	r2, #8
 800be5c:	4013      	ands	r3, r2
 800be5e:	2b08      	cmp	r3, #8
 800be60:	d105      	bne.n	800be6e <prvvMBPUSART1_RXNE_ISR+0x26>
    {
        fs |= 1;
 800be62:	1dfb      	adds	r3, r7, #7
 800be64:	1dfa      	adds	r2, r7, #7
 800be66:	7812      	ldrb	r2, [r2, #0]
 800be68:	2101      	movs	r1, #1
 800be6a:	430a      	orrs	r2, r1
 800be6c:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_NE) )
 800be6e:	4b26      	ldr	r3, [pc, #152]	; (800bf08 <prvvMBPUSART1_RXNE_ISR+0xc0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69db      	ldr	r3, [r3, #28]
 800be74:	2204      	movs	r2, #4
 800be76:	4013      	ands	r3, r2
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d105      	bne.n	800be88 <prvvMBPUSART1_RXNE_ISR+0x40>
    {
        fs |= 2;
 800be7c:	1dfb      	adds	r3, r7, #7
 800be7e:	1dfa      	adds	r2, r7, #7
 800be80:	7812      	ldrb	r2, [r2, #0]
 800be82:	2102      	movs	r1, #2
 800be84:	430a      	orrs	r2, r1
 800be86:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE) )
 800be88:	4b1f      	ldr	r3, [pc, #124]	; (800bf08 <prvvMBPUSART1_RXNE_ISR+0xc0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	2202      	movs	r2, #2
 800be90:	4013      	ands	r3, r2
 800be92:	2b02      	cmp	r3, #2
 800be94:	d105      	bne.n	800bea2 <prvvMBPUSART1_RXNE_ISR+0x5a>
    {
        fs |= 4;
 800be96:	1dfb      	adds	r3, r7, #7
 800be98:	1dfa      	adds	r2, r7, #7
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	2104      	movs	r1, #4
 800be9e:	430a      	orrs	r2, r1
 800bea0:	701a      	strb	r2, [r3, #0]
    }
    if( __HAL_UART_GET_FLAG(&huart1, UART_FLAG_PE) )
 800bea2:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <prvvMBPUSART1_RXNE_ISR+0xc0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	2201      	movs	r2, #1
 800beaa:	4013      	ands	r3, r2
 800beac:	2b01      	cmp	r3, #1
 800beae:	d105      	bne.n	800bebc <prvvMBPUSART1_RXNE_ISR+0x74>
    {
        fs |= 8;
 800beb0:	1dfb      	adds	r3, r7, #7
 800beb2:	1dfa      	adds	r2, r7, #7
 800beb4:	7812      	ldrb	r2, [r2, #0]
 800beb6:	2108      	movs	r1, #8
 800beb8:	430a      	orrs	r2, r1
 800beba:	701a      	strb	r2, [r3, #0]
    }

    /* Receive byte from USART1 */
		
		ubUDR = (0xFF & (USART1->RDR));
 800bebc:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <prvvMBPUSART1_RXNE_ISR+0xc4>)
 800bebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	1dbb      	adds	r3, r7, #6
 800bec6:	701a      	strb	r2, [r3, #0]

    /* Send data to modbus functions
     * if no error */
    if( fs == RESET )
 800bec8:	1dfb      	adds	r3, r7, #7
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d111      	bne.n	800bef4 <prvvMBPUSART1_RXNE_ISR+0xac>
    {
        /* Pass received data on to modbuslib */
        MBP_ASSERT( IDX_INVALID != xSerialHdls[UART_1_IDX].ubIdx );
 800bed0:	4b0f      	ldr	r3, [pc, #60]	; (800bf10 <prvvMBPUSART1_RXNE_ISR+0xc8>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2bff      	cmp	r3, #255	; 0xff
 800bed6:	d101      	bne.n	800bedc <prvvMBPUSART1_RXNE_ISR+0x94>
 800bed8:	f7ff fd14 	bl	800b904 <vMBPAssert>
        if( NULL != xSerialHdls[UART_1_IDX].pvMBMReceiveFN )
 800bedc:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <prvvMBPUSART1_RXNE_ISR+0xc8>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <prvvMBPUSART1_RXNE_ISR+0xac>
        {
            xSerialHdls[UART_1_IDX].pvMBMReceiveFN( xSerialHdls[UART_1_IDX].xMBMHdl, ubUDR );
 800bee4:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <prvvMBPUSART1_RXNE_ISR+0xc8>)
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <prvvMBPUSART1_RXNE_ISR+0xc8>)
 800beea:	68d8      	ldr	r0, [r3, #12]
 800beec:	1dbb      	adds	r3, r7, #6
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	0019      	movs	r1, r3
 800bef2:	4790      	blx	r2
        }
    }
		HAL_UART_Receive_IT(&huart1, &ubUDR, sizeof (ubUDR));
 800bef4:	1db9      	adds	r1, r7, #6
 800bef6:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <prvvMBPUSART1_RXNE_ISR+0xc0>)
 800bef8:	2201      	movs	r2, #1
 800befa:	0018      	movs	r0, r3
 800befc:	f7f7 fea4 	bl	8003c48 <HAL_UART_Receive_IT>
		//__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
		
}
 800bf00:	46c0      	nop			; (mov r8, r8)
 800bf02:	46bd      	mov	sp, r7
 800bf04:	b002      	add	sp, #8
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	200001f0 	.word	0x200001f0
 800bf0c:	40013800 	.word	0x40013800
 800bf10:	20004ca8 	.word	0x20004ca8

0800bf14 <eMBPTimerInit>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBPTimerInit( xMBPTimerHandle * xTimerHdl, USHORT usTimeOut1ms,
               pbMBPTimerExpiredCB pbMBPTimerExpiredFN, xMBHandle xHdl )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af02      	add	r7, sp, #8
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	607a      	str	r2, [r7, #4]
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	230a      	movs	r3, #10
 800bf22:	18fb      	adds	r3, r7, r3
 800bf24:	1c0a      	adds	r2, r1, #0
 800bf26:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_EPORTERR;
 800bf28:	2317      	movs	r3, #23
 800bf2a:	18fb      	adds	r3, r7, r3
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	701a      	strb	r2, [r3, #0]
    UBYTE           ubIdx;

    MBP_ENTER_CRITICAL_SECTION(  );
 800bf30:	f7ff fcfb 	bl	800b92a <vMBPEnterCritical>
    if( ( NULL != xTimerHdl ) && ( NULL != pbMBPTimerExpiredFN ) && ( MB_HDL_INVALID != xHdl ) )
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d100      	bne.n	800bf3c <eMBPTimerInit+0x28>
 800bf3a:	e0ac      	b.n	800c096 <eMBPTimerInit+0x182>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d100      	bne.n	800bf44 <eMBPTimerInit+0x30>
 800bf42:	e0a8      	b.n	800c096 <eMBPTimerInit+0x182>
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d100      	bne.n	800bf4c <eMBPTimerInit+0x38>
 800bf4a:	e0a4      	b.n	800c096 <eMBPTimerInit+0x182>
    {
        if( !bIsInitalized )
 800bf4c:	4b58      	ldr	r3, [pc, #352]	; (800c0b0 <eMBPTimerInit+0x19c>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d145      	bne.n	800bfe0 <eMBPTimerInit+0xcc>
        {
            /* Initialize a hardware timer for 1 millisecond. */
						xTimer = xTimerCreate( "MB1msTimer", pdMS_TO_TICKS(1), pdTRUE, ( void * ) TIMERID_MB_TIMER, HandleTimer );
 800bf54:	4857      	ldr	r0, [pc, #348]	; (800c0b4 <eMBPTimerInit+0x1a0>)
 800bf56:	4b58      	ldr	r3, [pc, #352]	; (800c0b8 <eMBPTimerInit+0x1a4>)
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	23ff      	movs	r3, #255	; 0xff
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	2101      	movs	r1, #1
 800bf60:	f7fb fcee 	bl	8007940 <xTimerCreate>
 800bf64:	0002      	movs	r2, r0
 800bf66:	4b55      	ldr	r3, [pc, #340]	; (800c0bc <eMBPTimerInit+0x1a8>)
 800bf68:	601a      	str	r2, [r3, #0]
					
					for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800bf6a:	2316      	movs	r3, #22
 800bf6c:	18fb      	adds	r3, r7, r3
 800bf6e:	2200      	movs	r2, #0
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	e02d      	b.n	800bfd0 <eMBPTimerInit+0xbc>
            {
                RESET_HDL( &arxTimerHdls[ubIdx] );
 800bf74:	2016      	movs	r0, #22
 800bf76:	183b      	adds	r3, r7, r0
 800bf78:	781a      	ldrb	r2, [r3, #0]
 800bf7a:	4b51      	ldr	r3, [pc, #324]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bf7c:	0112      	lsls	r2, r2, #4
 800bf7e:	21ff      	movs	r1, #255	; 0xff
 800bf80:	54d1      	strb	r1, [r2, r3]
 800bf82:	0001      	movs	r1, r0
 800bf84:	187b      	adds	r3, r7, r1
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	4a4d      	ldr	r2, [pc, #308]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	18d3      	adds	r3, r2, r3
 800bf8e:	3302      	adds	r3, #2
 800bf90:	2200      	movs	r2, #0
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4a49      	ldr	r2, [pc, #292]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bf9a:	011b      	lsls	r3, r3, #4
 800bf9c:	18d3      	adds	r3, r2, r3
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	4252      	negs	r2, r2
 800bfa4:	801a      	strh	r2, [r3, #0]
 800bfa6:	187b      	adds	r3, r7, r1
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	4a45      	ldr	r2, [pc, #276]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	18d3      	adds	r3, r2, r3
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	187b      	adds	r3, r7, r1
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	4a41      	ldr	r2, [pc, #260]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bfbc:	011b      	lsls	r3, r3, #4
 800bfbe:	18d3      	adds	r3, r2, r3
 800bfc0:	330c      	adds	r3, #12
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
					for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800bfc6:	187b      	adds	r3, r7, r1
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	187b      	adds	r3, r7, r1
 800bfcc:	3201      	adds	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	2316      	movs	r3, #22
 800bfd2:	18fb      	adds	r3, r7, r3
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d9cc      	bls.n	800bf74 <eMBPTimerInit+0x60>
            }

            bIsInitalized = TRUE;
 800bfda:	4b35      	ldr	r3, [pc, #212]	; (800c0b0 <eMBPTimerInit+0x19c>)
 800bfdc:	2201      	movs	r2, #1
 800bfde:	701a      	strb	r2, [r3, #0]

        }
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800bfe0:	2316      	movs	r3, #22
 800bfe2:	18fb      	adds	r3, r7, r3
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e00c      	b.n	800c004 <eMBPTimerInit+0xf0>
        {
            if( IDX_INVALID == arxTimerHdls[ubIdx].ubIdx )
 800bfea:	2116      	movs	r1, #22
 800bfec:	187b      	adds	r3, r7, r1
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	4b33      	ldr	r3, [pc, #204]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800bff2:	0112      	lsls	r2, r2, #4
 800bff4:	5cd3      	ldrb	r3, [r2, r3]
 800bff6:	2bff      	cmp	r3, #255	; 0xff
 800bff8:	d00a      	beq.n	800c010 <eMBPTimerInit+0xfc>
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800bffa:	187b      	adds	r3, r7, r1
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	187b      	adds	r3, r7, r1
 800c000:	3201      	adds	r2, #1
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	2316      	movs	r3, #22
 800c006:	18fb      	adds	r3, r7, r3
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d9ed      	bls.n	800bfea <eMBPTimerInit+0xd6>
 800c00e:	e000      	b.n	800c012 <eMBPTimerInit+0xfe>
            {
                break;
 800c010:	46c0      	nop			; (mov r8, r8)
            }
        }
        if( MAX_TIMER_HDLS != ubIdx )
 800c012:	2116      	movs	r1, #22
 800c014:	187b      	adds	r3, r7, r1
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b05      	cmp	r3, #5
 800c01a:	d037      	beq.n	800c08c <eMBPTimerInit+0x178>
        {
            arxTimerHdls[ubIdx].ubIdx = ubIdx;
 800c01c:	187b      	adds	r3, r7, r1
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c022:	0112      	lsls	r2, r2, #4
 800c024:	0008      	movs	r0, r1
 800c026:	1879      	adds	r1, r7, r1
 800c028:	7809      	ldrb	r1, [r1, #0]
 800c02a:	54d1      	strb	r1, [r2, r3]
            arxTimerHdls[ubIdx].usNTimeOutMS = usTimeOut1ms;
 800c02c:	0001      	movs	r1, r0
 800c02e:	187b      	adds	r3, r7, r1
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	4a23      	ldr	r2, [pc, #140]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	18d3      	adds	r3, r2, r3
 800c038:	3302      	adds	r3, #2
 800c03a:	220a      	movs	r2, #10
 800c03c:	18ba      	adds	r2, r7, r2
 800c03e:	8812      	ldrh	r2, [r2, #0]
 800c040:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800c042:	187b      	adds	r3, r7, r1
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	4a1e      	ldr	r2, [pc, #120]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	18d3      	adds	r3, r2, r3
 800c04c:	3304      	adds	r3, #4
 800c04e:	2201      	movs	r2, #1
 800c050:	4252      	negs	r2, r2
 800c052:	801a      	strh	r2, [r3, #0]
            arxTimerHdls[ubIdx].xMBMHdl = xHdl;
 800c054:	187b      	adds	r3, r7, r1
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	18d3      	adds	r3, r2, r3
 800c05e:	3308      	adds	r3, #8
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	601a      	str	r2, [r3, #0]
            arxTimerHdls[ubIdx].pbMBPTimerExpiredFN = pbMBPTimerExpiredFN;
 800c064:	187b      	adds	r3, r7, r1
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	4a15      	ldr	r2, [pc, #84]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	18d3      	adds	r3, r2, r3
 800c06e:	330c      	adds	r3, #12
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	601a      	str	r2, [r3, #0]

            *xTimerHdl = &arxTimerHdls[ubIdx];
 800c074:	187b      	adds	r3, r7, r1
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	011a      	lsls	r2, r3, #4
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <eMBPTimerInit+0x1ac>)
 800c07c:	18d2      	adds	r2, r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	601a      	str	r2, [r3, #0]
            eStatus = MB_ENOERR;
 800c082:	2317      	movs	r3, #23
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	2200      	movs	r2, #0
 800c088:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 800c08a:	e008      	b.n	800c09e <eMBPTimerInit+0x18a>
        }
        else
        {
            eStatus = MB_ENORES;
 800c08c:	2317      	movs	r3, #23
 800c08e:	18fb      	adds	r3, r7, r3
 800c090:	2204      	movs	r2, #4
 800c092:	701a      	strb	r2, [r3, #0]
        if( MAX_TIMER_HDLS != ubIdx )
 800c094:	e003      	b.n	800c09e <eMBPTimerInit+0x18a>
        }
    }
    else
    {
        eStatus = MB_EINVAL;
 800c096:	2317      	movs	r3, #23
 800c098:	18fb      	adds	r3, r7, r3
 800c09a:	2202      	movs	r2, #2
 800c09c:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c09e:	f7ff fc4b 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800c0a2:	2317      	movs	r3, #23
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
}
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b006      	add	sp, #24
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20004d0c 	.word	0x20004d0c
 800c0b4:	0800c518 	.word	0x0800c518
 800c0b8:	0800c1d9 	.word	0x0800c1d9
 800c0bc:	20004d10 	.word	0x20004d10
 800c0c0:	20004cbc 	.word	0x20004cbc

0800c0c4 <vMBPTimerClose>:

void
vMBPTimerClose( xMBPTimerHandle xTimerHdl )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	60fb      	str	r3, [r7, #12]

    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d017      	beq.n	800c106 <vMBPTimerClose+0x42>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	011a      	lsls	r2, r3, #4
 800c0dc:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <vMBPTimerClose+0x4c>)
 800c0de:	18d3      	adds	r3, r2, r3
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d10f      	bne.n	800c106 <vMBPTimerClose+0x42>
    {
        RESET_HDL( pxTimerIntHdl );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	22ff      	movs	r2, #255	; 0xff
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	805a      	strh	r2, [r3, #2]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	4252      	negs	r2, r2
 800c0f8:	809a      	strh	r2, [r3, #4]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	609a      	str	r2, [r3, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	60da      	str	r2, [r3, #12]
    }
}
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	46bd      	mov	sp, r7
 800c10a:	b004      	add	sp, #16
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	20004cbc 	.word	0x20004cbc

0800c114 <eMBPTimerStart>:
    return eStatus;
}

eMBErrorCode
eMBPTimerStart( xMBPTimerHandle xTimerHdl )
{
 800c114:	b5b0      	push	{r4, r5, r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af02      	add	r7, sp, #8
 800c11a:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c11c:	250f      	movs	r5, #15
 800c11e:	197b      	adds	r3, r7, r5
 800c120:	2202      	movs	r2, #2
 800c122:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c128:	f7ff fbff 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01b      	beq.n	800c16a <eMBPTimerStart+0x56>
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	011a      	lsls	r2, r3, #4
 800c138:	4b10      	ldr	r3, [pc, #64]	; (800c17c <eMBPTimerStart+0x68>)
 800c13a:	18d3      	adds	r3, r2, r3
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d113      	bne.n	800c16a <eMBPTimerStart+0x56>
    {
				xTimerStart( xTimer, portMAX_DELAY );
 800c142:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <eMBPTimerStart+0x6c>)
 800c144:	681c      	ldr	r4, [r3, #0]
 800c146:	f7fa ff9d 	bl	8007084 <xTaskGetTickCount>
 800c14a:	0002      	movs	r2, r0
 800c14c:	2301      	movs	r3, #1
 800c14e:	425b      	negs	r3, r3
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	2101      	movs	r1, #1
 800c156:	0020      	movs	r0, r4
 800c158:	f7fb fc3a 	bl	80079d0 <xTimerGenericCommand>
        pxTimerIntHdl->usNTimeLeft = pxTimerIntHdl->usNTimeOutMS;
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	885a      	ldrh	r2, [r3, #2]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 800c164:	197b      	adds	r3, r7, r5
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c16a:	f7ff fbe5 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800c16e:	230f      	movs	r3, #15
 800c170:	18fb      	adds	r3, r7, r3
 800c172:	781b      	ldrb	r3, [r3, #0]
}
 800c174:	0018      	movs	r0, r3
 800c176:	46bd      	mov	sp, r7
 800c178:	b004      	add	sp, #16
 800c17a:	bdb0      	pop	{r4, r5, r7, pc}
 800c17c:	20004cbc 	.word	0x20004cbc
 800c180:	20004d10 	.word	0x20004d10

0800c184 <eMBPTimerStop>:

eMBErrorCode
eMBPTimerStop( xMBPTimerHandle xTimerHdl )
{
 800c184:	b590      	push	{r4, r7, lr}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
    eMBErrorCode    eStatus = MB_EINVAL;
 800c18c:	240f      	movs	r4, #15
 800c18e:	193b      	adds	r3, r7, r4
 800c190:	2202      	movs	r2, #2
 800c192:	701a      	strb	r2, [r3, #0]
    xTimerInternalHandle *pxTimerIntHdl = xTimerHdl;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	60bb      	str	r3, [r7, #8]

    MBP_ENTER_CRITICAL_SECTION(  );
 800c198:	f7ff fbc7 	bl	800b92a <vMBPEnterCritical>
    if( MB_IS_VALID_HDL( pxTimerIntHdl, arxTimerHdls ) )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00e      	beq.n	800c1c0 <eMBPTimerStop+0x3c>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	011a      	lsls	r2, r3, #4
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	; (800c1d4 <eMBPTimerStop+0x50>)
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d106      	bne.n	800c1c0 <eMBPTimerStop+0x3c>
    {
        pxTimerIntHdl->usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	4252      	negs	r2, r2
 800c1b8:	809a      	strh	r2, [r3, #4]
        eStatus = MB_ENOERR;
 800c1ba:	193b      	adds	r3, r7, r4
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
    }
    MBP_EXIT_CRITICAL_SECTION(  );
 800c1c0:	f7ff fbba 	bl	800b938 <vMBPExitCritical>
    return eStatus;
 800c1c4:	230f      	movs	r3, #15
 800c1c6:	18fb      	adds	r3, r7, r3
 800c1c8:	781b      	ldrb	r3, [r3, #0]
}
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	b005      	add	sp, #20
 800c1d0:	bd90      	pop	{r4, r7, pc}
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	20004cbc 	.word	0x20004cbc

0800c1d8 <HandleTimer>:

/*timer callback function
*/
static void HandleTimer(TimerHandle_t xTimer)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
		UBYTE           ubIdx;
	uint32_t Timer_ID = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60bb      	str	r3, [r7, #8]

#if MBP_DEBUG_TIMER_PERFORMANCE == 1
    STATIC BOOL     bLastState = FALSE;
#endif
  /* Get Timer ID */
  Timer_ID = ( uint32_t ) pvTimerGetTimerID( xTimer );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f7fb fe62 	bl	8007eb0 <pvTimerGetTimerID>
 800c1ec:	0003      	movs	r3, r0
 800c1ee:	60bb      	str	r3, [r7, #8]
  if (TIMERID_MB_TIMER == Timer_ID)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2bff      	cmp	r3, #255	; 0xff
 800c1f4:	d152      	bne.n	800c29c <HandleTimer+0xc4>
  {
#if MBP_DEBUG_TIMER_PERFORMANCE == 1
        vMBPSetDebugPin( MBP_DEBUGPIN_0, bLastState );
        bLastState = !bLastState;
#endif
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800c1f6:	230f      	movs	r3, #15
 800c1f8:	18fb      	adds	r3, r7, r3
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e048      	b.n	800c292 <HandleTimer+0xba>
        {
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800c200:	200f      	movs	r0, #15
 800c202:	183b      	adds	r3, r7, r0
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	4b27      	ldr	r3, [pc, #156]	; (800c2a4 <HandleTimer+0xcc>)
 800c208:	0112      	lsls	r2, r2, #4
 800c20a:	5cd3      	ldrb	r3, [r2, r3]
 800c20c:	2bff      	cmp	r3, #255	; 0xff
 800c20e:	d03a      	beq.n	800c286 <HandleTimer+0xae>
                ( TIMER_TIMEOUT_INVALID != arxTimerHdls[ubIdx].usNTimeLeft ) )
 800c210:	183b      	adds	r3, r7, r0
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	4a23      	ldr	r2, [pc, #140]	; (800c2a4 <HandleTimer+0xcc>)
 800c216:	011b      	lsls	r3, r3, #4
 800c218:	18d3      	adds	r3, r2, r3
 800c21a:	3304      	adds	r3, #4
 800c21c:	881b      	ldrh	r3, [r3, #0]
            if( ( IDX_INVALID != arxTimerHdls[ubIdx].ubIdx ) &&
 800c21e:	4a22      	ldr	r2, [pc, #136]	; (800c2a8 <HandleTimer+0xd0>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d030      	beq.n	800c286 <HandleTimer+0xae>
            {
                arxTimerHdls[ubIdx].usNTimeLeft--;
 800c224:	183b      	adds	r3, r7, r0
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	491e      	ldr	r1, [pc, #120]	; (800c2a4 <HandleTimer+0xcc>)
 800c22a:	011a      	lsls	r2, r3, #4
 800c22c:	188a      	adds	r2, r1, r2
 800c22e:	3204      	adds	r2, #4
 800c230:	8812      	ldrh	r2, [r2, #0]
 800c232:	3a01      	subs	r2, #1
 800c234:	b291      	uxth	r1, r2
 800c236:	4a1b      	ldr	r2, [pc, #108]	; (800c2a4 <HandleTimer+0xcc>)
 800c238:	011b      	lsls	r3, r3, #4
 800c23a:	18d3      	adds	r3, r2, r3
 800c23c:	3304      	adds	r3, #4
 800c23e:	1c0a      	adds	r2, r1, #0
 800c240:	801a      	strh	r2, [r3, #0]
                if( 0 == arxTimerHdls[ubIdx].usNTimeLeft )
 800c242:	183b      	adds	r3, r7, r0
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	4a17      	ldr	r2, [pc, #92]	; (800c2a4 <HandleTimer+0xcc>)
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	18d3      	adds	r3, r2, r3
 800c24c:	3304      	adds	r3, #4
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d118      	bne.n	800c286 <HandleTimer+0xae>
                {
                    arxTimerHdls[ubIdx].usNTimeLeft = TIMER_TIMEOUT_INVALID;
 800c254:	183b      	adds	r3, r7, r0
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	4a12      	ldr	r2, [pc, #72]	; (800c2a4 <HandleTimer+0xcc>)
 800c25a:	011b      	lsls	r3, r3, #4
 800c25c:	18d3      	adds	r3, r2, r3
 800c25e:	3304      	adds	r3, #4
 800c260:	2201      	movs	r2, #1
 800c262:	4252      	negs	r2, r2
 800c264:	801a      	strh	r2, [r3, #0]
                    ( void )arxTimerHdls[ubIdx].pbMBPTimerExpiredFN( arxTimerHdls[ubIdx].xMBMHdl );
 800c266:	183b      	adds	r3, r7, r0
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	4a0e      	ldr	r2, [pc, #56]	; (800c2a4 <HandleTimer+0xcc>)
 800c26c:	011b      	lsls	r3, r3, #4
 800c26e:	18d3      	adds	r3, r2, r3
 800c270:	330c      	adds	r3, #12
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	183b      	adds	r3, r7, r0
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	490a      	ldr	r1, [pc, #40]	; (800c2a4 <HandleTimer+0xcc>)
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	18cb      	adds	r3, r1, r3
 800c27e:	3308      	adds	r3, #8
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	0018      	movs	r0, r3
 800c284:	4790      	blx	r2
        for( ubIdx = 0; ubIdx < MB_UTILS_NARRSIZE( arxTimerHdls ); ubIdx++ )
 800c286:	210f      	movs	r1, #15
 800c288:	187b      	adds	r3, r7, r1
 800c28a:	781a      	ldrb	r2, [r3, #0]
 800c28c:	187b      	adds	r3, r7, r1
 800c28e:	3201      	adds	r2, #1
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	230f      	movs	r3, #15
 800c294:	18fb      	adds	r3, r7, r3
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d9b1      	bls.n	800c200 <HandleTimer+0x28>
                }
            }
        }	
  }
}
 800c29c:	46c0      	nop			; (mov r8, r8)
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b004      	add	sp, #16
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	20004cbc 	.word	0x20004cbc
 800c2a8:	0000ffff 	.word	0x0000ffff

0800c2ac <__libc_init_array>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	4d0c      	ldr	r5, [pc, #48]	; (800c2e4 <__libc_init_array+0x38>)
 800c2b2:	4c0d      	ldr	r4, [pc, #52]	; (800c2e8 <__libc_init_array+0x3c>)
 800c2b4:	1b64      	subs	r4, r4, r5
 800c2b6:	10a4      	asrs	r4, r4, #2
 800c2b8:	42a6      	cmp	r6, r4
 800c2ba:	d109      	bne.n	800c2d0 <__libc_init_array+0x24>
 800c2bc:	2600      	movs	r6, #0
 800c2be:	f000 f8f9 	bl	800c4b4 <_init>
 800c2c2:	4d0a      	ldr	r5, [pc, #40]	; (800c2ec <__libc_init_array+0x40>)
 800c2c4:	4c0a      	ldr	r4, [pc, #40]	; (800c2f0 <__libc_init_array+0x44>)
 800c2c6:	1b64      	subs	r4, r4, r5
 800c2c8:	10a4      	asrs	r4, r4, #2
 800c2ca:	42a6      	cmp	r6, r4
 800c2cc:	d105      	bne.n	800c2da <__libc_init_array+0x2e>
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	00b3      	lsls	r3, r6, #2
 800c2d2:	58eb      	ldr	r3, [r5, r3]
 800c2d4:	4798      	blx	r3
 800c2d6:	3601      	adds	r6, #1
 800c2d8:	e7ee      	b.n	800c2b8 <__libc_init_array+0xc>
 800c2da:	00b3      	lsls	r3, r6, #2
 800c2dc:	58eb      	ldr	r3, [r5, r3]
 800c2de:	4798      	blx	r3
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	e7f2      	b.n	800c2ca <__libc_init_array+0x1e>
 800c2e4:	0800c860 	.word	0x0800c860
 800c2e8:	0800c860 	.word	0x0800c860
 800c2ec:	0800c860 	.word	0x0800c860
 800c2f0:	0800c864 	.word	0x0800c864

0800c2f4 <__retarget_lock_acquire_recursive>:
 800c2f4:	4770      	bx	lr

0800c2f6 <__retarget_lock_release_recursive>:
 800c2f6:	4770      	bx	lr

0800c2f8 <memcpy>:
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d100      	bne.n	800c302 <memcpy+0xa>
 800c300:	bd10      	pop	{r4, pc}
 800c302:	5ccc      	ldrb	r4, [r1, r3]
 800c304:	54c4      	strb	r4, [r0, r3]
 800c306:	3301      	adds	r3, #1
 800c308:	e7f8      	b.n	800c2fc <memcpy+0x4>

0800c30a <memset>:
 800c30a:	0003      	movs	r3, r0
 800c30c:	1882      	adds	r2, r0, r2
 800c30e:	4293      	cmp	r3, r2
 800c310:	d100      	bne.n	800c314 <memset+0xa>
 800c312:	4770      	bx	lr
 800c314:	7019      	strb	r1, [r3, #0]
 800c316:	3301      	adds	r3, #1
 800c318:	e7f9      	b.n	800c30e <memset+0x4>

0800c31a <cleanup_glue>:
 800c31a:	b570      	push	{r4, r5, r6, lr}
 800c31c:	000d      	movs	r5, r1
 800c31e:	6809      	ldr	r1, [r1, #0]
 800c320:	0004      	movs	r4, r0
 800c322:	2900      	cmp	r1, #0
 800c324:	d001      	beq.n	800c32a <cleanup_glue+0x10>
 800c326:	f7ff fff8 	bl	800c31a <cleanup_glue>
 800c32a:	0029      	movs	r1, r5
 800c32c:	0020      	movs	r0, r4
 800c32e:	f000 f877 	bl	800c420 <_free_r>
 800c332:	bd70      	pop	{r4, r5, r6, pc}

0800c334 <_reclaim_reent>:
 800c334:	4b31      	ldr	r3, [pc, #196]	; (800c3fc <_reclaim_reent+0xc8>)
 800c336:	b570      	push	{r4, r5, r6, lr}
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	0004      	movs	r4, r0
 800c33c:	4283      	cmp	r3, r0
 800c33e:	d049      	beq.n	800c3d4 <_reclaim_reent+0xa0>
 800c340:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <_reclaim_reent+0x28>
 800c346:	2500      	movs	r5, #0
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	42ab      	cmp	r3, r5
 800c34c:	d147      	bne.n	800c3de <_reclaim_reent+0xaa>
 800c34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c350:	6819      	ldr	r1, [r3, #0]
 800c352:	2900      	cmp	r1, #0
 800c354:	d002      	beq.n	800c35c <_reclaim_reent+0x28>
 800c356:	0020      	movs	r0, r4
 800c358:	f000 f862 	bl	800c420 <_free_r>
 800c35c:	6961      	ldr	r1, [r4, #20]
 800c35e:	2900      	cmp	r1, #0
 800c360:	d002      	beq.n	800c368 <_reclaim_reent+0x34>
 800c362:	0020      	movs	r0, r4
 800c364:	f000 f85c 	bl	800c420 <_free_r>
 800c368:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d002      	beq.n	800c374 <_reclaim_reent+0x40>
 800c36e:	0020      	movs	r0, r4
 800c370:	f000 f856 	bl	800c420 <_free_r>
 800c374:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c376:	2900      	cmp	r1, #0
 800c378:	d002      	beq.n	800c380 <_reclaim_reent+0x4c>
 800c37a:	0020      	movs	r0, r4
 800c37c:	f000 f850 	bl	800c420 <_free_r>
 800c380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c382:	2900      	cmp	r1, #0
 800c384:	d002      	beq.n	800c38c <_reclaim_reent+0x58>
 800c386:	0020      	movs	r0, r4
 800c388:	f000 f84a 	bl	800c420 <_free_r>
 800c38c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c38e:	2900      	cmp	r1, #0
 800c390:	d002      	beq.n	800c398 <_reclaim_reent+0x64>
 800c392:	0020      	movs	r0, r4
 800c394:	f000 f844 	bl	800c420 <_free_r>
 800c398:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d002      	beq.n	800c3a4 <_reclaim_reent+0x70>
 800c39e:	0020      	movs	r0, r4
 800c3a0:	f000 f83e 	bl	800c420 <_free_r>
 800c3a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c3a6:	2900      	cmp	r1, #0
 800c3a8:	d002      	beq.n	800c3b0 <_reclaim_reent+0x7c>
 800c3aa:	0020      	movs	r0, r4
 800c3ac:	f000 f838 	bl	800c420 <_free_r>
 800c3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3b2:	2900      	cmp	r1, #0
 800c3b4:	d002      	beq.n	800c3bc <_reclaim_reent+0x88>
 800c3b6:	0020      	movs	r0, r4
 800c3b8:	f000 f832 	bl	800c420 <_free_r>
 800c3bc:	69a3      	ldr	r3, [r4, #24]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d008      	beq.n	800c3d4 <_reclaim_reent+0xa0>
 800c3c2:	0020      	movs	r0, r4
 800c3c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3c6:	4798      	blx	r3
 800c3c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d002      	beq.n	800c3d4 <_reclaim_reent+0xa0>
 800c3ce:	0020      	movs	r0, r4
 800c3d0:	f7ff ffa3 	bl	800c31a <cleanup_glue>
 800c3d4:	bd70      	pop	{r4, r5, r6, pc}
 800c3d6:	5949      	ldr	r1, [r1, r5]
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d108      	bne.n	800c3ee <_reclaim_reent+0xba>
 800c3dc:	3504      	adds	r5, #4
 800c3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3e0:	68d9      	ldr	r1, [r3, #12]
 800c3e2:	2d80      	cmp	r5, #128	; 0x80
 800c3e4:	d1f7      	bne.n	800c3d6 <_reclaim_reent+0xa2>
 800c3e6:	0020      	movs	r0, r4
 800c3e8:	f000 f81a 	bl	800c420 <_free_r>
 800c3ec:	e7af      	b.n	800c34e <_reclaim_reent+0x1a>
 800c3ee:	680e      	ldr	r6, [r1, #0]
 800c3f0:	0020      	movs	r0, r4
 800c3f2:	f000 f815 	bl	800c420 <_free_r>
 800c3f6:	0031      	movs	r1, r6
 800c3f8:	e7ee      	b.n	800c3d8 <_reclaim_reent+0xa4>
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	2000000c 	.word	0x2000000c

0800c400 <__malloc_lock>:
 800c400:	b510      	push	{r4, lr}
 800c402:	4802      	ldr	r0, [pc, #8]	; (800c40c <__malloc_lock+0xc>)
 800c404:	f7ff ff76 	bl	800c2f4 <__retarget_lock_acquire_recursive>
 800c408:	bd10      	pop	{r4, pc}
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	20004d14 	.word	0x20004d14

0800c410 <__malloc_unlock>:
 800c410:	b510      	push	{r4, lr}
 800c412:	4802      	ldr	r0, [pc, #8]	; (800c41c <__malloc_unlock+0xc>)
 800c414:	f7ff ff6f 	bl	800c2f6 <__retarget_lock_release_recursive>
 800c418:	bd10      	pop	{r4, pc}
 800c41a:	46c0      	nop			; (mov r8, r8)
 800c41c:	20004d14 	.word	0x20004d14

0800c420 <_free_r>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	0005      	movs	r5, r0
 800c424:	2900      	cmp	r1, #0
 800c426:	d010      	beq.n	800c44a <_free_r+0x2a>
 800c428:	1f0c      	subs	r4, r1, #4
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	da00      	bge.n	800c432 <_free_r+0x12>
 800c430:	18e4      	adds	r4, r4, r3
 800c432:	0028      	movs	r0, r5
 800c434:	f7ff ffe4 	bl	800c400 <__malloc_lock>
 800c438:	4a1d      	ldr	r2, [pc, #116]	; (800c4b0 <_free_r+0x90>)
 800c43a:	6813      	ldr	r3, [r2, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d105      	bne.n	800c44c <_free_r+0x2c>
 800c440:	6063      	str	r3, [r4, #4]
 800c442:	6014      	str	r4, [r2, #0]
 800c444:	0028      	movs	r0, r5
 800c446:	f7ff ffe3 	bl	800c410 <__malloc_unlock>
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	d908      	bls.n	800c462 <_free_r+0x42>
 800c450:	6821      	ldr	r1, [r4, #0]
 800c452:	1860      	adds	r0, r4, r1
 800c454:	4283      	cmp	r3, r0
 800c456:	d1f3      	bne.n	800c440 <_free_r+0x20>
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	1841      	adds	r1, r0, r1
 800c45e:	6021      	str	r1, [r4, #0]
 800c460:	e7ee      	b.n	800c440 <_free_r+0x20>
 800c462:	001a      	movs	r2, r3
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <_free_r+0x4e>
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	d9f9      	bls.n	800c462 <_free_r+0x42>
 800c46e:	6811      	ldr	r1, [r2, #0]
 800c470:	1850      	adds	r0, r2, r1
 800c472:	42a0      	cmp	r0, r4
 800c474:	d10b      	bne.n	800c48e <_free_r+0x6e>
 800c476:	6820      	ldr	r0, [r4, #0]
 800c478:	1809      	adds	r1, r1, r0
 800c47a:	1850      	adds	r0, r2, r1
 800c47c:	6011      	str	r1, [r2, #0]
 800c47e:	4283      	cmp	r3, r0
 800c480:	d1e0      	bne.n	800c444 <_free_r+0x24>
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	1841      	adds	r1, r0, r1
 800c488:	6011      	str	r1, [r2, #0]
 800c48a:	6053      	str	r3, [r2, #4]
 800c48c:	e7da      	b.n	800c444 <_free_r+0x24>
 800c48e:	42a0      	cmp	r0, r4
 800c490:	d902      	bls.n	800c498 <_free_r+0x78>
 800c492:	230c      	movs	r3, #12
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	e7d5      	b.n	800c444 <_free_r+0x24>
 800c498:	6821      	ldr	r1, [r4, #0]
 800c49a:	1860      	adds	r0, r4, r1
 800c49c:	4283      	cmp	r3, r0
 800c49e:	d103      	bne.n	800c4a8 <_free_r+0x88>
 800c4a0:	6818      	ldr	r0, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	1841      	adds	r1, r0, r1
 800c4a6:	6021      	str	r1, [r4, #0]
 800c4a8:	6063      	str	r3, [r4, #4]
 800c4aa:	6054      	str	r4, [r2, #4]
 800c4ac:	e7ca      	b.n	800c444 <_free_r+0x24>
 800c4ae:	46c0      	nop			; (mov r8, r8)
 800c4b0:	20004d18 	.word	0x20004d18

0800c4b4 <_init>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr

0800c4c0 <_fini>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	46c0      	nop			; (mov r8, r8)
 800c4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c6:	bc08      	pop	{r3}
 800c4c8:	469e      	mov	lr, r3
 800c4ca:	4770      	bx	lr
