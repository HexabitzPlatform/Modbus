
Modbus_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a0  080066a0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  080066a0  080066a0  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066a0  080066a0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000ec  08006794  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08006794  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbb1  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003185  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8d  00000000  00000000  00033dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa9f  00000000  00000000  00034955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001832a  00000000  00000000  000543f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b056e  00000000  00000000  0006c71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c34  00000000  00000000  0011cc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001208c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800625c 	.word	0x0800625c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	0800625c 	.word	0x0800625c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_fsub>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	46c6      	mov	lr, r8
 8000234:	0243      	lsls	r3, r0, #9
 8000236:	0a5b      	lsrs	r3, r3, #9
 8000238:	0045      	lsls	r5, r0, #1
 800023a:	00da      	lsls	r2, r3, #3
 800023c:	0fc4      	lsrs	r4, r0, #31
 800023e:	0248      	lsls	r0, r1, #9
 8000240:	004f      	lsls	r7, r1, #1
 8000242:	4694      	mov	ip, r2
 8000244:	0a42      	lsrs	r2, r0, #9
 8000246:	001e      	movs	r6, r3
 8000248:	4690      	mov	r8, r2
 800024a:	b500      	push	{lr}
 800024c:	0e2d      	lsrs	r5, r5, #24
 800024e:	0e3f      	lsrs	r7, r7, #24
 8000250:	0fc9      	lsrs	r1, r1, #31
 8000252:	0980      	lsrs	r0, r0, #6
 8000254:	2fff      	cmp	r7, #255	; 0xff
 8000256:	d059      	beq.n	800030c <__aeabi_fsub+0xdc>
 8000258:	2201      	movs	r2, #1
 800025a:	4051      	eors	r1, r2
 800025c:	428c      	cmp	r4, r1
 800025e:	d039      	beq.n	80002d4 <__aeabi_fsub+0xa4>
 8000260:	1bea      	subs	r2, r5, r7
 8000262:	2a00      	cmp	r2, #0
 8000264:	dd58      	ble.n	8000318 <__aeabi_fsub+0xe8>
 8000266:	2f00      	cmp	r7, #0
 8000268:	d068      	beq.n	800033c <__aeabi_fsub+0x10c>
 800026a:	2dff      	cmp	r5, #255	; 0xff
 800026c:	d100      	bne.n	8000270 <__aeabi_fsub+0x40>
 800026e:	e0d1      	b.n	8000414 <__aeabi_fsub+0x1e4>
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	04db      	lsls	r3, r3, #19
 8000274:	4318      	orrs	r0, r3
 8000276:	2a1b      	cmp	r2, #27
 8000278:	dc00      	bgt.n	800027c <__aeabi_fsub+0x4c>
 800027a:	e0e3      	b.n	8000444 <__aeabi_fsub+0x214>
 800027c:	2301      	movs	r3, #1
 800027e:	4662      	mov	r2, ip
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	015a      	lsls	r2, r3, #5
 8000284:	d400      	bmi.n	8000288 <__aeabi_fsub+0x58>
 8000286:	e0ac      	b.n	80003e2 <__aeabi_fsub+0x1b2>
 8000288:	019b      	lsls	r3, r3, #6
 800028a:	099e      	lsrs	r6, r3, #6
 800028c:	0030      	movs	r0, r6
 800028e:	f000 f9b7 	bl	8000600 <__clzsi2>
 8000292:	0033      	movs	r3, r6
 8000294:	3805      	subs	r0, #5
 8000296:	4083      	lsls	r3, r0
 8000298:	4285      	cmp	r5, r0
 800029a:	dc00      	bgt.n	800029e <__aeabi_fsub+0x6e>
 800029c:	e0c6      	b.n	800042c <__aeabi_fsub+0x1fc>
 800029e:	4ab2      	ldr	r2, [pc, #712]	; (8000568 <__aeabi_fsub+0x338>)
 80002a0:	1a2d      	subs	r5, r5, r0
 80002a2:	4013      	ands	r3, r2
 80002a4:	075a      	lsls	r2, r3, #29
 80002a6:	d004      	beq.n	80002b2 <__aeabi_fsub+0x82>
 80002a8:	220f      	movs	r2, #15
 80002aa:	401a      	ands	r2, r3
 80002ac:	2a04      	cmp	r2, #4
 80002ae:	d000      	beq.n	80002b2 <__aeabi_fsub+0x82>
 80002b0:	3304      	adds	r3, #4
 80002b2:	015a      	lsls	r2, r3, #5
 80002b4:	d400      	bmi.n	80002b8 <__aeabi_fsub+0x88>
 80002b6:	e097      	b.n	80003e8 <__aeabi_fsub+0x1b8>
 80002b8:	1c6a      	adds	r2, r5, #1
 80002ba:	2dfe      	cmp	r5, #254	; 0xfe
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fsub+0x90>
 80002be:	e084      	b.n	80003ca <__aeabi_fsub+0x19a>
 80002c0:	019b      	lsls	r3, r3, #6
 80002c2:	0a5e      	lsrs	r6, r3, #9
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	05d0      	lsls	r0, r2, #23
 80002c8:	4330      	orrs	r0, r6
 80002ca:	07e4      	lsls	r4, r4, #31
 80002cc:	4320      	orrs	r0, r4
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002d4:	1bea      	subs	r2, r5, r7
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	dd41      	ble.n	800035e <__aeabi_fsub+0x12e>
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d06b      	beq.n	80003b6 <__aeabi_fsub+0x186>
 80002de:	2dff      	cmp	r5, #255	; 0xff
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fsub+0xb4>
 80002e2:	e097      	b.n	8000414 <__aeabi_fsub+0x1e4>
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	04db      	lsls	r3, r3, #19
 80002e8:	4318      	orrs	r0, r3
 80002ea:	2a1b      	cmp	r2, #27
 80002ec:	dc00      	bgt.n	80002f0 <__aeabi_fsub+0xc0>
 80002ee:	e0cc      	b.n	800048a <__aeabi_fsub+0x25a>
 80002f0:	2301      	movs	r3, #1
 80002f2:	4463      	add	r3, ip
 80002f4:	015a      	lsls	r2, r3, #5
 80002f6:	d574      	bpl.n	80003e2 <__aeabi_fsub+0x1b2>
 80002f8:	3501      	adds	r5, #1
 80002fa:	2dff      	cmp	r5, #255	; 0xff
 80002fc:	d065      	beq.n	80003ca <__aeabi_fsub+0x19a>
 80002fe:	2201      	movs	r2, #1
 8000300:	499a      	ldr	r1, [pc, #616]	; (800056c <__aeabi_fsub+0x33c>)
 8000302:	401a      	ands	r2, r3
 8000304:	085b      	lsrs	r3, r3, #1
 8000306:	400b      	ands	r3, r1
 8000308:	4313      	orrs	r3, r2
 800030a:	e7cb      	b.n	80002a4 <__aeabi_fsub+0x74>
 800030c:	2800      	cmp	r0, #0
 800030e:	d01f      	beq.n	8000350 <__aeabi_fsub+0x120>
 8000310:	428c      	cmp	r4, r1
 8000312:	d022      	beq.n	800035a <__aeabi_fsub+0x12a>
 8000314:	002a      	movs	r2, r5
 8000316:	3aff      	subs	r2, #255	; 0xff
 8000318:	2a00      	cmp	r2, #0
 800031a:	d035      	beq.n	8000388 <__aeabi_fsub+0x158>
 800031c:	1b7a      	subs	r2, r7, r5
 800031e:	2d00      	cmp	r5, #0
 8000320:	d000      	beq.n	8000324 <__aeabi_fsub+0xf4>
 8000322:	e099      	b.n	8000458 <__aeabi_fsub+0x228>
 8000324:	4663      	mov	r3, ip
 8000326:	2b00      	cmp	r3, #0
 8000328:	d100      	bne.n	800032c <__aeabi_fsub+0xfc>
 800032a:	e0dd      	b.n	80004e8 <__aeabi_fsub+0x2b8>
 800032c:	1e53      	subs	r3, r2, #1
 800032e:	2a01      	cmp	r2, #1
 8000330:	d100      	bne.n	8000334 <__aeabi_fsub+0x104>
 8000332:	e105      	b.n	8000540 <__aeabi_fsub+0x310>
 8000334:	2aff      	cmp	r2, #255	; 0xff
 8000336:	d06b      	beq.n	8000410 <__aeabi_fsub+0x1e0>
 8000338:	001a      	movs	r2, r3
 800033a:	e094      	b.n	8000466 <__aeabi_fsub+0x236>
 800033c:	2800      	cmp	r0, #0
 800033e:	d073      	beq.n	8000428 <__aeabi_fsub+0x1f8>
 8000340:	1e51      	subs	r1, r2, #1
 8000342:	2a01      	cmp	r2, #1
 8000344:	d100      	bne.n	8000348 <__aeabi_fsub+0x118>
 8000346:	e0df      	b.n	8000508 <__aeabi_fsub+0x2d8>
 8000348:	2aff      	cmp	r2, #255	; 0xff
 800034a:	d063      	beq.n	8000414 <__aeabi_fsub+0x1e4>
 800034c:	000a      	movs	r2, r1
 800034e:	e792      	b.n	8000276 <__aeabi_fsub+0x46>
 8000350:	2201      	movs	r2, #1
 8000352:	4051      	eors	r1, r2
 8000354:	42a1      	cmp	r1, r4
 8000356:	d000      	beq.n	800035a <__aeabi_fsub+0x12a>
 8000358:	e782      	b.n	8000260 <__aeabi_fsub+0x30>
 800035a:	002a      	movs	r2, r5
 800035c:	3aff      	subs	r2, #255	; 0xff
 800035e:	2a00      	cmp	r2, #0
 8000360:	d036      	beq.n	80003d0 <__aeabi_fsub+0x1a0>
 8000362:	1b7a      	subs	r2, r7, r5
 8000364:	2d00      	cmp	r5, #0
 8000366:	d100      	bne.n	800036a <__aeabi_fsub+0x13a>
 8000368:	e0aa      	b.n	80004c0 <__aeabi_fsub+0x290>
 800036a:	2fff      	cmp	r7, #255	; 0xff
 800036c:	d100      	bne.n	8000370 <__aeabi_fsub+0x140>
 800036e:	e0da      	b.n	8000526 <__aeabi_fsub+0x2f6>
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	4661      	mov	r1, ip
 8000374:	04db      	lsls	r3, r3, #19
 8000376:	4319      	orrs	r1, r3
 8000378:	468c      	mov	ip, r1
 800037a:	2a1b      	cmp	r2, #27
 800037c:	dc00      	bgt.n	8000380 <__aeabi_fsub+0x150>
 800037e:	e0d4      	b.n	800052a <__aeabi_fsub+0x2fa>
 8000380:	2301      	movs	r3, #1
 8000382:	003d      	movs	r5, r7
 8000384:	181b      	adds	r3, r3, r0
 8000386:	e7b5      	b.n	80002f4 <__aeabi_fsub+0xc4>
 8000388:	27fe      	movs	r7, #254	; 0xfe
 800038a:	1c6a      	adds	r2, r5, #1
 800038c:	4217      	tst	r7, r2
 800038e:	d171      	bne.n	8000474 <__aeabi_fsub+0x244>
 8000390:	2d00      	cmp	r5, #0
 8000392:	d000      	beq.n	8000396 <__aeabi_fsub+0x166>
 8000394:	e09e      	b.n	80004d4 <__aeabi_fsub+0x2a4>
 8000396:	4663      	mov	r3, ip
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_fsub+0x16e>
 800039c:	e0d5      	b.n	800054a <__aeabi_fsub+0x31a>
 800039e:	2200      	movs	r2, #0
 80003a0:	2800      	cmp	r0, #0
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fsub+0x176>
 80003a4:	e78f      	b.n	80002c6 <__aeabi_fsub+0x96>
 80003a6:	1a1b      	subs	r3, r3, r0
 80003a8:	015e      	lsls	r6, r3, #5
 80003aa:	d400      	bmi.n	80003ae <__aeabi_fsub+0x17e>
 80003ac:	e0d6      	b.n	800055c <__aeabi_fsub+0x32c>
 80003ae:	4663      	mov	r3, ip
 80003b0:	000c      	movs	r4, r1
 80003b2:	1ac3      	subs	r3, r0, r3
 80003b4:	e776      	b.n	80002a4 <__aeabi_fsub+0x74>
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d036      	beq.n	8000428 <__aeabi_fsub+0x1f8>
 80003ba:	1e51      	subs	r1, r2, #1
 80003bc:	2a01      	cmp	r2, #1
 80003be:	d100      	bne.n	80003c2 <__aeabi_fsub+0x192>
 80003c0:	e09a      	b.n	80004f8 <__aeabi_fsub+0x2c8>
 80003c2:	2aff      	cmp	r2, #255	; 0xff
 80003c4:	d026      	beq.n	8000414 <__aeabi_fsub+0x1e4>
 80003c6:	000a      	movs	r2, r1
 80003c8:	e78f      	b.n	80002ea <__aeabi_fsub+0xba>
 80003ca:	22ff      	movs	r2, #255	; 0xff
 80003cc:	2600      	movs	r6, #0
 80003ce:	e77a      	b.n	80002c6 <__aeabi_fsub+0x96>
 80003d0:	27fe      	movs	r7, #254	; 0xfe
 80003d2:	1c6a      	adds	r2, r5, #1
 80003d4:	4217      	tst	r7, r2
 80003d6:	d062      	beq.n	800049e <__aeabi_fsub+0x26e>
 80003d8:	2aff      	cmp	r2, #255	; 0xff
 80003da:	d0f6      	beq.n	80003ca <__aeabi_fsub+0x19a>
 80003dc:	0015      	movs	r5, r2
 80003de:	4460      	add	r0, ip
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	075a      	lsls	r2, r3, #29
 80003e4:	d000      	beq.n	80003e8 <__aeabi_fsub+0x1b8>
 80003e6:	e75f      	b.n	80002a8 <__aeabi_fsub+0x78>
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	2dff      	cmp	r5, #255	; 0xff
 80003ec:	d012      	beq.n	8000414 <__aeabi_fsub+0x1e4>
 80003ee:	025b      	lsls	r3, r3, #9
 80003f0:	0a5e      	lsrs	r6, r3, #9
 80003f2:	b2ea      	uxtb	r2, r5
 80003f4:	e767      	b.n	80002c6 <__aeabi_fsub+0x96>
 80003f6:	4662      	mov	r2, ip
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_fsub+0x1ce>
 80003fc:	e093      	b.n	8000526 <__aeabi_fsub+0x2f6>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d008      	beq.n	8000414 <__aeabi_fsub+0x1e4>
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	03d2      	lsls	r2, r2, #15
 8000406:	4213      	tst	r3, r2
 8000408:	d004      	beq.n	8000414 <__aeabi_fsub+0x1e4>
 800040a:	4640      	mov	r0, r8
 800040c:	4210      	tst	r0, r2
 800040e:	d101      	bne.n	8000414 <__aeabi_fsub+0x1e4>
 8000410:	000c      	movs	r4, r1
 8000412:	4643      	mov	r3, r8
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0d8      	beq.n	80003ca <__aeabi_fsub+0x19a>
 8000418:	2680      	movs	r6, #128	; 0x80
 800041a:	03f6      	lsls	r6, r6, #15
 800041c:	431e      	orrs	r6, r3
 800041e:	0276      	lsls	r6, r6, #9
 8000420:	22ff      	movs	r2, #255	; 0xff
 8000422:	0a76      	lsrs	r6, r6, #9
 8000424:	e74f      	b.n	80002c6 <__aeabi_fsub+0x96>
 8000426:	4643      	mov	r3, r8
 8000428:	0015      	movs	r5, r2
 800042a:	e7de      	b.n	80003ea <__aeabi_fsub+0x1ba>
 800042c:	2220      	movs	r2, #32
 800042e:	1b40      	subs	r0, r0, r5
 8000430:	3001      	adds	r0, #1
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	0019      	movs	r1, r3
 8000436:	4093      	lsls	r3, r2
 8000438:	40c1      	lsrs	r1, r0
 800043a:	1e5a      	subs	r2, r3, #1
 800043c:	4193      	sbcs	r3, r2
 800043e:	2500      	movs	r5, #0
 8000440:	430b      	orrs	r3, r1
 8000442:	e72f      	b.n	80002a4 <__aeabi_fsub+0x74>
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	0001      	movs	r1, r0
 800044a:	4098      	lsls	r0, r3
 800044c:	0003      	movs	r3, r0
 800044e:	40d1      	lsrs	r1, r2
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	4193      	sbcs	r3, r2
 8000454:	430b      	orrs	r3, r1
 8000456:	e712      	b.n	800027e <__aeabi_fsub+0x4e>
 8000458:	2fff      	cmp	r7, #255	; 0xff
 800045a:	d0d9      	beq.n	8000410 <__aeabi_fsub+0x1e0>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	4664      	mov	r4, ip
 8000460:	04db      	lsls	r3, r3, #19
 8000462:	431c      	orrs	r4, r3
 8000464:	46a4      	mov	ip, r4
 8000466:	2a1b      	cmp	r2, #27
 8000468:	dd52      	ble.n	8000510 <__aeabi_fsub+0x2e0>
 800046a:	2301      	movs	r3, #1
 800046c:	000c      	movs	r4, r1
 800046e:	003d      	movs	r5, r7
 8000470:	1ac3      	subs	r3, r0, r3
 8000472:	e706      	b.n	8000282 <__aeabi_fsub+0x52>
 8000474:	4663      	mov	r3, ip
 8000476:	1a1e      	subs	r6, r3, r0
 8000478:	0173      	lsls	r3, r6, #5
 800047a:	d439      	bmi.n	80004f0 <__aeabi_fsub+0x2c0>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d000      	beq.n	8000482 <__aeabi_fsub+0x252>
 8000480:	e704      	b.n	800028c <__aeabi_fsub+0x5c>
 8000482:	2400      	movs	r4, #0
 8000484:	2200      	movs	r2, #0
 8000486:	2600      	movs	r6, #0
 8000488:	e71d      	b.n	80002c6 <__aeabi_fsub+0x96>
 800048a:	2320      	movs	r3, #32
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	0001      	movs	r1, r0
 8000490:	4098      	lsls	r0, r3
 8000492:	0003      	movs	r3, r0
 8000494:	40d1      	lsrs	r1, r2
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	4193      	sbcs	r3, r2
 800049a:	430b      	orrs	r3, r1
 800049c:	e729      	b.n	80002f2 <__aeabi_fsub+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d1a9      	bne.n	80003f6 <__aeabi_fsub+0x1c6>
 80004a2:	4663      	mov	r3, ip
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d056      	beq.n	8000556 <__aeabi_fsub+0x326>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fsub+0x280>
 80004ae:	e70a      	b.n	80002c6 <__aeabi_fsub+0x96>
 80004b0:	0003      	movs	r3, r0
 80004b2:	4463      	add	r3, ip
 80004b4:	015a      	lsls	r2, r3, #5
 80004b6:	d594      	bpl.n	80003e2 <__aeabi_fsub+0x1b2>
 80004b8:	4a2b      	ldr	r2, [pc, #172]	; (8000568 <__aeabi_fsub+0x338>)
 80004ba:	3501      	adds	r5, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	e790      	b.n	80003e2 <__aeabi_fsub+0x1b2>
 80004c0:	4663      	mov	r3, ip
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0af      	beq.n	8000426 <__aeabi_fsub+0x1f6>
 80004c6:	1e53      	subs	r3, r2, #1
 80004c8:	2a01      	cmp	r2, #1
 80004ca:	d015      	beq.n	80004f8 <__aeabi_fsub+0x2c8>
 80004cc:	2aff      	cmp	r2, #255	; 0xff
 80004ce:	d02a      	beq.n	8000526 <__aeabi_fsub+0x2f6>
 80004d0:	001a      	movs	r2, r3
 80004d2:	e752      	b.n	800037a <__aeabi_fsub+0x14a>
 80004d4:	4662      	mov	r2, ip
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	d191      	bne.n	80003fe <__aeabi_fsub+0x1ce>
 80004da:	2800      	cmp	r0, #0
 80004dc:	d198      	bne.n	8000410 <__aeabi_fsub+0x1e0>
 80004de:	2680      	movs	r6, #128	; 0x80
 80004e0:	2400      	movs	r4, #0
 80004e2:	22ff      	movs	r2, #255	; 0xff
 80004e4:	03f6      	lsls	r6, r6, #15
 80004e6:	e6ee      	b.n	80002c6 <__aeabi_fsub+0x96>
 80004e8:	000c      	movs	r4, r1
 80004ea:	4643      	mov	r3, r8
 80004ec:	0015      	movs	r5, r2
 80004ee:	e77c      	b.n	80003ea <__aeabi_fsub+0x1ba>
 80004f0:	4663      	mov	r3, ip
 80004f2:	000c      	movs	r4, r1
 80004f4:	1ac6      	subs	r6, r0, r3
 80004f6:	e6c9      	b.n	800028c <__aeabi_fsub+0x5c>
 80004f8:	0003      	movs	r3, r0
 80004fa:	4463      	add	r3, ip
 80004fc:	2501      	movs	r5, #1
 80004fe:	015a      	lsls	r2, r3, #5
 8000500:	d400      	bmi.n	8000504 <__aeabi_fsub+0x2d4>
 8000502:	e76e      	b.n	80003e2 <__aeabi_fsub+0x1b2>
 8000504:	2502      	movs	r5, #2
 8000506:	e6fa      	b.n	80002fe <__aeabi_fsub+0xce>
 8000508:	4663      	mov	r3, ip
 800050a:	2501      	movs	r5, #1
 800050c:	1a1b      	subs	r3, r3, r0
 800050e:	e6b8      	b.n	8000282 <__aeabi_fsub+0x52>
 8000510:	4664      	mov	r4, ip
 8000512:	2320      	movs	r3, #32
 8000514:	40d4      	lsrs	r4, r2
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	4662      	mov	r2, ip
 800051a:	409a      	lsls	r2, r3
 800051c:	0013      	movs	r3, r2
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	4193      	sbcs	r3, r2
 8000522:	4323      	orrs	r3, r4
 8000524:	e7a2      	b.n	800046c <__aeabi_fsub+0x23c>
 8000526:	4643      	mov	r3, r8
 8000528:	e774      	b.n	8000414 <__aeabi_fsub+0x1e4>
 800052a:	4661      	mov	r1, ip
 800052c:	2320      	movs	r3, #32
 800052e:	40d1      	lsrs	r1, r2
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	4662      	mov	r2, ip
 8000534:	409a      	lsls	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	4193      	sbcs	r3, r2
 800053c:	430b      	orrs	r3, r1
 800053e:	e720      	b.n	8000382 <__aeabi_fsub+0x152>
 8000540:	4663      	mov	r3, ip
 8000542:	000c      	movs	r4, r1
 8000544:	2501      	movs	r5, #1
 8000546:	1ac3      	subs	r3, r0, r3
 8000548:	e69b      	b.n	8000282 <__aeabi_fsub+0x52>
 800054a:	2800      	cmp	r0, #0
 800054c:	d099      	beq.n	8000482 <__aeabi_fsub+0x252>
 800054e:	000c      	movs	r4, r1
 8000550:	4646      	mov	r6, r8
 8000552:	2200      	movs	r2, #0
 8000554:	e6b7      	b.n	80002c6 <__aeabi_fsub+0x96>
 8000556:	4646      	mov	r6, r8
 8000558:	2200      	movs	r2, #0
 800055a:	e6b4      	b.n	80002c6 <__aeabi_fsub+0x96>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d000      	beq.n	8000562 <__aeabi_fsub+0x332>
 8000560:	e73f      	b.n	80003e2 <__aeabi_fsub+0x1b2>
 8000562:	2400      	movs	r4, #0
 8000564:	2600      	movs	r6, #0
 8000566:	e6ae      	b.n	80002c6 <__aeabi_fsub+0x96>
 8000568:	fbffffff 	.word	0xfbffffff
 800056c:	7dffffff 	.word	0x7dffffff

08000570 <__aeabi_ui2f>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	1e04      	subs	r4, r0, #0
 8000574:	d00e      	beq.n	8000594 <__aeabi_ui2f+0x24>
 8000576:	f000 f843 	bl	8000600 <__clzsi2>
 800057a:	239e      	movs	r3, #158	; 0x9e
 800057c:	0001      	movs	r1, r0
 800057e:	1a1b      	subs	r3, r3, r0
 8000580:	2b96      	cmp	r3, #150	; 0x96
 8000582:	dc0c      	bgt.n	800059e <__aeabi_ui2f+0x2e>
 8000584:	2808      	cmp	r0, #8
 8000586:	d02c      	beq.n	80005e2 <__aeabi_ui2f+0x72>
 8000588:	3908      	subs	r1, #8
 800058a:	408c      	lsls	r4, r1
 800058c:	0264      	lsls	r4, r4, #9
 800058e:	0a64      	lsrs	r4, r4, #9
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	e001      	b.n	8000598 <__aeabi_ui2f+0x28>
 8000594:	2000      	movs	r0, #0
 8000596:	2400      	movs	r4, #0
 8000598:	05c0      	lsls	r0, r0, #23
 800059a:	4320      	orrs	r0, r4
 800059c:	bd70      	pop	{r4, r5, r6, pc}
 800059e:	2b99      	cmp	r3, #153	; 0x99
 80005a0:	dd0a      	ble.n	80005b8 <__aeabi_ui2f+0x48>
 80005a2:	0002      	movs	r2, r0
 80005a4:	0020      	movs	r0, r4
 80005a6:	321b      	adds	r2, #27
 80005a8:	4090      	lsls	r0, r2
 80005aa:	0002      	movs	r2, r0
 80005ac:	1e50      	subs	r0, r2, #1
 80005ae:	4182      	sbcs	r2, r0
 80005b0:	2005      	movs	r0, #5
 80005b2:	1a40      	subs	r0, r0, r1
 80005b4:	40c4      	lsrs	r4, r0
 80005b6:	4314      	orrs	r4, r2
 80005b8:	2905      	cmp	r1, #5
 80005ba:	dc16      	bgt.n	80005ea <__aeabi_ui2f+0x7a>
 80005bc:	0022      	movs	r2, r4
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <__aeabi_ui2f+0x8c>)
 80005c0:	4002      	ands	r2, r0
 80005c2:	0765      	lsls	r5, r4, #29
 80005c4:	d009      	beq.n	80005da <__aeabi_ui2f+0x6a>
 80005c6:	250f      	movs	r5, #15
 80005c8:	402c      	ands	r4, r5
 80005ca:	2c04      	cmp	r4, #4
 80005cc:	d005      	beq.n	80005da <__aeabi_ui2f+0x6a>
 80005ce:	3204      	adds	r2, #4
 80005d0:	0154      	lsls	r4, r2, #5
 80005d2:	d502      	bpl.n	80005da <__aeabi_ui2f+0x6a>
 80005d4:	239f      	movs	r3, #159	; 0x9f
 80005d6:	4002      	ands	r2, r0
 80005d8:	1a5b      	subs	r3, r3, r1
 80005da:	0192      	lsls	r2, r2, #6
 80005dc:	0a54      	lsrs	r4, r2, #9
 80005de:	b2d8      	uxtb	r0, r3
 80005e0:	e7da      	b.n	8000598 <__aeabi_ui2f+0x28>
 80005e2:	0264      	lsls	r4, r4, #9
 80005e4:	2096      	movs	r0, #150	; 0x96
 80005e6:	0a64      	lsrs	r4, r4, #9
 80005e8:	e7d6      	b.n	8000598 <__aeabi_ui2f+0x28>
 80005ea:	1f4a      	subs	r2, r1, #5
 80005ec:	4094      	lsls	r4, r2
 80005ee:	0022      	movs	r2, r4
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <__aeabi_ui2f+0x8c>)
 80005f2:	4002      	ands	r2, r0
 80005f4:	0765      	lsls	r5, r4, #29
 80005f6:	d0f0      	beq.n	80005da <__aeabi_ui2f+0x6a>
 80005f8:	e7e5      	b.n	80005c6 <__aeabi_ui2f+0x56>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	fbffffff 	.word	0xfbffffff

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	; (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_DMA_Init+0x48>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_DMA_Init+0x48>)
 8000648:	2101      	movs	r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_DMA_Init+0x48>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2009      	movs	r0, #9
 8000660:	f000 fdf6 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000664:	2009      	movs	r0, #9
 8000666:	f000 fe08 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200a      	movs	r0, #10
 8000670:	f000 fdee 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000674:	200a      	movs	r0, #10
 8000676:	f000 fe00 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_GPIO_Init+0x2c>)
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_GPIO_Init+0x2c>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	0289      	lsls	r1, r1, #10
 8000698:	430a      	orrs	r2, r1
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MX_GPIO_Init+0x2c>)
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	029b      	lsls	r3, r3, #10
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint16_t qq[10] ;
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80006be:	f000 fcb7 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f816 	bl	80006f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f7ff ffdf 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ca:	f7ff ffb7 	bl	800063c <MX_DMA_Init>
  MX_TIM14_Init();
 80006ce:	f000 fab5 	bl	8000c3c <MX_TIM14_Init>
  MX_TIM16_Init();
 80006d2:	f000 fb11 	bl	8000cf8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80006d6:	f000 fb85 	bl	8000de4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_NVIC_Init();
 80006da:	f003 ffa5 	bl	8004628 <MX_NVIC_Init>
  MbSlaveMode(MB_RTU,MB_SLAVE_ADDRESS , PORT, BAUD_RATE, MB_PAR_NONE);
 80006de:	2396      	movs	r3, #150	; 0x96
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	2200      	movs	r2, #0
 80006e4:	9200      	str	r2, [sp, #0]
 80006e6:	2203      	movs	r2, #3
 80006e8:	2101      	movs	r1, #1
 80006ea:	2000      	movs	r0, #0
 80006ec:	f003 ff6c 	bl	80045c8 <MbSlaveMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x38>

080006f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f2:	b590      	push	{r4, r7, lr}
 80006f4:	b099      	sub	sp, #100	; 0x64
 80006f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f8:	242c      	movs	r4, #44	; 0x2c
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2334      	movs	r3, #52	; 0x34
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f004 ff10 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	231c      	movs	r3, #28
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	0018      	movs	r0, r3
 800070e:	2310      	movs	r3, #16
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f004 ff08 	bl	8005528 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	003b      	movs	r3, r7
 800071a:	0018      	movs	r0, r3
 800071c:	231c      	movs	r3, #28
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f004 ff01 	bl	8005528 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2220      	movs	r2, #32
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2201      	movs	r2, #1
 8000730:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f874 	bl	8001828 <HAL_RCC_OscConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000744:	f000 f828 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	211c      	movs	r1, #28
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2203      	movs	r2, #3
 8000754:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fbe4 	bl	8001f34 <HAL_RCC_ClockConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000770:	f000 f812 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000774:	003b      	movs	r3, r7
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	003b      	movs	r3, r7
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fd42 	bl	800220c <HAL_RCCEx_PeriphCLKConfig>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078c:	f000 f804 	bl	8000798 <Error_Handler>
  }
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b019      	add	sp, #100	; 0x64
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699a      	ldr	r2, [r3, #24]
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0549      	lsls	r1, r1, #21
 80007cc:	430a      	orrs	r2, r1
 80007ce:	61da      	str	r2, [r3, #28]
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_MspInit+0x44>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	055b      	lsls	r3, r3, #21
 80007d8:	4013      	ands	r3, r2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	4252      	negs	r2, r2
 80007fa:	611a      	str	r2, [r3, #16]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}

08000804 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	2201      	movs	r2, #1
 8000812:	4013      	ands	r3, r2
 8000814:	2b01      	cmp	r3, #1
 8000816:	d101      	bne.n	800081c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800081c:	2300      	movs	r3, #0
}
 800081e:	0018      	movs	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}

08000826 <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	2b01      	cmp	r3, #1
 8000838:	d101      	bne.n	800083e <LL_TIM_IsEnabledIT_UPDATE+0x18>
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 800083e:	2300      	movs	r3, #0
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}

08000848 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	2220      	movs	r2, #32
 8000856:	4013      	ands	r3, r2
 8000858:	2b20      	cmp	r3, #32
 800085a:	d101      	bne.n	8000860 <LL_USART_IsActiveFlag_RXNE+0x18>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000860:	2300      	movs	r3, #0
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	4013      	ands	r3, r2
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d101      	bne.n	8000882 <LL_USART_IsActiveFlag_TC+0x18>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_USART_IsActiveFlag_TC+0x1a>
 8000882:	2300      	movs	r3, #0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}

0800088c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	4013      	ands	r3, r2
 800089c:	2b80      	cmp	r3, #128	; 0x80
 800089e:	d101      	bne.n	80008a4 <LL_USART_IsActiveFlag_TXE+0x18>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <LL_USART_IsActiveFlag_TXE+0x1a>
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}

080008ae <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2240      	movs	r2, #64	; 0x40
 80008ba:	621a      	str	r2, [r3, #32]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2220      	movs	r2, #32
 80008d2:	4013      	ands	r3, r2
 80008d4:	2b20      	cmp	r3, #32
 80008d6:	d101      	bne.n	80008dc <LL_USART_IsEnabledIT_RXNE+0x18>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <LL_USART_IsEnabledIT_RXNE+0x1a>
 80008dc:	2300      	movs	r3, #0
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	4013      	ands	r3, r2
 80008f6:	2b40      	cmp	r3, #64	; 0x40
 80008f8:	d101      	bne.n	80008fe <LL_USART_IsEnabledIT_TC+0x18>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <LL_USART_IsEnabledIT_TC+0x1a>
 80008fe:	2300      	movs	r3, #0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}

08000908 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	4013      	ands	r3, r2
 8000918:	2b80      	cmp	r3, #128	; 0x80
 800091a:	d101      	bne.n	8000920 <LL_USART_IsEnabledIT_TXE+0x18>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <LL_USART_IsEnabledIT_TXE+0x1a>
 8000920:	2300      	movs	r3, #0
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}

0800092a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}

08000942 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <NMI_Handler+0x4>

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <HardFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 fbab 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */
//
  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <DMA1_Ch1_IRQHandler+0x14>)
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fce4 	bl	8001344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */
//
  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000224 	.word	0x20000224

08000988 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
//
  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fcd8 	bl	8001344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
//
  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000268 	.word	0x20000268

080009a0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM14) & LL_TIM_IsEnabledIT_UPDATE(TIM14))
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <TIM14_IRQHandler+0x30>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff ff2c 	bl	8000804 <LL_TIM_IsActiveFlag_UPDATE>
 80009ac:	0004      	movs	r4, r0
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <TIM14_IRQHandler+0x30>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff38 	bl	8000826 <LL_TIM_IsEnabledIT_UPDATE>
 80009b6:	0003      	movs	r3, r0
 80009b8:	4023      	ands	r3, r4
 80009ba:	d006      	beq.n	80009ca <TIM14_IRQHandler+0x2a>
	  {
	    LL_TIM_ClearFlag_UPDATE(TIM14);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <TIM14_IRQHandler+0x30>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff14 	bl	80007ec <LL_TIM_ClearFlag_UPDATE>
	    pxMBPortCBTimerExpired();
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <TIM14_IRQHandler+0x34>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4798      	blx	r3
  /* USER CODE END TIM14_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim14);
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bdb0      	pop	{r4, r5, r7, pc}
 80009d0:	40002000 	.word	0x40002000
 80009d4:	200002d0 	.word	0x200002d0

080009d8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	  LL_TIM_ClearFlag_UPDATE(TIM16);
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <TIM16_IRQHandler+0x18>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff ff04 	bl	80007ec <LL_TIM_ClearFlag_UPDATE>
	  eMBPoll();
 80009e4:	f003 fc9c 	bl	8004320 <eMBPoll>
  /* USER CODE END TIM16_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim16);
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40014400 	.word	0x40014400

080009f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(LL_USART_IsActiveFlag_RXNE(USART1) & LL_USART_IsEnabledIT_RXNE(USART1))
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <USART1_IRQHandler+0x7c>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff ff24 	bl	8000848 <LL_USART_IsActiveFlag_RXNE>
 8000a00:	0004      	movs	r4, r0
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ff5d 	bl	80008c4 <LL_USART_IsEnabledIT_RXNE>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	4023      	ands	r3, r4
 8000a0e:	d003      	beq.n	8000a18 <USART1_IRQHandler+0x24>
  {
 pxMBFrameCBByteReceived();
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <USART1_IRQHandler+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4798      	blx	r3
    return;
 8000a16:	e028      	b.n	8000a6a <USART1_IRQHandler+0x76>
  }

  if(LL_USART_IsActiveFlag_TXE(USART1) & LL_USART_IsEnabledIT_TXE(USART1))
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff36 	bl	800088c <LL_USART_IsActiveFlag_TXE>
 8000a20:	0004      	movs	r4, r0
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff ff6f 	bl	8000908 <LL_USART_IsEnabledIT_TXE>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	4023      	ands	r3, r4
 8000a2e:	d003      	beq.n	8000a38 <USART1_IRQHandler+0x44>
  {
 pxMBFrameCBTransmitterEmpty();
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <USART1_IRQHandler+0x84>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4798      	blx	r3
    return;
 8000a36:	e018      	b.n	8000a6a <USART1_IRQHandler+0x76>
  }

  if(LL_USART_IsActiveFlag_TC(USART1) & LL_USART_IsEnabledIT_TC(USART1))
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff ff15 	bl	800086a <LL_USART_IsActiveFlag_TC>
 8000a40:	0004      	movs	r4, r0
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff4e 	bl	80008e6 <LL_USART_IsEnabledIT_TC>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	4023      	ands	r3, r4
 8000a4e:	d00c      	beq.n	8000a6a <USART1_IRQHandler+0x76>
  {
    LL_GPIO_ResetOutputPin(RS485_DE_GPIO_Port, RS485_DE_Pin);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	015a      	lsls	r2, r3, #5
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff65 	bl	800092a <LL_GPIO_ResetOutputPin>
    LL_USART_ClearFlag_TC(USART1);
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <USART1_IRQHandler+0x7c>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff ff23 	bl	80008ae <LL_USART_ClearFlag_TC>
    return;
 8000a68:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40013800 	.word	0x40013800
 8000a74:	200002c8 	.word	0x200002c8
 8000a78:	200002cc 	.word	0x200002cc

08000a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_kill>:

int _kill(int pid, int sig)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a92:	f004 fd9f 	bl	80055d4 <__errno>
 8000a96:	0003      	movs	r3, r0
 8000a98:	2216      	movs	r2, #22
 8000a9a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_exit>:

void _exit (int status)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	425a      	negs	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ffe5 	bl	8000a88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000abe:	e7fe      	b.n	8000abe <_exit+0x16>

08000ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad2:	e000      	b.n	8000ad6 <_read+0x16>
 8000ad4:	bf00      	nop
 8000ad6:	0001      	movs	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
	}

return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e009      	b.n	8000b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0018      	movs	r0, r3
 8000b16:	e000      	b.n	8000b1a <_write+0x20>
 8000b18:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf1      	blt.n	8000b0c <_write+0x12>
	}
	return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:

int _close(int file)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425b      	negs	r3, r3
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	0192      	lsls	r2, r2, #6
 8000b56:	605a      	str	r2, [r3, #4]
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f004 fd0a 	bl	80055d4 <__errno>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	425b      	negs	r3, r3
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	18d2      	adds	r2, r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b006      	add	sp, #24
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20008000 	.word	0x20008000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000108 	.word	0x20000108
 8000bf4:	20000560 	.word	0x20000560

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LL_TIM_EnableCounter>:
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <LL_TIM_EnableIT_UPDATE>:
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60da      	str	r2, [r3, #12]
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */
//
  /* USER CODE END TIM14_Init 1 */
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	231c      	movs	r3, #28
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f004 fc6c 	bl	8005528 <memset>

	  /* Peripheral clock enable */
	  __HAL_RCC_TIM14_CLK_ENABLE();
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_TIM14_Init+0xac>)
 8000c52:	69da      	ldr	r2, [r3, #28]
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_TIM14_Init+0xac>)
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	0049      	lsls	r1, r1, #1
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	61da      	str	r2, [r3, #28]
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_TIM14_Init+0xac>)
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

	  /* TIM14 interrupt Init */

	  /* Configure the global features of the TIM14 */
	  htim14.Instance = TIM14;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <MX_TIM14_Init+0xb4>)
 8000c70:	601a      	str	r2, [r3, #0]
	  htim14.Init.Prescaler = 2399;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <MX_TIM14_Init+0xb8>)
 8000c76:	605a      	str	r2, [r3, #4]
	  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	  htim14.Init.Period = 0;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
	  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
	  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fc0a 	bl	80024ac <HAL_TIM_PWM_Init>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM14_Init+0x64>
	  {
	    Error_Handler();
 8000c9c:	f7ff fd7c 	bl	8000798 <Error_Handler>
	  }

	  /* Configure the PWM Output Channel */
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2260      	movs	r2, #96	; 0x60
 8000ca4:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0;
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 fd04 	bl	80026cc <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM14_Init+0x90>
	  {
	    Error_Handler();
 8000cc8:	f7ff fd66 	bl	8000798 <Error_Handler>
	  }

	  /* Start the PWM output */
	  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_TIM14_Init+0xb0>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fc43 	bl	800255c <HAL_TIM_PWM_Start>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM14_Init+0xa2>
	  {
	    Error_Handler();
 8000cda:	f7ff fd5d 	bl	8000798 <Error_Handler>

  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b008      	add	sp, #32
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	2000010c 	.word	0x2000010c
 8000cf0:	40002000 	.word	0x40002000
 8000cf4:	0000095f 	.word	0x0000095f

08000cf8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <MX_TIM16_Init+0x58>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d04:	222f      	movs	r2, #47	; 0x2f
 8000d06:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <MX_TIM16_Init+0x5c>)
 8000d12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_TIM16_Init+0x54>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f001 fb6f 	bl	800240c <HAL_TIM_Base_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000d32:	f7ff fd31 	bl	8000798 <Error_Handler>
  }

  LL_TIM_EnableIT_UPDATE(TIM16);
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_TIM16_Init+0x58>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff70 	bl	8000c1e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM16);
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <MX_TIM16_Init+0x58>)
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff5e 	bl	8000c02 <LL_TIM_EnableCounter>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000154 	.word	0x20000154
 8000d50:	40014400 	.word	0x40014400
 8000d54:	000007cf 	.word	0x000007cf

08000d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_TIM_Base_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d116      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d6c:	69da      	ldr	r2, [r3, #28]
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0049      	lsls	r1, r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	61da      	str	r2, [r3, #28]
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2013      	movs	r0, #19
 8000d8c:	f000 fa60 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000d90:	2013      	movs	r0, #19
 8000d92:	f000 fa72 	bl	800127a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d96:	e01a      	b.n	8000dce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM16)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d115      	bne.n	8000dce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2015      	movs	r0, #21
 8000dc4:	f000 fa44 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000dc8:	2015      	movs	r0, #21
 8000dca:	f000 fa56 	bl	800127a <HAL_NVIC_EnableIRQ>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	40002000 	.word	0x40002000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40014400 	.word	0x40014400

08000de4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_USART1_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000df0:	2296      	movs	r2, #150	; 0x96
 8000df2:	0192      	lsls	r2, r2, #6
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 ffb5 	bl	8002d98 <HAL_UART_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f7ff fcb1 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000019c 	.word	0x2000019c
 8000e40:	40013800 	.word	0x40013800

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b08b      	sub	sp, #44	; 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	2414      	movs	r4, #20
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	0018      	movs	r0, r3
 8000e52:	2314      	movs	r3, #20
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f004 fb66 	bl	8005528 <memset>
  if(uartHandle->Instance==USART1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_UART_MspInit+0x17c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d000      	beq.n	8000e68 <HAL_UART_MspInit+0x24>
 8000e66:	e0a7      	b.n	8000fb8 <HAL_UART_MspInit+0x174>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e68:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e6a:	699a      	ldr	r2, [r3, #24]
 8000e6c:	4b55      	ldr	r3, [pc, #340]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	01c9      	lsls	r1, r1, #7
 8000e72:	430a      	orrs	r2, r1
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	01db      	lsls	r3, r3, #7
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b4f      	ldr	r3, [pc, #316]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	0289      	lsls	r1, r1, #10
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_UART_MspInit+0x180>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	22c0      	movs	r2, #192	; 0xc0
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	187a      	adds	r2, r7, r1
 8000ec4:	2390      	movs	r3, #144	; 0x90
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fb16 	bl	80014fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <HAL_UART_MspInit+0x188>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee8:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f9d6 	bl	80012b4 <HAL_DMA_Init>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000f0c:	f7ff fc44 	bl	8000798 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 8000f10:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f12:	23a8      	movs	r3, #168	; 0xa8
 8000f14:	58d3      	ldr	r3, [r2, r3]
 8000f16:	492e      	ldr	r1, [pc, #184]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f18:	220f      	movs	r2, #15
 8000f1a:	4393      	bics	r3, r2
 8000f1c:	22a8      	movs	r2, #168	; 0xa8
 8000f1e:	508b      	str	r3, [r1, r2]
 8000f20:	4a2b      	ldr	r2, [pc, #172]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f22:	23a8      	movs	r3, #168	; 0xa8
 8000f24:	58d3      	ldr	r3, [r2, r3]
 8000f26:	492a      	ldr	r1, [pc, #168]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	22a8      	movs	r2, #168	; 0xa8
 8000f2e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000f34:	675a      	str	r2, [r3, #116]	; 0x74
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_UART_MspInit+0x184>)
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 f9a0 	bl	80012b4 <HAL_DMA_Init>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000f78:	f7ff fc0e 	bl	8000798 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f7e:	23a8      	movs	r3, #168	; 0xa8
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f84:	22f0      	movs	r2, #240	; 0xf0
 8000f86:	4393      	bics	r3, r2
 8000f88:	22a8      	movs	r2, #168	; 0xa8
 8000f8a:	508b      	str	r3, [r1, r2]
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f8e:	23a8      	movs	r3, #168	; 0xa8
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	490f      	ldr	r1, [pc, #60]	; (8000fd0 <HAL_UART_MspInit+0x18c>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	4313      	orrs	r3, r2
 8000f98:	22a8      	movs	r2, #168	; 0xa8
 8000f9a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000fa0:	671a      	str	r2, [r3, #112]	; 0x70
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	201b      	movs	r0, #27
 8000fae:	f000 f94f 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb2:	201b      	movs	r0, #27
 8000fb4:	f000 f961 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b00b      	add	sp, #44	; 0x2c
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	20000224 	.word	0x20000224
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	20000268 	.word	0x20000268
 8000fd8:	4002001c 	.word	0x4002001c

08000fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff fe0a 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100a:	f004 fae9 	bl	80055e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fb53 	bl	80006b8 <main>

08001012 <LoopForever>:

LoopForever:
    b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001020:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8001024:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001028:	20000560 	.word	0x20000560

0800102c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_COMP_IRQHandler>
	...

08001030 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_Init+0x24>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_Init+0x24>)
 800103a:	2110      	movs	r1, #16
 800103c:	430a      	orrs	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f809 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fbad 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x5c>)
 8001062:	681c      	ldr	r4, [r3, #0]
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	0019      	movs	r1, r3
 800106a:	23fa      	movs	r3, #250	; 0xfa
 800106c:	0098      	lsls	r0, r3, #2
 800106e:	f7ff f853 	bl	8000118 <__udivsi3>
 8001072:	0003      	movs	r3, r0
 8001074:	0019      	movs	r1, r3
 8001076:	0020      	movs	r0, r4
 8001078:	f7ff f84e 	bl	8000118 <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f90b 	bl	800129a <HAL_SYSTICK_Config>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e00f      	b.n	80010ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d80b      	bhi.n	80010aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f8d8 	bl	8001250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_InitTick+0x64>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b003      	add	sp, #12
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x1c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x20>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	18d2      	adds	r2, r2, r3
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_IncTick+0x20>)
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	20000008 	.word	0x20000008
 80010e0:	200002ac 	.word	0x200002ac

080010e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_GetTick+0x10>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	200002ac 	.word	0x200002ac

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d809      	bhi.n	8001120 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	231f      	movs	r3, #31
 8001114:	401a      	ands	r2, r3
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_EnableIRQ+0x30>)
 8001118:	2101      	movs	r1, #1
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
  }
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b7f      	cmp	r3, #127	; 0x7f
 8001140:	d828      	bhi.n	8001194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	589b      	ldr	r3, [r3, r2]
 8001152:	1dfa      	adds	r2, r7, #7
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	0011      	movs	r1, r2
 8001158:	2203      	movs	r2, #3
 800115a:	400a      	ands	r2, r1
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	401a      	ands	r2, r3
 8001168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	019b      	lsls	r3, r3, #6
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	401a      	ands	r2, r3
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	2303      	movs	r3, #3
 800117a:	4003      	ands	r3, r0
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	33c0      	adds	r3, #192	; 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001192:	e031      	b.n	80011f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0019      	movs	r1, r3
 800119c:	230f      	movs	r3, #15
 800119e:	400b      	ands	r3, r1
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3306      	adds	r3, #6
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <__NVIC_SetPriority+0xd8>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	001c      	movs	r4, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	4023      	ands	r3, r4
 80011e8:	3b08      	subs	r3, #8
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	3306      	adds	r3, #6
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	18c3      	adds	r3, r0, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	045b      	lsls	r3, r3, #17
 8001218:	429a      	cmp	r2, r3
 800121a:	d301      	bcc.n	8001220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121c:	2301      	movs	r3, #1
 800121e:	e010      	b.n	8001242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SysTick_Config+0x44>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3a01      	subs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff7c 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x44>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	210f      	movs	r1, #15
 800125c:	187b      	adds	r3, r7, r1
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	187b      	adds	r3, r7, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	0002      	movs	r2, r0
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ffaf 	bl	8001208 <SysTick_Config>
 80012aa:	0003      	movs	r3, r0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e036      	b.n	8001338 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2221      	movs	r2, #33	; 0x21
 80012ce:	2102      	movs	r1, #2
 80012d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_DMA_Init+0x8c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f8b4 	bl	8001488 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2221      	movs	r2, #33	; 0x21
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b004      	add	sp, #16
 800133e:	bd80      	pop	{r7, pc}
 8001340:	ffffc00f 	.word	0xffffc00f

08001344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2204      	movs	r2, #4
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	d024      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x72>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2204      	movs	r2, #4
 8001370:	4013      	ands	r3, r2
 8001372:	d020      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2220      	movs	r2, #32
 800137c:	4013      	ands	r3, r2
 800137e:	d107      	bne.n	8001390 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2104      	movs	r1, #4
 800138c:	438a      	bics	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001398:	2104      	movs	r1, #4
 800139a:	4091      	lsls	r1, r2
 800139c:	000a      	movs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d100      	bne.n	80013aa <HAL_DMA_IRQHandler+0x66>
 80013a8:	e06a      	b.n	8001480 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	0010      	movs	r0, r2
 80013b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013b4:	e064      	b.n	8001480 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2202      	movs	r2, #2
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_DMA_IRQHandler+0xda>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d027      	beq.n	800141e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2220      	movs	r2, #32
 80013d6:	4013      	ands	r3, r2
 80013d8:	d10b      	bne.n	80013f2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	210a      	movs	r1, #10
 80013e6:	438a      	bics	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2221      	movs	r2, #33	; 0x21
 80013ee:	2101      	movs	r1, #1
 80013f0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	2102      	movs	r1, #2
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d036      	beq.n	8001480 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	0010      	movs	r0, r2
 800141a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800141c:	e030      	b.n	8001480 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2208      	movs	r2, #8
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4013      	ands	r3, r2
 800142c:	d028      	beq.n	8001480 <HAL_DMA_IRQHandler+0x13c>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2208      	movs	r2, #8
 8001432:	4013      	ands	r3, r2
 8001434:	d024      	beq.n	8001480 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	210e      	movs	r1, #14
 8001442:	438a      	bics	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	2101      	movs	r1, #1
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2221      	movs	r2, #33	; 0x21
 8001460:	2101      	movs	r1, #1
 8001462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	0010      	movs	r0, r2
 800147c:	4798      	blx	r3
    }
  }
}
 800147e:	e7ff      	b.n	8001480 <HAL_DMA_IRQHandler+0x13c>
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	001a      	movs	r2, r3
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <DMA_CalcBaseAndBitshift+0x60>)
 8001498:	429a      	cmp	r2, r3
 800149a:	d810      	bhi.n	80014be <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <DMA_CalcBaseAndBitshift+0x64>)
 80014a2:	4694      	mov	ip, r2
 80014a4:	4463      	add	r3, ip
 80014a6:	2114      	movs	r1, #20
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7fe fe35 	bl	8000118 <__udivsi3>
 80014ae:	0003      	movs	r3, r0
 80014b0:	009a      	lsls	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <DMA_CalcBaseAndBitshift+0x68>)
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80014bc:	e00f      	b.n	80014de <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <DMA_CalcBaseAndBitshift+0x6c>)
 80014c4:	4694      	mov	ip, r2
 80014c6:	4463      	add	r3, ip
 80014c8:	2114      	movs	r1, #20
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe24 	bl	8000118 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	009a      	lsls	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <DMA_CalcBaseAndBitshift+0x70>)
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40020407 	.word	0x40020407
 80014ec:	bffdfff8 	.word	0xbffdfff8
 80014f0:	40020000 	.word	0x40020000
 80014f4:	bffdfbf8 	.word	0xbffdfbf8
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e155      	b.n	80017b8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x28>
 8001522:	e146      	b.n	80017b2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	2201      	movs	r2, #1
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	409a      	lsls	r2, r3
 80015cc:	0013      	movs	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	58d3      	ldr	r3, [r2, r3]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2207      	movs	r2, #7
 80015f8:	4013      	ands	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2107      	movs	r1, #7
 8001612:	400b      	ands	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	6939      	ldr	r1, [r7, #16]
 800162c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2203      	movs	r2, #3
 800164c:	401a      	ands	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	029b      	lsls	r3, r3, #10
 800166a:	4013      	ands	r3, r2
 800166c:	d100      	bne.n	8001670 <HAL_GPIO_Init+0x174>
 800166e:	e0a0      	b.n	80017b2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 8001676:	2101      	movs	r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	589b      	ldr	r3, [r3, r2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	2390      	movs	r3, #144	; 0x90
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <HAL_GPIO_Init+0x2dc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1ea>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_GPIO_Init+0x2e0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1e6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2e4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1e2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1de>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016da:	2305      	movs	r3, #5
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	2103      	movs	r1, #3
 80016f0:	400a      	ands	r2, r1
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	035b      	lsls	r3, r3, #13
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	039b      	lsls	r3, r3, #14
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	029b      	lsls	r3, r3, #10
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	025b      	lsls	r3, r3, #9
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	40da      	lsrs	r2, r3
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_GPIO_Init+0x2ca>
 80017c4:	e6a2      	b.n	800150c <HAL_GPIO_Init+0x10>
  } 
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b006      	add	sp, #24
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	0008      	movs	r0, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1c7b      	adds	r3, r7, #1
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	f000 fb76 	bl	8001f28 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d100      	bne.n	8001848 <HAL_RCC_OscConfig+0x20>
 8001846:	e08e      	b.n	8001966 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001848:	4bc5      	ldr	r3, [pc, #788]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	220c      	movs	r2, #12
 800184e:	4013      	ands	r3, r2
 8001850:	2b04      	cmp	r3, #4
 8001852:	d00e      	beq.n	8001872 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001854:	4bc2      	ldr	r3, [pc, #776]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	2b08      	cmp	r3, #8
 800185e:	d117      	bne.n	8001890 <HAL_RCC_OscConfig+0x68>
 8001860:	4bbf      	ldr	r3, [pc, #764]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	025b      	lsls	r3, r3, #9
 8001868:	401a      	ands	r2, r3
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	429a      	cmp	r2, r3
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4bbb      	ldr	r3, [pc, #748]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d100      	bne.n	8001880 <HAL_RCC_OscConfig+0x58>
 800187e:	e071      	b.n	8001964 <HAL_RCC_OscConfig+0x13c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d000      	beq.n	800188a <HAL_RCC_OscConfig+0x62>
 8001888:	e06c      	b.n	8001964 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f000 fb4c 	bl	8001f28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x80>
 8001898:	4bb1      	ldr	r3, [pc, #708]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0249      	lsls	r1, r1, #9
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e02f      	b.n	8001908 <HAL_RCC_OscConfig+0xe0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0xa2>
 80018b0:	4bab      	ldr	r3, [pc, #684]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4baa      	ldr	r3, [pc, #680]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018b6:	49ab      	ldr	r1, [pc, #684]	; (8001b64 <HAL_RCC_OscConfig+0x33c>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	4ba8      	ldr	r3, [pc, #672]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4ba7      	ldr	r3, [pc, #668]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018c2:	49a9      	ldr	r1, [pc, #676]	; (8001b68 <HAL_RCC_OscConfig+0x340>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e01e      	b.n	8001908 <HAL_RCC_OscConfig+0xe0>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10e      	bne.n	80018f0 <HAL_RCC_OscConfig+0xc8>
 80018d2:	4ba3      	ldr	r3, [pc, #652]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4ba2      	ldr	r3, [pc, #648]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	02c9      	lsls	r1, r1, #11
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	4b9f      	ldr	r3, [pc, #636]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0249      	lsls	r1, r1, #9
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0xe0>
 80018f0:	4b9b      	ldr	r3, [pc, #620]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b9a      	ldr	r3, [pc, #616]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018f6:	499b      	ldr	r1, [pc, #620]	; (8001b64 <HAL_RCC_OscConfig+0x33c>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b98      	ldr	r3, [pc, #608]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b97      	ldr	r3, [pc, #604]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001902:	4999      	ldr	r1, [pc, #612]	; (8001b68 <HAL_RCC_OscConfig+0x340>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d014      	beq.n	800193a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fbe8 	bl	80010e4 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff fbe3 	bl	80010e4 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e2fd      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0xf2>
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fbd3 	bl	80010e4 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fbce 	bl	80010e4 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e2e8      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	029b      	lsls	r3, r3, #10
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x11c>
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d100      	bne.n	8001972 <HAL_RCC_OscConfig+0x14a>
 8001970:	e06c      	b.n	8001a4c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001972:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	220c      	movs	r2, #12
 8001978:	4013      	ands	r3, r2
 800197a:	d00e      	beq.n	800199a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800197c:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	220c      	movs	r2, #12
 8001982:	4013      	ands	r3, r2
 8001984:	2b08      	cmp	r3, #8
 8001986:	d11f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1a0>
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	23c0      	movs	r3, #192	; 0xc0
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	401a      	ands	r2, r3
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	429a      	cmp	r2, r3
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x188>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e2bb      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	22f8      	movs	r2, #248	; 0xf8
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00da      	lsls	r2, r3, #3
 80019c0:	4b67      	ldr	r3, [pc, #412]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e041      	b.n	8001a4c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d024      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fb82 	bl	80010e4 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb7d 	bl	80010e4 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e297      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0f1      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	22f8      	movs	r2, #248	; 0xf8
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00da      	lsls	r2, r3, #3
 8001a12:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fb5d 	bl	80010e4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff fb58 	bl	80010e4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e272      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d1f1      	bne.n	8001a30 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	4013      	ands	r3, r2
 8001a54:	d036      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d019      	beq.n	8001a92 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5e:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb3b 	bl	80010e4 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fb36 	bl	80010e4 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e250      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f1      	beq.n	8001a74 <HAL_RCC_OscConfig+0x24c>
 8001a90:	e018      	b.n	8001ac4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	438a      	bics	r2, r1
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb21 	bl	80010e4 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fb1c 	bl	80010e4 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e236      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d1f1      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d100      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2a8>
 8001ace:	e0b5      	b.n	8001c3c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad0:	201f      	movs	r0, #31
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	055b      	lsls	r3, r3, #21
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d110      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0549      	lsls	r1, r1, #21
 8001aee:	430a      	orrs	r2, r1
 8001af0:	61da      	str	r2, [r3, #28]
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	055b      	lsls	r3, r3, #21
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_OscConfig+0x344>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d11a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_RCC_OscConfig+0x344>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_RCC_OscConfig+0x344>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0049      	lsls	r1, r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fae0 	bl	80010e4 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff fadb 	bl	80010e4 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1f5      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_OscConfig+0x344>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10f      	bne.n	8001b70 <HAL_RCC_OscConfig+0x348>
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_RCC_OscConfig+0x338>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_OscConfig+0x3a4>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	fffeffff 	.word	0xfffeffff
 8001b68:	fffbffff 	.word	0xfffbffff
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x36a>
 8001b78:	4bca      	ldr	r3, [pc, #808]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	4bc9      	ldr	r3, [pc, #804]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	438a      	bics	r2, r1
 8001b82:	621a      	str	r2, [r3, #32]
 8001b84:	4bc7      	ldr	r3, [pc, #796]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4bc6      	ldr	r3, [pc, #792]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
 8001b90:	e01c      	b.n	8001bcc <HAL_RCC_OscConfig+0x3a4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x38c>
 8001b9a:	4bc2      	ldr	r3, [pc, #776]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	6a1a      	ldr	r2, [r3, #32]
 8001b9e:	4bc1      	ldr	r3, [pc, #772]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	621a      	str	r2, [r3, #32]
 8001ba6:	4bbf      	ldr	r3, [pc, #764]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	4bbe      	ldr	r3, [pc, #760]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	621a      	str	r2, [r3, #32]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0x3a4>
 8001bb4:	4bbb      	ldr	r3, [pc, #748]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4bba      	ldr	r3, [pc, #744]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	4bb8      	ldr	r3, [pc, #736]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	4bb7      	ldr	r3, [pc, #732]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	438a      	bics	r2, r1
 8001bca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d014      	beq.n	8001bfe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa86 	bl	80010e4 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fa81 	bl	80010e4 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4aaf      	ldr	r2, [pc, #700]	; (8001ea8 <HAL_RCC_OscConfig+0x680>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e19a      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	4bac      	ldr	r3, [pc, #688]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x3b6>
 8001bfc:	e013      	b.n	8001c26 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa71 	bl	80010e4 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff fa6c 	bl	80010e4 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	4aa5      	ldr	r2, [pc, #660]	; (8001ea8 <HAL_RCC_OscConfig+0x680>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e185      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	4ba1      	ldr	r3, [pc, #644]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c26:	231f      	movs	r3, #31
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c30:	4b9c      	ldr	r3, [pc, #624]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	4b9b      	ldr	r3, [pc, #620]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c36:	499d      	ldr	r1, [pc, #628]	; (8001eac <HAL_RCC_OscConfig+0x684>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	4013      	ands	r3, r2
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d12a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c4e:	4b95      	ldr	r3, [pc, #596]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c52:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c54:	2104      	movs	r1, #4
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c5a:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5e:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa3d 	bl	80010e4 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c70:	f7ff fa38 	bl	80010e4 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e152      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f1      	beq.n	8001c70 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c8c:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	22f8      	movs	r2, #248	; 0xf8
 8001c92:	4393      	bics	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	00da      	lsls	r2, r3, #3
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	e034      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	3305      	adds	r3, #5
 8001caa:	d111      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cac:	4b7d      	ldr	r3, [pc, #500]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cb8:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	22f8      	movs	r2, #248	; 0xf8
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	00da      	lsls	r2, r3, #3
 8001cc8:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cce:	e01e      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cd0:	4b74      	ldr	r3, [pc, #464]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd4:	4b73      	ldr	r3, [pc, #460]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cdc:	4b71      	ldr	r3, [pc, #452]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce0:	4b70      	ldr	r3, [pc, #448]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f9fc 	bl	80010e4 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cf2:	f7ff f9f7 	bl	80010e4 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e111      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d04:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d1f1      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2220      	movs	r2, #32
 8001d14:	4013      	ands	r3, r2
 8001d16:	d05c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d18:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d00e      	beq.n	8001d42 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d24:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	220c      	movs	r2, #12
 8001d2a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d114      	bne.n	8001d5a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d30:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	401a      	ands	r2, r3
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	025b      	lsls	r3, r3, #9
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d10b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d040      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x5a8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d03c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0e6      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d66:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0249      	lsls	r1, r1, #9
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f9b8 	bl	80010e4 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7a:	f7ff f9b3 	bl	80010e4 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0cd      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d8c:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x552>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001da0:	4943      	ldr	r1, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x688>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff f99d 	bl	80010e4 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff f998 	bl	80010e4 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0b2      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x588>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dd0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d100      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5b4>
 8001dda:	e0a4      	b.n	8001f26 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d100      	bne.n	8001dea <HAL_RCC_OscConfig+0x5c2>
 8001de8:	e078      	b.n	8001edc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d14c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001df8:	492e      	ldr	r1, [pc, #184]	; (8001eb4 <HAL_RCC_OscConfig+0x68c>)
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f971 	bl	80010e4 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f96c 	bl	80010e4 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e086      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	049b      	lsls	r3, r3, #18
 8001e22:	4013      	ands	r3, r2
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_RCC_OscConfig+0x690>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0449      	lsls	r1, r1, #17
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff f93f 	bl	80010e4 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f93a 	bl	80010e4 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e054      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	049b      	lsls	r3, r3, #18
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x644>
 8001e8a:	e04c      	b.n	8001f26 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <HAL_RCC_OscConfig+0x68c>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff f924 	bl	80010e4 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x6a6>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	00001388 	.word	0x00001388
 8001eac:	efffffff 	.word	0xefffffff
 8001eb0:	fffeffff 	.word	0xfffeffff
 8001eb4:	feffffff 	.word	0xfeffffff
 8001eb8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f912 	bl	80010e4 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e02c      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x708>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	049b      	lsls	r3, r3, #18
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x694>
 8001eda:	e024      	b.n	8001f26 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e01f      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x708>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x708>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10e      	bne.n	8001f22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	220f      	movs	r2, #15
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	23f0      	movs	r3, #240	; 0xf0
 8001f16:	039b      	lsls	r3, r3, #14
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b008      	add	sp, #32
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0bf      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d911      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b5e      	ldr	r3, [pc, #376]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0a6      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d006      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f94:	21e0      	movs	r1, #224	; 0xe0
 8001f96:	00c9      	lsls	r1, r1, #3
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	22f0      	movs	r2, #240	; 0xf0
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d04c      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	029b      	lsls	r3, r3, #10
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d120      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07a      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	049b      	lsls	r3, r3, #18
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d114      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06e      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e062      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e05b      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2203      	movs	r2, #3
 8002016:	4393      	bics	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7ff f85e 	bl	80010e4 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202c:	e009      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff f859 	bl	80010e4 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e042      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	220c      	movs	r2, #12
 8002048:	401a      	ands	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1ec      	bne.n	800202e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d211      	bcs.n	8002086 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	4393      	bics	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x19c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e020      	b.n	80020c8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	4013      	ands	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_RCC_ClockConfig+0x1a8>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020a4:	f000 f820 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a8:	0001      	movs	r1, r0
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1a0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	220f      	movs	r2, #15
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1ac>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	000a      	movs	r2, r1
 80020ba:	40da      	lsrs	r2, r3
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1b0>)
 80020be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f7fe ffc9 	bl	8001058 <HAL_InitTick>
  
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	00001388 	.word	0x00001388
 80020dc:	fffff8ff 	.word	0xfffff8ff
 80020e0:	08006398 	.word	0x08006398
 80020e4:	20000000 	.word	0x20000000

080020e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	220c      	movs	r2, #12
 800210c:	4013      	ands	r3, r2
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d046      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002112:	d848      	bhi.n	80021a6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002114:	2b04      	cmp	r3, #4
 8002116:	d002      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x36>
 8002118:	2b08      	cmp	r3, #8
 800211a:	d003      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x3c>
 800211c:	e043      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002120:	613b      	str	r3, [r7, #16]
      break;
 8002122:	e043      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	0c9b      	lsrs	r3, r3, #18
 8002128:	220f      	movs	r2, #15
 800212a:	4013      	ands	r3, r2
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	220f      	movs	r2, #15
 8002138:	4013      	ands	r3, r2
 800213a:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	23c0      	movs	r3, #192	; 0xc0
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	401a      	ands	r2, r3
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	429a      	cmp	r2, r3
 800214e:	d109      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	481a      	ldr	r0, [pc, #104]	; (80021bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002154:	f7fd ffe0 	bl	8000118 <__udivsi3>
 8002158:	0003      	movs	r3, r0
 800215a:	001a      	movs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4353      	muls	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e01a      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	23c0      	movs	r3, #192	; 0xc0
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	401a      	ands	r2, r3
 800216c:	23c0      	movs	r3, #192	; 0xc0
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	429a      	cmp	r2, r3
 8002172:	d109      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	4814      	ldr	r0, [pc, #80]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002178:	f7fd ffce 	bl	8000118 <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	001a      	movs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4353      	muls	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e008      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <HAL_RCC_GetSysClockFreq+0xd4>)
 800218c:	f7fd ffc4 	bl	8000118 <__udivsi3>
 8002190:	0003      	movs	r3, r0
 8002192:	001a      	movs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4353      	muls	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	613b      	str	r3, [r7, #16]
      break;
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	e002      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetSysClockFreq+0xd4>)
 80021a8:	613b      	str	r3, [r7, #16]
      break;
 80021aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b006      	add	sp, #24
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	007a1200 	.word	0x007a1200
 80021c0:	080063b0 	.word	0x080063b0
 80021c4:	080063c0 	.word	0x080063c0
 80021c8:	02dc6c00 	.word	0x02dc6c00

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_RCC_GetHCLKFreq+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021e4:	f7ff fff2 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021e8:	0001      	movs	r1, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	2207      	movs	r2, #7
 80021f2:	4013      	ands	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	40d9      	lsrs	r1, r3
 80021fa:	000b      	movs	r3, r1
}    
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40021000 	.word	0x40021000
 8002208:	080063a8 	.word	0x080063a8

0800220c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	4013      	ands	r3, r2
 8002226:	d100      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002228:	e08e      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2017      	movs	r0, #23
 800222c:	183b      	adds	r3, r7, r0
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	4013      	ands	r3, r2
 800223c:	d110      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b6b      	ldr	r3, [pc, #428]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0549      	lsls	r1, r1, #21
 8002248:	430a      	orrs	r2, r1
 800224a:	61da      	str	r2, [r3, #28]
 800224c:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	055b      	lsls	r3, r3, #21
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	183b      	adds	r3, r7, r0
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d11a      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226c:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b5f      	ldr	r3, [pc, #380]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0049      	lsls	r1, r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe ff33 	bl	80010e4 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	e008      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002284:	f7fe ff2e 	bl	80010e4 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0a6      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a2:	4b52      	ldr	r3, [pc, #328]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d034      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d02c      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e2:	4945      	ldr	r1, [pc, #276]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fef5 	bl	80010e4 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fef0 	bl	80010e4 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	4a3c      	ldr	r2, [pc, #240]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e067      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d0f0      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a34      	ldr	r2, [pc, #208]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232e:	430a      	orrs	r2, r1
 8002330:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002332:	2317      	movs	r3, #23
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002342:	492f      	ldr	r1, [pc, #188]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002344:	400a      	ands	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d009      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	2203      	movs	r2, #3
 8002358:	4393      	bics	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002376:	4013      	ands	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002380:	430a      	orrs	r2, r1
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	02db      	lsls	r3, r3, #11
 800238c:	4013      	ands	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2220      	movs	r2, #32
 80023aa:	4013      	ands	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	2210      	movs	r2, #16
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023de:	430a      	orrs	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b006      	add	sp, #24
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	fffffcff 	.word	0xfffffcff
 80023f8:	fffeffff 	.word	0xfffeffff
 80023fc:	00001388 	.word	0x00001388
 8002400:	efffffff 	.word	0xefffffff
 8002404:	fffcffff 	.word	0xfffcffff
 8002408:	fff3ffff 	.word	0xfff3ffff

0800240c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e042      	b.n	80024a4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223d      	movs	r2, #61	; 0x3d
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223c      	movs	r2, #60	; 0x3c
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f7fe fc8f 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223d      	movs	r2, #61	; 0x3d
 800243e:	2102      	movs	r1, #2
 8002440:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	0019      	movs	r1, r3
 800244c:	0010      	movs	r0, r2
 800244e:	f000 fa03 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2246      	movs	r2, #70	; 0x46
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223e      	movs	r2, #62	; 0x3e
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223f      	movs	r2, #63	; 0x3f
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2241      	movs	r2, #65	; 0x41
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2242      	movs	r2, #66	; 0x42
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2243      	movs	r2, #67	; 0x43
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2244      	movs	r2, #68	; 0x44
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2245      	movs	r2, #69	; 0x45
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223d      	movs	r2, #61	; 0x3d
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e042      	b.n	8002544 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	223d      	movs	r2, #61	; 0x3d
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223c      	movs	r2, #60	; 0x3c
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f839 	bl	800254c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	223d      	movs	r2, #61	; 0x3d
 80024de:	2102      	movs	r1, #2
 80024e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	0019      	movs	r1, r3
 80024ec:	0010      	movs	r0, r2
 80024ee:	f000 f9b3 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2246      	movs	r2, #70	; 0x46
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	223e      	movs	r2, #62	; 0x3e
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223f      	movs	r2, #63	; 0x3f
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2241      	movs	r2, #65	; 0x41
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2242      	movs	r2, #66	; 0x42
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2243      	movs	r2, #67	; 0x43
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2244      	movs	r2, #68	; 0x44
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2245      	movs	r2, #69	; 0x45
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223d      	movs	r2, #61	; 0x3d
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <HAL_TIM_PWM_Start+0x22>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223e      	movs	r2, #62	; 0x3e
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	4193      	sbcs	r3, r2
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e01f      	b.n	80025be <HAL_TIM_PWM_Start+0x62>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d108      	bne.n	8002596 <HAL_TIM_PWM_Start+0x3a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223f      	movs	r2, #63	; 0x3f
 8002588:	5c9b      	ldrb	r3, [r3, r2]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	4193      	sbcs	r3, r2
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e013      	b.n	80025be <HAL_TIM_PWM_Start+0x62>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d108      	bne.n	80025ae <HAL_TIM_PWM_Start+0x52>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	4193      	sbcs	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e007      	b.n	80025be <HAL_TIM_PWM_Start+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	4193      	sbcs	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e074      	b.n	80026b0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <HAL_TIM_PWM_Start+0x7a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	223e      	movs	r2, #62	; 0x3e
 80025d0:	2102      	movs	r1, #2
 80025d2:	5499      	strb	r1, [r3, r2]
 80025d4:	e013      	b.n	80025fe <HAL_TIM_PWM_Start+0xa2>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x8a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	223f      	movs	r2, #63	; 0x3f
 80025e0:	2102      	movs	r1, #2
 80025e2:	5499      	strb	r1, [r3, r2]
 80025e4:	e00b      	b.n	80025fe <HAL_TIM_PWM_Start+0xa2>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x9a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	2102      	movs	r1, #2
 80025f2:	5499      	strb	r1, [r3, r2]
 80025f4:	e003      	b.n	80025fe <HAL_TIM_PWM_Start+0xa2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2241      	movs	r2, #65	; 0x41
 80025fa:	2102      	movs	r1, #2
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	0018      	movs	r0, r3
 8002608:	f000 fba2 	bl	8002d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <HAL_TIM_PWM_Start+0x15c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00e      	beq.n	8002634 <HAL_TIM_PWM_Start+0xd8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_TIM_PWM_Start+0x160>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_TIM_PWM_Start+0xd8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <HAL_TIM_PWM_Start+0x164>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_TIM_PWM_Start+0xd8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <HAL_TIM_PWM_Start+0x168>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_TIM_PWM_Start+0xdc>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_TIM_PWM_Start+0xde>
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0209      	lsls	r1, r1, #8
 800264c:	430a      	orrs	r2, r1
 800264e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <HAL_TIM_PWM_Start+0x15c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00f      	beq.n	800267a <HAL_TIM_PWM_Start+0x11e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	05db      	lsls	r3, r3, #23
 8002662:	429a      	cmp	r2, r3
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start+0x11e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_TIM_PWM_Start+0x16c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_Start+0x11e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_TIM_PWM_Start+0x160>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d010      	beq.n	80026ae <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e007      	b.n	80026ae <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800
 80026c8:	40000400 	.word	0x40000400

080026cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d8:	2317      	movs	r3, #23
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	223c      	movs	r2, #60	; 0x3c
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0ad      	b.n	800284a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	223c      	movs	r2, #60	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d100      	bne.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80026fc:	e076      	b.n	80027ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0c      	cmp	r3, #12
 8002702:	d900      	bls.n	8002706 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002704:	e095      	b.n	8002832 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d04e      	beq.n	80027aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d900      	bls.n	8002714 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002712:	e08e      	b.n	8002832 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x56>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d021      	beq.n	8002764 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002720:	e087      	b.n	8002832 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	0011      	movs	r1, r2
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f914 	bl	8002958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2108      	movs	r1, #8
 800273c:	430a      	orrs	r2, r1
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2104      	movs	r1, #4
 800274c:	438a      	bics	r2, r1
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      break;
 8002762:	e06b      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f97b 	bl	8002a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0109      	lsls	r1, r1, #4
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4931      	ldr	r1, [pc, #196]	; (8002854 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002790:	400a      	ands	r2, r1
 8002792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6999      	ldr	r1, [r3, #24]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	021a      	lsls	r2, r3, #8
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	619a      	str	r2, [r3, #24]
      break;
 80027a8:	e048      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f9dc 	bl	8002b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2108      	movs	r1, #8
 80027c4:	430a      	orrs	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2104      	movs	r1, #4
 80027d4:	438a      	bics	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69d9      	ldr	r1, [r3, #28]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	61da      	str	r2, [r3, #28]
      break;
 80027ea:	e027      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fa41 	bl	8002c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0109      	lsls	r1, r1, #4
 8002808:	430a      	orrs	r2, r1
 800280a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	490f      	ldr	r1, [pc, #60]	; (8002854 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002818:	400a      	ands	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69d9      	ldr	r1, [r3, #28]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
      break;
 8002830:	e004      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
      break;
 800283a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	223c      	movs	r2, #60	; 0x3c
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

  return status;
 8002844:	2317      	movs	r3, #23
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
}
 800284a:	0018      	movs	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	b006      	add	sp, #24
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	fffffbff 	.word	0xfffffbff

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a34      	ldr	r2, [pc, #208]	; (800293c <TIM_Base_SetConfig+0xe4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d008      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	429a      	cmp	r2, r3
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x2a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a30      	ldr	r2, [pc, #192]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2270      	movs	r2, #112	; 0x70
 8002886:	4393      	bics	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <TIM_Base_SetConfig+0xe4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d013      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00f      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <TIM_Base_SetConfig+0xec>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00b      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <TIM_Base_SetConfig+0xf4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0x76>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <TIM_Base_SetConfig+0xf8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <TIM_Base_SetConfig+0xfc>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	4393      	bics	r3, r2
 80028e6:	001a      	movs	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <TIM_Base_SetConfig+0xe4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00b      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <TIM_Base_SetConfig+0xf4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <TIM_Base_SetConfig+0xce>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <TIM_Base_SetConfig+0xf8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d103      	bne.n	800292e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	615a      	str	r2, [r3, #20]
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40002000 	.word	0x40002000
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800
 8002954:	fffffcff 	.word	0xfffffcff

08002958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2201      	movs	r2, #1
 8002968:	4393      	bics	r3, r2
 800296a:	001a      	movs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2270      	movs	r2, #112	; 0x70
 8002986:	4393      	bics	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2203      	movs	r2, #3
 800298e:	4393      	bics	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2202      	movs	r2, #2
 80029a0:	4393      	bics	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <TIM_OC1_SetConfig+0xf8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_OC1_SetConfig+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <TIM_OC1_SetConfig+0xfc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_OC1_SetConfig+0x76>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <TIM_OC1_SetConfig+0x100>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_OC1_SetConfig+0x76>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <TIM_OC1_SetConfig+0x104>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2208      	movs	r2, #8
 80029d2:	4393      	bics	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2204      	movs	r2, #4
 80029e4:	4393      	bics	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <TIM_OC1_SetConfig+0xf8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <TIM_OC1_SetConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <TIM_OC1_SetConfig+0xfc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_OC1_SetConfig+0xb0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <TIM_OC1_SetConfig+0x100>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC1_SetConfig+0xb0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <TIM_OC1_SetConfig+0x104>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <TIM_OC1_SetConfig+0x108>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <TIM_OC1_SetConfig+0x10c>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800
 8002a60:	fffffeff 	.word	0xfffffeff
 8002a64:	fffffdff 	.word	0xfffffdff

08002a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2210      	movs	r2, #16
 8002a78:	4393      	bics	r3, r2
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a2e      	ldr	r2, [pc, #184]	; (8002b50 <TIM_OC2_SetConfig+0xe8>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <TIM_OC2_SetConfig+0xec>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <TIM_OC2_SetConfig+0xf0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10d      	bne.n	8002ae6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	4393      	bics	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2240      	movs	r2, #64	; 0x40
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <TIM_OC2_SetConfig+0xf0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_OC2_SetConfig+0x9e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <TIM_OC2_SetConfig+0xf4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_OC2_SetConfig+0x9e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <TIM_OC2_SetConfig+0xf8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_OC2_SetConfig+0x9e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <TIM_OC2_SetConfig+0xfc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d113      	bne.n	8002b2e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <TIM_OC2_SetConfig+0x100>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <TIM_OC2_SetConfig+0x104>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	621a      	str	r2, [r3, #32]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	ffff8fff 	.word	0xffff8fff
 8002b54:	fffffcff 	.word	0xfffffcff
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40014800 	.word	0x40014800
 8002b68:	fffffbff 	.word	0xfffffbff
 8002b6c:	fffff7ff 	.word	0xfffff7ff

08002b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <TIM_OC3_SetConfig+0xe4>)
 8002b80:	401a      	ands	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2270      	movs	r2, #112	; 0x70
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <TIM_OC3_SetConfig+0xe8>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a24      	ldr	r2, [pc, #144]	; (8002c5c <TIM_OC3_SetConfig+0xec>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10d      	bne.n	8002bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4a23      	ldr	r2, [pc, #140]	; (8002c60 <TIM_OC3_SetConfig+0xf0>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <TIM_OC3_SetConfig+0xf4>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <TIM_OC3_SetConfig+0xec>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_OC3_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <TIM_OC3_SetConfig+0xf8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_OC3_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <TIM_OC3_SetConfig+0xfc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_OC3_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <TIM_OC3_SetConfig+0x100>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d113      	bne.n	8002c32 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <TIM_OC3_SetConfig+0x104>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <TIM_OC3_SetConfig+0x108>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	621a      	str	r2, [r3, #32]
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fffffeff 	.word	0xfffffeff
 8002c58:	fffffdff 	.word	0xfffffdff
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	fffff7ff 	.word	0xfffff7ff
 8002c64:	fffffbff 	.word	0xfffffbff
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800
 8002c74:	ffffefff 	.word	0xffffefff
 8002c78:	ffffdfff 	.word	0xffffdfff

08002c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <TIM_OC4_SetConfig+0xb0>)
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <TIM_OC4_SetConfig+0xb4>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <TIM_OC4_SetConfig+0xb8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <TIM_OC4_SetConfig+0xbc>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	031b      	lsls	r3, r3, #12
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <TIM_OC4_SetConfig+0xc0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <TIM_OC4_SetConfig+0x78>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <TIM_OC4_SetConfig+0xc4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <TIM_OC4_SetConfig+0x78>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <TIM_OC4_SetConfig+0xc8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_OC4_SetConfig+0x78>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <TIM_OC4_SetConfig+0xcc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <TIM_OC4_SetConfig+0xd0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	ffffefff 	.word	0xffffefff
 8002d30:	ffff8fff 	.word	0xffff8fff
 8002d34:	fffffcff 	.word	0xfffffcff
 8002d38:	ffffdfff 	.word	0xffffdfff
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800
 8002d4c:	ffffbfff 	.word	0xffffbfff

08002d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	221f      	movs	r2, #31
 8002d60:	4013      	ands	r3, r2
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	43d2      	mvns	r2, r2
 8002d72:	401a      	ands	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	211f      	movs	r1, #31
 8002d80:	400b      	ands	r3, r1
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4099      	lsls	r1, r3
 8002d86:	000b      	movs	r3, r1
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e044      	b.n	8002e34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d107      	bne.n	8002dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2278      	movs	r2, #120	; 0x78
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7fe f841 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2224      	movs	r2, #36	; 0x24
 8002dc6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f830 	bl	8002e40 <UART_SetConfig>
 8002de0:	0003      	movs	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e024      	b.n	8002e34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 fa0b 	bl	8003210 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	490d      	ldr	r1, [pc, #52]	; (8002e3c <HAL_UART_Init+0xa4>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	212a      	movs	r1, #42	; 0x2a
 8002e16:	438a      	bics	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 faa3 	bl	8003378 <UART_CheckIdleState>
 8002e32:	0003      	movs	r3, r0
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	ffffb7ff 	.word	0xffffb7ff

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e48:	231e      	movs	r3, #30
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4abe      	ldr	r2, [pc, #760]	; (8003168 <UART_SetConfig+0x328>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4ab9      	ldr	r2, [pc, #740]	; (800316c <UART_SetConfig+0x32c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4ab0      	ldr	r2, [pc, #704]	; (8003170 <UART_SetConfig+0x330>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4aac      	ldr	r2, [pc, #688]	; (8003174 <UART_SetConfig+0x334>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d127      	bne.n	8002f16 <UART_SetConfig+0xd6>
 8002ec6:	4bac      	ldr	r3, [pc, #688]	; (8003178 <UART_SetConfig+0x338>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	2203      	movs	r2, #3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d00d      	beq.n	8002eee <UART_SetConfig+0xae>
 8002ed2:	d81b      	bhi.n	8002f0c <UART_SetConfig+0xcc>
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d014      	beq.n	8002f02 <UART_SetConfig+0xc2>
 8002ed8:	d818      	bhi.n	8002f0c <UART_SetConfig+0xcc>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <UART_SetConfig+0xa4>
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d00a      	beq.n	8002ef8 <UART_SetConfig+0xb8>
 8002ee2:	e013      	b.n	8002f0c <UART_SetConfig+0xcc>
 8002ee4:	231f      	movs	r3, #31
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e0bd      	b.n	800306a <UART_SetConfig+0x22a>
 8002eee:	231f      	movs	r3, #31
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e0b8      	b.n	800306a <UART_SetConfig+0x22a>
 8002ef8:	231f      	movs	r3, #31
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2204      	movs	r2, #4
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e0b3      	b.n	800306a <UART_SetConfig+0x22a>
 8002f02:	231f      	movs	r3, #31
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	2208      	movs	r2, #8
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e0ae      	b.n	800306a <UART_SetConfig+0x22a>
 8002f0c:	231f      	movs	r3, #31
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2210      	movs	r2, #16
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e0a9      	b.n	800306a <UART_SetConfig+0x22a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a98      	ldr	r2, [pc, #608]	; (800317c <UART_SetConfig+0x33c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d134      	bne.n	8002f8a <UART_SetConfig+0x14a>
 8002f20:	4b95      	ldr	r3, [pc, #596]	; (8003178 <UART_SetConfig+0x338>)
 8002f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f24:	23c0      	movs	r3, #192	; 0xc0
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	22c0      	movs	r2, #192	; 0xc0
 8002f2c:	0292      	lsls	r2, r2, #10
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d017      	beq.n	8002f62 <UART_SetConfig+0x122>
 8002f32:	22c0      	movs	r2, #192	; 0xc0
 8002f34:	0292      	lsls	r2, r2, #10
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d822      	bhi.n	8002f80 <UART_SetConfig+0x140>
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	0292      	lsls	r2, r2, #10
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d019      	beq.n	8002f76 <UART_SetConfig+0x136>
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	0292      	lsls	r2, r2, #10
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d81a      	bhi.n	8002f80 <UART_SetConfig+0x140>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <UART_SetConfig+0x118>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	0252      	lsls	r2, r2, #9
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00a      	beq.n	8002f6c <UART_SetConfig+0x12c>
 8002f56:	e013      	b.n	8002f80 <UART_SetConfig+0x140>
 8002f58:	231f      	movs	r3, #31
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e083      	b.n	800306a <UART_SetConfig+0x22a>
 8002f62:	231f      	movs	r3, #31
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e07e      	b.n	800306a <UART_SetConfig+0x22a>
 8002f6c:	231f      	movs	r3, #31
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2204      	movs	r2, #4
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e079      	b.n	800306a <UART_SetConfig+0x22a>
 8002f76:	231f      	movs	r3, #31
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e074      	b.n	800306a <UART_SetConfig+0x22a>
 8002f80:	231f      	movs	r3, #31
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2210      	movs	r2, #16
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e06f      	b.n	800306a <UART_SetConfig+0x22a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <UART_SetConfig+0x340>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d134      	bne.n	8002ffe <UART_SetConfig+0x1be>
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <UART_SetConfig+0x338>)
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	23c0      	movs	r3, #192	; 0xc0
 8002f9a:	031b      	lsls	r3, r3, #12
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	22c0      	movs	r2, #192	; 0xc0
 8002fa0:	0312      	lsls	r2, r2, #12
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d017      	beq.n	8002fd6 <UART_SetConfig+0x196>
 8002fa6:	22c0      	movs	r2, #192	; 0xc0
 8002fa8:	0312      	lsls	r2, r2, #12
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d822      	bhi.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	0312      	lsls	r2, r2, #12
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <UART_SetConfig+0x1aa>
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0312      	lsls	r2, r2, #12
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d81a      	bhi.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <UART_SetConfig+0x18c>
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	02d2      	lsls	r2, r2, #11
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00a      	beq.n	8002fe0 <UART_SetConfig+0x1a0>
 8002fca:	e013      	b.n	8002ff4 <UART_SetConfig+0x1b4>
 8002fcc:	231f      	movs	r3, #31
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e049      	b.n	800306a <UART_SetConfig+0x22a>
 8002fd6:	231f      	movs	r3, #31
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2202      	movs	r2, #2
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e044      	b.n	800306a <UART_SetConfig+0x22a>
 8002fe0:	231f      	movs	r3, #31
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e03f      	b.n	800306a <UART_SetConfig+0x22a>
 8002fea:	231f      	movs	r3, #31
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2208      	movs	r2, #8
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e03a      	b.n	800306a <UART_SetConfig+0x22a>
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e035      	b.n	800306a <UART_SetConfig+0x22a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a60      	ldr	r2, [pc, #384]	; (8003184 <UART_SetConfig+0x344>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d104      	bne.n	8003012 <UART_SetConfig+0x1d2>
 8003008:	231f      	movs	r3, #31
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e02b      	b.n	800306a <UART_SetConfig+0x22a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <UART_SetConfig+0x348>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d104      	bne.n	8003026 <UART_SetConfig+0x1e6>
 800301c:	231f      	movs	r3, #31
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e021      	b.n	800306a <UART_SetConfig+0x22a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a58      	ldr	r2, [pc, #352]	; (800318c <UART_SetConfig+0x34c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d104      	bne.n	800303a <UART_SetConfig+0x1fa>
 8003030:	231f      	movs	r3, #31
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e017      	b.n	800306a <UART_SetConfig+0x22a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a54      	ldr	r2, [pc, #336]	; (8003190 <UART_SetConfig+0x350>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d104      	bne.n	800304e <UART_SetConfig+0x20e>
 8003044:	231f      	movs	r3, #31
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e00d      	b.n	800306a <UART_SetConfig+0x22a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a50      	ldr	r2, [pc, #320]	; (8003194 <UART_SetConfig+0x354>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d104      	bne.n	8003062 <UART_SetConfig+0x222>
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e003      	b.n	800306a <UART_SetConfig+0x22a>
 8003062:	231f      	movs	r3, #31
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2210      	movs	r2, #16
 8003068:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	429a      	cmp	r2, r3
 8003074:	d15c      	bne.n	8003130 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d015      	beq.n	80030ac <UART_SetConfig+0x26c>
 8003080:	dc18      	bgt.n	80030b4 <UART_SetConfig+0x274>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00d      	beq.n	80030a2 <UART_SetConfig+0x262>
 8003086:	dc15      	bgt.n	80030b4 <UART_SetConfig+0x274>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <UART_SetConfig+0x252>
 800308c:	2b02      	cmp	r3, #2
 800308e:	d005      	beq.n	800309c <UART_SetConfig+0x25c>
 8003090:	e010      	b.n	80030b4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003092:	f7ff f8a5 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003096:	0003      	movs	r3, r0
 8003098:	61bb      	str	r3, [r7, #24]
        break;
 800309a:	e012      	b.n	80030c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <UART_SetConfig+0x358>)
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e00f      	b.n	80030c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7ff f821 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	0003      	movs	r3, r0
 80030a8:	61bb      	str	r3, [r7, #24]
        break;
 80030aa:	e00a      	b.n	80030c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	61bb      	str	r3, [r7, #24]
        break;
 80030b2:	e006      	b.n	80030c2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b8:	231e      	movs	r3, #30
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
        break;
 80030c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d100      	bne.n	80030ca <UART_SetConfig+0x28a>
 80030c8:	e095      	b.n	80031f6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	005a      	lsls	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	18d2      	adds	r2, r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f7fd f81b 	bl	8000118 <__udivsi3>
 80030e2:	0003      	movs	r3, r0
 80030e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d91c      	bls.n	8003126 <UART_SetConfig+0x2e6>
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	025b      	lsls	r3, r3, #9
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d217      	bcs.n	8003126 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	200e      	movs	r0, #14
 80030fc:	183b      	adds	r3, r7, r0
 80030fe:	210f      	movs	r1, #15
 8003100:	438a      	bics	r2, r1
 8003102:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	2207      	movs	r2, #7
 800310c:	4013      	ands	r3, r2
 800310e:	b299      	uxth	r1, r3
 8003110:	183b      	adds	r3, r7, r0
 8003112:	183a      	adds	r2, r7, r0
 8003114:	8812      	ldrh	r2, [r2, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	183a      	adds	r2, r7, r0
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	e067      	b.n	80031f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003126:	231e      	movs	r3, #30
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e062      	b.n	80031f6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003130:	231f      	movs	r3, #31
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d030      	beq.n	800319c <UART_SetConfig+0x35c>
 800313a:	dc33      	bgt.n	80031a4 <UART_SetConfig+0x364>
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00d      	beq.n	800315c <UART_SetConfig+0x31c>
 8003140:	dc30      	bgt.n	80031a4 <UART_SetConfig+0x364>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x30c>
 8003146:	2b02      	cmp	r3, #2
 8003148:	d005      	beq.n	8003156 <UART_SetConfig+0x316>
 800314a:	e02b      	b.n	80031a4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff f848 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003150:	0003      	movs	r3, r0
 8003152:	61bb      	str	r3, [r7, #24]
        break;
 8003154:	e02d      	b.n	80031b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <UART_SetConfig+0x358>)
 8003158:	61bb      	str	r3, [r7, #24]
        break;
 800315a:	e02a      	b.n	80031b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315c:	f7fe ffc4 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003160:	0003      	movs	r3, r0
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e025      	b.n	80031b2 <UART_SetConfig+0x372>
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	ffffcfff 	.word	0xffffcfff
 8003170:	fffff4ff 	.word	0xfffff4ff
 8003174:	40013800 	.word	0x40013800
 8003178:	40021000 	.word	0x40021000
 800317c:	40004400 	.word	0x40004400
 8003180:	40004800 	.word	0x40004800
 8003184:	40004c00 	.word	0x40004c00
 8003188:	40005000 	.word	0x40005000
 800318c:	40011400 	.word	0x40011400
 8003190:	40011800 	.word	0x40011800
 8003194:	40011c00 	.word	0x40011c00
 8003198:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
        break;
 80031a2:	e006      	b.n	80031b2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a8:	231e      	movs	r3, #30
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
        break;
 80031b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01e      	beq.n	80031f6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	085a      	lsrs	r2, r3, #1
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	18d2      	adds	r2, r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f7fc ffa5 	bl	8000118 <__udivsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d90a      	bls.n	80031ee <UART_SetConfig+0x3ae>
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	025b      	lsls	r3, r3, #9
 80031de:	429a      	cmp	r2, r3
 80031e0:	d205      	bcs.n	80031ee <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e003      	b.n	80031f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80031ee:	231e      	movs	r3, #30
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003202:	231e      	movs	r3, #30
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b008      	add	sp, #32
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <UART_AdvFeatureConfig+0x144>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2202      	movs	r2, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d00b      	beq.n	800325c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a43      	ldr	r2, [pc, #268]	; (8003358 <UART_AdvFeatureConfig+0x148>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2204      	movs	r2, #4
 8003262:	4013      	ands	r3, r2
 8003264:	d00b      	beq.n	800327e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a3b      	ldr	r2, [pc, #236]	; (800335c <UART_AdvFeatureConfig+0x14c>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2208      	movs	r2, #8
 8003284:	4013      	ands	r3, r2
 8003286:	d00b      	beq.n	80032a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a34      	ldr	r2, [pc, #208]	; (8003360 <UART_AdvFeatureConfig+0x150>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2210      	movs	r2, #16
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <UART_AdvFeatureConfig+0x154>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	2220      	movs	r2, #32
 80032c8:	4013      	ands	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <UART_AdvFeatureConfig+0x158>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	4013      	ands	r3, r2
 80032ec:	d01d      	beq.n	800332a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <UART_AdvFeatureConfig+0x15c>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	035b      	lsls	r3, r3, #13
 800330e:	429a      	cmp	r2, r3
 8003310:	d10b      	bne.n	800332a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <UART_AdvFeatureConfig+0x160>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	4013      	ands	r3, r2
 8003332:	d00b      	beq.n	800334c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <UART_AdvFeatureConfig+0x164>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}
 8003354:	fffdffff 	.word	0xfffdffff
 8003358:	fffeffff 	.word	0xfffeffff
 800335c:	fffbffff 	.word	0xfffbffff
 8003360:	ffff7fff 	.word	0xffff7fff
 8003364:	ffffefff 	.word	0xffffefff
 8003368:	ffffdfff 	.word	0xffffdfff
 800336c:	ffefffff 	.word	0xffefffff
 8003370:	ff9fffff 	.word	0xff9fffff
 8003374:	fff7ffff 	.word	0xfff7ffff

08003378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b092      	sub	sp, #72	; 0x48
 800337c:	af02      	add	r7, sp, #8
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2284      	movs	r2, #132	; 0x84
 8003384:	2100      	movs	r1, #0
 8003386:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003388:	f7fd feac 	bl	80010e4 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2208      	movs	r2, #8
 8003398:	4013      	ands	r3, r2
 800339a:	2b08      	cmp	r3, #8
 800339c:	d12c      	bne.n	80033f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0391      	lsls	r1, r2, #14
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4a46      	ldr	r2, [pc, #280]	; (80034c0 <UART_CheckIdleState+0x148>)
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f000 f88c 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d021      	beq.n	80033f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b4:	f3ef 8310 	mrs	r3, PRIMASK
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033be:	2301      	movs	r3, #1
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	438a      	bics	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2278      	movs	r2, #120	; 0x78
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e05f      	b.n	80034b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2204      	movs	r2, #4
 8003400:	4013      	ands	r3, r2
 8003402:	2b04      	cmp	r3, #4
 8003404:	d146      	bne.n	8003494 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	03d1      	lsls	r1, r2, #15
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <UART_CheckIdleState+0x148>)
 8003410:	9200      	str	r2, [sp, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	f000 f858 	bl	80034c8 <UART_WaitOnFlagUntilTimeout>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d03b      	beq.n	8003494 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	60fb      	str	r3, [r7, #12]
  return(result);
 8003422:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
 8003426:	2301      	movs	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f383 8810 	msr	PRIMASK, r3
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4921      	ldr	r1, [pc, #132]	; (80034c4 <UART_CheckIdleState+0x14c>)
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	61bb      	str	r3, [r7, #24]
  return(result);
 8003454:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
 8003458:	2301      	movs	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2101      	movs	r1, #1
 8003470:	438a      	bics	r2, r1
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	2120      	movs	r1, #32
 8003486:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2278      	movs	r2, #120	; 0x78
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e011      	b.n	80034b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	2120      	movs	r1, #32
 80034a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2278      	movs	r2, #120	; 0x78
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b010      	add	sp, #64	; 0x40
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	01ffffff 	.word	0x01ffffff
 80034c4:	fffffedf 	.word	0xfffffedf

080034c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	1dfb      	adds	r3, r7, #7
 80034d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d8:	e04b      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3301      	adds	r3, #1
 80034de:	d048      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fd fe00 	bl	80010e4 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04b      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2204      	movs	r2, #4
 8003502:	4013      	ands	r3, r2
 8003504:	d035      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	2208      	movs	r2, #8
 800350e:	4013      	ands	r3, r2
 8003510:	2b08      	cmp	r3, #8
 8003512:	d111      	bne.n	8003538 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f83c 	bl	800359c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2284      	movs	r2, #132	; 0x84
 8003528:	2108      	movs	r1, #8
 800352a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2278      	movs	r2, #120	; 0x78
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e02c      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	401a      	ands	r2, r3
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	429a      	cmp	r2, r3
 800354a:	d112      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	0018      	movs	r0, r3
 800355a:	f000 f81f 	bl	800359c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2284      	movs	r2, #132	; 0x84
 8003562:	2120      	movs	r1, #32
 8003564:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2278      	movs	r2, #120	; 0x78
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	425a      	negs	r2, r3
 8003582:	4153      	adcs	r3, r2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	001a      	movs	r2, r3
 8003588:	1dfb      	adds	r3, r7, #7
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d0a4      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	617b      	str	r3, [r7, #20]
  return(result);
 80035aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4926      	ldr	r1, [pc, #152]	; (8003660 <UART_EndRxTransfer+0xc4>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	623b      	str	r3, [r7, #32]
  return(result);
 80035dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
 80035e0:	2301      	movs	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	438a      	bics	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360c:	2b01      	cmp	r3, #1
 800360e:	d118      	bne.n	8003642 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	60bb      	str	r3, [r7, #8]
  return(result);
 8003616:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	2301      	movs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2110      	movs	r1, #16
 8003632:	438a      	bics	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	2120      	movs	r1, #32
 8003648:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b00e      	add	sp, #56	; 0x38
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	fffffedf 	.word	0xfffffedf

08003664 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003664:	b5b0      	push	{r4, r5, r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800366e:	2316      	movs	r3, #22
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d000      	beq.n	8003680 <eMBFuncReadCoils+0x1c>
 800367e:	e091      	b.n	80037a4 <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3301      	adds	r3, #1
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	2014      	movs	r0, #20
 800368a:	183b      	adds	r3, r7, r0
 800368c:	0212      	lsls	r2, r2, #8
 800368e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3302      	adds	r3, #2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b299      	uxth	r1, r3
 8003698:	183b      	adds	r3, r7, r0
 800369a:	183a      	adds	r2, r7, r0
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	183b      	adds	r3, r7, r0
 80036a8:	3201      	adds	r2, #1
 80036aa:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3303      	adds	r3, #3
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	2012      	movs	r0, #18
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	0212      	lsls	r2, r2, #8
 80036ba:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b299      	uxth	r1, r3
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	183a      	adds	r2, r7, r0
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d061      	beq.n	800379a <eMBFuncReadCoils+0x136>
 80036d6:	0001      	movs	r1, r0
 80036d8:	183b      	adds	r3, r7, r0
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	23fa      	movs	r3, #250	; 0xfa
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d25a      	bcs.n	800379a <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8003704:	187b      	adds	r3, r7, r1
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	2207      	movs	r2, #7
 800370a:	4013      	ands	r3, r2
 800370c:	d009      	beq.n	8003722 <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800370e:	187b      	adds	r3, r7, r1
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	b29b      	uxth	r3, r3
 8003716:	b2da      	uxtb	r2, r3
 8003718:	2317      	movs	r3, #23
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	3201      	adds	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e007      	b.n	8003732 <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8003722:	2312      	movs	r3, #18
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	08db      	lsrs	r3, r3, #3
 800372a:	b29a      	uxth	r2, r3
 800372c:	2317      	movs	r3, #23
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	60fa      	str	r2, [r7, #12]
 8003738:	2217      	movs	r2, #23
 800373a:	18ba      	adds	r2, r7, r2
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 800374c:	250b      	movs	r5, #11
 800374e:	197c      	adds	r4, r7, r5
 8003750:	2312      	movs	r3, #18
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	2314      	movs	r3, #20
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	8819      	ldrh	r1, [r3, #0]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	f001 f80e 	bl	8004780 <eMBRegCoilsCB>
 8003764:	0003      	movs	r3, r0
 8003766:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003768:	197b      	adds	r3, r7, r5
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003770:	2316      	movs	r3, #22
 8003772:	18fc      	adds	r4, r7, r3
 8003774:	197b      	adds	r3, r7, r5
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fcea 	bl	8004152 <prveMBError2Exception>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003782:	e013      	b.n	80037ac <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	2317      	movs	r3, #23
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	18d3      	adds	r3, r2, r3
 8003792:	b29a      	uxth	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003798:	e008      	b.n	80037ac <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800379a:	2316      	movs	r3, #22
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2203      	movs	r2, #3
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e003      	b.n	80037ac <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80037a4:	2316      	movs	r3, #22
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2203      	movs	r2, #3
 80037aa:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80037ac:	2316      	movs	r3, #22
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bdb0      	pop	{r4, r5, r7, pc}

080037ba <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80037ba:	b5b0      	push	{r4, r5, r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80037c4:	230f      	movs	r3, #15
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d155      	bne.n	8003880 <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3301      	adds	r3, #1
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	200c      	movs	r0, #12
 80037de:	183b      	adds	r3, r7, r0
 80037e0:	0212      	lsls	r2, r2, #8
 80037e2:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3302      	adds	r3, #2
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b299      	uxth	r1, r3
 80037ec:	183b      	adds	r3, r7, r0
 80037ee:	183a      	adds	r2, r7, r0
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80037f6:	183b      	adds	r3, r7, r0
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	183b      	adds	r3, r7, r0
 80037fc:	3201      	adds	r2, #1
 80037fe:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d135      	bne.n	8003876 <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003810:	2bff      	cmp	r3, #255	; 0xff
 8003812:	d004      	beq.n	800381e <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3303      	adds	r3, #3
 8003818:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12b      	bne.n	8003876 <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 800381e:	2108      	movs	r1, #8
 8003820:	187b      	adds	r3, r7, r1
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3303      	adds	r3, #3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2bff      	cmp	r3, #255	; 0xff
 800382e:	d103      	bne.n	8003838 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8003830:	187b      	adds	r3, r7, r1
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e003      	b.n	8003840 <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8003838:	2308      	movs	r3, #8
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8003840:	250b      	movs	r5, #11
 8003842:	197c      	adds	r4, r7, r5
 8003844:	230c      	movs	r3, #12
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	8819      	ldrh	r1, [r3, #0]
 800384a:	2308      	movs	r3, #8
 800384c:	18f8      	adds	r0, r7, r3
 800384e:	2301      	movs	r3, #1
 8003850:	2201      	movs	r2, #1
 8003852:	f000 ff95 	bl	8004780 <eMBRegCoilsCB>
 8003856:	0003      	movs	r3, r0
 8003858:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800385a:	197b      	adds	r3, r7, r5
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d012      	beq.n	8003888 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003862:	230f      	movs	r3, #15
 8003864:	18fc      	adds	r4, r7, r3
 8003866:	197b      	adds	r3, r7, r5
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fc71 	bl	8004152 <prveMBError2Exception>
 8003870:	0003      	movs	r3, r0
 8003872:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003874:	e008      	b.n	8003888 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003876:	230f      	movs	r3, #15
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2203      	movs	r2, #3
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e003      	b.n	8003888 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2203      	movs	r2, #3
 8003886:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bdb0      	pop	{r4, r5, r7, pc}

08003896 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003896:	b5b0      	push	{r4, r5, r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80038a0:	230e      	movs	r3, #14
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d800      	bhi.n	80038b2 <eMBFuncWriteMultipleCoils+0x1c>
 80038b0:	e07a      	b.n	80039a8 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3301      	adds	r3, #1
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	200c      	movs	r0, #12
 80038bc:	183b      	adds	r3, r7, r0
 80038be:	0212      	lsls	r2, r2, #8
 80038c0:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3302      	adds	r3, #2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b299      	uxth	r1, r3
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	183a      	adds	r2, r7, r0
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80038d4:	183b      	adds	r3, r7, r0
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	183b      	adds	r3, r7, r0
 80038da:	3201      	adds	r2, #1
 80038dc:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3303      	adds	r3, #3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	200a      	movs	r0, #10
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	0212      	lsls	r2, r2, #8
 80038ec:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b299      	uxth	r1, r3
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	183a      	adds	r2, r7, r0
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003900:	2309      	movs	r3, #9
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	7952      	ldrb	r2, [r2, #5]
 8003908:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 800390a:	183b      	adds	r3, r7, r0
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	2207      	movs	r2, #7
 8003910:	4013      	ands	r3, r2
 8003912:	d009      	beq.n	8003928 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8003914:	183b      	adds	r3, r7, r0
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	b29b      	uxth	r3, r3
 800391c:	b2da      	uxtb	r2, r3
 800391e:	230f      	movs	r3, #15
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	3201      	adds	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8003928:	230a      	movs	r3, #10
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	b29a      	uxth	r2, r3
 8003932:	230f      	movs	r3, #15
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8003938:	210a      	movs	r1, #10
 800393a:	187b      	adds	r3, r7, r1
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02d      	beq.n	800399e <eMBFuncWriteMultipleCoils+0x108>
 8003942:	187b      	adds	r3, r7, r1
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	23f6      	movs	r3, #246	; 0xf6
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	429a      	cmp	r2, r3
 800394c:	d827      	bhi.n	800399e <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800394e:	230f      	movs	r3, #15
 8003950:	18fa      	adds	r2, r7, r3
 8003952:	2309      	movs	r3, #9
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d11f      	bne.n	800399e <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1d98      	adds	r0, r3, #6
 8003962:	2508      	movs	r5, #8
 8003964:	197c      	adds	r4, r7, r5
 8003966:	187b      	adds	r3, r7, r1
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	230c      	movs	r3, #12
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	8819      	ldrh	r1, [r3, #0]
 8003970:	2301      	movs	r3, #1
 8003972:	f000 ff05 	bl	8004780 <eMBRegCoilsCB>
 8003976:	0003      	movs	r3, r0
 8003978:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800397a:	197b      	adds	r3, r7, r5
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003982:	230e      	movs	r3, #14
 8003984:	18fc      	adds	r4, r7, r3
 8003986:	197b      	adds	r3, r7, r5
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	0018      	movs	r0, r3
 800398c:	f000 fbe1 	bl	8004152 <prveMBError2Exception>
 8003990:	0003      	movs	r3, r0
 8003992:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003994:	e00c      	b.n	80039b0 <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2205      	movs	r2, #5
 800399a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800399c:	e008      	b.n	80039b0 <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800399e:	230e      	movs	r3, #14
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	2203      	movs	r2, #3
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e003      	b.n	80039b0 <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80039a8:	230e      	movs	r3, #14
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2203      	movs	r2, #3
 80039ae:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80039b0:	230e      	movs	r3, #14
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	781b      	ldrb	r3, [r3, #0]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bdb0      	pop	{r4, r5, r7, pc}

080039be <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80039be:	b5b0      	push	{r4, r5, r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80039c8:	2316      	movs	r3, #22
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d000      	beq.n	80039da <eMBFuncReadDiscreteInputs+0x1c>
 80039d8:	e091      	b.n	8003afe <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3301      	adds	r3, #1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	2014      	movs	r0, #20
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	0212      	lsls	r2, r2, #8
 80039e8:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3302      	adds	r3, #2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b299      	uxth	r1, r3
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	183a      	adds	r2, r7, r0
 80039f6:	8812      	ldrh	r2, [r2, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	3201      	adds	r2, #1
 8003a04:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3303      	adds	r3, #3
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	2012      	movs	r0, #18
 8003a10:	183b      	adds	r3, r7, r0
 8003a12:	0212      	lsls	r2, r2, #8
 8003a14:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	183a      	adds	r2, r7, r0
 8003a22:	8812      	ldrh	r2, [r2, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d061      	beq.n	8003af4 <eMBFuncReadDiscreteInputs+0x136>
 8003a30:	0001      	movs	r1, r0
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	23fa      	movs	r3, #250	; 0xfa
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d25a      	bcs.n	8003af4 <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	60fa      	str	r2, [r7, #12]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2207      	movs	r2, #7
 8003a64:	4013      	ands	r3, r2
 8003a66:	d009      	beq.n	8003a7c <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	08db      	lsrs	r3, r3, #3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	2317      	movs	r3, #23
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	3201      	adds	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	e007      	b.n	8003a8c <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8003a7c:	2312      	movs	r3, #18
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	2317      	movs	r3, #23
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	60fa      	str	r2, [r7, #12]
 8003a92:	2217      	movs	r2, #23
 8003a94:	18ba      	adds	r2, r7, r2
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8003aa6:	250b      	movs	r5, #11
 8003aa8:	197c      	adds	r4, r7, r5
 8003aaa:	2312      	movs	r3, #18
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	2314      	movs	r3, #20
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	8819      	ldrh	r1, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 fef1 	bl	80048a0 <eMBRegDiscreteCB>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003ac2:	197b      	adds	r3, r7, r5
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003aca:	2316      	movs	r3, #22
 8003acc:	18fc      	adds	r4, r7, r3
 8003ace:	197b      	adds	r3, r7, r5
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fb3d 	bl	8004152 <prveMBError2Exception>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003adc:	e013      	b.n	8003b06 <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	2317      	movs	r3, #23
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003af2:	e008      	b.n	8003b06 <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003af4:	2316      	movs	r3, #22
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2203      	movs	r2, #3
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e003      	b.n	8003b06 <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003afe:	2316      	movs	r3, #22
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2203      	movs	r2, #3
 8003b04:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8003b06:	2316      	movs	r3, #22
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bdb0      	pop	{r4, r5, r7, pc}

08003b14 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8003b1e:	260f      	movs	r6, #15
 8003b20:	19bb      	adds	r3, r7, r6
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d12f      	bne.n	8003b8e <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3301      	adds	r3, #1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	200c      	movs	r0, #12
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	0212      	lsls	r2, r2, #8
 8003b3c:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3302      	adds	r3, #2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b299      	uxth	r1, r3
 8003b46:	183b      	adds	r3, r7, r0
 8003b48:	183a      	adds	r2, r7, r0
 8003b4a:	8812      	ldrh	r2, [r2, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	0001      	movs	r1, r0
 8003b56:	183b      	adds	r3, r7, r0
 8003b58:	3201      	adds	r2, #1
 8003b5a:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1cd8      	adds	r0, r3, #3
 8003b60:	250b      	movs	r5, #11
 8003b62:	197c      	adds	r4, r7, r5
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	8819      	ldrh	r1, [r3, #0]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f000 fd7e 	bl	800466c <eMBRegHoldingCB>
 8003b70:	0003      	movs	r3, r0
 8003b72:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8003b74:	197b      	adds	r3, r7, r5
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8003b7c:	19bc      	adds	r4, r7, r6
 8003b7e:	197b      	adds	r3, r7, r5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fae5 	bl	8004152 <prveMBError2Exception>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	7023      	strb	r3, [r4, #0]
 8003b8c:	e003      	b.n	8003b96 <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003b8e:	230f      	movs	r3, #15
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2203      	movs	r2, #3
 8003b94:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8003b96:	230f      	movs	r3, #15
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b005      	add	sp, #20
 8003ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba4 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8003bae:	230f      	movs	r3, #15
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d962      	bls.n	8003c84 <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	200c      	movs	r0, #12
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	0212      	lsls	r2, r2, #8
 8003bcc:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b299      	uxth	r1, r3
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	183a      	adds	r2, r7, r0
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8003be0:	183b      	adds	r3, r7, r0
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	0005      	movs	r5, r0
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	3201      	adds	r2, #1
 8003bea:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3303      	adds	r3, #3
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	200a      	movs	r0, #10
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	0212      	lsls	r2, r2, #8
 8003bfa:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b299      	uxth	r1, r3
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	183a      	adds	r2, r7, r0
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8003c0e:	2409      	movs	r4, #9
 8003c10:	193b      	adds	r3, r7, r4
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	7952      	ldrb	r2, [r2, #5]
 8003c16:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8003c18:	0001      	movs	r1, r0
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02b      	beq.n	8003c7a <eMBFuncWriteMultipleHoldingRegister+0xd6>
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	2b78      	cmp	r3, #120	; 0x78
 8003c28:	d827      	bhi.n	8003c7a <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	18db      	adds	r3, r3, r3
 8003c32:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8003c34:	193a      	adds	r2, r7, r4
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d11e      	bne.n	8003c7a <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1d98      	adds	r0, r3, #6
 8003c40:	2608      	movs	r6, #8
 8003c42:	19bc      	adds	r4, r7, r6
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	197b      	adds	r3, r7, r5
 8003c4a:	8819      	ldrh	r1, [r3, #0]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f000 fd0d 	bl	800466c <eMBRegHoldingCB>
 8003c52:	0003      	movs	r3, r0
 8003c54:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003c56:	19bb      	adds	r3, r7, r6
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003c5e:	230f      	movs	r3, #15
 8003c60:	18fc      	adds	r4, r7, r3
 8003c62:	19bb      	adds	r3, r7, r6
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 fa73 	bl	8004152 <prveMBError2Exception>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003c70:	e00c      	b.n	8003c8c <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2205      	movs	r2, #5
 8003c76:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003c78:	e008      	b.n	8003c8c <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	2203      	movs	r2, #3
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e003      	b.n	8003c8c <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003c84:	230f      	movs	r3, #15
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	2203      	movs	r2, #3
 8003c8a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	781b      	ldrb	r3, [r3, #0]
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b005      	add	sp, #20
 8003c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c9a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003ca4:	2317      	movs	r3, #23
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d000      	beq.n	8003cb6 <eMBFuncReadHoldingRegister+0x1c>
 8003cb4:	e075      	b.n	8003da2 <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	2014      	movs	r0, #20
 8003cc0:	183b      	adds	r3, r7, r0
 8003cc2:	0212      	lsls	r2, r2, #8
 8003cc4:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b299      	uxth	r1, r3
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	183a      	adds	r2, r7, r0
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	881a      	ldrh	r2, [r3, #0]
 8003cdc:	183b      	adds	r3, r7, r0
 8003cde:	3201      	adds	r2, #1
 8003ce0:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3303      	adds	r3, #3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	2512      	movs	r5, #18
 8003cec:	197b      	adds	r3, r7, r5
 8003cee:	0212      	lsls	r2, r2, #8
 8003cf0:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	197b      	adds	r3, r7, r5
 8003cfa:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003cfc:	197b      	adds	r3, r7, r5
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d049      	beq.n	8003d98 <eMBFuncReadHoldingRegister+0xfe>
 8003d04:	197b      	adds	r3, r7, r5
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	2b7d      	cmp	r3, #125	; 0x7d
 8003d0a:	d845      	bhi.n	8003d98 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b2d9      	uxtb	r1, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	60fa      	str	r2, [r7, #12]
 8003d38:	1c0a      	adds	r2, r1, #0
 8003d3a:	1892      	adds	r2, r2, r2
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8003d4c:	260b      	movs	r6, #11
 8003d4e:	19bc      	adds	r4, r7, r6
 8003d50:	197b      	adds	r3, r7, r5
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	183b      	adds	r3, r7, r0
 8003d56:	8819      	ldrh	r1, [r3, #0]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f000 fc86 	bl	800466c <eMBRegHoldingCB>
 8003d60:	0003      	movs	r3, r0
 8003d62:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003d64:	19bb      	adds	r3, r7, r6
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003d6c:	2317      	movs	r3, #23
 8003d6e:	18fc      	adds	r4, r7, r3
 8003d70:	19bb      	adds	r3, r7, r6
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f9ec 	bl	8004152 <prveMBError2Exception>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003d7e:	e014      	b.n	8003daa <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	2312      	movs	r3, #18
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	18d3      	adds	r3, r2, r3
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003d96:	e008      	b.n	8003daa <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003d98:	2317      	movs	r3, #23
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e003      	b.n	8003daa <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003da2:	2317      	movs	r3, #23
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2203      	movs	r2, #3
 8003da8:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8003daa:	2317      	movs	r3, #23
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	781b      	ldrb	r3, [r3, #0]
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b007      	add	sp, #28
 8003db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003db8 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003dc2:	2317      	movs	r3, #23
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d800      	bhi.n	8003dd4 <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 8003dd2:	e0d0      	b.n	8003f76 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	2014      	movs	r0, #20
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	0212      	lsls	r2, r2, #8
 8003de2:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3302      	adds	r3, #2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b299      	uxth	r1, r3
 8003dec:	183b      	adds	r3, r7, r0
 8003dee:	183a      	adds	r2, r7, r0
 8003df0:	8812      	ldrh	r2, [r2, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	0006      	movs	r6, r0
 8003dfc:	183b      	adds	r3, r7, r0
 8003dfe:	3201      	adds	r2, #1
 8003e00:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3303      	adds	r3, #3
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	2012      	movs	r0, #18
 8003e0c:	183b      	adds	r3, r7, r0
 8003e0e:	0212      	lsls	r2, r2, #8
 8003e10:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b299      	uxth	r1, r3
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	183a      	adds	r2, r7, r0
 8003e1e:	8812      	ldrh	r2, [r2, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3305      	adds	r3, #5
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	2410      	movs	r4, #16
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	0212      	lsls	r2, r2, #8
 8003e32:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3306      	adds	r3, #6
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b299      	uxth	r1, r3
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	193a      	adds	r2, r7, r4
 8003e40:	8812      	ldrh	r2, [r2, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	193b      	adds	r3, r7, r4
 8003e4c:	3201      	adds	r2, #1
 8003e4e:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3307      	adds	r3, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	240e      	movs	r4, #14
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0212      	lsls	r2, r2, #8
 8003e5e:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3308      	adds	r3, #8
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b299      	uxth	r1, r3
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	193a      	adds	r2, r7, r4
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8003e72:	220d      	movs	r2, #13
 8003e74:	18bb      	adds	r3, r7, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	7a52      	ldrb	r2, [r2, #9]
 8003e7a:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8003e7c:	183b      	adds	r3, r7, r0
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d100      	bne.n	8003e86 <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 8003e84:	e073      	b.n	8003f6e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8003e86:	0005      	movs	r5, r0
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	2b7d      	cmp	r3, #125	; 0x7d
 8003e8e:	d900      	bls.n	8003e92 <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 8003e90:	e06d      	b.n	8003f6e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8003e92:	0021      	movs	r1, r4
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d068      	beq.n	8003f6e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	2b79      	cmp	r3, #121	; 0x79
 8003ea2:	d864      	bhi.n	8003f6e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	200d      	movs	r0, #13
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d15c      	bne.n	8003f6e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	300a      	adds	r0, #10
 8003eba:	2216      	movs	r2, #22
 8003ebc:	18bc      	adds	r4, r7, r2
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	8819      	ldrh	r1, [r3, #0]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f000 fbcf 	bl	800466c <eMBRegHoldingCB>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8003ed2:	2016      	movs	r0, #22
 8003ed4:	183b      	adds	r3, r7, r0
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d139      	bne.n	8003f50 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	60ba      	str	r2, [r7, #8]
 8003eec:	2217      	movs	r2, #23
 8003eee:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8003efc:	197b      	adds	r3, r7, r5
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b2d9      	uxtb	r1, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	60ba      	str	r2, [r7, #8]
 8003f08:	1c0a      	adds	r2, r1, #0
 8003f0a:	1892      	adds	r2, r2, r2
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003f1c:	183c      	adds	r4, r7, r0
 8003f1e:	197b      	adds	r3, r7, r5
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	8819      	ldrh	r1, [r3, #0]
 8003f26:	68b8      	ldr	r0, [r7, #8]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f000 fb9f 	bl	800466c <eMBRegHoldingCB>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 8003f32:	2016      	movs	r0, #22
 8003f34:	183b      	adds	r3, r7, r0
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	197b      	adds	r3, r7, r5
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	18db      	adds	r3, r3, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	18d3      	adds	r3, r2, r3
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8003f50:	2216      	movs	r2, #22
 8003f52:	18bb      	adds	r3, r7, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003f5a:	2317      	movs	r3, #23
 8003f5c:	18fc      	adds	r4, r7, r3
 8003f5e:	18bb      	adds	r3, r7, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 f8f5 	bl	8004152 <prveMBError2Exception>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8003f6c:	e003      	b.n	8003f76 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003f6e:	2317      	movs	r3, #23
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2203      	movs	r2, #3
 8003f74:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 8003f76:	2317      	movs	r3, #23
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b007      	add	sp, #28
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f84 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	000c      	movs	r4, r1
 8003f8e:	0010      	movs	r0, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	1cbb      	adds	r3, r7, #2
 8003f94:	1c22      	adds	r2, r4, #0
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	1c7b      	adds	r3, r7, #1
 8003f9a:	1c02      	adds	r2, r0, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	003b      	movs	r3, r7
 8003fa0:	1c0a      	adds	r2, r1, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8003fa4:	2316      	movs	r3, #22
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	003a      	movs	r2, r7
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	801a      	strh	r2, [r3, #0]

    assert( ucNBits <= 8 );
 8003fae:	1c7b      	adds	r3, r7, #1
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d905      	bls.n	8003fc2 <xMBUtilSetBits+0x3e>
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <xMBUtilSetBits+0x11c>)
 8003fb8:	4a3a      	ldr	r2, [pc, #232]	; (80040a4 <xMBUtilSetBits+0x120>)
 8003fba:	483b      	ldr	r0, [pc, #236]	; (80040a8 <xMBUtilSetBits+0x124>)
 8003fbc:	2138      	movs	r1, #56	; 0x38
 8003fbe:	f001 f975 	bl	80052ac <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8003fc2:	2014      	movs	r0, #20
 8003fc4:	183b      	adds	r3, r7, r0
 8003fc6:	1cba      	adds	r2, r7, #2
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	08d2      	lsrs	r2, r2, #3
 8003fcc:	801a      	strh	r2, [r3, #0]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8003fce:	183b      	adds	r3, r7, r0
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	2412      	movs	r4, #18
 8003fd8:	193b      	adds	r3, r7, r4
 8003fda:	1cb9      	adds	r1, r7, #2
 8003fdc:	8809      	ldrh	r1, [r1, #0]
 8003fde:	1a8a      	subs	r2, r1, r2
 8003fe0:	801a      	strh	r2, [r3, #0]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003fe2:	2616      	movs	r6, #22
 8003fe4:	19bb      	adds	r3, r7, r6
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	193b      	adds	r3, r7, r4
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	409a      	lsls	r2, r3
 8003fee:	19bb      	adds	r3, r7, r6
 8003ff0:	801a      	strh	r2, [r3, #0]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8003ff2:	1c7b      	adds	r3, r7, #1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	2510      	movs	r5, #16
 8004000:	197b      	adds	r3, r7, r5
 8004002:	3a01      	subs	r2, #1
 8004004:	801a      	strh	r2, [r3, #0]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8004006:	197b      	adds	r3, r7, r5
 8004008:	881a      	ldrh	r2, [r3, #0]
 800400a:	1cbb      	adds	r3, r7, #2
 800400c:	8819      	ldrh	r1, [r3, #0]
 800400e:	183b      	adds	r3, r7, r0
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1acb      	subs	r3, r1, r3
 8004016:	409a      	lsls	r2, r3
 8004018:	197b      	adds	r3, r7, r5
 800401a:	801a      	strh	r2, [r3, #0]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800401c:	183b      	adds	r3, r7, r0
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	18d3      	adds	r3, r2, r3
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	240e      	movs	r4, #14
 8004028:	193b      	adds	r3, r7, r4
 800402a:	801a      	strh	r2, [r3, #0]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800402c:	0001      	movs	r1, r0
 800402e:	183b      	adds	r3, r7, r0
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	18d3      	adds	r3, r2, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	b21a      	sxth	r2, r3
 800403e:	193b      	adds	r3, r7, r4
 8004040:	2000      	movs	r0, #0
 8004042:	5e1b      	ldrsh	r3, [r3, r0]
 8004044:	4313      	orrs	r3, r2
 8004046:	b21a      	sxth	r2, r3
 8004048:	193b      	adds	r3, r7, r4
 800404a:	801a      	strh	r2, [r3, #0]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 800404c:	197b      	adds	r3, r7, r5
 800404e:	2200      	movs	r2, #0
 8004050:	5e9b      	ldrsh	r3, [r3, r2]
 8004052:	43db      	mvns	r3, r3
 8004054:	b21b      	sxth	r3, r3
 8004056:	193a      	adds	r2, r7, r4
 8004058:	2000      	movs	r0, #0
 800405a:	5e12      	ldrsh	r2, [r2, r0]
 800405c:	4013      	ands	r3, r2
 800405e:	b21a      	sxth	r2, r3
 8004060:	19bb      	adds	r3, r7, r6
 8004062:	2000      	movs	r0, #0
 8004064:	5e1b      	ldrsh	r3, [r3, r0]
 8004066:	4313      	orrs	r3, r2
 8004068:	b21a      	sxth	r2, r3
 800406a:	193b      	adds	r3, r7, r4
 800406c:	801a      	strh	r2, [r3, #0]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 800406e:	0008      	movs	r0, r1
 8004070:	187b      	adds	r3, r7, r1
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	193a      	adds	r2, r7, r4
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8004080:	193b      	adds	r3, r7, r4
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	b299      	uxth	r1, r3
 8004088:	183b      	adds	r3, r7, r0
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	b2ca      	uxtb	r2, r1
 8004094:	701a      	strb	r2, [r3, #0]
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b007      	add	sp, #28
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	08006274 	.word	0x08006274
 80040a4:	080063d0 	.word	0x080063d0
 80040a8:	08006284 	.word	0x08006284

080040ac <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	0008      	movs	r0, r1
 80040b6:	0011      	movs	r1, r2
 80040b8:	1cbb      	adds	r3, r7, #2
 80040ba:	1c02      	adds	r2, r0, #0
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	1c7b      	adds	r3, r7, #1
 80040c0:	1c0a      	adds	r2, r1, #0
 80040c2:	701a      	strb	r2, [r3, #0]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80040c4:	200e      	movs	r0, #14
 80040c6:	183b      	adds	r3, r7, r0
 80040c8:	1cba      	adds	r2, r7, #2
 80040ca:	8812      	ldrh	r2, [r2, #0]
 80040cc:	08d2      	lsrs	r2, r2, #3
 80040ce:	801a      	strh	r2, [r3, #0]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80040d0:	183b      	adds	r3, r7, r0
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	240c      	movs	r4, #12
 80040da:	193b      	adds	r3, r7, r4
 80040dc:	1cb9      	adds	r1, r7, #2
 80040de:	8809      	ldrh	r1, [r1, #0]
 80040e0:	1a8a      	subs	r2, r1, r2
 80040e2:	801a      	strh	r2, [r3, #0]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80040e4:	1c7b      	adds	r3, r7, #1
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	0013      	movs	r3, r2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	250a      	movs	r5, #10
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	3a01      	subs	r2, #1
 80040f6:	801a      	strh	r2, [r3, #0]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80040f8:	183b      	adds	r3, r7, r0
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	2108      	movs	r1, #8
 8004104:	187b      	adds	r3, r7, r1
 8004106:	801a      	strh	r2, [r3, #0]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8004108:	183b      	adds	r3, r7, r0
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	b21a      	sxth	r2, r3
 8004118:	187b      	adds	r3, r7, r1
 800411a:	2000      	movs	r0, #0
 800411c:	5e1b      	ldrsh	r3, [r3, r0]
 800411e:	4313      	orrs	r3, r2
 8004120:	b21a      	sxth	r2, r3
 8004122:	187b      	adds	r3, r7, r1
 8004124:	801a      	strh	r2, [r3, #0]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8004126:	187b      	adds	r3, r7, r1
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	193b      	adds	r3, r7, r4
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	411a      	asrs	r2, r3
 8004130:	187b      	adds	r3, r7, r1
 8004132:	801a      	strh	r2, [r3, #0]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8004134:	187b      	adds	r3, r7, r1
 8004136:	0008      	movs	r0, r1
 8004138:	187a      	adds	r2, r7, r1
 800413a:	1979      	adds	r1, r7, r5
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	8809      	ldrh	r1, [r1, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	801a      	strh	r2, [r3, #0]

    return ( UCHAR ) usWordBuf;
 8004144:	183b      	adds	r3, r7, r0
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b004      	add	sp, #16
 8004150:	bdb0      	pop	{r4, r5, r7, pc}

08004152 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	0002      	movs	r2, r0
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 800415e:	1dfb      	adds	r3, r7, #7
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b07      	cmp	r3, #7
 8004164:	d00f      	beq.n	8004186 <prveMBError2Exception+0x34>
 8004166:	dc13      	bgt.n	8004190 <prveMBError2Exception+0x3e>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <prveMBError2Exception+0x20>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d005      	beq.n	800417c <prveMBError2Exception+0x2a>
 8004170:	e00e      	b.n	8004190 <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8004172:	230f      	movs	r3, #15
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
            break;
 800417a:	e00e      	b.n	800419a <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800417c:	230f      	movs	r3, #15
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2202      	movs	r2, #2
 8004182:	701a      	strb	r2, [r3, #0]
            break;
 8004184:	e009      	b.n	800419a <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8004186:	230f      	movs	r3, #15
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2206      	movs	r2, #6
 800418c:	701a      	strb	r2, [r3, #0]
            break;
 800418e:	e004      	b.n	800419a <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8004190:	230f      	movs	r3, #15
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
            break;
 8004198:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 800419a:	230f      	movs	r3, #15
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	781b      	ldrb	r3, [r3, #0]
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b004      	add	sp, #16
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	0004      	movs	r4, r0
 80041b0:	0008      	movs	r0, r1
 80041b2:	0011      	movs	r1, r2
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	1c22      	adds	r2, r4, #0
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	1dbb      	adds	r3, r7, #6
 80041be:	1c02      	adds	r2, r0, #0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	1d7b      	adds	r3, r7, #5
 80041c4:	1c0a      	adds	r2, r1, #0
 80041c6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80041c8:	230f      	movs	r3, #15
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80041d0:	1dbb      	adds	r3, r7, #6
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <eMBInit+0x40>
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80041e0:	1dbb      	adds	r3, r7, #6
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2bf7      	cmp	r3, #247	; 0xf7
 80041e6:	d904      	bls.n	80041f2 <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	2202      	movs	r2, #2
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e04c      	b.n	800428c <eMBInit+0xe4>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80041f2:	4b2a      	ldr	r3, [pc, #168]	; (800429c <eMBInit+0xf4>)
 80041f4:	1dba      	adds	r2, r7, #6
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d127      	bne.n	8004252 <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <eMBInit+0xf8>)
 8004204:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <eMBInit+0xfc>)
 8004206:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <eMBInit+0x100>)
 800420a:	4a28      	ldr	r2, [pc, #160]	; (80042ac <eMBInit+0x104>)
 800420c:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <eMBInit+0x108>)
 8004210:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <eMBInit+0x10c>)
 8004212:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <eMBInit+0x110>)
 8004216:	4a29      	ldr	r2, [pc, #164]	; (80042bc <eMBInit+0x114>)
 8004218:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <eMBInit+0x118>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <eMBInit+0x11c>)
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <eMBInit+0x120>)
 8004224:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <eMBInit+0x124>)
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <eMBInit+0x128>)
 800422a:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <eMBInit+0x12c>)
 800422e:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <eMBInit+0x130>)
 8004230:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <eMBInit+0xf4>)
 8004234:	7818      	ldrb	r0, [r3, #0]
 8004236:	230f      	movs	r3, #15
 8004238:	18fc      	adds	r4, r7, r3
 800423a:	2320      	movs	r3, #32
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781d      	ldrb	r5, [r3, #0]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	1d7b      	adds	r3, r7, #5
 8004244:	7819      	ldrb	r1, [r3, #0]
 8004246:	002b      	movs	r3, r5
 8004248:	f000 fdb6 	bl	8004db8 <eMBRTUInit>
 800424c:	0003      	movs	r3, r0
 800424e:	7023      	strb	r3, [r4, #0]
            break;
 8004250:	e003      	b.n	800425a <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8004252:	230f      	movs	r3, #15
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	2202      	movs	r2, #2
 8004258:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 800425a:	240f      	movs	r4, #15
 800425c:	193b      	adds	r3, r7, r4
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d113      	bne.n	800428c <eMBInit+0xe4>
        {
            if( !xMBPortEventInit(  ) )
 8004264:	f000 fb7a 	bl	800495c <xMBPortEventInit>
 8004268:	0003      	movs	r3, r0
 800426a:	001a      	movs	r2, r3
 800426c:	2301      	movs	r3, #1
 800426e:	4053      	eors	r3, r2
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <eMBInit+0xd6>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8004276:	193b      	adds	r3, r7, r4
 8004278:	2203      	movs	r2, #3
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e006      	b.n	800428c <eMBInit+0xe4>
            }
            else
            {
                eMBCurrentMode = eMode;
 800427e:	4b17      	ldr	r3, [pc, #92]	; (80042dc <eMBInit+0x134>)
 8004280:	1dfa      	adds	r2, r7, #7
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <eMBInit+0x138>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800428c:	230f      	movs	r3, #15
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	781b      	ldrb	r3, [r3, #0]
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bdb0      	pop	{r4, r5, r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	200002b0 	.word	0x200002b0
 80042a0:	200002b8 	.word	0x200002b8
 80042a4:	08004e65 	.word	0x08004e65
 80042a8:	200002bc 	.word	0x200002bc
 80042ac:	08004e8d 	.word	0x08004e8d
 80042b0:	200002b4 	.word	0x200002b4
 80042b4:	08004f5d 	.word	0x08004f5d
 80042b8:	200002c0 	.word	0x200002c0
 80042bc:	08004ead 	.word	0x08004ead
 80042c0:	200002c4 	.word	0x200002c4
 80042c4:	200002c8 	.word	0x200002c8
 80042c8:	08005045 	.word	0x08005045
 80042cc:	200002cc 	.word	0x200002cc
 80042d0:	08005161 	.word	0x08005161
 80042d4:	200002d0 	.word	0x200002d0
 80042d8:	08005219 	.word	0x08005219
 80042dc:	200002b1 	.word	0x200002b1
 80042e0:	20000009 	.word	0x20000009

080042e4 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80042ea:	1dfb      	adds	r3, r7, #7
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <eMBEnable+0x34>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <eMBEnable+0x38>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <eMBEnable+0x34>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e002      	b.n	800430c <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8004306:	1dfb      	adds	r3, r7, #7
 8004308:	2206      	movs	r2, #6
 800430a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	781b      	ldrb	r3, [r3, #0]
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000009 	.word	0x20000009
 800431c:	200002b8 	.word	0x200002b8

08004320 <eMBPoll>:
    return eStatus;
}
eMBErrorCode    eStatus;
eMBErrorCode
eMBPoll( void )
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
        eStatus = MB_ENOERR;
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <eMBPoll+0x16c>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800432c:	4b58      	ldr	r3, [pc, #352]	; (8004490 <eMBPoll+0x170>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 8004334:	2306      	movs	r3, #6
 8004336:	e0a4      	b.n	8004482 <eMBPoll+0x162>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent )== TRUE )
 8004338:	1cfb      	adds	r3, r7, #3
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fb30 	bl	80049a0 <xMBPortEventGet>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d100      	bne.n	8004346 <eMBPoll+0x26>
 8004344:	e09c      	b.n	8004480 <eMBPoll+0x160>
    {

        switch ( eEvent )
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d100      	bne.n	8004350 <eMBPoll+0x30>
 800434e:	e090      	b.n	8004472 <eMBPoll+0x152>
 8004350:	dd00      	ble.n	8004354 <eMBPoll+0x34>
 8004352:	e095      	b.n	8004480 <eMBPoll+0x160>
 8004354:	2b02      	cmp	r3, #2
 8004356:	d025      	beq.n	80043a4 <eMBPoll+0x84>
 8004358:	dd00      	ble.n	800435c <eMBPoll+0x3c>
 800435a:	e091      	b.n	8004480 <eMBPoll+0x160>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d100      	bne.n	8004362 <eMBPoll+0x42>
 8004360:	e089      	b.n	8004476 <eMBPoll+0x156>
 8004362:	2b01      	cmp	r3, #1
 8004364:	d000      	beq.n	8004368 <eMBPoll+0x48>
 8004366:	e08b      	b.n	8004480 <eMBPoll+0x160>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <eMBPoll+0x174>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a4a      	ldr	r2, [pc, #296]	; (8004498 <eMBPoll+0x178>)
 800436e:	494b      	ldr	r1, [pc, #300]	; (800449c <eMBPoll+0x17c>)
 8004370:	484b      	ldr	r0, [pc, #300]	; (80044a0 <eMBPoll+0x180>)
 8004372:	4798      	blx	r3
 8004374:	0003      	movs	r3, r0
 8004376:	001a      	movs	r2, r3
 8004378:	4b44      	ldr	r3, [pc, #272]	; (800448c <eMBPoll+0x16c>)
 800437a:	701a      	strb	r2, [r3, #0]
            if( eStatus == MB_ENOERR )
 800437c:	4b43      	ldr	r3, [pc, #268]	; (800448c <eMBPoll+0x16c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d000      	beq.n	8004386 <eMBPoll+0x66>
 8004384:	e079      	b.n	800447a <eMBPoll+0x15a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8004386:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <eMBPoll+0x180>)
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <eMBPoll+0x184>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d004      	beq.n	800439c <eMBPoll+0x7c>
 8004392:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <eMBPoll+0x180>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d000      	beq.n	800439c <eMBPoll+0x7c>
 800439a:	e06e      	b.n	800447a <eMBPoll+0x15a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800439c:	2002      	movs	r0, #2
 800439e:	f000 fae9 	bl	8004974 <xMBPortEventPost>
                }
            }
            break;
 80043a2:	e06a      	b.n	800447a <eMBPoll+0x15a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80043a4:	4b3d      	ldr	r3, [pc, #244]	; (800449c <eMBPoll+0x17c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <eMBPoll+0x188>)
 80043ac:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <eMBPoll+0x18c>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80043b4:	2300      	movs	r3, #0
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	e020      	b.n	80043fc <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80043ba:	4b3d      	ldr	r3, [pc, #244]	; (80044b0 <eMBPoll+0x190>)
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01e      	beq.n	8004404 <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <eMBPoll+0x190>)
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	00d2      	lsls	r2, r2, #3
 80043cc:	5cd2      	ldrb	r2, [r2, r3]
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <eMBPoll+0x188>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10f      	bne.n	80043f6 <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80043d6:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <eMBPoll+0x190>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	18d3      	adds	r3, r2, r3
 80043de:	3304      	adds	r3, #4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <eMBPoll+0x17c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	492c      	ldr	r1, [pc, #176]	; (8004498 <eMBPoll+0x178>)
 80043e8:	0018      	movs	r0, r3
 80043ea:	4790      	blx	r2
 80043ec:	0003      	movs	r3, r0
 80043ee:	001a      	movs	r2, r3
 80043f0:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <eMBPoll+0x18c>)
 80043f2:	701a      	strb	r2, [r3, #0]
                    break;
 80043f4:	e007      	b.n	8004406 <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3301      	adds	r3, #1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	dddb      	ble.n	80043ba <eMBPoll+0x9a>
 8004402:	e000      	b.n	8004406 <eMBPoll+0xe6>
                    break;
 8004404:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <eMBPoll+0x180>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d037      	beq.n	800447e <eMBPoll+0x15e>
            {
                
                if( eException != MB_EX_NONE )
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <eMBPoll+0x18c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01e      	beq.n	8004454 <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <eMBPoll+0x178>)
 8004418:	2200      	movs	r2, #0
 800441a:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800441c:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <eMBPoll+0x188>)
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	4b1e      	ldr	r3, [pc, #120]	; (800449c <eMBPoll+0x17c>)
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <eMBPoll+0x178>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	1c58      	adds	r0, r3, #1
 800442a:	b284      	uxth	r4, r0
 800442c:	481a      	ldr	r0, [pc, #104]	; (8004498 <eMBPoll+0x178>)
 800442e:	8004      	strh	r4, [r0, #0]
 8004430:	18cb      	adds	r3, r1, r3
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	4249      	negs	r1, r1
 8004436:	430a      	orrs	r2, r1
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <eMBPoll+0x17c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <eMBPoll+0x178>)
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	b288      	uxth	r0, r1
 8004448:	4913      	ldr	r1, [pc, #76]	; (8004498 <eMBPoll+0x178>)
 800444a:	8008      	strh	r0, [r1, #0]
 800444c:	18d3      	adds	r3, r2, r3
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <eMBPoll+0x18c>)
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <eMBPoll+0x194>)
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <eMBPoll+0x184>)
 800445a:	7818      	ldrb	r0, [r3, #0]
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <eMBPoll+0x17c>)
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <eMBPoll+0x178>)
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	47a0      	blx	r4
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <eMBPoll+0x16c>)
 800446e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004470:	e005      	b.n	800447e <eMBPoll+0x15e>

        case EV_FRAME_SENT:
            break;
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	e004      	b.n	8004480 <eMBPoll+0x160>
            break;
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	e002      	b.n	8004480 <eMBPoll+0x160>
            break;
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	e000      	b.n	8004480 <eMBPoll+0x160>
            break;
 800447e:	46c0      	nop			; (mov r8, r8)
        }
    }
    return MB_ENOERR;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b003      	add	sp, #12
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	200002d4 	.word	0x200002d4
 8004490:	20000009 	.word	0x20000009
 8004494:	200002c0 	.word	0x200002c0
 8004498:	200002dc 	.word	0x200002dc
 800449c:	200002d8 	.word	0x200002d8
 80044a0:	200002d5 	.word	0x200002d5
 80044a4:	200002b0 	.word	0x200002b0
 80044a8:	200002de 	.word	0x200002de
 80044ac:	200002df 	.word	0x200002df
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	200002b4 	.word	0x200002b4

080044b8 <__NVIC_EnableIRQ>:
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	0002      	movs	r2, r0
 80044c0:	1dfb      	adds	r3, r7, #7
 80044c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ca:	d809      	bhi.n	80044e0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	001a      	movs	r2, r3
 80044d2:	231f      	movs	r3, #31
 80044d4:	401a      	ands	r2, r3
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_EnableIRQ+0x30>)
 80044d8:	2101      	movs	r1, #1
 80044da:	4091      	lsls	r1, r2
 80044dc:	000a      	movs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_SetPriority>:
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	0002      	movs	r2, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004500:	d828      	bhi.n	8004554 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004502:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <__NVIC_SetPriority+0xd4>)
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b25b      	sxtb	r3, r3
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	33c0      	adds	r3, #192	; 0xc0
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	589b      	ldr	r3, [r3, r2]
 8004512:	1dfa      	adds	r2, r7, #7
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	0011      	movs	r1, r2
 8004518:	2203      	movs	r2, #3
 800451a:	400a      	ands	r2, r1
 800451c:	00d2      	lsls	r2, r2, #3
 800451e:	21ff      	movs	r1, #255	; 0xff
 8004520:	4091      	lsls	r1, r2
 8004522:	000a      	movs	r2, r1
 8004524:	43d2      	mvns	r2, r2
 8004526:	401a      	ands	r2, r3
 8004528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	22ff      	movs	r2, #255	; 0xff
 8004530:	401a      	ands	r2, r3
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	0018      	movs	r0, r3
 8004538:	2303      	movs	r3, #3
 800453a:	4003      	ands	r3, r0
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004540:	481f      	ldr	r0, [pc, #124]	; (80045c0 <__NVIC_SetPriority+0xd4>)
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b25b      	sxtb	r3, r3
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	430a      	orrs	r2, r1
 800454c:	33c0      	adds	r3, #192	; 0xc0
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	501a      	str	r2, [r3, r0]
}
 8004552:	e031      	b.n	80045b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <__NVIC_SetPriority+0xd8>)
 8004556:	1dfb      	adds	r3, r7, #7
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	0019      	movs	r1, r3
 800455c:	230f      	movs	r3, #15
 800455e:	400b      	ands	r3, r1
 8004560:	3b08      	subs	r3, #8
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	3306      	adds	r3, #6
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	18d3      	adds	r3, r2, r3
 800456a:	3304      	adds	r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	1dfa      	adds	r2, r7, #7
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	0011      	movs	r1, r2
 8004574:	2203      	movs	r2, #3
 8004576:	400a      	ands	r2, r1
 8004578:	00d2      	lsls	r2, r2, #3
 800457a:	21ff      	movs	r1, #255	; 0xff
 800457c:	4091      	lsls	r1, r2
 800457e:	000a      	movs	r2, r1
 8004580:	43d2      	mvns	r2, r2
 8004582:	401a      	ands	r2, r3
 8004584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	22ff      	movs	r2, #255	; 0xff
 800458c:	401a      	ands	r2, r3
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	0018      	movs	r0, r3
 8004594:	2303      	movs	r3, #3
 8004596:	4003      	ands	r3, r0
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <__NVIC_SetPriority+0xd8>)
 800459e:	1dfb      	adds	r3, r7, #7
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	001c      	movs	r4, r3
 80045a4:	230f      	movs	r3, #15
 80045a6:	4023      	ands	r3, r4
 80045a8:	3b08      	subs	r3, #8
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	430a      	orrs	r2, r1
 80045ae:	3306      	adds	r3, #6
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	18c3      	adds	r3, r0, r3
 80045b4:	3304      	adds	r3, #4
 80045b6:	601a      	str	r2, [r3, #0]
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b003      	add	sp, #12
 80045be:	bd90      	pop	{r4, r7, pc}
 80045c0:	e000e100 	.word	0xe000e100
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <MbSlaveMode>:



extern USHORT   usRegHoldingBuf[REG_HOLDING_NREGS];

eMBErrorCode MbSlaveMode(eMBMode eMode, UCHAR Slave_Address, UCHAR Port,ULONG Baud_Rate, eMBParity Parity) {
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	0004      	movs	r4, r0
 80045d0:	0008      	movs	r0, r1
 80045d2:	0011      	movs	r1, r2
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	1c22      	adds	r2, r4, #0
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	1c02      	adds	r2, r0, #0
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	1d7b      	adds	r3, r7, #5
 80045e4:	1c0a      	adds	r2, r1, #0
 80045e6:	701a      	strb	r2, [r3, #0]

	eMBErrorCode eStatus = eMBInit(eMode, Slave_Address, Port, Baud_Rate,Parity);
 80045e8:	260f      	movs	r6, #15
 80045ea:	19bc      	adds	r4, r7, r6
 80045ec:	683d      	ldr	r5, [r7, #0]
 80045ee:	1d7b      	adds	r3, r7, #5
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	469c      	mov	ip, r3
 80045f4:	1dbb      	adds	r3, r7, #6
 80045f6:	7819      	ldrb	r1, [r3, #0]
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	7818      	ldrb	r0, [r3, #0]
 80045fc:	2320      	movs	r3, #32
 80045fe:	2208      	movs	r2, #8
 8004600:	189b      	adds	r3, r3, r2
 8004602:	19db      	adds	r3, r3, r7
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	002b      	movs	r3, r5
 800460a:	4662      	mov	r2, ip
 800460c:	f7ff fdcc 	bl	80041a8 <eMBInit>
 8004610:	0003      	movs	r3, r0
 8004612:	7023      	strb	r3, [r4, #0]
	eStatus = eMBEnable();
 8004614:	19bc      	adds	r4, r7, r6
 8004616:	f7ff fe65 	bl	80042e4 <eMBEnable>
 800461a:	0003      	movs	r3, r0
 800461c:	7023      	strb	r3, [r4, #0]

}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b005      	add	sp, #20
 8004626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004628 <MX_NVIC_Init>:
	}

}

 void MX_NVIC_Init(void)
 {
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0

	/* DMA1_Channel1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel1_IRQn, 1);
 800462c:	2101      	movs	r1, #1
 800462e:	2009      	movs	r0, #9
 8004630:	f7ff ff5c 	bl	80044ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004634:	2009      	movs	r0, #9
 8004636:	f7ff ff3f 	bl	80044b8 <__NVIC_EnableIRQ>
	/* TIM14_IRQn interrupt configuration */
	NVIC_SetPriority(TIM14_IRQn, 2);
 800463a:	2102      	movs	r1, #2
 800463c:	2013      	movs	r0, #19
 800463e:	f7ff ff55 	bl	80044ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM14_IRQn);
 8004642:	2013      	movs	r0, #19
 8004644:	f7ff ff38 	bl	80044b8 <__NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	NVIC_SetPriority(USART1_IRQn, 3);
 8004648:	2103      	movs	r1, #3
 800464a:	201b      	movs	r0, #27
 800464c:	f7ff ff4e 	bl	80044ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8004650:	201b      	movs	r0, #27
 8004652:	f7ff ff31 	bl	80044b8 <__NVIC_EnableIRQ>
	/* TIM16_IRQn interrupt configuration */
	NVIC_SetPriority(TIM16_IRQn, 2);
 8004656:	2102      	movs	r1, #2
 8004658:	2015      	movs	r0, #21
 800465a:	f7ff ff47 	bl	80044ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM16_IRQn);
 800465e:	2015      	movs	r0, #21
 8004660:	f7ff ff2a 	bl	80044b8 <__NVIC_EnableIRQ>

}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <eMBRegHoldingCB>:
		eStatus = MB_ENOREG; 
	} return eStatus; 
} 

eMBErrorCode eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode ) 
{ 
 800466c:	b5b0      	push	{r4, r5, r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	000c      	movs	r4, r1
 8004676:	0010      	movs	r0, r2
 8004678:	0019      	movs	r1, r3
 800467a:	250a      	movs	r5, #10
 800467c:	197b      	adds	r3, r7, r5
 800467e:	1c22      	adds	r2, r4, #0
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	2408      	movs	r4, #8
 8004684:	193b      	adds	r3, r7, r4
 8004686:	1c02      	adds	r2, r0, #0
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	1dfb      	adds	r3, r7, #7
 800468c:	1c0a      	adds	r2, r1, #0
 800468e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004690:	2317      	movs	r3, #23
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
    int             iRegIndex;
 
    if( ( usAddress >= REG_HOLDING_START ) &&
 8004698:	197b      	adds	r3, r7, r5
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d060      	beq.n	8004762 <eMBRegHoldingCB+0xf6>
        ( usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS ) )
 80046a0:	197b      	adds	r3, r7, r5
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	193b      	adds	r3, r7, r4
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	18d3      	adds	r3, r2, r3
    if( ( usAddress >= REG_HOLDING_START ) &&
 80046aa:	2b0b      	cmp	r3, #11
 80046ac:	dc59      	bgt.n	8004762 <eMBRegHoldingCB+0xf6>
    {
        iRegIndex = ( int )( usAddress - usRegHoldingStart );
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	4a31      	ldr	r2, [pc, #196]	; (8004778 <eMBRegHoldingCB+0x10c>)
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        switch ( eMode )
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01f      	beq.n	8004702 <eMBRegHoldingCB+0x96>
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d046      	beq.n	8004754 <eMBRegHoldingCB+0xe8>
 80046c6:	e050      	b.n	800476a <eMBRegHoldingCB+0xfe>
        {
            /* Pass current register values to the protocol stack. */
        case MB_REG_READ:
            while( usNRegs > 0 )
            {
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] >> 8 );
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <eMBRegHoldingCB+0x110>)
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	0052      	lsls	r2, r2, #1
 80046ce:	5ad3      	ldrh	r3, [r2, r3]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	b299      	uxth	r1, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	60fa      	str	r2, [r7, #12]
 80046da:	b2ca      	uxtb	r2, r1
 80046dc:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = ( UCHAR ) ( usRegHoldingBuf[iRegIndex] & 0xFF );
 80046de:	4b27      	ldr	r3, [pc, #156]	; (800477c <eMBRegHoldingCB+0x110>)
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	0052      	lsls	r2, r2, #1
 80046e4:	5ad1      	ldrh	r1, [r2, r3]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	b2ca      	uxtb	r2, r1
 80046ee:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	3301      	adds	r3, #1
 80046f4:	613b      	str	r3, [r7, #16]
                usNRegs--;
 80046f6:	2108      	movs	r1, #8
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	3a01      	subs	r2, #1
 8004700:	801a      	strh	r2, [r3, #0]
            while( usNRegs > 0 )
 8004702:	2308      	movs	r3, #8
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1dd      	bne.n	80046c8 <eMBRegHoldingCB+0x5c>
            }
            break;
 800470c:	e028      	b.n	8004760 <eMBRegHoldingCB+0xf4>
            /* Update current register values with new values from the
             * protocol stack. */
        case MB_REG_WRITE:
            while( usNRegs > 0 )
            {
                usRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	b299      	uxth	r1, r3
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <eMBRegHoldingCB+0x110>)
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	0052      	lsls	r2, r2, #1
 8004722:	52d1      	strh	r1, [r2, r3]
                usRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	60fa      	str	r2, [r7, #12]
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <eMBRegHoldingCB+0x110>)
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	0052      	lsls	r2, r2, #1
 8004732:	5ad2      	ldrh	r2, [r2, r3]
 8004734:	b28b      	uxth	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	b299      	uxth	r1, r3
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <eMBRegHoldingCB+0x110>)
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	0052      	lsls	r2, r2, #1
 8004740:	52d1      	strh	r1, [r2, r3]
                iRegIndex++;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3301      	adds	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
                usNRegs--;
 8004748:	2108      	movs	r1, #8
 800474a:	187b      	adds	r3, r7, r1
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	187b      	adds	r3, r7, r1
 8004750:	3a01      	subs	r2, #1
 8004752:	801a      	strh	r2, [r3, #0]
            while( usNRegs > 0 )
 8004754:	2308      	movs	r3, #8
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1d7      	bne.n	800470e <eMBRegHoldingCB+0xa2>
        switch ( eMode )
 800475e:	e004      	b.n	800476a <eMBRegHoldingCB+0xfe>
 8004760:	e003      	b.n	800476a <eMBRegHoldingCB+0xfe>
            }
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8004762:	2317      	movs	r3, #23
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800476a:	2317      	movs	r3, #23
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	781b      	ldrb	r3, [r3, #0]
} 
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b006      	add	sp, #24
 8004776:	bdb0      	pop	{r4, r5, r7, pc}
 8004778:	2000008c 	.word	0x2000008c
 800477c:	200002e0 	.word	0x200002e0

08004780 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode ) 
{ 
 8004780:	b5b0      	push	{r4, r5, r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	000c      	movs	r4, r1
 800478a:	0010      	movs	r0, r2
 800478c:	0019      	movs	r1, r3
 800478e:	250a      	movs	r5, #10
 8004790:	197b      	adds	r3, r7, r5
 8004792:	1c22      	adds	r2, r4, #0
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	2408      	movs	r4, #8
 8004798:	193b      	adds	r3, r7, r4
 800479a:	1c02      	adds	r2, r0, #0
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	1c0a      	adds	r2, r1, #0
 80047a2:	701a      	strb	r2, [r3, #0]
eMBErrorCode    eStatus = MB_ENOERR;
 80047a4:	2317      	movs	r3, #23
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
    short           iNCoils = ( short )usNCoils;
 80047ac:	2314      	movs	r3, #20
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	193a      	adds	r2, r7, r4
 80047b2:	8812      	ldrh	r2, [r2, #0]
 80047b4:	801a      	strh	r2, [r3, #0]
    unsigned short  usBitOffset;

    /* Check if we have registers mapped at this block. */
    if( ( usAddress >= REG_COILS_START ) &&
 80047b6:	197b      	adds	r3, r7, r5
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d062      	beq.n	8004884 <eMBRegCoilsCB+0x104>
        ( usAddress + usNCoils <= REG_COILS_START + REG_COILS_SIZE ) )
 80047be:	197b      	adds	r3, r7, r5
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	18d3      	adds	r3, r2, r3
    if( ( usAddress >= REG_COILS_START ) &&
 80047c8:	2b11      	cmp	r3, #17
 80047ca:	dc5b      	bgt.n	8004884 <eMBRegCoilsCB+0x104>
    {
        usBitOffset = ( unsigned short )( usAddress - REG_COILS_START );
 80047cc:	2312      	movs	r3, #18
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	197a      	adds	r2, r7, r5
 80047d2:	8812      	ldrh	r2, [r2, #0]
 80047d4:	3a01      	subs	r2, #1
 80047d6:	801a      	strh	r2, [r3, #0]
        switch ( eMode )
 80047d8:	1dfb      	adds	r3, r7, #7
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d025      	beq.n	800482c <eMBRegCoilsCB+0xac>
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d047      	beq.n	8004874 <eMBRegCoilsCB+0xf4>
 80047e4:	e052      	b.n	800488c <eMBRegCoilsCB+0x10c>
                /* Read current values and pass to protocol stack. */
            case MB_REG_READ:
                while( iNCoils > 0 )
                {
                    *pucRegBuffer++ =
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 80047e6:	2214      	movs	r2, #20
 80047e8:	18bb      	adds	r3, r7, r2
 80047ea:	2100      	movs	r1, #0
 80047ec:	5e5b      	ldrsh	r3, [r3, r1]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	dc03      	bgt.n	80047fa <eMBRegCoilsCB+0x7a>
 80047f2:	18bb      	adds	r3, r7, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e000      	b.n	80047fc <eMBRegCoilsCB+0x7c>
 80047fa:	2308      	movs	r3, #8
                    *pucRegBuffer++ =
 80047fc:	68fc      	ldr	r4, [r7, #12]
 80047fe:	1c62      	adds	r2, r4, #1
 8004800:	60fa      	str	r2, [r7, #12]
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 8004802:	2512      	movs	r5, #18
 8004804:	197a      	adds	r2, r7, r5
 8004806:	8811      	ldrh	r1, [r2, #0]
 8004808:	4824      	ldr	r0, [pc, #144]	; (800489c <eMBRegCoilsCB+0x11c>)
 800480a:	001a      	movs	r2, r3
 800480c:	f7ff fc4e 	bl	80040ac <xMBUtilGetBits>
 8004810:	0003      	movs	r3, r0
                    *pucRegBuffer++ =
 8004812:	7023      	strb	r3, [r4, #0]
                                        ( unsigned char )( iNCoils >
                                                           8 ? 8 :
                                                           iNCoils ) );
                    iNCoils -= 8;
 8004814:	2114      	movs	r1, #20
 8004816:	187b      	adds	r3, r7, r1
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	3b08      	subs	r3, #8
 800481c:	b29a      	uxth	r2, r3
 800481e:	187b      	adds	r3, r7, r1
 8004820:	801a      	strh	r2, [r3, #0]
                    usBitOffset += 8;
 8004822:	197b      	adds	r3, r7, r5
 8004824:	197a      	adds	r2, r7, r5
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	3208      	adds	r2, #8
 800482a:	801a      	strh	r2, [r3, #0]
                while( iNCoils > 0 )
 800482c:	2314      	movs	r3, #20
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2200      	movs	r2, #0
 8004832:	5e9b      	ldrsh	r3, [r3, r2]
 8004834:	2b00      	cmp	r3, #0
 8004836:	dcd6      	bgt.n	80047e6 <eMBRegCoilsCB+0x66>
                }
                break;
 8004838:	e023      	b.n	8004882 <eMBRegCoilsCB+0x102>

                /* Update current register values. */
            case MB_REG_WRITE:
                while( iNCoils > 0 )
                {
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 800483a:	2214      	movs	r2, #20
 800483c:	18bb      	adds	r3, r7, r2
 800483e:	2100      	movs	r1, #0
 8004840:	5e5b      	ldrsh	r3, [r3, r1]
 8004842:	2b08      	cmp	r3, #8
 8004844:	dc03      	bgt.n	800484e <eMBRegCoilsCB+0xce>
 8004846:	18bb      	adds	r3, r7, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	e000      	b.n	8004850 <eMBRegCoilsCB+0xd0>
 800484e:	2208      	movs	r2, #8
                                    ( unsigned char )( iNCoils > 8 ? 8 : iNCoils ),
                                    *pucRegBuffer++ );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	60f9      	str	r1, [r7, #12]
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 8004856:	781c      	ldrb	r4, [r3, #0]
 8004858:	2312      	movs	r3, #18
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	8819      	ldrh	r1, [r3, #0]
 800485e:	480f      	ldr	r0, [pc, #60]	; (800489c <eMBRegCoilsCB+0x11c>)
 8004860:	0023      	movs	r3, r4
 8004862:	f7ff fb8f 	bl	8003f84 <xMBUtilSetBits>
                    iNCoils -= 8;
 8004866:	2114      	movs	r1, #20
 8004868:	187b      	adds	r3, r7, r1
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	3b08      	subs	r3, #8
 800486e:	b29a      	uxth	r2, r3
 8004870:	187b      	adds	r3, r7, r1
 8004872:	801a      	strh	r2, [r3, #0]
                while( iNCoils > 0 )
 8004874:	2314      	movs	r3, #20
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	5e9b      	ldrsh	r3, [r3, r2]
 800487c:	2b00      	cmp	r3, #0
 800487e:	dcdc      	bgt.n	800483a <eMBRegCoilsCB+0xba>
                }
                break;
 8004880:	46c0      	nop			; (mov r8, r8)
        switch ( eMode )
 8004882:	e003      	b.n	800488c <eMBRegCoilsCB+0x10c>
        }

    }
    else
    {
        eStatus = MB_ENOREG;
 8004884:	2317      	movs	r3, #23
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
    }
return eStatus;
 800488c:	2317      	movs	r3, #23
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	781b      	ldrb	r3, [r3, #0]
} 
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b006      	add	sp, #24
 8004898:	bdb0      	pop	{r4, r5, r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	200002f4 	.word	0x200002f4

080048a0 <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete ) 
{ 
 80048a0:	b5b0      	push	{r4, r5, r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	0008      	movs	r0, r1
 80048aa:	0011      	movs	r1, r2
 80048ac:	1cbb      	adds	r3, r7, #2
 80048ae:	1c02      	adds	r2, r0, #0
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	003b      	movs	r3, r7
 80048b4:	1c0a      	adds	r2, r1, #0
 80048b6:	801a      	strh	r2, [r3, #0]
 eMBErrorCode    eStatus = MB_ENOERR;
 80048b8:	230f      	movs	r3, #15
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
    short           iNDiscrete = ( short )usNDiscrete;
 80048c0:	230c      	movs	r3, #12
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	003a      	movs	r2, r7
 80048c6:	8812      	ldrh	r2, [r2, #0]
 80048c8:	801a      	strh	r2, [r3, #0]
    unsigned short  usBitOffset;

    /* Check if we have registers mapped at this block. */
    if( ( usAddress >= REG_DISC_START ) &&
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d037      	beq.n	8004942 <eMBRegDiscreteCB+0xa2>
        ( usAddress + usNDiscrete <= REG_DISC_START + REG_DISC_SIZE ) )
 80048d2:	1cbb      	adds	r3, r7, #2
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	003b      	movs	r3, r7
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	18d3      	adds	r3, r2, r3
    if( ( usAddress >= REG_DISC_START ) &&
 80048dc:	2b09      	cmp	r3, #9
 80048de:	dc30      	bgt.n	8004942 <eMBRegDiscreteCB+0xa2>
    {
        usBitOffset = ( unsigned short )( usAddress - REG_DISC_START );
 80048e0:	230a      	movs	r3, #10
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	1cba      	adds	r2, r7, #2
 80048e6:	8812      	ldrh	r2, [r2, #0]
 80048e8:	3a01      	subs	r2, #1
 80048ea:	801a      	strh	r2, [r3, #0]
        while( iNDiscrete > 0 )
 80048ec:	e022      	b.n	8004934 <eMBRegDiscreteCB+0x94>
        {
            *pucRegBuffer++ =
                xMBUtilGetBits( ucRegDiscBuf, usBitOffset,
 80048ee:	220c      	movs	r2, #12
 80048f0:	18bb      	adds	r3, r7, r2
 80048f2:	2100      	movs	r1, #0
 80048f4:	5e5b      	ldrsh	r3, [r3, r1]
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	dc03      	bgt.n	8004902 <eMBRegDiscreteCB+0x62>
 80048fa:	18bb      	adds	r3, r7, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e000      	b.n	8004904 <eMBRegDiscreteCB+0x64>
 8004902:	2308      	movs	r3, #8
            *pucRegBuffer++ =
 8004904:	687c      	ldr	r4, [r7, #4]
 8004906:	1c62      	adds	r2, r4, #1
 8004908:	607a      	str	r2, [r7, #4]
                xMBUtilGetBits( ucRegDiscBuf, usBitOffset,
 800490a:	250a      	movs	r5, #10
 800490c:	197a      	adds	r2, r7, r5
 800490e:	8811      	ldrh	r1, [r2, #0]
 8004910:	4811      	ldr	r0, [pc, #68]	; (8004958 <eMBRegDiscreteCB+0xb8>)
 8004912:	001a      	movs	r2, r3
 8004914:	f7ff fbca 	bl	80040ac <xMBUtilGetBits>
 8004918:	0003      	movs	r3, r0
            *pucRegBuffer++ =
 800491a:	7023      	strb	r3, [r4, #0]
                                ( unsigned char )( iNDiscrete >
                                                   8 ? 8 : iNDiscrete ) );
            iNDiscrete -= 8;
 800491c:	210c      	movs	r1, #12
 800491e:	187b      	adds	r3, r7, r1
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	3b08      	subs	r3, #8
 8004924:	b29a      	uxth	r2, r3
 8004926:	187b      	adds	r3, r7, r1
 8004928:	801a      	strh	r2, [r3, #0]
            usBitOffset += 8;
 800492a:	197b      	adds	r3, r7, r5
 800492c:	197a      	adds	r2, r7, r5
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	3208      	adds	r2, #8
 8004932:	801a      	strh	r2, [r3, #0]
        while( iNDiscrete > 0 )
 8004934:	230c      	movs	r3, #12
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	5e9b      	ldrsh	r3, [r3, r2]
 800493c:	2b00      	cmp	r3, #0
 800493e:	dcd6      	bgt.n	80048ee <eMBRegDiscreteCB+0x4e>
    if( ( usAddress >= REG_DISC_START ) &&
 8004940:	e003      	b.n	800494a <eMBRegDiscreteCB+0xaa>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8004942:	230f      	movs	r3, #15
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800494a:	230f      	movs	r3, #15
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bdb0      	pop	{r4, r5, r7, pc}
 8004958:	200002f8 	.word	0x200002f8

0800495c <xMBPortEventInit>:
static eMBEventType event;
static BOOL         eventReceived;

/* Exported functions ---------------------------------------------------------*/
BOOL xMBPortEventInit(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
    eventReceived = FALSE;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <xMBPortEventInit+0x14>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8004966:	2301      	movs	r3, #1
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	200002fa 	.word	0x200002fa

08004974 <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	0002      	movs	r2, r0
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	701a      	strb	r2, [r3, #0]
    eventReceived = TRUE;
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <xMBPortEventPost+0x24>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
    event = eEvent;
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <xMBPortEventPost+0x28>)
 8004988:	1dfa      	adds	r2, r7, #7
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800498e:	2301      	movs	r3, #1
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200002fa 	.word	0x200002fa
 800499c:	200002f9 	.word	0x200002f9

080049a0 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType* eEvent)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
    BOOL retVal = FALSE;
 80049a8:	210f      	movs	r1, #15
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
    if(eventReceived)
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <xMBPortEventGet+0x3c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <xMBPortEventGet+0x2c>
    {
        *eEvent = event;
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <xMBPortEventGet+0x40>)
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	701a      	strb	r2, [r3, #0]
        eventReceived = FALSE;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <xMBPortEventGet+0x3c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
        retVal = TRUE;
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
    }
    return retVal;
 80049cc:	230f      	movs	r3, #15
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200002fa 	.word	0x200002fa
 80049e0:	200002f9 	.word	0x200002f9

080049e4 <LL_USART_EnableIT_RXNE>:
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ec:	f3ef 8310 	mrs	r3, PRIMASK
 80049f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	2301      	movs	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2220      	movs	r2, #32
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b006      	add	sp, #24
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <LL_USART_EnableIT_TXE>:
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b006      	add	sp, #24
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <LL_USART_DisableIT_RXNE>:
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	2301      	movs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2220      	movs	r2, #32
 8004a84:	4393      	bics	r3, r2
 8004a86:	001a      	movs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			; (mov r8, r8)
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b006      	add	sp, #24
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <LL_USART_DisableIT_TXE>:
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f383 8810 	msr	PRIMASK, r3
}
 8004ad6:	46c0      	nop			; (mov r8, r8)
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b006      	add	sp, #24
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	000a      	movs	r2, r1
 8004b02:	1cfb      	adds	r3, r7, #3
 8004b04:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8004b06:	1cfb      	adds	r3, r7, #3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <vMBPortSerialEnable>:
#include "stm32f0xx_ll_usart.h"
/* External variables --------------------------------------------------------*/

/* Exported functions --------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	0002      	movs	r2, r0
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	1dbb      	adds	r3, r7, #6
 8004b26:	1c0a      	adds	r2, r1, #0
 8004b28:	701a      	strb	r2, [r3, #0]
  if (xRxEnable) {
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <vMBPortSerialEnable+0x24>
	    LL_USART_EnableIT_RXNE(SERIAL_PORT);
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <vMBPortSerialEnable+0x60>)
 8004b34:	0018      	movs	r0, r3
 8004b36:	f7ff ff55 	bl	80049e4 <LL_USART_EnableIT_RXNE>
 8004b3a:	e003      	b.n	8004b44 <vMBPortSerialEnable+0x2c>
	  } else {
	    LL_USART_DisableIT_RXNE(SERIAL_PORT);
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <vMBPortSerialEnable+0x60>)
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7ff ff8e 	bl	8004a60 <LL_USART_DisableIT_RXNE>
	  }


  if (xTxEnable) {
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <vMBPortSerialEnable+0x4e>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	0159      	lsls	r1, r3, #5
 8004b50:	2390      	movs	r3, #144	; 0x90
 8004b52:	05db      	lsls	r3, r3, #23
 8004b54:	2201      	movs	r2, #1
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fc fe48 	bl	80017ec <HAL_GPIO_WritePin>
    LL_USART_EnableIT_TXE(SERIAL_PORT);
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <vMBPortSerialEnable+0x60>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7ff ff5f 	bl	8004a22 <LL_USART_EnableIT_TXE>
  }
  else {
//    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
    LL_USART_DisableIT_TXE(SERIAL_PORT);
  }
}
 8004b64:	e003      	b.n	8004b6e <vMBPortSerialEnable+0x56>
    LL_USART_DisableIT_TXE(SERIAL_PORT);
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <vMBPortSerialEnable+0x60>)
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff ff99 	bl	8004aa0 <LL_USART_DisableIT_TXE>
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	40013800 	.word	0x40013800

08004b7c <xMBPortSerialInit>:
 
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	0004      	movs	r4, r0
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	0010      	movs	r0, r2
 8004b88:	0019      	movs	r1, r3
 8004b8a:	1dfb      	adds	r3, r7, #7
 8004b8c:	1c22      	adds	r2, r4, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	1dbb      	adds	r3, r7, #6
 8004b92:	1c02      	adds	r2, r0, #0
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	1d7b      	adds	r3, r7, #5
 8004b98:	1c0a      	adds	r2, r1, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
  /* Performed by CubeMX */
	MX_USART1_UART_Init();
 8004b9c:	f7fc f922 	bl	8000de4 <MX_USART1_UART_Init>
//HAL_UART_Init(SERIAL_PORT);
SET_BIT(SERIAL_PORT->CR1, USART_CR1_TCIE);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <xMBPortSerialInit+0x3c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <xMBPortSerialInit+0x3c>)
 8004ba6:	2140      	movs	r1, #64	; 0x40
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
//  HAL_UART_Enable(SERIAL_PORT);
//  HAL_USART_EnableIT_TC(SERIAL_PORT);
  return TRUE;
 8004bac:	2301      	movs	r3, #1
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b003      	add	sp, #12
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	40013800 	.word	0x40013800

08004bbc <xMBPortSerialPutByte>:

HAL_StatusTypeDef result;

BOOL xMBPortSerialPutByte(CHAR ucByte)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	1dfb      	adds	r3, r7, #7
 8004bc6:	701a      	strb	r2, [r3, #0]
	  LL_USART_TransmitData8(SERIAL_PORT, ucByte);
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <xMBPortSerialPutByte+0x24>)
 8004bce:	0019      	movs	r1, r3
 8004bd0:	0010      	movs	r0, r2
 8004bd2:	f7ff ff91 	bl	8004af8 <LL_USART_TransmitData8>
//  HAL_UART_Transmit(SERIAL_PORT, &ucByte, 1, HAL_MAX_DELAY);
  return TRUE;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40013800 	.word	0x40013800

08004be4 <xMBPortSerialGetByte>:
 
BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	  *pucByte = (uint8_t)(LL_USART_ReceiveData8(SERIAL_PORT) & (uint8_t)0x00FF);
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <xMBPortSerialGetByte+0x24>)
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff ff76 	bl	8004ae0 <LL_USART_ReceiveData8>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	b25a      	sxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	701a      	strb	r2, [r3, #0]
//  HAL_UART_Receive(SERIAL_PORT, (uint8_t *)pucByte, 1, HAL_MAX_DELAY);
  return TRUE;
 8004bfc:	2301      	movs	r3, #1
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	40013800 	.word	0x40013800

08004c0c <LL_TIM_EnableCounter>:
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LL_TIM_DisableCounter>:
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2201      	movs	r2, #1
 8004c36:	4393      	bics	r3, r2
 8004c38:	001a      	movs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <LL_TIM_SetCounter>:
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <LL_TIM_SetAutoReload>:
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <LL_TIM_EnableIT_UPDATE>:
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <LL_TIM_DisableIT_UPDATE>:
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <xMBPortTimersInit>:

/* Private variables ---------------------------------------------------------*/
 
/* Exported functions ---------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTimeOut50us)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	801a      	strh	r2, [r3, #0]
  /* Performed by CubeMX */
//	  MX_TIM14_Init();
//	  WRITE_REG(TIM_TIMEOUT->ARR, (usTimeOut50us - 1));
	  LL_TIM_SetAutoReload(TIM_TIMEOUT, (usTimeOut50us - 1));
 8004cbc:	1dbb      	adds	r3, r7, #6
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <xMBPortTimersInit+0x28>)
 8004cc6:	0011      	movs	r1, r2
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7ff ffc8 	bl	8004c5e <LL_TIM_SetAutoReload>
//  LL_TIM_SetAutoReload(TIM_TIMEOUT, (usTimeOut50us - 1));
  return TRUE;
 8004cce:	2301      	movs	r3, #1
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40002000 	.word	0x40002000

08004cdc <vMBPortTimersEnable>:

void vMBPortTimersEnable()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
	  LL_TIM_SetCounter(TIM_TIMEOUT, 0);
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <vMBPortTimersEnable+0x24>)
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7ff ffae 	bl	8004c46 <LL_TIM_SetCounter>
	  LL_TIM_EnableIT_UPDATE(TIM_TIMEOUT);
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <vMBPortTimersEnable+0x24>)
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7ff ffc2 	bl	8004c76 <LL_TIM_EnableIT_UPDATE>
	  LL_TIM_EnableCounter(TIM_TIMEOUT);
 8004cf2:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <vMBPortTimersEnable+0x24>)
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff ff89 	bl	8004c0c <LL_TIM_EnableCounter>
//	  __HAL_TIM_ENABLE_IT(pxTimerHandle, TIM_IT_UPDATE);
//
//	  // Start the timer
//	  HAL_TIM_Base_Start_IT(pxTimerHandle);

}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40002000 	.word	0x40002000

08004d04 <vMBPortTimersDisable>:
 
void vMBPortTimersDisable()
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	 LL_TIM_SetCounter(TIM_TIMEOUT, 0);
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <vMBPortTimersDisable+0x24>)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff ff9a 	bl	8004c46 <LL_TIM_SetCounter>
	  LL_TIM_DisableCounter(TIM_TIMEOUT);
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <vMBPortTimersDisable+0x24>)
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ff87 	bl	8004c28 <LL_TIM_DisableCounter>
	  LL_TIM_DisableIT_UPDATE(TIM_TIMEOUT);
 8004d1a:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <vMBPortTimersDisable+0x24>)
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff ffb8 	bl	8004c92 <LL_TIM_DisableIT_UPDATE>
//	  __HAL_TIM_DISABLE_IT(pxTimerHandle, TIM_IT_UPDATE);
//
//	  // Stop the timer
//	  HAL_TIM_Base_Stop_IT(pxTimerHandle);

}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40002000 	.word	0x40002000

08004d2c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	000a      	movs	r2, r1
 8004d36:	1cbb      	adds	r3, r7, #2
 8004d38:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8004d3a:	230f      	movs	r3, #15
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8004d42:	230e      	movs	r3, #14
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8004d4a:	e019      	b.n	8004d80 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	200e      	movs	r0, #14
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	4053      	eors	r3, r2
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <usMBCRC16+0x84>)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	18d3      	adds	r3, r2, r3
 8004d66:	7819      	ldrb	r1, [r3, #0]
 8004d68:	183b      	adds	r3, r7, r0
 8004d6a:	200f      	movs	r0, #15
 8004d6c:	183a      	adds	r2, r7, r0
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	404a      	eors	r2, r1
 8004d72:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8004d74:	183b      	adds	r3, r7, r0
 8004d76:	490f      	ldr	r1, [pc, #60]	; (8004db4 <usMBCRC16+0x88>)
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	188a      	adds	r2, r1, r2
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8004d80:	1cbb      	adds	r3, r7, #2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	1cba      	adds	r2, r7, #2
 8004d86:	1e59      	subs	r1, r3, #1
 8004d88:	8011      	strh	r1, [r2, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1de      	bne.n	8004d4c <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8004d8e:	230f      	movs	r3, #15
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	b21a      	sxth	r2, r3
 8004d98:	230e      	movs	r3, #14
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	b29b      	uxth	r3, r3
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b004      	add	sp, #16
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	080063e0 	.word	0x080063e0
 8004db4:	080064e0 	.word	0x080064e0

08004db8 <eMBRTUInit>:
float start_time ,Loop_time,end_time;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0004      	movs	r4, r0
 8004dc0:	0008      	movs	r0, r1
 8004dc2:	603a      	str	r2, [r7, #0]
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	1dfb      	adds	r3, r7, #7
 8004dc8:	1c22      	adds	r2, r4, #0
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	1dbb      	adds	r3, r7, #6
 8004dce:	1c02      	adds	r2, r0, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	1d7b      	adds	r3, r7, #5
 8004dd4:	1c0a      	adds	r2, r1, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004dd8:	240f      	movs	r4, #15
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004de0:	b672      	cpsid	i
}
 8004de2:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8004de4:	1d7b      	adds	r3, r7, #5
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	1dbb      	adds	r3, r7, #6
 8004dec:	7818      	ldrb	r0, [r3, #0]
 8004dee:	0013      	movs	r3, r2
 8004df0:	2208      	movs	r2, #8
 8004df2:	f7ff fec3 	bl	8004b7c <xMBPortSerialInit>
 8004df6:	0003      	movs	r3, r0
 8004df8:	001a      	movs	r2, r3
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4053      	eors	r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <eMBRTUInit+0x54>
    {
        eStatus = MB_EPORTERR;
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	2203      	movs	r2, #3
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e01f      	b.n	8004e4c <eMBRTUInit+0x94>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	2396      	movs	r3, #150	; 0x96
 8004e10:	01db      	lsls	r3, r3, #7
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d902      	bls.n	8004e1c <eMBRTUInit+0x64>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8004e16:	2323      	movs	r3, #35	; 0x23
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	e007      	b.n	8004e2c <eMBRTUInit+0x74>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	0019      	movs	r1, r3
 8004e22:	480f      	ldr	r0, [pc, #60]	; (8004e60 <eMBRTUInit+0xa8>)
 8004e24:	f7fb f978 	bl	8000118 <__udivsi3>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7ff ff3d 	bl	8004cb0 <xMBPortTimersInit>
 8004e36:	0003      	movs	r3, r0
 8004e38:	001a      	movs	r2, r3
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4053      	eors	r3, r2
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <eMBRTUInit+0x94>
        {
            eStatus = MB_EPORTERR;
 8004e44:	230f      	movs	r3, #15
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	2203      	movs	r2, #3
 8004e4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e4c:	b662      	cpsie	i
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8004e50:	230f      	movs	r3, #15
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	781b      	ldrb	r3, [r3, #0]
}
 8004e56:	0018      	movs	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b005      	add	sp, #20
 8004e5c:	bd90      	pop	{r4, r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	00177fa0 	.word	0x00177fa0

08004e64 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e68:	b672      	cpsid	i
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <eMBRTUStart+0x24>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8004e72:	2100      	movs	r1, #0
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7ff fe4f 	bl	8004b18 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8004e7a:	f7ff ff2f 	bl	8004cdc <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8004e7e:	b662      	cpsie	i
}
 8004e80:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200002fc 	.word	0x200002fc

08004e8c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004e90:	b672      	cpsid	i
}
 8004e92:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8004e94:	2100      	movs	r1, #0
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7ff fe3e 	bl	8004b18 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8004e9c:	f7ff ff32 	bl	8004d04 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8004ea0:	b662      	cpsie	i
}
 8004ea2:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8004eb8:	2316      	movs	r3, #22
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004ec0:	2317      	movs	r3, #23
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec8:	b672      	cpsid	i
}
 8004eca:	46c0      	nop			; (mov r8, r8)
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <eMBRTUReceive+0x98>)
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2bff      	cmp	r3, #255	; 0xff
 8004ed4:	d905      	bls.n	8004ee2 <eMBRTUReceive+0x36>
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <eMBRTUReceive+0x9c>)
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <eMBRTUReceive+0xa0>)
 8004eda:	481d      	ldr	r0, [pc, #116]	; (8004f50 <eMBRTUReceive+0xa4>)
 8004edc:	21a2      	movs	r1, #162	; 0xa2
 8004ede:	f000 f9e5 	bl	80052ac <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <eMBRTUReceive+0x98>)
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d91d      	bls.n	8004f28 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <eMBRTUReceive+0x98>)
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <eMBRTUReceive+0xa8>)
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff ff18 	bl	8004d2c <usMBCRC16>
 8004efc:	1e03      	subs	r3, r0, #0
 8004efe:	d113      	bne.n	8004f28 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <eMBRTUReceive+0xa8>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <eMBRTUReceive+0x98>)
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b03      	subs	r3, #3
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <eMBRTUReceive+0xac>)
 8004f1c:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8004f1e:	2316      	movs	r3, #22
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e003      	b.n	8004f30 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 8004f28:	2317      	movs	r3, #23
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f30:	b662      	cpsie	i
}
 8004f32:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8004f34:	2317      	movs	r3, #23
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	781b      	ldrb	r3, [r3, #0]
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b006      	add	sp, #24
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	20000406 	.word	0x20000406
 8004f48:	080062b0 	.word	0x080062b0
 8004f4c:	080065e0 	.word	0x080065e0
 8004f50:	080062d8 	.word	0x080062d8
 8004f54:	20000300 	.word	0x20000300
 8004f58:	20000301 	.word	0x20000301

08004f5c <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6039      	str	r1, [r7, #0]
 8004f64:	0011      	movs	r1, r2
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	1c02      	adds	r2, r0, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	1d3b      	adds	r3, r7, #4
 8004f6e:	1c0a      	adds	r2, r1, #0
 8004f70:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8004f72:	230f      	movs	r3, #15
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f7a:	b672      	cpsid	i
}
 8004f7c:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8004f7e:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <eMBRTUSend+0xd4>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d145      	bne.n	8005014 <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <eMBRTUSend+0xd8>)
 8004f8e:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8004f90:	4b29      	ldr	r3, [pc, #164]	; (8005038 <eMBRTUSend+0xdc>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <eMBRTUSend+0xd8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1dfa      	adds	r2, r7, #7
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <eMBRTUSend+0xdc>)
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <eMBRTUSend+0xdc>)
 8004fb0:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <eMBRTUSend+0xd8>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b20      	ldr	r3, [pc, #128]	; (8005038 <eMBRTUSend+0xdc>)
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	250c      	movs	r5, #12
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	0010      	movs	r0, r2
 8004fc4:	f7ff feb2 	bl	8004d2c <usMBCRC16>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <eMBRTUSend+0xdc>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	b291      	uxth	r1, r2
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <eMBRTUSend+0xdc>)
 8004fd8:	8011      	strh	r1, [r2, #0]
 8004fda:	001a      	movs	r2, r3
 8004fdc:	197b      	adds	r3, r7, r5
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b2d9      	uxtb	r1, r3
 8004fe2:	4b16      	ldr	r3, [pc, #88]	; (800503c <eMBRTUSend+0xe0>)
 8004fe4:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004fe6:	197b      	adds	r3, r7, r5
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	b299      	uxth	r1, r3
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <eMBRTUSend+0xdc>)
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	b290      	uxth	r0, r2
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <eMBRTUSend+0xdc>)
 8004ffa:	8010      	strh	r0, [r2, #0]
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	b2c9      	uxtb	r1, r1
 8005000:	4b0e      	ldr	r3, [pc, #56]	; (800503c <eMBRTUSend+0xe0>)
 8005002:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <eMBRTUSend+0xe4>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 800500a:	2101      	movs	r1, #1
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff fd83 	bl	8004b18 <vMBPortSerialEnable>
 8005012:	e003      	b.n	800501c <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 8005014:	230f      	movs	r3, #15
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2205      	movs	r2, #5
 800501a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800501c:	b662      	cpsie	i
}
 800501e:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8005020:	230f      	movs	r3, #15
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bdb0      	pop	{r4, r5, r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	200002fc 	.word	0x200002fc
 8005034:	20000400 	.word	0x20000400
 8005038:	20000404 	.word	0x20000404
 800503c:	20000300 	.word	0x20000300
 8005040:	200002fb 	.word	0x200002fb

08005044 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8005050:	4b39      	ldr	r3, [pc, #228]	; (8005138 <xMBRTUReceiveFSM+0xf4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <xMBRTUReceiveFSM+0x22>
 800505a:	4b38      	ldr	r3, [pc, #224]	; (800513c <xMBRTUReceiveFSM+0xf8>)
 800505c:	4a38      	ldr	r2, [pc, #224]	; (8005140 <xMBRTUReceiveFSM+0xfc>)
 800505e:	4839      	ldr	r0, [pc, #228]	; (8005144 <xMBRTUReceiveFSM+0x100>)
 8005060:	21ec      	movs	r1, #236	; 0xec
 8005062:	f000 f923 	bl	80052ac <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8005066:	1dbb      	adds	r3, r7, #6
 8005068:	0018      	movs	r0, r3
 800506a:	f7ff fdbb 	bl	8004be4 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <xMBRTUReceiveFSM+0x104>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d00b      	beq.n	8005090 <xMBRTUReceiveFSM+0x4c>
 8005078:	dc58      	bgt.n	800512c <xMBRTUReceiveFSM+0xe8>
 800507a:	2b02      	cmp	r3, #2
 800507c:	d03e      	beq.n	80050fc <xMBRTUReceiveFSM+0xb8>
 800507e:	dc55      	bgt.n	800512c <xMBRTUReceiveFSM+0xe8>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <xMBRTUReceiveFSM+0x46>
 8005084:	2b01      	cmp	r3, #1
 8005086:	d006      	beq.n	8005096 <xMBRTUReceiveFSM+0x52>
 8005088:	e050      	b.n	800512c <xMBRTUReceiveFSM+0xe8>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800508a:	f7ff fe27 	bl	8004cdc <vMBPortTimersEnable>
        break;
 800508e:	e04d      	b.n	800512c <xMBRTUReceiveFSM+0xe8>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8005090:	f7ff fe24 	bl	8004cdc <vMBPortTimersEnable>
        break;
 8005094:	e04a      	b.n	800512c <xMBRTUReceiveFSM+0xe8>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <xMBRTUReceiveFSM+0x108>)
 8005098:	2200      	movs	r2, #0
 800509a:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800509c:	4b2b      	ldr	r3, [pc, #172]	; (800514c <xMBRTUReceiveFSM+0x108>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	b291      	uxth	r1, r2
 80050a6:	4a29      	ldr	r2, [pc, #164]	; (800514c <xMBRTUReceiveFSM+0x108>)
 80050a8:	8011      	strh	r1, [r2, #0]
 80050aa:	001a      	movs	r2, r3
 80050ac:	1dbb      	adds	r3, r7, #6
 80050ae:	7819      	ldrb	r1, [r3, #0]
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <xMBRTUReceiveFSM+0x10c>)
 80050b2:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <xMBRTUReceiveFSM+0x104>)
 80050b6:	2202      	movs	r2, #2
 80050b8:	701a      	strb	r2, [r3, #0]
        start_time=HAL_GetTick();
 80050ba:	f7fc f813 	bl	80010e4 <HAL_GetTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fb fa55 	bl	8000570 <__aeabi_ui2f>
 80050c6:	1c02      	adds	r2, r0, #0
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <xMBRTUReceiveFSM+0x110>)
 80050ca:	601a      	str	r2, [r3, #0]
            Loop_time=start_time-end_time;
 80050cc:	4b21      	ldr	r3, [pc, #132]	; (8005154 <xMBRTUReceiveFSM+0x110>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <xMBRTUReceiveFSM+0x114>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	1c19      	adds	r1, r3, #0
 80050d6:	1c10      	adds	r0, r2, #0
 80050d8:	f7fb f8aa 	bl	8000230 <__aeabi_fsub>
 80050dc:	1c03      	adds	r3, r0, #0
 80050de:	1c1a      	adds	r2, r3, #0
 80050e0:	4b1e      	ldr	r3, [pc, #120]	; (800515c <xMBRTUReceiveFSM+0x118>)
 80050e2:	601a      	str	r2, [r3, #0]
            end_time=HAL_GetTick();
 80050e4:	f7fb fffe 	bl	80010e4 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7fb fa40 	bl	8000570 <__aeabi_ui2f>
 80050f0:	1c02      	adds	r2, r0, #0
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <xMBRTUReceiveFSM+0x114>)
 80050f4:	601a      	str	r2, [r3, #0]
        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80050f6:	f7ff fdf1 	bl	8004cdc <vMBPortTimersEnable>
        break;
 80050fa:	e017      	b.n	800512c <xMBRTUReceiveFSM+0xe8>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80050fc:	4b13      	ldr	r3, [pc, #76]	; (800514c <xMBRTUReceiveFSM+0x108>)
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	2bff      	cmp	r3, #255	; 0xff
 8005104:	d80c      	bhi.n	8005120 <xMBRTUReceiveFSM+0xdc>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <xMBRTUReceiveFSM+0x108>)
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	b291      	uxth	r1, r2
 8005110:	4a0e      	ldr	r2, [pc, #56]	; (800514c <xMBRTUReceiveFSM+0x108>)
 8005112:	8011      	strh	r1, [r2, #0]
 8005114:	001a      	movs	r2, r3
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <xMBRTUReceiveFSM+0x10c>)
 800511c:	5499      	strb	r1, [r3, r2]
 800511e:	e002      	b.n	8005126 <xMBRTUReceiveFSM+0xe2>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8005120:	4b09      	ldr	r3, [pc, #36]	; (8005148 <xMBRTUReceiveFSM+0x104>)
 8005122:	2203      	movs	r2, #3
 8005124:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8005126:	f7ff fdd9 	bl	8004cdc <vMBPortTimersEnable>
        break;
 800512a:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	781b      	ldrb	r3, [r3, #0]
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200002fb 	.word	0x200002fb
 800513c:	080062fc 	.word	0x080062fc
 8005140:	080065f0 	.word	0x080065f0
 8005144:	080062d8 	.word	0x080062d8
 8005148:	200002fc 	.word	0x200002fc
 800514c:	20000406 	.word	0x20000406
 8005150:	20000300 	.word	0x20000300
 8005154:	20000408 	.word	0x20000408
 8005158:	20000410 	.word	0x20000410
 800515c:	2000040c 	.word	0x2000040c

08005160 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005166:	1dfb      	adds	r3, r7, #7
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <xMBRTUTransmitFSM+0x9c>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	d006      	beq.n	8005184 <xMBRTUTransmitFSM+0x24>
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <xMBRTUTransmitFSM+0xa0>)
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <xMBRTUTransmitFSM+0xa4>)
 800517a:	212a      	movs	r1, #42	; 0x2a
 800517c:	31ff      	adds	r1, #255	; 0xff
 800517e:	4822      	ldr	r0, [pc, #136]	; (8005208 <xMBRTUTransmitFSM+0xa8>)
 8005180:	f000 f894 	bl	80052ac <__assert_func>

    switch ( eSndState )
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <xMBRTUTransmitFSM+0xac>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <xMBRTUTransmitFSM+0x34>
 800518e:	2b01      	cmp	r3, #1
 8005190:	d005      	beq.n	800519e <xMBRTUTransmitFSM+0x3e>
 8005192:	e02c      	b.n	80051ee <xMBRTUTransmitFSM+0x8e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8005194:	2100      	movs	r1, #0
 8005196:	2001      	movs	r0, #1
 8005198:	f7ff fcbe 	bl	8004b18 <vMBPortSerialEnable>
        break;
 800519c:	e027      	b.n	80051ee <xMBRTUTransmitFSM+0x8e>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800519e:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <xMBRTUTransmitFSM+0xb0>)
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d014      	beq.n	80051d2 <xMBRTUTransmitFSM+0x72>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <xMBRTUTransmitFSM+0xb4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff fd02 	bl	8004bbc <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <xMBRTUTransmitFSM+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	4b15      	ldr	r3, [pc, #84]	; (8005214 <xMBRTUTransmitFSM+0xb4>)
 80051c0:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <xMBRTUTransmitFSM+0xb0>)
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	4b10      	ldr	r3, [pc, #64]	; (8005210 <xMBRTUTransmitFSM+0xb0>)
 80051ce:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80051d0:	e00c      	b.n	80051ec <xMBRTUTransmitFSM+0x8c>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80051d2:	1dfc      	adds	r4, r7, #7
 80051d4:	2003      	movs	r0, #3
 80051d6:	f7ff fbcd 	bl	8004974 <xMBPortEventPost>
 80051da:	0003      	movs	r3, r0
 80051dc:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 80051de:	2100      	movs	r1, #0
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7ff fc99 	bl	8004b18 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <xMBRTUTransmitFSM+0xac>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
        break;
 80051ec:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	781b      	ldrb	r3, [r3, #0]
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b003      	add	sp, #12
 80051f8:	bd90      	pop	{r4, r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	200002fc 	.word	0x200002fc
 8005200:	08006318 	.word	0x08006318
 8005204:	08006604 	.word	0x08006604
 8005208:	080062d8 	.word	0x080062d8
 800520c:	200002fb 	.word	0x200002fb
 8005210:	20000404 	.word	0x20000404
 8005214:	20000400 	.word	0x20000400

08005218 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800521e:	1dfb      	adds	r3, r7, #7
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <xMBRTUTimerT35Expired+0x84>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b03      	cmp	r3, #3
 800522c:	d029      	beq.n	8005282 <xMBRTUTimerT35Expired+0x6a>
 800522e:	dc12      	bgt.n	8005256 <xMBRTUTimerT35Expired+0x3e>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <xMBRTUTimerT35Expired+0x22>
 8005234:	2b02      	cmp	r3, #2
 8005236:	d007      	beq.n	8005248 <xMBRTUTimerT35Expired+0x30>
 8005238:	e00d      	b.n	8005256 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800523a:	1dfc      	adds	r4, r7, #7
 800523c:	2000      	movs	r0, #0
 800523e:	f7ff fb99 	bl	8004974 <xMBPortEventPost>
 8005242:	0003      	movs	r3, r0
 8005244:	7023      	strb	r3, [r4, #0]
        break;
 8005246:	e01d      	b.n	8005284 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8005248:	1dfc      	adds	r4, r7, #7
 800524a:	2001      	movs	r0, #1
 800524c:	f7ff fb92 	bl	8004974 <xMBPortEventPost>
 8005250:	0003      	movs	r3, r0
 8005252:	7023      	strb	r3, [r4, #0]
        break;
 8005254:	e016      	b.n	8005284 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <xMBRTUTimerT35Expired+0x84>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d011      	beq.n	8005284 <xMBRTUTimerT35Expired+0x6c>
 8005260:	4b0e      	ldr	r3, [pc, #56]	; (800529c <xMBRTUTimerT35Expired+0x84>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d00c      	beq.n	8005284 <xMBRTUTimerT35Expired+0x6c>
 800526a:	4b0c      	ldr	r3, [pc, #48]	; (800529c <xMBRTUTimerT35Expired+0x84>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b03      	cmp	r3, #3
 8005272:	d007      	beq.n	8005284 <xMBRTUTimerT35Expired+0x6c>
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <xMBRTUTimerT35Expired+0x88>)
 8005276:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <xMBRTUTimerT35Expired+0x8c>)
 8005278:	21b1      	movs	r1, #177	; 0xb1
 800527a:	0049      	lsls	r1, r1, #1
 800527c:	480a      	ldr	r0, [pc, #40]	; (80052a8 <xMBRTUTimerT35Expired+0x90>)
 800527e:	f000 f815 	bl	80052ac <__assert_func>
        break;
 8005282:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8005284:	f7ff fd3e 	bl	8004d04 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <xMBRTUTimerT35Expired+0x84>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800528e:	1dfb      	adds	r3, r7, #7
 8005290:	781b      	ldrb	r3, [r3, #0]
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b003      	add	sp, #12
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	200002fc 	.word	0x200002fc
 80052a0:	08006334 	.word	0x08006334
 80052a4:	08006618 	.word	0x08006618
 80052a8:	080062d8 	.word	0x080062d8

080052ac <__assert_func>:
 80052ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80052ae:	0014      	movs	r4, r2
 80052b0:	001a      	movs	r2, r3
 80052b2:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <__assert_func+0x2c>)
 80052b4:	0005      	movs	r5, r0
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	000e      	movs	r6, r1
 80052ba:	68d8      	ldr	r0, [r3, #12]
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <__assert_func+0x30>)
 80052be:	2c00      	cmp	r4, #0
 80052c0:	d101      	bne.n	80052c6 <__assert_func+0x1a>
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <__assert_func+0x34>)
 80052c4:	001c      	movs	r4, r3
 80052c6:	4907      	ldr	r1, [pc, #28]	; (80052e4 <__assert_func+0x38>)
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	9402      	str	r4, [sp, #8]
 80052cc:	002b      	movs	r3, r5
 80052ce:	9600      	str	r6, [sp, #0]
 80052d0:	f000 f8b2 	bl	8005438 <fiprintf>
 80052d4:	f000 f9ab 	bl	800562e <abort>
 80052d8:	200000e8 	.word	0x200000e8
 80052dc:	0800662e 	.word	0x0800662e
 80052e0:	08006669 	.word	0x08006669
 80052e4:	0800663b 	.word	0x0800663b

080052e8 <std>:
 80052e8:	2300      	movs	r3, #0
 80052ea:	b510      	push	{r4, lr}
 80052ec:	0004      	movs	r4, r0
 80052ee:	6003      	str	r3, [r0, #0]
 80052f0:	6043      	str	r3, [r0, #4]
 80052f2:	6083      	str	r3, [r0, #8]
 80052f4:	8181      	strh	r1, [r0, #12]
 80052f6:	6643      	str	r3, [r0, #100]	; 0x64
 80052f8:	81c2      	strh	r2, [r0, #14]
 80052fa:	6103      	str	r3, [r0, #16]
 80052fc:	6143      	str	r3, [r0, #20]
 80052fe:	6183      	str	r3, [r0, #24]
 8005300:	0019      	movs	r1, r3
 8005302:	2208      	movs	r2, #8
 8005304:	305c      	adds	r0, #92	; 0x5c
 8005306:	f000 f90f 	bl	8005528 <memset>
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <std+0x50>)
 800530c:	6224      	str	r4, [r4, #32]
 800530e:	6263      	str	r3, [r4, #36]	; 0x24
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <std+0x54>)
 8005312:	62a3      	str	r3, [r4, #40]	; 0x28
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <std+0x58>)
 8005316:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <std+0x5c>)
 800531a:	6323      	str	r3, [r4, #48]	; 0x30
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <std+0x60>)
 800531e:	429c      	cmp	r4, r3
 8005320:	d005      	beq.n	800532e <std+0x46>
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <std+0x64>)
 8005324:	429c      	cmp	r4, r3
 8005326:	d002      	beq.n	800532e <std+0x46>
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <std+0x68>)
 800532a:	429c      	cmp	r4, r3
 800532c:	d103      	bne.n	8005336 <std+0x4e>
 800532e:	0020      	movs	r0, r4
 8005330:	3058      	adds	r0, #88	; 0x58
 8005332:	f000 f979 	bl	8005628 <__retarget_lock_init_recursive>
 8005336:	bd10      	pop	{r4, pc}
 8005338:	08005491 	.word	0x08005491
 800533c:	080054b9 	.word	0x080054b9
 8005340:	080054f1 	.word	0x080054f1
 8005344:	0800551d 	.word	0x0800551d
 8005348:	20000414 	.word	0x20000414
 800534c:	2000047c 	.word	0x2000047c
 8005350:	200004e4 	.word	0x200004e4

08005354 <stdio_exit_handler>:
 8005354:	b510      	push	{r4, lr}
 8005356:	4a03      	ldr	r2, [pc, #12]	; (8005364 <stdio_exit_handler+0x10>)
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <stdio_exit_handler+0x14>)
 800535a:	4804      	ldr	r0, [pc, #16]	; (800536c <stdio_exit_handler+0x18>)
 800535c:	f000 f87c 	bl	8005458 <_fwalk_sglue>
 8005360:	bd10      	pop	{r4, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	20000090 	.word	0x20000090
 8005368:	08005ed5 	.word	0x08005ed5
 800536c:	2000009c 	.word	0x2000009c

08005370 <cleanup_stdio>:
 8005370:	6841      	ldr	r1, [r0, #4]
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <cleanup_stdio+0x30>)
 8005374:	b510      	push	{r4, lr}
 8005376:	0004      	movs	r4, r0
 8005378:	4299      	cmp	r1, r3
 800537a:	d001      	beq.n	8005380 <cleanup_stdio+0x10>
 800537c:	f000 fdaa 	bl	8005ed4 <_fflush_r>
 8005380:	68a1      	ldr	r1, [r4, #8]
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <cleanup_stdio+0x34>)
 8005384:	4299      	cmp	r1, r3
 8005386:	d002      	beq.n	800538e <cleanup_stdio+0x1e>
 8005388:	0020      	movs	r0, r4
 800538a:	f000 fda3 	bl	8005ed4 <_fflush_r>
 800538e:	68e1      	ldr	r1, [r4, #12]
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <cleanup_stdio+0x38>)
 8005392:	4299      	cmp	r1, r3
 8005394:	d002      	beq.n	800539c <cleanup_stdio+0x2c>
 8005396:	0020      	movs	r0, r4
 8005398:	f000 fd9c 	bl	8005ed4 <_fflush_r>
 800539c:	bd10      	pop	{r4, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	20000414 	.word	0x20000414
 80053a4:	2000047c 	.word	0x2000047c
 80053a8:	200004e4 	.word	0x200004e4

080053ac <global_stdio_init.part.0>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <global_stdio_init.part.0+0x28>)
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <global_stdio_init.part.0+0x2c>)
 80053b2:	2104      	movs	r1, #4
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4809      	ldr	r0, [pc, #36]	; (80053dc <global_stdio_init.part.0+0x30>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f7ff ff95 	bl	80052e8 <std>
 80053be:	2201      	movs	r2, #1
 80053c0:	2109      	movs	r1, #9
 80053c2:	4807      	ldr	r0, [pc, #28]	; (80053e0 <global_stdio_init.part.0+0x34>)
 80053c4:	f7ff ff90 	bl	80052e8 <std>
 80053c8:	2202      	movs	r2, #2
 80053ca:	2112      	movs	r1, #18
 80053cc:	4805      	ldr	r0, [pc, #20]	; (80053e4 <global_stdio_init.part.0+0x38>)
 80053ce:	f7ff ff8b 	bl	80052e8 <std>
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	2000054c 	.word	0x2000054c
 80053d8:	08005355 	.word	0x08005355
 80053dc:	20000414 	.word	0x20000414
 80053e0:	2000047c 	.word	0x2000047c
 80053e4:	200004e4 	.word	0x200004e4

080053e8 <__sfp_lock_acquire>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4802      	ldr	r0, [pc, #8]	; (80053f4 <__sfp_lock_acquire+0xc>)
 80053ec:	f000 f91d 	bl	800562a <__retarget_lock_acquire_recursive>
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	20000555 	.word	0x20000555

080053f8 <__sfp_lock_release>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4802      	ldr	r0, [pc, #8]	; (8005404 <__sfp_lock_release+0xc>)
 80053fc:	f000 f916 	bl	800562c <__retarget_lock_release_recursive>
 8005400:	bd10      	pop	{r4, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	20000555 	.word	0x20000555

08005408 <__sinit>:
 8005408:	b510      	push	{r4, lr}
 800540a:	0004      	movs	r4, r0
 800540c:	f7ff ffec 	bl	80053e8 <__sfp_lock_acquire>
 8005410:	6a23      	ldr	r3, [r4, #32]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <__sinit+0x14>
 8005416:	f7ff ffef 	bl	80053f8 <__sfp_lock_release>
 800541a:	bd10      	pop	{r4, pc}
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <__sinit+0x28>)
 800541e:	6223      	str	r3, [r4, #32]
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <__sinit+0x2c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f6      	bne.n	8005416 <__sinit+0xe>
 8005428:	f7ff ffc0 	bl	80053ac <global_stdio_init.part.0>
 800542c:	e7f3      	b.n	8005416 <__sinit+0xe>
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	08005371 	.word	0x08005371
 8005434:	2000054c 	.word	0x2000054c

08005438 <fiprintf>:
 8005438:	b40e      	push	{r1, r2, r3}
 800543a:	b517      	push	{r0, r1, r2, r4, lr}
 800543c:	4c05      	ldr	r4, [pc, #20]	; (8005454 <fiprintf+0x1c>)
 800543e:	ab05      	add	r3, sp, #20
 8005440:	cb04      	ldmia	r3!, {r2}
 8005442:	0001      	movs	r1, r0
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	f000 fa1e 	bl	8005888 <_vfiprintf_r>
 800544c:	bc1e      	pop	{r1, r2, r3, r4}
 800544e:	bc08      	pop	{r3}
 8005450:	b003      	add	sp, #12
 8005452:	4718      	bx	r3
 8005454:	200000e8 	.word	0x200000e8

08005458 <_fwalk_sglue>:
 8005458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800545a:	0014      	movs	r4, r2
 800545c:	2600      	movs	r6, #0
 800545e:	9000      	str	r0, [sp, #0]
 8005460:	9101      	str	r1, [sp, #4]
 8005462:	68a5      	ldr	r5, [r4, #8]
 8005464:	6867      	ldr	r7, [r4, #4]
 8005466:	3f01      	subs	r7, #1
 8005468:	d504      	bpl.n	8005474 <_fwalk_sglue+0x1c>
 800546a:	6824      	ldr	r4, [r4, #0]
 800546c:	2c00      	cmp	r4, #0
 800546e:	d1f8      	bne.n	8005462 <_fwalk_sglue+0xa>
 8005470:	0030      	movs	r0, r6
 8005472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005474:	89ab      	ldrh	r3, [r5, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d908      	bls.n	800548c <_fwalk_sglue+0x34>
 800547a:	220e      	movs	r2, #14
 800547c:	5eab      	ldrsh	r3, [r5, r2]
 800547e:	3301      	adds	r3, #1
 8005480:	d004      	beq.n	800548c <_fwalk_sglue+0x34>
 8005482:	0029      	movs	r1, r5
 8005484:	9800      	ldr	r0, [sp, #0]
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	4798      	blx	r3
 800548a:	4306      	orrs	r6, r0
 800548c:	3568      	adds	r5, #104	; 0x68
 800548e:	e7ea      	b.n	8005466 <_fwalk_sglue+0xe>

08005490 <__sread>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	000c      	movs	r4, r1
 8005494:	250e      	movs	r5, #14
 8005496:	5f49      	ldrsh	r1, [r1, r5]
 8005498:	f000 f874 	bl	8005584 <_read_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	db03      	blt.n	80054a8 <__sread+0x18>
 80054a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054a2:	181b      	adds	r3, r3, r0
 80054a4:	6563      	str	r3, [r4, #84]	; 0x54
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	4a02      	ldr	r2, [pc, #8]	; (80054b4 <__sread+0x24>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	81a3      	strh	r3, [r4, #12]
 80054b0:	e7f9      	b.n	80054a6 <__sread+0x16>
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	ffffefff 	.word	0xffffefff

080054b8 <__swrite>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	001f      	movs	r7, r3
 80054bc:	898b      	ldrh	r3, [r1, #12]
 80054be:	0005      	movs	r5, r0
 80054c0:	000c      	movs	r4, r1
 80054c2:	0016      	movs	r6, r2
 80054c4:	05db      	lsls	r3, r3, #23
 80054c6:	d505      	bpl.n	80054d4 <__swrite+0x1c>
 80054c8:	230e      	movs	r3, #14
 80054ca:	5ec9      	ldrsh	r1, [r1, r3]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2302      	movs	r3, #2
 80054d0:	f000 f844 	bl	800555c <_lseek_r>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	4a05      	ldr	r2, [pc, #20]	; (80054ec <__swrite+0x34>)
 80054d8:	0028      	movs	r0, r5
 80054da:	4013      	ands	r3, r2
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	0032      	movs	r2, r6
 80054e0:	230e      	movs	r3, #14
 80054e2:	5ee1      	ldrsh	r1, [r4, r3]
 80054e4:	003b      	movs	r3, r7
 80054e6:	f000 f861 	bl	80055ac <_write_r>
 80054ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ec:	ffffefff 	.word	0xffffefff

080054f0 <__sseek>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	000c      	movs	r4, r1
 80054f4:	250e      	movs	r5, #14
 80054f6:	5f49      	ldrsh	r1, [r1, r5]
 80054f8:	f000 f830 	bl	800555c <_lseek_r>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	1c42      	adds	r2, r0, #1
 8005500:	d103      	bne.n	800550a <__sseek+0x1a>
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <__sseek+0x28>)
 8005504:	4013      	ands	r3, r2
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	0152      	lsls	r2, r2, #5
 800550e:	4313      	orrs	r3, r2
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	6560      	str	r0, [r4, #84]	; 0x54
 8005514:	e7f8      	b.n	8005508 <__sseek+0x18>
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	ffffefff 	.word	0xffffefff

0800551c <__sclose>:
 800551c:	b510      	push	{r4, lr}
 800551e:	230e      	movs	r3, #14
 8005520:	5ec9      	ldrsh	r1, [r1, r3]
 8005522:	f000 f809 	bl	8005538 <_close_r>
 8005526:	bd10      	pop	{r4, pc}

08005528 <memset>:
 8005528:	0003      	movs	r3, r0
 800552a:	1882      	adds	r2, r0, r2
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	7019      	strb	r1, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <_close_r>:
 8005538:	2300      	movs	r3, #0
 800553a:	b570      	push	{r4, r5, r6, lr}
 800553c:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_close_r+0x20>)
 800553e:	0004      	movs	r4, r0
 8005540:	0008      	movs	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb faf5 	bl	8000b32 <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d103      	bne.n	8005554 <_close_r+0x1c>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d000      	beq.n	8005554 <_close_r+0x1c>
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	20000550 	.word	0x20000550

0800555c <_lseek_r>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	0004      	movs	r4, r0
 8005560:	0008      	movs	r0, r1
 8005562:	0011      	movs	r1, r2
 8005564:	001a      	movs	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	4d05      	ldr	r5, [pc, #20]	; (8005580 <_lseek_r+0x24>)
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb fb02 	bl	8000b74 <_lseek>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d103      	bne.n	800557c <_lseek_r+0x20>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d000      	beq.n	800557c <_lseek_r+0x20>
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	20000550 	.word	0x20000550

08005584 <_read_r>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	0004      	movs	r4, r0
 8005588:	0008      	movs	r0, r1
 800558a:	0011      	movs	r1, r2
 800558c:	001a      	movs	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	4d05      	ldr	r5, [pc, #20]	; (80055a8 <_read_r+0x24>)
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	f7fb fa94 	bl	8000ac0 <_read>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d103      	bne.n	80055a4 <_read_r+0x20>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d000      	beq.n	80055a4 <_read_r+0x20>
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	20000550 	.word	0x20000550

080055ac <_write_r>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	0004      	movs	r4, r0
 80055b0:	0008      	movs	r0, r1
 80055b2:	0011      	movs	r1, r2
 80055b4:	001a      	movs	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	4d05      	ldr	r5, [pc, #20]	; (80055d0 <_write_r+0x24>)
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fb fa9d 	bl	8000afa <_write>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d103      	bne.n	80055cc <_write_r+0x20>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d000      	beq.n	80055cc <_write_r+0x20>
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	20000550 	.word	0x20000550

080055d4 <__errno>:
 80055d4:	4b01      	ldr	r3, [pc, #4]	; (80055dc <__errno+0x8>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	200000e8 	.word	0x200000e8

080055e0 <__libc_init_array>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	2600      	movs	r6, #0
 80055e4:	4c0c      	ldr	r4, [pc, #48]	; (8005618 <__libc_init_array+0x38>)
 80055e6:	4d0d      	ldr	r5, [pc, #52]	; (800561c <__libc_init_array+0x3c>)
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	d109      	bne.n	8005604 <__libc_init_array+0x24>
 80055f0:	2600      	movs	r6, #0
 80055f2:	f000 fe33 	bl	800625c <_init>
 80055f6:	4c0a      	ldr	r4, [pc, #40]	; (8005620 <__libc_init_array+0x40>)
 80055f8:	4d0a      	ldr	r5, [pc, #40]	; (8005624 <__libc_init_array+0x44>)
 80055fa:	1b64      	subs	r4, r4, r5
 80055fc:	10a4      	asrs	r4, r4, #2
 80055fe:	42a6      	cmp	r6, r4
 8005600:	d105      	bne.n	800560e <__libc_init_array+0x2e>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	00b3      	lsls	r3, r6, #2
 8005606:	58eb      	ldr	r3, [r5, r3]
 8005608:	4798      	blx	r3
 800560a:	3601      	adds	r6, #1
 800560c:	e7ee      	b.n	80055ec <__libc_init_array+0xc>
 800560e:	00b3      	lsls	r3, r6, #2
 8005610:	58eb      	ldr	r3, [r5, r3]
 8005612:	4798      	blx	r3
 8005614:	3601      	adds	r6, #1
 8005616:	e7f2      	b.n	80055fe <__libc_init_array+0x1e>
 8005618:	080066a0 	.word	0x080066a0
 800561c:	080066a0 	.word	0x080066a0
 8005620:	080066a4 	.word	0x080066a4
 8005624:	080066a0 	.word	0x080066a0

08005628 <__retarget_lock_init_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_acquire_recursive>:
 800562a:	4770      	bx	lr

0800562c <__retarget_lock_release_recursive>:
 800562c:	4770      	bx	lr

0800562e <abort>:
 800562e:	2006      	movs	r0, #6
 8005630:	b510      	push	{r4, lr}
 8005632:	f000 fd4b 	bl	80060cc <raise>
 8005636:	2001      	movs	r0, #1
 8005638:	f7fb fa36 	bl	8000aa8 <_exit>

0800563c <_free_r>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	0005      	movs	r5, r0
 8005640:	2900      	cmp	r1, #0
 8005642:	d010      	beq.n	8005666 <_free_r+0x2a>
 8005644:	1f0c      	subs	r4, r1, #4
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da00      	bge.n	800564e <_free_r+0x12>
 800564c:	18e4      	adds	r4, r4, r3
 800564e:	0028      	movs	r0, r5
 8005650:	f000 f8e2 	bl	8005818 <__malloc_lock>
 8005654:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <_free_r+0x90>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <_free_r+0x2c>
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	6014      	str	r4, [r2, #0]
 8005660:	0028      	movs	r0, r5
 8005662:	f000 f8e1 	bl	8005828 <__malloc_unlock>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x42>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	d1f3      	bne.n	800565c <_free_r+0x20>
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1809      	adds	r1, r1, r0
 800567a:	6021      	str	r1, [r4, #0]
 800567c:	e7ee      	b.n	800565c <_free_r+0x20>
 800567e:	001a      	movs	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <_free_r+0x4e>
 8005686:	42a3      	cmp	r3, r4
 8005688:	d9f9      	bls.n	800567e <_free_r+0x42>
 800568a:	6811      	ldr	r1, [r2, #0]
 800568c:	1850      	adds	r0, r2, r1
 800568e:	42a0      	cmp	r0, r4
 8005690:	d10b      	bne.n	80056aa <_free_r+0x6e>
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1809      	adds	r1, r1, r0
 8005696:	1850      	adds	r0, r2, r1
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	4283      	cmp	r3, r0
 800569c:	d1e0      	bne.n	8005660 <_free_r+0x24>
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	1841      	adds	r1, r0, r1
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e7da      	b.n	8005660 <_free_r+0x24>
 80056aa:	42a0      	cmp	r0, r4
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x78>
 80056ae:	230c      	movs	r3, #12
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	e7d5      	b.n	8005660 <_free_r+0x24>
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	1821      	adds	r1, r4, r0
 80056b8:	428b      	cmp	r3, r1
 80056ba:	d103      	bne.n	80056c4 <_free_r+0x88>
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	1809      	adds	r1, r1, r0
 80056c2:	6021      	str	r1, [r4, #0]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6054      	str	r4, [r2, #4]
 80056c8:	e7ca      	b.n	8005660 <_free_r+0x24>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	20000558 	.word	0x20000558

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	; (8005710 <sbrk_aligned+0x40>)
 80056d4:	000d      	movs	r5, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	0004      	movs	r4, r0
 80056da:	2900      	cmp	r1, #0
 80056dc:	d102      	bne.n	80056e4 <sbrk_aligned+0x14>
 80056de:	f000 fd15 	bl	800610c <_sbrk_r>
 80056e2:	6030      	str	r0, [r6, #0]
 80056e4:	0029      	movs	r1, r5
 80056e6:	0020      	movs	r0, r4
 80056e8:	f000 fd10 	bl	800610c <_sbrk_r>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d00a      	beq.n	8005706 <sbrk_aligned+0x36>
 80056f0:	2303      	movs	r3, #3
 80056f2:	1cc5      	adds	r5, r0, #3
 80056f4:	439d      	bics	r5, r3
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d007      	beq.n	800570a <sbrk_aligned+0x3a>
 80056fa:	1a29      	subs	r1, r5, r0
 80056fc:	0020      	movs	r0, r4
 80056fe:	f000 fd05 	bl	800610c <_sbrk_r>
 8005702:	3001      	adds	r0, #1
 8005704:	d101      	bne.n	800570a <sbrk_aligned+0x3a>
 8005706:	2501      	movs	r5, #1
 8005708:	426d      	negs	r5, r5
 800570a:	0028      	movs	r0, r5
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	2000055c 	.word	0x2000055c

08005714 <_malloc_r>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	2203      	movs	r2, #3
 8005718:	1ccb      	adds	r3, r1, #3
 800571a:	4393      	bics	r3, r2
 800571c:	3308      	adds	r3, #8
 800571e:	0006      	movs	r6, r0
 8005720:	001f      	movs	r7, r3
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d238      	bcs.n	8005798 <_malloc_r+0x84>
 8005726:	270c      	movs	r7, #12
 8005728:	42b9      	cmp	r1, r7
 800572a:	d837      	bhi.n	800579c <_malloc_r+0x88>
 800572c:	0030      	movs	r0, r6
 800572e:	f000 f873 	bl	8005818 <__malloc_lock>
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <_malloc_r+0x100>)
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	001c      	movs	r4, r3
 800573a:	2c00      	cmp	r4, #0
 800573c:	d133      	bne.n	80057a6 <_malloc_r+0x92>
 800573e:	0039      	movs	r1, r7
 8005740:	0030      	movs	r0, r6
 8005742:	f7ff ffc5 	bl	80056d0 <sbrk_aligned>
 8005746:	0004      	movs	r4, r0
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d15e      	bne.n	800580a <_malloc_r+0xf6>
 800574c:	9b00      	ldr	r3, [sp, #0]
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	0025      	movs	r5, r4
 8005752:	2d00      	cmp	r5, #0
 8005754:	d14e      	bne.n	80057f4 <_malloc_r+0xe0>
 8005756:	2c00      	cmp	r4, #0
 8005758:	d051      	beq.n	80057fe <_malloc_r+0xea>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	0029      	movs	r1, r5
 800575e:	18e3      	adds	r3, r4, r3
 8005760:	0030      	movs	r0, r6
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	f000 fcd2 	bl	800610c <_sbrk_r>
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	4283      	cmp	r3, r0
 800576c:	d147      	bne.n	80057fe <_malloc_r+0xea>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0030      	movs	r0, r6
 8005772:	1aff      	subs	r7, r7, r3
 8005774:	0039      	movs	r1, r7
 8005776:	f7ff ffab 	bl	80056d0 <sbrk_aligned>
 800577a:	3001      	adds	r0, #1
 800577c:	d03f      	beq.n	80057fe <_malloc_r+0xea>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	19db      	adds	r3, r3, r7
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	9b00      	ldr	r3, [sp, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d040      	beq.n	800580e <_malloc_r+0xfa>
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	42a2      	cmp	r2, r4
 8005790:	d133      	bne.n	80057fa <_malloc_r+0xe6>
 8005792:	2200      	movs	r2, #0
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e014      	b.n	80057c2 <_malloc_r+0xae>
 8005798:	2b00      	cmp	r3, #0
 800579a:	dac5      	bge.n	8005728 <_malloc_r+0x14>
 800579c:	230c      	movs	r3, #12
 800579e:	2500      	movs	r5, #0
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	0028      	movs	r0, r5
 80057a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	1bc9      	subs	r1, r1, r7
 80057aa:	d420      	bmi.n	80057ee <_malloc_r+0xda>
 80057ac:	290b      	cmp	r1, #11
 80057ae:	d918      	bls.n	80057e2 <_malloc_r+0xce>
 80057b0:	19e2      	adds	r2, r4, r7
 80057b2:	6027      	str	r7, [r4, #0]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d112      	bne.n	80057de <_malloc_r+0xca>
 80057b8:	9b00      	ldr	r3, [sp, #0]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	6011      	str	r1, [r2, #0]
 80057c0:	6053      	str	r3, [r2, #4]
 80057c2:	0030      	movs	r0, r6
 80057c4:	0025      	movs	r5, r4
 80057c6:	f000 f82f 	bl	8005828 <__malloc_unlock>
 80057ca:	2207      	movs	r2, #7
 80057cc:	350b      	adds	r5, #11
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	4395      	bics	r5, r2
 80057d2:	1aea      	subs	r2, r5, r3
 80057d4:	429d      	cmp	r5, r3
 80057d6:	d0e4      	beq.n	80057a2 <_malloc_r+0x8e>
 80057d8:	1b5b      	subs	r3, r3, r5
 80057da:	50a3      	str	r3, [r4, r2]
 80057dc:	e7e1      	b.n	80057a2 <_malloc_r+0x8e>
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa8>
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	d1d5      	bne.n	8005794 <_malloc_r+0x80>
 80057e8:	9b00      	ldr	r3, [sp, #0]
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e7e9      	b.n	80057c2 <_malloc_r+0xae>
 80057ee:	0023      	movs	r3, r4
 80057f0:	6864      	ldr	r4, [r4, #4]
 80057f2:	e7a2      	b.n	800573a <_malloc_r+0x26>
 80057f4:	002c      	movs	r4, r5
 80057f6:	686d      	ldr	r5, [r5, #4]
 80057f8:	e7ab      	b.n	8005752 <_malloc_r+0x3e>
 80057fa:	0013      	movs	r3, r2
 80057fc:	e7c4      	b.n	8005788 <_malloc_r+0x74>
 80057fe:	230c      	movs	r3, #12
 8005800:	0030      	movs	r0, r6
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f000 f810 	bl	8005828 <__malloc_unlock>
 8005808:	e7cb      	b.n	80057a2 <_malloc_r+0x8e>
 800580a:	6027      	str	r7, [r4, #0]
 800580c:	e7d9      	b.n	80057c2 <_malloc_r+0xae>
 800580e:	605b      	str	r3, [r3, #4]
 8005810:	deff      	udf	#255	; 0xff
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	20000558 	.word	0x20000558

08005818 <__malloc_lock>:
 8005818:	b510      	push	{r4, lr}
 800581a:	4802      	ldr	r0, [pc, #8]	; (8005824 <__malloc_lock+0xc>)
 800581c:	f7ff ff05 	bl	800562a <__retarget_lock_acquire_recursive>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	20000554 	.word	0x20000554

08005828 <__malloc_unlock>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4802      	ldr	r0, [pc, #8]	; (8005834 <__malloc_unlock+0xc>)
 800582c:	f7ff fefe 	bl	800562c <__retarget_lock_release_recursive>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	20000554 	.word	0x20000554

08005838 <__sfputc_r>:
 8005838:	6893      	ldr	r3, [r2, #8]
 800583a:	b510      	push	{r4, lr}
 800583c:	3b01      	subs	r3, #1
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da04      	bge.n	800584e <__sfputc_r+0x16>
 8005844:	6994      	ldr	r4, [r2, #24]
 8005846:	42a3      	cmp	r3, r4
 8005848:	db07      	blt.n	800585a <__sfputc_r+0x22>
 800584a:	290a      	cmp	r1, #10
 800584c:	d005      	beq.n	800585a <__sfputc_r+0x22>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	1c58      	adds	r0, r3, #1
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	7019      	strb	r1, [r3, #0]
 8005856:	0008      	movs	r0, r1
 8005858:	bd10      	pop	{r4, pc}
 800585a:	f000 fb66 	bl	8005f2a <__swbuf_r>
 800585e:	0001      	movs	r1, r0
 8005860:	e7f9      	b.n	8005856 <__sfputc_r+0x1e>

08005862 <__sfputs_r>:
 8005862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005864:	0006      	movs	r6, r0
 8005866:	000f      	movs	r7, r1
 8005868:	0014      	movs	r4, r2
 800586a:	18d5      	adds	r5, r2, r3
 800586c:	42ac      	cmp	r4, r5
 800586e:	d101      	bne.n	8005874 <__sfputs_r+0x12>
 8005870:	2000      	movs	r0, #0
 8005872:	e007      	b.n	8005884 <__sfputs_r+0x22>
 8005874:	7821      	ldrb	r1, [r4, #0]
 8005876:	003a      	movs	r2, r7
 8005878:	0030      	movs	r0, r6
 800587a:	f7ff ffdd 	bl	8005838 <__sfputc_r>
 800587e:	3401      	adds	r4, #1
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d1f3      	bne.n	800586c <__sfputs_r+0xa>
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005888 <_vfiprintf_r>:
 8005888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588a:	b0a1      	sub	sp, #132	; 0x84
 800588c:	000f      	movs	r7, r1
 800588e:	0015      	movs	r5, r2
 8005890:	001e      	movs	r6, r3
 8005892:	9003      	str	r0, [sp, #12]
 8005894:	2800      	cmp	r0, #0
 8005896:	d004      	beq.n	80058a2 <_vfiprintf_r+0x1a>
 8005898:	6a03      	ldr	r3, [r0, #32]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <_vfiprintf_r+0x1a>
 800589e:	f7ff fdb3 	bl	8005408 <__sinit>
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	07db      	lsls	r3, r3, #31
 80058a6:	d405      	bmi.n	80058b4 <_vfiprintf_r+0x2c>
 80058a8:	89bb      	ldrh	r3, [r7, #12]
 80058aa:	059b      	lsls	r3, r3, #22
 80058ac:	d402      	bmi.n	80058b4 <_vfiprintf_r+0x2c>
 80058ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80058b0:	f7ff febb 	bl	800562a <__retarget_lock_acquire_recursive>
 80058b4:	89bb      	ldrh	r3, [r7, #12]
 80058b6:	071b      	lsls	r3, r3, #28
 80058b8:	d502      	bpl.n	80058c0 <_vfiprintf_r+0x38>
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d113      	bne.n	80058e8 <_vfiprintf_r+0x60>
 80058c0:	0039      	movs	r1, r7
 80058c2:	9803      	ldr	r0, [sp, #12]
 80058c4:	f000 fb74 	bl	8005fb0 <__swsetup_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d00d      	beq.n	80058e8 <_vfiprintf_r+0x60>
 80058cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d503      	bpl.n	80058da <_vfiprintf_r+0x52>
 80058d2:	2001      	movs	r0, #1
 80058d4:	4240      	negs	r0, r0
 80058d6:	b021      	add	sp, #132	; 0x84
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058da:	89bb      	ldrh	r3, [r7, #12]
 80058dc:	059b      	lsls	r3, r3, #22
 80058de:	d4f8      	bmi.n	80058d2 <_vfiprintf_r+0x4a>
 80058e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80058e2:	f7ff fea3 	bl	800562c <__retarget_lock_release_recursive>
 80058e6:	e7f4      	b.n	80058d2 <_vfiprintf_r+0x4a>
 80058e8:	2300      	movs	r3, #0
 80058ea:	ac08      	add	r4, sp, #32
 80058ec:	6163      	str	r3, [r4, #20]
 80058ee:	3320      	adds	r3, #32
 80058f0:	7663      	strb	r3, [r4, #25]
 80058f2:	3310      	adds	r3, #16
 80058f4:	76a3      	strb	r3, [r4, #26]
 80058f6:	9607      	str	r6, [sp, #28]
 80058f8:	002e      	movs	r6, r5
 80058fa:	7833      	ldrb	r3, [r6, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <_vfiprintf_r+0x7c>
 8005900:	2b25      	cmp	r3, #37	; 0x25
 8005902:	d148      	bne.n	8005996 <_vfiprintf_r+0x10e>
 8005904:	1b73      	subs	r3, r6, r5
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	42ae      	cmp	r6, r5
 800590a:	d00b      	beq.n	8005924 <_vfiprintf_r+0x9c>
 800590c:	002a      	movs	r2, r5
 800590e:	0039      	movs	r1, r7
 8005910:	9803      	ldr	r0, [sp, #12]
 8005912:	f7ff ffa6 	bl	8005862 <__sfputs_r>
 8005916:	3001      	adds	r0, #1
 8005918:	d100      	bne.n	800591c <_vfiprintf_r+0x94>
 800591a:	e0af      	b.n	8005a7c <_vfiprintf_r+0x1f4>
 800591c:	6963      	ldr	r3, [r4, #20]
 800591e:	9a05      	ldr	r2, [sp, #20]
 8005920:	189b      	adds	r3, r3, r2
 8005922:	6163      	str	r3, [r4, #20]
 8005924:	7833      	ldrb	r3, [r6, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d100      	bne.n	800592c <_vfiprintf_r+0xa4>
 800592a:	e0a7      	b.n	8005a7c <_vfiprintf_r+0x1f4>
 800592c:	2201      	movs	r2, #1
 800592e:	2300      	movs	r3, #0
 8005930:	4252      	negs	r2, r2
 8005932:	6062      	str	r2, [r4, #4]
 8005934:	a904      	add	r1, sp, #16
 8005936:	3254      	adds	r2, #84	; 0x54
 8005938:	1852      	adds	r2, r2, r1
 800593a:	1c75      	adds	r5, r6, #1
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	60e3      	str	r3, [r4, #12]
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	7013      	strb	r3, [r2, #0]
 8005944:	65a3      	str	r3, [r4, #88]	; 0x58
 8005946:	4b59      	ldr	r3, [pc, #356]	; (8005aac <_vfiprintf_r+0x224>)
 8005948:	2205      	movs	r2, #5
 800594a:	0018      	movs	r0, r3
 800594c:	7829      	ldrb	r1, [r5, #0]
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	f000 fbee 	bl	8006130 <memchr>
 8005954:	1c6e      	adds	r6, r5, #1
 8005956:	2800      	cmp	r0, #0
 8005958:	d11f      	bne.n	800599a <_vfiprintf_r+0x112>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	06d3      	lsls	r3, r2, #27
 800595e:	d504      	bpl.n	800596a <_vfiprintf_r+0xe2>
 8005960:	2353      	movs	r3, #83	; 0x53
 8005962:	a904      	add	r1, sp, #16
 8005964:	185b      	adds	r3, r3, r1
 8005966:	2120      	movs	r1, #32
 8005968:	7019      	strb	r1, [r3, #0]
 800596a:	0713      	lsls	r3, r2, #28
 800596c:	d504      	bpl.n	8005978 <_vfiprintf_r+0xf0>
 800596e:	2353      	movs	r3, #83	; 0x53
 8005970:	a904      	add	r1, sp, #16
 8005972:	185b      	adds	r3, r3, r1
 8005974:	212b      	movs	r1, #43	; 0x2b
 8005976:	7019      	strb	r1, [r3, #0]
 8005978:	782b      	ldrb	r3, [r5, #0]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d016      	beq.n	80059ac <_vfiprintf_r+0x124>
 800597e:	002e      	movs	r6, r5
 8005980:	2100      	movs	r1, #0
 8005982:	200a      	movs	r0, #10
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	7832      	ldrb	r2, [r6, #0]
 8005988:	1c75      	adds	r5, r6, #1
 800598a:	3a30      	subs	r2, #48	; 0x30
 800598c:	2a09      	cmp	r2, #9
 800598e:	d94e      	bls.n	8005a2e <_vfiprintf_r+0x1a6>
 8005990:	2900      	cmp	r1, #0
 8005992:	d111      	bne.n	80059b8 <_vfiprintf_r+0x130>
 8005994:	e017      	b.n	80059c6 <_vfiprintf_r+0x13e>
 8005996:	3601      	adds	r6, #1
 8005998:	e7af      	b.n	80058fa <_vfiprintf_r+0x72>
 800599a:	9b05      	ldr	r3, [sp, #20]
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	1ac0      	subs	r0, r0, r3
 80059a0:	2301      	movs	r3, #1
 80059a2:	4083      	lsls	r3, r0
 80059a4:	4313      	orrs	r3, r2
 80059a6:	0035      	movs	r5, r6
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	e7cc      	b.n	8005946 <_vfiprintf_r+0xbe>
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	1d19      	adds	r1, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9107      	str	r1, [sp, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	db01      	blt.n	80059bc <_vfiprintf_r+0x134>
 80059b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ba:	e004      	b.n	80059c6 <_vfiprintf_r+0x13e>
 80059bc:	425b      	negs	r3, r3
 80059be:	60e3      	str	r3, [r4, #12]
 80059c0:	2302      	movs	r3, #2
 80059c2:	4313      	orrs	r3, r2
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	7833      	ldrb	r3, [r6, #0]
 80059c8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ca:	d10a      	bne.n	80059e2 <_vfiprintf_r+0x15a>
 80059cc:	7873      	ldrb	r3, [r6, #1]
 80059ce:	2b2a      	cmp	r3, #42	; 0x2a
 80059d0:	d135      	bne.n	8005a3e <_vfiprintf_r+0x1b6>
 80059d2:	9b07      	ldr	r3, [sp, #28]
 80059d4:	3602      	adds	r6, #2
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	9207      	str	r2, [sp, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db2b      	blt.n	8005a38 <_vfiprintf_r+0x1b0>
 80059e0:	9309      	str	r3, [sp, #36]	; 0x24
 80059e2:	4d33      	ldr	r5, [pc, #204]	; (8005ab0 <_vfiprintf_r+0x228>)
 80059e4:	2203      	movs	r2, #3
 80059e6:	0028      	movs	r0, r5
 80059e8:	7831      	ldrb	r1, [r6, #0]
 80059ea:	f000 fba1 	bl	8006130 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d006      	beq.n	8005a00 <_vfiprintf_r+0x178>
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	1b40      	subs	r0, r0, r5
 80059f6:	4083      	lsls	r3, r0
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3601      	adds	r6, #1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	7831      	ldrb	r1, [r6, #0]
 8005a02:	2206      	movs	r2, #6
 8005a04:	482b      	ldr	r0, [pc, #172]	; (8005ab4 <_vfiprintf_r+0x22c>)
 8005a06:	1c75      	adds	r5, r6, #1
 8005a08:	7621      	strb	r1, [r4, #24]
 8005a0a:	f000 fb91 	bl	8006130 <memchr>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d043      	beq.n	8005a9a <_vfiprintf_r+0x212>
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <_vfiprintf_r+0x230>)
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d125      	bne.n	8005a64 <_vfiprintf_r+0x1dc>
 8005a18:	2207      	movs	r2, #7
 8005a1a:	9b07      	ldr	r3, [sp, #28]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	4393      	bics	r3, r2
 8005a20:	3308      	adds	r3, #8
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	6963      	ldr	r3, [r4, #20]
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	189b      	adds	r3, r3, r2
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	e764      	b.n	80058f8 <_vfiprintf_r+0x70>
 8005a2e:	4343      	muls	r3, r0
 8005a30:	002e      	movs	r6, r5
 8005a32:	2101      	movs	r1, #1
 8005a34:	189b      	adds	r3, r3, r2
 8005a36:	e7a6      	b.n	8005986 <_vfiprintf_r+0xfe>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	e7d0      	b.n	80059e0 <_vfiprintf_r+0x158>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	200a      	movs	r0, #10
 8005a42:	001a      	movs	r2, r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	7831      	ldrb	r1, [r6, #0]
 8005a4a:	1c75      	adds	r5, r6, #1
 8005a4c:	3930      	subs	r1, #48	; 0x30
 8005a4e:	2909      	cmp	r1, #9
 8005a50:	d903      	bls.n	8005a5a <_vfiprintf_r+0x1d2>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <_vfiprintf_r+0x15a>
 8005a56:	9209      	str	r2, [sp, #36]	; 0x24
 8005a58:	e7c3      	b.n	80059e2 <_vfiprintf_r+0x15a>
 8005a5a:	4342      	muls	r2, r0
 8005a5c:	002e      	movs	r6, r5
 8005a5e:	2301      	movs	r3, #1
 8005a60:	1852      	adds	r2, r2, r1
 8005a62:	e7f1      	b.n	8005a48 <_vfiprintf_r+0x1c0>
 8005a64:	aa07      	add	r2, sp, #28
 8005a66:	9200      	str	r2, [sp, #0]
 8005a68:	0021      	movs	r1, r4
 8005a6a:	003a      	movs	r2, r7
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <_vfiprintf_r+0x234>)
 8005a6e:	9803      	ldr	r0, [sp, #12]
 8005a70:	e000      	b.n	8005a74 <_vfiprintf_r+0x1ec>
 8005a72:	bf00      	nop
 8005a74:	9004      	str	r0, [sp, #16]
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d1d3      	bne.n	8005a24 <_vfiprintf_r+0x19c>
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	07db      	lsls	r3, r3, #31
 8005a80:	d405      	bmi.n	8005a8e <_vfiprintf_r+0x206>
 8005a82:	89bb      	ldrh	r3, [r7, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <_vfiprintf_r+0x206>
 8005a88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005a8a:	f7ff fdcf 	bl	800562c <__retarget_lock_release_recursive>
 8005a8e:	89bb      	ldrh	r3, [r7, #12]
 8005a90:	065b      	lsls	r3, r3, #25
 8005a92:	d500      	bpl.n	8005a96 <_vfiprintf_r+0x20e>
 8005a94:	e71d      	b.n	80058d2 <_vfiprintf_r+0x4a>
 8005a96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a98:	e71d      	b.n	80058d6 <_vfiprintf_r+0x4e>
 8005a9a:	aa07      	add	r2, sp, #28
 8005a9c:	9200      	str	r2, [sp, #0]
 8005a9e:	0021      	movs	r1, r4
 8005aa0:	003a      	movs	r2, r7
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <_vfiprintf_r+0x234>)
 8005aa4:	9803      	ldr	r0, [sp, #12]
 8005aa6:	f000 f87b 	bl	8005ba0 <_printf_i>
 8005aaa:	e7e3      	b.n	8005a74 <_vfiprintf_r+0x1ec>
 8005aac:	0800666a 	.word	0x0800666a
 8005ab0:	08006670 	.word	0x08006670
 8005ab4:	08006674 	.word	0x08006674
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	08005863 	.word	0x08005863

08005ac0 <_printf_common>:
 8005ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac2:	0016      	movs	r6, r2
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	688a      	ldr	r2, [r1, #8]
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	000c      	movs	r4, r1
 8005acc:	9000      	str	r0, [sp, #0]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	da00      	bge.n	8005ad4 <_printf_common+0x14>
 8005ad2:	0013      	movs	r3, r2
 8005ad4:	0022      	movs	r2, r4
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	3243      	adds	r2, #67	; 0x43
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d001      	beq.n	8005ae4 <_printf_common+0x24>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	069b      	lsls	r3, r3, #26
 8005ae8:	d502      	bpl.n	8005af0 <_printf_common+0x30>
 8005aea:	6833      	ldr	r3, [r6, #0]
 8005aec:	3302      	adds	r3, #2
 8005aee:	6033      	str	r3, [r6, #0]
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	2306      	movs	r3, #6
 8005af4:	0015      	movs	r5, r2
 8005af6:	401d      	ands	r5, r3
 8005af8:	421a      	tst	r2, r3
 8005afa:	d027      	beq.n	8005b4c <_printf_common+0x8c>
 8005afc:	0023      	movs	r3, r4
 8005afe:	3343      	adds	r3, #67	; 0x43
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d430      	bmi.n	8005b6e <_printf_common+0xae>
 8005b0c:	0022      	movs	r2, r4
 8005b0e:	9901      	ldr	r1, [sp, #4]
 8005b10:	9800      	ldr	r0, [sp, #0]
 8005b12:	9d08      	ldr	r5, [sp, #32]
 8005b14:	3243      	adds	r2, #67	; 0x43
 8005b16:	47a8      	blx	r5
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d025      	beq.n	8005b68 <_printf_common+0xa8>
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	2500      	movs	r5, #0
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d105      	bne.n	8005b34 <_printf_common+0x74>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	68e5      	ldr	r5, [r4, #12]
 8005b2c:	1aed      	subs	r5, r5, r3
 8005b2e:	43eb      	mvns	r3, r5
 8005b30:	17db      	asrs	r3, r3, #31
 8005b32:	401d      	ands	r5, r3
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	dd01      	ble.n	8005b40 <_printf_common+0x80>
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	18ed      	adds	r5, r5, r3
 8005b40:	2600      	movs	r6, #0
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d120      	bne.n	8005b88 <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e010      	b.n	8005b6c <_printf_common+0xac>
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	6832      	ldr	r2, [r6, #0]
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	42ab      	cmp	r3, r5
 8005b54:	ddd2      	ble.n	8005afc <_printf_common+0x3c>
 8005b56:	0022      	movs	r2, r4
 8005b58:	2301      	movs	r3, #1
 8005b5a:	9901      	ldr	r1, [sp, #4]
 8005b5c:	9800      	ldr	r0, [sp, #0]
 8005b5e:	9f08      	ldr	r7, [sp, #32]
 8005b60:	3219      	adds	r2, #25
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1f0      	bne.n	8005b4a <_printf_common+0x8a>
 8005b68:	2001      	movs	r0, #1
 8005b6a:	4240      	negs	r0, r0
 8005b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b6e:	2030      	movs	r0, #48	; 0x30
 8005b70:	18e1      	adds	r1, r4, r3
 8005b72:	3143      	adds	r1, #67	; 0x43
 8005b74:	7008      	strb	r0, [r1, #0]
 8005b76:	0021      	movs	r1, r4
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	3145      	adds	r1, #69	; 0x45
 8005b7c:	7809      	ldrb	r1, [r1, #0]
 8005b7e:	18a2      	adds	r2, r4, r2
 8005b80:	3243      	adds	r2, #67	; 0x43
 8005b82:	3302      	adds	r3, #2
 8005b84:	7011      	strb	r1, [r2, #0]
 8005b86:	e7c1      	b.n	8005b0c <_printf_common+0x4c>
 8005b88:	0022      	movs	r2, r4
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	9800      	ldr	r0, [sp, #0]
 8005b90:	9f08      	ldr	r7, [sp, #32]
 8005b92:	321a      	adds	r2, #26
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d0e6      	beq.n	8005b68 <_printf_common+0xa8>
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7d1      	b.n	8005b42 <_printf_common+0x82>
	...

08005ba0 <_printf_i>:
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	9206      	str	r2, [sp, #24]
 8005ba6:	000a      	movs	r2, r1
 8005ba8:	3243      	adds	r2, #67	; 0x43
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	9005      	str	r0, [sp, #20]
 8005bae:	9204      	str	r2, [sp, #16]
 8005bb0:	7e0a      	ldrb	r2, [r1, #24]
 8005bb2:	000c      	movs	r4, r1
 8005bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bb6:	2a78      	cmp	r2, #120	; 0x78
 8005bb8:	d809      	bhi.n	8005bce <_printf_i+0x2e>
 8005bba:	2a62      	cmp	r2, #98	; 0x62
 8005bbc:	d80b      	bhi.n	8005bd6 <_printf_i+0x36>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	d100      	bne.n	8005bc4 <_printf_i+0x24>
 8005bc2:	e0be      	b.n	8005d42 <_printf_i+0x1a2>
 8005bc4:	497c      	ldr	r1, [pc, #496]	; (8005db8 <_printf_i+0x218>)
 8005bc6:	9103      	str	r1, [sp, #12]
 8005bc8:	2a58      	cmp	r2, #88	; 0x58
 8005bca:	d100      	bne.n	8005bce <_printf_i+0x2e>
 8005bcc:	e093      	b.n	8005cf6 <_printf_i+0x156>
 8005bce:	0026      	movs	r6, r4
 8005bd0:	3642      	adds	r6, #66	; 0x42
 8005bd2:	7032      	strb	r2, [r6, #0]
 8005bd4:	e022      	b.n	8005c1c <_printf_i+0x7c>
 8005bd6:	0010      	movs	r0, r2
 8005bd8:	3863      	subs	r0, #99	; 0x63
 8005bda:	2815      	cmp	r0, #21
 8005bdc:	d8f7      	bhi.n	8005bce <_printf_i+0x2e>
 8005bde:	f7fa fa91 	bl	8000104 <__gnu_thumb1_case_shi>
 8005be2:	0016      	.short	0x0016
 8005be4:	fff6001f 	.word	0xfff6001f
 8005be8:	fff6fff6 	.word	0xfff6fff6
 8005bec:	001ffff6 	.word	0x001ffff6
 8005bf0:	fff6fff6 	.word	0xfff6fff6
 8005bf4:	fff6fff6 	.word	0xfff6fff6
 8005bf8:	003600a3 	.word	0x003600a3
 8005bfc:	fff60083 	.word	0xfff60083
 8005c00:	00b4fff6 	.word	0x00b4fff6
 8005c04:	0036fff6 	.word	0x0036fff6
 8005c08:	fff6fff6 	.word	0xfff6fff6
 8005c0c:	0087      	.short	0x0087
 8005c0e:	0026      	movs	r6, r4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	3642      	adds	r6, #66	; 0x42
 8005c14:	1d11      	adds	r1, r2, #4
 8005c16:	6019      	str	r1, [r3, #0]
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	7033      	strb	r3, [r6, #0]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0a2      	b.n	8005d66 <_printf_i+0x1c6>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	6809      	ldr	r1, [r1, #0]
 8005c24:	1d02      	adds	r2, r0, #4
 8005c26:	060d      	lsls	r5, r1, #24
 8005c28:	d50b      	bpl.n	8005c42 <_printf_i+0xa2>
 8005c2a:	6805      	ldr	r5, [r0, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	da03      	bge.n	8005c3a <_printf_i+0x9a>
 8005c32:	232d      	movs	r3, #45	; 0x2d
 8005c34:	9a04      	ldr	r2, [sp, #16]
 8005c36:	426d      	negs	r5, r5
 8005c38:	7013      	strb	r3, [r2, #0]
 8005c3a:	4b5f      	ldr	r3, [pc, #380]	; (8005db8 <_printf_i+0x218>)
 8005c3c:	270a      	movs	r7, #10
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	e01b      	b.n	8005c7a <_printf_i+0xda>
 8005c42:	6805      	ldr	r5, [r0, #0]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	0649      	lsls	r1, r1, #25
 8005c48:	d5f1      	bpl.n	8005c2e <_printf_i+0x8e>
 8005c4a:	b22d      	sxth	r5, r5
 8005c4c:	e7ef      	b.n	8005c2e <_printf_i+0x8e>
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	1d08      	adds	r0, r1, #4
 8005c54:	6018      	str	r0, [r3, #0]
 8005c56:	062e      	lsls	r6, r5, #24
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0xbe>
 8005c5a:	680d      	ldr	r5, [r1, #0]
 8005c5c:	e003      	b.n	8005c66 <_printf_i+0xc6>
 8005c5e:	066d      	lsls	r5, r5, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0xba>
 8005c62:	680d      	ldr	r5, [r1, #0]
 8005c64:	b2ad      	uxth	r5, r5
 8005c66:	4b54      	ldr	r3, [pc, #336]	; (8005db8 <_printf_i+0x218>)
 8005c68:	2708      	movs	r7, #8
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	2a6f      	cmp	r2, #111	; 0x6f
 8005c6e:	d000      	beq.n	8005c72 <_printf_i+0xd2>
 8005c70:	3702      	adds	r7, #2
 8005c72:	0023      	movs	r3, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	3343      	adds	r3, #67	; 0x43
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db03      	blt.n	8005c8a <_printf_i+0xea>
 8005c82:	2104      	movs	r1, #4
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	438a      	bics	r2, r1
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	d102      	bne.n	8005c94 <_printf_i+0xf4>
 8005c8e:	9e04      	ldr	r6, [sp, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <_printf_i+0x10e>
 8005c94:	9e04      	ldr	r6, [sp, #16]
 8005c96:	0028      	movs	r0, r5
 8005c98:	0039      	movs	r1, r7
 8005c9a:	f7fa fac3 	bl	8000224 <__aeabi_uidivmod>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	3e01      	subs	r6, #1
 8005ca2:	5c5b      	ldrb	r3, [r3, r1]
 8005ca4:	7033      	strb	r3, [r6, #0]
 8005ca6:	002b      	movs	r3, r5
 8005ca8:	0005      	movs	r5, r0
 8005caa:	429f      	cmp	r7, r3
 8005cac:	d9f3      	bls.n	8005c96 <_printf_i+0xf6>
 8005cae:	2f08      	cmp	r7, #8
 8005cb0:	d109      	bne.n	8005cc6 <_printf_i+0x126>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	07db      	lsls	r3, r3, #31
 8005cb6:	d506      	bpl.n	8005cc6 <_printf_i+0x126>
 8005cb8:	6862      	ldr	r2, [r4, #4]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	dc02      	bgt.n	8005cc6 <_printf_i+0x126>
 8005cc0:	2330      	movs	r3, #48	; 0x30
 8005cc2:	3e01      	subs	r6, #1
 8005cc4:	7033      	strb	r3, [r6, #0]
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	1b9b      	subs	r3, r3, r6
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	9b07      	ldr	r3, [sp, #28]
 8005cce:	0021      	movs	r1, r4
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	9805      	ldr	r0, [sp, #20]
 8005cd4:	9b06      	ldr	r3, [sp, #24]
 8005cd6:	aa09      	add	r2, sp, #36	; 0x24
 8005cd8:	f7ff fef2 	bl	8005ac0 <_printf_common>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d147      	bne.n	8005d70 <_printf_i+0x1d0>
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	4240      	negs	r0, r0
 8005ce4:	b00b      	add	sp, #44	; 0x2c
 8005ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce8:	2220      	movs	r2, #32
 8005cea:	6809      	ldr	r1, [r1, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	2278      	movs	r2, #120	; 0x78
 8005cf2:	4932      	ldr	r1, [pc, #200]	; (8005dbc <_printf_i+0x21c>)
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	0021      	movs	r1, r4
 8005cf8:	3145      	adds	r1, #69	; 0x45
 8005cfa:	700a      	strb	r2, [r1, #0]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	c920      	ldmia	r1!, {r5}
 8005d02:	0610      	lsls	r0, r2, #24
 8005d04:	d402      	bmi.n	8005d0c <_printf_i+0x16c>
 8005d06:	0650      	lsls	r0, r2, #25
 8005d08:	d500      	bpl.n	8005d0c <_printf_i+0x16c>
 8005d0a:	b2ad      	uxth	r5, r5
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	07d3      	lsls	r3, r2, #31
 8005d10:	d502      	bpl.n	8005d18 <_printf_i+0x178>
 8005d12:	2320      	movs	r3, #32
 8005d14:	4313      	orrs	r3, r2
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	2710      	movs	r7, #16
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	d1a9      	bne.n	8005c72 <_printf_i+0xd2>
 8005d1e:	2220      	movs	r2, #32
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	4393      	bics	r3, r2
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	e7a4      	b.n	8005c72 <_printf_i+0xd2>
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	680d      	ldr	r5, [r1, #0]
 8005d2c:	1d10      	adds	r0, r2, #4
 8005d2e:	6949      	ldr	r1, [r1, #20]
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	062e      	lsls	r6, r5, #24
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0x19c>
 8005d38:	6019      	str	r1, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0x1a2>
 8005d3c:	066d      	lsls	r5, r5, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0x198>
 8005d40:	8019      	strh	r1, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9e04      	ldr	r6, [sp, #16]
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	e7c0      	b.n	8005ccc <_printf_i+0x12c>
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	1d11      	adds	r1, r2, #4
 8005d4e:	6019      	str	r1, [r3, #0]
 8005d50:	6816      	ldr	r6, [r2, #0]
 8005d52:	2100      	movs	r1, #0
 8005d54:	0030      	movs	r0, r6
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	f000 f9ea 	bl	8006130 <memchr>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d001      	beq.n	8005d64 <_printf_i+0x1c4>
 8005d60:	1b80      	subs	r0, r0, r6
 8005d62:	6060      	str	r0, [r4, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	7013      	strb	r3, [r2, #0]
 8005d6e:	e7ad      	b.n	8005ccc <_printf_i+0x12c>
 8005d70:	0032      	movs	r2, r6
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	9805      	ldr	r0, [sp, #20]
 8005d78:	9d07      	ldr	r5, [sp, #28]
 8005d7a:	47a8      	blx	r5
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d0af      	beq.n	8005ce0 <_printf_i+0x140>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	079b      	lsls	r3, r3, #30
 8005d84:	d415      	bmi.n	8005db2 <_printf_i+0x212>
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	68e0      	ldr	r0, [r4, #12]
 8005d8a:	4298      	cmp	r0, r3
 8005d8c:	daaa      	bge.n	8005ce4 <_printf_i+0x144>
 8005d8e:	0018      	movs	r0, r3
 8005d90:	e7a8      	b.n	8005ce4 <_printf_i+0x144>
 8005d92:	0022      	movs	r2, r4
 8005d94:	2301      	movs	r3, #1
 8005d96:	9906      	ldr	r1, [sp, #24]
 8005d98:	9805      	ldr	r0, [sp, #20]
 8005d9a:	9e07      	ldr	r6, [sp, #28]
 8005d9c:	3219      	adds	r2, #25
 8005d9e:	47b0      	blx	r6
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09d      	beq.n	8005ce0 <_printf_i+0x140>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf0      	bgt.n	8005d92 <_printf_i+0x1f2>
 8005db0:	e7e9      	b.n	8005d86 <_printf_i+0x1e6>
 8005db2:	2500      	movs	r5, #0
 8005db4:	e7f7      	b.n	8005da6 <_printf_i+0x206>
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	0800667b 	.word	0x0800667b
 8005dbc:	0800668c 	.word	0x0800668c

08005dc0 <__sflush_r>:
 8005dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc2:	898b      	ldrh	r3, [r1, #12]
 8005dc4:	0005      	movs	r5, r0
 8005dc6:	000c      	movs	r4, r1
 8005dc8:	071a      	lsls	r2, r3, #28
 8005dca:	d45c      	bmi.n	8005e86 <__sflush_r+0xc6>
 8005dcc:	684a      	ldr	r2, [r1, #4]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	dc04      	bgt.n	8005ddc <__sflush_r+0x1c>
 8005dd2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	dc01      	bgt.n	8005ddc <__sflush_r+0x1c>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ddc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d0fa      	beq.n	8005dd8 <__sflush_r+0x18>
 8005de2:	2200      	movs	r2, #0
 8005de4:	2080      	movs	r0, #128	; 0x80
 8005de6:	682e      	ldr	r6, [r5, #0]
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	001a      	movs	r2, r3
 8005dec:	0140      	lsls	r0, r0, #5
 8005dee:	6a21      	ldr	r1, [r4, #32]
 8005df0:	4002      	ands	r2, r0
 8005df2:	4203      	tst	r3, r0
 8005df4:	d034      	beq.n	8005e60 <__sflush_r+0xa0>
 8005df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	075b      	lsls	r3, r3, #29
 8005dfc:	d506      	bpl.n	8005e0c <__sflush_r+0x4c>
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	1ac0      	subs	r0, r0, r3
 8005e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <__sflush_r+0x4c>
 8005e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e0a:	1ac0      	subs	r0, r0, r3
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	0028      	movs	r0, r5
 8005e12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	47b8      	blx	r7
 8005e18:	89a2      	ldrh	r2, [r4, #12]
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d106      	bne.n	8005e2c <__sflush_r+0x6c>
 8005e1e:	6829      	ldr	r1, [r5, #0]
 8005e20:	291d      	cmp	r1, #29
 8005e22:	d82c      	bhi.n	8005e7e <__sflush_r+0xbe>
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <__sflush_r+0x110>)
 8005e26:	410b      	asrs	r3, r1
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d428      	bmi.n	8005e7e <__sflush_r+0xbe>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	04d2      	lsls	r2, r2, #19
 8005e36:	d505      	bpl.n	8005e44 <__sflush_r+0x84>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <__sflush_r+0x82>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d100      	bne.n	8005e44 <__sflush_r+0x84>
 8005e42:	6560      	str	r0, [r4, #84]	; 0x54
 8005e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e46:	602e      	str	r6, [r5, #0]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d0c5      	beq.n	8005dd8 <__sflush_r+0x18>
 8005e4c:	0023      	movs	r3, r4
 8005e4e:	3344      	adds	r3, #68	; 0x44
 8005e50:	4299      	cmp	r1, r3
 8005e52:	d002      	beq.n	8005e5a <__sflush_r+0x9a>
 8005e54:	0028      	movs	r0, r5
 8005e56:	f7ff fbf1 	bl	800563c <_free_r>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e5e:	e7bc      	b.n	8005dda <__sflush_r+0x1a>
 8005e60:	2301      	movs	r3, #1
 8005e62:	0028      	movs	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d1c6      	bne.n	8005df8 <__sflush_r+0x38>
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0c3      	beq.n	8005df8 <__sflush_r+0x38>
 8005e70:	2b1d      	cmp	r3, #29
 8005e72:	d001      	beq.n	8005e78 <__sflush_r+0xb8>
 8005e74:	2b16      	cmp	r3, #22
 8005e76:	d101      	bne.n	8005e7c <__sflush_r+0xbc>
 8005e78:	602e      	str	r6, [r5, #0]
 8005e7a:	e7ad      	b.n	8005dd8 <__sflush_r+0x18>
 8005e7c:	89a2      	ldrh	r2, [r4, #12]
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	4313      	orrs	r3, r2
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	e7a9      	b.n	8005dda <__sflush_r+0x1a>
 8005e86:	690e      	ldr	r6, [r1, #16]
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d0a5      	beq.n	8005dd8 <__sflush_r+0x18>
 8005e8c:	680f      	ldr	r7, [r1, #0]
 8005e8e:	600e      	str	r6, [r1, #0]
 8005e90:	1bba      	subs	r2, r7, r6
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	079b      	lsls	r3, r3, #30
 8005e98:	d100      	bne.n	8005e9c <__sflush_r+0xdc>
 8005e9a:	694a      	ldr	r2, [r1, #20]
 8005e9c:	60a2      	str	r2, [r4, #8]
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dd99      	ble.n	8005dd8 <__sflush_r+0x18>
 8005ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ea6:	0032      	movs	r2, r6
 8005ea8:	001f      	movs	r7, r3
 8005eaa:	0028      	movs	r0, r5
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	6a21      	ldr	r1, [r4, #32]
 8005eb0:	47b8      	blx	r7
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dc06      	bgt.n	8005ec4 <__sflush_r+0x104>
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	2001      	movs	r0, #1
 8005eba:	89a2      	ldrh	r2, [r4, #12]
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e78a      	b.n	8005dda <__sflush_r+0x1a>
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	1836      	adds	r6, r6, r0
 8005ec8:	1a1b      	subs	r3, r3, r0
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	e7e7      	b.n	8005e9e <__sflush_r+0xde>
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	dfbffffe 	.word	0xdfbffffe

08005ed4 <_fflush_r>:
 8005ed4:	690b      	ldr	r3, [r1, #16]
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	0005      	movs	r5, r0
 8005eda:	000c      	movs	r4, r1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <_fflush_r+0x12>
 8005ee0:	2500      	movs	r5, #0
 8005ee2:	0028      	movs	r0, r5
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d004      	beq.n	8005ef4 <_fflush_r+0x20>
 8005eea:	6a03      	ldr	r3, [r0, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <_fflush_r+0x20>
 8005ef0:	f7ff fa8a 	bl	8005408 <__sinit>
 8005ef4:	220c      	movs	r2, #12
 8005ef6:	5ea3      	ldrsh	r3, [r4, r2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f1      	beq.n	8005ee0 <_fflush_r+0xc>
 8005efc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005efe:	07d2      	lsls	r2, r2, #31
 8005f00:	d404      	bmi.n	8005f0c <_fflush_r+0x38>
 8005f02:	059b      	lsls	r3, r3, #22
 8005f04:	d402      	bmi.n	8005f0c <_fflush_r+0x38>
 8005f06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f08:	f7ff fb8f 	bl	800562a <__retarget_lock_acquire_recursive>
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	0021      	movs	r1, r4
 8005f10:	f7ff ff56 	bl	8005dc0 <__sflush_r>
 8005f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f16:	0005      	movs	r5, r0
 8005f18:	07db      	lsls	r3, r3, #31
 8005f1a:	d4e2      	bmi.n	8005ee2 <_fflush_r+0xe>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	059b      	lsls	r3, r3, #22
 8005f20:	d4df      	bmi.n	8005ee2 <_fflush_r+0xe>
 8005f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f24:	f7ff fb82 	bl	800562c <__retarget_lock_release_recursive>
 8005f28:	e7db      	b.n	8005ee2 <_fflush_r+0xe>

08005f2a <__swbuf_r>:
 8005f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2c:	0006      	movs	r6, r0
 8005f2e:	000d      	movs	r5, r1
 8005f30:	0014      	movs	r4, r2
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d004      	beq.n	8005f40 <__swbuf_r+0x16>
 8005f36:	6a03      	ldr	r3, [r0, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <__swbuf_r+0x16>
 8005f3c:	f7ff fa64 	bl	8005408 <__sinit>
 8005f40:	69a3      	ldr	r3, [r4, #24]
 8005f42:	60a3      	str	r3, [r4, #8]
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	071b      	lsls	r3, r3, #28
 8005f48:	d528      	bpl.n	8005f9c <__swbuf_r+0x72>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d025      	beq.n	8005f9c <__swbuf_r+0x72>
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	b2ef      	uxtb	r7, r5
 8005f56:	1ac0      	subs	r0, r0, r3
 8005f58:	6963      	ldr	r3, [r4, #20]
 8005f5a:	b2ed      	uxtb	r5, r5
 8005f5c:	4283      	cmp	r3, r0
 8005f5e:	dc05      	bgt.n	8005f6c <__swbuf_r+0x42>
 8005f60:	0021      	movs	r1, r4
 8005f62:	0030      	movs	r0, r6
 8005f64:	f7ff ffb6 	bl	8005ed4 <_fflush_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d11d      	bne.n	8005fa8 <__swbuf_r+0x7e>
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	3001      	adds	r0, #1
 8005f70:	3b01      	subs	r3, #1
 8005f72:	60a3      	str	r3, [r4, #8]
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	6022      	str	r2, [r4, #0]
 8005f7a:	701f      	strb	r7, [r3, #0]
 8005f7c:	6963      	ldr	r3, [r4, #20]
 8005f7e:	4283      	cmp	r3, r0
 8005f80:	d004      	beq.n	8005f8c <__swbuf_r+0x62>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	07db      	lsls	r3, r3, #31
 8005f86:	d507      	bpl.n	8005f98 <__swbuf_r+0x6e>
 8005f88:	2d0a      	cmp	r5, #10
 8005f8a:	d105      	bne.n	8005f98 <__swbuf_r+0x6e>
 8005f8c:	0021      	movs	r1, r4
 8005f8e:	0030      	movs	r0, r6
 8005f90:	f7ff ffa0 	bl	8005ed4 <_fflush_r>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d107      	bne.n	8005fa8 <__swbuf_r+0x7e>
 8005f98:	0028      	movs	r0, r5
 8005f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f9c:	0021      	movs	r1, r4
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	f000 f806 	bl	8005fb0 <__swsetup_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0d3      	beq.n	8005f50 <__swbuf_r+0x26>
 8005fa8:	2501      	movs	r5, #1
 8005faa:	426d      	negs	r5, r5
 8005fac:	e7f4      	b.n	8005f98 <__swbuf_r+0x6e>
	...

08005fb0 <__swsetup_r>:
 8005fb0:	4b30      	ldr	r3, [pc, #192]	; (8006074 <__swsetup_r+0xc4>)
 8005fb2:	b570      	push	{r4, r5, r6, lr}
 8005fb4:	0005      	movs	r5, r0
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	000c      	movs	r4, r1
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d004      	beq.n	8005fc8 <__swsetup_r+0x18>
 8005fbe:	6a03      	ldr	r3, [r0, #32]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <__swsetup_r+0x18>
 8005fc4:	f7ff fa20 	bl	8005408 <__sinit>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	5ee2      	ldrsh	r2, [r4, r3]
 8005fcc:	b293      	uxth	r3, r2
 8005fce:	0711      	lsls	r1, r2, #28
 8005fd0:	d423      	bmi.n	800601a <__swsetup_r+0x6a>
 8005fd2:	06d9      	lsls	r1, r3, #27
 8005fd4:	d407      	bmi.n	8005fe6 <__swsetup_r+0x36>
 8005fd6:	2309      	movs	r3, #9
 8005fd8:	2001      	movs	r0, #1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	3337      	adds	r3, #55	; 0x37
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	4240      	negs	r0, r0
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	075b      	lsls	r3, r3, #29
 8005fe8:	d513      	bpl.n	8006012 <__swsetup_r+0x62>
 8005fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fec:	2900      	cmp	r1, #0
 8005fee:	d008      	beq.n	8006002 <__swsetup_r+0x52>
 8005ff0:	0023      	movs	r3, r4
 8005ff2:	3344      	adds	r3, #68	; 0x44
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	d002      	beq.n	8005ffe <__swsetup_r+0x4e>
 8005ff8:	0028      	movs	r0, r5
 8005ffa:	f7ff fb1f 	bl	800563c <_free_r>
 8005ffe:	2300      	movs	r3, #0
 8006000:	6363      	str	r3, [r4, #52]	; 0x34
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	4393      	bics	r3, r2
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	2300      	movs	r3, #0
 800600c:	6063      	str	r3, [r4, #4]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	2308      	movs	r3, #8
 8006014:	89a2      	ldrh	r2, [r4, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <__swsetup_r+0x88>
 8006020:	21a0      	movs	r1, #160	; 0xa0
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	0089      	lsls	r1, r1, #2
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	400b      	ands	r3, r1
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <__swsetup_r+0x88>
 8006030:	0021      	movs	r1, r4
 8006032:	0028      	movs	r0, r5
 8006034:	f000 f8b0 	bl	8006198 <__smakebuf_r>
 8006038:	220c      	movs	r2, #12
 800603a:	5ea3      	ldrsh	r3, [r4, r2]
 800603c:	2001      	movs	r0, #1
 800603e:	001a      	movs	r2, r3
 8006040:	b299      	uxth	r1, r3
 8006042:	4002      	ands	r2, r0
 8006044:	4203      	tst	r3, r0
 8006046:	d00f      	beq.n	8006068 <__swsetup_r+0xb8>
 8006048:	2200      	movs	r2, #0
 800604a:	60a2      	str	r2, [r4, #8]
 800604c:	6962      	ldr	r2, [r4, #20]
 800604e:	4252      	negs	r2, r2
 8006050:	61a2      	str	r2, [r4, #24]
 8006052:	2000      	movs	r0, #0
 8006054:	6922      	ldr	r2, [r4, #16]
 8006056:	4282      	cmp	r2, r0
 8006058:	d1c4      	bne.n	8005fe4 <__swsetup_r+0x34>
 800605a:	0609      	lsls	r1, r1, #24
 800605c:	d5c2      	bpl.n	8005fe4 <__swsetup_r+0x34>
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	4313      	orrs	r3, r2
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	3801      	subs	r0, #1
 8006066:	e7bd      	b.n	8005fe4 <__swsetup_r+0x34>
 8006068:	0788      	lsls	r0, r1, #30
 800606a:	d400      	bmi.n	800606e <__swsetup_r+0xbe>
 800606c:	6962      	ldr	r2, [r4, #20]
 800606e:	60a2      	str	r2, [r4, #8]
 8006070:	e7ef      	b.n	8006052 <__swsetup_r+0xa2>
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	200000e8 	.word	0x200000e8

08006078 <_raise_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	0004      	movs	r4, r0
 800607c:	000d      	movs	r5, r1
 800607e:	291f      	cmp	r1, #31
 8006080:	d904      	bls.n	800608c <_raise_r+0x14>
 8006082:	2316      	movs	r3, #22
 8006084:	6003      	str	r3, [r0, #0]
 8006086:	2001      	movs	r0, #1
 8006088:	4240      	negs	r0, r0
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <_raise_r+0x24>
 8006092:	008a      	lsls	r2, r1, #2
 8006094:	189b      	adds	r3, r3, r2
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	2a00      	cmp	r2, #0
 800609a:	d108      	bne.n	80060ae <_raise_r+0x36>
 800609c:	0020      	movs	r0, r4
 800609e:	f000 f831 	bl	8006104 <_getpid_r>
 80060a2:	002a      	movs	r2, r5
 80060a4:	0001      	movs	r1, r0
 80060a6:	0020      	movs	r0, r4
 80060a8:	f000 f81a 	bl	80060e0 <_kill_r>
 80060ac:	e7ed      	b.n	800608a <_raise_r+0x12>
 80060ae:	2000      	movs	r0, #0
 80060b0:	2a01      	cmp	r2, #1
 80060b2:	d0ea      	beq.n	800608a <_raise_r+0x12>
 80060b4:	1c51      	adds	r1, r2, #1
 80060b6:	d103      	bne.n	80060c0 <_raise_r+0x48>
 80060b8:	2316      	movs	r3, #22
 80060ba:	3001      	adds	r0, #1
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	e7e4      	b.n	800608a <_raise_r+0x12>
 80060c0:	2400      	movs	r4, #0
 80060c2:	0028      	movs	r0, r5
 80060c4:	601c      	str	r4, [r3, #0]
 80060c6:	4790      	blx	r2
 80060c8:	0020      	movs	r0, r4
 80060ca:	e7de      	b.n	800608a <_raise_r+0x12>

080060cc <raise>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <raise+0x10>)
 80060d0:	0001      	movs	r1, r0
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	f7ff ffd0 	bl	8006078 <_raise_r>
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	200000e8 	.word	0x200000e8

080060e0 <_kill_r>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b570      	push	{r4, r5, r6, lr}
 80060e4:	4d06      	ldr	r5, [pc, #24]	; (8006100 <_kill_r+0x20>)
 80060e6:	0004      	movs	r4, r0
 80060e8:	0008      	movs	r0, r1
 80060ea:	0011      	movs	r1, r2
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	f7fa fccb 	bl	8000a88 <_kill>
 80060f2:	1c43      	adds	r3, r0, #1
 80060f4:	d103      	bne.n	80060fe <_kill_r+0x1e>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d000      	beq.n	80060fe <_kill_r+0x1e>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	20000550 	.word	0x20000550

08006104 <_getpid_r>:
 8006104:	b510      	push	{r4, lr}
 8006106:	f7fa fcb9 	bl	8000a7c <_getpid>
 800610a:	bd10      	pop	{r4, pc}

0800610c <_sbrk_r>:
 800610c:	2300      	movs	r3, #0
 800610e:	b570      	push	{r4, r5, r6, lr}
 8006110:	4d06      	ldr	r5, [pc, #24]	; (800612c <_sbrk_r+0x20>)
 8006112:	0004      	movs	r4, r0
 8006114:	0008      	movs	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fa fd38 	bl	8000b8c <_sbrk>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d103      	bne.n	8006128 <_sbrk_r+0x1c>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d000      	beq.n	8006128 <_sbrk_r+0x1c>
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	20000550 	.word	0x20000550

08006130 <memchr>:
 8006130:	b2c9      	uxtb	r1, r1
 8006132:	1882      	adds	r2, r0, r2
 8006134:	4290      	cmp	r0, r2
 8006136:	d101      	bne.n	800613c <memchr+0xc>
 8006138:	2000      	movs	r0, #0
 800613a:	4770      	bx	lr
 800613c:	7803      	ldrb	r3, [r0, #0]
 800613e:	428b      	cmp	r3, r1
 8006140:	d0fb      	beq.n	800613a <memchr+0xa>
 8006142:	3001      	adds	r0, #1
 8006144:	e7f6      	b.n	8006134 <memchr+0x4>
	...

08006148 <__swhatbuf_r>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	000e      	movs	r6, r1
 800614c:	001d      	movs	r5, r3
 800614e:	230e      	movs	r3, #14
 8006150:	5ec9      	ldrsh	r1, [r1, r3]
 8006152:	0014      	movs	r4, r2
 8006154:	b096      	sub	sp, #88	; 0x58
 8006156:	2900      	cmp	r1, #0
 8006158:	da0c      	bge.n	8006174 <__swhatbuf_r+0x2c>
 800615a:	89b2      	ldrh	r2, [r6, #12]
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	0011      	movs	r1, r2
 8006160:	4019      	ands	r1, r3
 8006162:	421a      	tst	r2, r3
 8006164:	d013      	beq.n	800618e <__swhatbuf_r+0x46>
 8006166:	2100      	movs	r1, #0
 8006168:	3b40      	subs	r3, #64	; 0x40
 800616a:	2000      	movs	r0, #0
 800616c:	6029      	str	r1, [r5, #0]
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	b016      	add	sp, #88	; 0x58
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	466a      	mov	r2, sp
 8006176:	f000 f84d 	bl	8006214 <_fstat_r>
 800617a:	2800      	cmp	r0, #0
 800617c:	dbed      	blt.n	800615a <__swhatbuf_r+0x12>
 800617e:	23f0      	movs	r3, #240	; 0xf0
 8006180:	9901      	ldr	r1, [sp, #4]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	4019      	ands	r1, r3
 8006186:	4b03      	ldr	r3, [pc, #12]	; (8006194 <__swhatbuf_r+0x4c>)
 8006188:	18c9      	adds	r1, r1, r3
 800618a:	424b      	negs	r3, r1
 800618c:	4159      	adcs	r1, r3
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	e7ea      	b.n	800616a <__swhatbuf_r+0x22>
 8006194:	ffffe000 	.word	0xffffe000

08006198 <__smakebuf_r>:
 8006198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800619a:	2602      	movs	r6, #2
 800619c:	898b      	ldrh	r3, [r1, #12]
 800619e:	0005      	movs	r5, r0
 80061a0:	000c      	movs	r4, r1
 80061a2:	4233      	tst	r3, r6
 80061a4:	d006      	beq.n	80061b4 <__smakebuf_r+0x1c>
 80061a6:	0023      	movs	r3, r4
 80061a8:	3347      	adds	r3, #71	; 0x47
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	2301      	movs	r3, #1
 80061b0:	6163      	str	r3, [r4, #20]
 80061b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80061b4:	466a      	mov	r2, sp
 80061b6:	ab01      	add	r3, sp, #4
 80061b8:	f7ff ffc6 	bl	8006148 <__swhatbuf_r>
 80061bc:	9900      	ldr	r1, [sp, #0]
 80061be:	0007      	movs	r7, r0
 80061c0:	0028      	movs	r0, r5
 80061c2:	f7ff faa7 	bl	8005714 <_malloc_r>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d108      	bne.n	80061dc <__smakebuf_r+0x44>
 80061ca:	220c      	movs	r2, #12
 80061cc:	5ea3      	ldrsh	r3, [r4, r2]
 80061ce:	059a      	lsls	r2, r3, #22
 80061d0:	d4ef      	bmi.n	80061b2 <__smakebuf_r+0x1a>
 80061d2:	2203      	movs	r2, #3
 80061d4:	4393      	bics	r3, r2
 80061d6:	431e      	orrs	r6, r3
 80061d8:	81a6      	strh	r6, [r4, #12]
 80061da:	e7e4      	b.n	80061a6 <__smakebuf_r+0xe>
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	89a2      	ldrh	r2, [r4, #12]
 80061e0:	6020      	str	r0, [r4, #0]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	9b00      	ldr	r3, [sp, #0]
 80061e8:	6120      	str	r0, [r4, #16]
 80061ea:	6163      	str	r3, [r4, #20]
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <__smakebuf_r+0x74>
 80061f2:	0028      	movs	r0, r5
 80061f4:	230e      	movs	r3, #14
 80061f6:	5ee1      	ldrsh	r1, [r4, r3]
 80061f8:	f000 f81e 	bl	8006238 <_isatty_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d005      	beq.n	800620c <__smakebuf_r+0x74>
 8006200:	2303      	movs	r3, #3
 8006202:	89a2      	ldrh	r2, [r4, #12]
 8006204:	439a      	bics	r2, r3
 8006206:	3b02      	subs	r3, #2
 8006208:	4313      	orrs	r3, r2
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	433b      	orrs	r3, r7
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	e7ce      	b.n	80061b2 <__smakebuf_r+0x1a>

08006214 <_fstat_r>:
 8006214:	2300      	movs	r3, #0
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	4d06      	ldr	r5, [pc, #24]	; (8006234 <_fstat_r+0x20>)
 800621a:	0004      	movs	r4, r0
 800621c:	0008      	movs	r0, r1
 800621e:	0011      	movs	r1, r2
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	f7fa fc90 	bl	8000b46 <_fstat>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	d103      	bne.n	8006232 <_fstat_r+0x1e>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d000      	beq.n	8006232 <_fstat_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd70      	pop	{r4, r5, r6, pc}
 8006234:	20000550 	.word	0x20000550

08006238 <_isatty_r>:
 8006238:	2300      	movs	r3, #0
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	4d06      	ldr	r5, [pc, #24]	; (8006258 <_isatty_r+0x20>)
 800623e:	0004      	movs	r4, r0
 8006240:	0008      	movs	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fa fc8d 	bl	8000b62 <_isatty>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d103      	bne.n	8006254 <_isatty_r+0x1c>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d000      	beq.n	8006254 <_isatty_r+0x1c>
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	20000550 	.word	0x20000550

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
